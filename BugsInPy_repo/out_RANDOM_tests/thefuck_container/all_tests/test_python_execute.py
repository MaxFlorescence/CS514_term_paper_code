# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import python_execute as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "H"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "Vt+c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -832
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = 555
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    float_0 = -23.639
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = -867
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bytes_0 = b"\x8b\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "\x0cW"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "OVc\\T3$>Bw&z|xt4E_]B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    float_0 = -3262.15
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    dict_0 = {none_type_0: list_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b"\xf0Bn\x97VL"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = -24
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = "Xs33Ck\\Nr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_28():
    pass


@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = "0<@'IrpWu<<Q\x0b"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    float_0 = 2798.342314
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "w,4`%nqd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bytes_0 = b"\x03\xfc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    float_0 = 1141.02
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    int_0 = -1713
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    bytes_0 = b"W\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0, object_0, list_0]
    list_2 = [list_1, list_1]
    bool_0 = True
    tuple_0 = (list_2, bool_0)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_40():
    bytes_0 = b"\xe2\x95~\xbd\xf9\xe3j\xe6\xc9\xb9b\xee\xe97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "uB\n\x0bKkD\rdX(\\qtf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    float_0 = 1661.11
    str_0 = "1$VVw_Qze$[q%\x0bh:"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    complex_0 = 988 - 2362.95j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


def test_case_46():
    pass


@pytest.mark.xfail(strict=True)
def test_case_47():
    int_0 = -1338
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    int_0 = -956
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_50():
    bytes_0 = b"$\x0cyC\x9bYx\x8b\xf6-5\x88\x9e\xfe,\xfe\xfe\xe8\x94"
    int_0 = 963
    tuple_0 = (bytes_0, int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = "\\g>V0St\x0bUNzPlo#E|Ya`"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    tuple_0 = (str_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_52():
    pass


@pytest.mark.xfail(strict=True)
def test_case_53():
    float_0 = 1666.291
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    str_0 = ";|N]EeC\\RE`i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    complex_0 = 754.763 - 467.14j
    module_0.get_new_command(complex_0, complex_0)


def test_case_57():
    pass


@pytest.mark.xfail(strict=True)
def test_case_58():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    str_0 = "%y<!0vi8'U#gE"
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bytes_0 = b"\xbb~\xc0\xda\xafD^\x9a\x97]\x00\xcf\xe6\xc0I\xee\x97\x85\x0b\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    int_0 = 75
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    str_0 = "@cc\n[OK):-{Se7o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    bool_0 = False
    int_0 = 244
    dict_0 = {bool_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    bytes_0 = b'GN\x04\xba\xba\x0c\xc6"K\x94\x8cA/u\xc3.\xe2\x0c\x17'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    int_0 = -1154
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    str_0 = "i"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    complex_0 = 3021.438 - 391.7528j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    int_0 = -1264
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    str_0 = "`>G\tX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    bytes_0 = b'\xa8\xa5n\xb4U\x8d"\x0c\xc9'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    bool_0 = False
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    int_0 = -2494
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    int_0 = 1753
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    str_0 = 'MPUJIbP\n_Y|h0")r;;'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    int_0 = -3246
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    str_0 = "$w8{I.EJm"
    none_type_0 = None
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: none_type_0, str_0: str_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    float_0 = -1261.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    float_0 = 2330.00235
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    float_0 = -761.44
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    float_0 = -2707.11
    bool_0 = False
    bytes_0 = b"\xe5\xc9\xe2\x0bX\x94q\x0b\xf0\x90\x98\xdc:\xb0\x9c\x0b"
    tuple_0 = (float_0, bool_0, bytes_0)
    bytes_1 = b"\x9d\xf9s\xf2"
    tuple_1 = (tuple_0, tuple_0, bytes_1)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_89():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_90():
    pass


@pytest.mark.xfail(strict=True)
def test_case_91():
    bytes_0 = b"~4"
    module_0.match(bytes_0, bytes_0)


def test_case_92():
    pass


@pytest.mark.xfail(strict=True)
def test_case_93():
    bool_0 = True
    bytes_0 = b"%\xb1\x8d\x8f\xb2\x11:u'\xe2\xc79\xf4'\xd0e\xf8\xc38"
    bytes_1 = b"yq_\x8a\xfcE\x13\xc7\xf4]"
    tuple_0 = (bytes_0, bytes_1, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    str_0 = "\nA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    float_0 = -3128.5654
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    int_0 = -5471
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    str_0 = "l\nJJ+,Kl6$a7y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bool_0 = False
    bytes_0 = b"0\xc2\xc5"
    list_0 = []
    object_0 = module_1.object(*list_0)
    str_0 = ">+8tybuRQ:"
    dict_0 = {bool_0: bool_0, bytes_0: object_0, bool_0: bool_0, str_0: bool_0}
    tuple_0 = (bool_0, bool_0, bytes_0, dict_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    int_0 = 418
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    bytes_0 = b"\xde\xebZ\xb0~\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    str_0 = "^>U+\tl8}`j6s(oa)UX~J"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    int_0 = -1106
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    str_0 = "NT`N=u~{@uI{\tm%)"
    bool_0 = False
    str_1 = ""
    dict_0 = {str_0: bool_0, str_0: bool_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    bool_1 = False
    module_0.get_new_command(tuple_0, bool_1)


def test_case_110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_111():
    bytes_0 = b"\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    none_type_0 = None
    bytes_0 = b"\xa169\xc17\xda\xb5e\x0c\xb0\xdf\x9e+\xe8\x9c[\x06"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    float_0 = -1004.498
    dict_0 = {float_0: float_0}
    tuple_0 = (float_0, dict_0)
    tuple_1 = (tuple_0,)
    module_0.match(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_115():
    complex_0 = 1201.7009 + 3710.37j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    str_0 = "\x0cO'=Sf+m[/R\x0c\x0bJY4r8e"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_119():
    int_0 = 28
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    bytes_0 = b"!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    int_0 = 4510
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    float_0 = -3810.935
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    int_0 = 1010
    str_0 = "Yh/](W1A7"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, str_0}
    tuple_1 = (int_0, tuple_0, set_0, int_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    float_0 = 1741.88593
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    int_0 = -142
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_128():
    pass


@pytest.mark.xfail(strict=True)
def test_case_129():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    complex_0 = -110.79552 + 1720.62j
    set_0 = {complex_0, complex_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    float_0 = -2823.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    int_0 = -1246
    module_0.get_new_command(int_0, int_0)


def test_case_135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_136():
    str_0 = "/,vh-_N G}pM9|Fd3DP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    float_0 = -1806.16
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    float_0 = -3862.82613
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    int_0 = -2309
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    bytes_0 = b"e\xa8\xf2]-\xbd\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    int_0 = -1046
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    str_0 = "/1nHv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    float_0 = 1477.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    str_0 = "D3U^58%I!f~dMd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    complex_0 = -4097.4 + 960j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    bytes_0 = b"\xf2\x03\xe9\xbc\xfc\xb9i\xf7,\x13\xbeY\xb3\xdc\xba\x9f\x01lz"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    float_0 = -1910.007
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    int_0 = -1243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    bytes_0 = b"\x04*^\xdbw\x08\x16\xeax\xa1\xb2h\xbe\xb5\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    bytes_0 = b" {\x12\xba\xe1R"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_157():
    str_0 = "5\t\r?O"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


def test_case_159():
    object_0 = module_1.object()


def test_case_160():
    pass


@pytest.mark.xfail(strict=True)
def test_case_161():
    str_0 = "*Z3k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    float_0 = -829.1385
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    int_0 = 1714
    module_0.match(int_0, int_0)


def test_case_164():
    pass


@pytest.mark.xfail(strict=True)
def test_case_165():
    str_0 = "@iXPz(W{~\tXm[V\rPon"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    str_0 = "l\\o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    bool_0 = False
    float_0 = 2414.8712
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, float_0: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_170():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    str_0 = "=y`%5PS.*P/cEzbIKJY*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


def test_case_173():
    pass


@pytest.mark.xfail(strict=True)
def test_case_174():
    int_0 = 882
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    float_0 = 3423.403647
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_178():
    pass


@pytest.mark.xfail(strict=True)
def test_case_179():
    float_0 = 5342.5857
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "ch,b,[C(1`AFd"
    tuple_0 = (dict_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


def test_case_182():
    pass


@pytest.mark.xfail(strict=True)
def test_case_183():
    int_0 = -1693
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    int_0 = 275
    set_0 = {int_0, int_0, int_0}
    int_1 = 1086
    tuple_0 = (set_0, int_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    none_type_0 = None
    str_0 = "u| \\Y{~-*B{i5H\nC"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    str_0 = "Y'V"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    int_0 = -1000
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    int_0 = 3014
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    complex_0 = 1562.59 + 288j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    int_0 = -2353
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    bytes_0 = b"\xc8p2d\xa4zN\xe3j\xe5\x8f\x02\x1fH"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    bytes_0 = b"\x01\xc1|\x9b\x1a?s\xe1\x16\x00\xaew"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    bytes_0 = b""
    bytes_1 = b")\xa3\x14_d\xf6\x92j\xf0\xa4\x8b\x03\xb3-~\xb6"
    list_0 = [bytes_0, bytes_0, bytes_1]
    bytes_2 = b"|kF\x83\x97\xca9\xa5Y[\xc7\x9e\x08"
    tuple_0 = (bytes_0, bytes_1, list_0, bytes_2)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    bytes_0 = b"K\xd0z\xa6\x93\xc1\xfe\xdf\xf0a\x87"
    module_0.match(bytes_0, bytes_0)


def test_case_198():
    pass


@pytest.mark.xfail(strict=True)
def test_case_199():
    str_0 = ":v\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    int_0 = -162
    set_0 = {int_0, int_0}
    list_0 = [int_0, set_0, set_0, set_0]
    str_0 = "]Bu!d&Z|djw+d/D"
    none_type_0 = None
    str_1 = "Eh\r5Rb[g<{c"
    str_2 = "_xLyRf[9+hv`^): "
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    bool_0 = False
    str_0 = "f<\x0bT5rD78X+"
    tuple_0 = (str_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    bytes_0 = b"\xc6\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    str_0 = "t)wY\r[g RVB8LlM#dx3Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    bytes_0 = b"\x94&\xde}\xeaS,\xe4\xe4\x0c\xe6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    bytes_0 = b"\x93\x93\xc99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    str_0 = "`VZvyEhUdjz'-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    complex_0 = 701.9 + 1495.4567j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    str_0 = ".NJ{_TQD^1u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


def test_case_214():
    pass


@pytest.mark.xfail(strict=True)
def test_case_215():
    int_0 = -2889
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    str_0 = "I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    bool_0 = True
    list_0 = []
    tuple_0 = (list_0,)
    float_0 = 1506.8842
    tuple_1 = (bool_0, bool_0, tuple_0, float_0)
    tuple_2 = (bool_0, tuple_1)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    complex_0 = 2035.7 + 705.19j
    int_0 = 56
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    str_0 = ":#$UK0P"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    str_0 = "wG?C3=i~jTu\nX&=X\n|\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bytes_0 = b"G\xaa\x0c\xe7\x1b\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    bytes_0 = b"x\xef\xef\xeb\x91x\xf4\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    str_0 = "}Bp"
    module_0.get_new_command(str_0, str_0)


def test_case_227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_228():
    bytes_0 = b"\x1aoH\xd0\x81\x8f\xefs\x11vB\xd4\xd8="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    str_0 = "7unzxSzB?j~gu"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    float_0 = -1320.28
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_232():
    str_0 = "w\\+@Jw"
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, str_0: str_0, str_0: str_0}
    tuple_1 = (str_0, str_0, tuple_0, dict_0)
    list_0 = [str_0, str_0, tuple_1]
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_233():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    str_0 = "<W,wb`C{Wpg\n]6>0N"
    module_0.get_new_command(str_0, str_0)


def test_case_235():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_236():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    float_0 = 1920.42
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, float_0, dict_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    int_0 = 1568
    str_0 = "-ih%Eo0(f-il`)g:"
    tuple_0 = (int_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    int_0 = 4126
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    complex_0 = 127.552624 + 1910.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    int_0 = 2433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    float_0 = 990.254215
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    int_0 = 3257
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    float_0 = -2195.088301
    module_0.get_new_command(float_0, float_0)


def test_case_245():
    pass


@pytest.mark.xfail(strict=True)
def test_case_246():
    int_0 = -258
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    tuple_0 = ()
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    int_0 = -3078
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    int_0 = 347
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    str_0 = "IKJ'g=G"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    str_0 = "/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    bytes_0 = b"\\\xcc0\xd0\x99\xd6\xff"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    int_0 = -3285
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    none_type_0 = None
    str_0 = ""
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    complex_0 = 2380 + 93.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    float_0 = 2104.0
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    object_0 = module_1.object()
    bytes_0 = b""
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    object_0 = module_1.object()
    complex_0 = 532.8291 - 381.0738j
    module_0.match(object_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    str_0 = "9Qe\r~Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    float_0 = -3258.73232
    int_0 = -2648
    tuple_0 = (int_0,)
    tuple_1 = (float_0, float_0, tuple_0, tuple_0)
    set_0 = {tuple_1, int_0, tuple_1}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    bytes_0 = b"\xb6X\x9e3b^\xd4\xca\x93"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_268():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_269():
    complex_0 = -205 - 25.49j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    bytes_0 = b"@\xce\xf9dV:\xa6\xbcH\xa6\xb4\xe5\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    bytes_0 = b"\x82\xb6\xc2\x80Q\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    int_0 = 958
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    float_0 = 644.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    bytes_0 = b"\x8c\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    str_0 = "z!+Q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bool_0 = True
    float_0 = -2778.6
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    complex_0 = 1310 - 1079.7099j
    module_0.match(complex_0, complex_0)


def test_case_278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_279():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    bytes_0 = b'\\|\xcf\x1f\xba\xc7\x16":\xa8-\x7f'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    float_0 = -919.25
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    float_0 = -1248.477038
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    float_0 = -790.94716
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    bool_0 = True
    int_0 = -7228
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    float_0 = -667.5216
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    tuple_0 = ()
    str_0 = "}n"
    bool_0 = False
    tuple_1 = (tuple_0, str_0, str_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_290():
    pass


@pytest.mark.xfail(strict=True)
def test_case_291():
    float_0 = 856.86982
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    bytes_0 = b"C#\n\x18X\xa1\x95"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    int_0 = 130
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, int_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    bytes_0 = b"B\xd1\xf2\x04\xf9\xba\xceR~\xe3%5\xed\xd7\x8c\x93"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    complex_0 = 3537.241837 + 538.1j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    int_0 = 2821
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    str_0 = "q2-[7\x0b8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    str_0 = "qE[/_gB78Y\x0c(xq)y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    bytes_0 = b"\x12"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    int_0 = 201
    list_0 = [int_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


def test_case_304():
    pass


@pytest.mark.xfail(strict=True)
def test_case_305():
    none_type_0 = None
    int_0 = -696
    dict_0 = {none_type_0: int_0, none_type_0: int_0, none_type_0: int_0}
    tuple_0 = (none_type_0, dict_0)
    dict_1 = {none_type_0: none_type_0, int_0: tuple_0, int_0: dict_0}
    module_0.get_new_command(none_type_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_306():
    int_0 = -409
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    float_0 = -2130.063358
    set_0 = {float_0}
    complex_0 = -139.568575 - 2160.1409j
    tuple_0 = (float_0, set_0, complex_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    float_0 = -1386.5509
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    int_0 = -392
    int_1 = 826
    set_0 = {int_0, int_0, int_0, int_1}
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    tuple_0 = ()
    bool_0 = False
    bool_1 = True
    tuple_1 = (tuple_0, bool_0, bool_1)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    int_0 = -628
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    list_0 = []
    bytes_0 = b"b\xda\xf9\x97BsN\xb9-\xd2\x0b\x1a\xdd&\xd0t\xa3!>\xb5"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    float_0 = -1246.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_317():
    str_0 = '4"4kk${Yf7iDv*=.S)G\\'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    int_0 = -1799
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    bytes_0 = b"S\xf0LCsO6\xdf\xe2i\xb4\x94\xc5\xc1*\xd5\xf8I\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    float_0 = -2346.394063
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    int_0 = -1185
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    set_0 = set()
    list_0 = [set_0]
    float_0 = -2827.685714
    tuple_0 = (list_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    bytes_0 = b"\xc6N\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    str_0 = "O `z~Pb6SzqF)(jm9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    float_0 = -72.445
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    float_0 = 1924.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    str_0 = "pgT*#\\1y\rO[1gVB{;m"
    int_0 = -2944
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    bytes_0 = b"\xda\xba`\xf8U"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    bytes_0 = b"\xb9YeR\xddtj\xfdz\xc5\x85\xe8 C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    bytes_0 = b"\x9c\xd8]\x19\x9c\x18!@\xc5\x8f\x9fh\x01+k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    str_0 = "\x0c\r&,?kL}'"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    str_0 = 'Yf"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    float_0 = -328.84
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bytes_0 = b"\x1f\xde\x8dcXG\xd2\x9f\xa2\xfa\xe6C\x05\x13\\\xea"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    int_0 = -65
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    float_0 = -2077.39
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    float_0 = 1824.839
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    bytes_0 = b":\xc7\x1a\xc5/\xfe\x11\xa5R"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    int_0 = -341
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    int_0 = -32
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    bytes_0 = b"T(\x9b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    bool_0 = False
    bytes_0 = b"\x0e\x7f|0\xf5@\xc3\xa7\xda\x10\xcb"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    int_0 = 183
    list_0 = [int_0]
    str_0 = "::OT&dSHrc>m"
    float_0 = 3877.369044
    tuple_0 = (int_0, list_0, str_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    bytes_0 = b'a\xed\x03"y\xbcw\x98\xddZ\xf8w'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    bytes_0 = b"6<\xd1\xdc\xb1\x11'e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    float_0 = 408.98085
    module_0.match(float_0, float_0)


def test_case_351():
    pass


@pytest.mark.xfail(strict=True)
def test_case_352():
    float_0 = 25.15726
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    str_0 = "h~lo]RjiI#.u\nC;_F"
    str_1 = "\x0cV3Ln!"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    int_0 = 392
    float_0 = 4556.573863
    list_0 = [int_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    bytes_0 = b"\xa1\xbd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    int_0 = 4633
    list_0 = [int_0]
    tuple_0 = (int_0, int_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    complex_0 = 1289.4 + 1671.56117j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    set_0 = {tuple_0, object_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    str_0 = "6dC>Oe'\x0bWFj;9luAx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    int_0 = -363
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    int_0 = 2359
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    complex_0 = -2569.278 - 3676.228864j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    bytes_0 = b"]\xc4\x16fKZ\x9b{n\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_368():
    int_0 = -2956
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    int_0 = -5252
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (tuple_0, int_0)
    dict_0 = {tuple_0: int_0, tuple_1: tuple_1}
    tuple_2 = (bool_0, tuple_1, dict_0, int_0)
    bytes_0 = b"P\xf6\xfe\x1c)\xd1\tsiIm*\x02"
    tuple_3 = (int_0, tuple_2, dict_0, bytes_0)
    module_0.get_new_command(tuple_3, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    bytes_0 = b"\x99\xfbS\x03\xf7\xda\x1bP\x10(a\x92\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    bytes_0 = b"\\c\xd3J\xc7!\x90@K`\xd5\x8b"
    module_0.match(bytes_0, bytes_0)


def test_case_373():
    pass


@pytest.mark.xfail(strict=True)
def test_case_374():
    bytes_0 = b"ue\x91\x95X\x87)\x0ca9q\x96\xc1\x0fF\xa5G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    int_0 = -1298
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    float_0 = 734.787
    str_0 = "rs!f1< 8\x0b#BqslKz\x0c$+"
    tuple_0 = (float_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    bytes_0 = b"\xee\x7f\x80T\xeb\xe8\x8a\xec\x91\x16\x1a\xfb=\xebdC\xf2#\x88m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    complex_0 = 1280.040771 - 579j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_380():
    int_0 = -1791
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    str_0 = "1\\"
    str_1 = "8+OC\x0c\x0ceN"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_382():
    float_0 = -380.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    int_0 = 2404
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_387():
    float_0 = -209.0682
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    bytes_0 = b"A\xc3\xcf\xc3\xfb\x9c\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    complex_0 = -1606.0192 + 1367.6774j
    set_0 = {complex_0}
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    complex_0 = 4184.105 + 4338j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    str_0 = "c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    bytes_0 = b"\xd0\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    str_0 = "`47,;HM[>sQI@\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    float_0 = -677.172059
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


def test_case_395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_396():
    float_0 = 144.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    complex_0 = -3067.1984 - 433.58j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (bool_0, tuple_0, tuple_0)
    module_1.object(*tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_399():
    str_0 = "t 8"
    bytes_0 = b"\xbf\xa4"
    tuple_0 = (str_0, bytes_0)
    set_0 = {tuple_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    bytes_0 = b"\xd2\x01!\x0c\xab\x06\xa9;\x1a\xbb_\x01\x03\xea\xdf\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    int_0 = 4364
    list_0 = [int_0, int_0]
    bool_0 = True
    list_1 = [list_0, bool_0, int_0]
    tuple_0 = ()
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    float_0 = -246.6399
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    bytes_0 = b"\xe3h"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bytes_0 = b"F\xe9\xc2<\xfbvz1\x8d~\xf9hsq\x05</\xfd0"
    int_0 = 3053
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    int_0 = -1046
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bytes_0 = b"\x87\xe6\x1a\x0c\\\x80\xb5-\xd8\x01\xca\xf0\xd3%y\x99\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_411():
    pass


@pytest.mark.xfail(strict=True)
def test_case_412():
    bytes_0 = b"-\x84\xeb\xbb7\x00\x15\x18\xd7#n\x11\xd3\t\x03\xe5"
    complex_0 = -2921.99 + 606.8j
    list_0 = [bytes_0, complex_0, bytes_0]
    tuple_0 = (bytes_0, complex_0, list_0)
    float_0 = 1240.382045
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    bytes_0 = b"%\xff\xae\x1e\r\xb4\x16\xec\x8b\xe4K\xea\xb2\x9c\xf9\xd5\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    int_0 = 805
    module_0.match(int_0, int_0)


def test_case_415():
    pass


@pytest.mark.xfail(strict=True)
def test_case_416():
    bytes_0 = b"3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    int_0 = 958
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    float_0 = 1589.8455
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    bytes_0 = b"\xca{>\xd2\xbc\xf5\x0e+\xc4Y\xc3\xe4.i@i\xc0\xbe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {object_0: object_0, object_0: tuple_0, tuple_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    bool_0 = True
    float_0 = 1368.877696
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_423():
    pass


@pytest.mark.xfail(strict=True)
def test_case_424():
    bytes_0 = b"\xc1&\x80\x88\x1b+m?\xe5\x07\xad\xb4\xe2\xacKY\xaa\xed\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    str_0 = "f[yJp>HF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    int_0 = -2850
    set_0 = {int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    float_0 = -782.540377
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    int_0 = 140
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    str_0 = "#*uz\tP$mdo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    int_0 = 2978
    tuple_0 = ()
    tuple_1 = (int_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    int_0 = -3122
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    float_0 = 1089.683
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    float_0 = -4556.47
    int_0 = 2275
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    bytes_0 = b"Z\xa6\\Y\xb4@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    str_0 = "4$2fP%VMOK<*4TULE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    int_0 = -2494
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    str_0 = "V\\"
    module_0.match(str_0, str_0)


def test_case_440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_441():
    int_0 = 337
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    bytes_0 = b"Z\x92\xc5~\xcfJ6\xa2\x00Z\xfc\xa8`F\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    bytes_0 = b"\xc0\x1a\xb0\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    float_0 = -3161.19393
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bytes_0 = b"|u` \xcf\xc7\xa9\xb6\xf6\xdb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    bytes_0 = b"\xb0H\xbf\xf9\xd3=\xf3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    complex_0 = 2436.7 + 965.66877j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    bytes_0 = b"\x0c\t\xc8\xa0\x0e\x07\xbf\xcc,\x1b\xb6\x0b\x11\x82\xb2\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    str_0 = "u,a,6P?wD]DO_(+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    str_0 = "_R\x0b'FOt&n>E!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    str_0 = "@(DLE4~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    int_0 = -2882
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    int_0 = -1010
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    bytes_0 = b"8/\xf2\x14\x94\x11\xc6s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    bytes_0 = b"KN1-"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    float_0 = 1929.802315
    bool_0 = True
    dict_0 = {float_0: float_0, bool_0: bool_0, float_0: float_0, float_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    str_0 = "T<HL{vSfr!W|pQr^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    int_0 = 942
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    complex_0 = 5211 - 461.298982j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bytes_0 = b"\xbf\x0bT\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    str_0 = "V'-PdJ"
    int_0 = -760
    dict_0 = {str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    str_0 = "{b8\r/<bx}U;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    float_0 = 876.161
    dict_0 = {}
    tuple_0 = (dict_0, float_0)
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_475():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    int_0 = 2038
    str_0 = "c,ZI@XDIPh"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    int_0 = -3355
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    int_0 = 2723
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    complex_0 = -957.8031 + 474.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    complex_0 = -1617.043331 - 2841.47j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = 1644
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    float_0 = 3083.80638
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    str_0 = "Lr;72=`qp#q(/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    int_0 = 1959
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    int_0 = -1381
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    int_0 = 2585
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    int_0 = 1050
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    str_0 = ")hco:N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    bytes_0 = b"\xceJhf\xdf\xb5@\xdc\xa4'p"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    int_0 = 2192
    int_1 = 2191
    set_0 = {int_0, int_0, int_0, int_1}
    tuple_0 = (int_0, set_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    complex_0 = 649 - 2506.8268j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    str_0 = "J\\%e\x0bdVjW\t`7\\|v:+yy"
    float_0 = 1497.0
    list_0 = []
    bool_0 = True
    tuple_0 = (float_0, list_0, float_0, bool_0)
    tuple_1 = (str_0, tuple_0)
    tuple_2 = (str_0, tuple_1)
    module_0.get_new_command(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    str_0 = '\nh\nZEwGnI\\#:"A\x0b'
    module_0.get_new_command(str_0, str_0)


def test_case_497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_498():
    bytes_0 = b"\xfb\xd8L\x0cS/\xe9\x0c\xd4\x81\x88\xc5(\xd0Y\x17"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    str_0 = "`I2>^iAyw[vV2"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    bytes_0 = b"\x0fk\x0c\xb2n\x9cb\xba\xd5\x04q\xefeK\xd3u\xd7\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    str_0 = ">#\t)$;9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    int_0 = -1703
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


def test_case_505():
    pass


@pytest.mark.xfail(strict=True)
def test_case_506():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    str_0 = "}ODY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    float_0 = 3448.57256
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    str_0 = "\n/UL"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    bytes_0 = b"B\xf3\xc5\x81"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_511():
    pass


@pytest.mark.xfail(strict=True)
def test_case_512():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    bool_1 = False
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_513():
    int_0 = 2191
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    str_0 = "/,#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    int_0 = 1541
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    str_0 = "yy/:ufwZyV'mA=jkWvh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    float_0 = 1509.03
    str_0 = '@?w+|ZO<Zwb*T6!w"i^/'
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    float_0 = -1221.761
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    int_0 = 1252
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    dict_0 = {}
    str_0 = "v$EF-*\\f3,"
    module_0.match(dict_0, str_0)


def test_case_523():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_524():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_526():
    complex_0 = 2820.59 - 54.567j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    bytes_0 = b"\xbeS\x91s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    str_0 = "NVjU_Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    bytes_0 = b"|\x82\xcaZ}\x8d\xbc\xd9\x06\x17C\x1a\x1f\xd3\xf8S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    int_0 = 1777
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    int_0 = 1760
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    int_0 = 240
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    bytes_0 = b"\xf3\x13\x91\x91&N\xfe\xd9\x9bn\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_540():
    str_0 = "(bE!id -zy~"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    bytes_0 = b"6\x8c\xd6\x82\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    str_0 = 'b"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    str_0 = "$s<f{e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    str_0 = "5HpITPpH>"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    complex_0 = -1918.074 - 1227.94039j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    int_0 = -711
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bytes_0 = b"\x1aN\xca\n\xe1RP\x84\xa9SIW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    float_0 = -1259.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    float_0 = 4089.707
    int_0 = -2572
    dict_0 = {float_0: int_0, int_0: float_0, float_0: int_0, float_0: int_0}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    int_0 = 383
    dict_0 = {int_0: int_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    str_0 = 'j),.y"\rEFNT@BT6j}7uq'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    int_0 = 720
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    bytes_0 = b"\x95\xb5\x9c\x9b\xa3\x8aF\xe5_u!"
    str_0 = "?AueAaIm4I:"
    bool_0 = True
    set_0 = {bool_0, bytes_0}
    dict_0 = {bytes_0: set_0, bool_0: bytes_0, bool_0: str_0}
    list_0 = [dict_0, dict_0, bool_0, bool_0]
    tuple_0 = (bytes_0, str_0, bool_0, list_0)
    tuple_1 = (tuple_0, set_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    none_type_0 = None
    bytes_0 = b"e"
    list_0 = [none_type_0, none_type_0, bytes_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    bytes_0 = b"\x0fL=*\x8c\xfd\xabEn"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    float_0 = 332.255
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    str_0 = "Ug"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    float_0 = -745.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_565():
    int_0 = 2050
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    int_0 = -1
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    bytes_0 = b"\xf3"
    list_0 = [bytes_0, bytes_0]
    int_0 = -3373
    module_0.match(list_0, int_0)


def test_case_568():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    bytes_0 = b"P\xe7"
    bool_0 = True
    str_0 = ">]upnN~tl*)rngXV)L|\x0c"
    tuple_0 = (bytes_0, bool_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    float_0 = 909.13
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    float_0 = 800.152
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


def test_case_575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_576():
    str_0 = "FV"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    int_0 = -1920
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    int_0 = -584
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    str_0 = '\r)"b'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    bytes_0 = b"\x92j\x86Z\x88\\\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    str_0 = "V&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    int_0 = -2039
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    int_0 = 186
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_586():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


def test_case_587():
    pass


@pytest.mark.xfail(strict=True)
def test_case_588():
    bytes_0 = b"\xe6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    bytes_0 = b"\xea^d#\xa1\xe8\xae\xf2\x12d"
    int_0 = -2294
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    bytes_0 = b"5\x93U\xfd<\x02\xcc\x18\xc9\\yT\xa0\xbf\x04<"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_592():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    bytes_0 = b"\x829\x05\x1b&\n\xeb87\xca3C\xc4\xda\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    bool_0 = False
    bytes_0 = b"\x12=\t\x15\x9c\xd2u\xd0\x9f\xc8\xa9\x8b\xfaW'Fg\xc3@"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    list_0 = []
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


def test_case_596():
    pass


@pytest.mark.xfail(strict=True)
def test_case_597():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: dict_0, bool_0: dict_0, bool_0: dict_0, bool_0: dict_0}
    dict_2 = {bool_0: dict_1}
    module_0.get_new_command(dict_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    bytes_0 = b"\x1d\xe9\xcf\xf9s\xbb\xa7\xf9?y\xd5\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    float_0 = -1994.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    int_0 = -176
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    int_0 = -1678
    bytes_0 = b"\xd2R;\xd2t/\x0c#S\x98"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    str_0 = "g"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    int_0 = 370
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    int_0 = -2119
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    bytes_0 = b"\xb2~J\x0e*\x95"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_611():
    pass


@pytest.mark.xfail(strict=True)
def test_case_612():
    int_0 = -571
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    bytes_0 = b"g\xac(\xc8\xf9,\x02\xb1\xbbz\x92\x12"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    float_0 = 1652.572
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    complex_0 = 1008.54 - 112.6j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    int_0 = -796
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


def test_case_618():
    pass


@pytest.mark.xfail(strict=True)
def test_case_619():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    bool_0 = False
    str_0 = "|&j)KdJY\x0c~S;3[XUs~}"
    bool_1 = True
    tuple_0 = (bool_1, bool_0)
    dict_0 = {bool_0: bool_0, str_0: str_0, str_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    str_0 = "'%6\x0bqMz]GwhW"
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {}
    tuple_0 = (str_0, list_0, list_0, dict_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    set_0 = set()
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    bytes_0 = b"\x19\xbb\xdc\xac\xaf\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    bytes_0 = b"\x94\x1e!x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    int_0 = -138
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    str_0 = "3DKq{.K\r\tS)OU_D%~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    float_0 = 1954.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    bytes_0 = b"\xc6\x04\xde\xff9[\xe0\x9d\x01}\xa2\xb1\xc9\xb4\xf3\xb70b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    complex_0 = 674 + 1266.12574j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, complex_0)


def test_case_633():
    pass


@pytest.mark.xfail(strict=True)
def test_case_634():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    int_0 = -3300
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    float_0 = -433.604038
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    str_0 = "5\x0beb9Cgo#tyTQ%05.|W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    int_0 = 1656
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    str_0 = '%"(4\ntT?~v&UN'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    str_0 = "(TTzu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    bytes_0 = b"\\\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    int_0 = -2041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    str_0 = ",V@TN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    float_0 = 1862.202303
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    float_0 = 1386.29
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    int_0 = -272
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    str_0 = "u}dn:"
    module_0.get_new_command(str_0, str_0)


def test_case_655():
    pass


@pytest.mark.xfail(strict=True)
def test_case_656():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    str_0 = "4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    int_0 = 1020
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    bytes_0 = b"\xe9\xbd\xa7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bytes_0 = b"\xa7k\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_661():
    pass


@pytest.mark.xfail(strict=True)
def test_case_662():
    bool_0 = False
    float_0 = 2068.65836
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    bytes_0 = b"\xf9*?"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    int_0 = -1951
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    str_0 = ")\nzQ~\\I_X I4@9-P@\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    int_0 = -17
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    str_0 = "m -F<x%lxg/$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    complex_0 = 1050.348 + 547.2j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    bytes_0 = b"\xf9r\xe0CCJ \xba\xcb`\xe0)\xc8\x8d\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    bytes_0 = b"\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    str_0 = "j5"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_676():
    pass


@pytest.mark.xfail(strict=True)
def test_case_677():
    int_0 = -5024
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    str_0 = '0,aXSC\tc?"(1W\r5Idj\\'
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    bytes_0 = b"\x81\xe9\xa00\xe4\r\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_680():
    pass


@pytest.mark.xfail(strict=True)
def test_case_681():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    int_0 = -324
    module_0.match(int_0, int_0)


def test_case_683():
    pass


@pytest.mark.xfail(strict=True)
def test_case_684():
    bool_0 = True
    tuple_0 = ()
    complex_0 = -658 - 2397.57j
    tuple_1 = (bool_0, tuple_0, complex_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    str_0 = "Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    str_0 = ";g\\i]\nL#&/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    str_0 = "/op1Mz]]\x0c^*d6>ChZTD"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    tuple_0 = ()
    bytes_0 = b""
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    complex_0 = -577.817 - 1815.102j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    bytes_0 = b"\xfbM5j\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    str_0 = "jx).F2D*mds"
    set_0 = {str_0}
    list_0 = [set_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    int_0 = -821
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    str_0 = "gi]V[_koz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    int_0 = 176
    module_0.get_new_command(int_0, int_0)


def test_case_698():
    pass


@pytest.mark.xfail(strict=True)
def test_case_699():
    bytes_0 = b"(\x8b2#\xa5\x91\xe82\xd5Ab\xcf3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_700():
    pass


@pytest.mark.xfail(strict=True)
def test_case_701():
    int_0 = -946
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    none_type_0 = None
    bytes_0 = b"\xd6\xad\x02\xce\xdc\t\x99\xcb\xca\x0b\xcd@~\xeb\xd6\xad5\x0c"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    int_0 = 3953
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    int_0 = -4037
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    int_0 = -2057
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    int_0 = 1613
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    bytes_0 = b"%\x8e^\x0c\x19\x08\xb3c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    str_0 = "IGJmPQ\\'bFY\r!W1[%t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    int_0 = 2821
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, list_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    int_0 = -2215
    bool_0 = True
    bytes_0 = b"@[*\x80}\xcb\xce\x8d"
    str_0 = "'6"
    tuple_0 = (int_0, bool_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    str_0 = "j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    int_0 = 873
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    float_0 = 1155.344
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    none_type_0 = None
    bytes_0 = b"+Ho\xc7\xe8\xb1OM5\xc5\x8c|\xc9\xf6\x93\xfa\x8a\x12\x13\x12"
    list_0 = [bytes_0, none_type_0, bytes_0]
    tuple_0 = (none_type_0, bytes_0, list_0, list_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    str_0 = "(| v{EQ_jZf*g[9=O"
    bytes_0 = b"\x14\x11\x9e\xd4\x84"
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    int_0 = -2343
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    int_0 = 641
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    int_0 = 529
    bool_0 = True
    set_0 = {int_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_723():
    pass


@pytest.mark.xfail(strict=True)
def test_case_724():
    bytes_0 = b"2\xef\x15?\xaei\xf4\x9fQ\x9fHO\x1e\xb6\xf41X]\xf3\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    str_0 = ""
    str_1 = "F*EDN~dF`f>\x0c`Fs&}Y82"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    float_0 = -1900.93065
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    float_0 = -3792.4898
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    str_0 = "ef:Dc>l3{]foCX\x0b[M"
    str_1 = "P"
    dict_0 = {str_0: str_1, str_0: str_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    int_0 = -359
    str_0 = "amJU(y\t1\\))LRx.0~,"
    list_0 = []
    tuple_0 = (int_0, str_0, list_0, list_0)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    bool_0 = False
    int_0 = 3420
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    bytes_0 = b"\xca\xf2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    str_0 = "hzYTr.}\\=c<\tt8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_734():
    object_0 = module_1.object()


def test_case_735():
    pass


@pytest.mark.xfail(strict=True)
def test_case_736():
    int_0 = -410
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    float_0 = 1861.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_739():
    bytes_0 = b"\x06\xe7$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    str_0 = '|Crp/\n1,PY"\n,Pq3Yv\\N'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    int_0 = 4270
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    str_0 = "7k\x0b^oF6p4E\r]'M=k5wyA"
    module_0.match(str_0, str_0)


def test_case_743():
    pass


@pytest.mark.xfail(strict=True)
def test_case_744():
    complex_0 = 2416.8659 + 1268.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = False
    module_0.match(set_0, bool_1)


def test_case_746():
    pass


@pytest.mark.xfail(strict=True)
def test_case_747():
    str_0 = "|0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    bytes_0 = b"!\xc2\xf8\xf3\xa0\x10\xb6\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    float_0 = 437.4
    list_0 = [dict_0, float_0]
    tuple_0 = (dict_0, list_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    bytes_0 = b't\x1d\x1c\xb5&Z\xe1\xd3\xda\x0cC"1\xd24\xc7\xb0\xaf\x01\x95'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    none_type_0 = None
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    bytes_0 = b"\xd2\x9f\xd3B\xd4\xd0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    str_0 = "}J\rn3_\ni["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    str_0 = "Zz'g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    int_0 = 988
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    str_0 = "3m3Lh-o\tHNCFG"
    dict_0 = {str_0: tuple_0, str_0: tuple_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    int_0 = -2424
    module_0.match(int_0, int_0)


def test_case_759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_760():
    str_0 = '%o5Lv=k"z! 40|sk?>'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    str_0 = 'Y;e~*UIfm S=p;H"p('
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, str_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    float_0 = 345.351088
    set_0 = {float_0, float_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    int_0 = -1338
    set_0 = {int_0, int_0}
    bytes_0 = b"\xfaM\xcf?xC\xcew\xee\x9e\xd66dZ\xd3m#\x9b\xd2"
    list_0 = [bytes_0]
    tuple_0 = (set_0, bytes_0, bytes_0, list_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    bool_0 = True
    bytes_0 = b"]v\xa6\x07uo\x89\xa5h\x12\xd6\x1b\xc8K\xf1q\xc5\xb3"
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {tuple_0: bool_0, bool_0: bytes_0}
    tuple_1 = (bool_0,)
    tuple_2 = (bool_0, tuple_0, dict_0, tuple_1)
    set_0 = {tuple_0}
    module_0.match(tuple_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    int_0 = 3682
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    int_0 = -801
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    bytes_0 = b"\xa4\xdd\x97\xb2\xb6\xa9\x9e*w\x9b\xf9\xe1fO\xc1R\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    str_0 = "9}64w\x0ctY96"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    str_0 = '^\\=[SEYU"})'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    bytes_0 = b"C\xbexm\xd2"
    bytes_1 = b"\x01\xb4\xce\x87\xea\xe4"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_773():
    float_0 = -3003.0
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    bytes_0 = b'"\x9c\xc2\xb1\x86\xd0\xd3\x1d\xa0\xa4m\x18\x06\x02\x8f\t\xca\x1b\xd9T'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    str_0 = "\x0c@OF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    str_0 = "%St`X\n&bB;?YdjY)r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    float_0 = 2093.5679
    set_0 = {float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    int_0 = 1397
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    complex_0 = 1439.065008 - 5768.055j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    float_0 = 159.9743
    module_0.get_new_command(float_0, float_0)


def test_case_783():
    pass


@pytest.mark.xfail(strict=True)
def test_case_784():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    str_0 = "^*8\\E_T*r`D,-s~A\x0b7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    int_0 = 2141
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_789():
    bool_0 = False
    int_0 = 1000
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    int_0 = -1605
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    int_0 = 128
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    str_0 = "UXG;"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    bytes_0 = b"x\xe2X>\xcd}\x1dM\xa0\xacT4\x18\xff\xfaC\xc9\xd3Y("
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    str_0 = "BW*UC[TB].;^W{:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    int_0 = 592
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    bytes_0 = b"\\\xc4\xd2\x80\xe2\x0f\x8dfsx\xd4\x13-\xca;\x9b\x02"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_802():
    pass


@pytest.mark.xfail(strict=True)
def test_case_803():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    int_0 = 1688
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    float_0 = 1030.900888
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    str_0 = "dtu\\^W/ag2 %(>#Y+"
    bytes_0 = b"7"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    none_type_0 = None
    str_0 = "3L%"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    bytes_0 = b"\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    bool_0 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: object_0}
    tuple_0 = (bool_0, object_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    bytes_0 = b"\x1e"
    module_0.match(bytes_0, bytes_0)


def test_case_812():
    pass


@pytest.mark.xfail(strict=True)
def test_case_813():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_815():
    complex_0 = -4358.8 + 2842.32j
    str_0 = "94^kHqLluH"
    dict_0 = {complex_0: str_0, str_0: complex_0, str_0: complex_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    str_0 = "t6e0\x0b2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    float_0 = -2281.678789
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    bytes_0 = b"\xc8\x11\xf5\x07oS\xf5\x08\xd1P\x8b{AJS\xe0\xc6\x95\xc5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    none_type_0 = None
    bytes_0 = b"4\xc4\x87\x8a\xa6\x1a\xb4\xba\x81\x95\xd3\xb5\xf67\xf1\x19\xfd\xeb5\xcb"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    list_0 = []
    str_0 = "yI+yY\rv|=0"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    bytes_0 = b"M\x83%\xb59"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    object_0 = module_1.object()
    str_0 = "`)Z`Q><(8g`"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    complex_0 = -1363.31 - 2592.59349j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    int_0 = 984
    set_0 = {int_0}
    module_0.match(set_0, int_0)


def test_case_826():
    pass


def test_case_827():
    pass


@pytest.mark.xfail(strict=True)
def test_case_828():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    int_0 = -43
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    int_0 = -844
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    str_0 = "zC][_?78[s["
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    str_0 = "V}(Am:vC?sS*kM$ArlZ"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    none_type_0 = None
    bool_0 = True
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    int_0 = 2341
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    float_0 = 300.56681
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    object_0 = module_1.object()
    bytes_0 = b"\x12\xe3\xdb\x00\xf9lf"
    tuple_0 = (object_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    bool_0 = True
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    complex_0 = -1202.48514 - 682j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bytes_0 = b"\x1a\x10\x97\xc9\xbe\x93D~"
    set_0 = set()
    list_0 = [bytes_0, bytes_0, set_0, set_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, bool_0, bool_0, object_0)
    str_0 = 'q^"ED^'
    set_0 = {str_0, str_0, str_0}
    list_0 = [bool_0, set_0, bool_0, set_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    none_type_0 = None
    int_0 = -1412
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    float_0 = 2471.8009
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    str_0 = "5ct-035>=\x0bRM"
    module_0.get_new_command(str_0, str_0)


def test_case_846():
    pass


def test_case_847():
    pass


@pytest.mark.xfail(strict=True)
def test_case_848():
    int_0 = -2738
    int_1 = 2349
    tuple_0 = (int_0, int_0, int_1)
    str_0 = "=PGJZ0CN:9P\t\x0bXHcU|.q"
    tuple_1 = (tuple_0, str_0, tuple_0)
    bytes_0 = b"\x88\xa7\x9b\x85R?`?`\xf5\xa4"
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    str_0 = "]QSVR,<Ah'V<%U%6l"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    bytes_0 = b"\x8f/'\xe5\xd9\x88\xed\xe0s\xe2\x0b\xb4\xf5\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    float_0 = 2708.16
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    str_0 = "3"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_853():
    pass


@pytest.mark.xfail(strict=True)
def test_case_854():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


def test_case_855():
    pass


@pytest.mark.xfail(strict=True)
def test_case_856():
    float_0 = -1996.445094
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    none_type_0 = None
    bytes_0 = b"\x8c\x04\xec\xab\x96\xec\xfe\xc7\x7f\xc4\xb2d>|"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = False
    set_0 = {object_0, object_0, object_0, bool_0}
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    str_0 = "zeGh k<v5 =Vo;^otsP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    float_0 = 529.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bytes_0 = b"\x0b\xa7U\xf7\xc4\xf7\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    int_0 = -1757
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_865():
    int_0 = -2110
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    tuple_1 = (tuple_0,)
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_867():
    int_0 = 1566
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    str_0 = "\x0cFbSh{2NM"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    str_0 = '>%A.QB"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    bool_0 = True
    float_0 = 1059.79456
    list_0 = [bool_0, bool_0, float_0, float_0]
    str_0 = "+|h\x0cE2-<2Snf88K"
    str_1 = "pwg, +}fI|':Ec{F!\rYf"
    str_2 = "\nE?$S5d"
    dict_0 = {str_0: float_0, str_0: float_0, str_1: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    bytes_0 = b"\xc1\x93\xf8\xbcI\xab\xeb\x0e\x19OY\xf4"
    bool_0 = True
    list_0 = [bytes_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    str_0 = "c1).\x0b3T5~NfC)F"
    int_0 = -1416
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    float_0 = 379.25
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    bytes_0 = b"q)\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    str_0 = "\x0bq[|Db0z4lr&f5keH"
    dict_0 = {str_0: str_0, str_0: str_0}
    str_1 = ""
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_877():
    int_0 = 1669
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    float_0 = -831.65
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    float_0 = 622.17
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (dict_0, dict_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    str_0 = "|3DFC9uM\x0cZGRXo"
    complex_0 = -658.7648 + 399.778938j
    set_0 = {complex_0, complex_0, str_0, str_0}
    tuple_0 = (str_0, complex_0, str_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    bool_0 = False
    bytes_0 = b"N\xbf\\\xb5\x08\x07\x07\xb3\xe2G0\xf0\x9f"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    int_0 = 2047
    module_0.match(int_0, int_0)


def test_case_885():
    pass


@pytest.mark.xfail(strict=True)
def test_case_886():
    float_0 = -2810.65
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    str_0 = "MeMs#\x0ce7)yl Ha("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    tuple_0 = ()
    list_0 = []
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    bytes_0 = b"\xf0|\x15n\x17\xea!\xf4\x88\xea'\x156\\\x9f\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    int_0 = -1256
    bytes_0 = b"\xaf\xb6"
    set_0 = {int_0, int_0, bytes_0}
    int_1 = 63
    dict_0 = {int_0: int_0, int_1: set_0, bytes_0: int_0, bytes_0: int_1}
    dict_1 = {int_0: bytes_0, int_1: dict_0}
    float_0 = 1700.501148
    tuple_0 = (dict_1, float_0, int_1)
    tuple_1 = (int_0, set_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_891():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    str_0 = 'Lhl`e)Q"`a<'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    str_0 = "?+fs#$'a@CT}kiz,\\H\\'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    float_0 = 2910.27
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    int_0 = 1011
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    bytes_0 = b"\x8e\x8cL\xdfO\xed"
    module_0.match(bytes_0, bytes_0)


def test_case_899():
    pass


@pytest.mark.xfail(strict=True)
def test_case_900():
    bytes_0 = b"ZKYC\xc6#Wt\xa6\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    float_0 = 2659.06708
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    str_0 = "o(\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    float_0 = -58.133383
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_904():
    pass


@pytest.mark.xfail(strict=True)
def test_case_905():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0, object_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    float_0 = 2236.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    int_0 = -2139
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    complex_0 = 1170.0226 + 1683.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    int_0 = -445
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    str_0 = "},Jf} +EkJ"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    int_0 = 715
    int_1 = -115
    set_0 = {int_0, int_1, int_0, int_0}
    module_0.match(set_0, int_1)


def test_case_915():
    pass


@pytest.mark.xfail(strict=True)
def test_case_916():
    none_type_0 = None
    int_0 = 50
    module_0.match(none_type_0, int_0)


def test_case_917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_918():
    str_0 = "i ("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    dict_0 = {}
    list_0 = [tuple_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bytes_0 = b"o*\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    int_0 = 951
    str_0 = "dwUxkiZ}"
    tuple_0 = (int_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    bytes_0 = b"0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    int_0 = 2068
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    str_0 = "@0.!8z~!4}OGz|wK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    float_0 = 338.365985
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    int_0 = 3918
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    str_0 = "f@wjU{P4V6BHP_\tC|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    float_0 = 2107.9837
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    bytes_0 = b"\x85\xcc^GR\xaa\x01\x85\xf5'"
    set_0 = {bytes_0}
    bool_0 = False
    bool_1 = False
    list_0 = [set_0, bool_0, bool_1, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    str_0 = "|Im`o8^MSsRXJ"
    dict_0 = {str_0: str_0}
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: dict_0}
    module_0.get_new_command(dict_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    float_0 = -758.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    str_0 = "8a"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    int_0 = -585
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, bool_0, list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    object_0 = module_1.object()
    float_0 = -1787.39828
    bytes_0 = b"\xa2\xc8<\xabe\xe0"
    dict_0 = {
        object_0: object_0,
        float_0: float_0,
        float_0: object_0,
        object_0: bytes_0,
    }
    module_0.match(dict_0, object_0)


def test_case_941():
    pass


@pytest.mark.xfail(strict=True)
def test_case_942():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    int_0 = -1954
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    bool_0 = True
    int_0 = -1469
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    none_type_0 = None
    bytes_0 = b"n\xbc\x06\xb2]\xff\x18\xa0\xc6\xff\xbeT\x01\xe5\xa4\xb2\xb0"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    str_0 = "<o80vfTI)sb\rI}u!$S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    bytes_0 = b"=\xdb\xb3\xf3\xee\xf3XY\xc1"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    complex_0 = 1223.898 - 855.83985j
    list_0 = [complex_0]
    module_0.get_new_command(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    int_0 = -667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    int_0 = -1016
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    object_0 = module_1.object()
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    float_0 = 4356.857
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    str_0 = "L>\x0baL.]$K[K`<]LBg/H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    float_0 = 1735.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    complex_0 = -671.87696 - 1029.5974j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    int_0 = -2443
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    str_0 = ".]E/<d"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    str_0 = "L2Znl+$ogmKi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    bytes_0 = b"`\x16"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    tuple_0 = ()
    str_0 = "Vs'OM|Rq8bFu"
    tuple_1 = (tuple_0, str_0)
    bool_0 = False
    tuple_2 = (tuple_1, bool_0, bool_0)
    module_0.get_new_command(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_963():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    float_0 = -2370.33295
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    int_0 = -1343
    float_0 = 1352.14
    dict_0 = {}
    bool_0 = True
    tuple_0 = (int_0, float_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    float_0 = -2120.0
    tuple_0 = (float_0,)
    list_0 = [tuple_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    int_0 = -2105
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    str_0 = "q\rm'3F"
    list_0 = [str_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    int_0 = 748
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    int_0 = -4142
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    bool_0 = True
    int_0 = 554
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, int_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    int_0 = 486
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    str_0 = "<hH/Kw\r@*c@Z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_975():
    pass


@pytest.mark.xfail(strict=True)
def test_case_976():
    str_0 = "^n[s?|u~s9&nU<g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    bytes_0 = b"T\xcc"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    int_0 = -16
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    float_0 = 19.512574
    tuple_0 = (float_0,)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    str_0 = "lBgnDKMj\nkM0TO\tZ~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    str_0 = "<iV.-S@QtW;2cr"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_983():
    pass


@pytest.mark.xfail(strict=True)
def test_case_984():
    float_0 = -2134.435
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    int_0 = 847
    module_0.match(int_0, int_0)


def test_case_986():
    pass


@pytest.mark.xfail(strict=True)
def test_case_987():
    bytes_0 = b"\xc2rsI\xa2\xf6\xd3\x00I\xbf\x86\xa6PQ\x92~)\xa3"
    module_0.match(bytes_0, bytes_0)


def test_case_988():
    pass


@pytest.mark.xfail(strict=True)
def test_case_989():
    bytes_0 = b"\x99<\xa39\xe3V@\xe4b$\xfb\xb8\x077\xf8\x01\xc5*\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    int_0 = -3523
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    str_0 = 'Ad|V.bl&"6*'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    bytes_0 = b"l\x88]\x9f-\xbc`\xa6\xf8\x93\xeeur"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    bool_0 = True
    str_0 = "x+W_,dA\ro@G{N`\n7G"
    str_1 = "_V\x0bO\x0cco69[(6"
    dict_0 = {str_0: bool_0, str_1: str_0, str_0: str_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    str_0 = "ACRI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    complex_0 = 2340.85482 - 1412.2j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    float_0 = -1046.873
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    complex_0 = 1064.1 + 1304.0899j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1000():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1001():
    str_0 = ")K\n~3d;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    bytes_0 = b"`\xef"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    bytes_0 = b"-\xc6\xd4\xa5\x13\x16\xc90b\xd0z\x0e\x8bw\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    str_0 = "X<M\\]4l;\\wo^B"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    int_0 = -2065
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    float_0 = -4567.087
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    int_0 = -325
    bytes_0 = b"\xc7k"
    tuple_0 = (int_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    int_0 = -1379
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    float_0 = 5030.6969
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    str_0 = "!e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    str_0 = "W@@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0, dict_0, set_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1013():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = "s:+.i,aG;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    int_0 = -813
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    float_0 = -3289.69919
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    str_0 = "h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    float_0 = 1902.53677
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_1021():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1022():
    str_0 = "~4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    bytes_0 = b"\x050\x06\x16p\xa0\xb24\x7f\x1e$\xe6rQ-\xe2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    str_0 = "{~=^!5Hv\x0cu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "*vi&QCZTNbd86-"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    bytes_0 = b"\xec5\x8d\x12\xf7c\x07\x80L\xa8\x1b\xec\xb3#B\x96\x84sA#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    int_0 = 895
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    str_0 = "2[9:RNB%/Tsd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    int_0 = 1019
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    int_0 = -1811
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    float_0 = 3475.499126
    int_0 = 2635
    tuple_0 = (float_0, int_0, int_0)
    set_0 = {tuple_0, int_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    int_0 = 1146
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    int_0 = -798
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    str_0 = "UDM\x0cC!uO6^"
    str_1 = ">f_@Od+"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    str_0 = "c@\x0bL~gdDH[O]/__8JQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    int_0 = -166
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    bytes_0 = b"'%\x10FBhX\xfb\xc7\xed\x8f4\xddRh\x8d\r\xc2K\x19"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    float_0 = 1410.46
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bytes_0 = b"\xe5/\x89.?\x99\xa0\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    bytes_0 = b"\xe2v5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    int_0 = -513
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    float_0 = 659.9
    int_0 = -1296
    tuple_0 = (float_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    float_0 = -1399.378531
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    str_0 = "8CrwI\\qC+)Z63Mve`6#"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bytes_0 = b"\xa5M!_H\x06\x9a\\\x7f\xf1\xa6\xdbr\xc5v\xcew\x7f\x8c'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    bytes_0 = b"*B\r\x82\xb1\xb7r\xb6\xb3T\xc9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    int_0 = 1835
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    str_0 = "nov;\\ [A%c*A2`"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    int_0 = -1080
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    str_0 = '"^]_G5_\n7&{,R1H'
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    complex_0 = 1768.0857 - 147.30126j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    str_0 = "B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    bytes_0 = b" \xc2@\xcf\xc7d \xef\xe8\xd4C\xc8\x97c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    bytes_0 = b"j|\xdf\x11\xf6\x1c\x86q\x03\xc7^Q\x8e\xc9\xec\xce\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    str_0 = "O`g"
    bool_0 = True
    dict_0 = {str_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    float_0 = -886.54
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    int_0 = -4565
    bool_0 = False
    dict_0 = {int_0: bool_0, int_0: int_0}
    tuple_0 = (int_0, int_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    int_0 = -2027
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    str_0 = "p+yTsS_%%yp$95k.)"
    bool_0 = True
    module_0.match(str_0, bool_0)


def test_case_1066():
    pass


def test_case_1067():
    pass


def test_case_1068():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1069():
    str_0 = "h=)B6\nF.hT.Q%Z}\r]\x0by"
    str_1 = "TG t?0^1~}7"
    str_2 = "\x0bVE#"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bytes_0 = b"\x98Ei\xc8\xd4\xe4\xa9\x1aFO\xe0\xae\xecj\xf4>F\x0f\x91\x1b"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    bytes_0 = b"\x84\x83\x1dH\x11\xe6b\xea:\x93K\xf9w\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bytes_0 = b"3 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    str_0 = "c(>y+-R,&_O;Hs9"
    module_0.match(str_0, str_0)


def test_case_1074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1075():
    list_0 = []
    object_0 = module_1.object(*list_0)
    str_0 = "82BeQClU>"
    bytes_0 = b"MzI\x1b\x92+\xcc\x00\xb9\x0c3\x9f\x1c\x0e:\xec\xc1\xd7\x00"
    tuple_0 = (str_0, list_0, bytes_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    bytes_0 = b"\x018U\xa8\xc6\xa1\xfdq\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    int_0 = 2640
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    int_0 = 418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    int_0 = 4126
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "g[uY/\tZdhDRS"
    tuple_0 = (int_0, list_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    complex_0 = 1619.42181 - 832.04j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1082():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1083():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    str_0 = "`\nMR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    bytes_0 = b"\xc8\x95\r?\xac\x12\xac\xab[\x03\xc6\x80\xc7\x98P\x88\xc6n6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    int_0 = 3363
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    int_0 = -235
    module_0.get_new_command(int_0, int_0)


def test_case_1088():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1089():
    int_0 = 489
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    int_0 = -2986
    tuple_0 = (int_0,)
    set_0 = {tuple_0, int_0, int_0, tuple_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    int_0 = 2713
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    int_0 = 83
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    bytes_0 = b"4\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    str_0 = "F1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    int_0 = -604
    int_1 = 90
    str_0 = "I"
    tuple_0 = (int_0, int_1, str_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    str_0 = "`/\nW1c5x;5-"
    list_0 = [str_0]
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    float_0 = 4498.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_1101():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1102():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    float_0 = 1603.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    int_0 = 3094
    module_0.match(int_0, int_0)


def test_case_1105():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1106():
    float_0 = -1757.783992
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


def test_case_1109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1110():
    float_0 = -4425.39509
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bytes_0 = b"@vyv!"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    float_0 = -206.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    str_0 = "?oy8m|M4%E3|[l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    bytes_0 = b"\xecf&N\x1a/-\x9c\xf5-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    int_0 = -238
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    float_0 = -1436.4102
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    bytes_0 = b"\x87\xcc\xba\x18\x00\x16f\xeak1D\x11`\xaa\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    complex_0 = -1876.5513 + 147.158554j
    set_0 = {complex_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    int_0 = -1623
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    int_0 = -1226
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    float_0 = 3251.336
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    str_0 = "EL`/WWO[I'G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    str_0 = "/`RV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    str_0 = '\x0c!k!*"4k'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bytes_0 = b"9\xc2\xe5\xb1\x07\xdb@\xf3\xf99xt,\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    tuple_0 = ()
    bool_0 = True
    bool_1 = True
    tuple_1 = (tuple_0, bool_0, bool_0, bool_1)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    bytes_0 = b"\xeaV"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    int_0 = -1701
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    tuple_0 = ()
    float_0 = 603.0
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    int_0 = 2234
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    complex_0 = 5180.6 + 1081.46j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    set_0 = set()
    int_0 = -471
    tuple_0 = (set_0, int_0, dict_0)
    tuple_1 = (dict_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    bytes_0 = b"\x80v\x8e"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    str_0 = "\\4;hER\x0cfQL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    int_0 = 364
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    bytes_0 = b"\xee\xeegI\xf0\xe4\xd1\xa2K\x852"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    int_0 = -857
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    complex_0 = 3123 + 803.254j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    bytes_0 = b"\x10X\xf0\x9a\xc3\x83\xae?\x88\xb4\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    str_0 = "O\n^l|xari$(J~<:U"
    bytes_0 = b"\xf5\t\x87\x93Z\xb8a\x87K\xed"
    list_0 = [str_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    bytes_0 = b"\xa1"
    tuple_0 = (bytes_0,)
    object_0 = module_1.object()
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_1144():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1145():
    int_0 = -175
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    complex_0 = 303.51494 + 2264.8499j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    int_0 = -465
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    module_0.match(set_0, bool_1)


def test_case_1150():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1151():
    bytes_0 = b"\xe4\x80\xaf\xde\x08H\x03:\xf4\xfb\xe5q\x96\xd85\xb8\xc7\xe2\xa4\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    str_0 = "6#*4F(&lEYi'vV=_9HP5"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    float_0 = -3164.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    int_0 = 194
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    bytes_0 = b"e\xaa6\xdd\xa8Sv\xfa\xe3\xe1.\x17r\x9a\xb5\x83\xe7"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    int_0 = -1077
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    bytes_0 = b"'\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    bytes_0 = b"C`0\xcc\xd4\xbc\xcf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    bool_0 = True
    bytes_0 = b"\xc4"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    float_0 = -822.4
    int_0 = -3257
    dict_0 = {float_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    int_0 = 566
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_1163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1164():
    int_0 = -916
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    float_0 = -4198.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    bytes_0 = b'\xcc\xec\x11\xb1L\x9d"'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    complex_0 = -395.52321 - 3894.23j
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    str_0 = 'B7}\rB1&M"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    bytes_0 = b"C\x9e\xf3\x8a\x94\xc7\x81\xa9\xd7K?\x8c\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    float_0 = 257.773
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    none_type_0 = None
    str_0 = "{O"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    float_0 = -5.237
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    str_0 = ".>#vOA4}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    bytes_0 = b"\xb5\xc8"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    int_0 = -1453
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    str_0 = "?}2"
    complex_0 = 1855.8326 + 1239.2673j
    list_0 = [str_0, complex_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    bytes_0 = b"\xb6\x88\x80\x8dd\xe1\x82\xed1\xbd\xed\xd9@,S\xa61"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    bytes_0 = b"\xb2Tx\xa7S\x10\xa9\x89\x82\xb7c\xef\x95}7\xdf*\xbe"
    bool_0 = True
    list_0 = [bytes_0, bool_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    float_0 = -1622.34
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    float_0 = -1203.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    float_0 = 568.574288
    tuple_0 = (float_0,)
    list_0 = [tuple_0, float_0]
    tuple_1 = ()
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    str_0 = "hbcc~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    bool_0 = True
    str_0 = "?b^?"
    bytes_0 = b"\xd4\xf0\x9d\xbe\xafQ#+i\x86\x04|:(\x16\xd5"
    tuple_0 = (bool_0, str_0, bytes_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    int_0 = 2037
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    int_0 = 3215
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    str_0 = ":2e`BC\\O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    str_0 = "a48^/#\x0b@BVEBk)[}64(1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    float_0 = 2498.0
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    float_0 = -2092.0
    set_0 = {float_0, float_0, float_0, float_0}
    str_0 = ".`::<ILLwe &c5{sl"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1195():
    bytes_0 = b"\x86\xb9\x19p\xf6\xdb\x02\xe3b\xd7d\xa5\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1196():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1197():
    float_0 = -1102.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    int_0 = 86
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    int_0 = 739
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    int_0 = 1703
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    str_0 = "&.xo[/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    bytes_0 = b"|F\x82`\x19{\xf0|\x03\xa8sH\x05\xfc?\x9a\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bytes_0 = b"q0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    int_0 = -1391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    int_0 = 1239
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    tuple_0 = ()
    bytes_0 = b'\x88\x08c\xb6\xdb_xE5AN\x002"}\x9e'
    list_0 = [tuple_0, tuple_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    int_0 = 404
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    int_0 = 810
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    str_0 = "4X#B#dUg!)e4"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1210():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1211():
    float_0 = -349.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bytes_0 = b"(\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    int_0 = 3391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    int_0 = -1560
    module_0.match(int_0, int_0)


def test_case_1215():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1216():
    float_0 = 215.35507
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    bytes_0 = b"\xb0QqI\xac\xd2\xce1\x85\xa1\xd8\xf2&\xa7\x06"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


def test_case_1218():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1219():
    str_0 = "'0SVRnL){v@1x<C1\x0b4V"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    int_0 = 393
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bytes_0 = b"r\x88\xbfGR\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    int_0 = 660
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_1225():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1226():
    bytes_0 = b"F\xc1O\x11g3\xa2O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bytes_0 = b"3\xe1\x11\xfbB<\xd4\x88\x85Ca"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0, bytes_0, bytes_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    str_0 = "86`^"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    complex_0 = -3001.644833 + 544.307515j
    module_0.match(complex_0, complex_0)


def test_case_1231():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1232():
    int_0 = 1809
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    str_0 = "uJrl7;RkJGi-)k_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bytes_0 = b"\x1d"
    str_0 = 'C>h\ry~lV\x0chZ"&Gx1#cK'
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    float_0 = -244.35
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    int_0 = 1667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    str_0 = "39VBR9:]:9X}Z.Yv"
    none_type_0 = None
    str_1 = "0G<i_E+!s\n2vz"
    str_2 = 'u"LBj\x0cs-NR'
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    float_0 = 1855.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bytes_0 = b"\x8b\xd8\xc09\xfe\x88\xc5\x00\x08\xf8A)\xf3\x8c\xd5\xbbX\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    int_0 = -378
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    int_0 = -1653
    bytes_0 = b"fH\x8fv{\xbbeD\x12`i\xfe\xd8\x7f"
    dict_0 = {int_0: int_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    float_0 = 3784.231
    module_0.get_new_command(float_0, float_0)


def test_case_1244():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"qG\xb8BN\xa8z\xad\xbe\x19\xa3\xd0\xdar\x00AY\x9e^"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    bytes_0 = b"\x0fd\xaa\xc5\xab\xf9t\xa67\r_\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    str_0 = "GZS"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_1248():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1249():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_1250():
    pass


def test_case_1251():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1252():
    int_0 = 572
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    float_0 = 648.29
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    bytes_0 = b"\xb5\x10Ga\xe0\xda"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    str_0 = ">"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    int_0 = 827
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    bytes_0 = b"\x0c\xa4\xe4\xfa\xa8"
    module_0.match(bytes_0, bytes_0)


def test_case_1258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1259():
    int_0 = 2679
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    float_0 = 2247.1382
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    int_0 = 2343
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    float_0 = -1237.22223
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    int_0 = 3015
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1265():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1266():
    str_0 = "6x-i"
    float_0 = -1778.311874
    set_0 = {float_0}
    tuple_0 = (set_0,)
    tuple_1 = (str_0, float_0, tuple_0, str_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    int_0 = -2624
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    int_0 = -586
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    str_0 = 'GAwA.$1r%"6fNfN%W'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    float_0 = 1428.86579
    module_0.get_new_command(float_0, float_0)


def test_case_1271():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1272():
    str_0 = "C]<{Ui/x#V+"
    none_type_0 = None
    str_1 = "L~}ih\tN`H5dc_)w?h{?"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


def test_case_1273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1274():
    none_type_0 = None
    float_0 = -883.0
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    bytes_0 = b"."
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bytes_0 = b"\x16\x95\xc8\xe0F\x8eN\xc4"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bool_0, bool_0)
    tuple_1 = (bytes_0, tuple_0)
    tuple_2 = ()
    dict_0 = {tuple_1: tuple_2, bytes_0: tuple_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    bytes_0 = b"\x8f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    str_0 = "tm[>@U0AL3)85T"
    bool_0 = False
    dict_0 = {str_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    bool_0 = True
    int_0 = -4343
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    bytes_0 = b"\xe0\x81W\xcd\x9d\r\xfcQtKA"
    module_0.match(bytes_0, bytes_0)


def test_case_1283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1284():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    str_0 = "MY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    str_0 = "74I''DVlY4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    float_0 = -4603.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    int_0 = 251
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    str_0 = 'r|_6\\"&uSFl{{pC\\\x0c[5~'
    list_0 = [str_0, str_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    set_0 = set()
    complex_0 = -4018.6 - 2973.6j
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    int_0 = -28
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bytes_0 = b")\x8f\xc5A\xef\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    int_0 = -471
    float_0 = -572.39003
    tuple_0 = (float_0,)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    str_0 = "n*v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    bytes_0 = b'8qX\x9a\x9a\xea\xcdCU\xeea\xcf"\xf2\x800$\xa5\xe5'
    float_0 = -1418.12942
    bytes_1 = b"\x1c\\\xf0\xd2\xf4\xack[\xc7\r"
    tuple_0 = (list_0, bytes_0, float_0, bytes_1)
    list_1 = [tuple_0, tuple_0, tuple_0, bytes_1]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    str_0 = "q*a\\BD$,{wT"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    complex_0 = -1953.922 - 2772.82446j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    int_0 = 193
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    float_0 = 2502.281122
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    float_0 = -696.0
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    str_0 = "\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bytes_0 = b"\xad\r\x91M\x0fE\xb1a"
    module_1.object(**bytes_0)


def test_case_1313():
    pass


def test_case_1314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1315():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_1316():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1317():
    bool_0 = True
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    str_0 = "Iih`sWtqfnPs$D"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bool_0 = False
    int_0 = -1249
    dict_0 = {bool_0: bool_0, bool_0: int_0, bool_0: int_0, int_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    str_0 = "]0#E6J>OppVi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    int_0 = -2133
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    bytes_0 = b"\x85\xba\x7f\xd0t+\x198wj}\x0b#O\x11\xf0\xb2\xc41"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


def test_case_1325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1326():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    int_0 = -1898
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    int_0 = -1431
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    bool_0 = False
    float_0 = -351.84852
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    str_0 = "#}VtQYN;O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    str_0 = '~AUEZY"4${u$gs('
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    bytes_0 = b"\x0e\xe3\xe7\xa9\xd7C$D'"
    dict_0 = {bytes_0: bytes_0}
    set_0 = set()
    bool_0 = True
    str_0 = "/!$Rk.2"
    dict_1 = {bytes_0: set_0, bool_0: set_0, str_0: dict_0, bytes_0: bool_0}
    tuple_0 = (dict_0, set_0, dict_1, dict_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    str_0 = "m|Uo?"
    str_1 = ")sO\\jk\r*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_1335():
    pass


def test_case_1336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1337():
    int_0 = 952
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    int_0 = -1359
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    str_0 = "p0v\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    int_0 = 1628
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    list_0 = []
    dict_0 = {}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    int_0 = -2865
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    bytes_0 = b"\xf2.\xc3k%)<5\xc3!"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1346():
    int_0 = 71
    tuple_0 = (int_0,)
    int_1 = -996
    module_0.match(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bytes_0 = b"\xdb\x82y"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    bytes_0 = b"\xc4\xed\x9d\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = "`<Up"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    bool_0 = True
    str_0 = "EX<{"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    int_0 = -1892
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    float_0 = -1088.742
    float_1 = -3321.987
    list_0 = [float_0, float_0, float_0, float_1]
    module_0.get_new_command(list_0, float_0)


def test_case_1354():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1355():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    int_0 = 923
    tuple_0 = ()
    tuple_1 = (int_0, int_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    int_0 = -2270
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bool_0 = False
    int_0 = 993
    dict_0 = {bool_0: bool_0, bool_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    str_0 = "@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    float_0 = -2898.39
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    complex_0 = -747.43 + 2987.91j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    bool_0 = True
    int_0 = 408
    list_0 = [bool_0, bool_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    int_0 = -2147
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bool_0 = False
    bytes_0 = b"\xddB\xa3"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    float_0 = -4216.52866
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


def test_case_1368():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1369():
    float_0 = -1279.213
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    complex_0 = -610.12978 + 1874.7j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    tuple_0 = ()
    str_0 = "+<D~"
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    float_0 = 4667.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    bytes_0 = b"\xbc9\xf3\x9b\xecO\x98\x14\xb4\xa3\x16\x10\xbf\xd4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    str_0 = "&I}3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    int_0 = 1655
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    str_0 = "Vu#s8TB]sm8_\x0bE"
    module_0.get_new_command(str_0, str_0)


def test_case_1379():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1380():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    complex_0 = 2299.1799 - 846.146j
    module_0.match(complex_0, complex_0)


def test_case_1382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1383():
    tuple_0 = ()
    bytes_0 = b"\xbf\xac\xdeP\xa6T\x92\xe1\x87\x81\t{\x15\x88\x1a\x14E\xa0"
    tuple_1 = (tuple_0, tuple_0, bytes_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    str_0 = "^D|>xZ*G#lFSz\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    bool_0 = True
    bytes_0 = b"\t\xd8\xcc\x9eH\xba^\x05\xfeY\xf7\xbag\x0f\xe4\x92\xeeO\xd9"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bytes_0 = b"\xe7\xb9\xb0\xbd\xccj\x171\xc4\xa1_\xbf\x17\x1c|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    complex_0 = -1894.7238 - 478j
    bool_0 = False
    dict_0 = {complex_0: bool_0, bool_0: bool_0, bool_0: complex_0, bool_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    complex_0 = -2788.732207 + 2075.59j
    int_0 = 1141
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    str_0 = "5YXWq?Nzc;$&\t:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    float_0 = -1769.96812
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    str_0 = "oH{1jSZmP;/CqYC>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    str_0 = "QYLY0;q~A~b5XT<"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    str_0 = "s-1^"
    module_1.object(**str_0)


def test_case_1395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1396():
    int_0 = -720
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bytes_0 = b"\xfd\x11H\xee\x89~\xd3\xde\x18\xdc*\x1a\x1b\x8d/\x1fN\xd6\xef"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    str_0 = "&14.QGKO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    str_0 = "0G7gGX:Av"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    set_0 = set()
    bytes_0 = b"\xeb\xa3\xe7\xbe\xc9\xf9\x8d\xf8\xfa\xd2\x8a\xd8\x19E\xc8.` \x9e\x17"
    tuple_0 = (set_0, bytes_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    int_0 = -1191
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    dict_0 = {}
    int_0 = -1919
    bool_0 = True
    tuple_0 = (dict_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    str_0 = "h@S>\nq-#)`FVN+H6R8v\n"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    str_0 = "7\r9\\9YDJ3j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    str_0 = "oLFUUkf5cq~~hVw"
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    int_0 = -2617
    tuple_0 = (bool_0, dict_0, dict_0, int_0)
    str_0 = "yMm0\r'D!,"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    tuple_0 = ()
    bool_0 = True
    str_0 = "ARL?0"
    tuple_1 = (tuple_0, bool_0, str_0)
    dict_0 = {tuple_1: tuple_1, str_0: str_0, tuple_0: bool_0, tuple_0: tuple_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    str_0 = "'BC9H\n]X[hyu"
    str_1 = "K7JQxf"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    int_0 = -2061
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    float_0 = 1294.7939
    set_0 = set()
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_1413():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1414():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bytes_0 = b""
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, bool_0, bool_0)
    dict_0 = {bool_0: list_0}
    bytes_1 = b"\xf7\x85[\xec\x85\xecT"
    tuple_1 = (tuple_0, dict_0, tuple_0, bytes_1)
    tuple_2 = (tuple_1, bool_0)
    tuple_3 = (bytes_0, tuple_2)
    none_type_0 = None
    module_0.match(tuple_3, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    float_0 = 1120.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    bytes_0 = b"\x7f@\xc8\xcd\xbb^\xca\xc1\x8f\xcf\x0f\xeaXd\x0c\xf8\xd4"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    complex_0 = 633.3 + 4425j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    float_0 = 4612.316944
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    int_0 = 1391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bytes_0 = b"R. \xb5\x8e\x9d\xd3(\xab\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    bytes_0 = b"\x08%"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    int_0 = 2726
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    str_0 = "kD|}Ie) &PAOmL"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bytes_0 = b"\xdc\xbd\x9e\xde2<\x10\xff\x11\x1f\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    object_0 = module_1.object()
    int_0 = 2359
    dict_0 = {object_0: object_0, object_0: object_0, object_0: int_0, object_0: int_0}
    module_0.get_new_command(dict_0, object_0)


def test_case_1427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1428():
    bool_0 = True
    bytes_0 = b"=o\x89\xba\xf0'"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    complex_0 = 1070.2 - 3084.36032j
    list_0 = [complex_0, complex_0]
    tuple_0 = (complex_0, list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    int_0 = -337
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    str_0 = '"\rXm"kk8jpU'
    str_1 = "@4yk{Nja;Mg"
    bytes_0 = b"\x1b\xc4\x00\xbe\x81'\x02\xfe\x7f\x1da\x8d\xb5\xc3hB;0"
    tuple_0 = (str_0, str_1, str_1, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    float_0 = -3274.87099
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    int_0 = 2420
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    str_0 = "HR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    int_0 = -1919
    list_0 = [int_0, int_0, int_0]
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, list_0, set_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    str_0 = "(Y|F=@NLoFv)N:Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    int_0 = -288
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    int_0 = -1124
    str_0 = "=C,LeNq$"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    int_0 = 1080
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0, tuple_0: int_0}
    tuple_1 = (int_0, tuple_0, dict_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    int_0 = 2766
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    int_0 = 2446
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    float_0 = 36.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = ",Kh'R;:k\\\r\n\x0bRG"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    int_0 = -537
    dict_0 = {int_0: tuple_0, int_0: tuple_0}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    int_0 = 324
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    str_0 = 'x"D7pJwY9Pds jp.6[s}'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    bytes_0 = b"s\x0c^\xe7\x1e\x9e\xdfQ>\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bytes_0 = b"\x9cMB\x15\x0bS\x99CPV\xa6~\xf8"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    tuple_0 = (list_0,)
    str_0 = ""
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    int_0 = -3284
    module_0.get_new_command(int_0, int_0)


def test_case_1452():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1453():
    float_0 = -469.27
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


def test_case_1454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1455():
    bytes_0 = b"c$\x12\x9d\xbeN\x1a\x05\xfe\xe7r\xbe\xac\x1d\xd9{\xe4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    dict_0 = {}
    tuple_0 = ()
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    bytes_0 = b"\x125\xf6\xe3=\x11\xf8\x97"
    bytes_1 = b"Js\x18\xa2\x9c"
    tuple_0 = (bytes_1,)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: tuple_0}
    tuple_1 = (bytes_0, dict_0, dict_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    int_0 = 3496
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    int_0 = -3846
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    bytes_0 = b"\x10\x94((T\xfb\x96\x9do\xac0j\x840"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    float_0 = -1332.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    int_0 = 3052
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    int_0 = 711
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bytes_0 = b"=\xbb#9\xfc\x06kX#\x1f|\xa1\x8c\xba@\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    str_0 = "(?dAE>izRn9~_>9ln"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    str_0 = ".Tz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    int_0 = 1021
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    float_0 = -2627.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    str_0 = "\n%c;{+&#TWJj-E}:Z62s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    int_0 = -1180
    dict_0 = {int_0: int_0, int_0: int_0}
    str_0 = "0-n!'-\r/gqQ\rd9+Z)"
    list_0 = [int_0]
    tuple_0 = (dict_0, str_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    bytes_0 = b"-g\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    complex_0 = -965.006 + 661.003494j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    int_0 = -3852
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    list_0 = []
    list_1 = [list_0]
    float_0 = -1302.989
    float_1 = 1240.0
    str_0 = "mN-\tC?"
    tuple_0 = (float_0, float_1, str_0)
    tuple_1 = (list_1, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bytes_0 = b"*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    int_0 = -878
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    float_0 = -568.0
    bool_0 = True
    tuple_0 = (float_0, float_0, bool_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    int_0 = 1940
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    bytes_0 = b"\x1c\x0b\xcb\xcd\x87(\xcd"
    float_0 = -1251.2
    list_0 = [bytes_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    str_0 = "}E7Gf"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


def test_case_1484():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1485():
    int_0 = -1285
    module_0.match(int_0, int_0)


def test_case_1486():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1487():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    none_type_0 = None
    str_0 = "rC(-K\t9w\tA3>}].B2"
    module_0.get_new_command(none_type_0, str_0)


def test_case_1490():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1491():
    int_0 = 668
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    str_0 = "\n61xV_"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    int_0 = -180
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    int_0 = 575
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = 4020
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: list_0, bool_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    int_0 = 575
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    int_0 = 764
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    str_0 = "V+KG\n:ZM/+=U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bytes_0 = b"\x8d6\xdf\t\x1d\x0f"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


def test_case_1502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1503():
    int_0 = 107
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    str_0 = '&%P`^ob4<m$Y2h"+q'
    list_0 = [str_0]
    list_1 = [list_0]
    tuple_0 = ()
    tuple_1 = (list_1, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    str_0 = "deMLo"
    bytes_0 = b"\x0f\xb8\xab\xeeD"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    str_0 = "DP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    str_0 = "-eR"
    bytes_0 = b"<I\x9aBy\xf2+\rGa\x88\x8b+p\x97"
    tuple_0 = (str_0, bytes_0)
    bytes_1 = b"F\xfb\xbf\x83\xf1=Q`\x07"
    list_0 = [tuple_0, bytes_1]
    bytes_2 = b"F\xc1S \x07`\x12T.7i"
    bytes_3 = b"K\x19\xf1/\xfe\xd7\x93\x1f"
    tuple_1 = (list_0, bytes_2, bytes_3, bytes_3)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    str_0 = "X!|kei\t6qmZ\tEP"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    complex_0 = 1352.47096 + 74.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    int_0 = -3480
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    bytes_0 = b"\x81J!\xe0\xff[_\xccgX'"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    float_0 = 187.9492
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, set_0, bool_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    str_0 = '*M"1 )*"d'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    bytes_0 = b"\xdb\x1f\x8d9\xa8\x02^U\x12\xb2\x86\xa1t\xca\xf6\xeb7"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_1517():
    pass


def test_case_1518():
    pass


def test_case_1519():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1520():
    bool_0 = False
    object_0 = module_1.object()
    list_0 = [bool_0, object_0, bool_0, object_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    str_0 = "-YiI\x0c4-+bO.3]"
    bool_0 = False
    tuple_0 = (str_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    int_0 = -420
    bool_0 = True
    str_0 = "\x0b~\tc:NF}E!e%?&"
    tuple_0 = (bool_0, str_0, int_0, int_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    str_0 = "|&d!{L}Cy&"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    bytes_0 = b"R\xc5\x87%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    str_0 = "r9p,caw\x0b23Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    float_0 = -280.882
    str_0 = "i`)S!j.Nrc?iu"
    tuple_0 = (float_0, str_0, str_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    str_0 = "ri\x0c\n|hD>?f]-\x0czL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    int_0 = -409
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    bytes_0 = b"j\x10>\xa9\x9b\xa9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    complex_0 = -1038.92603 - 566.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    int_0 = 2121
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    int_0 = -388
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bytes_0 = b"\xbd\xa9\x837"
    module_0.match(bytes_0, bytes_0)


def test_case_1536():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1537():
    str_0 = "7XQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    int_0 = 1831
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    str_0 = "hoV7xB\x0c(lI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    float_0 = -1812.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    bytes_0 = b"\x02|\x9f\xc1\x1b\xf7\xa8\xc7\xea\xbc\t\x17,=Q8%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    int_0 = 1231
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    float_0 = -247.1668
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bytes_0 = b"\xb7h^\xe8+\x99\xa4\xf9\x8c\xc5\x8aSJ\xdbg\x98\xc2^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    int_0 = 1724
    str_0 = "@k"
    module_0.get_new_command(int_0, str_0)


def test_case_1549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1550():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    str_0 = "l'sJMzfjAj1,lR6TNjse"
    module_0.match(str_0, str_0)


def test_case_1552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1553():
    int_0 = 1061
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    bytes_0 = b"=d\x8a\xfb\xc4\xe3\xcdA\xe503n\x12\xb9\x07\xf6\x1e\x9dO>"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_1555():
    pass


def test_case_1556():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1557():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    int_0 = -2542
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    bool_0 = True
    set_0 = {bool_0}
    bytes_0 = b"\xc0\x96O\xff\x9e83\xbe\x0f\xf3.\x98\xbe\xc2"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    str_0 = "Pm\rC%qT$nV;O?nMM*,\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    str_0 = "z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    float_0 = 1034.4267
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    int_0 = -2538
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    str_0 = "31\\~;g.(\tbj\x0bj\x0cr"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    str_0 = "OCg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    float_0 = -1917.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bytes_0 = b"N\xe05)b\xc2\x91\xf8T\x11~\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    int_0 = 4437
    set_0 = {int_0, int_0, int_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bytes_0 = b"x\xce@l\xc9;\x94\x9c%\x9c\x100\xd0v\x80"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0, list_0, bytes_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    str_0 = "rk)Irx~9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    complex_0 = -80.5 - 1875.501j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    int_0 = -1437
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bytes_0 = b"\xf4*\xaf\xf8\x8ex`\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    none_type_0 = None
    int_0 = -367
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    str_0 = "?HC%6\x0cNkf"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    set_0 = set()
    list_0 = [set_0, set_0]
    tuple_0 = (set_0, list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bytes_0 = b"\xcc\\84b\x95\x98\xb2d\xa9\xf9\xc1\xe2\xb0\x06\xf9="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    float_0 = -899.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    str_0 = "@kxi2M6;"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    str_0 = "P{dQ\x0cs3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    int_0 = -374
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1586():
    int_0 = -1988
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    str_0 = "T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bytes_0 = b"\"~\xfa\xd3\xcb\x9b<\x8f\xd5\xab\xe4&C\xe2\x9d'A\x84W\x1f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    int_0 = 675
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    float_0 = 1454.074
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    int_0 = 183
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    int_0 = 167
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    str_0 = "K==f}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bytes_0 = b"r%\xafh\x1b\x99\x9a;3\xd1\x81\xceSOSX\xbdJI"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    bytes_0 = b" u\xb4\x04\x12\x1cM\x83\x85\xf8\xea\xce\x04$w"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    str_0 = "A]=Go&;R8&}%W*"
    bool_0 = False
    list_0 = []
    tuple_0 = (str_0, bool_0, list_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    bytes_0 = b"\x19\xad\x83\xae3\x95\xed\xe8\x17"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    set_0 = set()
    str_0 = "9[I Cfz*\x0c-o2'[L`2"
    tuple_0 = (set_0, set_0, set_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    str_0 = "G&1]j.6D%,{=9%&\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    str_0 = ""
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    float_0 = -2082.82769
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bytes_0 = b"\x11\x04l\x9b9!\xceG\xfe\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    str_0 = "*\x0c)yE"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    object_0 = module_1.object()
    float_0 = 2685.20239
    int_0 = -791
    dict_0 = {object_0: object_0}
    tuple_0 = (object_0, float_0, int_0, dict_0)
    list_0 = []
    object_1 = module_1.object(*list_0)
    list_1 = [tuple_0, object_1]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    int_0 = -752
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    str_0 = "pm{F7l4zz|"
    str_1 = "^^P*mH0!%/y#5F\x0c:"
    str_2 = 'IO"*Wa'
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    float_0 = 875.9802
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    bytes_0 = b"\x8e\xe7\x02\xc3"
    module_0.match(bytes_0, bytes_0)


def test_case_1615():
    pass


def test_case_1616():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1617():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    float_0 = -622.354
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    bytes_0 = b"ixJ]\xb9A\xae\xf6\xbf}\x0b<\xf8\x8a\x1b\x8f\x83\xd3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    int_0 = -2182
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = True
    module_0.get_new_command(list_0, bool_1)


def test_case_1623():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1624():
    int_0 = 807
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    float_0 = -241.13035
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    str_0 = "Nx7}_fXtE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bytes_0 = b""
    bytes_1 = b""
    bool_0 = True
    dict_0 = {bytes_0: bool_0}
    list_0 = []
    tuple_0 = (bytes_0, bytes_1, dict_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


def test_case_1628():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1629():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    float_0 = -2148.3
    module_0.match(float_0, float_0)


def test_case_1631():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1632():
    float_0 = -3168.2
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (float_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    float_0 = 2596.5
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    str_0 = "R-f\n\\|yV2vR,^PPP>rx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    str_0 = "S>1znGH]s7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    int_0 = 681
    int_1 = 797
    dict_0 = {int_0: int_0, int_1: int_0, int_1: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    bytes_0 = b'\xb5\xa3"\xfd\xd9\x02'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    str_0 = ";sFl?/kX=\\s;|J@I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    float_0 = 3115.7613
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    int_0 = 3259
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    str_0 = "23YwtB2!.A('t7N|"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    dict_0 = {tuple_0: str_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    float_0 = 1217.0398
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    float_0 = -1583.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    int_0 = 946
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    int_0 = 2809
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    bytes_0 = b"\x818"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, list_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    int_0 = -1669
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    str_0 = "Q]Rm\rlI_!>PiSVPi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    str_0 = " a#jbQ I]Gk=pbh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    complex_0 = -1115.88995 + 2842.78536j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    float_0 = 620.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    float_0 = 1355.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    str_0 = ",Ly*<{}0\r#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    str_0 = ""
    str_1 = "84#_\rD2\\4JI6;$tj"
    list_0 = [str_0, str_0, str_1]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    bytes_0 = b"\n\x14\x0f\x13%\xfc\xab\xe70\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    str_0 = "U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    bytes_0 = b"\xe0k\x10\xf2v\x87\xb7\xca\x19\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    str_0 = "9Z\\uazd4W>pj>@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bool_0 = False
    int_0 = 991
    set_0 = {bool_0, bool_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    str_0 = "a^jS[[\\*i%7"
    str_1 = "Kc,z"
    str_2 = "D@C-tB0EiJ'ze@&#je-\\"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


def test_case_1663():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1664():
    str_0 = '\\o\ra3Y"nO&Ls&{]'
    module_0.match(str_0, str_0)


def test_case_1665():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1666():
    float_0 = -2310.2933
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    set_0 = set()
    dict_0 = {}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bytes_0 = b"c\xed\x9bM\xe6$\x84f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    float_0 = 3044.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    float_0 = -3550.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bytes_0 = b"\x92d\xda\xa1\xc5R\xb9\xbc\x82\x80?\x08"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_1672():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bytes_0 = b"t\x0bi\x80\xb2+[2N\x0cI\xd3\xb4I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    dict_0 = {}
    str_0 = " D:Zav-"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    int_0 = 1483
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    str_0 = "Acpo+RrpS+5"
    int_0 = 1469
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    float_0 = -553.7005
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    str_0 = ""
    none_type_0 = None
    str_1 = "O\rO%o5so"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    str_0 = "Q\\.*[r/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    int_0 = 2097
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    none_type_0 = None
    int_0 = -2010
    list_0 = [none_type_0, int_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    int_0 = 1342
    tuple_0 = ()
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    bytes_0 = b",\xb2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    complex_0 = -384.2 - 231.7359j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    int_0 = 3345
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    int_0 = 1967
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (list_0,)
    int_1 = -486
    tuple_1 = (int_0, list_0, tuple_0, int_1)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    bytes_0 = b"\xcd\x98\xcd$4\x12.M\x12\x9e\xd2(\xaa"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bytes_0)
    set_0 = {tuple_0, bool_0, bytes_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bool_0 = False
    bytes_0 = b"1\xf1"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    bytes_0 = b"\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    bytes_0 = b"\x19 \xa51\xfc\x00\x07D<\xfc\x98\xbd\xbf\x01g\x04\xde\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    int_0 = 1391
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    bool_1 = False
    tuple_0 = (list_0, bool_1, dict_0, bool_0)
    int_0 = 2087
    list_1 = [tuple_0, int_0, bool_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    str_0 = "e2t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    int_0 = -421
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1700():
    pass


def test_case_1701():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1702():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    float_0 = -2653.0507
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    bytes_0 = b"LX`\x94on"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bool_0 = False
    bytes_0 = b"M\xebi\x13\x16!@\xd4I\xe2\x90\x90l\x07\xd8\xca\xb1!Y\x9b"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    int_0 = -336
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    none_type_0 = None
    float_0 = -572.4771
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    int_0 = -2624
    bytes_0 = b"4j\xe0\x07\xc5m"
    tuple_0 = (int_0, int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bytes_0 = b"g\x16\x1f\x84W\xf2\x00\x04O\xa0\xdc\x0c\xcf\xf3\x90v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    int_0 = 2719
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bytes_0 = b'\x1f\x9bL7"\xaa'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    str_0 = 'ce^ZoUOCzTXKa"TI'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    bytes_0 = b'f\x18\x02uD#"5'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    float_0 = 1060.6611
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    bool_0 = True
    bytes_0 = b"\n\x8f\xb2Y\x05\xe2:\xe6\x13\x08D\x18@\xa7\xe5"
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bytes_0 = b"N\xa2\xbf\x13"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    str_0 = ".Xs[D"
    bool_0 = True
    bool_1 = False
    tuple_0 = (str_0, bool_0, bool_1)
    set_0 = {tuple_0, bool_1, str_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    bytes_0 = b"9\xf1D\xd8?\xa4\xafE\xd2#"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_1721():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1722():
    complex_0 = -2590.5 - 1879.589j
    object_0 = module_1.object()
    tuple_0 = (complex_0, object_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    list_0 = []
    bool_0 = True
    float_0 = -859.0
    tuple_0 = (list_0, bool_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    float_0 = -1590.20207
    set_0 = {float_0, float_0}
    list_0 = [float_0, float_0, float_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    str_0 = "D|\nXF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    str_0 = "1M`(x\t2Dbo(1[u"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    int_0 = 1872
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    int_0 = -2518
    bool_1 = True
    bool_2 = True
    tuple_0 = (dict_0, int_0, bool_1, bool_2)
    tuple_1 = (bool_0, tuple_0, dict_0)
    module_0.get_new_command(tuple_1, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bytes_0 = b"\xd0\x941/(\xb3\xaf\x07,"
    complex_0 = 3561.1783 - 2874.5839j
    dict_0 = {bytes_0: bytes_0, complex_0: complex_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bytes_0 = (
        b"\xea\xc9\xb8\x1f\xbf\xb1\xf1]\xf1\xd9\n\x16\xdf\xa2\xb9\x82\x18\x8b\xaev"
    )
    set_0 = {bytes_0}
    bytes_1 = b"\x0f"
    module_0.match(set_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    bytes_0 = b"\xc3W$X\xf7\x8bi"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    int_0 = 4862
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    str_0 = "RO"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, str_0, dict_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    str_0 = "f. <6"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    str_0 = "R~X9\x0c7\t,wyo7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    int_0 = 3515
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    float_0 = 373.162289
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    str_0 = "qpC81A[1y"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    float_0 = 1748.77
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    str_0 = "hKWp5tF{R=NTa\x0b9%!8>:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    complex_0 = -901.409 - 2563.79301j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    str_0 = "+{EX$x+~Z^pe%p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    bool_0 = False
    int_0 = 1425
    list_0 = [bool_0, bool_0, bool_0, int_0]
    dict_0 = {bool_0: bool_0, bool_0: list_0, bool_0: int_0, bool_0: int_0}
    module_0.match(bool_0, dict_0)


def test_case_1751():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1752():
    none_type_0 = None
    str_0 = "s\rIW*-k[8{eRe\tME)"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bytes_0 = b"%/\x89m:\xfa|\xda\xd2\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    int_0 = -1630
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    str_0 = "k:9}H)p}"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    int_0 = 4298
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    complex_0 = -980.99 - 3625.809j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    bytes_0 = b"\xb2\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    int_0 = 2764
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    str_0 = "lPum[^PmD\x0bE9\n(5w:\\8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [bool_0, list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    str_0 = "8\n+3]G<3hk(wXXg)s,6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    str_0 = "AOKi.IFY_"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


def test_case_1765():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1766():
    int_0 = 2979
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bytes_0 = b"-J<\xd0\x91\xf4l4E\x97\xe9\x19\xc2\xfb\x9c"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    bool_0 = False
    float_0 = 3539.75
    tuple_0 = (float_0,)
    bool_1 = False
    tuple_1 = (bool_0, tuple_0, bool_1)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    int_0 = -920
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    float_0 = -3825.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    str_0 = "\x0bRxQ."
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    str_0 = "=Ms"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    bytes_0 = b"\xb4"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    str_0 = "=b:+v|\n|=J\t.oZ3OCbB3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_1776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1777():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bytes_0 = b"\xce@s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    float_0 = 398.44
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bytes_0 = b"\x91\xff\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    bool_0 = True
    str_0 = "f4"
    tuple_0 = (bool_0, bool_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    int_0 = -3009
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    complex_0 = -1656 + 354.23516j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, list_0)
    bytes_0 = b"\xf9"
    tuple_1 = (tuple_0, bytes_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    int_0 = -1014
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_1788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1789():
    int_0 = -2600
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    int_0 = -1458
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    bytes_0 = b"^\xf5QE\xe3\x18Pqp\xb0\x9fj\xe7\x0e\x19mh\xbc\x81D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    str_0 = "vC](3tzfGS%S,w\x0b=\x0c@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    bytes_0 = b"\xa8\xa9b\xdf\xeb\x9dI\xc9\xba\x08\x90N\x9a"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    str_0 = "\r&Im=E#QPA!G! LJl("
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_1796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1797():
    str_0 = "IL"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bool_0 = True
    complex_0 = 1112.0024 - 2782j
    module_0.match(bool_0, complex_0)


def test_case_1799():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1800():
    int_0 = -1293
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    int_0 = 252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    float_0 = -576.099944
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    bytes_0 = b"\x9f\xb2\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    float_0 = 1929.533
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bytes_0 = b"\xe6b-&_"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    bool_0 = False
    float_0 = 636.7
    tuple_0 = (bool_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    str_0 = "{~ph~r_9"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_1809():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1810():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    int_0 = 1789
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    complex_0 = 48.223655 - 24.08372j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "\rS2i"
    dict_0 = {str_0: list_0, str_0: none_type_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    str_0 = "!'iSOD+"
    set_0 = {str_0, str_0, str_0, str_0}
    bytes_0 = b",\xe8\x9eF\x06"
    tuple_0 = (set_0, str_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    str_0 = "&U.=(v*9~I"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    str_0 = "d`AEQj21$+h@6zf,Z\to"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    none_type_0 = None
    bytes_0 = b"\xd7Ng\xce'\xf6\xcfqC\x00O\n9\x7fzH\xdd\xe6\xff"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    int_0 = 643
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    bytes_0 = b"\xf0\xa2\xa8\x9b\xb6?\xcc??X\xb2\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    set_0 = set()
    list_0 = []
    tuple_0 = (set_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    bytes_0 = b"\xe5\x8cm\xc5\xf0\x14\xce\xef\xde+\xb2E\xbd\xc5\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    str_0 = '<S pDqPU7=5*"!'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    bytes_0 = b"\xcfjIR1zH\x8eQ\xcf1\r\xcd+\x01\x13\x18\xee."
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    int_0 = -1514
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    str_0 = "<P$r\x0b&S |"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    bool_0 = True
    bool_1 = True
    float_0 = -236.9846
    tuple_0 = (bool_1, float_0)
    dict_0 = {bool_0: bool_1, bool_0: bool_0, tuple_0: float_0, float_0: tuple_0}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    complex_0 = 277.81 + 1002.04463j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    float_0 = -535.09
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    str_0 = "%}rY0R/a9\n*f/\\x\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    str_0 = "ud[OBCu-_&8%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    str_0 = "ND\rkTF>X>3\rL&y@N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    str_0 = "5|K~U,\\T.0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    str_0 = "sOEzJ8uRU=ywKW.Bk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    bool_0 = False
    str_0 = ">KCG"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    int_0 = 1647
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    int_0 = 601
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    str_0 = ""
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    int_0 = -3996
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    str_0 = "n4!Q7}[s;VgO00k6"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    int_0 = -98
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    str_0 = "J_Ji\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    list_0 = [dict_0, tuple_0, tuple_0]
    module_1.object(*list_0)


def test_case_1850():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1851():
    int_0 = 1301
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bytes_0 = b"\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    float_0 = 1592.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    str_0 = "j5y>J\tj{\x0b \x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    str_0 = "7|.\\uIuw;w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    float_0 = -2354.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    float_0 = 1269.938
    str_0 = "BT;Xyp2\n_UM"
    dict_0 = {str_0: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    str_0 = "RG)np"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    int_0 = -803
    int_1 = 448
    dict_0 = {}
    list_0 = [int_0, int_1, dict_0]
    list_1 = [list_0, dict_0]
    module_0.get_new_command(list_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    bytes_0 = b"\xbc\x9bs\x1d\x8b&O\xe9\xbds\x93\xfb\x05\x00"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    int_0 = -135
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = '"NHmZYo'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    bool_0 = True
    float_0 = -2331.63304
    object_0 = module_1.object()
    bool_1 = False
    tuple_0 = (float_0, float_0, object_0, bool_1)
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    int_0 = 3352
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, int_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    str_0 = "UkTaE^I5]JJBZy.\\#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bytes_0 = b"\xde\xc5S\xee"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_1870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1871():
    complex_0 = -305.3664 - 1276.289708j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bool_0 = False
    set_0 = {bool_0}
    bytes_0 = b"b\xff\xb619\xe1a_\xe5\x0e\xf4"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    str_0 = "\nd*=1Iowo;WeNsKntwp:"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bytes_0 = b"\xf9s\x9e"
    set_0 = {bytes_0, bytes_0}
    int_0 = -3412
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    float_0 = -97.64958
    module_0.get_new_command(float_0, float_0)


def test_case_1878():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1879():
    str_0 = "0y~\tfo\\gSB#$/P"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    float_0 = 365.905
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    bytes_0 = b"|d\xcf\xf4\x9c\xac\x1a,\x17~\xc6\xffx\xb6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    bytes_0 = b"qk8\xcf\xd58\\g\xd0\xea\xab\r\xce\x89\x9d\xdf\xb6c"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    bytes_0 = b"\xfd\xcd,\xa0B7o\x82\x13\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    str_0 = 'D?$f\\xBs0i")~\t'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    bytes_0 = b"-_\xe9h_}\x17!<\xa4P}}\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    int_0 = -3364
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    complex_0 = 1790.68 + 113.333j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    complex_0 = 1956.222645 + 1027j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    str_0 = "+w\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    bytes_0 = b"$\xab\x96\x86'\x0c\xa2\xb1\xed\x16I"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    str_0 = "A@} \x0c:}C\x0b?^ta~"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    set_0 = set()
    tuple_0 = (set_0,)
    object_0 = module_1.object()
    list_0 = [tuple_0, object_0]
    tuple_1 = (set_0,)
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    bytes_0 = b"`\x13c\xae\x80w\x9ft\xf2G-e\x84X6T-"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    complex_0 = -1366 + 307j
    list_0 = []
    tuple_0 = (complex_0, dict_0, list_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    int_0 = -2675
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    complex_0 = 2898.7644 - 3010.3913j
    int_0 = -354
    tuple_0 = (complex_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    float_0 = 1600.455335
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_1901():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1902():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, tuple_0, bool_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bytes_0 = b"l\xa3)s\xe1\xfd"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    int_0 = 678
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    bytes_0 = b"=\xb7\x13\xb3\xf1]"
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    str_0 = "b:~&ggkY"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    str_0 = "JfEJ$ASTS"
    tuple_0 = ()
    list_0 = [str_0, str_0, str_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_1909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1910():
    str_0 = "eC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    bytes_0 = b"\xe5\xba\r\n\xae\xdc6\xea*\xf5\x99m\x94\xd6\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    bytes_0 = b"\xa0\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    str_0 = "f3w|atw'1>gu\ngS%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    str_0 = "RjAeJ0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    int_0 = 1219
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    str_0 = "c)nY"
    bool_0 = True
    list_0 = [str_0, str_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    str_0 = "2hH0^7!\x0c6OhpO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bool_0 = False
    bool_1 = True
    str_0 = "n]V[4F6&;m\x0cm.w;lY7p"
    tuple_0 = (bool_0, bool_1, str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    str_0 = ":"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    str_0 = "Bw#h@-^?F"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    int_0 = -1238
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_1923():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1924():
    bytes_0 = b"\xb02\x02\x1c\\\x9f\xfa"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    float_0 = 4745.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    float_0 = -1142.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    bytes_0 = b"\xac\x1a-\xd5az"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    int_0 = 1816
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    str_0 = "\\T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    int_0 = -4948
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    str_0 = "c\x0b2"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_1933():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1934():
    float_0 = 186.9086
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    complex_0 = -305.237 - 1630.57655j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    str_0 = "nnZdV"
    bool_0 = True
    list_0 = [str_0, str_0, bool_0, bool_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    str_0 = 'fKF6"R'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    bytes_0 = b"\xab\x9d\xb2:\x1d\xcd\x0e\x1bO\x9e\x87\xa6\xd3"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    int_0 = 914
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    bytes_0 = b"\x0cb\x19\xabp{\xba\x857$Y\xdb\xf7\x87\x00"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    bytes_0 = b"\x1a\x91\xa2\xd1\xfa\xa3\xdcA\xfd\x05\xa9\x14|D\x19\xd6\xcao\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    float_0 = -2301.769485
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    int_0 = 3529
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    int_0 = 1407
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    float_0 = -4318.187
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    float_0 = 1074.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    int_0 = -1280
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    int_0 = -935
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    complex_0 = -343.7466 + 77.67336j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1952():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1953():
    int_0 = 593
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    int_0 = -3587
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    str_0 = "zyp2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    str_0 = "a5RQ*mK"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    str_0 = '\tD"(avoeRzW[n\rS|K'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    int_0 = 1558
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    bytes_0 = b"<\x95{&whg\xff\x8c\xf7"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    str_0 = "cA,UlX;eDV@ri4v+WLkn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


def test_case_1962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1963():
    float_0 = 1067.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    int_0 = 1944
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    int_0 = 219
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    bytes_0 = b"q\x02\x03Z\xd0N\xc8\xa6\xe0\x1b\x14&j"
    module_0.match(bytes_0, bytes_0)


def test_case_1967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1968():
    str_0 = "W?;Feb~\x0cWd"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    str_0 = "yuRYNdoY5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    float_0 = 88.419
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = "V\\eu9\\KAl("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    bytes_0 = b"2 #\xa8`\xe0\xfbFV@Z\x02\xb0\x9d{"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0, bytes_0]
    dict_0 = {}
    list_1 = [list_0, dict_0]
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    str_0 = "#\rgTA"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    none_type_0 = None
    int_0 = 465
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bytes_0 = b"<c\xfd\x9a\xdf\xdd\xcf\xec\x1b\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    str_0 = "|utuI>\x0b.Y'@@xNADM-`"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    int_0 = 2837
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    bool_0 = False
    str_0 = "i\rOOPS},J2kIA?|9<F"
    dict_0 = {bool_0: str_0, str_0: str_0, bool_0: str_0}
    list_0 = [bool_0, bool_0, dict_0]
    list_1 = [list_0, list_0, list_0, bool_0]
    tuple_0 = (bool_0, list_1, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    complex_0 = 2245.052 + 622.83j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    str_0 = '">j Gu8icd.@\n3^'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    bytes_0 = b"\xbc1\xefC\x9c.)"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    str_0 = "\rKn4Yo6iP DV(u(=b"
    list_0 = []
    float_0 = 314.965282
    tuple_0 = (str_0, list_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1986():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1987():
    str_0 = "2{r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    bytes_0 = b"[b5\x9e\x9e\x97+q\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    int_0 = 1002
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    int_0 = -105
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    complex_0 = -1511 - 1591.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    str_0 = "X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    float_0 = -2683.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    complex_0 = -1079.6083 - 2370j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    int_0 = 1196
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    bytes_0 = b"\xaei6\x0fQR\xca\xe4\x11^!\xee\x98"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    bytes_0 = b"]\xdbQ\x97\xa1\xad.\xdf"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    complex_0 = -1344.2034 + 1771.858622j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    bytes_0 = b"\x91\x1a\x8b8\xf2\x9a\xe8\x8c! \n\xb5\xcd\x1a\x89\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    int_0 = 823
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    float_0 = -2509.640142
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    int_0 = -3461
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    int_0 = 678
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    int_0 = 638
    complex_0 = -2549 - 136.94137j
    set_0 = {int_0, int_0, complex_0, int_0}
    module_0.match(set_0, complex_0)


def test_case_2010():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2011():
    int_0 = -65
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    bytes_0 = b"\t\xa1\xee3\x9e\xa6/\xb1t\x1a\xa0\n\xfa\xaf\xe2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    str_0 = 'Y)h $%L"!'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    bytes_0 = b"\x9b\x102Dl\xe2\xf6\x0f\x18B\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    dict_0 = {bool_2: bool_0}
    tuple_0 = (bool_1, bool_1, bool_2, dict_0)
    module_0.match(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


def test_case_2017():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2018():
    str_0 = "P$~{\rKKtEsQ-\ncF]o1P"
    str_1 = "9(O"
    str_2 = 'bBWhi"eQ}ZvpP@A(l`7%'
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    str_0 = "5sxrc\x0bfR\na_s>V[w $%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    bytes_0 = b"\xaf"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    tuple_0 = ()
    str_0 = "D!I/*J`]hEw7-Y"
    bool_0 = False
    dict_0 = {bool_0: str_0, tuple_0: bool_0}
    tuple_1 = (tuple_0, str_0, bool_0, dict_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    int_0 = 101
    str_0 = "{^m@\\Z9](VOTR=\nWdEPq"
    tuple_0 = (int_0, str_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = 1237
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    int_0 = -941
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    bytes_0 = b"\xc5e\xbc\xfa\xf2\x1fI\x9d\xf1\xecr\\\xb8>\xbd\xde\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    bool_0 = True
    str_0 = "s\x0bQqB+|0SCg/m."
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1, bool_0)
    dict_0 = {tuple_0: bool_1, tuple_0: str_0, bool_0: tuple_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    str_0 = "Fc$o2ePUX;M'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bytes_0 = b"H/\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    bytes_0 = b"\n\xf0e\x98a\x9c\x8b\xfd"
    bytes_1 = b"J\x14\xe9\x99q\x17\xac\x8e\x97\xa1\x1dzT\xba"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    str_0 = "`@rOY\\+<k4d&~-#C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    bool_0 = False
    tuple_0 = (bool_0,)
    str_0 = "Gg"
    tuple_1 = (tuple_0, str_0, bool_0)
    set_0 = {tuple_1}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    set_0 = set()
    str_0 = "c,R4"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    str_0 = ":I-\x0cl'XTIZ38MMbIOK"
    module_0.get_new_command(str_0, str_0)


def test_case_2035():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2036():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    int_0 = -1130
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bytes_0 = b"\x84LB\xf9\xa2\x86\x04(/\xb3\xc5\x92\x0coo\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    str_0 = "vB"
    module_0.match(str_0, str_0)


def test_case_2040():
    pass


def test_case_2041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2042():
    float_0 = -2337.383471
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    int_0 = -878
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    float_0 = 1792.883409
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    float_0 = 1120.85
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    str_0 = 'S!qnrOR?"M-MK'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    str_0 = "T~lRkf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    str_0 = ";F@@EZa\t7\x0cwc&xp"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bytes_0 = b"\xa9\x97\x92\xb0%\x17\x06\x96\x08\x9e}s\xe2\x04NM\n\xde\xcd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    int_0 = -1171
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    bool_0 = False
    str_0 = "Kz{u%]Bnv\tW>P~"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    str_0 = "c~c~7y@=YEHKj ..gX\\"
    int_0 = -1815
    tuple_0 = (str_0, int_0)
    bool_0 = True
    int_1 = 646
    dict_0 = {}
    tuple_1 = (tuple_0, bool_0, int_1, dict_0)
    module_0.get_new_command(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    str_0 = " MwJ\r:FcX^"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    str_0 = "f6O\\oWUuMC"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    int_0 = 506
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bytes_0 = b"\x9e\x14c"
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bool_0}
    int_0 = 583
    tuple_0 = (bytes_0, set_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    int_0 = 1195
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bytes_0 = b"\xb5'Bk"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    str_0 = "\n?v3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    bytes_0 = b"-\xe1T\xe5;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    float_0 = 3626.1899
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    str_0 = ":#B;ncH:o$T7-M^q7"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    float_0 = -2870.4352
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    int_0 = -5739
    int_1 = -945
    float_0 = -1105.0
    dict_0 = {int_0: int_1, int_1: int_1, float_0: int_0}
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    int_0 = -4800
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    list_0 = [object_0, dict_0, object_0, dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    int_0 = 3929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    float_0 = -1808.954
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


def test_case_2072():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2073():
    int_0 = -320
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    bytes_0 = b"\x11q\x9bV\xe2'\x15(8Jc"
    list_0 = []
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    float_0 = 111.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    str_0 = "\"g'>"
    set_0 = {str_0}
    bytes_0 = b"\xd1\xe4\xcd\x15\xcc\xe9\xad&K\x015\x9cB\xe7"
    module_0.get_new_command(set_0, bytes_0)


def test_case_2077():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2078():
    str_0 = "y.pjxvhfL)y2"
    bool_0 = False
    bool_1 = False
    dict_0 = {str_0: bool_0, bool_0: str_0, bool_0: bool_1, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    str_0 = 'jNN&\x0c\t64Rp"1+bXM'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    str_0 = "D@1gHV>e<8YO3Vxqq"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bytes_0 = b"\xe8~\xfc)$\xc5\x16\x96\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    complex_0 = -272.4 - 1159j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    bytes_0 = b"\x9fv\x98\xd4\x14\x8f"
    str_0 = "Od7'g0eK|\r*U\\dmUw&F\r"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    bytes_0 = b"\xf0\xfd\x9d~\x13\x0cc\xf2/\x8dG\xf5\xfdcT;\x84\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    dict_0 = {}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    tuple_0 = ()
    str_0 = "\x0cy^aCWN\x0b0"
    dict_0 = {tuple_0: str_0, tuple_0: str_0}
    list_0 = [dict_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    int_0 = 417
    bool_0 = False
    str_0 = "<bke8TWV)/"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    str_0 = "$+jIJy_MDgj:yX"
    dict_0 = {str_0: str_0}
    bytes_0 = b"g\x00\xc2"
    list_0 = [bytes_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    bytes_0 = b"]\xf9\xf2\x01-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    float_0 = 1623.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    float_0 = -1064.7876
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    int_0 = 1747
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    str_0 = "iL+:SX3#~+N l4}l0zS\t"
    str_1 = "Ku&a"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    str_0 = "?fB1>rU^\x0chI-i;d"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    float_0 = -830.3789
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    str_0 = "d'}w&1+4=Y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    bytes_0 = b"\x0c\x15\xab\xae\xd6\xfb\x1b\xda\xd4\x1a\x96\xfb5i\xbe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    int_0 = 1511
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    float_0 = 1553.511419
    bytes_0 = b"\x08\xbd)"
    tuple_0 = (float_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    str_0 = "Qvc+t"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_2102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2103():
    str_0 = "Wtn*Y*K1B2SiV:"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    str_0 = "G#@\nf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    bytes_0 = b"\\\xb1\xce\x9c\xfd\xb1\x97\x85\x8c\xa5\xeb\xd1\xd9)\xf4:c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    tuple_0 = ()
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    str_0 = "\x0c|5N?96zu>;00yvU[HW"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    bytes_0 = b"\x93Y\x85."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    float_0 = 2736.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    float_0 = 254.31
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    int_0 = 3771
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    float_0 = -85.7
    module_0.get_new_command(float_0, float_0)


def test_case_2114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2115():
    tuple_0 = ()
    complex_0 = -107.902 - 1994.062411j
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    int_0 = -4489
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    bytes_0 = b"\x1b\x16\r\xf9u\xa0\x15\xd5\xb2W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    int_0 = 1607
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    int_0 = -1841
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    none_type_0 = None
    int_0 = -1364
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    str_0 = "^-e%6Tnqi?c2B"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2122():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2123():
    str_0 = "lf1G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    complex_0 = -925.3 + 2854.966j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    complex_0 = -75.2592 - 212j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    str_0 = "W"
    none_type_0 = None
    str_1 = "d<N1RKl:Z}Vrm&H'P"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    int_0 = -3531
    bytes_0 = b"9w\xf7I\x12\xdf\xac)\xa9\xe3\xab\x07"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    int_0 = 209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    bytes_0 = b"\x08|\xe1\xd3\xae\xf3\xf8E"
    int_0 = 3547
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    str_0 = "j0*F6\\nQXW"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    float_0 = 941.0298
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    bytes_0 = b"\xc0\xd7\xa3J{\x18;Z\xc1;\xfa\x05eV\xbc"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    str_0 = "uc3R:LIop"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    str_0 = "zJ2+aXd}"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    str_0 = 'G*d">L=u!}DU1C'
    str_1 = "m\\I@CTSBu/{Z:E1Gh"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    float_0 = -1498.21
    bool_0 = False
    set_0 = {float_0, float_0, bool_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "3CEJ9I7a"
    bytes_0 = b"\x1e\xd2\xe6\xc7\xd6\xfb\xef."
    int_0 = -3209
    str_1 = "E`y\x0cn8AzCEM\n"
    tuple_0 = (bytes_0, int_0, str_1)
    set_0 = {str_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    int_0 = 797
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    str_0 = "j3uStw[4mJfR"
    module_0.get_new_command(str_0, str_0)


def test_case_2140():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2141():
    int_0 = -762
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    complex_0 = 306.13946 + 1126j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    float_0 = 185.586
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    str_0 = "wmh>7-IQ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    str_0 = "_%t.vZvM@KQM.cXPh ~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    str_0 = "u{%S$x(<r27^8EJ/W"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    float_0 = -361.238
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    str_0 = "mMO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    bytes_0 = b"\xed\xfb\xf4\xb0:9\xd7"
    list_0 = [bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    int_0 = 3162
    set_0 = {int_0, int_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_2153():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2154():
    int_0 = 2456
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    int_0 = 2653
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    int_0 = 854
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    str_0 = "Sg9-mw;SvQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    float_0 = -1146.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1]
    list_1 = [bool_0, bool_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    str_0 = "ctwR&;PsC\x0bC2_1V,4Si}"
    complex_0 = -1894.175 + 1946.878578j
    tuple_0 = (str_0, str_0, complex_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    complex_0 = -2243.104853 + 833.94j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    bytes_0 = b"o\x84g\x9b\x94\x97\x13\xa5\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    int_0 = -1194
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    int_0 = -3996
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    float_0 = 947.26
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    int_0 = 171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    int_0 = 1766
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    int_0 = -7654
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    bytes_0 = b"\xa7\xd07E\xb2\xc8\xd8\xb9\x05\x8b\xc1\\((\x9c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    none_type_0 = None
    str_0 = "3"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    complex_0 = 1269.90419 - 2243j
    dict_0 = {complex_0: complex_0}
    module_0.match(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    tuple_0 = ()
    bytes_0 = b"\xd2d["
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    int_0 = 1708
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    int_0 = 2638
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    bytes_0 = b"R"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    int_0 = 397
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    bytes_0 = b"\x0c\xebQ\x1b="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    str_0 = "L*=#LFJ:VVb8#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    bytes_0 = b"7\x9e!\xae\xe1\x9b\xcd\xc0F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    object_0 = module_1.object()
    str_0 = "9OI#&oyyt9:b*"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    bytes_0 = b"a\xa9\xa70\xd18\xd0\xcc}\xc4g#\x86J\xc5"
    module_0.match(bytes_0, bytes_0)


def test_case_2185():
    pass


def test_case_2186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2187():
    int_0 = -503
    list_0 = [int_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    str_0 = "Fbv?y`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    int_0 = 3121
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    bool_0 = True
    complex_0 = 2157.917762 + 922.9541j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    str_0 = ';c"Kd3E'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    float_0 = -748.58976
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    int_0 = -3400
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    int_0 = -3272
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bytes_0 = b"\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    bytes_0 = b"k\xf9\xb3\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    str_0 = "7WzGWlcQN!"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    str_0 = "zeSej}^87z$\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    int_0 = -2194
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    str_0 = "#(kFy<"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2207():
    bytes_0 = b"C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    int_0 = 886
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    float_0 = -2520.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    int_0 = 2425
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    bool_0 = False
    float_0 = -365.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    bytes_0 = b"\xcc\x87\x10\xd2bb{\x97\xca"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    int_0 = 1876
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    str_0 = "1\tR\x0bmGE>#zd"
    bool_0 = True
    list_0 = [str_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    str_0 = "{~w$Eit{{ND/}|.)7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    bytes_0 = b"^\x8f\x94\x83\x14?\xd0oXV\x01\xd5\xbb<"
    module_0.match(bytes_0, bytes_0)


def test_case_2222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2223():
    int_0 = -609
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    str_0 = "qH2%~YO\\WhPg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    int_0 = -4598
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    float_0 = -1785.45
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    int_0 = -2113
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = "+6`3{'?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    str_0 = ",x=y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    bytes_0 = b"\xbc\xb3\xbd)1\xa4\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    str_0 = "N8;6*H\rZpxy\t)RglD="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    int_0 = -403
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    bool_0 = True
    bool_1 = False
    str_0 = "GXBUoE-2O?E=>bej8c"
    tuple_0 = (bool_0, bool_1, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    str_0 = "@5G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    complex_0 = -3008.609 - 110j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    str_0 = "3iEl;jFM"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    float_0 = 449.2951
    dict_0 = {float_0: float_0, float_0: float_0}
    bytes_0 = b"\xd0b"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    complex_0 = -420.95 - 4127.775j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    float_0 = 1723.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    float_0 = -434.96011
    set_0 = {float_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    bytes_0 = b"\x19\x80"
    float_0 = 3529.2
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    complex_0 = 237.2 - 3542.3j
    bool_0 = False
    dict_0 = {complex_0: bool_0, bool_0: complex_0}
    tuple_0 = (dict_0, bool_0)
    tuple_1 = (complex_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    float_0 = -459.399
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    int_0 = -913
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bytes_0 = b"\xe9>V\xdd1\xbb\xfco\xc8\x89w\xd3\x96\xa1u\xe4\xff"
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    str_0 = ";(JT\\"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2254():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2255():
    int_0 = 1225
    bytes_0 = b"\xecYU1\x8e\x9eM"
    dict_0 = {int_0: int_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    module_0.match(list_0, bool_0)


def test_case_2257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2258():
    int_0 = -1645
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    bytes_0 = b"ux\xcbg\x9eX\x1c\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    bytes_0 = b"~6"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    int_0 = -1485
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    str_0 = "%swh3\r\x0cY#_5^raHN;m"
    str_1 = "Fr.-]g"
    str_2 = "\x0b`;KqZA_A(~Y=Y"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    bytes_0 = b"\xe2\xcd\xd0\x94\n\xd4\x13\x9cCy"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0, set_0)
    tuple_1 = (bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    complex_0 = -1416.74193 - 244.068956j
    int_0 = -2344
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    str_0 = "yk8Tw\txdV\nS^~VJP4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    complex_0 = 1370.13 + 1315.375192j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    str_0 = "E\tmRRrCMYvc?"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    int_0 = 39
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    int_0 = -720
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    str_0 = "#0S\r(=/Q^\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    bytes_0 = b"K\xdc\xe8`)k,\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    str_0 = "oHO3"
    str_1 = "?--5IMh,~k"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    int_0 = 1612
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    bytes_0 = b"X\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    int_0 = -3143
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bytes_0 = b"\xad\\\xa3/\xa1\x13\x05<R\xfb\x82"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    bytes_0 = b"6\xc6\xd2\xb4(\xfc\x95\x92?\xb0Z\xa9{\xbej\xbaQ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    bytes_0 = b"\xb3\x05\xe8\xd8`\xe1b\xae\x18\x1b\xb4\x83\x9eq\xcd\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    str_0 = "$S}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    str_0 = "2kc:"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    float_0 = -2511.9
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = -2018
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    bytes_0 = b"\x00\xcf\xcb\x8e\xa5\xc9\xaf\x98\xa8\xe7\x0b\x92\xafF"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2293():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2294():
    bool_0 = True
    tuple_0 = ()
    bool_1 = False
    tuple_1 = (tuple_0, bool_1)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, tuple_1: tuple_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    bytes_0 = b"\x06VV~!\xdc\xc7\xce"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2297():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2298():
    bytes_0 = b"\x1fh\xf6\xee\xfc\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    bytes_0 = b"3\xfa\xb6Q\xede\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    bool_0 = True
    bytes_0 = b"\xb4c\xda*=\xd7\xe0i>u~@\xe4\x14"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    int_0 = -2782
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    int_0 = 54
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bytes_0 = b"\xf2>\xc4~"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    int_0 = -271
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    str_0 = ",HwO{(C*&z`RvO-Gt:3x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    int_0 = 49
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bytes_0 = b"\xd5Av\x82\n\xa2@\x94\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2309():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2310():
    str_0 = "+dSOG-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    str_0 = "yEO<#^|sT;;7D\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    str_0 = "Z"
    set_0 = {str_0, str_0, str_0}
    int_0 = 3063
    tuple_0 = (set_0, int_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    float_0 = 273.6
    bool_0 = False
    list_0 = [float_0, bool_0, float_0, bool_0]
    tuple_0 = (float_0, list_0, bool_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    int_0 = 2685
    module_0.match(int_0, int_0)


def test_case_2315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2316():
    int_0 = -4612
    complex_0 = -235.374434 - 20.19191j
    tuple_0 = (int_0, complex_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    str_0 = "\x0c!FV7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    tuple_0 = ()
    set_0 = set()
    bool_0 = False
    tuple_1 = (tuple_0, set_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    bytes_0 = b"ei\x06\x9c\x03\xc4G{`\x84\xd1u\xa5q\xc5\r\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    str_0 = "(d2|nes$.YvjfY!5Rb?D"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    int_0 = 3452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    str_0 = "~Gm^^bn."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    int_0 = 2502
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    int_0 = -1914
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    complex_0 = -2615.39 + 1901.1616j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2329():
    float_0 = -356.53
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    str_0 = "U$0Tx~Vr'wwVe'5+)"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bytes_0 = b"\x11\x9eO\xc96\x0e\x9f\xbaI\x84"
    set_0 = {bytes_0, bytes_0}
    str_0 = "+r!mSC)Zw$5"
    tuple_0 = (set_0, str_0)
    bool_0 = True
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = []
    tuple_1 = (tuple_0, bool_0, object_0, list_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    str_0 = "r4~wP/F0h(6AR,Rn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    complex_0 = 552.8 + 583.287354j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    bytes_0 = b"\xa2L?\xdd\xc1\xa0\xe7p\x13o\x1c\xed"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    str_0 = "Vid3y"
    list_0 = [str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    int_0 = -53
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    bool_0 = True
    str_0 = "|`'K/1"
    tuple_0 = (str_0,)
    int_0 = 520
    tuple_1 = (bool_0, tuple_0, bool_0, int_0)
    list_0 = [tuple_1]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    bytes_0 = b"\x84\xbalZ\xea\x1e\xeb\x81\x1b4q"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2344():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2345():
    int_0 = -1088
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, dict_0]
    int_1 = -1416
    tuple_0 = ()
    tuple_1 = (list_0, int_1, list_0, tuple_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    str_0 = '_x"57'
    module_0.match(str_0, str_0)


def test_case_2347():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2348():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    none_type_0 = None
    bytes_0 = b"\x87\x01\xc2!\xa9\xe7i\x9a{ "
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    int_0 = -7091
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    bytes_0 = b"\xab>"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2352():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2353():
    str_0 = "mpkZ^9nL8uhw[50m"
    str_1 = ",W*6%"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    str_0 = "2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    str_0 = "Y\t)>Ib]/}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    float_0 = -5679.4
    float_1 = -924.0
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    float_0 = -2769.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    bytes_0 = b"\xee\xef\xf9\xd2\x89\xcf\x87V:/q"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2362():
    str_0 = ""
    tuple_0 = (str_0,)
    list_0 = [tuple_0, str_0, str_0]
    list_1 = [list_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    int_0 = -138
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    bytes_0 = b'),\x07z\x02I\x01\xa0\xact\x02\xc6"\x7fX'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bytes_0 = b"\x05\xec\xf7]\x17\xd7gQs1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    list_0 = []
    int_0 = -183
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    str_0 = "q4@\t`g"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    str_0 = "r>-oS-0MESAjV\x0b-4(\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    str_0 = "Q=9I%I.-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


def test_case_2373():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2374():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2375():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2376():
    int_0 = -2972
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    str_0 = "igD]uW?XqA}\\q683F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    complex_0 = -2145.5 + 3599.827j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    float_0 = 123.15796
    module_0.match(float_0, float_0)


def test_case_2382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2383():
    float_0 = 351.8775
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    bool_0 = False
    bytes_0 = b"\xf1=\xf0^s\x9c\xb2\x87\xbb\xcdW\xd1.\x88^\xed\x88\x03"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    str_0 = "m89"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    float_0 = -2075.54431
    module_0.get_new_command(float_0, float_0)


def test_case_2387():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2388():
    float_0 = -2194.017814
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    int_0 = 917
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    float_0 = -187.5183
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    int_0 = 1243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    str_0 = "7S&~/M8m\x0cZ-dwi%\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    bytes_0 = b"3\xb4\xbe&\xea\x99v\xd05\xe2\x04\x02"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    str_0 = "jE_L,OfymF~b|)X<\t42&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    str_0 = "mpigr)E?Ndt\x0cZ3O}t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    str_0 = "O@RnZ}Q"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    str_0 = "x!\\0s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    float_0 = -1650.622
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    float_0 = 408.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    int_0 = -2168
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    str_0 = "/Xg1BvYO9.{Cx9"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    str_0 = "\x0cb\tnr(5Am'MV>\n*5$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    complex_0 = -1184.49 - 604.643j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bytes_0 = b'Z"J`M\xa4\xdc-^T\x98'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2408():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2409():
    object_0 = module_1.object()
    bytes_0 = b"\xd3i:~\xe1\x07Z\x0c"
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    int_0 = 1265
    str_0 = "f,eH\\<Svm8"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    int_0 = 8
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    float_0 = -1763.0
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    bytes_0 = b"\x1f^\x8b\xb5\xb3\xf6\xd27y+Q\xc4I\x96\xe0\xab\xd2\xe4\xc5\x90"
    int_0 = -22
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    bytes_0 = b"\xfe\xe0\x03\xc3\xe7w\xdf\xe2\x9e\xc8<\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    int_0 = 855
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    bytes_0 = b"\x12\xc8\xa2\xed\xd7\x1dy\xb3\xaaD"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    int_0 = 630
    float_0 = -2379.275
    tuple_0 = (int_0, float_0, int_0)
    str_0 = "L|cPDW3x<lm8xm~^#s0."
    list_0 = [tuple_0]
    float_1 = -3605.129366
    tuple_1 = (tuple_0, str_0, list_0, float_1)
    module_0.match(tuple_1, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    int_0 = 147
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    int_0 = -4446
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    dict_0 = {}
    list_0 = [dict_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    str_0 = '"PM=^mP'
    str_1 = "9% 53/"
    str_2 = "q\x0c$yD1@'uoFR?\\o"
    str_3 = "Lr"
    dict_0 = {str_1: str_0, str_2: str_2, str_3: str_2}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    int_0 = -1444
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    int_0 = 1447
    list_0 = [int_0, int_0, int_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    bytes_0 = b"i\xbf\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    str_0 = "9w,C4|'>4{@B.^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    str_0 = "QR>=xKMQAT\\xaob8FDz"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"\xbb\xfe\xba"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    bytes_0 = b"\x97Kt\xf8\x86W\x8b\xecdKR\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    int_0 = -845
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    str_0 = ">Q+|lqgQr-r3cC9g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    int_0 = 1724
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    int_0 = 1452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    int_0 = 2544
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    float_0 = 534.1977
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bytes_0 = b"\x81\x83\x03\xaax\x169\x0f\x9c(\xd4\x18w"
    bool_0 = True
    dict_0 = {bytes_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    str_0 = "GJgsiL.''\"s Z+\teAYfq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    int_0 = -1661
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    str_0 = "TD'66=mF\"H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bytes_0 = b"\x9b\xda\x94<\x98G\x8b\xcc?\x98x\xf6\xfb&0\xa0=\x12"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2443():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2444():
    str_0 = '@#Ta(B\t%f\tWp>!"'
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    dict_0 = {}
    str_0 = "KcUa`_,HPKKNp"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    float_0 = -4589.33
    bytes_0 = b"\xe6\xca8\xf0"
    set_0 = {float_0, float_0, float_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    int_0 = 1939
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, list_0)


def test_case_2450():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2451():
    bytes_0 = b"\x12N\xdeB\x1b\x93)\x97\x99\x18v\xcfZ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    str_0 = "wQR<:wyM#<u07\tmuBg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    str_0 = "/IJ]^X\nJ!MhG"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    float_0 = -669.46
    module_0.match(float_0, float_0)


def test_case_2456():
    pass


def test_case_2457():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2458():
    bytes_0 = b"\n8\xd9Na\xd4-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    str_0 = ".B]&lztD*%Zr/?Pa"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    int_0 = -2381
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    float_0 = 1415.038
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    bytes_0 = b"\xfe\xfbf\xe95\xca\xd0c;?\xf9\x03MDb\x96\x11\x14M"
    str_0 = "%_;<Fb <D&"
    set_0 = {bytes_0, str_0}
    module_0.match(set_0, set_0)


def test_case_2463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2464():
    int_0 = -4225
    tuple_0 = (int_0,)
    str_0 = ";Hv="
    tuple_1 = (int_0, tuple_0, str_0)
    list_0 = [tuple_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    complex_0 = -1184.75738 - 1449.406567j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    bytes_0 = b"\xc2\x1f\x88\xfbU\xd9)\x80\x13\x03HE\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    bytes_0 = b"\xab\x19OM\xa7*\x8a\xa9\xf3o\xcf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2468():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2469():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = []
    tuple_0 = (bool_0, bool_0, dict_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    str_0 = "L+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    bytes_0 = b"\xc5\xfeZ5\x9b\xa8\x03\xda\xd0j\xe6Q\x82\xdf\x02\xb2\x90\xdd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "|U+)V~5dwG'aD9)@LWOf"
    tuple_0 = (bytes_0, dict_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    str_0 = 'n%J$`nH."\n!u9'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    str_0 = "']U=\nl"
    module_0.match(str_0, str_0)


def test_case_2475():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2476():
    int_0 = 1694
    str_0 = "D\t/\tsK;"
    list_0 = [int_0, str_0, int_0]
    tuple_0 = (int_0, str_0, str_0, list_0)
    int_1 = -1472
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    bytes_0 = b"lH\x05)\xb9\xa2\xbf2\xacf"
    module_0.match(bytes_0, bytes_0)


def test_case_2478():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2479():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    int_0 = -865
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    int_0 = -1187
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    str_0 = "i\n3n\r)o%"
    str_1 = "\\*kU`9h?c2"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    str_0 = "N]4[hsdU'h]J-="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    float_0 = 1580.0492
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    str_0 = "h3}Huo\x0cvii(/n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    int_0 = 2588
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    str_0 = "H{%OF9)!SDU#dn@Y>D "
    list_0 = [str_0]
    list_1 = [list_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    bytes_0 = b"\xb7p%\xba+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    bytes_0 = b"\x7f\x02\xe6\xa6\xae\xfe\xa5\xf2[&\xab\x88\xdb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "MgUK2)O$'g.yuhdT"
    str_1 = "UMLm|c;z+ZHb>SjY"
    tuple_0 = (dict_0, str_0, dict_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    str_0 = ","
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    str_0 = "Qti.I-,F!$'#;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    bytes_0 = b"\xe8\x89\t\x9dK"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2498():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2499():
    float_0 = -1940.7471
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    set_0 = set()
    bool_0 = True
    list_0 = [set_0, bool_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    float_0 = -829.17
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    str_0 = "#\\k1Yqt3q(dp6wc"
    int_0 = -1575
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (str_0, int_0, int_0, set_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    int_0 = 1727
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    bytes_0 = b"\xf0\x8d4\xd8\x02\xeb\xd9\x11\xb8\x0f|G"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    str_0 = "Sn-+\nr^F:PMs%O"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    bytes_0 = b"\xe2\xadz\xfb\xbb\\n\x99\xad\xc0S\\\rN\xf3\x90\x92"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    bool_0 = False
    bytes_0 = b"\x8ex\x19"
    str_0 = "R >nNM@D`*P*16oeO"
    tuple_0 = (bytes_0, str_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    str_0 = "t)m'+.|A!TbRfm,jld@>"
    float_0 = 1819.784
    tuple_0 = (str_0, float_0)
    dict_0 = {tuple_0: float_0, float_0: float_0}
    tuple_1 = (tuple_0, str_0, dict_0, float_0)
    module_0.get_new_command(tuple_1, tuple_0)


def test_case_2510():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2511():
    int_0 = -557
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    str_0 = "K-u(I#yh7!da-rCJyJ\\8"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    int_0 = 2782
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    str_0 = "h'xrQ?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    str_0 = "L\x0b#Sys5G)}c*>ihuM\x0bs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    bytes_0 = b"\xbf\xd4\xbe<\xa3\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    int_0 = 3246
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    float_0 = -2898.97909
    object_0 = module_1.object()
    dict_0 = {
        float_0: float_0,
        float_0: object_0,
        object_0: float_0,
        object_0: object_0,
    }
    list_0 = [float_0, float_0, dict_0, dict_0]
    str_0 = "Cq;A\x0biy98\n\r`g"
    tuple_0 = ()
    tuple_1 = (list_0, str_0, tuple_0)
    dict_1 = {float_0: float_0, float_0: float_0, float_0: tuple_1}
    none_type_0 = None
    module_0.get_new_command(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    int_0 = -1500
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    int_0 = 1279
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    bool_0 = False
    bool_1 = True
    str_0 = "\tSu;t&z~b!WnQ .\t"
    dict_0 = {bool_1: str_0}
    tuple_0 = (bool_0, bool_1, dict_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    bytes_0 = b"C*\xfc\xdc"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    str_0 = "'9xY\\$]6=?*nd9%?"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    str_0 = "GW'cplQ:cw;FZMx1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    str_0 = "3UQm]gjdIivR^"
    none_type_0 = None
    str_1 = "+Hb}Ce0@B4CQv"
    str_2 = "q\n-[!;%XTI1l`"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    bytes_0 = b"\xa5\xa3\xb0\xc5\xd0\x8b\x9c\x11<\xd1\x1f\xd3\x85-ma\xcd\xe1\xd2"
    bool_0 = True
    str_0 = " WdCho-,=m;"
    str_1 = "a8"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_1: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    int_0 = -656
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    int_0 = 1299
    list_1 = [list_0, int_0, set_0]
    tuple_0 = (list_1,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    str_0 = 'WP0"<>oW[&f'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    str_0 = "+^"
    tuple_0 = (str_0,)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    set_0 = set()
    dict_0 = {}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    int_0 = -31
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    bytes_0 = b"#3\xac\xacP"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    float_0 = -2206.26
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    str_0 = "$m.9pG81jE&M\"/7l'T"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    int_0 = 2546
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bytes_0 = b"\xfb\x17\xd0\xeb\xf9+;1l\x0b"
    float_0 = 443.55
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    none_type_0 = None
    int_0 = 2607
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    str_0 = "ar<aD[Sy;\x0cyU&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    bytes_0 = b"L\x80OIT\x02 "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    bytes_0 = b"E18\xd9\xbc\x92\xc3j\x9a'\r\xcc\x99\xff\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    int_0 = 1225
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    bytes_0 = b":\x9c\x05"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "Z\x0bm).7)RA"
    tuple_0 = (list_0, list_0, str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    str_0 = "IJG^j\r)AF,JZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    bytes_0 = b"5\x11\xd4S\x8f"
    module_0.match(bytes_0, bytes_0)


def test_case_2550():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2551():
    int_0 = 1963
    list_0 = [int_0, int_0, int_0]
    str_0 = "\x0ctY_9H"
    str_1 = "3\x0c+61\n>cs\x0cL"
    dict_0 = {str_0: list_0, str_1: list_0, str_1: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    none_type_0 = None
    bytes_0 = b"en\xe2\xc2~~G:\x9f\xc3\x86\x11\x18\t\xe3\x1a\x15"
    str_0 = ""
    list_0 = [str_0, str_0, bytes_0, str_0]
    list_1 = [none_type_0, bytes_0, list_0]
    bool_0 = False
    tuple_0 = (bytes_0, list_1, bool_0, list_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    int_0 = 2256
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    object_0 = module_1.object()
    str_0 = "iWszu'"
    list_0 = [object_0, str_0, str_0]
    list_1 = [list_0, list_0, str_0, object_0]
    str_1 = "w6Z"
    dict_0 = {str_0: object_0, str_0: object_0, str_0: list_1, str_1: object_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    float_0 = -783.56
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    int_0 = -2355
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    bool_0 = True
    bytes_0 = b"\xd0\xcb"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    float_0 = -864.76
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2560():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2561():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    set_0 = {bool_0, bool_0}
    list_0 = [bool_0, bool_0, dict_0, bool_0]
    tuple_0 = (dict_0, set_0, list_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    none_type_0 = None
    int_0 = 810
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    bytes_0 = b"\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    bool_0 = True
    int_0 = -818
    bytes_0 = b"\xcd\x08G\t\xf4\xd2\x10\xdb"
    tuple_0 = (bool_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    str_0 = "Dq&wId*<a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    str_0 = "?k>*"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    str_0 = "cIGQo\tq##zF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    int_0 = -1552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    bytes_0 = b">\xc2\x00\xd34\xee\xc0\x97St\xca\x0e\xd8\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    str_0 = '(/"gq'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    int_0 = 1724
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    str_0 = "syCCYA`i<hfMe'\\x8=\n"
    str_1 = "X_p7gyve4"
    str_2 = "o>:t\t 2uuT"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    str_0 = "8+{P;X<e_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    bytes_0 = b"H\xf5\xeb0\xfc\xc2\xd0V\xa6P\x81\x8e\x10Y7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    object_0 = module_1.object()
    bool_0 = True
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    int_0 = 1599
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    int_0 = 1970
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    str_0 = "Z1Eq:r[S2\x0c<Xqd`&C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    int_0 = -1756
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    bytes_0 = b"Y"
    list_0 = [bytes_0, bytes_0, bytes_0]
    float_0 = -62.81841
    str_0 = "7\r"
    tuple_0 = (bytes_0, list_0, float_0, str_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    int_0 = -66
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    float_0 = 1558.854281
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    int_0 = 1064
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    str_0 = "xG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    str_0 = "b!Xeio4/eUdgPWR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    int_0 = -2248
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bytes_0 = b"\x85g"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    bytes_0 = b"A\xc9\xbbV\xab\xdf\x02"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bytes_0 = b"s\xf6\x8a\xa7G\xa6\x98\x11\xd5\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bytes_0 = b"R:&\xb3\x87\xe8\xdf\x0f\xabxA"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    int_0 = 1507
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    bytes_0 = b'\x19\xb5\x04"\x00\xb0A\xab\xb7S\xaa\xe2<\xcfZ\xf0K'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    bytes_0 = b"%\xf7\x8c\xac6yZ\xa5\x86\xcf\x06F?\x07I\x9e\x87\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    str_0 = "su"
    list_0 = [str_0]
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    bytes_0 = b"\x19"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_2602():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2603():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    int_0 = 2107
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    complex_0 = 1468.1177 - 135.51721j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bytes_0 = b"\xd4\xcb\x08\x89\x81-\x01S\x0f\x07r\xed\xc45\xc0\x9e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = []
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    str_0 = '"M6(X6}es\r'
    set_0 = {str_0}
    tuple_0 = (str_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    int_0 = -567
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    complex_0 = 2285.987 + 794j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    complex_0 = 2060.3165 - 1025j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    bytes_0 = b"b=\x1bn{kqX\x8c\xdb\xf8\xb2\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    int_0 = -455
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    int_0 = -464
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    str_0 = "t[J;0'\t0\"C`#1T"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    int_0 = -1830
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    bool_0 = False
    str_0 = "oCe5q~\t[|5"
    str_1 = "DG"
    dict_0 = {str_1: str_0}
    str_2 = "4E'Lyxp>G4Z#"
    dict_1 = {str_0: str_0, str_1: dict_0, str_2: str_2, str_0: bool_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    none_type_0 = None
    bytes_0 = b"\x11(\xb0\x08F^\xa04\xf2R"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bytes_0 = b"ul\x1c\xe7\xae,\x9b\x14sr\xd8$\x8d\xefR&"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    int_0 = 839
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    bytes_0 = b"\xbf\xa43\n\x07\xda\xfc\xb0\xf9\xf3\x02\xb0[\x8b\x1e\xc8\xf2\xaa\x179"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    int_0 = -2938
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    float_0 = 131.92808
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2624():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2625():
    str_0 = "p2\tJqd_*Fd%Uv([9q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    int_0 = -1722
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    float_0 = 1740.43
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    float_0 = 288.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    none_type_0 = None
    str_0 = "p\x0bbYZ_"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    int_0 = 752
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    bytes_0 = b"\x11\xdf\xa8\t"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    str_0 = 'q)4)D#"?0\nat'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    list_0 = []
    none_type_0 = None
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    float_0 = 1358.7
    str_0 = "db+v _ug|8!Y8Xc;p)x"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    int_0 = 1958
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


def test_case_2639():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2640():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    int_0 = -381
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    int_0 = -1034
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    str_0 = "4:>P|%p"
    int_0 = -1663
    dict_0 = {str_0: str_0, int_0: str_0, int_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    str_0 = "NTfs9'/v/-pl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    str_0 = "P\nMD\n0^/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    str_0 = "sP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    str_0 = "`\n_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    object_0 = module_1.object()
    str_0 = "#itD1z:W\ti&o7W."
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    float_0 = 131.216469
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    float_0 = 965.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    bytes_0 = b"\x8f\rv_^\xc5\x1f\x8d"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    complex_0 = 2737.706 + 312.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    tuple_0 = ()
    bytes_0 = b"`\xef\xe9D\xf4hvc\x11@V"
    tuple_1 = (tuple_0, bytes_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    str_0 = "x5}WB7#H; Yc+TL*&34"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2657():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2658():
    bool_0 = False
    float_0 = 2146.504595
    dict_0 = {bool_0: bool_0, float_0: float_0, bool_0: float_0, float_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    str_0 = "M+;\n/p"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    str_0 = "r;Em;P%$rVzQ="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    bytes_0 = b"\x1a\xd0\xafz!"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    str_0 = " *XG;3h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    str_0 = "+b^+\x0cl}8Y&lx"
    bool_0 = False
    str_1 = "E{c:+\n&P_>n\x0c*^O"
    str_2 = "\\m"
    tuple_0 = (str_0, bool_0, str_1, str_2)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    int_0 = 36
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (int_0, int_0, set_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    complex_0 = -2729.663 - 2093.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    bool_0 = False
    int_0 = -3274
    tuple_0 = (bool_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    int_0 = 2434
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    float_0 = -2832.899
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    float_0 = 670.1
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    complex_0 = 28 - 2269.6683j
    str_0 = "+TA\rValVU6A0G3C"
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    float_0 = 1661.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    int_0 = -32
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bytes_0 = b"\x03\xfc\xc8`Ln$\x84\x0b\xa8G\x9d[~"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    bytes_0 = b"\x0bs\xe3s\x1c\xc6&\xfe\x84\xeft,\xc6-~\xbc"
    module_0.match(bytes_0, bytes_0)


def test_case_2677():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2678():
    str_0 = "2H:Xd_&G"
    module_0.match(str_0, str_0)


def test_case_2679():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2680():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    bytes_0 = b"\\o"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    bytes_0 = b"\xf6iw\xd8\xe2"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bool_0 = True
    set_0 = {bool_0}
    int_0 = -888
    dict_0 = {bool_0: set_0, bool_0: int_0}
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    str_0 = "\\9ahA}MlpKdX&( NR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    int_0 = 2757
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    object_0 = module_1.object()
    tuple_0 = (bool_0, dict_0, bool_1, object_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    str_0 = "D#(J]s;p54"
    set_0 = {str_0, str_0}
    tuple_0 = (set_0, set_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    str_0 = "\rMYu"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    int_0 = -1047
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    str_0 = "~aoPEC9n=jxAKAee3a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    str_0 = "F@<$5p@ [3ZMOWyv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    int_0 = 233
    bool_0 = True
    tuple_0 = (int_0, int_0, int_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    float_0 = 4379.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    str_0 = "!K-&LDI|C:B'>+,KDS."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    bytes_0 = b"\xdf\xc4&!7\x1ep\xf8\x9c\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    bool_0 = False
    bytes_0 = b"\x8bN\xe8\x0c|\x15z\x9eG"
    int_0 = -900
    list_0 = [bool_0, bytes_0, int_0, bool_0]
    bytes_1 = b"\x87\xdeT=\xf7\xcfD*}k[.q\x11\r5"
    tuple_0 = (bytes_0, list_0, bytes_1)
    str_0 = "x\x0c?\x0chcJ|0{5"
    tuple_1 = (bool_0, bool_0, tuple_0, str_0)
    module_0.match(tuple_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    bool_0 = True
    str_0 = "Q&T1b.Q9n,?UR`"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    int_0 = 476
    module_0.match(int_0, int_0)


def test_case_2702():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2703():
    bytes_0 = b"\x97\x994\xb6\x04\x88\xb9\xf9\x9c\xc4\xa5OU\xd6g"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2704():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2705():
    int_0 = -743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    int_0 = -2819
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    int_0 = 3491
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    float_0 = -265.018
    module_0.get_new_command(float_0, float_0)


def test_case_2709():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2710():
    complex_0 = -2685.52808 - 1924j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    str_0 = "@:"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    int_0 = -1953
    module_0.match(int_0, int_0)


def test_case_2713():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2714():
    int_0 = 1753
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    complex_0 = -2358.138138 + 1028.579034j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bytes_0 = b"h\x9eg\xa6\xb4\xe7<\xfb\x8e->b\x9e\x07\x88U\xb2\xb1\xc2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    float_0 = 3430.433479
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    int_0 = -5363
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    complex_0 = 4273.40273 - 444.4371j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bytes_0 = b"l\xd5x\xc9_\xcd\xd1P\x01\xae=\xbc\xc6\x0b1{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    complex_0 = 431.65995 - 3377.368j
    bool_0 = True
    dict_0 = {complex_0: complex_0, bool_0: bool_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    bytes_0 = b"\xed\x97hk\x16'yQS\x1a>\x9c\xaa\x13\x84\x9e"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    str_0 = "6\x0cC/V<QdmN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    str_0 = "qKlN>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    complex_0 = 897.69 - 993.2829j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    int_0 = -2969
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    int_0 = 143
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    int_0 = 1660
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    int_0 = -622
    bool_0 = True
    tuple_0 = (int_0, int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    str_0 = "('%uJ&n"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    bytes_0 = b"\x9f\xfa\nm\xa5I"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    str_0 = "~ytDWXSYXdEu[G5V0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    int_0 = -1205
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    bytes_0 = b"-\xd1\xbb\xe6\xf4"
    bytes_1 = b"\x93\xa5sZl\x9e\x10mo\x98M\xa7\xcd\xe7\xec\xd81\xe1"
    float_0 = 4348.454
    tuple_0 = (bytes_0, bytes_1, float_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    complex_0 = -548.559 - 2856.76j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    object_0 = module_1.object()
    bytes_0 = b"\xe2\xe9\xa1~\xaa\x0c\xfb\xa5[\xd3\xa9\xf5\xe6Gd\x82\xf9"
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    complex_0 = 1562.16 - 200.695148j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    int_0 = -83
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    int_0 = -459
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    bytes_0 = b"\xc6\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    bytes_0 = b"\x8b~[\x92\nk.#l\x19"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    str_0 = "~8bcGOj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    int_0 = 404
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    bytes_0 = b"\xf2maz\xbd\xe8f\x81\x0b\x0f\xc0X\xe0 \xe9{\xa7\x80"
    str_0 = "`\x0cnuBA.cBv\nDXb"
    dict_0 = {}
    tuple_0 = (bytes_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    complex_0 = 1955.2 - 861.8476j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    str_0 = ")$I(@OE%=;\ne.MNXb=J1"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    str_0 = "k^A^J!;2et?bxM>[=L"
    module_0.get_new_command(str_0, str_0)


def test_case_2752():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2753():
    str_0 = "aUS.o,!$*P"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    str_0 = "Yx_{AZxE=]VM>TY0 C"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    int_0 = 3102
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    int_0 = 2025
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    float_0 = -14.1076
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    float_0 = 2000.628
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bytes_0 = b"\xf2\xb4\xe1\x0e\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_2762():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2763():
    int_0 = 450
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bytes_0 = b"\x05V\xd5\x1b\x81<\xe9\x19\x1eD\xac|\\,G\xe5\xab\x8a<\xb3"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    int_0 = -559
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    set_0 = set()
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    str_0 = 'fjP@P>3\nEpq3\t\r"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    int_0 = 2202
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    bytes_0 = b"\x96\xa52\xfa \xed f>\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    float_0 = -977.395
    set_0 = set()
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    bool_0 = False
    bool_1 = False
    str_0 = "z"
    tuple_0 = (bool_0, bool_1, str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    str_0 = "l</|$'?gT[)}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    str_0 = "({sAmoL0'2\tg%%"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    int_0 = -760
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    bytes_0 = b"\xcd\xe9>\xac8\xc0\x1d\xb3"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    int_0 = -998
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    bytes_0 = b"\x1e\\k\xc0\x7f\xd6_"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    str_0 = "OKK0sn3M~mI82\r\n%lB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    bool_0 = False
    str_0 = "Q|J/n\n>1+$\x0b"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    int_0 = -1771
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bytes_0 = b"4\x10\x00PX\xc6\x01\xf4I\x952\xa6D\xc3\x96?\x11\xa0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    int_0 = -1864
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    float_0 = 826.0
    set_0 = {float_0}
    module_0.match(set_0, float_0)


def test_case_2793():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2794():
    int_0 = 2430
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    none_type_0 = None
    int_0 = 1858
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    float_0 = -902.275633
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    int_0 = -3102
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    set_0 = set()
    str_0 = "7.Tl2f@we@G?d"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    float_0 = -2337.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    bytes_0 = b"M@ph-\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    int_0 = -3969
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    int_0 = 746
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    int_0 = 801
    module_0.get_new_command(int_0, int_0)


def test_case_2805():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2806():
    bytes_0 = b"\x08\x8e\xa4\xdd\xda\xf9\xdd\xd8\x01\\\xbc\xb0\xd6J:`_r\xff"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    str_0 = "Z'E7^p\x0b_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    bytes_0 = b"\x17DV\xb9U\xc9\x04\x04x\x06\xcd\x08\x187\xd9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    float_0 = -203.6329
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    str_0 = "(~ScKZ3NBzOw\turjma"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    str_0 = "3|im=mB QeRFv)4-e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    str_0 = "BR]pfr4t!mcHEeb8lJ"
    complex_0 = 651.6132 - 1051.044j
    tuple_0 = (str_0, complex_0)
    dict_0 = {}
    module_0.match(tuple_0, dict_0)


def test_case_2814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2815():
    str_0 = "pa\\1:\t{-w/W?"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    str_0 = "u0NO"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    str_0 = "N~`YY[i@rE{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    bytes_0 = b"^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    str_0 = "5bHv$cr*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, bool_0, set_0)
    bytes_0 = b"\xfc\x01q)"
    list_0 = [bool_0, tuple_0, bytes_0, tuple_0]
    tuple_1 = (tuple_0, bool_0, list_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    bytes_0 = b"];\xb7\xe2\xa5\x1a\xb9i\xd0\xb5o\xed,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    float_0 = 364.9824
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    int_0 = -1857
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    float_0 = -724.026
    set_0 = {float_0}
    tuple_0 = (set_0,)
    int_0 = 1033
    tuple_1 = (tuple_0, int_0)
    tuple_2 = (tuple_1, float_0, set_0, int_0)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    str_0 = "vJMi\\BiU?]Yo9qh<Rb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    float_0 = 2137.1919
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    float_0 = 2393.303
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    bool_0 = False
    dict_0 = {}
    list_0 = [bool_0, dict_0, dict_0, bool_0]
    dict_1 = {}
    module_1.object(*list_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    bytes_0 = b"\xc7\x04\xfd\xe2gd\xf2\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    none_type_0 = None
    str_0 = "7=|WKP9!1kuteq~l"
    int_0 = 2330
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(none_type_0, tuple_0)


def test_case_2832():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2833():
    int_0 = -221
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    int_0 = -2230
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    int_0 = 399
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    bytes_0 = b"\xc0\xd3\xb9\x95\xa082\x1dp\x050\xc7}\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bytes_0 = b"\x96\xdcY"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    bytes_0 = b"\x0c\x10\xc2[\xed\xa2@\x18*\x0eL\xe6\xd3)[\xda\xe0b\xdf"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    str_0 = "c\x0cQ?6\tg:++"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    int_0 = -878
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    int_0 = -3929
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    float_0 = 2000.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    int_0 = 1605
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    int_0 = -811
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    float_0 = 1890.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    str_0 = "\ti}p,8dDXej|ab"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    str_0 = "q)+9x\r\x0cD[)X8?,oV3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    list_0 = []
    str_0 = "XFMIV\n"
    str_1 = 'DU2_.ATz"V8}aLom'
    str_2 = "!DRU&\\)D]s"
    dict_0 = {str_0: list_0, str_1: list_0, str_1: str_1, str_2: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    str_0 = "<\x0c+?h=I"
    bytes_0 = b"\x00?\x88\x9c\x06n"
    dict_0 = {str_0: str_0, str_0: str_0, bytes_0: str_0}
    set_0 = {bytes_0}
    tuple_0 = (dict_0, set_0)
    list_0 = [set_0, tuple_0, bytes_0, set_0]
    complex_0 = -1389.55 - 1447.6587j
    tuple_1 = (tuple_0, list_0, str_0, complex_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    int_0 = 441
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    str_0 = " n7#lUSw:Ea"
    int_0 = -1333
    float_0 = -2744.43
    float_1 = 867.0
    tuple_0 = (str_0, int_0, float_0, float_1)
    list_0 = [tuple_0, str_0, float_0, tuple_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    str_0 = "%R\t[y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    bytes_0 = b"\xecx\xb0\x98\xfb\x04\xc6\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    int_0 = -2246
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    str_0 = ";"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    bytes_0 = b"\x8f\x8e8T\xadE.\xa5\xf1\x864\xd4\xd9\x06"
    list_0 = []
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = "jj#|#^|&|DPtC!'At>H"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    bool_0 = False
    float_0 = -1846.895228
    module_0.match(bool_0, float_0)


def test_case_2862():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2863():
    list_0 = []
    list_1 = [list_0, list_0]
    list_2 = [list_1]
    list_3 = [list_0, list_2]
    module_0.get_new_command(list_3, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    complex_0 = -346.9 - 297.399544j
    set_0 = {complex_0, complex_0}
    int_0 = -1002
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bytes_0 = b"O\x1c\x91Dy\xc5<=\x90\xcf>\xce\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    str_0 = '_."\nkH'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    float_0 = 3258.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    str_0 = "*z 'yf:Id7."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    int_0 = 1682
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    bool_0 = False
    int_0 = -710
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    bytes_0 = b"\xe0g\xcf\xae\x8f\xafL\xfa\x9e\xdfNSnh\x02\x18"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    complex_0 = -3960 + 2678.1638j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    float_0 = 2977.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    int_0 = 1305
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    tuple_0 = (bool_0, set_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    str_0 = "_lM=k;<k,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    list_0 = []
    str_0 = "5?Y-k3"
    dict_0 = {str_0: list_0}
    dict_1 = {str_0: str_0, str_0: str_0, str_0: dict_0, str_0: str_0}
    module_1.object(*list_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    bytes_0 = b"\xac\x00 NL\xd0:\xa6\x85\xba"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    complex_0 = 1745.85 + 4790.06553j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    bool_0 = False
    str_0 = "k\t}tFp+cgA"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    int_0 = 1352
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    str_0 = ")>O^2iJ\t;PxK_]oQ"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_2884():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2885():
    bytes_0 = b"}7\xffJ#\x81\x00\x7f\xca\xb5g[\x7fo\xa8\x12\xf1*\x0e\x8d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    int_0 = 3341
    object_0 = module_1.object()
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    str_0 = "k^*S"
    str_1 = "nnD ;vKG@-.u*/*li{\r"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = -903
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    str_0 = "N!jNt@{}"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    int_0 = -894
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    bool_0 = True
    int_0 = 1478
    dict_0 = {bool_0: bool_0, bool_0: int_0}
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\x97\xd0z\x1f\x1e&\xe1n;h\x1b"
    tuple_0 = (list_0, bytes_0)
    tuple_1 = (bool_0, dict_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_2894():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2895():
    int_0 = 2478
    str_0 = "0~\rAb9rH"
    module_0.get_new_command(int_0, str_0)


def test_case_2896():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2897():
    bytes_0 = b"Oi|"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2898():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2899():
    bytes_0 = b"|\x1f\xb4\xe1+\xc3\xba\x10\x87\xa1\xf0\x01\x8b\xce\x19\xf5\xac\x81='"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


def test_case_2902():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2903():
    bytes_0 = b"\x7fM\x03~\xb4\x13\xba\x17\xca\x15\xea\x9b\xd8\x19\xa64"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    bytes_0 = b"\xbd\x82\xf42V"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    str_0 = "yxfq{D/\tYC6ne"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    str_0 = "d6oh"
    module_0.match(str_0, str_0)


def test_case_2908():
    pass


def test_case_2909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2910():
    str_0 = "/3>G\\6<TAo:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    float_0 = 389.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bytes_0 = b'\xa8\xca"\xa8'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    float_0 = 661.2512
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    list_0 = []
    str_0 = "bDV9Q#N9sc"
    str_1 = "<E_o%'\x0c*d]"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    str_0 = 'YJ"#PX%A!Yh@)9'
    int_0 = -263
    set_0 = {str_0, int_0}
    dict_0 = {str_0: str_0, str_0: str_0, int_0: str_0, str_0: set_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    str_0 = "yzN 0rY`iu*\n*R\x0b5'<"
    bool_0 = False
    dict_0 = {bool_0: str_0, str_0: str_0}
    int_0 = 1421
    tuple_0 = (str_0, bool_0, dict_0, int_0)
    list_0 = [tuple_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    bytes_0 = b" V>\xe3Z\xf7\xc4\xe5\x18C\x9d\x91\xa6\xdf\xc2\xdd\x9a\xb5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, str_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    bytes_0 = b"\xed\x19p\xd0E\xde\xf8\xac\xad_\x00\xd6\xed\xd5\xbe_\xc5i\xb8"
    bytes_1 = b"\r\xdcZ\x90\t\xb75\x9f\x01#R\xd1\x82G\x92X"
    tuple_0 = (bytes_0, bytes_1)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    float_0 = -2244.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    bytes_0 = b"\x08\xea\xe8>\x0eI\x01\x19\xe2Nm\xb9s\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    bytes_0 = b"\x03\xa3Y\x9e\xdf\x87K\xacU\xbat\xca\x13\x8eo"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b"@\xe7"
    bool_0 = True
    dict_0 = {bytes_0: bool_0, bytes_0: bool_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    int_0 = -3280
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    str_0 = "m{xa)DE{\n|6Li1."
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    int_0 = 753
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "`NwTjXr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    float_0 = 215.78
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    none_type_0 = None
    float_0 = -1516.9
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    str_0 = "|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    bool_0 = True
    bytes_0 = b">\x9cn4\xcf"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    float_0 = -1506.55
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    str_0 = "9("
    float_0 = -860.7
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    bool_0 = True
    bytes_0 = b"\xa1\xb7\x9e\xb0\xa27}\xda\xe8\x04\xd9?Y^\xfa\n\xe7\x9d"
    set_0 = {bool_0, bool_0, bytes_0}
    module_0.match(set_0, bool_0)


def test_case_2939():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2940():
    int_0 = -3625
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    float_0 = 2002.6428
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    str_0 = "Fa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    float_0 = -2194.6564
    str_0 = "dC@lekb"
    list_0 = [float_0, str_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_2944():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2945():
    str_0 = "+YJKV`~Jd~Fv}ptZT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    float_0 = -2059.297
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    str_0 = '"\rDf{p~MY'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    tuple_0 = ()
    bytes_0 = b"\x15\xe5\x88\x02\xc1\xa8\xa0\x92i-\xb3k"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    int_0 = -2320
    tuple_0 = (int_0,)
    str_0 = "\r1y5&;Hx'e%svK3t~D3"
    bool_0 = False
    dict_0 = {tuple_0: tuple_0, str_0: str_0, tuple_0: tuple_0, int_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    list_0 = []
    bool_0 = True
    list_1 = [list_0, bool_0, bool_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    none_type_0 = None
    str_0 = "SD/?E'0JO\\Z>"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bytes_0 = b"\xaf:?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    int_0 = -3136
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    int_0 = 2373
    list_0 = [int_0, int_0]
    str_0 = "mQE9{JfS~7+!O\x0b"
    str_1 = "UsGlwHq=L|\x0b9|"
    dict_0 = {str_0: str_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    str_0 = "Z33=bIt9iZ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    int_0 = -3481
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    str_0 = "O"
    set_0 = set()
    tuple_0 = (str_0, str_0, set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    int_0 = 1115
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    float_0 = -294.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    int_0 = 3489
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    int_0 = -2682
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    float_0 = 2273.95351
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    str_0 = "O"
    none_type_0 = None
    str_1 = "{$;y|2l9@"
    str_2 = "9b0aS4y&"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    int_0 = -555
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    str_0 = "yE?I?4#`"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    int_0 = 3134
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    float_0 = -2828.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    complex_0 = -1338.581089 - 2339.23j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    int_0 = -1322
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    bytes_0 = b"\xa4\xf4:\x90\xbf\xba"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    bytes_0 = b"P\x8cj\xa0\xc5"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    int_0 = -1856
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    int_0 = -2156
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bool_1 = False
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    float_0 = -688.85091
    bool_0 = True
    tuple_0 = (float_0, bool_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    str_0 = "Ok"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    bytes_0 = b"`\xe9&z\xa4\x85\xe4\x83c\xfa\x10\xbd\\\x83F\xf0\xb9G"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    str_0 = "azh|jKwq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    complex_0 = -2939.401063 + 63j
    list_0 = [complex_0, complex_0, complex_0]
    str_0 = "J?C{A"
    tuple_0 = (list_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    int_0 = -619
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    int_0 = 2792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    float_0 = -4325.0
    module_0.match(float_0, float_0)


def test_case_2991():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2992():
    str_0 = ".N1|TP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    complex_0 = 3181.9946 + 3596.3j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2994():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2995():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_2996():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2997():
    tuple_0 = ()
    list_0 = [tuple_0]
    tuple_1 = (tuple_0, list_0)
    float_0 = 1155.63261
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bytes_0 = b"@\xc1^\xf1@\xfan\xd3\x92k\xae_\x08\xfcfSR\xe6\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_3001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3002():
    float_0 = 801.454304
    int_0 = 298
    dict_0 = {float_0: float_0, float_0: float_0, float_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_3003():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3004():
    int_0 = 2947
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    str_0 = "mh .<"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    str_0 = " ?|>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    complex_0 = -2603 + 507j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    complex_0 = -1859 - 215.005255j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    str_0 = "JDk34+'3U<\x0bs,m9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    bytes_0 = b"H\xc0m\xc2\xdb\xdc\xc3\xf5K\xd9\x91I\x84\xabK\x13\x8f\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bytes_0 = b"\xed\xe7,Tr\xf8\xe9z)a\x8a6\xacV"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    int_0 = 841
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    str_0 = '%4T3E]Ww"^%Lc>$bvv'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    bool_0 = False
    str_0 = "xgI}Fm;sv40d<J1"
    tuple_0 = (bool_0, str_0)
    tuple_1 = (tuple_0, bool_0)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: tuple_1}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    str_0 = "`/l0n`@taj@$r1mfpo@="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    int_0 = -1165
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    float_0 = -2266.3513
    float_1 = -287.99
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    int_0 = -6655
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (list_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    none_type_0 = None
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    complex_0 = 811.4 - 1717.19j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    str_0 = "=KsA+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    str_0 = "RfaiN!<kon3\x0cQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    float_0 = 408.927571
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    bool_0 = True
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    int_0 = -1174
    int_1 = -1380
    list_0 = [int_0, int_0, int_1, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    int_0 = 195
    bytes_0 = b"\xee\xea\xf4"
    tuple_0 = (int_0, bytes_0)
    set_0 = {int_0}
    bool_0 = False
    tuple_1 = (tuple_0, bytes_0, set_0, bool_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    float_0 = -2223.86818
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    int_0 = -2561
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    int_0 = 3516
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bytes_0 = b"k\xb2H\xd2+\xe2D\x8al\x0f\xbb\x8f\xc0"
    tuple_0 = ()
    dict_0 = {bytes_0: bytes_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    none_type_0 = None
    int_0 = 50
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    set_0 = set()
    object_0 = module_1.object(*set_0)
    module_0.match(object_0, set_0)


def test_case_3037():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3038():
    bytes_0 = b"M\xc0\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    complex_0 = -2628.125 - 1400.722047j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    complex_0 = -1366.901 + 2199.06044j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    bytes_0 = b"\xf0#\xef\x80hMh"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    int_0 = -2632
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    none_type_0 = None
    bytes_0 = b"!\xe7>"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_3048():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    bytes_0 = b"=hp\x98\x08\xc1\xcaV\xe8\xd9\xbd\\\x87\xd4\x88"
    list_0 = [bytes_0]
    str_0 = "Js}Ahm4 U}5-g~"
    tuple_0 = (bytes_0, str_0)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    float_0 = -2522.652
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    int_0 = -2565
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    str_0 = "hCHy?wpY{UW+4E*_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    int_0 = -699
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    bytes_0 = b"\xb4r\x90\x9a`\xe8m\x1a\xbd[h\x99\xfb\xa9\xc2\x86\xf84\xacS"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    bytes_0 = b'h-\xc5\xe3\x0bA\xa3\x93\xdd\xd5\x1fos\xef?\x89\xf1"d'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    int_0 = -708
    set_0 = {int_0, int_0, int_0, int_0}
    bytes_0 = b"\xcd\x9ei\xc6E\x06\xd9\x06R\x12m&"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    bytes_0 = b""
    str_0 = "bF\\VIO_(9-/UY!"
    list_0 = [bytes_0, str_0]
    int_0 = 3786
    tuple_0 = (bytes_0, bytes_0, list_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    object_0 = module_1.object()
    str_0 = 'N"*Y?*j'
    str_1 = "\rDSnw^~F'^$A`iwKps"
    tuple_0 = (object_0, str_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    int_0 = 1940
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    complex_0 = 1923.8197 - 1813.07j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    str_0 = "-FXZ~) C/gv}*AO\t]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    str_0 = "dMU2MJ2CeW|B:,FN\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_0: bool_0, bool_1: bool_2}
    list_0 = [dict_0, dict_0, bool_1]
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    str_0 = "@'E ]"
    str_1 = "24ntRMkJ(x%Hq|"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    str_0 = "6+nA+K9,e;"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    bool_0 = True
    bool_1 = False
    str_0 = ""
    list_0 = [bool_0, bool_0, bool_1, str_0]
    bytes_0 = b"\xfe\xc5\xf8\xf8"
    dict_0 = {bytes_0: list_0, bool_1: list_0}
    tuple_0 = (list_0, bytes_0, list_0, dict_0)
    list_1 = [tuple_0]
    list_2 = [list_1]
    bool_2 = True
    set_0 = set()
    tuple_1 = (list_2, bool_2, set_0, dict_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    str_0 = "oA-.jY_UqO3yqb"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    int_0 = -2632
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    int_0 = 1727
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bytes_0 = b"\xb72\xfdx"
    tuple_0 = (bytes_0,)
    int_0 = 2426
    dict_0 = {tuple_0: int_0}
    tuple_1 = (tuple_0, tuple_0, dict_0, dict_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    list_0 = []
    list_1 = [list_0]
    str_0 = "p]%x'A[WY1h8X"
    tuple_0 = (list_1, list_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    str_0 = "yl~\"'cO*\x0b4#p;@77yd;"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = 37
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    bool_0 = True
    int_0 = 1225
    tuple_0 = (bool_0, int_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: int_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    float_0 = -558.28
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    int_0 = -432
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    int_0 = 2736
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    int_0 = 936
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    complex_0 = -1357.7 - 1313.368848j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    str_0 = "\n\\{,e\new\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    int_0 = 193
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    int_0 = -564
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    bytes_0 = b"=s\xa9\xb8\x9b>@\xdaIm>n\xc0\x8e>\x8e7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    int_0 = -1529
    int_1 = -557
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    bytes_0 = b"e\xb0"
    list_0 = []
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    bytes_0 = b"\xdc k\xea\xd1AT\x8a\x0e?\xb2\x96\xdd\x9c9}7o"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    float_0 = -1780.86005
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    complex_0 = -480.69 - 4125.7629j
    str_0 = "WIHWUe+RwZMu"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    complex_0 = -913.24 + 397.12j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.object(*list_0, **list_0)


def test_case_3094():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3095():
    str_0 = "I%5tr+gpe{&{:c\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    bytes_0 = b"\xa0<\x04\xdc\x07S\xabo"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    str_0 = "ez]}<{\rw:}Lb+,*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    bytes_0 = b"\x8f%)\xe2eG(\xb3"
    bool_0 = False
    set_0 = {bytes_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    bytes_0 = b"\x18?\x00"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    float_0 = -598.62774
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    list_0 = [tuple_1]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    complex_0 = -2025.982506 + 1680.29j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    float_0 = -3444.17
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    complex_0 = 5521.116 + 2141j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3107():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3108():
    float_0 = 1710.115909
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    bytes_0 = b'\xb4\xe4\x10k\xa6aFm+gI\xca\x9c"\x9f\x81'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    int_0 = 1768
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    float_0 = 1684.885417
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    float_0 = 1101.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    int_0 = -23
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    int_0 = 2041
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    float_0 = -2579.02759
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    int_0 = 179
    tuple_0 = (int_0,)
    bool_0 = False
    list_0 = [int_0]
    complex_0 = 810.037986 + 479.54j
    tuple_1 = (bool_0, list_0, complex_0)
    list_1 = [tuple_0, bool_0, bool_0, tuple_1]
    str_0 = "5 /\tG"
    module_0.get_new_command(list_1, str_0)


def test_case_3118():
    pass


def test_case_3119():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3120():
    tuple_0 = ()
    bytes_0 = b"Y\xfc\xb8\x88\xc6\xa3\xc59Y\x9ai\xc6.y\x9b"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    bytes_0 = b"X*\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    str_0 = "MU/naV\\~p\x0bhA_b\rlL;"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    bytes_0 = b"\xbc\rr\x95\x11f8.7\x1e\xb2w\x89\xbd\xa2\xf6("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    int_0 = -260
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    int_0 = -833
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    str_0 = "+TUkGk\n<<&]p"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    complex_0 = 548.9599 + 1553.064843j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    float_0 = -456.62
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    bytes_0 = b"$VhLA\x85,\xdd\x91\x88"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    bytes_0 = b"\x915\x9c{\xd0{\x06\x1e;"
    module_0.match(bytes_0, bytes_0)


def test_case_3132():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3133():
    int_0 = -158
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    int_0 = -433
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    int_0 = -2253
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    bytes_0 = b"M0\x9c\x1c\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    float_0 = 986.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    complex_0 = -651 - 221.07j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    float_0 = -3937.7792
    list_0 = [float_0, float_0, float_0]
    dict_0 = {float_0: list_0, float_0: list_0}
    tuple_0 = (float_0, list_0, list_0, dict_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    str_0 = " Z\r}o|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    bytes_0 = b"\xff\xca\xb9Z\xb8"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    float_0 = -1612.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    int_0 = 494
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bytes_0 = b"x\xa4\x82;q\x1e\xef?"
    bool_1 = True
    tuple_0 = (set_0, bytes_0, bool_1, bool_1)
    tuple_1 = (bool_0, bool_0, set_0, tuple_0)
    tuple_2 = (set_0, tuple_1)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    bytes_0 = b"\xd3?\xfa\x00\x10\xc3\xd1\x9b\xee\xc8IB\x0b9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    int_0 = -513
    bytes_0 = b"g\xa4mY{"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    bytes_0 = b"\x1bx\xc6\x1b\xe5\xf2\x81^\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3151():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3152():
    int_0 = 4514
    int_1 = -3487
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    float_0 = -149.18836
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    float_0 = 3964.52
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    int_0 = -2656
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    bytes_0 = b"\xc6\x17\xb6\xf2\xc3\xff\x1d\x85\xf1\xe6 \xa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    float_0 = -15.41
    dict_0 = {float_0: float_0}
    float_1 = -2080.2
    tuple_0 = (float_0, dict_0, float_1, float_1)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    str_0 = "X6LXqML"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    bytes_0 = b"\x17\x85B\xcf\xb8g\xfc#\xf4k\x9e\x88\xd0\xe6\xb6\x0b\xa8\x83"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_3163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3164():
    int_0 = 724
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    complex_0 = -503.577 - 1664.03j
    bool_0 = True
    dict_0 = {complex_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    int_0 = 113
    module_0.get_new_command(int_0, int_0)


def test_case_3167():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3168():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    str_0 = "M6`I.(T*dh\nD@^Q?T`"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    bytes_0 = b"r\xee\xf7\xc02"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    int_0 = -39
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    complex_0 = -2645 - 917.5j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    int_0 = 1243
    int_1 = -168
    tuple_0 = (int_1,)
    tuple_1 = (set_0, int_0, tuple_0, int_1)
    bytes_0 = b"\xf6\xa1\xf9E\xda\xf2\xa4\xd4\xd6\x997\x86\xadQ\x01\xd3>#"
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


def test_case_3177():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3178():
    bool_0 = False
    int_0 = 18
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    int_0 = -621
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    int_0 = -2455
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    complex_0 = 2967 - 426.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    int_0 = 31
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    tuple_1 = (bool_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    bytes_0 = b"\xd0\xd4\xc6(D"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    int_0 = -2283
    list_0 = [int_0, int_0, int_0, int_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    float_0 = 1771.8
    tuple_0 = (float_0, float_0)
    bytes_0 = b"\xea\xf3\xc2L\xa1*\x97\xd3"
    str_0 = "s"
    list_0 = [tuple_0, bytes_0, str_0]
    set_0 = {str_0, str_0}
    dict_0 = {}
    tuple_1 = (list_0, set_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    int_0 = -955
    set_0 = {int_0}
    tuple_0 = (set_0, set_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    bytes_0 = b"\x10"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    bytes_0 = b"\x18l"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    none_type_0 = None
    float_0 = 1811.7
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    str_0 = "e"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    str_0 = "4$s?[6%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    int_0 = -1217
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    str_0 = "6/&$VQ<OM\ncE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    str_0 = "{y\x0b(QR)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    str_0 = ".)N\"FBp'6sU,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    str_0 = "c6^)<i{e$pQk"
    list_0 = [str_0, str_0]
    int_0 = 2480
    tuple_0 = (int_0, list_0)
    bytes_0 = b'\xdf\xfc\xa6"\x88\x0b\xc4\xd2\x14\x1e\x9d'
    tuple_1 = (list_0, tuple_0, bytes_0)
    float_0 = -1483.937211
    complex_0 = 2392.22846 - 3269.335843j
    tuple_2 = (float_0, complex_0)
    module_0.match(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    float_0 = 4332.59
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    bytes_0 = b'\xa39\x9d\x86\x16\xc5\xcb\xd0\x1bE"\x8d\x05\t\xad\xc7I'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    float_0 = -2783.23834
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    str_0 = "`iBo1\x0bwOmI^RVPt.0x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    int_0 = 631
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    int_0 = 2016
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    complex_0 = -715.9 - 4287.3246j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    str_0 = '/"[E`zP?(<rajh3n'
    bytes_0 = b"W\xf9\x0e\x84.\x8c\xe1\xcc\xda\x84\xa6\xaa"
    list_0 = [str_0, bytes_0, bytes_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    bool_0 = True
    int_0 = 200
    bool_1 = True
    tuple_0 = (bool_0, int_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    int_0 = -1545
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    float_0 = -104.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    float_0 = 22.34505
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    str_0 = 'bx\\^\rK6oLRsP1$#"i6'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    int_0 = 513
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    float_0 = -1548.9
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    int_0 = 1519
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    bytes_0 = b"\xef\x19\xdb\n\xefg\x19\xb7f,\x18\x9d{\xeeN)\xa5"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    float_0 = -1403.032
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    str_0 = ";PJaeY9X[5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    bytes_0 = b"\xaf=\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    int_0 = 1534
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    int_0 = 1324
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    float_0 = 444.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    int_0 = -5400
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    int_0 = -1637
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    bytes_0 = b"%]w"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    str_0 = "_)UjE?TsU\x0btI%{H07"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: list_0}
    list_1 = [bool_0, dict_0, list_0]
    module_0.get_new_command(bool_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    bool_0 = False
    list_0 = []
    dict_0 = {bool_0: list_0}
    bool_1 = False
    list_1 = [dict_0, dict_0, bool_1, list_0]
    str_0 = "3=ZCD"
    module_1.object(*list_1, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    float_0 = -2827.55
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    complex_0 = -2329.053294 + 672.400027j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    str_0 = "tvIV!7Pxr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    int_0 = 348
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    float_0 = -1663.4
    module_0.match(float_0, float_0)


def test_case_3239():
    pass


def test_case_3240():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3241():
    int_0 = -755
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    int_0 = 1893
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    str_0 = "*'hkzx+FB^jB?T3_`q"
    bytes_0 = b"d\x03\xedS"
    tuple_0 = (str_0, bytes_0)
    tuple_1 = (tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    int_0 = -4225
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    bytes_0 = b"\xec;\xa7\x95\xb0\x10A\xfa\xdc\xde\x05\x0e\x18~\xa3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    complex_0 = 1825.49 - 829j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    bytes_0 = b"\xf5gr\xfa}\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    str_0 = "~7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    str_0 = "^t>\x0cUKwVL$@3\r5JM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    float_0 = 2218.8024
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    int_0 = 4041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    str_0 = "/)!tJ^vTi.u\nix\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    str_0 = ""
    set_0 = {str_0, str_0}
    tuple_0 = ()
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    float_0 = -169.67764
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    none_type_0 = None
    int_0 = 2655
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    int_0 = -2729
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    str_0 = "v"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    int_0 = -122
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    str_0 = "Z\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    bytes_0 = b"/\x16\xe7\xdc`-6\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    complex_0 = 74.0289 - 3084.018j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    bytes_0 = b"'m\x99\xf3\x91\xcb\x12\xf4&\x16\x8e9\xe5\xb7$\x9c<\x91"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    complex_0 = 606.5169 + 824.8296j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3271():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3272():
    int_0 = 1491
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    int_0 = -1507
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    bytes_0 = b"\xd7 \xe7\xc1\xd3G\xf2=;[\xa4\xa1/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    bytes_0 = b"F!\xac(%\x92\xff\\\xeds\xd5\x975\xea\x0fX\xda\x8c\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    bytes_0 = b"\xf0\xc8\xe7ik[\x8a]>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    float_0 = -34.608174
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    str_0 = "!xwoG`s`+D.^sY"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bytes_0 = b"\xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    str_0 = "jl-"
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    str_1 = "7"
    tuple_0 = (str_0, list_0, str_1)
    int_0 = 2174
    list_1 = [tuple_0, int_0, str_0]
    list_2 = [list_1, str_0]
    none_type_0 = None
    module_0.get_new_command(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = 2276
    int_1 = -1361
    str_0 = "hDF*6\x0cG]"
    tuple_0 = (int_1, int_1, int_1, str_0)
    dict_0 = {int_0: tuple_0, int_1: int_0, tuple_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    str_0 = "[*pT5-aNy3AM\x0bH7YQ1By"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    str_0 = "!1))m,F\nhB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    complex_0 = -714.4 + 1373.39067j
    list_0 = [complex_0, complex_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    list_0 = []
    str_0 = "C>{$#nNgt "
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    int_0 = -1387
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    int_0 = 2093
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    int_0 = -1148
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    bytes_0 = b"\x96\x8e\xa9\x83-\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    bytes_0 = b"\xdc<\x04?R\x04\x92\x92\xe5\xd1</\x1f\x965"
    int_0 = -8
    set_0 = {bytes_0, int_0, bytes_0, int_0}
    tuple_0 = (bytes_0, set_0, set_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = "lZZ)U~\\IWV|A)],ZT1`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    int_0 = 4444
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    float_0 = 4002.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    str_0 = "M._Z-dpL27(\nuQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    float_0 = -2792.4237
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    int_0 = -2054
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    bytes_0 = b"2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    str_0 = "g6y*t$apZj\nx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        bool_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    int_0 = -2085
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    bytes_0 = b"\xda\xc6IK\xbb\xc0Z\x1c\xe8\x8fD\xadY?*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    bytes_0 = b"\x01\x97\xa1(\xdf\xb7\xecv\xa5\xa1\x8d\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    str_0 = "p[(g\x0c\\x(I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_3310():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3311():
    str_0 = "Q7 3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    float_0 = -1968.781
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    int_0 = 324
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    bytes_0 = b"\xaa\xf3\x86\x99R\xe7M?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    bytes_0 = b"\xe1\xa5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"tg\x11w\x90\xf7\xacu\xc0=\xb8\x9d\xba+\x05\x08\xb3\x86\x88"
    tuple_0 = ()
    tuple_1 = (bool_0, list_0, bytes_0, tuple_0)
    tuple_2 = ()
    list_1 = [tuple_1, tuple_0, tuple_2]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    int_0 = -5166
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    str_0 = 'fjm"?"hag+\\SY7x5'
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    int_0 = 2379
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    str_0 = '"}|Wm5Qf\ndS'
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    bytes_0 = b"\x1d\xcd\xb4k\xe8\x1b\t"
    set_0 = {bytes_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    int_0 = -4699
    str_0 = "1!?i:1\x0b5<"
    dict_0 = {str_0: int_0}
    module_1.object(*int_0, **dict_0)


def test_case_3326():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3327():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    bytes_0 = b"\xe3uc\xb1Ss\xd39_\xcb\xaf@\x90\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    int_0 = -617
    module_0.match(int_0, int_0)


def test_case_3331():
    pass


def test_case_3332():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3333():
    int_0 = 664
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    int_0 = -121
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    int_0 = 742
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    int_0 = 432
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    int_0 = -1387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    int_0 = 155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0]
    str_0 = "m~"
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    int_0 = 2760
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    int_0 = 1129
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    bytes_0 = b"\xbabc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    float_0 = 3490.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    str_0 = ">)Je`Fy7K\x0bb%'ZRl;GZ7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    int_0 = -739
    int_1 = -2329
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    str_0 = ",U9pv<7]"
    int_0 = 1650
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    str_0 = "Fxq\ruXT+}JFEBx8q"
    tuple_0 = ()
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    str_0 = "OW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    bytes_0 = b"j\x1a\xa5>\x9d\x03@\xbd/\xba\xd0\x88\x05<\xaa\x07\xb7L"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    str_0 = "iasLQ(wf?B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    int_0 = 4172
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    float_0 = 768.557
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    complex_0 = 1436.666992 - 847.093663j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    bytes_0 = b"\xc5\xd74"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    float_0 = -1000.69
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    bytes_0 = b';d\x92"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    str_0 = "gp\\AJGLp"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    float_0 = 1592.5
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    int_0 = 2057
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    float_0 = 1584.744698
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3365():
    pass


def test_case_3366():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3367():
    int_0 = 3064
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    float_0 = 1874.944
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    int_0 = 688
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    int_0 = 2829
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    float_0 = -1392.451
    set_0 = {float_0}
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    float_0 = -1263.0
    bytes_0 = b"\xb3E\xd1\xc4\x05K\x95\xd0\xa5\x81>4\x10"
    tuple_0 = (float_0, bytes_0, bytes_0)
    list_0 = [bytes_0, float_0, float_0, bytes_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    str_0 = "$;x0o\rxXNdaN|@q:p\x0c"
    str_1 = "\rV9fW\x0b9;b"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    int_0 = 2679
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    bytes_0 = b"\x14\xc6\xf4\x90\xdc4\xc3\xa6\xa2\xcd\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    float_0 = 2159.3171
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    bytes_0 = b"\x96\xd6\xb4\n\x1b8\xc0\xabX"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    int_0 = 1899
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    int_0 = 1256
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bytes_0 = b"oR`y\x91:[\xd4\xccK"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    bytes_0 = b"\x1a^\x96\x8e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    bytes_0 = b"\r*"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    bytes_0 = b"\xf0\x06\x01M\x8aN\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    bytes_0 = b"~\xe1\xc0\x9b\x83\xd0,\xads\x87n\x0ep{"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    complex_0 = 904.58064 + 2121.67j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    int_0 = -4237
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_3388():
    pass


def test_case_3389():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3390():
    int_0 = -4171
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    int_0 = 1209
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    str_0 = "e\n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    bytes_0 = b"9\xc4\xb8\xc6\xde\xeb=\x84\xa9\xc9=g_z'\x9a\xe4\xe0\xc8"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    str_0 = "R%]8?TC#\r#_i="
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    float_0 = -4378.662342
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3398():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3399():
    int_0 = 208
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    str_0 = "As^w\x0c)W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    int_0 = 2221
    bytes_0 = b"\xf0\xe3Bg\x10\x12G\xb0\xbc\xbb\x1e\x13q@\xb9\xfa\xb8\xcd\t\x07"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    str_0 = "X;r\x0ba>vx3FWi5{v{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    int_0 = 3325
    object_0 = module_1.object()
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, object_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    str_0 = "M@uf}`U.$TWb&"
    str_1 = "h\\-Lj"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = 241
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    float_0 = 2632.45216
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    int_0 = 1541
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    complex_0 = -2689.4 + 4257.227335j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    int_0 = -4296
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    str_0 = ")qB~Q+\rln."
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    none_type_0 = None
    bytes_0 = b"\xd90u\xe0\xaf]"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    int_0 = 1713
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    int_0 = 2614
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    complex_0 = 2490.191 - 1706.73094j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xe40v\xf9\xf9\xe8\x90\xc4\x8a\x7fw\xfc\nz\xda\xdf\x1f"
    list_0 = [bool_0, bytes_0, dict_0, bytes_0]
    tuple_0 = (bool_0, dict_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    str_0 = "e7Z19\x0b&6#(;O6jHme\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = "A4\n 70s7Z"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    bytes_0 = b"1\xc1\x86\xe7\"\x17'\x10\xe3T\xc9\x7f\xc3a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    complex_0 = 3538.4832 + 1856.447j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    bytes_0 = b"\x06\xbaQ5\x10\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    bytes_0 = b"aO\xfd_d\xa5\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    str_0 = "D)c*Yj*.{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    str_0 = "3Y\x0cEo"
    str_1 = "8K&"
    str_2 = "t"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    str_0 = "x"
    set_0 = {str_0, str_0, str_0}
    list_0 = [str_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    set_0 = set()
    float_0 = 5171.77375
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    int_0 = -2334
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    int_0 = 2508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    float_0 = -1764.913087
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    str_0 = "EB2!m\nG4D7d MK%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bytes_0 = b"\xcb\x1b\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    bytes_0 = b"\xad\xf4e\xa8<\xf3\x19\xb7q\xe9C\x11\tf\x13\x9d\xefT\t"
    str_0 = '#wg\r),q\t>"s?BbT\r{p--'
    tuple_0 = (str_0, str_0)
    bool_0 = False
    tuple_1 = (tuple_0, str_0, bool_0)
    str_1 = "yYM}<z]\r8PJ"
    tuple_2 = (bytes_0, tuple_1, tuple_0, str_1)
    module_0.match(tuple_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    int_0 = 4274
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    bytes_0 = b".^\xfd\xc4\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    str_0 = "%0dcJ$d{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    int_0 = -1821
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    complex_0 = -394.875675 - 2503.526957j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    tuple_0 = ()
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    str_0 = "4M`}GY},),:orYh7t\x0b0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    int_0 = 1793
    float_0 = -1270.602
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    str_0 = "`-BE\x0bba#\t`f9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    int_0 = -3664
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    int_0 = 2272
    bytes_0 = b"\xaa\x8e\x0f\x06\x0c\x0e\xd51\xb2"
    list_0 = [int_0, bytes_0]
    tuple_0 = (int_0, list_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    int_0 = 1348
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    int_0 = 1369
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    float_0 = -1034.0
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    bytes_0 = b"\xae\x03d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    str_0 = 'rU"4$/:\x0c|@GrR(qu'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    int_0 = -1857
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    float_0 = 2690.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    str_0 = "1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    int_0 = 1955
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    complex_0 = -279 + 3897.90089j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    str_0 = "Bk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    complex_0 = -475.43 - 2007j
    int_0 = 561
    object_0 = module_1.object()
    dict_0 = {complex_0: complex_0, int_0: int_0, complex_0: object_0}
    tuple_0 = (complex_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    bytes_0 = b"\xd4\xe7\x1f\xa7{"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    int_0 = 2222
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    int_0 = 2740
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    bytes_0 = b'\x04\xed"\xa0b\rC\xa8?`\x1b\x97Mb('
    int_0 = 2576
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    str_0 = 'xL"nc1.?HNK\\u4Jmm'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3467():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3468():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    bytes_0 = b"\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    complex_0 = -1102.4 + 1242.339j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    str_0 = 'n!#`Bz\r@Cj63"_\t'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    float_0 = -1050.334
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    int_0 = -2821
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    int_0 = -469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    str_0 = ">81\x0cCJa%+X\\-*0 D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    str_0 = ""
    float_0 = 2389.634
    dict_0 = {str_0: str_0, float_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bytes_0 = b"\xf4-\xdd\x1e@\xd6\xda'\xf24\xd9\xb9\x81\xd9o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    int_0 = 2043
    complex_0 = -950.9 - 4232.54529j
    list_0 = [int_0, int_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    int_0 = -1262
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    bytes_0 = b"\xdb\x83#x\xee\xe6|U\xb1\xa0P\x93\xb6\xdc"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0, tuple_0: bytes_0, bytes_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    int_0 = 1323
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    bytes_0 = b"\xc8zI"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    str_0 = "XnN1M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    bytes_0 = b","
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    int_0 = -747
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    int_0 = 1318
    module_0.match(int_0, int_0)


def test_case_3487():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3488():
    int_0 = -2475
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    bytes_0 = b"\x906\xb9X[\x16\x05"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    float_0 = 853.047898
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    bytes_0 = b"O\xf8l\xa6\x01m\xdb\xe2ppb\xdb\xc1\xe1`\xc1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    bytes_0 = b"\n\x1d\xb7H\x86SjVb\x9a\x97\x9d\x88)1\xd8X\xe8b"
    dict_0 = {}
    bool_0 = True
    list_0 = [bool_0, bool_0]
    int_0 = 2951
    tuple_0 = (bytes_0, dict_0, list_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    bytes_0 = b"\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    bytes_0 = b"(-E\xc4\\\xa8\x03C\x08d\xbb0\xde{\xfa\xb4\x19z\xfbT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    bytes_0 = b"a\x00\xa2\xb3\x8eg\xa8\x12+\x88C\xfc\xfb\xb1\x04\xd5n\xf9$"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_3497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3498():
    str_0 = "]m8'6twz2#3^azj"
    module_0.get_new_command(str_0, str_0)


def test_case_3499():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3500():
    float_0 = 4539.614997
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    str_0 = "dY"
    none_type_0 = None
    str_1 = "q"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    int_0 = -807
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    int_0 = -645
    module_0.get_new_command(int_0, int_0)


def test_case_3504():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3505():
    str_0 = "%&/gofkRbS+<s-]\r1=z"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    float_0 = 1385.463754
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    bytes_0 = b"-+L\xd6y\xed\xb5\x93\xfa\x9dM Zx\x16\xc1\xb0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    str_0 = ";E?}e!*k/=mO1h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    str_0 = "K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    float_0 = 138.804
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    int_0 = 1373
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    str_0 = "n2\x0bkuk:X>v\nicCE_L1P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    int_0 = 205
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b"Bv\xb8\xf2"
    bool_0 = True
    tuple_0 = (dict_0, bytes_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bytes_0 = b"\x7fzC{Vn\xa9\x82\xde\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


def test_case_3516():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bytes_0 = b"\x96\x15S#\xc8y!"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    complex_0 = 1321.127479 - 412.23j
    set_0 = {complex_0, complex_0}
    bytes_0 = b"\x9fP}a\xd7\xd1Q\x01\xb7\xe6X9%g)\x8d\t\x9d"
    bool_0 = True
    tuple_0 = (set_0, bytes_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    str_0 = "R1Enn-%=>*s"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    bytes_0 = b"+\xfdr_\x02\x14o!\xaey\xb5\n\xe8\xdf\xc5\xef\xf6Db"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    str_0 = "0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bytes_0 = b"\xce\xda\xd2/"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    int_0 = 666
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    str_0 = '\n$r!bprZ\n"DS0i]L\\~>l'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    str_0 = "<.0+ m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    int_0 = -508
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    bytes_0 = b"\xc7{lp\x1d%\xc0\x95y\x0f\x1f\x8f\x1e\xfc\x11"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    int_0 = -4632
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: int_0, int_0: int_0, bool_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    float_0 = 2960.11
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    str_0 = ",wEqj7\x0c{5"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    int_0 = -1741
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    bytes_0 = b"d5\xc8|\x16H\xfc\xad\xc4X\xdeM>\xf2pw\xaa\x162\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3535():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3536():
    float_0 = 3243.792
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    int_0 = -136
    module_0.get_new_command(int_0, int_0)


def test_case_3538():
    pass


def test_case_3539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3540():
    float_0 = -1269.082514
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    float_0 = -1284.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    complex_0 = -6736.199624 + 2847.693j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    int_0 = 2362
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    bytes_0 = b"y!\xf0\xb3oys\x92?\x11\xf9?zo\xc9q\x97d5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    int_0 = -12
    module_0.match(int_0, int_0)


def test_case_3547():
    pass


def test_case_3548():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3549():
    bytes_0 = b"\xfdB|7\xc2c\x9d\xd6\x8a\x8b\xc4\xdee\xac"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    int_0 = 956
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    bytes_0 = b"\xe0s\xcf~\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = -1885
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0, tuple_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    str_0 = "tDe{|r\r3#HF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    int_0 = 1301
    set_0 = {int_0}
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    int_0 = -1655
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    int_0 = -309
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    str_0 = "\nHyq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    str_0 = "'sL./pDU"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    int_0 = 3387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    str_0 = "3@8Qfv\r2{GJzl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    int_0 = -1589
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    int_0 = -2436
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    str_0 = "0q=:$&m8@k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    str_0 = 'j7wXgi0%"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    float_0 = -459.49
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bytes_0 = b"\x1c6\xd7i\xf2\xfe\x1c=;^"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    bytes_0 = b"\x0c\x02\xc1{\x88j!\xd2bL\xfaSi3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3571():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3572():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    object_0 = module_1.object()
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    bytes_0 = b" M\xd4\xf1\xb4\x90\x1d/\xf5\x04\x0ft\xe8=UB"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    none_type_0 = None
    int_0 = 2534
    module_0.get_new_command(none_type_0, int_0)


def test_case_3575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3576():
    float_0 = 272.0018
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    bool_0 = True
    complex_0 = 777.38786 - 499.3j
    dict_0 = {bool_0: bool_0, complex_0: complex_0, complex_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, dict_0, dict_0, bool_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    bytes_0 = b"\x05\xca(\xb9\xea'[O\x1b\xd1f\xcb\\\tK\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    float_0 = -1717.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    int_0 = -718
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    int_0 = 60
    list_0 = [int_0, int_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0, bool_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    float_0 = 2560.75
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    int_0 = -2807
    bool_0 = True
    list_0 = [bool_0, bool_0, int_0, bool_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    int_0 = 159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    float_0 = 4845.97736
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    str_0 = ":M:Rf~i@AK"
    str_1 = "WQZ_fQ\\(l]{|qu"
    str_2 = "7=#Hs,u%j&a)"
    list_0 = []
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    int_0 = 1578
    float_0 = 1653.0
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    int_0 = 517
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    str_0 = "8FK4Lr-^D\r~X$EH4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    object_0 = module_1.object()
    int_0 = -199
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    int_0 = -2903
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    complex_0 = 1382 + 2637.7473j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    bool_0 = False
    bytes_0 = b"]\xb4A5\xfa\xa0\x1bV(\xc6\xb2"
    bool_1 = True
    tuple_0 = (bool_0, bytes_0, bool_1, bool_0)
    dict_0 = {tuple_0: bytes_0, bool_0: bytes_0, bool_1: bool_1}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    int_0 = 154
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    str_0 = "a_X\rMXQjb\x0b@RE'$1/WyA"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    int_0 = -1818
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    str_0 = "D^XTi%Z1bj|e&"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    float_0 = 2889.4597
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    float_0 = -4041.0772
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    float_0 = 608.05
    int_0 = 446
    set_0 = {int_0}
    tuple_0 = (float_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    bytes_0 = b'\xa7\xa9^30\x85\x88\xcd/~\x14\xa2"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    float_0 = 388.3
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    bytes_0 = b"\x06\xceY\xaey3\x14\xfb@\x081(\x1b\x1b\xdb\xeat"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    list_1 = [dict_0, dict_0, bytes_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    float_0 = 821.14892
    float_1 = 376.995617
    dict_0 = {float_0: float_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


def test_case_3611():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3612():
    bool_0 = False
    bool_1 = False
    int_0 = -2887
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0, bool_1: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_3613():
    pass


def test_case_3614():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3615():
    str_0 = 'm\t"q1\\N,R\x0cp./'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    str_0 = "1r\\"
    float_0 = 3081.7367
    set_0 = {str_0, str_0, float_0, float_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    str_0 = "&P8+6:=vh||sD"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    str_0 = "7_\tgBv]]}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    int_0 = 1022
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    int_0 = 3580
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    bytes_0 = b'Q\r\xfa@\xf6\xa8"} \x1b\x03\xee\x07\xf1\xd8\xbe4\xf3\x8e'
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    float_0 = -2990.968362
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    int_0 = -919
    float_0 = 2040.86
    tuple_0 = (int_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    int_0 = 1850
    module_0.get_new_command(int_0, int_0)


def test_case_3625():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3626():
    str_0 = "4vAT4RW\tP/(tuc4+BJC"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    int_0 = 1542
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    float_0 = -992.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    str_0 = "WLS%_\n5R!xsz"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_3630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3631():
    float_0 = 1816.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    int_0 = -165
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    str_0 = 'EW\n7z|"?}>'
    module_0.match(str_0, str_0)


def test_case_3634():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3635():
    int_0 = 1011
    bytes_0 = b"\xbc\xa2\xff\xdf\x9c\xf3\xe8\xe1"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    int_0 = 1366
    str_0 = "v"
    tuple_0 = (int_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    float_0 = 2072.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    bytes_0 = b"^\x86w\x81\xb9\xeb\x04\x85"
    bytes_1 = b"\xd7\xde\xcd"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0)
    tuple_1 = (dict_0, tuple_0, bool_0, bytes_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    int_0 = -1633
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    complex_0 = 880.46807 + 1644j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    str_0 = "p|KU81KTRyw 5g_V#V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    none_type_0 = None
    str_0 = ";}\x0c`0d6vmf/#{Q.'9E"
    str_1 = "}e VAM*Frg4|E` plox"
    bool_0 = True
    dict_0 = {str_0: none_type_0, str_1: str_1, str_1: bool_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    object_0 = module_1.object()
    bool_0 = True
    list_0 = [object_0, bool_0, bool_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    complex_0 = 2186.51091 - 1972.28j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    bool_0 = False
    str_0 = "o$"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    str_0 = "^z\\1K5x& Zk#>T"
    none_type_0 = None
    str_1 = '0*U^j:1\tx"'
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    str_0 = "'r0!rit@ /*e2+"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    bool_0 = True
    dict_0 = {}
    complex_0 = 978.82629 - 3459.06j
    tuple_0 = (bool_0, dict_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    int_0 = -218
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    complex_0 = 622.9885 - 1237.9j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    bytes_0 = b"iQ\xed\xe5b\x0f\r\x1e\xe1"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    bytes_0 = b"c\xfd,\xd6\xd8\xf0\xbe\x90\xbc\xd6\xf0\xf8\xdf\x8e"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_1, bool_1: bool_0, bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    int_0 = 2425
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    bytes_0 = b"\x7fG\x80\xca"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "^k4-g[h"
    tuple_0 = (bytes_0, dict_0, str_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    float_0 = -406.2888
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    str_0 = "4\t#sWgB`EgW*meGab!5~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    str_0 = "}C6Kz$O\\@m0. _\x0cS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    bytes_0 = b"\xbd\x0ey]eKC"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    str_0 = "G=7z\\A-qnV"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    float_0 = 440.291023
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    str_0 = "GtQ6'X;4|-&fezX*fv"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    float_0 = -1810.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    int_0 = -3292
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    str_0 = 'zDVV;>0"F#A\x0bLi#'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    str_0 = "ZW["
    int_0 = 2749
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = "\x0c?]ZB4m.D"
    dict_0 = {str_0: set_0}
    module_1.object(*set_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    str_0 = "&MV"
    list_0 = [str_0, str_0]
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0}
    float_0 = 2751.887828
    tuple_0 = (bool_0, dict_0, float_0, list_0)
    bool_1 = False
    tuple_1 = (tuple_0, bool_1, bool_1)
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    bytes_0 = b"\xbb\xdcpr\xa3\xaa&g\x1dT\xc1\xc2t\x18\x1feZ\rf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    float_0 = -2217.937
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    tuple_0 = (float_0, float_0, dict_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    str_0 = "\nfZdA)\n{sA(q:.^O"
    float_0 = -1057.0
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    str_0 = "`'lUmSxhF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    int_0 = 205
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    str_0 = "r\r|a@*A!5#I^CxDX91"
    module_0.match(str_0, str_0)


def test_case_3679():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3680():
    str_0 = "{7PB B%\x0cv#"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    float_0 = 2794.37142
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    int_0 = -747
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (int_0, int_0, list_0)
    list_1 = [tuple_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    none_type_0 = None
    bytes_0 = b"\x99\x0b*)9Ft\x1d\xc2\xd2{\x05"
    set_0 = set()
    str_0 = "qwY{}X<>fB"
    tuple_0 = (bytes_0, set_0, str_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    int_0 = -2353
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    float_0 = 166.136
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    int_0 = -4707
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    int_0 = 532
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    float_0 = 116.0
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    int_0 = 430
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    float_0 = 3786.8431
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    int_0 = 4216
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    bytes_0 = b">"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    bytes_0 = b"\xf7\x8a\x12\xd0\xc9\x9c\x1e\xa0W\x87\x9c\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    int_0 = 1547
    module_0.match(int_0, int_0)


def test_case_3696():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3697():
    complex_0 = -5994.5291 - 1679.940536j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    str_0 = "0"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    float_0 = 477.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    str_0 = '"5i'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    none_type_0 = None
    int_0 = 553
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    int_0 = -1033
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    float_0 = -1293.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    int_0 = 1768
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    str_0 = "/#wy_Lezr5F6(dt<B"
    int_0 = -95
    module_0.match(str_0, int_0)


def test_case_3707():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3708():
    bytes_0 = b"\xad\x10lP\xb7\xcdo\xc2\xe9\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    str_0 = "OtpaN9d5\t5l"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0, str_0)
    str_1 = "Z69$s"
    str_2 = "f)3ZDR\n~~qXsx|"
    dict_0 = {str_0: str_0, str_0: tuple_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    str_0 = "zlU$ED-h^O"
    str_1 = "Tf{tsaYss\n^>);_"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    float_0 = -2536.95817
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    bytes_0 = b"s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    float_0 = -783.4009
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    int_0 = 944
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    str_0 = "|#\n VK=nRZ'2f%8Or\x0cxf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    int_0 = 2213
    bool_0 = True
    list_0 = [int_0, bool_0, int_0, bool_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, int_0)


def test_case_3717():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3718():
    int_0 = 1605
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    int_0 = -1805
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    int_0 = 2702
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    complex_0 = -2879.6 + 1195.167j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    float_0 = 3078.0
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    int_0 = -1455
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    bytes_0 = b"\xbb\xb9\n9\x81\xfa|\xf5\x8a\xda\x8b\xf2\x05_D\x0b<\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bytes_0 = b"*\xa24\x07\x1f\x14c\n"
    module_0.match(bytes_0, bytes_0)


def test_case_3728():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3729():
    int_0 = 342
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    int_0 = -5451
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    int_0 = -2081
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    int_0 = 2496
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    str_0 = "X/;@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    int_0 = 2650
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3736():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3737():
    str_0 = "O(yt#)fR\x0b"
    bool_0 = True
    set_0 = {str_0, bool_0, bool_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    str_0 = "V5XCJ!yU^I"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_3739():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3740():
    bytes_0 = b"\xa9\xdf\xd85\xa9\xa4\x05\xfa'u\x1b\xb9)\t9\x0cdn"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    str_0 = "VBUG\r\\^L%m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    str_0 = "C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    str_0 = "\r5G50UGW"
    str_1 = "2fyxf~G="
    str_2 = "X.|v.t}7"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    str_0 = "|9^K?V:D%5w`"
    bytes_0 = b"M$y\x92\xc3\x1a\xc7"
    tuple_0 = (str_0, bytes_0, str_0)
    dict_0 = {tuple_0: str_0, bytes_0: tuple_0}
    module_0.match(tuple_0, dict_0)


def test_case_3747():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3748():
    int_0 = -923
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    str_0 = "-7K,D0[kH"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    str_0 = "c\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    str_0 = "7w\x0bAM%s]t-;5l"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    bytes_0 = b"{\xee\xe8\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    str_0 = "%,SG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    str_0 = 'ACX6b"XBT,d6@C0URX'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    complex_0 = 1047.253659 + 984.935822j
    module_0.match(complex_0, complex_0)


def test_case_3757():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3758():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    int_0 = 2388
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    int_0 = 2245
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    float_0 = 772.5553
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    complex_0 = 116.59265 - 1084.66819j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    bytes_0 = b">\xcb\xc2]\xdd\x11gHu\xa8\xff\xd3\xba\xba\\"
    module_0.match(bytes_0, bytes_0)


def test_case_3765():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3766():
    int_0 = 1281
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    float_0 = 3618.01
    set_0 = {float_0, float_0, float_0}
    list_0 = [set_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    str_0 = "sP?jOW#D"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    list_1 = [list_0, str_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    float_0 = -3594.82016
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    str_0 = ".NM}6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    complex_0 = -372.9 - 141.68435j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3772():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3773():
    int_0 = 88
    module_0.get_new_command(int_0, int_0)


def test_case_3774():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3775():
    bytes_0 = b"d\x0e\xb5 \x83\t\xc5\x19+\xea"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    int_0 = -4022
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    str_0 = "})U)=0eQimW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    complex_0 = -364.9436 - 4200.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    float_0 = 1308.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    int_0 = -562
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    none_type_0 = None
    int_0 = -3500
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    float_0 = 497.3
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    bytes_0 = b"I\xaf\xb7K\xb5"
    module_0.match(bytes_0, bytes_0)


def test_case_3785():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3786():
    int_0 = -89
    float_0 = -1263.04564
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "/-Ynhg\x0b08NnR9x"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: str_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    bool_0 = True
    bytes_0 = b"\xc7\x01\xeb\x9d\xbb\x9eg\xec\xc1c\xbcu\x84"
    list_0 = [bool_0, bytes_0, bytes_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    str_0 = "ue"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    float_0 = -869.5309
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    str_0 = "P&dzm"
    module_0.get_new_command(str_0, str_0)


def test_case_3792():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3793():
    float_0 = 16.72373
    list_0 = [float_0, float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    bytes_0 = b"\x8f\xbe\x8e"
    module_0.match(bytes_0, bytes_0)


def test_case_3795():
    pass


def test_case_3796():
    pass


def test_case_3797():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3798():
    int_0 = -2513
    module_0.match(int_0, int_0)


def test_case_3799():
    pass


def test_case_3800():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    str_0 = "Jy\rT]Ex/stnf?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    str_0 = "QW8R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    int_0 = 254
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    str_0 = "A"
    bytes_0 = b"\xbe\x05\x04\xb0\xf7\xfbkZ)<W0\xce\x08\xf0\xe8h"
    list_0 = [str_0, str_0, str_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    str_0 = "x%5VOj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    str_0 = "`JTJraNF,0 @YHZJG$w"
    set_0 = {str_0, str_0}
    bool_0 = True
    str_1 = ";:Y"
    tuple_0 = (set_0, bool_0, str_1, str_0)
    module_0.match(tuple_0, bool_0)


def test_case_3807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3808():
    str_0 = "lS<R"
    tuple_0 = (str_0,)
    bool_0 = False
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    str_0 = "*AYfBc^N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    bytes_0 = b"\x8fGj \xc2l\xff\xd4\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    str_0 = '[<h\n~o\t{3G*_sP="lb$'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    float_0 = 2192.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    float_0 = -820.0
    str_0 = "\n\x0bSJB)="
    list_0 = [str_0]
    tuple_0 = (float_0, str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    int_0 = -1290
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    str_0 = '|qVD\nXO0CR_|"Ag?sG'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    str_0 = "qlen Y61=jy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    str_0 = '|H+Q\x0b$s9>\x0c"]txGje'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    str_0 = "%#QGy<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    float_0 = -1325.3684
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    int_0 = 575
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    str_0 = "e<acQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    bytes_0 = b"y\xce\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bytes_0 = b"\xfbF"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    bytes_0 = b"\x14\r!\x003\\8\xd7\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    object_0 = module_1.object()
    float_0 = -2587.07499
    module_0.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    float_0 = 848.38153
    tuple_0 = (float_0,)
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


def test_case_3832():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3833():
    bytes_0 = b"=L\xea\xdd\x8eI\xf0\xce\xe2\xdb\xa9;\x83\xe6\xbd\x12\xe6L\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    int_0 = 9
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    str_0 = "]}\\/H\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    none_type_0 = None
    float_0 = -2736.71136
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    str_0 = "U&}W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    int_0 = 2565
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    complex_0 = 2029.426019 + 674.983j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    complex_0 = 2261.49976 - 1284.838087j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    int_0 = 3652
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    str_0 = "Fq7"
    str_1 = "l:9Pp\rK| %=H8W"
    bool_0 = False
    str_2 = " aZ'N&\r3hd*=sJj"
    dict_0 = {str_0: str_0, str_1: bool_0, str_2: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    bytes_0 = b"S&\x8e\x0f\xc9\xd2y@\x01\xca\x8f\x8a\xf0\x08\xdd\x0b\xd4\xfa"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    bytes_0 = b"\xb7\xd6 \xb3\xab\xf3\xa5\xcc\x1b\xf2\xdc\xf4$"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    str_0 = "}>v/+&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    int_0 = 2750
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    int_0 = -564
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    int_0 = 1040
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    str_0 = "Qg\x0cxeK"
    set_0 = set()
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    str_0 = "yDI"
    module_0.match(str_0, str_0)


def test_case_3853():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3854():
    bytes_0 = b"\xe9]\x02M\xd3_"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    str_0 = "agtD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    bytes_0 = b"\xbe\xd4Vk\xacR\xdf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    bytes_0 = b"\xe9\x14y{\x1e\xe0\x13\x10+\x82"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    str_0 = "#rLuFI9AJ*'E@KG)"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    int_0 = -1508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    set_0 = set()
    list_0 = [set_0, set_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bytes_0 = b"\xaar\x96-"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    str_0 = "&a;9xKZ\rV%'\r~\"L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    str_0 = '\nqB"!*'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    str_0 = "}|`"
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    str_0 = "={#$th$4oBl^g"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bytes_0 = b"7\x15\x08]V\x84)\xbc@^%ti|Y\xe6:\x96\xec\xcc"
    tuple_0 = (object_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    int_0 = -2601
    module_0.match(int_0, int_0)


def test_case_3868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3869():
    int_0 = -19
    dict_0 = {int_0: int_0}
    str_0 = "\na5%!Jgl5!Yd'Vul"
    int_1 = 1809
    dict_1 = {str_0: int_0, int_0: int_0, int_1: int_1}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    str_0 = "n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    float_0 = 662.0684
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    dict_1 = {float_0: float_0, float_0: dict_0}
    module_0.match(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    float_0 = -4323.377436
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    bytes_0 = b"\xf0\xe4L\xce\xc83=$\xb6\xec2\xe7\x0c\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    float_0 = 236.25
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    bytes_0 = b"\xdc\xef\x91\x83\x99')\x04\xfd\xe9\x1b\x16\xca`\x01\xb4+^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    bytes_0 = b"p\xaf?\xaa>\t\x1e\x8c\xc2\x8e\xa5\x1b,'x\xbf\xbdx\x1d\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    float_0 = 2446.33
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    int_0 = -665
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    float_0 = 1488.5726
    str_0 = "h"
    tuple_0 = (float_0, float_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    str_0 = "2%"
    bytes_0 = b"\x7f\x95\xe1r\xdc+\x9f\xac\xb1:\xff&<\xcf\x88\x9dY"
    int_0 = -3372
    set_0 = {str_0, str_0, int_0, int_0}
    list_0 = [str_0]
    tuple_0 = (str_0, bytes_0, set_0, list_0)
    bool_0 = False
    tuple_1 = (tuple_0, str_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    str_0 = "1S0(z,$=UBP4_jr-m"
    str_1 = "5L*!gumw7fye"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    str_0 = "FQ-/HqSGp-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    bytes_0 = b"\xfb"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    str_0 = 'T9\x0c*x~Ckp"AYT+4wM8# '
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    int_0 = 1580
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    int_0 = -1009
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bytes_0 = b"HXSL\x13\xb5\xb8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    str_0 = "8'Wt[s*}5v;)"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    str_0 = "J4I"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    str_0 = "z8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    int_0 = 3280
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    bytes_0 = b"a\t\xc6(\xe1fX\xa9\x93\x9a\\\xe8\xf4R"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    int_0 = -5259
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    complex_0 = 3293 - 3073j
    bool_0 = False
    bool_1 = True
    dict_0 = {complex_0: complex_0, bool_0: bool_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    int_0 = -606
    complex_0 = -305.1 - 1945.84649j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    float_0 = -718.972537
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    int_0 = 65
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    bytes_0 = b"\xec\xbf\x03\xd64b}~Ym<\x85\x1e\xe7\xf4(\x83\xa1|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [dict_0, object_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    float_0 = -38.3274
    tuple_0 = (float_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    str_0 = "~[=X]UCrpzl}ry8`6\nhE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    bool_0 = True
    bytes_0 = b"\x06\xbc\xf4\xda\xdcy(\xae"
    str_0 = 'I\rR\x0b.M0wrEg1i"jP\x0c'
    tuple_0 = (bool_0, bool_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    int_0 = -1616
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    str_0 = "Ujq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = True
    tuple_0 = (set_0, bool_1, set_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    int_0 = 4382
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    bytes_0 = b"\xfe]\\n\xe3\xe0\x08@\x9f\xd6g\xe2(\x06\x11\xda\xb4\xd3\xa2\xc9"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    int_0 = -1043
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    int_0 = 980
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    bytes_0 = b"'\x80\xb01\xa5"
    float_0 = 5.2783
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    int_0 = 1663
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    complex_0 = 2837.356105 + 1225.63617j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    float_0 = -643.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    int_0 = -837
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    str_0 = "`zgI!7"
    bool_0 = False
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    float_0 = -2352.26
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    float_0 = 205.0
    module_0.get_new_command(float_0, float_0)


def test_case_3931():
    pass


def test_case_3932():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3933():
    complex_0 = -2608 - 1100.12j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    object_0 = module_1.object()
    int_0 = 3273
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    str_0 = "4T%@\n6dSqplAM\r+w{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    complex_0 = 1565.88547 - 56.95694j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    float_0 = 860.79149
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    int_0 = 2560
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    float_0 = -3414.03
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    str_0 = "ty(4\x0bo\x0b}"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    bytes_0 = b"\xc0\xc9\x84B\xa2 \x1a\x98cj"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    str_0 = "\\A=hIkA2I]"
    module_0.match(str_0, str_0)


def test_case_3943():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3944():
    bool_0 = True
    str_0 = "/T'g\x0c\"rn\rd"
    dict_0 = {bool_0: bool_0, bool_0: str_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    int_0 = 139
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    str_0 = "+B`RQ"
    str_1 = "_"
    str_2 = "zd*\t"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    set_0 = set()
    int_0 = -25
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    int_0 = -714
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bytes_0 = b"\xf0\xf8pR\xa6\xbfJ\x07\x1a\xef\xcd\xf8\x9b\x1b\xa7\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    bool_0 = True
    list_0 = [bool_0]
    set_0 = {bool_0}
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    int_0 = -1911
    module_1.object(*int_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    str_0 = "\tWtWQH18ykrX)PP{L"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    int_0 = -2070
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    float_0 = 95.0
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    bool_0 = False
    bool_1 = False
    str_0 = " kt]#'EkeKFaC~\"!Sa"
    tuple_0 = (bool_0, bool_1, str_0)
    set_0 = {tuple_0, bool_1}
    tuple_1 = (set_0, set_0)
    tuple_2 = (set_0, bool_0, set_0, tuple_1)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    str_0 = "z02(t=wVBg$QX7w)k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    str_0 = '\x0b"MZ9gA#`<='
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    int_0 = -732
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    float_0 = -1062.67
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    int_0 = -1548
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    float_0 = 3999.7248
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    float_0 = -3523.1548
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    complex_0 = -1252.864305 + 2575.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    int_0 = 3807
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    float_0 = 1245.49
    module_0.get_new_command(float_0, float_0)


def test_case_3967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3968():
    int_0 = 1236
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    int_0 = -243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    float_0 = 1515.520091
    dict_0 = {float_0: float_0}
    int_0 = -3801
    tuple_0 = (float_0, int_0)
    list_0 = [dict_0, float_0, dict_0, tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    str_0 = 'pyj\nP`&f0"eq;nNV;h~P'
    module_0.get_new_command(str_0, str_0)


def test_case_3974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3975():
    list_0 = []
    str_0 = "z"
    module_0.match(list_0, str_0)


def test_case_3976():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3977():
    float_0 = 4008.1268
    int_0 = 683
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3979():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3980():
    bytes_0 = b"\xefR\xf9\x1a\x14\xf7{\x9e34\x80\xe0?`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    int_0 = 1008
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    bool_0 = True
    float_0 = 1035.37649
    str_0 = "q zw~uSq\x0cgPr;TH3#"
    dict_0 = {float_0: bool_0, str_0: bool_0, bool_0: str_0, float_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    complex_0 = 2751.52877 + 2044j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    int_0 = 921
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    float_0 = 3461.662324
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    bool_0 = True
    tuple_0 = (object_0, bool_0)
    bytes_0 = b":d"
    str_0 = "3\x0cRb>"
    tuple_1 = (tuple_0, bytes_0, str_0, tuple_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    complex_0 = -2917 - 1807.95588j
    complex_1 = -5941.80413 - 3604j
    list_0 = [complex_0, complex_0, complex_1, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    int_0 = 1261
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    float_0 = 1085.590564
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    int_0 = -2037
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    int_0 = -742
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_3993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3994():
    str_0 = 'TL9\nf5RH&[M"[%O;~`F'
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    int_0 = 2252
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    int_0 = 5250
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    str_0 = "zm0jVrySs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    complex_0 = 388.42 - 2522.896j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    int_0 = 618
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    str_0 = "kp1p\r;"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    str_0 = "yL\x0cV\x0cg\r'bICoz@j:\"8\n'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    bytes_0 = b"!\xd1\xba\x7f\x8dd\xda\x99|\xf4\x0e\x99\xe5F\xed\xbf7&'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    str_0 = "nZMB<,AH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    complex_0 = -814 + 2473j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    str_0 = "\n$n'hf\t*IP}!G3%"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    int_0 = -1655
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [bool_0]
    list_2 = [list_0, bool_0, list_1, list_0]
    list_3 = [list_2]
    module_0.match(list_2, list_3)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    int_0 = 1970
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    str_0 = "4kb_Z\x0bML:Nbw5V:.g\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    int_0 = 495
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    bytes_0 = b"\xdeH"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    object_0 = module_1.object()
    bytes_0 = b"\xc0I\x1d\xb8v14\xc6\xe1\xe1X\x84\xc1"
    module_0.get_new_command(object_0, bytes_0)


def test_case_4015():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4016():
    str_0 = "=U)pkl<0|:pP]#OD_fy"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    int_0 = 1921
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    int_0 = 2255
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    str_0 = "v7]>\t+dnIc4"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    int_0 = -1142
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    float_0 = -272.9439
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    int_0 = -296
    list_0 = []
    bool_0 = False
    tuple_0 = (int_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    str_0 = "><D%\x0b:"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    int_0 = 1513
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    float_0 = -1155.689
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    float_0 = -882.32
    set_0 = {float_0, float_0, float_0}
    module_0.match(float_0, set_0)


def test_case_4029():
    pass


def test_case_4030():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4031():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    bytes_0 = b"\x10$\xa8\xbd~\xd3\xca\xe1\x13\x8b\x0b\xa6\xc5\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    list_0 = []
    str_0 = "vKt\"n>Y'?\\Jl!"
    str_1 = ""
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: str_1, str_0: bool_0, str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    float_0 = -15.1
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    int_0 = 647
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    str_0 = ")ytO~Zm\\RVE6wgpCD<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    float_0 = -1594.719
    list_0 = [float_0]
    bytes_0 = b"M\xee_\xaa\xb0Z\x82\x12\xb0\x08\xb0Z\xfd\x8b\xe8\xd6C\xad"
    list_1 = [bytes_0, bytes_0, float_0]
    list_2 = [list_0, list_0, list_1]
    module_0.match(list_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    bytes_0 = b"\xe9\x03J\x7f)b\xa8\x98\x0f.\xbd\xbb\x99+\x87E\x19\x86\n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    bytes_0 = b"\xe7\xdf}_\x07iX\xa7\x7f\n\x0en\xa5\xc7\xf7%"
    list_0 = []
    list_1 = [list_0]
    list_2 = [bytes_0, list_1]
    module_0.match(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    int_0 = 1521
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    bytes_0 = b"\xa5\x1c\xb6y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    str_0 = "\x0c5"
    str_1 = "Ag"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    int_0 = 5036
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    object_1 = module_1.object()
    module_0.match(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    set_0 = set()
    bool_0 = False
    float_0 = 460.4
    float_1 = 379.72947
    tuple_0 = (set_0, bool_0, float_0, float_1)
    module_0.match(tuple_0, float_1)


def test_case_4049():
    pass


def test_case_4050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4051():
    bytes_0 = b"\xcb\xc6\x06\xd5\xd1\x97\x03\xf8N\x86\x92\xe4\xa3<\xe5\xa8\x18\xc9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    object_0 = module_1.object()
    module_1.object(*object_0)


def test_case_4053():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4054():
    str_0 = "']<W"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    bytes_0 = b"(\xf2\x92\x1c\xe9Anm=\xd9\xfe\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    int_0 = -670
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    bool_0 = False
    bytes_0 = b"\xf6Y\x1c{\xa1-/"
    bool_1 = False
    bool_2 = True
    tuple_0 = (bytes_0, bool_0, bool_1, bool_2)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    int_0 = -2046
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_4060():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4061():
    bytes_0 = b"\xd1\xb8\xcc|\xac|QM??^Z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    str_0 = "GkCzy>"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b"{%U\x9a\xf5=\x8a\x18\x9b\x041\xba\xb0\xe1oe]\xdf4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    float_0 = -108.57058
    module_0.get_new_command(float_0, float_0)


def test_case_4065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4066():
    int_0 = -3380
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    str_0 = "M\thWMFqQo<-Ko\nRKzJ&"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    int_0 = 661
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    bytes_0 = b"\xc5\xcd\x95\xd5\x8f\x99\xe8\xfe}\xc1"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    tuple_0 = ()
    str_0 = "++& *)=\\@"
    tuple_1 = (tuple_0, str_0)
    list_0 = [tuple_1, tuple_0, str_0]
    str_1 = "/<5W"
    str_2 = "U<f9L"
    str_3 = "l?6~M<UWQL<?@$BS"
    dict_0 = {str_1: str_0, str_2: tuple_0, str_3: str_2}
    module_1.object(*list_0, **dict_0)


def test_case_4071():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4072():
    str_0 = "S^'6-XrL Z%#F[-DmoQ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    bytes_0 = b""
    tuple_0 = (bytes_0, bytes_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    int_0 = 279
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    bytes_0 = b"\x80g:l\t\x84\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    bytes_0 = b"kt\x89&\xfb\xc0\x13\xfait\xb3`\xa7\tS"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    str_0 = "n8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    str_0 = "saOb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    complex_0 = 1506.908 + 521.406184j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    str_0 = "3%SC1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    str_0 = "aL(UR"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    float_0 = -1265.0582
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    int_0 = -2102
    module_0.get_new_command(int_0, int_0)


def test_case_4087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4088():
    int_0 = -2834
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    bytes_0 = b"\xfd\xa1\x81\x15\xe2:\xfb\x94Q\xa7\x1b\xa1\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bytes_0 = b"L\x1e\xbc\x89K\x1d\xf46{*\x89V\xc2\xce!"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_4092():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4093():
    int_0 = -1455
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    str_0 = "H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    float_0 = -1110.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    int_0 = -669
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_1: bool_1, bool_1: bool_1}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    bytes_0 = b"\xfd\xf1u<\xa0#\x8a\xba\xdf\xbc\xdcu\x9a\x8e\xcaV\xb9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    int_0 = -95
    list_0 = [int_0, int_0, int_0]
    int_1 = -3155
    bytes_0 = b"\xbb\xf1*\xba\x17\x8c[;>*3"
    tuple_0 = (list_0, int_1, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    str_0 = "w2V5#;*|<\x0cdlo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    str_0 = 'L<|+&48\\h`:.P"\ng\x0bgU\r'
    list_0 = [str_0]
    module_1.object(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    int_0 = -3226
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    float_0 = 977.4864
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    bytes_0 = b"~\xdc\xa1\xa2\xf1t\x8a6\x84VX\xad\xa3\xeb\x98e"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = ")d3Lg(p%8JJB=}n"
    module_0.get_new_command(str_0, str_0)


def test_case_4108():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4109():
    int_0 = 3943
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    str_0 = "+\rN\t?$%>lGWG#"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    float_0 = -1836.33128
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    str_0 = "\r4jQfC)XfFl\\\\D_.w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    bytes_0 = b"d2ee\xa7\tY\xd5"
    int_0 = 1598
    list_0 = [bytes_0, bytes_0, bytes_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bool_0 = True
    complex_0 = -2391.9 - 3032.92j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    bytes_0 = b"\x02\xa1j\x93\x1a\xcc\x07\x80\x17\xc5\xeck\x81"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    int_0 = 618
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    bytes_0 = b"\x84\xc5\xb1\x8b6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    int_0 = 1917
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    bytes_0 = b"\xe1\x00yn"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    str_0 = '"U<02EO2,wD'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    str_0 = 'y\n61!hGVl^6"!\r\r'
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    str_0 = "u|QEOz!aI?wt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bool_0 = True
    bytes_0 = b"V\x8c\x16J*1V\xb9\xbb\x02\xf4\x8f\xd3\xd6"
    tuple_0 = (bool_0, bytes_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bytes_0 = b"NJ=\xcay4\x85%\x1d\xf0"
    module_0.match(bytes_0, bytes_0)


def test_case_4127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4128():
    str_0 = "DX,GUllPTUT"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    str_0 = "{h[v-^W+?(/!q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4133():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4134():
    int_0 = 55
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    int_0 = 1215
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    bytes_0 = b"\xc6VL\x87wb\xc0\x01\xbe\x8ep"
    bytes_1 = b"\xcb?\xdd\x87zW>\x9b\xfd\xf1\n%y\xd0"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    bytes_0 = b"3R\xb3\x90w\x82\x92\xa6\xdb\xa6\xcd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bytes_0 = b"\xff*%\xb8\xba\n\x9eq\x11\x1f\x05'}\xd0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    complex_0 = -1873.007 + 393.8658j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    str_0 = "cC4bN="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    str_0 = "'TziC[/<-.\r2{"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    str_0 = "ONhWQxz~g*<Y[Nz'"
    tuple_0 = (str_0,)
    bytes_0 = b"\xa4p[\xa7\xdd\x03\xef\x05\xb1\x9f\x02I\x06d\x93\xe5\x87"
    list_0 = [bytes_0]
    tuple_1 = (tuple_0, bytes_0, list_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    float_0 = -1234.58209
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    float_0 = 783.0
    object_0 = module_1.object()
    module_0.match(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    bytes_0 = b"F\xfc\xdf\xe7\xdb\xefFMpl\x94\x05\xa3\xc9\x16$\x07\xc8"
    int_0 = 371
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    str_0 = 'v"\x0c|!C.i\x0b\\\\W'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    int_0 = -595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    bytes_0 = b"\x13I\x88\xbdQl\x93;p \xe0\xbc"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_4152():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4153():
    str_0 = "5INM6dfO}"
    str_1 = "kN@c"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    bytes_0 = b"\xaa\xd7\x90\xee\xfc\xaaA~\xcb\x82\x14"
    module_0.match(bytes_0, bytes_0)


def test_case_4155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4156():
    float_0 = -217.68652
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    str_0 = "jH@Vn74PQF#X2j8zuqi"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    int_0 = 3317
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    bytes_0 = b"\x91v\x90\x88@\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    str_0 = "<pO\\("
    module_0.match(str_0, str_0)


def test_case_4162():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4163():
    str_0 = 'G+azm>O"(\\'
    module_0.match(str_0, str_0)


def test_case_4164():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4165():
    str_0 = "%K=7l<f>YA_u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    str_0 = "xY\t;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    int_0 = 2170
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    list_0 = []
    object_0 = module_1.object(*list_0)
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    str_0 = "\t(Qbo~m^\rYfS"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    str_0 = "B}.Zf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    tuple_0 = ()
    float_0 = -46.89449
    list_0 = [tuple_0]
    tuple_1 = (tuple_0, float_0, float_0, list_0)
    tuple_2 = (tuple_1,)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    float_0 = -3116.786795
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bytes_0 = b"\xbb\x9d\xdbe?o\x1e\xe98\xf9{\xcc1o\xb5\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    int_0 = 3767
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    int_0 = -2240
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    int_0 = 446
    float_0 = 3460.930929
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    bytes_0 = b"g\xfd\r\x19d\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    float_0 = 3509.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    bytes_0 = b"\xb6\xbe\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    str_0 = 'MAvBD"*{BH9T`P'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bytes_0 = b"M\x13{\x84\xec\x12\x16\xbd\x97\x96\xb2\x98\x1d\x98\xef\x98"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    str_0 = "\x0cx^BZnOr>"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    str_0 = "RT7Af0>H-&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    float_0 = -1987.250778
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = -2085
    int_1 = 1043
    tuple_0 = (int_0, int_1)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    bool_0 = False
    int_0 = -678
    list_0 = [bool_0, int_0, int_0, bool_0]
    tuple_0 = (bool_0, int_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    bytes_0 = b"\xc2\xc3\x0cX\x1f\x0e\xa3\x99\x08\xd6\xb2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4189():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4190():
    int_0 = -2455
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    str_0 = "7U"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    int_0 = -703
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4195():
    str_0 = "\rMndI]!ms%j%gh#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bytes_0 = b"\x071$\xdf\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    int_0 = 1307
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    none_type_0 = None
    list_0 = [none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


def test_case_4199():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4200():
    set_0 = set()
    str_0 = 'D0 sx+Wr|,"'
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    str_0 = "O45}<Lghle\r[&;#7%S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    object_0 = module_1.object()
    str_0 = "=?"
    list_0 = [object_0, object_0, object_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bytes_0 = b"S\xf3\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    float_0 = 742.1
    bool_0 = False
    dict_0 = {float_0: float_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, float_0, float_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    str_0 = ">*a$Z}iP5)gD"
    module_0.get_new_command(str_0, str_0)


def test_case_4207():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4208():
    str_0 = "\n\x0bi4a5E&'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    int_0 = -2522
    int_1 = 40
    tuple_0 = (int_0, int_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = -1264
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    bytes_0 = b"\x7f\xdbj\x93\x8b\xfdY\xe0,."
    module_0.match(bytes_0, bytes_0)


def test_case_4213():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4214():
    int_0 = 1629
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_4215():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4216():
    float_0 = 604.2
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    complex_0 = 595.88626 - 873.0135j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    complex_0 = -1076.9527 + 2295.72997j
    dict_0 = {complex_0: complex_0}
    tuple_0 = (dict_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    int_0 = -907
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4222():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 3743
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_0, bool_1]
    bool_2 = False
    module_0.get_new_command(list_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    float_0 = -679.79026
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    bytes_0 = b"z\xe4*\xe7]\x99|\xd9F_\xe3\xb2AG\xfcN\xc3"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    int_0 = -2546
    bytes_0 = b""
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    str_0 = "D-@Xx5j\n&\x0cK"
    str_1 = "a"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    str_0 = "J\x0cSDPiu<z)\\8q<V`Ql\x0bj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    int_0 = -4831
    set_0 = {tuple_1, int_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    str_0 = '"va'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    int_0 = -4185
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    bytes_0 = b"\xe8(`f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    float_0 = 1350.499
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    float_0 = -737.89
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    float_0 = -1914.0
    bool_0 = False
    dict_0 = {float_0: float_0, float_0: float_0, bool_0: bool_0, float_0: float_0}
    bytes_0 = b"\x1a%\x03\xfe\x80\x0b\xd5\x0eQ\x98:Z\x9c"
    bool_1 = True
    tuple_0 = (dict_0, bytes_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    str_0 = "-B\x0c|_y\x0cGXL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    int_0 = -1504
    int_1 = 2309
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    int_0 = 277
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    float_0 = 2914.38
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bytes_0 = b"\x80hR\xe1\x19\x06w\xa49\x86\\kc(\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    str_0 = "#\rT71/[1d8\\cbD6e(N@"
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    str_0 = '&"[0#")'
    module_1.object(*str_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    int_0 = 2420
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    bytes_0 = b"\xd0`\xc8\xb5"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    str_0 = "-\x0b#N\x0c2'(_49't"
    module_0.get_new_command(str_0, str_0)


def test_case_4252():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4253():
    bytes_0 = b"Y3$\x86\x99\xb3\xfdX%%"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: dict_0}
    none_type_0 = None
    module_0.match(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    bytes_0 = b"\xf1\xcb^\x18\xd0\xe6x\x03\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    int_0 = 223
    bytes_0 = b"\xff\xf5\xa9\xb0"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = "qiwh"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    float_0 = -2021.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    str_0 = "qOZ5{"
    set_0 = {str_0, str_0}
    dict_0 = {str_0: str_0, str_0: set_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    int_0 = 1685
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


def test_case_4260():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4261():
    bytes_0 = b".}\x8f\x8b\xf8z3\xbbL\xe9\xafm\x94\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4263():
    str_0 = "Q=G~q-T\x0bC97u"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    bytes_0 = b"\xba=\xdf2\xa4f\x08\xe6Y\xe8\xa8~\xe2\xe9\xce.\xe3\xfcy6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_4265():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4266():
    int_0 = -941
    bytes_0 = b"\x82\xa2sAK\xfd\xf9\x07\\q&\xdbA"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    complex_0 = 231.68119 - 2829.77547j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    str_0 = "\x0b2v@Gqf}\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    float_0 = -3898.696433
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    float_0 = 618.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    int_0 = -2596
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    int_0 = 680
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    str_0 = "Fh#d\x0ctAM"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    str_0 = "/YKHU$?;*TNY6/w&\x0cj"
    bool_0 = True
    set_0 = {str_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    float_0 = 2881.1
    int_0 = -2448
    bool_0 = True
    tuple_0 = (float_0, int_0, int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    str_0 = "4 2g8Mh\x0c\tu\\:@r8B"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bytes_0 = b"\x04\xfc\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    str_0 = "k\x0b2"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    str_0 = "RX\rt&@GI-&q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    bytes_0 = b"\x0b\xa7\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    int_0 = 3425
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    bool_0 = False
    str_0 = "#Fw"
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, str_0, list_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    int_0 = 5125
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    int_0 = 2656
    int_1 = 2334
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    str_0 = "Sx>E.k`OJ[dbF4M\x0c\x0b"
    str_1 = "-3&4"
    tuple_0 = (str_0, str_1, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bytes_0 = b"\xcd"
    module_0.match(bytes_0, bytes_0)


def test_case_4288():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4289():
    bool_0 = True
    complex_0 = -482.9359 + 11.7771j
    tuple_0 = (bool_0, complex_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    float_0 = 370.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(float_0, list_0)


def test_case_4291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4292():
    int_0 = -934
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    bytes_0 = b"\x00B\xca\xc6Ie\x81\x94"
    int_0 = -218
    tuple_0 = (bytes_0, int_0)
    dict_0 = {tuple_0: bytes_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    str_0 = "\tN~-`k5J<>r);E4\x0bzL61"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    str_0 = "#zmk.lZ89XD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    int_0 = 418
    bytes_0 = b"\x14\xae%\xea\x85\xa4\x0ciKG\xe0D<\xf1t\xfe"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    float_0 = 1117.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    float_0 = 157.2784
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    str_0 = "c:UVIQ\r;X\\9sgM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    int_0 = 1780
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    int_0 = 259
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    int_0 = -169
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    float_0 = 796.650673
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    float_0 = 661.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    float_0 = 436.699
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    int_0 = 845
    module_0.match(int_0, int_0)


def test_case_4310():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4311():
    int_0 = 654
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    int_0 = -3900
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    complex_0 = -1826.845 + 1585.009242j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    int_0 = 3686
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    float_0 = -1345.234225
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    int_0 = -1326
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_4318():
    pass


def test_case_4319():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4320():
    str_0 = "/:i.BicD0"
    int_0 = 1974
    int_1 = -357
    bool_0 = False
    tuple_0 = (str_0, int_0, int_1, bool_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    str_0 = '!;dyZtMiD\x0b88y&bud"'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    str_0 = "PA#m5^ZW+:pK7W!_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    bool_0 = True
    bytes_0 = b"\x0f96\x8f\xe1pA\xbd\xe3D"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_4325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4326():
    complex_0 = 2420.3015 - 1168.89891j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    str_0 = "^sVMuc(`L+xug0{Y"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


def test_case_4329():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4330():
    bytes_0 = b"\x89\xfe\xf7^\xb7w\xaa.\xfc\xfb\x99\xfe\xffqbV"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    str_0 = "~"
    bytes_0 = b""
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    int_0 = -2938
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    int_0 = 809
    bytes_0 = b"\t"
    list_0 = [int_0, bytes_0, bytes_0]
    module_1.object(*list_0)


def test_case_4335():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4336():
    int_0 = 266
    set_0 = set()
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    int_0 = 2029
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    str_0 = "c#a\\EL7S1_~CK'MZr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    int_0 = -3505
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    bytes_0 = b"\x00QoC\x06\xa4\xef\x05U\xbf3\xb19\x82U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    float_0 = -262.62
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    int_0 = 608
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    int_0 = 1418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    bytes_0 = b"\x98\xb4\xf5\xda\x04n\xad\xf0"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    str_0 = "sQ&=pOXT3D_y^B`+sIUt"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    float_0 = -3252.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    bytes_0 = b"\xb0\xd0\x96b\xcd2\xd0s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    bytes_0 = b"\xc7\xa1\xb4L'\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    bytes_0 = b"\xcf\x0e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    bytes_0 = b"\x89\x03\t\xf7\xd2\xfa\xd9\x11X\xf9\xab\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bytes_0 = b"J"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    int_0 = 3359
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    int_0 = -3941
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    bytes_0 = b"\xce\xf7b\xd1P\xc1q\x00<&f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    bytes_0 = b"LCe\x85i\xa4\xdb`\xc1\n\xcf\xa8\x1f\xaak\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    str_0 = "::iVN=o#}A,"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    float_0 = 2265.12
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    float_0 = 2511.22944
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    tuple_0 = ()
    bool_0 = True
    list_0 = []
    tuple_1 = (tuple_0, bool_0, list_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    str_0 = "\x0c3\x0cj5]\nnb1r+!{3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    bool_0 = False
    bytes_0 = b"Xf\xdd\xd5\xa3\xfewMw{\xa9\x9e\x1d\xe5"
    tuple_0 = (bool_0, bool_0, bool_0, bytes_0)
    bytes_1 = b"\x8520\xae\x7f\xd7\xeb+d|\xf0GMF\x888C"
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    int_0 = 722
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    int_0 = 989
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_4369():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4370():
    float_0 = 1331.1872
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    bytes_0 = b"\x05q%G\x8e\xc6\xf6\xd9\xae\xfa\x1056\xd1\xe9\xeas"
    bool_0 = True
    bytes_1 = b"\x1e!x\x9fS9W\x06#\x08\x8d1V\\F\xe0\x8b"
    tuple_0 = (bool_0, bytes_1, bytes_1)
    int_0 = -271
    tuple_1 = (bytes_0, tuple_0, int_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    int_0 = 2501
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    float_0 = -5494.17806
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    bytes_0 = b"P\x93\xd1\xab\xed\x83\x06N\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    str_0 = "^4&JXXwEikvw!\ng!Ki"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    int_0 = -3625
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    bytes_0 = b"H\xa2\xe1\xd8>\xa7\xc3\xdb\xfb\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    float_0 = -269.0
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    int_0 = -2289
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    float_0 = -395.186241
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    bytes_0 = b"\xfe\xba]M\xf7\xae-\\zkJ\xaf\xdc\xa1\xec\xc9"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    int_0 = 120
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    bytes_0 = b"\xdf\x1b\x06W\xe1\xe0\xf3n\x8a\t\x90^\x1b'\xf5>|\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    bytes_0 = b"FyY6%\x16/C\x04\x86\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    str_0 = "x?+r!wFY61:(MP6g\\;m3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bytes_0 = b"Ep\xc7K\xd8\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    int_0 = -1465
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    float_0 = -1282.6078
    dict_0 = {}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    str_0 = "Q}wS]^~a\n0^[($v_2k"
    module_0.match(str_0, str_0)


def test_case_4391():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4392():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    float_0 = 337.655
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    float_0 = 323.0
    module_0.get_new_command(float_0, float_0)


def test_case_4395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4396():
    int_0 = -2234
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    float_0 = -253.7
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    int_0 = 507
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    int_0 = -2832
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    int_0 = -2737
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    bytes_0 = b"\x80\xef\x87\xb3\x81c-\xc3\xec\xcc\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    float_0 = 187.92
    str_0 = "Ss5W"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    int_0 = 1437
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    int_0 = 859
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    str_0 = "S(m+#,URU%s6p"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    bytes_0 = b"\xb1\xbc\x82i\xb6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    str_0 = "oR_'[$"
    str_1 = "3y."
    float_0 = -2218.657441
    dict_0 = {str_0: str_0, str_1: str_1, str_1: float_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    bool_0 = True
    bytes_0 = b"\x1d\x02\xbf\xbet%\x0b\n\xb5\xc5\xb5"
    set_0 = {bool_0, bool_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    bytes_0 = b"\xa1\xae\x067S\x9ev\x9b}#\x90"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    bytes_0 = b"M^Z+\xe8X\x90\xdcN\x94C\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    float_0 = -477.3426
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    bool_0 = False
    str_0 = "oK@e!7k"
    tuple_0 = (bool_0, bool_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    bytes_0 = b""
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    bool_0 = True
    bytes_0 = b"f/\x7f{\x86C<\x93\xf5\x11\x8a\xa5{\xd9\x00\xe5\xf9\x16"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    str_0 = "Ygl%#LDv(t99Yq"
    module_0.match(str_0, str_0)


def test_case_4418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4419():
    complex_0 = -320.85 + 750j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    bytes_0 = b"\xef\x1ej\xd8\xda*A\x0f\xc2j*\xcd\x1b\xc9}\xba8\\\x945"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    float_0 = -2238.444304
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    float_0 = 1133.692
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    complex_0 = -4831.020861 - 1494.93576j
    float_0 = 3592.0
    tuple_0 = (complex_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    float_0 = -2718.86
    set_0 = {float_0, float_0}
    list_0 = [float_0, set_0, float_0, set_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4426():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4427():
    str_0 = "t~+\t\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    bytes_0 = b"y\x8fm\x9c\x9e8\xc2\xaaG\xaeU_\x00\xb5B\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    int_0 = 150
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    float_0 = -241.2081
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    str_0 = "]\nUzq\tUVb6=>|&08"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    str_0 = "i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    complex_0 = -393.5887 + 907.246647j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    int_0 = 6387
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    bytes_0 = b"\x13Og\xb2cY13"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4438():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4439():
    str_0 = ""
    set_0 = {str_0}
    list_0 = [set_0, set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    bytes_0 = b"\x84e|7"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4441():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4442():
    float_0 = -981.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    bytes_0 = b"\xee\xc04\xad\xb6s\xbe\xe1\xb8\xc4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4445():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4446():
    int_0 = -1099
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    str_0 = "zF4NPQxVtTH0\rQ;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = 263
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    int_0 = -349
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    str_0 = "LU#G\x0bXtD-\twm1/{"
    list_0 = []
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    bytes_0 = b"\xc0 ^8\xd2Z&\xd6\x11K\xbe\xe6\x17\x1dY\xe9\x03\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    bytes_0 = b"P\xd7\xa94\xe1\xf7\x99\xaf\xac"
    module_0.match(bytes_0, bytes_0)


def test_case_4454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4455():
    str_0 = "V#2lD|w!!]mr3"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    int_0 = -1237
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    bool_0 = True
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    int_0 = -2363
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    str_0 = "D&"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    float_0 = 1192.22728
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    str_0 = "3WK:)\rI[zI3W2+fdL8w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    int_0 = -597
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    bytes_0 = b"'\xd0\xae\xe5\xc0\xaa\xf9\xbf\x92 \x90$\xe9\x80\xbbw4\xb0"
    str_0 = "/I ("
    dict_0 = {bytes_0: bytes_0, bytes_0: str_0, bytes_0: bytes_0, bytes_0: str_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    bytes_0 = b"\xde\xf5\xbb\x1fr$\x9c\xc4\x8a\x16!\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    float_0 = 497.792
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bool_1 = False
    tuple_0 = (set_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    int_0 = 1289
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    bytes_0 = b"\xec\x82\xd4>\x0f=\xc9O\x1dV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    bytes_0 = b"\xcf\x8db\x8fu\xadU$;\xbbm\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


def test_case_4473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4474():
    bytes_0 = b"&\xd9\xe4\xe5C[\xfa"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    str_0 = "C!yNerq3:q>"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    int_0 = -124
    tuple_0 = (int_0,)
    bytes_0 = b"srg<"
    dict_0 = {tuple_0: bytes_0, tuple_0: bytes_0, int_0: int_0, tuple_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    float_0 = 1571.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    str_0 = "4U\x0bZ2ePE??|b;?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    bytes_0 = b"\x85hD\xdbV\xcct\xb5_\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    str_0 = "<>%\x0b<QnkE"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    str_0 = "dH_ueuK\x0bH.@Xx@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    bytes_0 = b""
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    str_0 = ""
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    int_0 = 73
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    int_0 = -1330
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    float_0 = -669.706237
    list_0 = [float_0]
    int_0 = -1833
    tuple_0 = (list_0, int_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    bytes_0 = b"\x05i\xaf\xe8!\xe8\xed\x87\x9d\x8d!\x1d#)\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bool_0 = True
    bytes_0 = b"8R"
    set_0 = {bool_0, bool_0, bytes_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    str_0 = "01<E%\t]}w'\"_:p%`irV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    complex_0 = -262.3205 - 214.401228j
    str_0 = "f(~A<N@<?"
    list_0 = []
    tuple_0 = (str_0, list_0, list_0, dict_0)
    tuple_1 = (dict_0, complex_0, bool_0, tuple_0)
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    complex_0 = -1485.63531 + 774.0218j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    float_0 = -2198.87
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    str_0 = "IW bL9lii^:!{)T"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    int_0 = 1815
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    complex_0 = -259.72 - 1974.6j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bytes_0 = b"Uj\xea\xf3\x9e\xb8&CH\xe6\xd9\x08\xd1~F6gL\x80\xcf"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    str_0 = "Y&\x0b4e5X^02. "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    int_0 = -765
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    bytes_0 = b"zrb\xab(\x1c-\x9a\xd9\x99\xc1\xb12\xf24\x96\xf1\x02Z\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    int_0 = 3503
    float_0 = 1489.3
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    float_0 = -190.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    int_0 = 1791
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


def test_case_4506():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4507():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    int_0 = -908
    module_0.get_new_command(int_0, int_0)


def test_case_4509():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4510():
    str_0 = ".*\\=IC<`Y."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    int_0 = -1926
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    bytes_0 = b"\x10G%\xe9R`"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    complex_0 = -2933.9311 - 1620.495692j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    float_0 = -1948.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    int_0 = -2650
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    bytes_0 = b"\x0f\xa6\xfc\xf5\xcc\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    complex_0 = -553.95808 - 223.96707j
    str_0 = "^tG1a\x0c:!I\tm"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    int_0 = -992
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    int_0 = -3999
    module_0.get_new_command(int_0, int_0)


def test_case_4523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bytes_0 = b"\xd6\xf6\x95m.\xfaU\x0e\x1cRA\xae&&\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    str_0 = "m#K&5-G-BcMqsqw6"
    set_0 = {str_0, str_0, str_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    int_0 = -686
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    float_0 = -2358.3
    bool_0 = True
    list_0 = [float_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    bytes_0 = b"\xc6H\xca\x0c\xdd\xf6R\xc1%`\xa7d\x05!\x83\xa88X*\xcf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    int_0 = -2112
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    int_0 = -399
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    complex_0 = 491.28207 - 3683.19279j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    int_0 = 3349
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    float_0 = 458.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    float_0 = -14.0
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    str_0 = "PG\r$'p-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    int_0 = 1723
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    str_0 = ".;F=m#W4bVJI"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    int_0 = 568
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    int_0 = 1085
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    none_type_0 = None
    str_0 = "[\n+\x0c:A%b\x0cvA#zVT[\nd=1"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    float_0 = 1461.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    bytes_0 = b"\n\x81\xb1\xec\xdd\x04\x1a\x1b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    float_0 = -287.5
    bool_0 = False
    dict_0 = {float_0: float_0, float_0: float_0, bool_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    bytes_0 = b'p\xb35\xbd~\xb6\xa2&\x12U\xae\xc31O\x8f"\xf4\x8e'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    bytes_0 = b"\xed\x81\x1b\xfb\xfd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    str_0 = "T\x0c]]AAv{:lg.'T>!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    bool_0 = False
    bool_1 = False
    complex_0 = -925.5 - 1120.5j
    bytes_0 = b"\x0f@\x1fx"
    bool_2 = True
    tuple_0 = (bool_1, complex_0, bytes_0, bool_2)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_4549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4550():
    str_0 = "!j.-s%\x0bhtp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    bool_0 = True
    bytes_0 = b"Tx"
    set_0 = {bool_0, bytes_0, bool_0, bytes_0}
    tuple_0 = (bool_0, bytes_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    bool_0 = False
    int_0 = -1333
    dict_0 = {int_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    tuple_0 = (bool_0, bool_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    float_0 = 318.61
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    float_0 = -265.2597
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    str_0 = "$qoHs+C"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    dict_0 = {bool_0: list_0}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    bytes_0 = b"\\\xa0\x98\r\xb7\xe9BZ~\x80N\xf3\xdb\xdfA\x18Y4\x19"
    list_0 = [bytes_0]
    str_0 = "''t6WcM*0W4T"
    str_1 = ""
    dict_0 = {str_0: list_0, str_0: bytes_0, str_0: list_0, str_1: bytes_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    int_0 = 4236
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    bytes_0 = b"\xd7D\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    bytes_0 = b"R\x86#\x93\xb8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    float_0 = -93.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    complex_0 = 197.1 - 1568.25817j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    complex_0 = 1417 + 1202.81191j
    module_0.match(complex_0, complex_0)


def test_case_4566():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4567():
    float_0 = -675.266
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    float_0 = 39.34
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    int_0 = 857
    list_0 = [int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    bytes_0 = b"\x11\xa7\xdd\xa2<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    int_0 = -1673
    object_0 = module_1.object()
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    str_0 = "'"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    float_0 = -1102.96
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    bytes_0 = b'\x0b\xa7vI\x024\xda"\xef\x1a_\xa2\x03\xac\xdcV'
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    float_0 = 240.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    str_0 = "shOsw:\t^?xp&4="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    float_0 = -365.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    float_0 = 1012.91022
    module_0.match(float_0, float_0)


def test_case_4583():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4584():
    float_0 = 965.07
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    bytes_0 = b"\xb6\xbc\xebbc\x9f\xcb\xdc)\x90\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    str_0 = ": J.shHFqV`e*/0hQ7n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    bytes_0 = b"\x15\xfa\xe5\t\x9e=C\x1b\x07\xb7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    object_0 = module_1.object()
    float_0 = 3680.9
    module_0.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    int_0 = -446
    tuple_0 = (int_0, int_0, int_0)
    dict_0 = {tuple_0: int_0, tuple_0: int_0, int_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    bytes_0 = b"\xe2\xf6%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    bytes_0 = b"\x16R"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    int_0 = 362
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    bytes_0 = b"==\xb6\xc8\x89\xa7\x08\x0bPF\x8f_\xc0"
    set_0 = {bytes_0}
    list_0 = [set_0, set_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    complex_0 = 1734.4464 - 4516j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = 3054
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    int_0 = 2372
    module_0.get_new_command(int_0, int_0)


def test_case_4598():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4599():
    bytes_0 = b".Rv_ \xe3*\xa3\xdcA\r\x1b\x92"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bytes_0 = b"\xb3s\x03K/\x87\x9a\xa7\xf9\xee\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    int_0 = 4933
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    dict_0 = {}
    list_0 = [dict_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    complex_0 = -844.8107 - 247.846825j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    str_0 = "h.y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    int_0 = 1198
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    str_0 = ";J\nL$CRos"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    str_0 = 'rV9}/Rt1}?z"O'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    int_0 = 1069
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, tuple_0: bool_0}
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: dict_0}
    none_type_0 = None
    module_0.match(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bytes_0 = b"\x8b\x90\t.6\xde\xaf\x84"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    bytes_0 = b"\xd2\xc4\xb0\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    none_type_0 = None
    str_0 = "\\taxPmBper})1"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    bytes_0 = b"t\x14%\x1d,\x06\x83\x89w\xf2F^-\x87\x9b\x93\xb3R\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    str_0 = "vsnTmV`}t\nnD"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    int_0 = -343
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    float_0 = 1066.148943
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    bool_0 = False
    object_0 = module_1.object()
    str_0 = "Q=[Y^zf5_.'ELdO"
    dict_0 = {bool_0: bool_0, str_0: bool_0, object_0: bool_0, str_0: str_0}
    bytes_0 = b"q\xf8\x07\xf6\\n%5Z\xea\xf4=6\xaa"
    tuple_0 = (object_0, str_0, dict_0, bytes_0)
    tuple_1 = (bool_0, tuple_0, tuple_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    bytes_0 = b"9\xfe\x81\x89\xf3\x06\xa9\xeca\t+!\xbd"
    int_0 = 1303
    bytes_1 = b"z\xe9\xb6\x02\xb8\x89\x82u\x91\xb1"
    set_0 = {bytes_0, bytes_1, int_0}
    tuple_0 = (bytes_0, int_0, bytes_1, set_0)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    bool_0 = True
    str_0 = ")V.KKr?E\\?_?"
    tuple_0 = (bool_0, str_0)
    list_0 = [tuple_0]
    module_0.match(list_0, bool_0)


def test_case_4623():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4624():
    str_0 = "I,z7+1w|"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    bytes_0 = b"U\x89\x06m\xa4hU\xf83\x1a\x17\x151b\xfc\xd4\xe3\xf3\xe1\xf4"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    str_0 = "A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    bytes_0 = b"\xb0\x8d4|%R\xfb\x8a\x97s\xc8G22\xa2\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    int_0 = 2130
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    int_0 = -2201
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    int_0 = 995
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    float_0 = 2306.8348
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    int_0 = -842
    float_0 = 2137.879132
    module_0.get_new_command(int_0, float_0)


def test_case_4634():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4635():
    int_0 = -87
    int_1 = -2929
    list_0 = [int_0, int_0, int_1, int_0]
    str_0 = "+(0q8 2oUsOfz%%"
    dict_0 = {str_0: int_1, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    str_0 = "I:u{Muf!3~X\\KvJa|"
    tuple_0 = (str_0,)
    set_0 = {str_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    str_0 = "!nUfU1\tZT2f"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    str_0 = "`{l?\n9d\toKc=%~0.Tz\t"
    module_0.get_new_command(str_0, str_0)


def test_case_4639():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4640():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_4641():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4642():
    int_0 = -960
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    str_0 = "oQt@qS9]_==~\x0b.mgWxD}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    int_0 = -1945
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    str_0 = "FqM`\\*uF<ZXF\ryp$Hf"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    bytes_0 = b"\xf3I\x83,\xe5\x9f\xb1\xbf\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    str_0 = "Dfn65dt;^60[o=+^.&"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    bytes_0 = b'E\xd9h4i"\xdd#P%\xe8\x87\xb4\xd6\x1c\x04\xb3'
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bytes_0 = b"\x8e\xc0\xe3\xf6a\xc4\x10"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    bool_0 = False
    bytes_0 = b"(law\x17H"
    bytes_1 = b""
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bytes_0: bytes_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_4651():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4652():
    float_0 = -4975.986744
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    str_0 = "-Whe]td:9q!g\x0c0&KH"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    complex_0 = 870.1 + 928.899j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4656():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4657():
    bytes_0 = b"\xf9\xb6\xe3`\xc4PZ1\xc0_\t@.\xe3\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    int_0 = -2095
    bytes_0 = b"\x8fm!e"
    tuple_0 = (int_0, bytes_0)
    set_0 = {tuple_0, int_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    bytes_0 = b"uK\xe2\x98\x90Qw>\xa3\x8e\x16"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4661():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4662():
    str_0 = "y9'gC?\\c\n+xIJd@j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    int_0 = -4473
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    bytes_0 = b"U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    bytes_0 = b"\xe6\xa5\x05\x9c\xb9y@:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    str_0 = "dM;@e$psi"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


def test_case_4667():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4668():
    str_0 = "uSPZAgK`|4Fyx99"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    complex_0 = 2712.342204 - 226.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    bytes_0 = b"wQ\xc4m\xf0\xe4\xcb*\xb8\xda+^7\xb258\xb3P"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4671():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4672():
    float_0 = 2062.89
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    str_0 = "*pU]t`gp1@q8Vezl{;$"
    set_0 = set()
    list_0 = [str_0, set_0]
    tuple_0 = (str_0, str_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    str_0 = "jtYKbCG'DGb"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    float_0 = 1389.2366
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    list_0 = []
    none_type_0 = None
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    int_0 = 152
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    complex_0 = 351.7575 - 2158.1763j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    bytes_0 = b"\xc6.\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    bool_0 = False
    bytes_0 = b"\xc8&E\x9e\xda\xf4v\xf9\\\xb1Sd\x94\xb9\xcb\\a^\x80"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    bytes_0 = b"&\xa3P\x91\xc3Qe\xd51\x96\x001\xe8\x91\xdbx\x1b!mD"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    int_0 = -1898
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    str_0 = "!/yn<\x0c,j;59Q\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    bytes_0 = b""
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bool_0}
    str_0 = "7/6ut5T+>j\x0c8"
    module_0.get_new_command(set_0, str_0)


def test_case_4686():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4687():
    int_0 = -495
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    float_0 = 2308.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    str_0 = "k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    bytes_0 = b"\xd2}0\xb1\xf3H\xc9b6\x9e\xc7\x9d'\x18\xd5:\xcf\xc6"
    str_0 = '4="Ytc\x0bSuxi)FS6y0'
    tuple_0 = (bytes_0, str_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    none_type_0 = None
    str_0 = "\x0b\rzWqz/i8\n."
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, tuple_0: tuple_0, str_0: tuple_0, none_type_0: str_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    int_0 = 1608
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    float_0 = -2230.02
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    float_0 = 461.51293
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    float_0 = -2828.137603
    module_0.match(float_0, float_0)


def test_case_4696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4697():
    float_0 = 226.5329
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    str_0 = "=q/ $z>FeNS\n+fB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    str_0 = "b^6q4X$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    complex_0 = 1332.4416 + 122.81554j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    int_0 = 1342
    int_1 = 1686
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    int_0 = -583
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    float_0 = 219.1668
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    int_0 = -2125
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    float_0 = 3499.0
    dict_0 = {}
    list_0 = [float_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    bytes_0 = b"X\xab\\\x11\xc6`\xab\t7\x8c\x86[C\x18\x8a~B\x80\xe8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    complex_0 = 3130 - 570.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    float_0 = 1978.24842
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    int_0 = -1566
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    int_0 = 355
    list_0 = [int_0, int_0, int_0, int_0]
    int_1 = 269
    bool_0 = True
    tuple_0 = (list_0, int_1, int_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    int_0 = -1760
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    int_0 = 109
    tuple_0 = (int_0, int_0, int_0, int_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


def test_case_4715():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4716():
    bytes_0 = b"\xee\xc8O5q\xf0'1C,\xe1q\xc3yb/\x93K"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bytes_0 = b"\xe0\x81Tr\xc9\xef\xaf\x89hv\x97\xc3@\xefW\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    int_0 = -1065
    str_0 = '.Z"d-'
    dict_0 = {int_0: int_0, int_0: int_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    int_0 = -979
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    int_0 = 1882
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    str_0 = "'OjhUb40x\ts\niIV(="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    str_0 = "nb-7E{YV5=a%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    bytes_0 = b"\x80\xeb\x0bv\x81\xc4\x94G\x08\x96"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    str_0 = "9v"
    float_0 = 2307.91063
    tuple_0 = (str_0, float_0)
    dict_0 = {tuple_0: float_0, float_0: float_0, float_0: tuple_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    float_0 = -525.0606
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    str_0 = 'EDOZ":rj'
    module_0.match(str_0, str_0)


def test_case_4731():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4732():
    bytes_0 = b"\xcd\xf5\xeb\x8c\x8a+)\xcdo`\x80\xa8\x17\xf1\xc7\xe8\xa8\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    bool_2 = True
    tuple_0 = (bool_0, bool_1, dict_0, bool_2)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    str_0 = "\n.V`$*]z+|xE~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    int_0 = 4133
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    str_0 = "QOD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    str_0 = '0l"5@uj]czsM\n!'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    int_0 = 1189
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    str_0 = "h5Ah2e|C7.ivk7"
    str_1 = ">U({33%P9"
    list_0 = [str_1, str_1, str_0]
    dict_0 = {str_0: str_0, str_1: list_0, str_0: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    str_0 = "l.gilPTMy-5,$Czc"
    set_0 = {str_0, str_0, str_0, str_0}
    complex_0 = -1597.7 - 1712j
    list_0 = []
    tuple_0 = (set_0, complex_0, list_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    str_0 = ":KFM |,P"
    str_1 = "\\%rFko\nuX5l^4o74/u\x0c&"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    int_0 = 2432
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    int_0 = -1561
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    bytes_0 = b"\x18"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    int_0 = 3297
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    float_0 = -521.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    dict_0 = {}
    set_0 = set()
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    bytes_0 = b"\xdd\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    int_0 = 300
    set_0 = {int_0}
    list_0 = [set_0, int_0, int_0, set_0]
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    bytes_0 = b"\x10\x11\xd5"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    float_0 = -78.2527
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    int_0 = -96
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    int_0 = -1525
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    str_0 = "Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    int_0 = 1237
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    int_0 = 3903
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    str_0 = " \\sRM-8nkR6\x0bZOQQ\\h"
    module_0.match(str_0, str_0)


def test_case_4759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4760():
    bytes_0 = b"B\x18\xf6\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bytes_0 = b"\x86ycr"
    module_0.match(bytes_0, bytes_0)


def test_case_4762():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4763():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    int_0 = -2958
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    bytes_0 = b"[\xc9\xb5\xdbN2\xdc"
    object_0 = module_1.object()
    set_0 = {bytes_0, object_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_4768():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4769():
    float_0 = -2596.52955
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    bytes_0 = b"\xc0F\xe5\x99\x93\\\xf5\x88?p\xb7\x9d|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    float_0 = -2129.046985
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    bytes_0 = b"\xad\x175\x13\x9fX\xca\xf7co-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    int_0 = 2604
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    complex_0 = -123 - 309.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    int_0 = 3769
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    bytes_0 = b"F\xc85\x16\xb4\xd7:\x8f\xa5\x85M\x0f\x1b\xee|\xfd\x0f"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = False
    list_1 = [list_0, bytes_0, bool_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    float_0 = 490.27
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    bytes_0 = b"\x9fI\xb6[Uw V"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0]
    object_0 = module_1.object()
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bytes_0 = b"l\x94\xed\x8bh("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bool_0 = True
    str_0 = "*_O^q"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    bytes_0 = b"i\tG\xe5\xa0\xa5\xc2\xff\xabD"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    float_0 = 1025.26479
    int_0 = -488
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    float_0 = -347.1
    int_0 = 3091
    dict_0 = {float_0: float_0}
    tuple_0 = (float_0, int_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    str_0 = "K9YL}wBF\"bm\\'sA"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    bytes_0 = b"\xf4\x03"
    bytes_1 = b"\xde\xb6\xee\x1f\xa0r\xf4\xc8S\xf3\xe1\xc5u\x9d\xdf\xb9\x0c\xb2\x81"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    str_0 = "8O&E=~(X\t0mO'r=|\\K6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    str_0 = "VbWL;#V|7'[3'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    bytes_0 = b"\xe0\xfa\x11|W\x8f\xff\x1c\x81;F\xf2\x14\x06\n\x83[\x13\xb0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4793():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    str_0 = "k<p2l4#"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    tuple_0 = (object_0, list_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    complex_0 = 343 - 1352.521601j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    int_0 = -1424
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    int_0 = -4036
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    str_0 = "tqC?%\nQw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    str_0 = "RS"
    str_1 = "*^L"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    complex_0 = -1333.338344 + 1707.581j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    int_0 = 226
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    int_0 = 1871
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    str_0 = 'SR$"^5V7'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    bytes_0 = b"\xce\n\xf4~\x19N`\xef\xef\xb8\x80\xc0G\xac\xdf\xa5)\xc0\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    str_0 = "1x0Dd!;'p"
    str_1 = "Bc3Ao( Ob"
    str_2 = "k!*zEc\t\x0cw<jr"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    str_0 = "=,t"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    bytes_0 = b"Fu\xdd"
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, object_0: bytes_0, bool_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    bytes_0 = b"\xaa\xe6\x87\x03\xbe\xc5Y\xca\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    int_0 = -3671
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    int_0 = -309
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    str_0 = "#u"
    complex_0 = 2.172809 + 3126j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    float_0 = 1962.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    str_0 = '!~+J?m"[Sq\x0cj'
    str_1 = "UO0:DH;5?S"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_1: str_1}
    module_1.object(**dict_0)


def test_case_4815():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4816():
    str_0 = "g8V!yh2%DZZje)H?*B"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4817():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4818():
    none_type_0 = None
    float_0 = 4041.63
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    float_0 = 900.9518
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    bytes_0 = b"]j\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    str_0 = ";tS$K7w$8\td8q0GHO-t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    bytes_0 = b""
    tuple_0 = (bytes_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bytes_0 = b"t\xb9!\x9e\x13#X2\xe9\xea\xdf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    int_0 = -2576
    float_0 = -5774.790927
    dict_0 = {int_0: int_0, int_0: float_0}
    list_0 = [float_0]
    str_0 = "&~D\nO_Ln_,0"
    float_1 = -13.0
    tuple_0 = (dict_0, list_0, str_0, float_1)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    float_0 = 402.535
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    int_0 = 1417
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    float_0 = 2129.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    float_0 = 1697.07
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    str_0 = "].M{L3_i{m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    bytes_0 = b"\xfc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_4834():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4835():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    int_0 = 888
    tuple_0 = (set_0, object_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    float_0 = 1091.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    bytes_0 = b"B"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    bool_0 = True
    str_0 = '4\to)qJO\\\r^")\x0b'
    str_1 = "RT\t<eio+/S/lI)DePE{,"
    dict_0 = {str_0: bool_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    bool_0 = True
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    str_0 = "\tKpzhV#)SKho3<8[hW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    bytes_0 = b"\xa3\xd2\x17C\x965Qt\xb2_\xcc\x95L!\xc3\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4842():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4843():
    float_0 = 1979.836341
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    str_0 = "<Sl|/Zv<Kz\\C8)j_~\r_"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    str_0 = "=?%k[lFD"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    int_0 = 234
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    int_0 = 777
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    bytes_0 = b"Lm\xfaL\xb9\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    int_0 = 3485
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    bool_0 = False
    int_0 = -1687
    set_0 = {bool_0, int_0, int_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    str_0 = "g.\nYD},X kr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    int_0 = -2469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    bytes_0 = b"\xa2\x10\xbdCw\xb8/\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    bytes_0 = b"\t\x8b<\xd4d\x08\xc9\x90X\xfc^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    float_0 = 1060.908
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    int_0 = 2790
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    str_0 = "Vebq\r[KwtIzw|YA"
    complex_0 = 734 - 1322j
    list_0 = [str_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    bytes_0 = b"l\x86\x8bvI\x06x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    str_0 = "bC.#t"
    int_0 = 2131
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    str_0 = "j_9vg,$+K=@uzE"
    module_0.match(str_0, str_0)


def test_case_4861():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4862():
    float_0 = 747.86
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    float_0 = 1128.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    str_0 = 'yS}8p%\\c(f"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    float_0 = 2113.9
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    int_0 = -4343
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    bytes_0 = b"h\xf9\x07\x1dE\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    str_0 = "yR R@(\tC"
    float_0 = -1994.0
    tuple_0 = (str_0, float_0, float_0)
    dict_0 = {tuple_0: str_0, float_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    bool_0 = False
    bytes_0 = b"Fsg\xce_t\xa5:\xc7\x98c"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    bytes_0 = b"3\xeah\xec\xc0/\xad\xa7}\x8dr\x0f`\xfa\xbd\xc1Z\x8fX\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    str_0 = "ZdX{F]y`0l}`t#n)}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    bytes_0 = b"\xa0\xefr\x07\x84\xf0\xa9\xb0\xb3\xa2{\x0f\x8a\xf7\x04\xa49\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    float_0 = 126.0
    float_1 = -1353.4404
    set_0 = {float_0, float_0, float_1, float_1}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    bytes_0 = b"\xc5\xd3\x9d\xa0q\xcd\x07\x83\x19S"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    str_0 = "yrin"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    str_0 = "1:&\x0bnTvZ%U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    bytes_0 = b"S\x82\x8a\\al.\x91T\xe3\x1e\x10a\x03\xda\x99#\xa8Q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    complex_0 = 4305.5783 + 713.88j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    str_0 = "Kt5g7mDu]8{.dBn:jt"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_4884():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4885():
    bytes_0 = b"\xc6x.L\xd1T&\xdc,\xd2\xa9\xdc\xed\xdc\xc2\x15\xfc\x7fF\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    str_0 = "6yK"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    bytes_0 = b"\xe0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    bytes_0 = b"\xa0S.?\x85\xd2\xf6\xb0\xdeS"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    int_0 = -841
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4891():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4892():
    str_0 = "H7;\x0bcOJB4x@mI\x0c]#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    bool_0 = True
    str_0 = "S<|0x1h[j93_Pz"
    tuple_0 = (bool_0, str_0)
    bytes_0 = b"\x86\xa4%\xa4"
    tuple_1 = (tuple_0, bytes_0, bool_0, tuple_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    int_0 = 2426
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    bytes_0 = b"\xb5\x96\xbb\xc8%\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    set_0 = set()
    set_1 = set()
    module_0.match(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    float_0 = 1025.1459
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    bytes_0 = b"\xe8\tg\x1e\x97\x900&{EH\xd7#\xb7\x19\xbc\x16\xce\xf0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    dict_1 = {bytes_0: dict_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    str_0 = 'VNnI>PP9"/\x0cb'
    tuple_0 = (str_0,)
    bool_0 = False
    dict_0 = {tuple_0: str_0, str_0: str_0, bool_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    bytes_0 = b"\x15&\x92\x00-UA\xc6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    int_0 = 2543
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    str_0 = "i3,>iCw#N<boisM~V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    str_0 = "\x0bLm:=vCh<b(,[+N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    complex_0 = 1011.8853 + 834.41j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bool_1 = False
    module_0.get_new_command(set_0, bool_1)


def test_case_4907():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4908():
    bytes_0 = b"\xbboeU\x12\x97\xa2\xe7\xd9:*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    bytes_0 = b"\x81\xed\xa3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    float_0 = 1229.655
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    int_0 = -1089
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    float_0 = 1713.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    float_0 = 30.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    int_0 = 1630
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    str_0 = "HnPl\nz(/''P'SYIdR"
    set_0 = {str_0, str_0}
    dict_0 = {str_0: str_0, str_0: str_0, str_0: set_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    bytes_0 = b"\x95`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    int_0 = -2538
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    int_0 = -779
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    bytes_0 = b"\xba1\x15V\xa3\x1b"
    bytes_1 = b"|\xe23\xa8\xd0\x92b\xb4\xd1\x01\xa5"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    str_0 = "?.8t)?J-\r>0o"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    object_0 = module_1.object()
    bool_0 = False
    bytes_0 = b"\xaf-\xf2\xaa\x96\x8c\xb1b\xbb\x07\x03"
    tuple_0 = (bool_0, bytes_0)
    dict_0 = {object_0: object_0, object_0: object_0, object_0: tuple_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    str_0 = 'I&%+rcU[B\\"E'
    module_0.get_new_command(str_0, str_0)


def test_case_4923():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4924():
    complex_0 = -1037.634227 - 381j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    bytes_0 = b"\x01(V\xf0R\x9aW\xa5\x16\x84i\x9dG\xa3t\xed"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    str_0 = "Oj=)ZSm7eS|xv`=^[="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    int_0 = 328
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    int_0 = 1313
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    none_type_0 = None
    bytes_0 = b"\xdb\x07"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    float_0 = 2310.301
    list_0 = []
    dict_0 = {float_0: float_0, float_0: float_0, float_0: list_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    str_0 = "-[FB@'la=-t&2S\rS"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    int_0 = -1446
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bytes_0 = b'\x08Z$o"\xda\xd8\x8e#~\x8e{>\xbb\x94\xbe\xe5|*'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    bytes_0 = b"\xc9\xd7\x84\x93\x98"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    str_0 = "0c\r)."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    int_0 = 715
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    float_0 = 356.884
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    float_0 = 2530.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    bytes_0 = b"mz>\xac\xd2\x07\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    str_0 = "_5G27"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    float_0 = -96.44144
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bytes_0 = b"\xf9\x06m|_\xe8\xd3\xc9_\x9d\xa3\xa4\xe4"
    int_0 = 895
    tuple_0 = (bytes_0, int_0)
    int_1 = 1892
    tuple_1 = (tuple_0, int_1)
    bytes_1 = b"\x86R\xd8"
    tuple_2 = (bytes_1,)
    list_0 = [tuple_2]
    tuple_3 = (bytes_0, tuple_1, list_0)
    module_0.get_new_command(tuple_3, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    complex_0 = -3549 - 3546j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    int_0 = 2356
    bytes_0 = b"}\xb9A\x1c\xd3\xc3\xe1\xa7\xd0\x875\xe0"
    dict_0 = {int_0: int_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    bytes_0 = b"o))(\xb8\x18\xa7\x98\t'\xc9hI\x91\x0c\xd2_f\xe9"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    bytes_0 = b"\xea\x1fO\x1ad\xfa_\x8e=\x87\x10\xf6\x17\xaei\xcc\x19"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bytes_0 = b"\xef\x16\xa4\xe6t\x18\x90\xe7\x15"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    int_0 = 2384
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    int_0 = -3658
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    int_0 = -1551
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = "\\7dZ{\x0bW7R&IH!eEn&l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    int_0 = -127
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    int_0 = -2932
    complex_0 = 269.38701 + 1965.18j
    complex_1 = 237.1213 - 2515j
    tuple_0 = (int_0, complex_0, complex_1)
    tuple_1 = (tuple_0,)
    object_0 = module_1.object()
    set_0 = {object_0, int_0, object_0, int_0}
    list_0 = [int_0, set_0, tuple_1]
    tuple_2 = (int_0, set_0, list_0)
    tuple_3 = (int_0, tuple_1, tuple_2)
    bool_0 = True
    module_0.match(tuple_3, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    float_0 = -1564.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    bytes_0 = b"\xe9PO\xbc\xc0\xc8\x87s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    str_0 = "#s\x0c!*x`yo[U"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    bytes_0 = b"\x8d\x19[e\xdfS\x1b\x855'\xb3N~rz\xe8\xe5A5\xba"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    int_0 = -1019
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0, set_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    bytes_0 = b"\xb3d\xe4Q\xb9\x91\x88\x05A\xbeX\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    bytes_0 = b"\x8e\xb4\x9f\x14\xa8\xe5*\xcfw\xbd/&}\x06\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    float_0 = -1454.769017
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    complex_0 = -921.88 - 1048.94308j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "&\nj>m',![n"
    tuple_0 = (bool_0, list_0, str_0, str_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    str_0 = "\x0cL3\r6W"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    int_0 = -888
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    int_0 = -1325
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    float_0 = -2448.6181
    str_0 = "jsR."
    dict_0 = {float_0: float_0, str_0: float_0, str_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    int_0 = 3251
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    complex_0 = -2251.358 + 1559.5245j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    complex_0 = -2097.708452 + 3703.221j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    bytes_0 = b"<\xf9\xf3\x05GV\xac\xca\x87\xb5\xd4Sa{\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    int_0 = -1015
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    int_0 = 664
    bytes_0 = b"\xb9"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    int_0 = 2323
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    int_0 = -34
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    str_0 = "1L\x0b23"
    str_1 = "~^NCARB.Gs7"
    complex_0 = 509.701 + 1191.9021j
    str_2 = "Ju}VA\naG%~|`=e"
    dict_0 = {str_0: str_0, str_1: complex_0, str_2: complex_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    complex_0 = 1070 - 2451.461896j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    int_0 = -129
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    str_0 = "~\tN%4t+c\x0b76"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    int_0 = 1425
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    float_0 = -2666.749
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    int_0 = -3392
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    str_0 = 'ZpmaAQLKwrQK,|d7ow"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    bytes_0 = b"j\xf8([7\xb3\x93ji\xc30\x8f\xfa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    complex_0 = -2115.63794 - 1602.92j
    str_0 = "fOe:P8"
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    complex_0 = -426.51962 + 2149.992j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    dict_0 = {}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    int_0 = 169
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    none_type_0 = None
    set_0 = set()
    int_0 = 3219
    tuple_0 = (set_0, int_0, int_0, int_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    str_0 = "QrR7F%mlxr\rpj~"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_5002():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5003():
    int_0 = 1679
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    str_0 = '6"r\x0b\r6'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    int_0 = -3373
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    float_0 = 1128.53435
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    float_0 = 298.1648
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    int_0 = 1498
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    int_0 = -916
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    str_0 = "+(c=Us;\x0cX"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    none_type_0 = None
    int_0 = -735
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    str_0 = "4<E"
    bytes_0 = b"\ny\xc86"
    int_0 = -348
    tuple_0 = (str_0, int_0, int_0)
    tuple_1 = (bytes_0, str_0, tuple_0)
    dict_0 = {str_0: tuple_1, str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    str_0 = "ZbYs+9mu=~Z\n\rV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    bool_0 = True
    int_0 = 1287
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    int_0 = -102
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    int_0 = -384
    module_0.get_new_command(int_0, int_0)


def test_case_5021():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5022():
    str_0 = "N_uz6>3\r\nPU9XH)gK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    str_0 = "gTi*8yD_=!p\\5w\x0bD"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5025():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    float_0 = -755.4305
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    int_0 = 4565
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    str_0 = "v&+Gq@"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    int_0 = -2424
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5031():
    pass


def test_case_5032():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bytes_0 = b"\xc7&\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    bytes_0 = b"\x19\x95\x86\xd6\x85\x15{E\xac\xb3\xab\x00\xcc\x84"
    float_0 = -42.61
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    complex_0 = 2099.80359 - 227.5j
    dict_0 = {}
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    bool_0 = False
    str_0 = "F+OGSG(h{ pV"
    dict_0 = {bool_0: bool_0, str_0: str_0, str_0: bool_0, str_0: bool_0}
    list_0 = [dict_0, str_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    complex_0 = 2377.97 - 1299.62j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    none_type_0 = None
    int_0 = -77
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bytes_0 = b"d$\xf9\xae\xe1\x13P\xa8\x80\x93\xec{E\xa1;\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    bytes_0 = b"\xcdE\x9e\xa1\x9d9\x17\xda\x83\xe8\x0b\xde\xb5s\x19\xa3"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    complex_0 = 660.03 + 1886.61395j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = "9m&O0"
    list_0 = [str_0, bool_0, set_0]
    tuple_0 = (bool_0, set_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    str_0 = "i?\x0cFwTm}^\x0bgL"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    float_0 = 2914.564086
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    bool_0 = False
    int_0 = -65
    list_0 = [bool_0, int_0, int_0, bool_0]
    bool_1 = False
    tuple_0 = (bool_0, list_0, bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    str_0 = 'ikGV"4\t\r}'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    bytes_0 = b"yN\x16HE\xf6\xbe\xf5\xf4\x81"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    bytes_0 = b"bV\x02\xc9\xf2NQEC\x0f@?\x95\xbce\x1f\xde\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


def test_case_5051():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5052():
    int_0 = 1696
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    bytes_0 = b"\xae\xaa\x0b\xcd\xf8~\t\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    str_0 = '?j@"p?~Z.Jci>1#ZY'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    int_0 = 1639
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    bytes_0 = b"e\x88\xe6\xef"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    float_0 = -794.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    str_0 = "g6!iP%@N4k4gOQqR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    bytes_0 = b"\xd9{-\xbb9*\x93\x94\x16\t\xeeZ\x06\x821\x1f\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    bytes_0 = b"\xbd\x8e\xe4\x96\xe6\xa6\xb38\xd2\x87?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    str_0 = "yU\nK, yXM4\x0bi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bytes_0 = b"\xa5\xa5YHG\xdc\x80L\x14\xad\x88\x8b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    int_0 = -1019
    list_0 = [int_0]
    dict_0 = {}
    tuple_0 = (list_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    bytes_0 = b"\xb1Q\xe8\xb3D+\x17\xff{\x80\xf2F\x85\x87\xe4\x89\xf9 \xd7"
    module_0.match(bytes_0, bytes_0)


def test_case_5067():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5068():
    bytes_0 = b"\xa5m'c\xe6\xbac\xc0\xb7\xbf7\x91\x0c\xf9\xa0x\x80\xe54"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    tuple_0 = (dict_0, dict_0, list_0)
    bytes_0 = b"\x88.\r\xbb\xd4p\xd0\xf3~"
    tuple_1 = (tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    str_0 = 'YNy<} m%%eJuu"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    int_0 = -493
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    float_0 = -2199.90309
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    tuple_0 = ()
    int_0 = 1960
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    int_0 = 771
    list_0 = [int_0, int_0]
    list_1 = [int_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    bytes_0 = b"\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    float_0 = -2883.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    int_0 = -764
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    bytes_0 = b"\xa0r\xb9\x0b]ri\x16"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    int_0 = -856
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    bytes_0 = b"\x17\x0b\x82["
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5081():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5082():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    int_0 = -2804
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    int_0 = -2297
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    complex_0 = 2279.06 - 2349.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    set_0 = set()
    list_0 = [set_0]
    list_1 = [list_0, set_0]
    module_0.get_new_command(list_1, set_0)


def test_case_5087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5088():
    bytes_0 = b"\xff\xf13\xa6m\xc6\xe7E\x97\xe8*r"
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    bytes_0 = b"\xce1\xea.\x85\x94kD\x8eU\x08P\x9c\xf6\xc3l\xd5\x02<"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5090():
    pass


def test_case_5091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5092():
    str_0 = "\t]r\thzk\x0c[94<*cu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    bool_0 = True
    bytes_0 = b"\x1a\x814\xde\xad\xe0\xb3 \x1eH\xa3\xaf^\x1b\xfb\x16\x80?\x8bL"
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    int_0 = -1080
    bool_0 = False
    module_0.match(int_0, bool_0)


def test_case_5095():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5096():
    str_0 = "\x0bP!l~3wuIF\n,h"
    set_0 = {str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    str_0 = "1'!\r~mWH'w/+LG`"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    int_0 = 1682
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    int_0 = -623
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    str_0 = "I'"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    str_0 = ""
    bytes_0 = b"V\x8f\x82\xa8\xbbES.\xb8\x886\xac\xf6\xe0T\xc5\x81\xe2\x95B"
    dict_0 = {bytes_0: str_0, bytes_0: bytes_0, bytes_0: str_0}
    tuple_0 = (bytes_0, dict_0, bytes_0)
    tuple_1 = (str_0, tuple_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    int_0 = 233
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    bytes_0 = b"\xfd\xf5U\xedQ\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    str_0 = ">!w:4auj&p"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    bytes_0 = b"\xc5yDD\xc2J}\xf8x\xb4\x9a\x01Y4"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    float_0 = -1009.875
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    int_0 = -1278
    module_0.match(int_0, int_0)


def test_case_5110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_5112():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5113():
    int_0 = 221
    dict_0 = {}
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    tuple_1 = (int_0, dict_0, tuple_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    float_0 = -2443.0277
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    bytes_0 = b"\\\x9f\xad[\xa3\x02\x07l\xeaY;\x1e\xbcC\xca\xb8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    int_0 = 1221
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    str_0 = ";Zt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    int_0 = -2524
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    bytes_0 = b"_#=\xc3\x9b\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    bytes_0 = b"p\r\xfd}\xf6\x81\xda\xaf\xcb?i\xe2c+\xeb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    float_0 = -1731.1005
    float_1 = 2459.3
    bool_0 = False
    tuple_0 = (float_0, float_1, float_1, bool_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bytes_0 = b"7\x95\xfa\xf37+(\xf5\x99T"
    bytes_1 = b"\x05\xa5a\xa0$\xfc\x8d\xd0oH}\xe7"
    list_0 = [bytes_0, bytes_1, bytes_1, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    bytes_0 = b"\x16\xde\xe5\x81\xee\x96"
    bytes_1 = b"\xffo\xb9"
    bytes_2 = b"Y\x0e\x0b\xa3\x8dC)\xce"
    tuple_0 = (bytes_0, bytes_0, bytes_1, bytes_2)
    float_0 = 597.721
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    bytes_0 = b"\xb0\xb2`"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    str_0 = "~[+W`h{w7Mi\t!`\x0b`=_t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    int_0 = 231
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    bytes_0 = b"\xda\x92}\x8d\xd4[\x06\x12\xd4\x02F\x91\xf9\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    str_0 = ")*nGp9R^,8H%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    int_0 = -2601
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    complex_0 = -2404.64 - 3195.33j
    module_0.match(complex_0, complex_0)


def test_case_5134():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5135():
    float_0 = 1667.70768
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    int_0 = -660
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    int_0 = 802
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


def test_case_5140():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5141():
    float_0 = -800.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    int_0 = 2658
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    bytes_0 = b"\x15\xf9}!H"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    str_0 = 'R"0dpiC]o,tKJoVVNB'
    int_0 = 3497
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    float_0 = -1730.33851
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    bytes_0 = b"?\xda\xe3\x1b\x04\xa8\xb71\xb6jP\xd9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    str_0 = "&'{7hX$8[@Q"
    module_0.match(str_0, str_0)


def test_case_5151():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5152():
    int_0 = -2227
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    str_0 = ""
    str_1 = "VR"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    int_0 = -3459
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    bytes_0 = b"\x90T\xe3o\x8bl \xe9\xed\xcd\x00\xe6\x88\xe3\x82\x98\xed\xd2\x00"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_0, bool_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bytes_0 = b"]\xac"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    bytes_0 = b" \x9b\xcb\xf3k\x18"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    str_0 = "u|YU8DwF6\r\tn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    bytes_0 = b"*\xcdL\xb4D"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    int_0 = 3476
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    bytes_0 = b";\xb9\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    float_0 = 1572.38
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    bytes_0 = b"("
    list_0 = []
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    bool_0 = True
    bytes_0 = b"\xa9\xd3\x03\xbeh-\x92\xeeE"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    bytes_0 = b"h\xdadVK\x06\x84\x84'i$&\xaf\x1b\"\xa6\xff\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    str_0 = "vUX"
    str_1 = '.u"0h;A6\x0c'
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    float_0 = 1139.6374
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_5172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5173():
    complex_0 = 336 - 2035.415661j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    str_0 = "'P]R\nff50"
    int_0 = -1338
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    int_0 = 166
    module_0.match(int_0, int_0)


def test_case_5176():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5177():
    str_0 = "q!CX>/m/u`G,}JIe;||"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    str_0 = "|(asSNjo%r\r^krv\n"
    list_0 = []
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    bytes_0 = b"\x1cg\xc3|J-0g~\xb4\xb1\xc8i\xbd\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    int_0 = 554
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    complex_0 = 93.56 + 765j
    module_1.object(*complex_0, **complex_0)


def test_case_5182():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    bytes_0 = b"\x96\x19\xfa\xbf\xc0i\xd0\xe6\x0co\xb2zu\xad"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    int_0 = 3346
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    int_0 = 133
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    str_0 = "[m:Tr*8Mq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    bytes_0 = b"\xcb(\x92\xae\xce\x15)jZ\x03\x08\x90uxab"
    list_0 = []
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    int_0 = -2100
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    object_0 = module_1.object()
    str_0 = "x\tb}lf\x0b*rOx\r)n@#7\x0b5 "
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    int_0 = -3042
    str_0 = "@)/%koc23*B6KdNQsjtk"
    list_0 = [int_0]
    bool_0 = False
    tuple_0 = (int_0, str_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    int_0 = -988
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    bytes_0 = b"\xd6p\xf2{\xc9{\xbfc\x82\xeb\xb5\x9f\xc0j\xd9\x17"
    str_0 = "Ra}Jm"
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bytes_0, str_0, bool_0, tuple_0)
    list_0 = [tuple_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    float_0 = -54.48
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    int_0 = -3104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    float_0 = 4479.2
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


def test_case_5198():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5199():
    int_0 = 4079
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    float_0 = -1488.558352
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bytes_0 = b"\xaa\xde@\xd9M\xe9\xcc\xe2(\xc6"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    str_0 = "&*R"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    float_0 = 1644.769
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    int_0 = 98
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    str_0 = ",4\rTJ\x0c\\3\n1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    int_0 = 1997
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    str_0 = "wa2HNGy\rs\\|Xg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    int_0 = 2212
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    bytes_0 = b"\xff\xa83"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    str_0 = "qdc#\rc~Yu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    bytes_0 = b"\xd0^\x13"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    str_0 = '1\rt7XU3"q;Cr{5_d'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    bytes_0 = b"\xf3M\xa1L{\x1c\xe01G\xe9\x92\xeb\x96\xe3\x94\xe1\x92\x91"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    int_0 = 1924
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    bytes_0 = b"\xfd2\xfe\xb0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    none_type_0 = None
    tuple_0 = ()
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        tuple_0: tuple_0,
        tuple_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    bytes_0 = b"\x12B"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    bytes_0 = b"\xd2\xb1)\xbd\x987$f\x80\xa49"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    bytes_0 = b"\x1c\xeb\xffJ\x8b\xc0\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    str_0 = '"'
    bool_0 = False
    bytes_0 = b"\x88\xba\x02\xce\x04\x1f\x97UK"
    tuple_0 = (str_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    int_0 = 4990
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    bytes_0 = b"{\xc8\xef\x11\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    bytes_0 = b"!\x17\xe6\x19'\x14\xd0\x07"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    int_0 = 734
    set_0 = {int_0, int_0, int_0}
    dict_0 = {int_0: set_0, int_0: int_0, int_0: set_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    int_0 = -1085
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    int_0 = -1076
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    str_0 = ",zPF<i"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    float_0 = -694.5626
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    int_0 = -886
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    int_0 = 1255
    set_0 = {int_0}
    module_0.match(set_0, int_0)


def test_case_5233():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5234():
    float_0 = -1071.05
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    bytes_0 = b"\x94\xac"
    set_0 = {bytes_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0]
    module_0.match(list_1, set_0)


def test_case_5236():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5237():
    float_0 = 552.2265
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    int_0 = 1438
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    int_0 = 577
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    str_0 = "\ng9neuxbX6"
    float_0 = -2609.1282
    complex_0 = 256.7 + 1238.1j
    bool_0 = False
    list_0 = [bool_0, str_0]
    tuple_0 = (float_0, bool_0, list_0)
    tuple_1 = (str_0, float_0, complex_0, tuple_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    int_0 = 769
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    float_0 = 689.195775
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    complex_0 = 1294 - 1655.5641j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    bytes_0 = b"\xa7J\x89\x90\xe7\xb0RL\xb2\x85\xbd\xa1\xc1\xa6\xe4\x0b\xc3\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    str_0 = "m:JVA\tLgG"
    str_1 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    float_0 = -656.1
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    bytes_0 = b"a\x07\xa8\xa7r\xd9\x13\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    complex_0 = -2792 + 4981.984324j
    module_0.get_new_command(complex_0, complex_0)


def test_case_5250():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5251():
    float_0 = -1128.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    complex_0 = -2006.025 - 738.794j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    float_0 = -1455.567
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    str_0 = '&z7\x0b"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    float_0 = 1453.91116
    dict_0 = {tuple_0: object_0, float_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    str_0 = '?:(TDn9]\n=PNv"Z2>V(f'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    str_0 = "yv-W9D?z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    float_0 = -1448.328
    object_0 = module_1.object()
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, object_0: float_0}
    list_0 = [dict_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    str_0 = "Sh3y]d:EVwrNWb>lKr"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    str_0 = "7:WxA#4%PBS;4oK7*YV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    bytes_0 = b"\xab\xed_\xc6\xc0\xe3v["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    complex_0 = -209.3774 - 3576.702911j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    str_0 = "H8I\t(Yw({^g)?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_5266():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5267():
    int_0 = -314
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    list_0 = []
    list_1 = [list_0]
    int_0 = 491
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    int_0 = -1785
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_5271():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5272():
    str_0 = "#Sz0W\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    int_0 = 1579
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    int_0 = -1081
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    str_0 = '"Bl+'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    int_0 = 239
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_1, dict_0, dict_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    int_0 = 636
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    int_0 = -1117
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    float_0 = -1219.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    none_type_0 = None
    float_0 = -1241.828643
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    bytes_0 = b"x\xa1\x1a\x0f\x9am\xa3\xa8\x87\xad\xbf\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    int_0 = 1941
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    int_0 = -691
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    int_0 = 120
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    float_0 = 290.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    int_0 = -1360
    set_0 = set()
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    str_0 = "E8`C;[8\x0cvc:_"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    bytes_0 = b"\x17\x1dN\xf6\xa1\x9bO\xab\xd0!\xc6"
    int_0 = 407
    tuple_0 = (bytes_0, bytes_0, int_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    bool_0 = False
    float_0 = -114.8826
    list_0 = [bool_0]
    tuple_0 = (list_0, bool_0, bool_0)
    list_1 = [bool_0, tuple_0, float_0]
    bytes_0 = b"yu"
    tuple_1 = (list_1, bool_0, bytes_0)
    tuple_2 = (list_1, tuple_1)
    tuple_3 = (bool_0, float_0, tuple_2)
    list_2 = [tuple_3, tuple_3, bool_0, list_0]
    list_3 = [bool_0, tuple_0, bool_0, bool_0]
    module_0.get_new_command(list_2, list_3)


def test_case_5295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5296():
    int_0 = 3340
    module_0.get_new_command(int_0, int_0)


def test_case_5297():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5298():
    int_0 = -1121
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    complex_0 = -2714.73 + 1499.4j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    none_type_0 = None
    bytes_0 = b"]8\xa6F\x12R\xday"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    bytes_0 = b"\xcd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    bytes_0 = b"\xd9g"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    bytes_0 = b"\xa6\xb0N\xfdy\x0f\xe3\x0fU\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    float_0 = 1341.0
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    float_0 = 446.8
    str_0 = ".UBx&wA\n\rbTravE"
    set_0 = {float_0, float_0, float_0, str_0}
    tuple_0 = (float_0,)
    list_0 = [tuple_0, set_0, str_0, str_0]
    tuple_1 = (float_0, set_0, list_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    int_0 = -1170
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    bytes_0 = b"\x08BM\xbd\x95/3}0V\x851\xde\x87\xb7Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    bool_0 = False
    dict_0 = {}
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, dict_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    float_0 = 208.83242
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    float_0 = 2129.4
    list_0 = [float_0, float_0, float_0]
    int_0 = 340
    tuple_0 = (list_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = "-dnki=uf]pB@,{\r<*bZE"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    float_0 = 1887.08631
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    bytes_0 = b'\x05\x8d\xa1\x06\x1e\xc44\xed"\x1f\xc1\x02'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    str_0 = "Kf+<@AS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    int_0 = 826
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    bytes_0 = b"\xaa.9\xcc]<\xdf-\x9d8\xddq"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    int_0 = 4748
    str_0 = "YGRjy~"
    set_0 = {str_0, str_0, int_0}
    bytes_0 = b"\x11\x85+\x86\x8bfU\xcf0"
    tuple_0 = (int_0, set_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    int_0 = 1156
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    float_0 = 323.8
    list_0 = [float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    bytes_0 = b"\xeeJE\xf3\xf1\xd0WL?\xe7\x85S\x05]4."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    int_0 = 1798
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    str_0 = "!P5\\<g.u<QKfH\t<I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_1]
    module_0.get_new_command(bool_0, list_0)


def test_case_5327():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5328():
    bytes_0 = b'\x1e\x8f+\xd5\x91\xc7F\xfd@\xd09\xee\xf8"\xfd\x12l%'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    float_0 = 100.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    str_0 = "3{XZ="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    bytes_0 = b".\xa6\xd9a\x1b\xf3\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    none_type_0 = None
    str_0 = "i[oN\x0b$>\x0bOX`oI_+g"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    str_0 = "pZ3"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    complex_0 = -2296 - 3578.229j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    none_type_0 = None
    str_0 = "= @kbp_{2q$d,qQ:#"
    set_0 = {str_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    bytes_0 = b"\x8c\xa0\xea\x19\xd2k"
    int_0 = -1287
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    str_0 = 'SY\nDL\t7n.(w45WY?r"'
    set_0 = {str_0, str_0, str_0}
    bool_0 = True
    tuple_0 = (set_0, bool_0, set_0, set_0)
    bool_1 = False
    tuple_1 = (str_0, set_0, tuple_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_5339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5340():
    bool_0 = False
    int_0 = 736
    dict_0 = {bool_0: int_0, int_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


def test_case_5341():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5342():
    bytes_0 = b"\xe1\xe3\xb5\xa6Eh\x9fY\xd0\xbd\x83\xbe\xfb\xf3\xaf|\xc5,A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    bytes_0 = b"\xaf\x14XUQ\x8f\x1d@\xf2/\x9c\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    bool_0 = True
    float_0 = 828.3
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: float_0}
    module_0.match(dict_0, float_0)


def test_case_5346():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5347():
    int_0 = -2888
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_5348():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5349():
    bytes_0 = b"a\re\x8a\xa5\x87\x89\x98w\t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    float_0 = 311.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    int_0 = -3774
    list_0 = [int_0, int_0]
    list_1 = [int_0, int_0, int_0, list_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    int_0 = -2055
    module_0.get_new_command(int_0, int_0)


def test_case_5353():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5354():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    float_0 = -146.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    int_0 = -866
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    str_0 = '"`M&b8_r\tk-qCkncR_'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    str_0 = "<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    int_0 = 1744
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    bytes_0 = b"\x8e\xe3\xbfR\xa5\xab\x9a43\xa0K7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    float_0 = -84.0202
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    list_0 = []
    str_0 = "R\x0bAa\r{"
    none_type_0 = None
    str_1 = "(Fl4qm\x0cWV"
    str_2 = "f#XX*o)3C6"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_5365():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5366():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    int_0 = 1118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    int_0 = 1285
    complex_0 = 151.7 - 774.5973j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    str_0 = "\x0bHVB&DrSq\t\n"
    str_1 = "&g%p:Ku]~9"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_1}
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bool_0 = False
    int_0 = 197
    module_0.get_new_command(bool_0, int_0)


def test_case_5371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5372():
    str_0 = '"'
    str_1 = "v|[UiV[McUr+4rm"
    tuple_0 = ()
    str_2 = "\rT$P<k\x0b!O'v1iS%"
    dict_0 = {str_0: str_0, str_1: tuple_0, str_2: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    bytes_0 = b"\x96\xeapx\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    int_0 = -1035
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    none_type_0 = None
    bytes_0 = b"\xa1\x13b\xf4;\xff\x1d8\x07vM\xb1\x18"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    str_0 = "-}2)ioGB~]\tpAP"
    dict_0 = {str_0: str_0, str_0: str_0}
    dict_1 = {str_0: dict_0, str_0: str_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    str_0 = "!Spo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    str_0 = "b6"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    int_0 = -2182
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    complex_0 = -1236.8274 - 788.812j
    bool_0 = True
    bool_1 = True
    bool_2 = True
    tuple_0 = (bool_1, bool_1, bool_2)
    dict_0 = {complex_0: complex_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    str_0 = "r\\my "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    str_0 = "/S{>f?qR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    int_0 = -717
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    int_0 = 2408
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bool_1 = False
    tuple_0 = (set_0, bool_1)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    bytes_0 = b"\t7\xae\xfd\xcc\x90\xb4\xe7P`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    bytes_0 = b"\x80\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    bytes_0 = b"f=\xbeX\x95\x04\xe6\xb7\xf4Lc\xbbT}\x86\x02wW\xcf\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    bytes_0 = b"\xdd\x0c\t\xfd\x02\x1c^\x1cJ\xa8F\xab?\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    str_0 = "u G\nbE6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bytes_0 = b"\x84\xf5\xf6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    int_0 = 1239
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(int_0, set_0)


def test_case_5398():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5399():
    float_0 = -1159.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    complex_0 = 184.146 + 3650.21j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    str_0 = "Nf:"
    list_0 = [str_0, str_0]
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    bytes_0 = b"Y8{\x07\xdf\xd7q\xa1\x97\x17!B\xe5"
    list_0 = [bytes_0]
    int_0 = 2065
    tuple_0 = (list_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    bytes_0 = b"\xed\xec\xcb)\x17\xcbN\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    float_0 = 5244.23
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    int_0 = -801
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    float_0 = -828.7108
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    bytes_0 = b"\xb2\x8dz\x8fu,t\xfb|3\xf8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    bytes_0 = b"\xf5\xe3\x9a\x1e\x13\x9d\xe5\xee\x1c"
    int_0 = -348
    set_0 = {int_0, bytes_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    float_0 = -2618.1387
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    int_0 = -4037
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    str_0 = "}q,\r\nyGdFI^k&*\x0b,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    float_0 = -1076.55
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    str_0 = "Z\r*]%o,\x0cfsfh-EMPF\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    int_0 = 1349
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    str_0 = "<R'ym[:"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    str_0 = "-S,$WFyz=m'#p]`ay"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    float_0 = -1083.73
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    int_0 = -450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    int_0 = -2406
    int_1 = -2380
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    str_0 = "$BursL]C,Ga1%f"
    bytes_0 = b""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    float_0 = 523.3397
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    float_0 = 2721.5527
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    float_0 = -606.76523
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    int_0 = 474
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    int_0 = 3700
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    bool_0 = True
    str_0 = "z!@-XIo#]cnBh"
    tuple_0 = (bool_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    str_0 = "OfVn8_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    int_0 = -1073
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    bytes_0 = b"\xf0\x992\x0e\xe6\xec\x12\x96a\xcb\xcc\x1c\xb7v\xb8\x8bWy"
    set_0 = {bytes_0, bytes_0}
    str_0 = "\x0csoo\tnJ^"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    int_0 = -1129
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    str_0 = "{\rMWWOJ5wK\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    int_0 = -1365
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    bytes_0 = b"\xf0\r\xdd"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    float_0 = 2930.24942
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    int_0 = 1990
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    int_0 = 592
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    bytes_0 = b"\xaa\xbe\x98\x8f\xa7#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    tuple_0 = ()
    list_0 = [tuple_0]
    list_1 = [list_0, tuple_0, tuple_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    str_0 = "q|\x0c##Uha'\x0cFkod[o"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    str_0 = "ak^-Q,%(s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    str_0 = "^%~bz2<<T<JhJCkBech@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    float_0 = 3495.018018
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    int_0 = -1908
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    complex_0 = -1450.993 - 946.765j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5450():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5451():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    int_0 = 2470
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    bytes_0 = b"c\xd2\xf4T\xb0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    bytes_0 = b"\x8f\x14{3\xe9\x9fq2\xa4s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    int_0 = -4290
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [bool_0, bool_0, bool_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    str_0 = "8"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    bool_0 = True
    bytes_0 = b"\xf6(\xd3\xd6\x84\x98D\x1d\xa5`\n"
    set_0 = {bool_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    str_0 = "i3U2n9,%Ezs]KW@un"
    module_0.match(str_0, str_0)


def test_case_5460():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5461():
    str_0 = "nJ:\x0bH0AmQ~\r=AqE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    float_0 = 1153.1949
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    int_0 = -131
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    bytes_0 = b"\xd5M\xbd\xa4\xbb\xb0\x8fq\x036\xb3t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    str_0 = "wn+e3XHD/]5}'!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    bool_0 = True
    str_0 = "t&\rXs~5Q5Ub/;KrX"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    bytes_0 = b"n\xe0\xe9\x95\x00\xb7n\xe7\x00bD\xaa1\xd2sW"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    bytes_0 = b"\x08\x8bzc\n\xa1@\xd7\xa9A\xa2n\xca\xe6&\xa07\xc8\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    int_0 = 470
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    bytes_0 = b"\xf79\xbe\x96Yc\xca\xbc\xde\x8d\x89"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    int_0 = 4258
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    complex_0 = 1696.691 - 1220j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    bytes_0 = b"=\xb6\xf2\xa1\xef\x8e\x0c\xa4\r\x9c%\x1a\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    int_0 = 930
    object_0 = module_1.object()
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    str_0 = "VV9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    bytes_0 = b'"\xed'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    none_type_0 = None
    float_0 = -1025.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    bytes_0 = b"\xbdTd\xbb\x9d\x87r\r"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5483():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5484():
    bytes_0 = b"\x00\x97\x04\x9c1s\n\x03\x032"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    str_0 = "154sB"
    set_0 = set()
    list_0 = [str_0, str_0, set_0]
    tuple_0 = ()
    tuple_1 = (str_0, set_0, list_0, tuple_0)
    object_0 = module_1.object()
    int_0 = 447
    set_1 = {object_0, object_0, int_0}
    list_1 = [tuple_1, set_1]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    int_0 = 1554
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    float_0 = -2891.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    str_0 = "=PxvR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    str_0 = "|iDROs'E9LUJ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    bytes_0 = b"\xac\x00\x9bQu\xe6\x1e\xaa\xb1\x19p\xe9\xdc|f\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    bool_0 = False
    float_0 = 2892.43
    dict_0 = {bool_0: float_0, bool_0: float_0, bool_0: float_0, float_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    int_0 = -2464
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    int_0 = 589
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    int_0 = -236
    complex_0 = -5339.05 + 3440.87922j
    list_0 = [int_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    int_0 = -1816
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    str_0 = "jc+P_V\noA{D\rEbw66bBq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    float_0 = 3692.556
    bool_0 = False
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    bytes_0 = b"\x8c\xcd\x1e\xd3\xed\x97h\x00:\x89\xfc\xc9\xc7V\xc9^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    int_0 = -816
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    bytes_0 = b"\xa9\x9c\x91W\x1d\xff\xdc\xf3\xfa+\xcb]\xb6\xe5+D\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    str_0 = "js@I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    float_0 = 1779.87542
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    str_0 = "1+S?0@_AA'j'|Tkpv)./"
    module_0.get_new_command(str_0, str_0)


def test_case_5507():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5508():
    int_0 = 2470
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    int_0 = 1898
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    str_0 = "'~eWF Vn\txO8:ZJUDO"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    str_0 = ""
    float_0 = -2487.239
    str_1 = "8]{<b97\x0coKb#\nE"
    tuple_0 = (str_0, float_0, str_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    bytes_0 = b"\x99\xc8:QI"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    str_0 = "mABI]R6+w8"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    list_0 = []
    str_0 = "@+\tF8AFs;bm"
    str_1 = '@`2P"[?=.gXV.'
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5517():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    int_0 = 1094
    set_0 = {int_0}
    tuple_0 = (int_0, set_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    float_0 = 3249.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    str_0 = "r:BX@<}qZ1<VM}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    str_0 = "xy\n(M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    str_0 = "E"
    set_0 = {str_0, str_0, str_0}
    list_0 = [str_0, set_0, str_0]
    module_0.match(list_0, list_0)


def test_case_5525():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bytes_0 = b"0\xd9gz\n5\x0bK\xe3^&s\xf7\xf7<\x9d|N#"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    int_0 = 202
    bytes_0 = b""
    list_0 = []
    tuple_0 = (bytes_0, int_0, list_0, int_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    list_0 = []
    str_0 = "*"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    bytes_0 = b"=\x80}Q\x05\xdfo\xbb^\xffE\x85\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    int_0 = -1081
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bytes_0 = b"\xb8\x1a\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    float_0 = 755.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    bool_0 = True
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    bytes_0 = b"%\xe3\x06\xd0h\x9f\x96\xea\x18e\xbc\x05\xc9\xc4\x0c\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    bytes_0 = b"\xc5{\xdb\xfc'x\xea\xeb\xc5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    complex_0 = 4000.679 - 1680.57j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    bytes_0 = b"\xa7\xa2[\x15P-m`<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    complex_0 = 2392.446 - 3828j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    str_0 = "Nk3H-G'fW3"
    set_0 = {str_0}
    set_1 = set()
    list_0 = [set_0, set_0, set_1]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    int_0 = -2980
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    bytes_0 = b".\xc4\x8f\x8b\x8c\xb9\xb8Pb\x9e6\xe4\x88\xee\xe6\x93\xad"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    bytes_0 = b"\x98\xa3\x963<\x00\xdfd%Ve"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0, bytes_0, tuple_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    str_0 = "`\x0c8b[wQ**!f>fXQJg5}y"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: tuple_0}
    int_0 = 347
    tuple_1 = (dict_0, int_0, dict_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    str_0 = "-a!XB~mu--F\\m\tW\n1\r-$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    int_0 = -416
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    float_0 = 989.02779
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    str_0 = "Zqq3\x0b&f]\\Aq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    str_0 = "b[zLQx<ib\x0b"
    list_0 = [str_0, str_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    bytes_0 = b'\xa7"\xaf^\xab\xb1\x91\xd8G"\xe6\x9f%w'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    str_0 = "bog@JVlTD["
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    int_0 = -2314
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    int_0 = -648
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    str_0 = "y#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    int_0 = -4901
    bytes_0 = b"\x913Gi"
    list_0 = [int_0, bytes_0, bytes_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    bytes_0 = b"\x00\xedn\xe0\x0f#p\xb4\xb5\xd5\x06\xd1\xe2\x8dFD\xa7\x89\xba"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    complex_0 = -453 + 2476.492j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    bytes_0 = b"\xbd!Q\xdeL"
    module_0.match(bytes_0, bytes_0)


def test_case_5565():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5566():
    int_0 = 1087
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    str_0 = "6r.\t)\x0b`5Aa#YhIIid\tx;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    tuple_0 = ()
    int_0 = -666
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    int_0 = -1778
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    bytes_0 = b"\xdf\xe14G\xd8W\xfd\x19\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    float_0 = -21.40395
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    bytes_0 = b"9\x01\x9d\x1d\x14\xe5\x84\r\x01\xc3o\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    int_0 = -2609
    bool_1 = False
    bool_2 = False
    tuple_0 = (bool_1, dict_0, int_0, bool_2)
    tuple_1 = (dict_0, int_0, tuple_0)
    bytes_0 = b"i#mr\x1c\x17\xd9\xcei\x87\xf3\xb1"
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    float_0 = -245.41
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    int_0 = 1052
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    int_0 = -1139
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    int_0 = 3830
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    bytes_0 = b"\xea!\x8e\xdbA\xf4E\x97\xdc\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    str_0 = "\x0be3Z>Vo!i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    bytes_0 = b"\x1a\xe4rOi\xf2\xc9"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    str_0 = "%b9{3~3vG'[[Y"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5583():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5584():
    dict_0 = {}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    str_0 = "14=>\\:QX_)b4A_"
    set_0 = {str_0, str_0, str_0}
    dict_0 = {}
    tuple_0 = (str_0, set_0, dict_0)
    int_0 = -1840
    tuple_1 = (str_0, tuple_0, int_0)
    tuple_2 = (tuple_1,)
    module_0.get_new_command(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    complex_0 = 309.0854 - 539.1654j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    bytes_0 = b"\x95\\\x188;\x9a\xe4\x8c\x92\xd6"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    int_0 = -1308
    str_0 = "`}a\t&<|##Nn."
    bool_0 = False
    tuple_0 = (int_0, str_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5591():
    int_0 = -3242
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    bytes_0 = b"u"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0, bytes_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5593():
    int_0 = -106
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    float_0 = -1738.189362
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    str_0 = "v\nRhAFS8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    int_0 = 1769
    module_0.match(int_0, int_0)


def test_case_5597():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5598():
    str_0 = "zLwH>BH%xInE/T^"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    bytes_0 = b"\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    int_0 = -1418
    float_0 = -2900.17
    list_0 = [int_0, int_0, int_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    str_0 = "k{UkgXK64afZj1GP|"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    object_0 = module_1.object()
    int_0 = -1420
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    float_0 = 2102.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    str_0 = "kN`y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    int_0 = -440
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    dict_0 = {}
    bytes_0 = b"\xa4\x1b\x81\xbaf\xf6"
    int_0 = -159
    tuple_0 = (dict_0, bytes_0, int_0)
    tuple_1 = (tuple_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    none_type_0 = None
    bytes_0 = b"\xfb\xe3\x0c\xc2"
    module_0.get_new_command(none_type_0, bytes_0)


def test_case_5609():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5610():
    str_0 = "a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_5613():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5614():
    int_0 = 1372
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    int_0 = 1819
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    float_0 = 1407.821536
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    complex_0 = 1910 - 3074j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    bool_0 = True
    bytes_0 = b"\xaf\xa8\x0e\x8c\xf3"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    none_type_0 = None
    bytes_0 = b""
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\xdf\xb3\xc6"
    tuple_0 = (list_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    bytes_0 = b"\xd9\xa5\x86\x932\xca\xe5-\xe7\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    bytes_0 = b"\xe0<\xeb\x1eT?\x043\x8d\xb6[\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    int_0 = -1243
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    float_0 = -82.87328
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    bytes_0 = b"\x93\x98h\xe4\xd2\xb7\xcf^\x15nK*H:\xb0\x0e1"
    set_0 = {bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    bool_0 = True
    int_0 = 3013
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    str_0 = "U=8+d'\x0cm."
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    str_0 = '(j"LL`v}G\x0b/A5L\r_/P"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    int_0 = 155
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    str_0 = "\t1xiwb21V\x0bDN_VjR"
    module_0.match(str_0, str_0)


def test_case_5631():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5632():
    bytes_0 = b"\x13\x86\xf7\xd4\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: list_0, bool_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    bytes_0 = b"\x005\xd7\xe52\xd51v\xa2"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5635():
    complex_0 = 1511.62 - 4417.28j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5636():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    str_0 = "Em\x0cw4#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    str_0 = "#JhB8iJ_zB"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5639():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5640():
    bytes_0 = b"\xb0O\xe5\xce\xd0\x0e\xec\x0c\x07V~4u\x9c\xc1\xf5\x9a \xfdx"
    float_0 = -2182.6
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    str_0 = "JA+_7JZS!^ITulyS,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    int_0 = 1150
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5643():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5644():
    bool_0 = True
    bytes_0 = b"F\x95\xaa\x00\nx\xd3\xd0!]\x9c\xb2\xef\xb9?"
    module_0.match(bool_0, bytes_0)


def test_case_5645():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5646():
    bytes_0 = b"\x85\xaa\xc0\xe8\xa1\x1c\xb9w.\tx\xba\xc01&yh\xb3A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5647():
    int_0 = -437
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5648():
    dict_0 = {}
    bool_0 = False
    str_0 = "Cw.W,BDbd<\x0cW7t@6FU"
    list_0 = [dict_0, str_0, bool_0, bool_0]
    tuple_0 = (dict_0, bool_0, dict_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    str_0 = 'W@36QF1[/"kduz1>]'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    int_0 = -3606
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    int_0 = -2230
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_5652():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5653():
    int_0 = 36
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5654():
    bytes_0 = b"\xd3\xac"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5655():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5656():
    float_0 = -2705.568
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5657():
    bool_0 = True
    bytes_0 = b'\x0c@\xbd\x08;\xc4\xa8\\"|\x1b'
    module_0.get_new_command(bool_0, bytes_0)


def test_case_5658():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5659():
    complex_0 = 3655.78098 + 321.7j
    tuple_0 = (complex_0,)
    dict_0 = {tuple_0: complex_0, complex_0: tuple_0}
    bool_0 = False
    tuple_1 = (bool_0,)
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    bytes_0 = b"=x68f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5661():
    str_0 = "iEDLmeD=@&L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5662():
    complex_0 = -980.676452 - 2753j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5663():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5664():
    object_0 = module_1.object()
    bool_0 = False
    tuple_0 = (object_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5665():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5666():
    float_0 = 1917.01707
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5667():
    str_0 = "b..4h/(?s$C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5668():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5669():
    str_0 = "-et94$rW2RU;"
    float_0 = 3261.60195
    bool_0 = False
    dict_0 = {str_0: float_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5670():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5671():
    float_0 = 779.6742
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5672():
    float_0 = -478.92
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5673():
    str_0 = "?I1romV\x0clnY5Uk1D"
    tuple_0 = ()
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5674():
    float_0 = -1831.1
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5675():
    bytes_0 = b"G{X\xcf\xa7\x05d\x0fs\xad\xe1C\xa5g6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5676():
    int_0 = -1856
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5677():
    int_0 = -985
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5678():
    bytes_0 = b'/Y\xbe"x0\xf9\xe9\xeeZT\xda\xf3\x98\xc4^V/\x1d\x81'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5679():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = "\n\nCkX"
    list_0 = [set_0, str_0, bool_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5680():
    str_0 = "\ry;D\x0c4%ONv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5681():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5682():
    str_0 = "5\\iSu#L@z\\m(Lq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5683():
    int_0 = 239
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5684():
    float_0 = 1441.49
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5685():
    float_0 = -2467.181285
    set_0 = set()
    bytes_0 = b"\x1f"
    tuple_0 = (float_0, float_0, set_0, bytes_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5686():
    bytes_0 = b">p\xf93F0\x98d\xaa\xbb\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5687():
    none_type_0 = None
    str_0 = "W"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5688():
    int_0 = -1419
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5689():
    str_0 = ":^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5690():
    str_0 = "Rl_rJ6^$&vwi"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5691():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5692():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5693():
    complex_0 = -741.4 + 2212.4j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5694():
    int_0 = -2534
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5695():
    int_0 = -1749
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5696():
    complex_0 = -1696.110551 - 3973.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5697():
    float_0 = 1674.0394
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5698():
    int_0 = -2192
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5699():
    str_0 = "YET?^XW4\\"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5700():
    float_0 = -4091.300955
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5701():
    str_0 = "T?o>8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5702():
    float_0 = 4759.82472
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5703():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5704():
    str_0 = "y:4xD>\n;~^SHY-MZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5705():
    bytes_0 = b"\xa0\xb0\xfd\x94l\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5706():
    int_0 = -2057
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5707():
    int_0 = -1944
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5708():
    str_0 = "Jo||7\\9-n8"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5709():
    complex_0 = 3892.891 + 360.61771j
    dict_0 = {complex_0: complex_0}
    tuple_0 = (dict_0,)
    module_0.match(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5710():
    complex_0 = -4016.53 - 3958.940923j
    bool_0 = False
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: bool_0}
    module_0.match(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5711():
    bytes_0 = b"\x9d}\x8f2u\x95\xdbw\xa5\x90\xa2~\xf9s\x91\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5712():
    str_0 = "Q? g0D1Rm"
    str_1 = "g$X;O"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5713():
    bytes_0 = b"\x90\xfc\x04J\x8c\xd9~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5714():
    bytes_0 = b"f\x81\x9d\xa0!X"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5715():
    bytes_0 = b"J\xbc\x8b\xe6v\x88\xbf\x86\xa6\x82\x8e*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5716():
    int_0 = 4372
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5717():
    str_0 = "eJvhy;S2\r[6."
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5718():
    int_0 = -3643
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5719():
    bytes_0 = b'I\xb0"\xdcr\x0fw\x9c&\xb8\x96'
    bytes_1 = b"\x9f\xb0;az\x83\xf1_\xce)\xbb\xed"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5720():
    bytes_0 = b"\xcf\xd6\xc1]\x8fw\x9d\xdd\xc8\xcas\x91+u\xc6\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5721():
    bool_0 = False
    bool_1 = False
    bool_2 = False
    tuple_0 = (bool_2,)
    dict_0 = {bool_0: bool_2, bool_0: tuple_0, tuple_0: bool_1}
    tuple_1 = (tuple_0, dict_0)
    tuple_2 = (bool_0, bool_0, bool_1, tuple_1)
    module_0.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5722():
    str_0 = 'KNA>"p8B'
    int_0 = 1135
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5723():
    dict_0 = {}
    str_0 = ")c\"0h\x0bz5n'LuVd"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5724():
    bytes_0 = b"\x93y\xd6z\x0ez\xe96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5725():
    str_0 = "sr[SOq<kg8chGQD/2h\x0b\x0b"
    str_1 = "\n"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5726():
    str_0 = "y\r6f+/M>dfi%,_.LlL*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5727():
    str_0 = "\rv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5728():
    str_0 = "a0EHROmI|cm.Dp }7"
    list_0 = [str_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5729():
    str_0 = "d/~R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5730():
    none_type_0 = None
    str_0 = " ?`\x0c,EV<RQ,\x0cK"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5731():
    str_0 = "<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5732():
    int_0 = 2514
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_5733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5734():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5735():
    int_0 = -1529
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5736():
    int_0 = -3165
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5737():
    str_0 = 'r(?\x0cY&"d[qv/\x0c~'
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


def test_case_5738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5739():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5740():
    bytes_0 = b"\xf5\xe4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5741():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5742():
    bytes_0 = b"\xf3]\xe2\x06uS\xd7t\x19\x93I"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5743():
    int_0 = 209
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5744():
    float_0 = -451.315
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5745():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5746():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5747():
    bool_0 = False
    float_0 = 1421.015647
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5748():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5749():
    bytes_0 = b"?N\xb2\xb6\x11"
    str_0 = "t(C]Bq"
    module_0.match(bytes_0, str_0)


def test_case_5750():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5751():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5752():
    bool_0 = False
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5753():
    int_0 = -237
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5754():
    bytes_0 = b"ec\x17\xb60\xf9\xd9\xbbgY\x07\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5755():
    str_0 = "@m!|2 q8kywhw7p<'u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5756():
    str_0 = "p_?ai>_"
    int_0 = -2830
    dict_0 = {str_0: str_0, str_0: str_0, str_0: int_0, str_0: str_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5757():
    int_0 = -2107
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5758():
    int_0 = -2837
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5759():
    str_0 = "h],$VZX@*R5\nMV\r\x0bn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5760():
    str_0 = "-5(GH~1OoGOHy${d"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5761():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5762():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5763():
    none_type_0 = None
    bytes_0 = b"\x18\xd8\x99\x82\xfd\x11\x9e\xfe9\xba\x14\xad"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5764():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5765():
    str_0 = ")pn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5766():
    complex_0 = -410 - 271.914j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5767():
    int_0 = -2383
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5768():
    bytes_0 = b"7\xe1\x91\xa7\x94S\xb4\x08%\x13\x89\n\xb4\xa6\x07\xeckp"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5769():
    str_0 = "n l>&??."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5770():
    bytes_0 = b"\xb5\x90\xc9\xd1\x9c\x0e"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_5771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5772():
    float_0 = 2988.263535
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5773():
    int_0 = -398
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5774():
    int_0 = -4244
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5775():
    int_0 = 2466
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5776():
    str_0 = ":?qpACc(GL;9"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5777():
    str_0 = "mT#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5778():
    str_0 = "F"
    bytes_0 = b"\xfd#\x1e"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5779():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5780():
    bytes_0 = b"k\x17\xdb\xcb\xb0\re7"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5781():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5782():
    str_0 = "&Z:\n+kOCt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5783():
    bytes_0 = b"N4\xfc\x8e\xceA\xf7"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5784():
    int_0 = 284
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5785():
    int_0 = 1046
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5786():
    str_0 = "g=lR"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5787():
    int_0 = 3248
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5788():
    complex_0 = -2534.1371 - 978.94j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5789():
    int_0 = -362
    module_0.get_new_command(int_0, int_0)


def test_case_5790():
    bytes_0 = b""
    object_0 = module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5791():
    int_0 = 3408
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5792():
    str_0 = "&q*H\\@OKX!q^cpR\\ ("
    int_0 = 1721
    int_1 = -408
    tuple_0 = (str_0, int_0, int_1, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5793():
    int_0 = -2732
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5794():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_5795():
    str_0 = "\\w&'h =GdH,PwQsxcO"
    module_0.match(str_0, str_0)


def test_case_5796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5797():
    bytes_0 = b"\xcd\x89'\x10\x8c\x03"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5798():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = 'j"<KZT?e\\/a^w%+&eqs'
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5799():
    str_0 = "zd[;pjH@v|RK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5800():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5801():
    float_0 = 243.391
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5802():
    bool_0 = True
    str_0 = ""
    tuple_0 = (bool_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_5803():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5804():
    int_0 = 1138
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5805():
    str_0 = "b#evR;L9mYA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5806():
    str_0 = "mk5dL\x0c"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5807():
    str_0 = "sBW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5808():
    bytes_0 = b"\xa1\x9d\x94\xf1\x8d\xfc\xed;\x1a\xea\xd6*|\xf4Q\xcf\xf7\x1c\x1a"
    str_0 = "-zDBkd"
    tuple_0 = (bytes_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5809():
    int_0 = 2040
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5810():
    str_0 = "\x0b+Bal!^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5811():
    str_0 = ""
    str_1 = 'M>!\x0b~}vRr*R\x0bM`)"'
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5812():
    complex_0 = 3023.40163 + 742.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5813():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5814():
    int_0 = 1100
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5815():
    int_0 = -122
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5816():
    float_0 = -1241.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5817():
    int_0 = -667
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5818():
    str_0 = "UP:f?7RH&Sx1o<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5819():
    int_0 = -2674
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5820():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = False
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5821():
    bytes_0 = b"1\x8d\xb4\x06+Cgi\x18\x1d\xe3\n\xdb\xcf\xfa\xb9\x14\xbc"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5822():
    int_0 = -2173
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5823():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5824():
    int_0 = -1392
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5825():
    int_0 = 187
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5826():
    bytes_0 = b"\x95\x01\xa4\xd7\xc7\x9f\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5827():
    float_0 = 752.681
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5828():
    dict_0 = {}
    bytes_0 = b" \xb8\x89\x92\xf4"
    list_0 = [dict_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5829():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5830():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    float_0 = 2174.0
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5831():
    bytes_0 = b"X\xd8\x87\x8f\xae\\H\xd4\xb8\x87\x92"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5832():
    bool_0 = False
    set_0 = {bool_0}
    bytes_0 = b"\xd8\x8d',\xcd\x97\x14Z\xaa!\xe1\xcdp"
    str_0 = 'J.@\t+ubK"zN\\L'
    tuple_0 = (set_0, bytes_0, str_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5833():
    int_0 = 4870
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5834():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5835():
    float_0 = -1826.718
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5836():
    str_0 = "xEwapOnAf37?+i"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5837():
    bytes_0 = b"\xde\x92\x8a\xd0\x1dr|\xba\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5838():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5839():
    float_0 = -2927.45
    module_0.get_new_command(float_0, float_0)


def test_case_5840():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5841():
    str_0 = "\t'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5842():
    bool_0 = False
    bool_1 = False
    int_0 = 1252
    tuple_0 = (bool_0, bool_1, int_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5843():
    int_0 = -1408
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5844():
    str_0 = "GtY5]g6[Q4p/^OiTos_F"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5845():
    list_0 = []
    str_0 = "i.yw7T%`f5#K"
    int_0 = 3061
    str_1 = "%a]ho8c-.AT"
    dict_0 = {str_0: int_0, str_0: str_0, str_0: int_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5846():
    int_0 = 512
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5847():
    str_0 = "kN3pJ'\t)t@Q"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5848():
    str_0 = "ND\x0c3 .9H3q'_1^)2(k1\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5849():
    float_0 = -3325.018276
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5850():
    int_0 = -912
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5851():
    complex_0 = -387.6386 + 958.5j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5852():
    int_0 = -2638
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5853():
    bytes_0 = b"\xbe\x9d\xf28k\x8b\xeb\x1b\xb6\xad\xceR\xb6\xde\xf4,+j\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5854():
    bytes_0 = b'|\xf3\x16\xa1\t"\xd3\xea\x90\xf4'
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5855():
    bytes_0 = b"\xb3m\xf3}|\xec\xd8\xb6\xce\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5856():
    float_0 = 569.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5857():
    bytes_0 = b"W\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5858():
    complex_0 = 1990.5 - 2419.9j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5859():
    str_0 = ",#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5860():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5861():
    int_0 = -4423
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5862():
    bytes_0 = b"\xdcxf\xae\xffuI\xf8S\x15SiD\xb6\xe9\x03\xab\xe4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5863():
    none_type_0 = None
    str_0 = "?861kpk0/\rE"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5864():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5865():
    str_0 = "U*hC58h[\t\\Zx\x0b0|v'Y>!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5866():
    float_0 = 4997.579877
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5867():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5868():
    int_0 = -284
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5869():
    bytes_0 = b"\x1c\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5870():
    str_0 = "^H+63B%fqNJFwb))UPv"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5871():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5872():
    bytes_0 = b"&\x95e!\x90\xf7}y&y\xec\x92X"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5873():
    int_0 = 2678
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5874():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5875():
    str_0 = "X^7N^`5-\t\t+i;r]"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5876():
    int_0 = 699
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5877():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5878():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5879():
    str_0 = "IW)b{(z7PI"
    set_0 = {str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5880():
    float_0 = -1761.141
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5881():
    bool_0 = True
    complex_0 = 3452.904433 - 1061.717452j
    tuple_0 = (complex_0, bool_0)
    bool_1 = False
    tuple_1 = (bool_0, tuple_0, bool_1)
    tuple_2 = (tuple_1, bool_0, tuple_1)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5882():
    str_0 = 'P|\t}f)j\nAH *+n\n"~ D'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5883():
    float_0 = -1288.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5884():
    float_0 = 1372.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5885():
    bytes_0 = b"\x0f\xd9`~6\xa1CQL\x0c\x1by"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5886():
    float_0 = 2611.414726
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5887():
    bytes_0 = b"\x8d\xeb\x92\x9b\x0f\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5888():
    str_0 = "H\rw'!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5889():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5890():
    bytes_0 = b"m"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5891():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5892():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5893():
    str_0 = ":H'v@.l_vgl)D"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5894():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5895():
    bytes_0 = b"\xd3O\x0e8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5896():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5897():
    str_0 = ",Y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5898():
    bytes_0 = b"\x14\xebC"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5899():
    bytes_0 = b"\xf6p\xae\xd5\xa92"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5900():
    str_0 = ")5@~#y.2XN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5901():
    str_0 = "5{.&9KHnB5i[#9?y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5902():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5903():
    float_0 = 1300.01911
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5904():
    bytes_0 = b"\x15{n\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5905():
    float_0 = -1479.17
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5906():
    str_0 = "F\nvEbKtQI|N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5907():
    bytes_0 = b"\xdd\x083\xf1t\x0b\x88y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5908():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5909():
    bytes_0 = b"\xcar_\xd0U\xc6R\xbf\xa4\x13\x00"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5910():
    bytes_0 = b'P?"\xaf>\x8c"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5911():
    float_0 = 693.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5912():
    int_0 = -2701
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5913():
    int_0 = 1296
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5914():
    bytes_0 = b"\x03T%y\xe0N(\xdc\x16\xe2\xfe"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5915():
    float_0 = 898.2407
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5916():
    int_0 = 1103
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5917():
    bytes_0 = b"'\x113\x1e\xae\xf1~H\xde\x92\x06\x1d\x1d6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5918():
    str_0 = "+V)v~!)@`.5nzv4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5919():
    int_0 = -2336
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5920():
    int_0 = -379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5921():
    int_0 = 660
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5922():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5923():
    none_type_0 = None
    int_0 = 292
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5924():
    bytes_0 = b"{\x0f\xfaXm\xd6{\x92\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5925():
    bytes_0 = b'"\xf6\xb2\x91\xccn\xb1u \xb1\xff'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5926():
    int_0 = -1428
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5927():
    str_0 = "<&fZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5928():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5929():
    bytes_0 = b"q\x02"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5930():
    bytes_0 = b"A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5931():
    str_0 = '"_E'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5932():
    float_0 = 4757.50366
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5933():
    bytes_0 = b"O\xa4\xe4T\x97\x1d\xe25"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5934():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5935():
    str_0 = "Vk!zK"
    float_0 = -2405.4016
    tuple_0 = (str_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5936():
    int_0 = 1118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5937():
    set_0 = set()
    list_0 = [set_0]
    module_1.object(*list_0)


def test_case_5938():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5939():
    float_0 = 2920.994
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5940():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5941():
    float_0 = -2616.193
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5942():
    str_0 = "'@hY1\nxP["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5943():
    float_0 = -212.0
    module_0.get_new_command(float_0, float_0)


def test_case_5944():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5945():
    complex_0 = -2220.46 - 971.39j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5946():
    bytes_0 = b"\xde\xe0:\xaa\xdf"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


def test_case_5947():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5948():
    int_0 = 1062
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5949():
    bytes_0 = b"\xc7\xd6\xb0\xb9\x03]\xea\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5950():
    str_0 = "#bR_"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5951():
    bytes_0 = b"\xea\x82\xeb\xce\xb7\xe6><8\xa8*\x18M\xda\xd1\x16Z\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5952():
    str_0 = "@WSjhb`7UtMm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5953():
    bytes_0 = b"\xfd/[\xe6\x14z\xeb\xa5\xc4\xfd\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5954():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5955():
    int_0 = -1278
    str_0 = "9TK"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5956():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5957():
    float_0 = -2925.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5958():
    float_0 = 1636.31
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5959():
    float_0 = 634.74
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5960():
    bytes_0 = b"\xd3\x80my\xfe[8\xc2\xc5h\xac\x9esx"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5961():
    str_0 = "ARk@\rQRQ8)'"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_5962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5963():
    str_0 = 'cj/:=ss2&"3,A\rT|sF'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5964():
    str_0 = "@ \\%x5\x0bW;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5965():
    str_0 = "LZIq3\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5966():
    float_0 = -3916.99368
    module_0.match(float_0, float_0)


def test_case_5967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5968():
    bytes_0 = b"m\xa0\xff\xfbeY\x99\xb7\xcc\xc5Za\x8e\x90\x89\xb2"
    tuple_0 = (bytes_0,)
    float_0 = 3492.5
    set_0 = {tuple_0, tuple_0, float_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5969():
    bytes_0 = b"\x85\x89\xee\xceQ\no\xb23\x7f~L\xa3\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5970():
    bytes_0 = b"\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5971():
    float_0 = 1302.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5972():
    float_0 = 705.3241
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5973():
    int_0 = -1325
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5974():
    int_0 = 5648
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5975():
    none_type_0 = None
    complex_0 = -2946.4 - 1330.5j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5976():
    bytes_0 = b"\xado\xe1\xdfh"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5977():
    float_0 = -1345.67
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5978():
    int_0 = 1787
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5979():
    bytes_0 = b"Z\xe1"
    str_0 = "6=g;]7)d\x0b}\r,"
    int_0 = 5658
    tuple_0 = (str_0, int_0, str_0)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5980():
    bytes_0 = b"\x99O\xb4\xb5\xb2\xa5\xe4\x89\x9b\x90\x08\x97\xb6m\xd1s\xbf\x18\xec\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5981():
    bytes_0 = b"2\xa9 C\x9c\xba\xe8Q=\xf0s"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5982():
    str_0 = "X\x0b\r#43DcHEw_iK)w\x0bW/"
    str_1 = "]ey;R%o.\x0b\x0bM~ NNgUA]G"
    str_2 = "9=9\x0cjk`b="
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_1: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5983():
    float_0 = -1216.764
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5984():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, tuple_0, dict_0, dict_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5985():
    int_0 = 1075
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5986():
    bytes_0 = b":\x01\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5987():
    bytes_0 = b"\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5988():
    float_0 = -1048.293
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5989():
    bytes_0 = b"S\xbcu\x16\x14"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5990():
    none_type_0 = None
    list_0 = [none_type_0]
    bytes_0 = b"\xb9U8\x9e\x99\xe5\x88"
    set_0 = set()
    tuple_0 = (bytes_0, set_0)
    list_1 = [none_type_0, list_0, tuple_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5991():
    int_0 = -736
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5992():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5993():
    bytes_0 = b"w\x9a\xe0-2\x8e\xa0'\xa2\xaf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5994():
    str_0 = "\x0bG\x0cHsS\tZ@{q-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5995():
    str_0 = "l+b*Sp\x0c47Y.~]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5996():
    none_type_0 = None
    int_0 = -2004
    bool_0 = True
    list_0 = [none_type_0, none_type_0, none_type_0, int_0]
    bool_1 = False
    tuple_0 = (int_0, bool_0, list_0, bool_1)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5997():
    int_0 = -113
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5998():
    bytes_0 = b"\xd3\xd0\xc1\x15\x1f\xb5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5999():
    int_0 = 4198
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6000():
    str_0 = "/H+DzGL!w4T"
    module_0.get_new_command(str_0, str_0)


def test_case_6001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6002():
    bytes_0 = b"\x07\xc5\xa2\xff\xf9/,\xb2}\xc4\xbb<\x83"
    module_0.match(bytes_0, bytes_0)


def test_case_6003():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6004():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6005():
    float_0 = -267.49
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


def test_case_6006():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6007():
    str_0 = "6\n<Tb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6008():
    int_0 = -3448
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6009():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    list_0 = [none_type_0]
    bool_0 = False
    tuple_0 = (dict_0, list_0, bool_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6010():
    bytes_0 = b"\x18*%P\xc5}\x04"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6011():
    int_0 = -4183
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6012():
    int_0 = -404
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6013():
    float_0 = -2726.68759
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6014():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6015():
    int_0 = -2849
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    object_0 = module_1.object()
    str_0 = "CH#_\x0c"
    bytes_0 = b"\xb6\x7f\xfb\xfd'\xc9\rI\xb4\x89T\xed\xbf\xc3"
    tuple_1 = (tuple_0, object_0, str_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6016():
    bytes_0 = b"g\x07p#q\xe3t\nF\x8e\xaf\xea\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6017():
    int_0 = 2913
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6018():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6019():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_6020():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_6021():
    bytes_0 = b"\xc6\x84U"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6022():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6023():
    str_0 = "_-j7w>x5rwSm21y \x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6024():
    str_0 = "p>_`^+L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6025():
    int_0 = -1288
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6026():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6027():
    float_0 = 2098.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_6028():
    bytes_0 = b".\xcf\x96\x0f\xcb9\xcb*q\xa5\xbc"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6029():
    tuple_0 = ()
    bytes_0 = b"e\x16y'(\xf9\xcb\xfb<9\xd5jnF"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6030():
    bytes_0 = b"\r\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6031():
    complex_0 = -6.9374 - 2610.32135j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_6032():
    bytes_0 = b"QLv%\x83fx"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6033():
    int_0 = 729
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6034():
    str_0 = "fL"
    module_0.get_new_command(str_0, str_0)


def test_case_6035():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6036():
    bytes_0 = b"\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6037():
    int_0 = -710
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6038():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6039():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6040():
    str_0 = "v9C@G\nWZ#>07xRi\x0bMN"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_6041():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6042():
    bytes_0 = b"\x9b\x0e=\x15\xa7\x9b\xc5A\x88\x92\x1d\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6043():
    str_0 = '+4J"e^&B2WI.!96.P'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6044():
    int_0 = 46
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6045():
    int_0 = -694
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6046():
    str_0 = ""
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6047():
    int_0 = 1274
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6048():
    float_0 = -247.0
    set_0 = set()
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_6049():
    int_0 = 767
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_6050():
    pass


def test_case_6051():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6052():
    int_0 = 35
    module_0.get_new_command(int_0, int_0)


def test_case_6053():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6054():
    bytes_0 = b"\xb5c"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_6055():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6056():
    int_0 = 5391
    module_0.get_new_command(int_0, int_0)
