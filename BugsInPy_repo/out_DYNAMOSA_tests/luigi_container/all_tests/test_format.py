# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import format as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    gzip_wrapper_0.pipe_reader(gzip_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.__exit__(var_0, none_type_0, var_0)
    var_0.pipe_writer(var_1)


def test_case_2():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = chain_0.pipe_reader(none_type_0)


def test_case_3():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    var_0 = chain_0.pipe_writer(chain_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "format.Chain"
    assert var_0.args == ()
    var_1 = chain_0.pipe_writer(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    float_0 = -1109.08
    gzip_wrapper_0.pipe_writer(float_0)


def test_case_5():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None


@pytest.mark.xfail(strict=True)
def test_case_6():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = module_0.FileWrapper(none_type_0)
    var_0.__exit__(var_0, var_0, chain_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    complex_0 = 2066.65 + 1135.0204j
    file_wrapper_0 = module_0.FileWrapper(complex_0)
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    file_wrapper_0.create_subprocess(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    file_wrapper_0 = module_0.FileWrapper(bool_0)
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    var_0 = file_wrapper_0.__enter__()
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_1 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_2 = chain_0.pipe_reader(chain_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "format.Chain"
    assert var_2.args == ()
    var_3 = var_1.seekable()
    var_4 = chain_0.pipe_writer(var_0)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}" == "format.FileWrapper"
    )
    var_5 = gzip_wrapper_0.pipe_writer(bool_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_5.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_6 = var_5.abort()
    assert var_5.closed is True
    var_7 = var_1.__exit__(var_4, gzip_wrapper_0, var_5)
    var_8 = var_2.pipe_writer(chain_0)
    var_5.close()


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    file_wrapper_0 = module_0.FileWrapper(bool_0)
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    file_wrapper_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_10():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.__enter__()
    var_2 = chain_0.pipe_writer(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_3 = gzip_wrapper_0.pipe_writer(var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_3.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_0.__del__()


@pytest.mark.xfail(strict=True)
def test_case_11():
    text_wrapper_0 = module_0.TextWrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    text_wrapper_0.pipe_reader(text_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    text_wrapper_0 = module_0.TextWrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    text_wrapper_0.pipe_writer(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    none_type_1 = None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    text_wrapper_0 = module_0.TextWrapper()
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    var_1 = bzip2_wrapper_0.pipe_reader(none_type_1)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_2 = var_1.__iter__()
    chain_0.__rshift__(var_1, text_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = chain_0.pipe_writer(chain_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "format.Chain"
    assert var_0.args == ()
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    var_1 = chain_0.pipe_reader(none_type_0)
    var_2 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_2.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_3 = var_2.__iter__()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "_io.BufferedWriter"
    )
    var_3.pipe_writer(chain_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0.__rshift__(chain_0, chain_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    module_0.Chain(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.__exit__(var_0, var_0, var_0)
    var_2 = gzip_wrapper_0.pipe_writer(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_2.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_2.pipe_reader(gzip_wrapper_0)


def test_case_18():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = chain_0.pipe_reader(chain_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "format.Chain"
    assert var_1.args == ()
    var_2 = var_0.__enter__()
    var_3 = var_2.seekable()
    var_4 = chain_0.pipe_writer(var_2)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_5 = gzip_wrapper_0.pipe_writer(var_2)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_5.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_6 = var_5.abort()
    assert var_5.closed is True
    var_7 = var_0.__exit__(var_4, gzip_wrapper_0, var_5)
    with pytest.raises(RuntimeError):
        var_2.close()


@pytest.mark.xfail(strict=True)
def test_case_19():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.__enter__()
    var_2 = gzip_wrapper_0.pipe_writer(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_2.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_3 = var_2.__enter__()
    gzip_wrapper_0.pipe_writer(gzip_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = chain_0.pipe_reader(chain_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "format.Chain"
    assert var_1.args == ()
    var_2 = var_0.__enter__()
    var_3 = var_2.seekable()
    var_4 = chain_0.pipe_writer(var_2)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_2.__del__()


@pytest.mark.xfail(strict=True)
def test_case_21():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = gzip_wrapper_0.pipe_reader(none_type_0)
    var_2 = var_0.__exit__(var_0, chain_0, var_1)
    var_3 = var_1.readable()
    var_4 = gzip_wrapper_0.pipe_writer(var_2)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_4.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    module_0.InputPipeProcessWrapper(var_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.__exit__(var_0, var_0, chain_0)
    float_0 = -1109.08
    var_2 = chain_0.pipe_writer(var_0)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_3 = var_0.readable()
    gzip_wrapper_0.pipe_writer(float_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = gzip_wrapper_0.pipe_reader(none_type_0)
    var_2 = var_0.writable()
    module_0.InputPipeProcessWrapper(var_1)


@pytest.mark.xfail(strict=True)
def test_case_24():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    list_0 = [gzip_wrapper_0, gzip_wrapper_0]
    chain_0 = module_0.Chain(*list_0)
    assert f"{type(chain_0).__module__}.{type(chain_0).__qualname__}" == "format.Chain"
    assert (
        f"{type(chain_0.args).__module__}.{type(chain_0.args).__qualname__}"
        == "builtins.tuple"
    )
    assert len(chain_0.args) == 2
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    chain_0.pipe_reader(chain_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = chain_0.pipe_reader(chain_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "format.Chain"
    assert var_1.args == ()
    var_2 = chain_0.pipe_writer(none_type_0)
    var_0.__exit__(var_2, none_type_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_26():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.__exit__(var_0, none_type_0, var_0)
    assert var_0.closed is True
    var_1.readable()


@pytest.mark.xfail(strict=True)
def test_case_27():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.seekable()
    var_1.writeLine(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = False
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    chain_0 = module_0.Chain(*list_0)
    assert f"{type(chain_0).__module__}.{type(chain_0).__qualname__}" == "format.Chain"
    assert chain_0.args == ({}, {}, {}, {})
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0.pipe_writer(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = module_0.GzipWrapper(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "format.GzipWrapper"
    )
    assert (
        f"{type(var_1.compression_level).__module__}.{type(var_1.compression_level).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1.pipe_writer(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    str_0 = "Q`5zDJm[+x*Xmn4"
    var_0 = gzip_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.__exit__(none_type_0, str_0, none_type_0)
    assert var_0.closed is True
    var_0.pipe_writer(gzip_wrapper_0)


def test_case_31():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = chain_0.pipe_reader(chain_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "format.Chain"
    assert var_1.args == ()
    var_2 = var_0.__enter__()
    var_3 = var_2.seekable()
    var_4 = chain_0.pipe_writer(var_2)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_5 = gzip_wrapper_0.pipe_writer(var_2)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_5.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_6 = var_5.abort()
    assert var_5.closed is True
    with pytest.raises(RuntimeError):
        var_5.close()


@pytest.mark.xfail(strict=True)
def test_case_32():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = chain_0.pipe_reader(chain_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "format.Chain"
    assert var_1.args == ()
    var_2 = var_0.__enter__()
    var_3 = var_2.seekable()
    var_4 = chain_0.pipe_writer(var_2)
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_5 = gzip_wrapper_0.pipe_writer(var_2)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_5.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_6 = var_5.abort()
    assert var_5.closed is True
    var_7 = var_5.writable()
    var_7.pipe_reader(gzip_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_2 = var_0.__exit__(var_0, chain_0, var_1)
    assert var_0.closed is True
    var_3 = chain_0.pipe_writer(var_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_3.closed is True
    var_4 = var_3.readable()
    var_5 = gzip_wrapper_0.pipe_writer(var_2)
    module_0.InputPipeProcessWrapper(var_1)


@pytest.mark.xfail(strict=True)
def test_case_34():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = chain_0.pipe_reader(chain_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "format.Chain"
    assert var_1.args == ()
    var_2 = var_0.__enter__()
    var_3 = var_0.writable()
    var_4 = module_0.Format()
    assert (
        f"{type(module_0.Format.hdfs_reader).__module__}.{type(module_0.Format.hdfs_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_reader).__module__}.{type(module_0.Format.pipe_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.hdfs_writer).__module__}.{type(module_0.Format.hdfs_writer).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_writer).__module__}.{type(module_0.Format.pipe_writer).__qualname__}"
        == "builtins.method"
    )
    var_5 = var_2.seekable()
    var_6 = var_1.pipe_writer(var_5)
    assert var_6 is False
    var_4.pipe_writer(var_6)
