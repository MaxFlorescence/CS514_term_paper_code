# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import _tqdm as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.format_sizeof(bool_0)
    assert var_0 == "1.00"


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -6231
    var_0 = module_0.format_interval(int_0)
    assert var_0 == "-2:16:09"
    module_0.tqdm(int_0, total=int_0, file=int_0, mininterval=int_0)


def test_case_2():
    bool_0 = True
    var_0 = module_0.format_meter(bool_0, bool_0, bool_0)
    assert var_0 == "100%|██████████| True/True [00:01<00:00,  1.00it/s]"


def test_case_3():
    none_type_0 = None
    tqdm_0 = module_0.tqdm(total=none_type_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.503295, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.503295, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "/5)@"
    module_0.tqdm(
        desc=str_0,
        total=str_0,
        leave=str_0,
        ncols=str_0,
        mininterval=str_0,
        unit_scale=str_0,
    )


def test_case_5():
    bool_0 = True
    tqdm_0 = module_0.tqdm(mininterval=bool_0, miniters=bool_0, unit_scale=bool_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == 0
    assert tqdm_0.miniters is True
    assert tqdm_0.dynamic_miniters is False
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is True
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.505119, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.505119, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    var_0 = tqdm_0.update()
    assert tqdm_0.last_print_n == 1
    assert tqdm_0.n == 1


def test_case_6():
    none_type_0 = None
    tqdm_0 = module_0.tqdm(total=none_type_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5068347, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5068347, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    var_0 = tqdm_0.close()


@pytest.mark.xfail(strict=True)
def test_case_7():
    module_0.trange()


def test_case_8():
    none_type_0 = None
    var_0 = module_0.StatusPrinter(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = 1524.0
    module_0.format_sizeof(float_0, float_0)


def test_case_10():
    int_0 = 540
    tqdm_0 = module_0.tqdm(gui=int_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5097609, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5097609, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    module_0.tqdm(
        bool_0,
        bool_0,
        mininterval=bool_0,
        miniters=bool_0,
        unit=bool_0,
        unit_scale=bool_0,
    )


def test_case_12():
    dict_0 = {}
    tqdm_0 = module_0.tqdm(total=dict_0, ascii=dict_0, gui=dict_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total == {}
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii == {}
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui == {}
    assert tqdm_0.start_t == pytest.approx(1733010388.5113103, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5113103, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0


def test_case_13():
    object_0 = module_1.object()
    tqdm_0 = module_0.tqdm(leave=object_0, disable=object_0, unit=object_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert (
        f"{type(tqdm_0.leave).__module__}.{type(tqdm_0.leave).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert (
        f"{type(tqdm_0.disable).__module__}.{type(tqdm_0.disable).__qualname__}"
        == "builtins.object"
    )
    assert (
        f"{type(tqdm_0.unit).__module__}.{type(tqdm_0.unit).__qualname__}"
        == "builtins.object"
    )
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5124779, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5124779, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0


def test_case_14():
    str_0 = "6L[M7\x0c{uJWZ2ySx_\rA"
    tqdm_0 = module_0.tqdm(str_0, total=str_0, disable=str_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert len(tqdm_0) == 18
    dict_0 = {str_0: tqdm_0}
    complex_0 = 3242.2 + 2783j
    bool_0 = True
    list_0 = [dict_0]
    bytes_0 = b"G-\xd9\xc8\xb5\xaf"
    var_0 = tqdm_0.close()
    tuple_0 = (complex_0, bool_0, list_0, bytes_0)
    tuple_1 = (tqdm_0, dict_0, tuple_0)
    var_1 = module_0.StatusPrinter(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    tqdm_0 = module_0.tqdm(total=none_type_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.514819, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.514819, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    object_0 = module_1.object()
    tqdm_0.__len__()


def test_case_16():
    str_0 = "'dQHP"
    tqdm_0 = module_0.tqdm(desc=str_0, mininterval=str_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == "'dQHP: "
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == "'dQHP"
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5163305, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5163305, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0


def test_case_17():
    int_0 = 540
    tqdm_0 = module_0.format_sizeof(int_0)
    assert tqdm_0 == "540"


@pytest.mark.xfail(strict=True)
def test_case_18():
    dict_0 = {}
    tqdm_0 = module_0.tqdm(total=dict_0, ascii=dict_0, gui=dict_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total == {}
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii == {}
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui == {}
    assert tqdm_0.start_t == pytest.approx(1733010388.5178065, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5178065, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    var_0 = tqdm_0.update()
    assert tqdm_0.n == 1
    module_0.tqdm(tqdm_0, var_0, var_0, ncols=tqdm_0, mininterval=dict_0, gui=tqdm_0)


def test_case_19():
    str_0 = "%hX?"
    tqdm_0 = module_0.tqdm(str_0, unit=str_0, unit_scale=str_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert len(tqdm_0) == 4


def test_case_20():
    bool_0 = True
    tqdm_0 = module_0.tqdm(mininterval=bool_0, miniters=bool_0, unit_scale=bool_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == 0
    assert tqdm_0.miniters is True
    assert tqdm_0.dynamic_miniters is False
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is True
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5207736, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5207736, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    set_0 = {none_type_0}
    tqdm_0 = module_0.tqdm(
        total=none_type_0, mininterval=none_type_0, disable=set_0, gui=set_0
    )
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval is None
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.disable == {None}
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.521879, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.521879, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    var_0 = tqdm_0.update()
    var_0.close()


def test_case_22():
    str_0 = "'dQHP"
    tqdm_0 = module_0.tqdm(str_0, str_0, mininterval=str_0, gui=str_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert len(tqdm_0) == 5


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    tqdm_0 = module_0.tqdm(total=none_type_0, leave=set_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave == {None}
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5243802, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5243802, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    tqdm_1 = module_0.tqdm(
        leave=tqdm_0, mininterval=tqdm_0, disable=set_0, unit=set_0, gui=none_type_0
    )
    assert f"{type(tqdm_1).__module__}.{type(tqdm_1).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_1.iterable is None
    assert tqdm_1.desc == ""
    assert tqdm_1.total is None
    assert (
        f"{type(tqdm_1.leave).__module__}.{type(tqdm_1.leave).__qualname__}"
        == "_tqdm.tqdm"
    )
    assert (
        f"{type(tqdm_1.file).__module__}.{type(tqdm_1.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_1.ncols is None
    assert (
        f"{type(tqdm_1.mininterval).__module__}.{type(tqdm_1.mininterval).__qualname__}"
        == "_tqdm.tqdm"
    )
    assert tqdm_1.miniters == 0
    assert tqdm_1.dynamic_miniters is True
    assert tqdm_1.ascii is False
    assert tqdm_1.disable == {None}
    assert tqdm_1.unit == {None}
    assert tqdm_1.unit_scale is False
    assert tqdm_1.gui is None
    assert tqdm_1.start_t == pytest.approx(1733010388.5248516, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_t == pytest.approx(1733010388.5248516, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_n == 0
    assert tqdm_1.n == 0
    var_0 = tqdm_0.close()
    none_type_1 = None
    module_0.format_meter(var_0, none_type_0, var_0, unit_scale=none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_24():
    int_0 = -253
    none_type_0 = None
    tqdm_0 = module_0.tqdm(
        desc=none_type_0, mininterval=int_0, unit_scale=int_0, gui=none_type_0
    )
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == -253
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale == -253
    assert tqdm_0.gui is None
    assert tqdm_0.start_t == pytest.approx(1733010388.5283391, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5283391, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    var_0 = tqdm_0.update()
    assert tqdm_0.miniters == 1
    assert tqdm_0.last_print_n == 1
    assert tqdm_0.n == 1
    var_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_25():
    float_0 = -1644.13019
    none_type_0 = None
    var_0 = module_0.format_meter(
        float_0, float_0, float_0, float_0, ascii=float_0, unit_scale=none_type_0
    )
    assert var_0 == "100%|#| -1644.13019/-1644.13019 [-1:32:36<00:00,  1.00it/s]"
    var_1 = var_0.__iter__()
    module_0.trange()


@pytest.mark.xfail(strict=True)
def test_case_26():
    dict_0 = {}
    tqdm_0 = module_0.tqdm(total=dict_0, ascii=dict_0, gui=dict_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total == {}
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii == {}
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui == {}
    assert tqdm_0.start_t == pytest.approx(1733010388.5317612, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5317612, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    module_0.trange(*tqdm_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    set_1 = {none_type_0}
    tqdm_0 = module_0.tqdm(disable=set_0, unit_scale=set_1, gui=none_type_0)
    assert tqdm_0.desc == ""
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.gui is None
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    tqdm_1 = module_0.tqdm(total=none_type_0)
    assert f"{type(tqdm_1).__module__}.{type(tqdm_1).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_1.iterable is None
    assert tqdm_1.desc == ""
    assert tqdm_1.total is None
    assert tqdm_1.leave is False
    assert (
        f"{type(tqdm_1.file).__module__}.{type(tqdm_1.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_1.ncols is None
    assert tqdm_1.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_1.miniters == 0
    assert tqdm_1.dynamic_miniters is True
    assert tqdm_1.ascii is False
    assert tqdm_1.disable is False
    assert tqdm_1.unit == "it"
    assert tqdm_1.unit_scale is False
    assert tqdm_1.gui is False
    assert tqdm_1.start_t == pytest.approx(1733010388.5335274, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_t == pytest.approx(1733010388.5335274, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_n == 0
    assert tqdm_1.n == 0
    var_0 = tqdm_0.__iter__()
    module_0.trange(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    float_0 = 3430.753935
    none_type_0 = None
    module_0.tqdm(
        total=float_0,
        leave=float_0,
        ncols=float_0,
        mininterval=none_type_0,
        ascii=none_type_0,
        unit_scale=none_type_0,
        gui=none_type_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = -245
    none_type_0 = None
    tqdm_0 = module_0.tqdm(
        desc=none_type_0, mininterval=int_0, unit_scale=int_0, gui=none_type_0
    )
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == -245
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale == -245
    assert tqdm_0.gui is None
    assert tqdm_0.start_t == pytest.approx(1733010388.5367825, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5367825, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    var_0 = tqdm_0.__iter__()
    tqdm_1 = module_0.tqdm(
        total=int_0, ncols=int_0, miniters=int_0, ascii=int_0, gui=none_type_0
    )
    assert tqdm_1.desc == ""
    assert tqdm_1.total == -245
    assert tqdm_1.ncols == -245
    assert tqdm_1.mininterval == 0
    assert tqdm_1.miniters == -245
    assert tqdm_1.dynamic_miniters is False
    assert tqdm_1.ascii == -245
    assert tqdm_1.unit == "it"
    assert tqdm_1.gui is None
    assert tqdm_1.last_print_n == 0
    assert tqdm_1.n == 0
    var_1 = tqdm_1.update()
    assert tqdm_1.last_print_n == 1
    assert tqdm_1.n == 1
    var_2 = tqdm_1.update(int_0)
    assert tqdm_1.last_print_n == 2
    assert tqdm_1.n == 2
    module_0.trange()


@pytest.mark.xfail(strict=True)
def test_case_30():
    float_0 = 526.0
    bool_0 = True
    tqdm_0 = module_0.tqdm(mininterval=float_0, miniters=float_0, unit_scale=bool_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == 0
    assert tqdm_0.miniters == pytest.approx(526.0, abs=0.01, rel=0.01)
    assert tqdm_0.dynamic_miniters is False
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is True
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5416486, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5416486, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    none_type_0 = None
    set_0 = tqdm_0.update()
    assert tqdm_0.n == 1
    tqdm_1 = module_0.tqdm(total=none_type_0)
    assert tqdm_1.desc == ""
    assert tqdm_1.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_1.miniters == 0
    assert tqdm_1.dynamic_miniters is True
    assert tqdm_1.ascii is False
    assert tqdm_1.unit == "it"
    assert tqdm_1.last_print_n == 0
    assert tqdm_1.n == 0
    tqdm_2 = module_0.tqdm(tqdm_1, ascii=tqdm_1, disable=set_0, gui=set_0)
    assert f"{type(tqdm_2).__module__}.{type(tqdm_2).__qualname__}" == "_tqdm.tqdm"
    assert (
        f"{type(tqdm_2.iterable).__module__}.{type(tqdm_2.iterable).__qualname__}"
        == "_tqdm.tqdm"
    )
    assert tqdm_2.desc == ""
    assert tqdm_2.total is None
    assert tqdm_2.leave is False
    assert (
        f"{type(tqdm_2.file).__module__}.{type(tqdm_2.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_2.ncols is None
    assert tqdm_2.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_2.miniters == 0
    assert tqdm_2.dynamic_miniters is True
    assert (
        f"{type(tqdm_2.ascii).__module__}.{type(tqdm_2.ascii).__qualname__}"
        == "_tqdm.tqdm"
    )
    assert tqdm_2.disable is None
    assert tqdm_2.unit == "it"
    assert tqdm_2.unit_scale is False
    assert tqdm_2.gui is None
    assert tqdm_2.start_t == pytest.approx(1733010388.5433192, abs=0.01, rel=0.01)
    assert tqdm_2.last_print_t == pytest.approx(1733010388.5433192, abs=0.01, rel=0.01)
    assert tqdm_2.last_print_n == 0
    assert tqdm_2.n == 0
    var_0 = tqdm_1.update()
    assert tqdm_1.n == 1
    var_1 = tqdm_2.close()
    var_2 = tqdm_2.update()
    assert tqdm_2.n == 1
    module_0.trange(*tqdm_2)


@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = True
    var_0 = module_0.format_interval(bool_0)
    assert var_0 == "00:01"
    var_1 = var_0.__iter__()
    float_0 = -832.717
    tqdm_0 = module_0.tqdm(
        total=bool_0, leave=var_0, ncols=bool_0, ascii=var_0, gui=var_0
    )
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is True
    assert tqdm_0.leave == "00:01"
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is True
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii == "00:01"
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5511127, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5511127, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    tqdm_1 = module_0.tqdm(
        var_1, mininterval=float_0, miniters=float_0, unit_scale=var_0
    )
    assert f"{type(tqdm_1).__module__}.{type(tqdm_1).__qualname__}" == "_tqdm.tqdm"
    assert (
        f"{type(tqdm_1.iterable).__module__}.{type(tqdm_1.iterable).__qualname__}"
        == "builtins.str_iterator"
    )
    assert tqdm_1.desc == ""
    assert tqdm_1.total is None
    assert tqdm_1.leave is False
    assert (
        f"{type(tqdm_1.file).__module__}.{type(tqdm_1.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_1.ncols is None
    assert tqdm_1.mininterval == 0
    assert tqdm_1.miniters == pytest.approx(-832.717, abs=0.01, rel=0.01)
    assert tqdm_1.dynamic_miniters is False
    assert tqdm_1.ascii is False
    assert tqdm_1.disable is False
    assert tqdm_1.unit == "it"
    assert tqdm_1.unit_scale == "00:01"
    assert tqdm_1.gui is False
    assert tqdm_1.start_t == pytest.approx(1733010388.5517132, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_t == pytest.approx(1733010388.5517132, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_n == 0
    assert tqdm_1.n == 0
    tqdm_2 = module_0.tqdm(tqdm_1, ascii=tqdm_1, disable=var_1, gui=var_1)
    assert tqdm_2.desc == ""
    assert tqdm_2.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_2.miniters == 0
    assert tqdm_2.dynamic_miniters is True
    assert (
        f"{type(tqdm_2.ascii).__module__}.{type(tqdm_2.ascii).__qualname__}"
        == "_tqdm.tqdm"
    )
    assert tqdm_2.unit == "it"
    assert tqdm_2.last_print_n == 0
    assert tqdm_2.n == 0
    module_0.trange(*tqdm_2)


@pytest.mark.xfail(strict=True)
def test_case_32():
    float_0 = -832.717
    bool_0 = True
    var_0 = module_0.format_meter(float_0, bool_0, bool_0, ascii=float_0)
    assert (
        var_0
        == "-83272%|| -832.717/True [00:01<-1:59:59, -832.72it/s]"
    )
    var_0.close()


@pytest.mark.xfail(strict=True)
def test_case_33():
    float_0 = -832.717
    bool_0 = True
    var_0 = module_0.format_interval(float_0)
    assert var_0 == "-1:46:08"
    var_1 = module_0.format_meter(float_0, bool_0, float_0, unit_scale=float_0)
    assert (
        var_1
        == "-83272%|▉| -833/1.00 [-1:46:08<13:53, 1.00it/s]"
    )
    var_2 = module_0.format_meter(float_0, float_0, float_0, prefix=var_1)
    assert (
        var_2
        == "-83272%|▉| -833/1.00 [-1:46:08<13:53, 1.00it/s]100%|██████████| -832.717/-832.717 [-1:46:08<00:00,  1.00it/s]"
    )
    tqdm_0 = module_0.tqdm(mininterval=float_0, miniters=float_0, unit_scale=bool_0)
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is None
    assert tqdm_0.leave is False
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is None
    assert tqdm_0.mininterval == 0
    assert tqdm_0.miniters == pytest.approx(-832.717, abs=0.01, rel=0.01)
    assert tqdm_0.dynamic_miniters is False
    assert tqdm_0.ascii is False
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is True
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5574305, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5574305, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    var_3 = tqdm_0.close()
    var_4 = tqdm_0.close()
    var_5 = module_0.StatusPrinter(var_1)
    module_0.trange()


@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = True
    var_0 = module_0.format_interval(bool_0)
    assert var_0 == "00:01"
    float_0 = -832.717
    bool_1 = True
    tqdm_0 = module_0.tqdm(
        total=bool_0, leave=var_0, ncols=bool_0, ascii=bool_1, gui=var_0
    )
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is True
    assert tqdm_0.leave == "00:01"
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is True
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is True
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.5606499, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.5606499, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    bool_2 = False
    var_1 = tqdm_0.close()
    var_2 = module_0.format_meter(float_0, float_0, float_0, bool_2, var_0)
    assert var_2 == "00:01100% -832.717/-832.717 [-1:46:08<00:00,  1.00it/s]"
    tqdm_1 = module_0.tqdm(mininterval=float_0, miniters=float_0, unit_scale=bool_2)
    assert f"{type(tqdm_1).__module__}.{type(tqdm_1).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_1.iterable is None
    assert tqdm_1.desc == ""
    assert tqdm_1.total is None
    assert tqdm_1.leave is False
    assert (
        f"{type(tqdm_1.file).__module__}.{type(tqdm_1.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_1.ncols is None
    assert tqdm_1.mininterval == 0
    assert tqdm_1.miniters == pytest.approx(-832.717, abs=0.01, rel=0.01)
    assert tqdm_1.dynamic_miniters is False
    assert tqdm_1.ascii is False
    assert tqdm_1.disable is False
    assert tqdm_1.unit == "it"
    assert tqdm_1.unit_scale is False
    assert tqdm_1.gui is False
    assert tqdm_1.start_t == pytest.approx(1733010388.563696, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_t == pytest.approx(1733010388.563696, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_n == 0
    assert tqdm_1.n == 0
    var_3 = tqdm_1.close()
    set_0 = {float_0, float_0}
    var_4 = module_0.format_interval(float_0)
    assert var_4 == "-1:46:08"
    tqdm_2 = module_0.tqdm(tqdm_1, ascii=tqdm_1, disable=set_0, gui=set_0)
    assert f"{type(tqdm_2).__module__}.{type(tqdm_2).__qualname__}" == "_tqdm.tqdm"
    assert (
        f"{type(tqdm_2.iterable).__module__}.{type(tqdm_2.iterable).__qualname__}"
        == "_tqdm.tqdm"
    )
    assert tqdm_2.desc == ""
    assert tqdm_2.total is None
    assert tqdm_2.leave is False
    assert (
        f"{type(tqdm_2.file).__module__}.{type(tqdm_2.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_2.ncols is None
    assert tqdm_2.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_2.miniters == 0
    assert tqdm_2.dynamic_miniters is True
    assert (
        f"{type(tqdm_2.ascii).__module__}.{type(tqdm_2.ascii).__qualname__}"
        == "_tqdm.tqdm"
    )
    assert (
        f"{type(tqdm_2.disable).__module__}.{type(tqdm_2.disable).__qualname__}"
        == "builtins.set"
    )
    assert len(tqdm_2.disable) == 1
    assert tqdm_2.unit == "it"
    assert tqdm_2.unit_scale is False
    assert tqdm_2.gui is False
    assert tqdm_2.start_t == pytest.approx(1733010388.565658, abs=0.01, rel=0.01)
    assert tqdm_2.last_print_t == pytest.approx(1733010388.565658, abs=0.01, rel=0.01)
    assert tqdm_2.last_print_n == 0
    assert tqdm_2.n == 0
    var_5 = tqdm_1.update()
    assert tqdm_1.last_print_n == 1
    assert tqdm_1.n == 1
    module_0.trange(*tqdm_2)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = True
    var_0 = module_0.format_interval(bool_0)
    assert var_0 == "00:01"
    var_1 = var_0.__iter__()
    float_0 = -832.717
    bool_1 = True
    tqdm_0 = module_0.tqdm(
        total=bool_0, leave=var_0, ncols=bool_0, ascii=bool_1, gui=var_0
    )
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is True
    assert tqdm_0.leave == "00:01"
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is True
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is True
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.570763, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.570763, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    var_2 = tqdm_0.update()
    assert tqdm_0.n == 1
    bool_2 = True
    var_3 = module_0.format_interval(float_0)
    assert var_3 == "-1:46:08"
    var_4 = tqdm_0.close()
    var_5 = module_0.format_meter(float_0, float_0, float_0, prefix=var_3)
    assert (
        var_5
        == "-1:46:08100%|██████████| -832.717/-832.717 [-1:46:08<00:00,  1.00it/s]"
    )
    var_6 = var_1.__iter__()
    tqdm_1 = module_0.tqdm(mininterval=float_0, miniters=float_0, unit_scale=bool_2)
    assert f"{type(tqdm_1).__module__}.{type(tqdm_1).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_1.iterable is None
    assert tqdm_1.desc == ""
    assert tqdm_1.total is None
    assert tqdm_1.leave is False
    assert (
        f"{type(tqdm_1.file).__module__}.{type(tqdm_1.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_1.ncols is None
    assert tqdm_1.mininterval == 0
    assert tqdm_1.miniters == pytest.approx(-832.717, abs=0.01, rel=0.01)
    assert tqdm_1.dynamic_miniters is False
    assert tqdm_1.ascii is False
    assert tqdm_1.disable is False
    assert tqdm_1.unit == "it"
    assert tqdm_1.unit_scale is True
    assert tqdm_1.gui is False
    assert tqdm_1.start_t == pytest.approx(1733010388.573387, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_t == pytest.approx(1733010388.573387, abs=0.01, rel=0.01)
    assert tqdm_1.last_print_n == 0
    assert tqdm_1.n == 0
    var_7 = tqdm_1.close()
    set_0 = {float_0, float_0}
    tqdm_2 = module_0.tqdm(tqdm_1, ascii=tqdm_1, disable=set_0, gui=set_0)
    assert f"{type(tqdm_2).__module__}.{type(tqdm_2).__qualname__}" == "_tqdm.tqdm"
    assert (
        f"{type(tqdm_2.iterable).__module__}.{type(tqdm_2.iterable).__qualname__}"
        == "_tqdm.tqdm"
    )
    assert tqdm_2.desc == ""
    assert tqdm_2.total is None
    assert tqdm_2.leave is False
    assert (
        f"{type(tqdm_2.file).__module__}.{type(tqdm_2.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_2.ncols is None
    assert tqdm_2.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_2.miniters == 0
    assert tqdm_2.dynamic_miniters is True
    assert (
        f"{type(tqdm_2.ascii).__module__}.{type(tqdm_2.ascii).__qualname__}"
        == "_tqdm.tqdm"
    )
    assert (
        f"{type(tqdm_2.disable).__module__}.{type(tqdm_2.disable).__qualname__}"
        == "builtins.set"
    )
    assert len(tqdm_2.disable) == 1
    assert tqdm_2.unit == "it"
    assert tqdm_2.unit_scale is False
    assert tqdm_2.gui is False
    assert tqdm_2.start_t == pytest.approx(1733010388.5753238, abs=0.01, rel=0.01)
    assert tqdm_2.last_print_t == pytest.approx(1733010388.5753238, abs=0.01, rel=0.01)
    assert tqdm_2.last_print_n == 0
    assert tqdm_2.n == 0
    var_8 = tqdm_1.update()
    assert tqdm_1.last_print_n == 1
    assert tqdm_1.n == 1
    bool_1.update()


@pytest.mark.xfail(strict=True)
def test_case_36():
    bool_0 = True
    var_0 = module_0.format_interval(bool_0)
    assert var_0 == "00:01"
    float_0 = -831.2850552822733
    bool_1 = True
    tqdm_0 = module_0.tqdm(
        total=bool_0, leave=var_0, ncols=bool_0, ascii=bool_1, gui=var_0
    )
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is True
    assert tqdm_0.leave == "00:01"
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is True
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is True
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.670193, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.670193, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    var_1 = tqdm_0.close()
    var_2 = module_0.format_meter(float_0, float_0, float_0, prefix=var_0)
    assert (
        var_2
        == "00:01100%|██████████| -831.2850552822733/-831.2850552822733 [-1:46:09<00:00,  1.00it/s]"
    )
    var_3 = tqdm_0.close()
    var_4 = module_0.StatusPrinter(bool_1)
    tqdm_1 = module_0.tqdm(var_0, ascii=var_0, disable=var_3, gui=var_3)
    assert len(tqdm_1) == 5
    var_5 = tqdm_0.update()
    assert tqdm_0.n == 1
    module_0.trange(*tqdm_1)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = True
    var_0 = module_0.format_interval(bool_0)
    assert var_0 == "00:01"
    float_0 = 558.16
    bool_1 = True
    tqdm_0 = module_0.tqdm(
        total=bool_0, leave=var_0, ncols=bool_0, ascii=bool_1, gui=var_0
    )
    assert f"{type(tqdm_0).__module__}.{type(tqdm_0).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_0.iterable is None
    assert tqdm_0.desc == ""
    assert tqdm_0.total is True
    assert tqdm_0.leave == "00:01"
    assert (
        f"{type(tqdm_0.file).__module__}.{type(tqdm_0.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_0.ncols is True
    assert tqdm_0.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_0.miniters == 0
    assert tqdm_0.dynamic_miniters is True
    assert tqdm_0.ascii is True
    assert tqdm_0.disable is False
    assert tqdm_0.unit == "it"
    assert tqdm_0.unit_scale is False
    assert tqdm_0.gui is False
    assert tqdm_0.start_t == pytest.approx(1733010388.675669, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_t == pytest.approx(1733010388.675669, abs=0.01, rel=0.01)
    assert tqdm_0.last_print_n == 0
    assert tqdm_0.n == 0
    bool_2 = True
    var_1 = tqdm_0.close()
    var_2 = module_0.format_meter(float_0, float_0, float_0, prefix=var_0)
    assert var_2 == "00:01100%|██████████| 558.16/558.16 [09:18<00:00,  1.00it/s]"
    tqdm_1 = module_0.tqdm(
        var_0, mininterval=float_0, miniters=float_0, ascii=var_0, unit_scale=bool_2
    )
    assert f"{type(tqdm_1).__module__}.{type(tqdm_1).__qualname__}" == "_tqdm.tqdm"
    assert len(tqdm_1) == 5
    var_3 = tqdm_1.close()
    set_0 = {float_0, float_0}
    var_4 = module_0.StatusPrinter(bool_1)
    var_5 = tqdm_1.close()
    tqdm_2 = module_0.tqdm(desc=var_2, ncols=var_5, miniters=var_5, ascii=var_4)
    assert f"{type(tqdm_2).__module__}.{type(tqdm_2).__qualname__}" == "_tqdm.tqdm"
    assert tqdm_2.iterable is None
    assert (
        tqdm_2.desc == "00:01100%|██████████| 558.16/558.16 [09:18<00:00,  1.00it/s]: "
    )
    assert tqdm_2.total is None
    assert tqdm_2.leave is False
    assert (
        f"{type(tqdm_2.file).__module__}.{type(tqdm_2.file).__qualname__}"
        == "_io.TextIOWrapper"
    )
    assert tqdm_2.ncols is None
    assert tqdm_2.mininterval == pytest.approx(0.1, abs=0.01, rel=0.01)
    assert tqdm_2.miniters == 0
    assert tqdm_2.dynamic_miniters is True
    assert tqdm_2.disable is False
    assert tqdm_2.unit == "it"
    assert tqdm_2.unit_scale is False
    assert tqdm_2.gui is False
    assert tqdm_2.start_t == pytest.approx(1733010388.6793919, abs=0.01, rel=0.01)
    assert tqdm_2.last_print_t == pytest.approx(1733010388.6793919, abs=0.01, rel=0.01)
    assert tqdm_2.last_print_n == 0
    assert tqdm_2.n == 0
    tqdm_3 = module_0.tqdm(tqdm_1, ascii=tqdm_1, disable=set_0, gui=set_0)
    assert len(tqdm_3) == 5
    var_6 = tqdm_1.update()
    module_0.trange(*tqdm_3)
