# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import quotation_marks as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "~f8`GzS)%[$|@GLSH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 3079.99
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 4009
    str_0 = "u_T`-{.xCS"
    dict_0 = {int_0: int_0, int_0: int_0, str_0: str_0}
    bytes_0 = b"\x85\xdb\x91))\xd3\x98O\x91\xf8\xa20\x8d\x16r"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    complex_0 = -1522.446 - 3534.371j
    bytes_0 = b"\x8f\x8cU\x98\x0f\x17"
    dict_0 = {complex_0: complex_0, bytes_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = -1124
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    float_0 = -4837.518397
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -649
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = 'H[5,,\nd\x0c//;"yH=l_'
    float_0 = -1636.93
    dict_0 = {str_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = 2969
    module_0.get_new_command(int_0, int_0)


def test_case_14():
    pass


@pytest.mark.xfail(strict=True)
def test_case_15():
    bytes_0 = b"\xa8\x98\x87"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "kn)9h{L|C)Fs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = False
    int_0 = 815
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, int_0: int_0}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bytes_0 = b"\xf7\xe8ru\x9f\xc6\xfa3\x94b\xba\x04\xaf\xeb1"
    str_0 = "h`fj7cI'y+`\x0cs|Myb}"
    tuple_0 = (bytes_0, str_0, bytes_0)
    str_1 = "l\x0bw"
    tuple_1 = (tuple_0, str_1)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    tuple_0 = ()
    int_0 = -1016
    bool_0 = False
    tuple_1 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_25():
    int_0 = 191
    list_0 = [int_0, int_0]
    bool_0 = False
    str_0 = "XFk0&er}QYl'"
    tuple_0 = (list_0, bool_0, str_0)
    set_0 = set()
    bytes_0 = b"\xb2m\x99\x1dw\xd6"
    tuple_1 = (tuple_0, set_0, bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_26():
    int_0 = -205
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    int_0 = 1990
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    int_0 = -1104
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    int_0 = -2384
    bytes_0 = b"\xbb6P\xae)\xec\x8f\x97\x1c/\xde\xaa|\x0b\xc0"
    bool_0 = False
    tuple_0 = (int_0, bytes_0, bool_0)
    set_0 = {int_0, int_0, tuple_0}
    tuple_1 = (tuple_0, set_0)
    tuple_2 = (tuple_1,)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = "si/u*6s<\t4"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    float_0 = -477.246
    set_0 = {float_0, float_0}
    tuple_0 = (set_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "\n2l\\\t HoPQh"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    bytes_0 = b"\x15b\x18"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    float_0 = 1735.774
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = "@)|-DTj#ycWgUFk\x0c_?_="
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = "Cx6T!\rV\r\x0cl\t!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    str_0 = "'Q-B#$#V*"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = "0\tY/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = "\r)fYl_WLI|M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    str_0 = "IG{\x0cM"
    str_1 = "@il"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = "R|}iv2EnK"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    float_0 = 1382.46
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    float_0 = -542.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    complex_0 = -4260.9075 + 1179.626j
    set_0 = set()
    list_0 = [complex_0, complex_0, set_0, complex_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bytes_0 = b"\x97\xec\xaf\xdc\xc48\xca2\xc7\x8f%\x8a"
    str_0 = "M"
    dict_0 = {str_0: bytes_0}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    int_0 = -192
    bool_0 = False
    dict_0 = {int_0: int_0, bool_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_1}
    list_0 = [set_0, bool_1, bool_1]
    tuple_0 = (set_0, list_0)
    bytes_0 = b"\xb0"
    tuple_1 = (tuple_0, list_0, bytes_0, list_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    str_0 = ":\t\r#BRcl7C1DA`-JNrg_"
    dict_0 = {str_0: str_0}
    set_0 = set()
    bool_0 = False
    list_0 = [dict_0, bool_0, dict_0]
    tuple_0 = ()
    tuple_1 = (set_0, str_0, list_0, tuple_0)
    list_1 = [dict_0, dict_0, str_0, tuple_1]
    bytes_0 = b'*\xd6\xfa\xdd\xf5\x8f)\x8f^\xce\xa2"o\xce\x05\xb6z\xe2'
    int_0 = -2848
    tuple_2 = (list_1, bytes_0, int_0)
    module_0.match(tuple_2, tuple_2)


def test_case_63():
    pass


@pytest.mark.xfail(strict=True)
def test_case_64():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    str_0 = "WXpeVVVK9iP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    bytes_0 = b"\xdd\x1b\x0c\x93\xcaQ\xd9;\xb2W.\xaa\xf2\x97\x8e'*\x8c\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    int_0 = 2583
    str_0 = "kK\t;cPd\x0c/VPB"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    int_0 = 2635
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    float_0 = 2247.93319
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_74():
    pass


@pytest.mark.xfail(strict=True)
def test_case_75():
    bytes_0 = b"\x8a\xcb\xd7\x8c\x90j[\xab\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    none_type_0 = None
    str_0 = "<h)]pZj4-v 3q!C\r_"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    bytes_0 = b"\xa8\xe1\xb5\xc8\x122\xd7d}\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    str_0 = "r\nS~/"
    bool_0 = False
    module_0.match(str_0, bool_0)


def test_case_79():
    pass


@pytest.mark.xfail(strict=True)
def test_case_80():
    float_0 = -217.94
    module_0.get_new_command(float_0, float_0)


def test_case_81():
    pass


@pytest.mark.xfail(strict=True)
def test_case_82():
    str_0 = "p^'A1CAC>r"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, str_0)


def test_case_83():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    int_0 = 175
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    float_0 = 3740.238208
    bool_0 = False
    set_0 = {float_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    str_0 = "B=}'T"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    bytes_0 = b"\xf4\xfd_,\x10\xa5\xc6\xbc\x1d]\xbc\x80\x0eh"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    str_0 = "^X&<"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    none_type_0 = None
    int_0 = -2201
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    str_0 = "b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    str_0 = "0$$A<3<+/%5rE "
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    bytes_0 = b"{\xcb\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    bytes_0 = b"\x7f\xecK\x14\t;h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bool_0 = True
    int_0 = 1508
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


def test_case_99():
    pass


def test_case_100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_101():
    int_0 = -710
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    str_0 = "-W,88\x0bM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    str_0 = "Pmtv6yZeU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    int_0 = 2453
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    float_0 = 1967.41
    list_0 = [float_0, float_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    str_0 = "G)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    int_0 = -2441
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_115():
    str_0 = "H0 d7y2?Ru&=OL)P/o-6"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_116():
    pass


@pytest.mark.xfail(strict=True)
def test_case_117():
    int_0 = -36
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    str_0 = "a?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    bytes_0 = b"\xb3hce\xfaj\xf6\xd3\xa8\xd3\xca\xbe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_120():
    pass


@pytest.mark.xfail(strict=True)
def test_case_121():
    int_0 = -3909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    bytes_0 = b"\xedqn\xea\xa0\xb6c\x95a\x16\xfc\x11"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    float_0 = -192.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_126():
    int_0 = 966
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_128():
    int_0 = -3689
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    str_0 = "U<yg "
    module_0.get_new_command(str_0, str_0)


def test_case_131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_132():
    bytes_0 = b"\xd7\xb8\x83[WL*I\x07O\xbf\xfe\xcc\xb2\xcd\xf9\xee"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0, dict_0]
    tuple_0 = (dict_0, bool_0, list_0)
    bytes_0 = b"\x15"
    tuple_1 = (tuple_0, tuple_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    float_0 = 592.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    bytes_0 = b"\x06`\xb6\xc8\xac\xe1w\xf4\x0c\x8d,M1\xac\x16p\xad\xbe\x93\xe5"
    set_0 = {bytes_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    float_0 = -3082.06536
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    bytes_0 = b"\xaa\xab\xd25\xf4\xcb\xe0\xac\x92\x99\xfeM{\xe6\xa7\x85\xf9\x14\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    bytes_0 = b"\xcdp\x1c\xe91L\x05\xa4\xd1\xf8~\xb3\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    float_0 = -3560.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    str_0 = "pUmV/D;v\tJgl0L"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    float_0 = -1879.0
    tuple_0 = (float_0,)
    tuple_1 = (tuple_0, float_0, float_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    str_0 = "'WRk^iI\"0\\sC3/ BV\nz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    dict_0 = {}
    str_0 = "Z9>lBrWmhs!u"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    complex_0 = -120.242 - 1977.7293j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    str_0 = "P{y42\x0bc^7uh^<YT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    int_0 = -2891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    int_0 = -3281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    int_0 = 2781
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    str_0 = "h672.Y\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    str_0 = '\x0c"1jw)*-os50!#'
    tuple_0 = (str_0,)
    int_0 = -1877
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    int_0 = 1560
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_161():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_162():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    float_0 = -4770.0
    float_1 = -2258.03
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_164():
    complex_0 = 603.8546 - 2601.89373j
    bytes_0 = b"\xbf"
    module_0.match(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    bytes_0 = b"+`\xb1\xd0I\x9c\x9b\xc0\x19\xd0\x1c4\xf3z#e~{"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    float_0 = 932.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    object_0 = module_1.object()
    float_0 = 1139.499556
    list_0 = [object_0, object_0, float_0, float_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    str_0 = "0sk .oBEl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    float_0 = 1329.68363
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    bytes_0 = b"NO\xa1`\xebX\xf9-\x85\x1d\xf4z\xcct\x7fs\x8c\xb5\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    float_0 = 769.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    int_0 = 2129
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    int_0 = 319
    dict_0 = {int_0: int_0}
    bool_0 = False
    tuple_0 = (int_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bool_0 = True
    float_0 = -955.9
    tuple_0 = (bool_0, float_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    int_0 = 3176
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    bytes_0 = b":"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    dict_0 = {tuple_0: object_0, tuple_0: object_0}
    int_0 = -3385
    tuple_1 = (tuple_0, dict_0, int_0, int_0)
    int_1 = -3095
    tuple_2 = (tuple_1, int_1, tuple_1)
    module_0.get_new_command(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, list_0, list_0]
    module_0.match(bool_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_183():
    bytes_0 = b"\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    str_0 = "yU:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    str_0 = "["
    bytes_0 = b"\xd4^\xa3\xd5y"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    str_0 = "mh_=z-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


def test_case_192():
    pass


@pytest.mark.xfail(strict=True)
def test_case_193():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_195():
    complex_0 = 1634 + 781.950342j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    str_0 = "&gz6|_m{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    str_0 = "S|xdySq8a5"
    set_0 = {str_0}
    bool_0 = True
    str_1 = ""
    tuple_0 = (set_0, bool_0, str_1, set_0)
    list_0 = [tuple_0, str_0, tuple_0, set_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    str_0 = "Z~v{:j<hF]7cIS8$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    bool_0 = True
    bool_1 = False
    str_0 = "Ed!eA3@"
    tuple_0 = (bool_0, bool_1, str_0)
    set_0 = {tuple_0, bool_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    int_0 = 1890
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    float_0 = 919.1
    module_0.match(float_0, float_0)


def test_case_203():
    pass


@pytest.mark.xfail(strict=True)
def test_case_204():
    complex_0 = 369.98838 - 1851.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    bytes_0 = b"\xd7Hbi(\xd6q\xb1\xcf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    str_0 = "D;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    bytes_0 = b"\x83\xb8\xde\xe5\xbc"
    list_0 = []
    bool_0 = True
    tuple_0 = (set_0, bytes_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_208():
    pass


@pytest.mark.xfail(strict=True)
def test_case_209():
    str_0 = "\tF$rn7BA;u%<ac"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    bytes_0 = b"\xaa/\xe8Q\x0b\xb2\xb5\x1c\xf8\xa4\\"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    str_0 = "x\r2\x0c;`818`'D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    str_0 = "TsrS"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    str_0 = "BC^ZI\x0cgvx7Y*DHW^aT!m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    bytes_0 = b"\x15_\xaa_5\x81\x08\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    float_0 = 39.3769
    set_0 = {float_0}
    str_0 = "rTo:y"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    bytes_0 = b"<\xa3\xa3\xe1.w\xd2\xee\xbaz\xa5/K\xc9-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    bytes_0 = b"\x98:\x9e6\x98\x88"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    str_0 = "H$Q1j%v.CFe\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    set_0 = set()
    float_0 = 1407.7077
    tuple_0 = (set_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    str_0 = "6yNTob\\iS"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    bytes_0 = b"\xee\xe1\x80Pbp\xb7j\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    int_0 = 756
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    float_0 = 2345.19449
    tuple_0 = ()
    bytes_0 = b"t@\xe2g4\xc2\x1a\x9cH\x8e\xa1J\xffE3#\xac"
    list_0 = [bytes_0, float_0, float_0]
    tuple_1 = (float_0, tuple_0, bytes_0, list_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    str_0 = "O\x0c+x"
    module_0.get_new_command(str_0, str_0)


def test_case_228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_229():
    bytes_0 = b"(\x15\xf4x\xd5\xc6+\x96\xba\xe2\xad\xdbK\x1e]\xc0\xfb\x9c/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    bytes_0 = b"\x9a&\xbd\xb6"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    int_0 = 1841
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    str_0 = ",u("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    bytes_0 = b""
    bytes_1 = b"\xb5\xd0\xe6"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_234():
    int_0 = -1306
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


def test_case_235():
    pass


@pytest.mark.xfail(strict=True)
def test_case_236():
    str_0 = "*EQ$Fht3?0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    bytes_0 = b"?`\x14\xfbP\xa3\xdb\\\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    bytes_0 = b"\xa7\x05\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    str_0 = "A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    bytes_0 = b"\x08\xfe\x8a\x1e\xac/\x16w\x99\x8f\x00e\xd3\xde\xban\xbag"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    complex_0 = 1975.65 - 781.1727j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    int_0 = -3102
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    int_0 = -685
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    float_0 = 2576.85
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    str_0 = "u@.>>]/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    int_0 = -5164
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    float_0 = -803.517831
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    str_0 = '5/"[]i'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    int_0 = -3281
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0, int_0]
    module_1.object(*list_1, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    str_0 = "J"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


def test_case_252():
    pass


@pytest.mark.xfail(strict=True)
def test_case_253():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_0: bool_1}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    complex_0 = -611 - 2351.604j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    str_0 = "d]m=\t[v&Wq70S=4kj"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


def test_case_258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_259():
    str_0 = "N#ROj"
    bytes_0 = b"~,"
    set_0 = {str_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    str_0 = "hYUJuz"
    module_0.get_new_command(str_0, str_0)


def test_case_261():
    pass


@pytest.mark.xfail(strict=True)
def test_case_262():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    bytes_0 = b"\xda\x98\xdb\x04G\xbe\x1eA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    str_0 = "Y(T|XeKOwRw&bU&N2Q"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    int_0 = 571
    list_0 = [int_0, int_0, int_0]
    bool_0 = True
    bytes_0 = b"\x00\xd3\x9d\xd2U\t\xa0\x1fC{\xf3\x98]\x9ah\x18\xd0\xb4\xed\xbe"
    tuple_0 = (list_0, bool_0, bytes_0)
    bytes_1 = b"\xff#\\\x81'\xe8\x92\xe8"
    list_1 = [tuple_0, tuple_0, tuple_0, bytes_1]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    int_0 = 1595
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    bool_0 = False
    str_0 = "c9'\\y z#Q@"
    str_1 = "k\tSX9^hf\nl\x0bVZ\tU<Y5;i"
    dict_0 = {str_0: str_0, str_1: bool_0, str_1: bool_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    float_0 = -1892.28493
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    str_0 = "?9\\Y M.uzXvz\tO[[{f)>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    float_0 = 109.5
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    set_0 = set()
    tuple_0 = (set_0,)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    list_0 = []
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    str_0 = "le5T3{*m+/+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    int_0 = 1466
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    float_0 = -2558.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    int_0 = -1071
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_284():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    bytes_0 = b"i\xc3\xce\xcc\xa9\xbb\x9e\x0e\x0b\xe4\xd6\x870\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    int_0 = 1349
    bool_0 = True
    set_0 = {int_0, int_0, int_0, bool_0}
    list_0 = [int_0]
    tuple_0 = (set_0, bool_0, bool_0, list_0)
    tuple_1 = (tuple_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    dict_0 = {}
    bytes_0 = b"\x98\x03\xf7~7\\"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    str_0 = "wtf{))\x0cL|!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    int_0 = -419
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    str_0 = "."
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    bytes_0 = b"H7I\x8eW\x1b\xc1W\xe9q\x85\xc0\x8dB>\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    float_0 = -3497.002
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    float_0 = 712.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    bytes_0 = b",9\x05\xea\x0bhR\xdcn\x94Y"
    list_0 = [bytes_0, bytes_0]
    dict_0 = {}
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "]S}+"
    str_1 = "qHO"
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: list_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


def test_case_299():
    pass


@pytest.mark.xfail(strict=True)
def test_case_300():
    str_0 = "g9"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    float_0 = 35.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    bytes_0 = b"C\xa3-Z\xe1&\x15\x8a"
    list_0 = [bytes_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    int_0 = -1888
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    float_0 = 1206.0
    object_0 = module_1.object()
    dict_0 = {float_0: object_0, object_0: float_0}
    tuple_0 = (float_0, dict_0, dict_0)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    bool_0 = False
    bytes_0 = b"{e\x17\x8d\xf9U\xc2/\xd7\x96\xbf\xe7\xca7\x1e\xbd"
    tuple_0 = (bool_0, bytes_0)
    set_0 = {bool_0, bool_0, tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    int_0 = -2699
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    bytes_0 = b"6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    int_0 = -2754
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    float_0 = 34.654879
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = "q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    str_0 = "Q;pOg%49e/}"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


def test_case_313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_314():
    str_0 = "Bt@qQ+?wO'EVPU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    int_0 = 95
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    complex_0 = -747.3206 - 3074.394808j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    complex_0 = 1585 - 144.28953j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    str_0 = "9W|igEr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    str_0 = "PjT6+I}["
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    none_type_0 = None
    str_0 = "OFjYw\x0cyDN9l(=CkkLv"
    str_1 = "{]9\x0c]\rAaSv\t%n"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    int_0 = 4286
    set_0 = {int_0}
    list_0 = [set_0, int_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    bytes_0 = b"m#\\\x9d;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    bytes_0 = b"\xc8\xb0\xf0(x6\xd5OQ}\x82\xb6AM"
    module_0.match(bytes_0, bytes_0)


def test_case_326():
    pass


@pytest.mark.xfail(strict=True)
def test_case_327():
    str_0 = "vi9V2;]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    bytes_0 = b"\xb6K\x9b\xef[T\x01\x90\xe0\xcc\xcb\x81\x7f\x02A\xd8L\x112u"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    str_0 = "yy4"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, tuple_0, bool_0, bool_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    str_0 = "|Z|[1s=q>\x0bigPJ;lTp"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


def test_case_332():
    pass


@pytest.mark.xfail(strict=True)
def test_case_333():
    int_0 = -2152
    set_0 = {int_0, int_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    bool_0 = False
    bytes_0 = b"\xb3E\xe6\xfbC"
    module_0.get_new_command(bool_0, bytes_0)


def test_case_336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_337():
    str_0 = "3(, %LXA=FrRi\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    str_0 = "]@CH~m+#+%Tjsh"
    str_1 = ":ejWIfs"
    object_0 = module_1.object()
    str_2 = "f0<2_4{DT}S>"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: object_0, str_2: object_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bytes_0 = b"\x11\xf4\x87|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    tuple_0 = ()
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    bytes_0 = b"\xd9\xe7\x01\x12y\xd9d\xf4P\x06\x9e"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [bytes_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    bytes_0 = b"\xb1(@1j\xfe~\xbc\x9f\xbaT\xd6\xc2\xe9\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    complex_0 = -2917.54 + 1651.899j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    str_0 = "?Dh]l\tyE)\x0cl!\naq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    int_0 = 2158
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    float_0 = 4129.955
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    str_0 = "FTS9labI}b.IAm#[wbvd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    bytes_0 = b"\x95\x82\xbf\xff\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    bytes_0 = b"\xbc\xd6\xee\x02\x0f0"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    str_0 = "sS\r#JfXTn.?K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    str_0 = "fy|[AKtjl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    str_0 = "\\afOf>B"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    int_0 = -243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    float_0 = -1809.383142
    object_0 = module_1.object()
    module_0.match(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    int_0 = -2552
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    int_0 = -2023
    bytes_0 = b"\xf1"
    list_0 = [bytes_0]
    bool_0 = True
    tuple_0 = (int_0, list_0, list_0, bool_0)
    module_1.object(*tuple_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    bytes_0 = b"P4\x9d\xd5\xd8G\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    int_0 = -2297
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    str_0 = "'sF3Y)R/K_:!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    float_0 = 2186.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    str_0 = "LXSoT|C.9F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_372():
    pass


@pytest.mark.xfail(strict=True)
def test_case_373():
    str_0 = "Y_*aOw_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    str_0 = "st[P79twI\x0cpcU/vqRVXK"
    str_1 = "dp&Oa`uBQ"
    str_2 = "{7LmU?tpB\r#OLd9ClH^>"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    int_0 = 703
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    float_0 = -106.57
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    bytes_0 = b"\xdeM\xc4bd{"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    int_0 = 185
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    complex_0 = 3891 - 2906.27327j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    str_0 = "y1R,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    bytes_0 = b"\xda\x116\x82"
    list_0 = [bytes_0]
    str_0 = "F/ie~to^\nv"
    dict_0 = {str_0: list_0, str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    int_0 = -1602
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    str_0 = "Tn"
    none_type_0 = None
    str_1 = '\n14|[[FRQ"FX 7Mj)'
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    str_0 = "b`R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    int_0 = -911
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    bytes_0 = b"F>+@\x83\x97\xbdY\xc6\x14\xd1\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    bool_0 = False
    set_0 = {bool_0}
    dict_0 = {}
    tuple_0 = (set_0, set_0, dict_0, dict_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    bytes_0 = b"vl\x14)S\x8e\x0bV\x15VU\xd0~K}\x98V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    str_0 = "u}T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    str_0 = "GuF2hv\to"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    bytes_0 = b'\xc6\xb6\x8b\xa3"\x1e\xe1\x8e|\x08\r\xf8%\n\x8d\x1f\xa2'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = -704
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    int_0 = -2758
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    complex_0 = -1299 + 320.604j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    bytes_0 = b"\xdd)\xd7\xdc\x1d\r\x0e\xd8\x05bE\x1dp\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    int_0 = -100
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    int_0 = -4055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    str_0 = ":@SPmyhnO#1SdBv2"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    str_0 = "b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    int_0 = 1729
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    bool_0 = False
    int_0 = -1835
    complex_0 = 2072.09695 + 2385j
    str_0 = "3F-n^h7oI I:K[A"
    tuple_0 = (bool_0, complex_0, str_0, int_0)
    bytes_0 = b"\xad\xd7\xb9\xee\xa8Z\x01SK\x92\x07\xce\xa1\x17"
    dict_0 = {tuple_0: bytes_0}
    int_1 = -1805
    tuple_1 = (tuple_0, bytes_0, dict_0, int_1)
    dict_1 = {bool_0: bool_0, bool_0: bool_0, int_0: tuple_1}
    module_0.match(dict_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    bytes_0 = b"\xecrg6BFn\xdc\x9c\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_409():
    pass


def test_case_410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_411():
    complex_0 = -651.222 + 410j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    int_0 = 365
    int_1 = -2411
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bool_0 = False
    str_0 = '(Kb`4]@AlN"[3lo'
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [bool_0, bool_0, bool_0, dict_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    float_0 = 1809.8247
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    int_0 = 1150
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    str_0 = "YfW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    bytes_0 = b"\x86\xce\xb3n\xa7VEP"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_421():
    bytes_0 = b"j\x1d\xc0F\x17\xfc[\xcb"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    bool_0 = False
    list_0 = [bool_0]
    bytes_0 = b"\xb5c\x0cc"
    dict_0 = {}
    tuple_0 = (list_0, bytes_0, dict_0)
    tuple_1 = (tuple_0,)
    tuple_2 = ()
    module_0.match(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_423():
    bytes_0 = b"\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_425():
    int_0 = -1879
    module_0.get_new_command(int_0, int_0)


def test_case_426():
    pass


@pytest.mark.xfail(strict=True)
def test_case_427():
    bytes_0 = b"\x9d\xd6\xefi;\x9c~G\xbdP\xce<\x9b\xd9H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    float_0 = -3716.279005
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_429():
    pass


@pytest.mark.xfail(strict=True)
def test_case_430():
    str_0 = "qgR[h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    str_0 = "hW+]s$KswBmr]Sr"
    bool_0 = False
    str_1 = "k2U<56J*,9nO =>"
    bool_1 = False
    tuple_0 = (bool_0, str_1, bool_1)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    bool_0 = True
    bytes_0 = b"lO\x10\xdb\x1c:#\xf5*"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    int_0 = -655
    dict_0 = {tuple_1: int_0, int_0: tuple_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    str_0 = "K+\tv1T9\n2JkkDqq++|u"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    bytes_0 = b"\xda=\x8d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    int_0 = 2973
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    int_0 = 301
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    float_0 = -267.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    str_0 = "L\\(YC[T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    str_0 = "T}`"
    bytes_0 = b""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, bytes_0: str_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    str_0 = "QK7Blws\ngU[] Oupu#3"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    tuple_0 = ()
    str_0 = "*-IQj&h\r\njG)"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    float_0 = 1742.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    str_0 = "63P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    bool_0 = False
    bytes_0 = b"\x1a\xfd\xee\x9d\x16\xe2t\xf3"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    bytes_0 = b"n\xb4X"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    bytes_0 = b"~\xde$\x96\xd4\xac\x02\xf8\x01Iy\xcaD\xef\x14\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    bytes_0 = b"I\xc1\x8e?%J"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    bytes_0 = b"\xd8Az\r\x00\xaf\xd9\x98\x98\x08\x86\x94.\xd0\xf2\x97\x00\xecxG"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    str_0 = "~'8g.~2mP6'<2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    bytes_0 = b"\xc1\x1a\xb7\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    object_0 = module_1.object()
    int_0 = 2658
    list_0 = [object_0, object_0, int_0]
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    complex_0 = 2652.64 + 5034.97j
    set_0 = {complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    complex_0 = 2428.44 - 3049.31j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    str_0 = "]SF\nJf&oX\x0cO98hD7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    int_0 = 1388
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_464():
    str_0 = "T2n)cM@w\rFb4_H*#J"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    int_0 = 3891
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    bytes_0 = b"\x94\xb7\x80\xf3\xb0\x12\xa8F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    float_0 = -4974.21
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    str_0 = "m6=n>nx6![+8"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    int_0 = 2382
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    int_0 = 547
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    float_0 = 415.9827
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    str_0 = "Z&VeoVCsGd[AfF"
    int_0 = -318
    set_0 = {str_0, int_0, int_0, int_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    str_0 = "'"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    str_0 = "]\\|EP!}0AX#CEq\x0bzdur"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    str_0 = "K"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    str_0 = "Cqo,]G;"
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (str_0, list_0, str_0)
    object_0 = module_1.object()
    module_0.match(tuple_0, object_0)


def test_case_478():
    pass


@pytest.mark.xfail(strict=True)
def test_case_479():
    int_0 = -94
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    complex_0 = 3737.11186 - 1728.641j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    bytes_0 = b"\xc05\x9e"
    tuple_0 = (bytes_0, bytes_0)
    tuple_1 = (complex_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, set_0)


def test_case_481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_482():
    int_0 = 633
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    int_0 = 165
    module_0.get_new_command(int_0, int_0)


def test_case_487():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_488():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_489():
    pass


def test_case_490():
    pass


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = 760
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    str_0 = "kq"
    str_1 = 'bV:V]9\na"\tTjY"<e'
    str_2 = "0#,\n2k|!!!v-G~"
    bytes_0 = b"9\xe9v\xa3"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_2: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    int_0 = 1775
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    bytes_0 = b"{[i|\xc017\xf6u\x88\xd0k\x8e\xc7\xec"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    bytes_0 = b"\xabVa\x1d1g1\xee\x9ek\r\xf0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    str_0 = "mmZN@1_nAtgY}\x0bG1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    complex_0 = 138.289 - 287.9251j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    int_0 = 5236
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    float_0 = -2200.0
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_502():
    int_0 = -2030
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    int_0 = 2327
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    bytes_0 = b"\xc7\xa7\x87_"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    str_0 = "N*;qEK^Z*M/G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    str_0 = "Dk\tkRfD*}gPfE^#1i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    bytes_0 = b"g\xfcO\x01\r\xcc\x1d\x81\x16/b\xd6\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    str_0 = "^Usi{^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    str_0 = "*IHky|qVT\r%q[]_*ly[."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    complex_0 = 201.93 - 2062.29578j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    int_0 = -890
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    int_0 = 2156
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    float_0 = 3806.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


def test_case_515():
    pass


@pytest.mark.xfail(strict=True)
def test_case_516():
    int_0 = 4604
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    str_0 = "/d\"'2Th^?Vn;(5@R%~\x0c"
    set_0 = {str_0, str_0, str_0}
    bytes_0 = b"\x987\xd2\xbd8|\xaf\x07J"
    tuple_0 = (set_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    int_0 = -1030
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    float_0 = -157.836
    str_0 = "K7;JiU"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    str_0 = "zc08b$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    bytes_0 = b"\xf8\x19\x81;V"
    tuple_0 = ()
    module_0.get_new_command(bytes_0, tuple_0)


def test_case_523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_524():
    none_type_0 = None
    str_0 = "!yc:]eea"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    int_0 = 1956
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    int_0 = 1129
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    float_0 = -546.59
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_529():
    pass


@pytest.mark.xfail(strict=True)
def test_case_530():
    complex_0 = -2545.101502 + 1089j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    str_0 = "US3g 0*j\tOe"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    float_0 = -3745.449061
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    int_0 = 35
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    complex_0 = -2005.5223 - 341.54252j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    int_0 = 663
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    bytes_0 = b"\x99\x187Bl.\xa4\x93\x1c\xff\xe9\x1c0\x06P\xe2\x84/."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    bytes_0 = b"l\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    tuple_0 = ()
    str_0 = "h"
    bool_0 = False
    str_1 = 'NDkbaGQMMzl=H?a @X"4'
    bytes_0 = b".\x8f\xady\x11)\xdceC\xea\x86\x107\xc4m\x8b\x04\xc3"
    dict_0 = {str_0: bool_0, str_1: tuple_0, str_0: bytes_0}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    float_0 = -642.7
    tuple_0 = (float_0,)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    float_0 = -761.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    str_0 = "<FiwAl"
    str_1 = "bzr5EG{,uEC3|IYtDCG,"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bytes_0 = b"\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    str_0 = "@(U"
    str_1 = "R+ZZf(uJ%#\x0bA7J<"
    str_2 = "ELd%de\x0b~"
    str_3 = "m;\n34yUx"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    str_0 = "a<?e/CV|mTJAC0?45#,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    str_0 = "_yb^S<,3O"
    none_type_0 = None
    str_1 = "f%\tx)NS!ZTrpn:]OI"
    str_2 = "P8R"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    bytes_0 = b"rp>"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    bytes_0 = b"\x08w\x9bV\xbe\x10\xeeD\xcb\xf6\xe7\xf7\xf51,\xf7\xb5\xc5y\x8d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    int_0 = -883
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    bool_0 = False
    str_0 = ""
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    str_0 = "7'jzS8#1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    bytes_0 = b"FU\x05\x04qb\x9ah\x829\xa3\xb9\x85G\xb9\xbb\x02"
    bool_0 = False
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, bool_0, bool_0, list_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    bool_0 = False
    float_0 = -3396.8
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    complex_0 = -538.72168 - 105.92865j
    tuple_0 = (complex_0, complex_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    bytes_0 = b"\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    str_0 = " @/mgi;7'YR'\t=c'Wkl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    int_0 = 1915
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    complex_0 = -13.6171 - 4452j
    module_0.get_new_command(complex_0, complex_0)


def test_case_568():
    pass


@pytest.mark.xfail(strict=True)
def test_case_569():
    bytes_0 = b"\x84\x85Ed\x88\xa0\x9d\xa7g\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_572():
    pass


@pytest.mark.xfail(strict=True)
def test_case_573():
    float_0 = 790.959
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    str_0 = "0h@}YIi\r^Oz\n<\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    list_0 = []
    list_1 = [list_0, list_0]
    list_2 = [list_1, list_1]
    module_0.get_new_command(list_2, list_2)


def test_case_576():
    pass


@pytest.mark.xfail(strict=True)
def test_case_577():
    bytes_0 = b"\xd4\xff\xe5\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    bytes_0 = b">\\\x8a\xe2#\xdd\xcd\xc0\xf4\x95\xd3\xae;\x97\\\xc12\xaf&"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    complex_0 = -870 + 1001.7317j
    object_0 = module_1.object()
    module_0.match(complex_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    str_0 = "&Zlq1$^$c\r"
    complex_0 = -3234.368639 + 833.2021j
    complex_1 = -1543.56 - 873.4435j
    tuple_0 = (str_0, complex_0, complex_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    complex_0 = 797 - 63j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    int_0 = -1077
    list_0 = [int_0]
    bytes_0 = b"N\xb8\xdfk\xcb\xb4\xf2\xc9\x13+\x17\xaay\xe5(\x03\xd0P\x81X"
    tuple_0 = (int_0, int_0, list_0, bytes_0)
    module_0.get_new_command(tuple_0, list_0)


def test_case_583():
    pass


@pytest.mark.xfail(strict=True)
def test_case_584():
    float_0 = 3383.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    bytes_0 = b"\x04\xf9H8tnJ\xc54\xdf\xaf\x12\x1b\xd3 "
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    str_0 = "mycId+LSPj;>)#gcL^,`"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    bytes_0 = b'\xf2\x97J"K\x1d\x9e\xd7v\x80\x81\xe1b[44\xd5\xf5\xe5\x1d'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    str_0 = "_`'Kz[>bQ?h)lX-T2z-\r"
    str_1 = "#jHw~i'@h."
    str_2 = "WeQY"
    str_3 = "c%;#,r?9/Y>@|6wv>t"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_3}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    str_0 = "`=ZL6AD-To\x0c:!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    int_0 = 3316
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    float_0 = 911.56
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    complex_0 = -704.44535 + 3635j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    float_0 = -984.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    bytes_0 = b"\xde\x92\xd0~0k\x9a\x9b\xa1\x15W\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    int_0 = -1050
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    float_0 = 3156.93
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    int_0 = 2844
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    int_0 = -2602
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    int_0 = -1716
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    str_0 = 'X%Q)a ,S/7)L]T517}"'
    tuple_0 = (str_0,)
    int_0 = -1477
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    bytes_0 = b"\x93\xe4Dr\xb7[l)\xb6\x03\xbb\xfe\xb02\x84"
    float_0 = 1068.21622
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    complex_0 = 2253.5 - 3031.341393j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    int_0 = -2283
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    complex_0 = 670.7 + 1358.15j
    module_0.get_new_command(complex_0, complex_0)


def test_case_610():
    pass


@pytest.mark.xfail(strict=True)
def test_case_611():
    float_0 = -2284.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    int_0 = 2204
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    int_0 = 2414
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    float_0 = -1038.4
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    bytes_0 = b"$\xf0\xb5\xa0\xe7\xdb"
    list_0 = []
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    bytes_0 = b"fJ\x90\xcb\xa4\x19\xc0\xa0\xcbQ\xaf\xd3\xe6\xe4\x8a\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    int_0 = 2833
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    int_0 = 2932
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    str_0 = 'TVu|#[c9y$Q`.8B"6i`'
    module_0.get_new_command(str_0, str_0)


def test_case_621():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_622():
    str_0 = "mt3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    str_0 = "VxzDoRhs`6'Z`&~}r\tm"
    module_0.match(str_0, str_0)


def test_case_624():
    pass


@pytest.mark.xfail(strict=True)
def test_case_625():
    bytes_0 = b"\x8e\x8c\xca\xc8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    bytes_0 = b"\x89F\xf3\xe7"
    set_0 = {bytes_0, bytes_0, bytes_0}
    float_0 = 1686.489777
    bool_0 = True
    tuple_0 = (set_0, float_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    str_0 = "\x0cEU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    bytes_0 = b"\x96v\x0b\xc8D"
    float_0 = -1129.0
    dict_0 = {bytes_0: bytes_0, float_0: float_0, float_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_631():
    str_0 = "S-M"
    module_0.match(str_0, str_0)


def test_case_632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_633():
    complex_0 = 872.3 + 3408j
    int_0 = -143
    tuple_0 = (complex_0, int_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    bytes_0 = b"6\xf0}"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    str_0 = "i=?gh>;bwwr[#6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    str_0 = "nlkD1"
    int_0 = 205
    tuple_0 = (str_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    int_0 = 851
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"q\x1d\xa2\xa4\x9b\xd76\xf5\x9e\xeb\xd99@"
    bool_1 = False
    str_0 = "IiBrBh?d\x0bq"
    set_0 = {bool_1, int_0, str_0, int_0}
    list_0 = [set_0]
    tuple_1 = (tuple_0, bytes_0, bool_0, list_0)
    module_0.match(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_638():
    int_0 = -3313
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    float_0 = -4750.3142
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    float_0 = -1193.46
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    bool_0 = False
    str_0 = ").L~SGg wX4%"
    tuple_0 = (bool_0, str_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    bytes_0 = b"k\x11\xbbl\x07J\xba\xf7I\xd2\xd7\x9d\xb8\xddA;8\x9eG\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    float_0 = -771.0662
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    str_0 = "5/$f3q5VLMjD]1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    float_0 = -171.836
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    int_0 = -354
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_649():
    pass


@pytest.mark.xfail(strict=True)
def test_case_650():
    float_0 = -2559.404
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_652():
    str_0 = "y3Qc\t<V"
    bool_0 = True
    set_0 = {str_0, str_0, bool_0, str_0}
    module_0.match(set_0, str_0)


def test_case_653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_654():
    int_0 = 2670
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_655():
    pass


@pytest.mark.xfail(strict=True)
def test_case_656():
    int_0 = 3193
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    str_0 = "^ctk`HDvRu&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    str_0 = "m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    list_0 = [tuple_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    bytes_0 = b"\xff)\xf0\xc8G\xd0\xd4\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    float_0 = 28.1
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    float_0 = -776.17578
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    int_0 = -3471
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    int_0 = -253
    bytes_0 = b"\\i9\xa2\x85"
    dict_0 = {int_0: bytes_0, int_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    int_0 = 1605
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    str_0 = "v'lS_1:KH+SrP>;IB^["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


def test_case_670():
    pass


@pytest.mark.xfail(strict=True)
def test_case_671():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_0]
    module_1.object(*list_0, **bool_1)


@pytest.mark.xfail(strict=True)
def test_case_672():
    int_0 = -616
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    str_0 = '@AH9c~AUgq1n"rQvC'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bytes_0 = b"\xb2\xa8\x055\x96\xd1\xf0\xd10\x06)\xb7\xa4\xc0\xf9"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    str_0 = "W"
    bool_0 = False
    set_0 = {str_0, str_0, bool_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    bytes_0 = b"8Xk\x96n\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    bytes_0 = b"3b\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    int_0 = -331
    int_1 = 1433
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_680():
    int_0 = -1184
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    bytes_0 = b"0\xf5\n\xa5\xc3\x88\xd1\x81\r\xe5\xa7\x9d\x04\xef\x07v\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    str_0 = '[9n{t.w"@6V'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bytes_0 = b"\riJ\x7f\x8f\xb6V\x1c\xbc\xad\xe6$\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    int_0 = -784
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    str_0 = "rIA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    int_0 = -1980
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_689():
    pass


@pytest.mark.xfail(strict=True)
def test_case_690():
    int_0 = -93
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    bytes_0 = b"\x08\xa7J[\xb4\xa1QX:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    dict_0 = {}
    bytes_0 = b"\x18Z2x\x05\x7fG\xee"
    object_0 = module_1.object()
    tuple_0 = (dict_0, bytes_0, object_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    int_0 = -1352
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    bytes_0 = b'\x19\xa4l9\x0czx\x0e.":HJ'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    float_0 = -2637.9809
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    list_0 = []
    module_0.match(list_0, list_0)


def test_case_698():
    pass


@pytest.mark.xfail(strict=True)
def test_case_699():
    float_0 = -2440.66
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    bytes_0 = b"\xf9\x86\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    int_0 = -760
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    int_0 = 1644
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    bytes_0 = b"gQ\x13\x86\x8c\x04\x96\xae)5$\xf9\x1d\xe5\x1e\xb6p\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    int_0 = 1694
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    int_0 = -57
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_711():
    pass


@pytest.mark.xfail(strict=True)
def test_case_712():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    none_type_0 = None
    bytes_0 = b"F\tX?\x7f\x0f\xf8\xe8\xcfn\x9eF\xe1\xad\xa6k\xff\\x\xc0"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    int_0 = -2035
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    float_0 = 545.63333
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    bool_0 = False
    int_0 = -3099
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_719():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    str_0 = "agm`e\x0cG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    str_0 = "r5\r\nh$"
    str_1 = "$#6d%0*g=~PS="
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    int_0 = 3413
    bool_0 = True
    tuple_0 = (int_0, bool_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    int_0 = 210
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    int_0 = -50
    tuple_0 = (int_0, int_0)
    list_0 = []
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    float_0 = -755.420914
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    int_0 = 666
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    int_0 = -2326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    object_0 = module_1.object()
    int_0 = 1642
    bool_0 = False
    tuple_0 = (object_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    bytes_0 = b"\xd9\xbf\xed\xdb\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    int_0 = 402
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    bytes_0 = b"u\x16+\xf5(\x88[n4\xcc\xeb\xf1\xea\x0fY%\xab\xcc\xcc)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    bytes_0 = b""
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    float_0 = -428.423088
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    bool_0 = True
    list_0 = []
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, list_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    str_0 = "X5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    str_0 = "&cSy1.\tu~Eg0FUsL"
    str_1 = "j#;t\n9P"
    str_2 = "U!?7@nT0Trq[=ey3"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    complex_0 = 2776.090536 - 1153.54023j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    str_0 = "uam*kR|"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_746():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    str_0 = "=C-@_EPP^QW0R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    int_0 = -2283
    bytes_0 = b"47Z\xde\xf6,\xe2,"
    tuple_0 = (int_0, bytes_0)
    tuple_1 = (tuple_0, int_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    str_0 = "Z<7]m{Ev\\ahNC,\rcB8C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    str_0 = "^H\\iG9,n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    float_0 = 1781.51
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    int_0 = -1662
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_756():
    pass


@pytest.mark.xfail(strict=True)
def test_case_757():
    complex_0 = -2084.794416 - 3866.015j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    str_0 = 'NO1d~m,Ni?*"LR'
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    float_0 = -366.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    str_0 = "Z 0Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    none_type_0 = None
    int_0 = -3836
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    str_0 = "@@.0HKhZ~NN1+S~JZC\rQ"
    module_0.match(str_0, str_0)


def test_case_764():
    pass


@pytest.mark.xfail(strict=True)
def test_case_765():
    bytes_0 = b"P\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bytes_0 = b"\x88^\x94\x00\x92&k\n\xc8\x97\x0ed\xa5-n\xb6{"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    bytes_0 = b"-\xa9Os\xd1pe\xd9\xa8\xe0\xee.\xa8l\xc6:\x84\xb0"
    int_0 = 2358
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    str_0 = "/\x0bY;u|r{~Q-enU\n1-NQs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    int_0 = -2036
    set_0 = {int_0, int_0, int_0}
    bool_0 = False
    tuple_0 = (set_0, set_0, bool_0)
    module_0.match(tuple_0, set_0)


def test_case_770():
    pass


@pytest.mark.xfail(strict=True)
def test_case_771():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    float_0 = -1593.136973
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    int_0 = -136
    module_0.match(int_0, int_0)


def test_case_774():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_775():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    bytes_0 = b"Lr\xcc\x9dY`\xf5o4\xb2\x05\xf8\xd6\xa1\xea>S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    str_0 = "%zn!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    str_0 = "L~\r-B\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    int_0 = -2
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    str_0 = "j49FM k"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    int_0 = 301
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    bool_0 = True
    bytes_0 = b"\x028\xfb\x8a\xb4\xc1\r\x88\\\xdeZ"
    list_0 = [bytes_0]
    tuple_0 = (bool_0, bool_0, bytes_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    int_0 = 117
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    int_0 = -5692
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    complex_0 = 24.44 + 435.26819j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    str_0 = "ZGry8qu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    str_0 = "!5:+_C/\n='gD\x0bQ32"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    int_0 = 1448
    bytes_0 = b"`J\x02f\xc9\xf9\xfd\x84\x8a\x80"
    set_0 = {int_0, bytes_0, int_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = "o/"
    none_type_0 = None
    str_1 = '`mqw-TkuJ/4"+F4nq&'
    str_2 = "ml"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    dict_0 = {}
    str_0 = "vCjfG_MpH\t7"
    list_0 = [dict_0, dict_0, str_0, dict_0]
    list_1 = [list_0, str_0, list_0, dict_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    str_0 = "`y)<\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    str_0 = ".\n\n-R\nnmuaHT ~r^D2^R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    bytes_0 = b'\xd8"\x0b}\xef\x83\xe1\xc2\xcd\xc6'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    int_0 = 2465
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    int_0 = -2621
    module_0.get_new_command(int_0, int_0)


def test_case_799():
    pass


@pytest.mark.xfail(strict=True)
def test_case_800():
    float_0 = -2411.2885
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    int_0 = -256
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    str_0 = "_"
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    bytes_0 = b'\x12\x8b\xac\x9b,9\xe2\xe1\x85\xaa[\xbc\xf0"\x8b\xb5w'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    str_0 = "I413wC]EN}R,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    str_0 = "\nL2l23*WTyT\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    bytes_0 = b"e\x9c\xf4*\x8a0\x1aH\x80U\x85\x88N\xf0%j\x99\x11\x88A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    bytes_0 = b"\xd7\x17\x8b\x8c5\x17m\x19\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    int_0 = 671
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    bytes_0 = b"B\x9bq#7\x16T\x93\xc2\xc6i\xfd\xbc9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    bool_0 = True
    bytes_0 = b"9u\xbd\x15"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    float_0 = -486.7845
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    set_0 = {tuple_0, bool_0}
    tuple_1 = (list_0, set_0, list_0, list_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_818():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bool_0 = True
    tuple_0 = (object_0, bool_0)
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    int_0 = -62
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    complex_0 = -2.9446 + 1127.430154j
    set_0 = set()
    module_0.get_new_command(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    str_0 = "-U`vcG[\n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    int_0 = 3454
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    complex_0 = 2653.084 - 943.01j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    int_0 = 1438
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    int_0 = 4114
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    bytes_0 = b"\x13\xe2[=\x10"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    bytes_0 = b"\xab\xaaEr\xd2\x08S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    int_0 = -235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    float_0 = -623.0
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    complex_0 = -2121.8048 - 1364.9648j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    float_0 = 1816.337
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    str_0 = "}"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    bytes_0 = b"\xbc\x8dK9O\xc6\xcb\xacm\n\xd6 H\x00\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    str_0 = "J@Ewe"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    float_0 = -3111.96
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    float_0 = 1693.88321
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bool_0 = True
    list_0 = [bool_0]
    int_0 = -648
    tuple_0 = (list_0, int_0)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_844():
    pass


@pytest.mark.xfail(strict=True)
def test_case_845():
    bytes_0 = b'3\xcd\xc8\x0b;\x84\x01\x1e\xda\x1bY6\t"H'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    bytes_0 = b"C3\xf6\x8b\xb3\x14vN\xec\nDe\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    bytes_0 = b"\x0e@\x93\xf36\x9d\x1d\xdc\x87\x08\xcc\xbf\x02\x83\x99\x92\xc6"
    tuple_0 = (bytes_0,)
    str_0 = "5iL#|{4^Q[i!"
    list_0 = [tuple_0, str_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    str_0 = "qaCz=r\r_Zb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    complex_0 = -959.90516 + 84.15j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    int_0 = 285
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    bool_0 = False
    list_0 = []
    list_1 = [bool_0, list_0, bool_0, bool_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_852():
    str_0 = "m+\ra-lw?h{h<E>(Tz6F"
    bool_0 = True
    tuple_0 = (str_0, bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    float_0 = 162.606494
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    int_0 = -1067
    set_0 = set()
    tuple_0 = (int_0, set_0, int_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    str_0 = "Z^\x0chxLRg4W5ANS"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    float_0 = -3489.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    set_0 = set()
    tuple_0 = ()
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    str_0 = "'o\\W|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bytes_0 = b""
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    int_0 = 811
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    str_0 = "\x0c3_\x0clE$b"
    list_0 = [str_0, str_0]
    bool_0 = False
    int_0 = 2055
    tuple_0 = (list_0, bool_0, int_0)
    set_0 = {str_0}
    tuple_1 = (list_0, tuple_0, set_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    int_0 = -287
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    str_0 = "(vwNnvQQ_~2b$_7"
    set_0 = set()
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    str_0 = "\rjgR>J^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    int_0 = 1329
    module_0.match(int_0, int_0)


def test_case_870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_871():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_0, bool_1: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    str_0 = "-h"
    bytes_0 = b"WR\x85\x03\x8c\xa56\xebP\xa1\xbb\xf4.S\xf0\x91\x90\x97"
    set_0 = {str_0, bytes_0}
    tuple_0 = (bytes_0, set_0, str_0, set_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    str_0 = 'xT"<q}OZ'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bytes_0 = b"7\xa2C\xc8<\x03\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    bytes_0 = b"v\xda\x988\xb1\x8b\x02\xf8\x87x\n\xdf\xf1d\x02\xfe\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bytes_0 = b"\x13\x15\xff\xcc\x1ar\xd4O\xf6\x7f\xab2\xbb\x94\xa0\xee\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    str_0 = "3ijU"
    float_0 = 882.81
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    str_0 = "%l~w H_\\mb(cg "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    str_0 = " V5w<Fx)Kn\\.16$-G,"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    str_0 = "m_;\x0b.hgui"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    set_0 = set()
    tuple_0 = ()
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    int_0 = -1870
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    int_0 = -832
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    int_0 = 778
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    int_0 = -218
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    str_0 = ""
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    bool_0 = True
    bool_1 = True
    bytes_0 = b"\xb9\xcc\xe5p\xdcC\xd6\xf7E\x08\xbfop{\x1d"
    set_0 = set()
    tuple_0 = (bool_0, bool_1, bytes_0, set_0)
    list_0 = [tuple_0, tuple_0, bool_0]
    str_0 = "$^_8VZ6FzJB[&nMR$NJ"
    tuple_1 = (list_0, str_0, set_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    str_0 = "ut2|&3/yVeXf'5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    list_0 = []
    tuple_0 = ()
    tuple_1 = (list_0, tuple_0, list_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_894():
    float_0 = 526.590815
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    int_0 = 3172
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    int_0 = 964
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    bool_0 = False
    bytes_0 = b"\xf4\r\x90\xc1`\xb0[=\xba\xc7\xfao\x8b\xe1\n\xa5^<"
    tuple_0 = ()
    int_0 = -2242
    tuple_1 = (bytes_0, tuple_0, int_0)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_898():
    str_0 = "G0m*e|QJJZN*d[L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    none_type_0 = None
    str_0 = '"xl[+dM9\t\tO0'
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    str_0 = "o="
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    int_0 = 2111
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    bool_0 = False
    int_0 = -1859
    list_0 = [bool_0, int_0]
    bool_1 = True
    tuple_0 = (bool_0, list_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    bytes_0 = b"\xf3\xe1\xe7\xdb\x94^\xae\xd9B\xeekD\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    int_0 = 1248
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "lG_"
    str_1 = "[~$2=\rKBm6\n%MWeME"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


def test_case_907():
    pass


@pytest.mark.xfail(strict=True)
def test_case_908():
    none_type_0 = None
    str_0 = "]i~e(+W0jso\\l3="
    str_1 = "l{L\\WpGv)[kgR~,h "
    str_2 = "<Z)#0fV>(:c$Q\\#xA#"
    dict_0 = {str_0: str_0, str_0: none_type_0, str_1: none_type_0, str_2: str_1}
    module_1.object(*none_type_0, **dict_0)


def test_case_909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_910():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    str_0 = "g)"
    module_0.get_new_command(str_0, str_0)


def test_case_912():
    pass


@pytest.mark.xfail(strict=True)
def test_case_913():
    int_0 = 1863
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    str_0 = "r}bO\n[}q!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    tuple_0 = ()
    int_0 = 1676
    tuple_1 = (tuple_0, int_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    str_0 = "\tu"
    int_0 = -126
    tuple_0 = (str_0, int_0)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    complex_0 = -908 - 1525j
    module_0.match(complex_0, complex_0)


def test_case_918():
    pass


@pytest.mark.xfail(strict=True)
def test_case_919():
    complex_0 = 1540.363997 - 1511.7776j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    bytes_0 = b"\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bytes_0 = b"\xcdH\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    list_0 = []
    object_0 = module_1.object(*list_0)
    int_0 = -1438
    tuple_0 = (object_0, int_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    int_0 = 1839
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    bool_0 = False
    float_0 = 1098.929297
    dict_0 = {bool_0: bool_0, float_0: float_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    int_0 = -936
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    str_0 = "d\x0clmZSa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    int_0 = 1183
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    bytes_0 = b"\x8eBg\x13\xf3\x18\xa3\xb8\x12\xfa\x89R"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    int_0 = 2298
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    complex_0 = 1445.623 - 859.22824j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    str_0 = "]%  Dwz"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    bytes_0 = b"\x06O\xca\x10\xe1\x81j\x85b\x03\xd4\x00\x9b-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    tuple_0 = (object_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    bytes_0 = b"\x82w\xeb\x0b\x99\x0e\xff"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    int_0 = 2365
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    str_0 = "1Ut"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    str_0 = "dCBfD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    str_0 = "}"
    module_0.get_new_command(str_0, str_0)


def test_case_945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_946():
    bytes_0 = b"\xfb\x08\x8f\x15\xcb\xd07\xf9\x81\xb4x\xad\xd2\x1eS'\xec"
    str_0 = "imn7^*I0"
    dict_0 = {bytes_0: bytes_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bytes_0 = b"\xcf\xff*\xde\xed\xc5\xb3jV\xe9}\xf0.\x8d\xa2\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    str_0 = "#\rDm\x0c:{a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    int_0 = -628
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    bytes_0 = b"I\xf5c\x91\xec"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    str_0 = "VwDCa&pQOT"
    str_1 = "bu9"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    bytes_0 = b"\x9a\xbc=\xce\xc3h\xe3C"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    str_0 = 'W:B!B._W="\\5#HSTcLG?'
    dict_0 = {}
    module_1.object(*str_0, **dict_0)


def test_case_957():
    pass


@pytest.mark.xfail(strict=True)
def test_case_958():
    str_0 = ">:y>bIbD\rj:_ZKG\\_Cs"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    bytes_0 = b"\x19FG`T\xc4w\xe6\xa6\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    str_0 = "bb d1\\(YX^{4[,`J+A"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    str_0 = "K-.W(#["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    str_0 = "+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    int_0 = -51
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


def test_case_964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_965():
    str_0 = '\x0ca"v^uer~)uJ1t>zX`w'
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    none_type_0 = None
    str_0 = "n\tvii{ {rZ?rIm\x0c"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    float_0 = 1036.03701
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    bytes_0 = b"\x19\x9em\xa6"
    bytes_1 = b"\xc3YF\xce\x80\xd6\xc0\xba-7|d\xa8\x8aQ\xec"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_969():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    str_0 = ""
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_971():
    pass


@pytest.mark.xfail(strict=True)
def test_case_972():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, bool_0, bool_0, list_0)
    tuple_1 = (tuple_0, bool_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    str_0 = "\t~K`,6Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    bytes_0 = b'~\xd8\xd7\xa2l\xbc\xb6z"\x02\xb0\xdf'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    float_0 = -761.27345
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    complex_0 = 848.954558 + 4186.6937j
    bool_0 = True
    int_0 = 1864
    tuple_0 = (complex_0, bool_0, int_0)
    dict_0 = {tuple_0: bool_0, tuple_0: tuple_0, complex_0: int_0, tuple_0: int_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    bytes_0 = b"\x0c8.\xd7q\x8bE\xa7\x06\xcd"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    bytes_0 = b"Y\x04Ud\x99"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    bool_0 = True
    str_0 = "}fpVP"
    tuple_0 = (str_0, bool_0, str_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    str_0 = "lelaJmC4_4Job"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    bytes_0 = b"\xeb\x00"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    bytes_0 = b"i6<1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    str_0 = "Yp/5D/Bm5T\nF'"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    float_0 = 1709.8778
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    bytes_0 = b"U\xcf\x9dn"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    int_0 = 597
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    str_0 = "CP6,4aWg$pN"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    int_0 = 646
    float_0 = -365.3277
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    str_0 = "i3(|Sj%W_P^A=g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_995():
    pass


@pytest.mark.xfail(strict=True)
def test_case_996():
    set_0 = set()
    bytes_0 = b""
    tuple_0 = (set_0, bytes_0)
    list_0 = [tuple_0, tuple_0, tuple_0, set_0]
    tuple_1 = (tuple_0, list_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    str_0 = "5LgQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    bytes_0 = b"5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    int_0 = 702
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    int_0 = -177
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    str_0 = "FVG48&)1||f[<rYQh\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    float_0 = -699.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_1005():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    complex_0 = 1026.09 - 67.87j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    bytes_0 = b"\x84b\xef\xc319\xe1\xb8\xad\xa1\xa3\xb6\xe1u"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    float_0 = 4386.0846
    set_0 = set()
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    bytes_0 = b"J)q\xfaC\xc5\xe9p\xab\xe8;"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    bytes_0 = b"\xeb?\xf9m*m\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    str_0 = "nEoQ\x0cq$w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    int_0 = 2552
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = "Tblkm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    str_0 = "Ru`BT7ZZu,$'yg\t-q}"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bytes_0 = b"\xe7\xd8F\x96e\xc4{\x80\xf4"
    module_0.match(bytes_0, bytes_0)


def test_case_1017():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bytes_0 = b"\xf2\xcc\xf0K8\xdc\x0c\x9bf\xce\xb3~\x10^\xc3\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    bytes_0 = b"\x15\xdb\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    float_0 = 4775.4912
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bool_0 = False
    float_0 = 1989.0172
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    bool_0 = False
    object_0 = module_1.object()
    dict_0 = {}
    tuple_0 = (bool_0, object_0, dict_0, object_0)
    complex_0 = -805.016492 + 1058j
    bool_1 = True
    tuple_1 = (tuple_0, complex_0, bool_1)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    float_0 = -1967.026
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bytes_0 = b"\xa5\x19p\xa7\x0f\xbb\x0f\xd3\xf0l*\x13\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    int_0 = -1549
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    bytes_0 = b"Z\xf8\x04\xc7"
    str_0 = "db@\t}\t3(~*WbM"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    bytes_0 = b"J\xe1\x1c\x04.K"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    str_0 = "KyV2TAw"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    bytes_0 = b"\xf1\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    bytes_0 = b"\xc0S\xd2\xa8\x00f7\x9eb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    bytes_0 = b"FC\xa2R\xec6\x82F4\\\x0farA\xce~3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    float_0 = 886.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    float_0 = 185.0
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bytes_0 = b"~\xc2\x0b:[\xf60D\x03\x85\x999\x19\xaf8\x05\x89\xfe\x10K"
    module_0.match(bytes_0, bytes_0)


def test_case_1036():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1037():
    int_0 = 1174
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    int_0 = -2353
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    str_0 = "s9RUW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bytes_0 = b"\x7f\xa3\x00B_\x13\xbd\xbdU&Im\x92D\xd6\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    int_0 = -471
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    str_0 = "agljC ^OE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    int_0 = 2297
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    float_0 = 3094.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    int_0 = -3823
    bool_0 = True
    list_0 = [int_0, bool_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    int_0 = 2130
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    float_0 = -2583.0
    module_0.get_new_command(float_0, float_0)


def test_case_1050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1051():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    bool_0 = True
    complex_0 = -2096.543 + 280.921j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    int_0 = -2218
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    float_0 = 3047.263694
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    int_0 = 46
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    str_0 = '^qA_)=_O\x0c&EA\n"\r'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    str_0 = "]>~R\\"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    int_0 = 806
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    none_type_0 = None
    bytes_0 = b""
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    complex_0 = 3020.442 + 1907.160494j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    float_0 = -605.28
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    str_0 = "/{?2#*R7\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    str_0 = " ,O* v6$yI+PDMcP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    float_0 = 2663.9
    tuple_0 = (float_0,)
    list_0 = [float_0, tuple_0, float_0, tuple_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    str_0 = "<`C0:[<}XS@i$u\t;$6'j"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    float_0 = -2826.0
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    float_0 = -1952.44
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    str_0 = "<D['Tk}@Z%`q b"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    float_0 = -595.1526
    module_0.match(float_0, float_0)


def test_case_1076():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1077():
    int_0 = 566
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    int_0 = 1563
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    int_0 = 3130
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    str_0 = "E\t\re"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    bytes_0 = b"{\xfc\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    str_0 = '"\\k(~j`m\r5IzI#4]kg'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    bytes_0 = b"'!g#\xc5\xb2\x82.g\xbds:\x08\xa1\x8c\xdf\xd7"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    float_0 = -2791.0
    str_0 = "NO|X Gs(\x0bR%bXO"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    int_0 = -672
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    float_0 = -1322.840623
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    complex_0 = 1761.1586 - 536.542j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    int_0 = -1259
    module_0.get_new_command(int_0, int_0)


def test_case_1091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1092():
    bytes_0 = b"G/\xf5r\xd4\x12\xd0\x1f\xbe\xd3\rd\x80'\xb0A\x0eQA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    int_0 = -2285
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    bool_0 = False
    dict_0 = {}
    str_0 = "-"
    tuple_0 = (bool_0, bool_0, dict_0, str_0)
    module_0.match(tuple_0, dict_0)


def test_case_1096():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1097():
    float_0 = 404.367058
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    str_0 = "@2?Z\r;TfLLJ<TK>L0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    int_0 = -3859
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    int_0 = 2957
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    str_0 = "5lydW\n^>-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    bool_0 = True
    set_0 = set()
    str_0 = "3VI$\\i$6}|o2i\x0cd^-Z"
    dict_0 = {bool_0: bool_0, bool_0: set_0, str_0: set_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1105():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1106():
    str_0 = "<\x0bi@\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bytes_0 = b"\xadQ\x91\x00H"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    bytes_0 = b"\x08j\x896E\x9b78n(\xce\xcc\xe0P\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    float_0 = 91.669282
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    complex_0 = 505.397529 - 1012.0434j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    bytes_0 = b"\x99\x1e\xb2\x1d\xb3\xdeD\xa50\x13\xa1\xaa\xca\x12-\xdd\xf8\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    tuple_0 = ()
    object_0 = module_1.object()
    tuple_1 = (tuple_0, object_0)
    int_0 = -1856
    dict_0 = {tuple_1: int_0, int_0: tuple_0, tuple_0: int_0}
    list_0 = [dict_0, tuple_0, object_0]
    list_1 = [list_0, tuple_1, object_0]
    list_2 = [list_1, int_0, int_0, int_0]
    module_0.match(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    str_0 = "0d3d[,\r\nUoE# H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    str_0 = "D3eby?$f~NGZ"
    module_0.match(str_0, str_0)


def test_case_1121():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1122():
    int_0 = 484
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    complex_0 = 470.2834 - 1788j
    str_0 = "*u2WXMQzh]1k0To8.["
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (complex_0, str_0, list_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    float_0 = 3924.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bytes_0 = b"\x940\xdeT"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    str_0 = "t.<>m"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    complex_0 = -28.723 + 2536.596204j
    int_0 = -1279
    dict_0 = {complex_0: int_0, complex_0: int_0, int_0: int_0, complex_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1129():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1130():
    int_0 = 4711
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    complex_0 = 505.27908 + 987.425j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    str_0 = ";{ZD}V;T$4  "
    str_1 = "W{B%w('g6Xszc"
    bool_0 = False
    bool_1 = True
    tuple_0 = (str_0, str_1, bool_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    bytes_0 = b"\xe3k\xeaS<\x1bF"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    bytes_0 = b"\xe1\x80Sg\r\x7f\xb5\xc1\x8a\xc5\xf4\xaa\x7f\x8f\rx\xa2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    int_0 = -1752
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    str_0 = "Xzf`O%B6Oa"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    int_0 = -1294
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    bytes_0 = b"\xf0\x96\tt\r7\xb6\xd3k\x92\x0e\xdc\x00@)\xbd\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = -81
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    int_0 = 1088
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    bytes_0 = b"Gv\xe7\x9fT\xa5]FLmL3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [bool_0, bool_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    str_0 = "1%PH[+lK|FB&-=9O&6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    str_0 = "-"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    str_0 = "i$<\rQYRCxHA|tTU`Av\\"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    str_0 = "/iFN2&yr-1,KnnF6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    bytes_0 = b"\xbe"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    complex_0 = 1211.984607 + 2974j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    int_0 = 1036
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    str_0 = "}>I6.,x$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    str_0 = "tV?Dh`"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    bytes_0 = b"\xaeV/\x0e\xfa9\x85\x13\xbe+\xcc"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    int_0 = 381
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    int_0 = 1622
    module_0.get_new_command(int_0, int_0)


def test_case_1156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1157():
    complex_0 = 566.09682 - 1575.1248j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    int_0 = 1710
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    bool_0 = False
    bytes_0 = b"\xbd\xfa)\xd0_\x0c4^Lr\x92"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    str_0 = "~#A?f"
    list_0 = []
    bytes_0 = b")4\xec\x06\xb64Y-\xcf3\x83C-"
    tuple_0 = (list_0, bytes_0, str_0, list_0)
    tuple_1 = (str_0, str_0, list_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    int_0 = 108
    set_0 = {int_0, int_0}
    bool_0 = False
    list_0 = [set_0, set_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bytes_0 = b"\xa9\x93!MG\x8b\xb7\xcdk\xd7\xec\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    int_0 = -3499
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    str_0 = "eYaquIi|\x0bh;W=X,C"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    str_0 = "^\x0b+%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    complex_0 = -1406.68 + 739j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bytes_0 = b"\x7f\xf5-3\xa2\x10\xf7\xcd\xa4e\xb5\x835\xb7\x14\xef\xfcv"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    int_0 = 2377
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    bytes_0 = b"\x83\x82\xa2\x7f\xfe\xa4k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    float_0 = -3518.197
    module_0.match(float_0, float_0)


def test_case_1176():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1177():
    float_0 = -3634.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    bytes_0 = b"vP[\xc0lDm\xec\xb3\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    float_0 = 2455.417
    int_0 = -2135
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    int_0 = -137
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    float_0 = -1489.426
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    int_0 = 765
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    int_0 = 2742
    module_0.match(int_0, int_0)


def test_case_1185():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1186():
    str_0 = "'c][{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    int_0 = -456
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    bool_0 = False
    bytes_0 = b"2\xb0\x11\xab\x8a\t"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    str_0 = ".~q5/QaJS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    str_0 = '>KMw&g8za"V'
    bool_0 = True
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    int_0 = -3704
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    int_0 = 3844
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    str_0 = "5Q;h\\;VI_J9l,7 "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    int_0 = -773
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    int_0 = 2147
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    int_0 = -73
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    float_0 = 1843.8267
    dict_0 = {float_0: float_0}
    module_1.object(*dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    str_0 = "_wtkYWGw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    list_0 = []
    str_0 = "C|d6SF)Rk}bacU<I.{"
    dict_0 = {str_0: str_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


def test_case_1207():
    pass


def test_case_1208():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1209():
    bytes_0 = b"b\tV\x93\x14\xf6.\xfe3\xe0\xf2\x0f>\xbe\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    bytes_0 = b"\x0f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1211():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bytes_0 = b"\xf5\x1fa\xfa\xf4k0>\xe0\xac\x9b\x9a\x90\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    int_0 = -400
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    int_0 = -4360
    list_0 = [int_0, int_0, int_0]
    list_1 = [int_0, list_0]
    list_2 = [list_0, list_1, list_0]
    module_0.get_new_command(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    str_0 = "c=,UuJv7^ 0s+71yF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    str_0 = "B^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    int_0 = -2672
    float_0 = -220.3
    list_0 = [int_0, float_0, int_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = " Q6$mQAP]r"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    bytes_0 = b"\xc5\xdd\xd6"
    module_0.match(bytes_0, bytes_0)


def test_case_1220():
    pass


def test_case_1221():
    pass


def test_case_1222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1223():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    str_0 = "\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    str_0 = "0q#t(K:\x0bSh5"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    str_0 = "~ZDr#6NE|qH*_iF^U~"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    int_0 = -2165
    set_0 = {int_0, int_0}
    bool_0 = True
    dict_0 = {}
    tuple_0 = (set_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1229():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1230():
    none_type_0 = None
    float_0 = 540.189287
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bytes_0 = b"G2\xef\xc3\xff\x84"
    list_0 = [bytes_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, bytes_0)


def test_case_1232():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1233():
    bytes_0 = b"\xb6\x19\x87\xdb\xe4\x1f0\x86"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    int_0 = 653
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    bytes_0 = b"\xc3D\xad\x9b=b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = True
    int_0 = -3090
    tuple_0 = (list_0, list_0, bool_1, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    int_0 = -1274
    str_0 = 'h"a*=5'
    list_0 = [int_0, str_0]
    tuple_0 = (int_0, str_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b"\xdb=\xed\x03\x13;\x17:\xf3YOt\xda\x10\xdc\x08"
    float_0 = -2082.77
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    str_0 = "3v$jL:#"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    str_0 = "F-UuJ,Nuq"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bytes_0 = b";M\xb2\x938\xf5)\xb6\x1f\x08\x98={\x8b\x18\xbc\xae\x13\x91T"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    int_0 = 2396
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    int_0 = 1246
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    str_0 = "n9%G*."
    bool_0 = False
    int_0 = 289
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0, int_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    str_0 = "\\3^\x0c7d"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    bytes_0 = b"\x81\xab"
    str_0 = "=ug8y628"
    list_0 = [bytes_0, str_0, str_0, str_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    int_0 = 2436
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    dict_0 = {}
    bool_0 = False
    bytes_0 = b"\xec\x1e"
    tuple_0 = (dict_0, bool_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    object_0 = module_1.object()
    object_1 = module_1.object()
    bool_0 = False
    set_0 = {object_0, object_1, object_1, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    int_0 = -3625
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    str_0 = "y>A**;H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    int_0 = 1861
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    bytes_0 = b"on\xfe\x08\x0b\tx\x89\x11k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    int_0 = -1521
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bytes_0 = b".\xe2^\xe8=\x88.\x8e\xa2\xaf\xcc]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    int_0 = 2383
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    str_0 = "U\\;\t<3Zm7<\tO_4d/=DP"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    int_0 = -132
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    int_0 = -813
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    none_type_0 = None
    int_0 = -4309
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    none_type_0 = None
    int_0 = 2298
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    complex_0 = -127.254 - 220j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    int_0 = -3218
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    int_0 = 440
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    bytes_0 = b"\x84\xb4\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    bytes_0 = b"F1} \x1d\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    tuple_0 = ()
    bool_0 = False
    list_0 = [tuple_0, tuple_0, bool_0, bool_0]
    set_0 = {tuple_0}
    tuple_1 = (tuple_0, bool_0, list_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    int_0 = -3108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bytes_0 = b"Y\xe2a\xab0K\xba\x81\xde\x82\x085\xfd\xcco\xeeO\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    complex_0 = -1180.805 + 1712.2j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    tuple_0 = ()
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    bytes_0 = b"j\xa0\x967\xd6\x15\xea\x95\xc7\xc6\xd6\xbc#K\x02\x8b"
    str_0 = "\x0bg( o\x0cOybk >h"
    str_1 = "_y,;JtOb8NOA-A"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(*bytes_0, **dict_0)


def test_case_1281():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1282():
    complex_0 = 598.71833 - 2344j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    int_0 = 2265
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


def test_case_1285():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1286():
    bytes_0 = b"\x85\xfbs\x13\x1c\x16^S\x9dk17ttxh\x88"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    str_0 = "u\\syp[F'vYLz7"
    module_0.get_new_command(str_0, str_0)


def test_case_1289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1290():
    complex_0 = 2860.21 - 1177.184549j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    bytes_0 = b"\xc2\x82\xa1\n\x8b\r\xa0\x8f\xa7u\x17\xe0"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bytes_0 = b"\xea\xca\xf3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    float_0 = 2162.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bytes_0 = b"\x1b7B\x10E\xb6'\xe1r\x91\xf9\xca\xe4"
    module_1.object(*bytes_0)


def test_case_1297():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1298():
    str_0 = "\"l}i;b(?T]]a'$fS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    float_0 = 3400.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    int_0 = -1319
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    str_0 = "e5=Y"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    bool_0 = False
    str_0 = "\nU;}_j2'"
    list_0 = [bool_0, bool_0, str_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    str_0 = "\n\x0c2-:]d["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    bytes_0 = b"\xa00\x16\xfb\x86&\r\x992"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    float_0 = -2577.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    complex_0 = 4362.2 + 46.427434j
    int_0 = 1528
    tuple_0 = (complex_0, int_0)
    int_1 = 1453
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    bytes_0 = b"w\xe4Uw\xe36^"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    bytes_0 = b"&\xc4lC"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    float_0 = 1504.92
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    float_0 = 2445.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    float_0 = 1732.93
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    bool_1 = False
    module_0.get_new_command(list_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    bytes_0 = b"\x9e\xef\x9cy-&\xdb\xc0h\xf4\xfb\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    object_0 = module_1.object()
    float_0 = -306.5
    module_0.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    complex_0 = -1307.042 + 1286.7j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    str_0 = 'C]yr?jL,\nWh" 9J'
    module_0.get_new_command(str_0, str_0)


def test_case_1322():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    bytes_0 = b"\na\x814"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    int_0 = 696
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    int_0 = 1458
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bytes_0 = b"PP\x82D\xbf$x\xe6\xd8\xf4\x06\x8dL%\xe5"
    tuple_0 = (object_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1328():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1329():
    float_0 = -1450.21433
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_1331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1332():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    int_0 = -1133
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    float_0 = -157.277352
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    int_0 = 3615
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    bool_0 = False
    bytes_0 = b"y"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    str_0 = "Pg\n:_qAa<Z/,Pnba=<*>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    int_0 = 1221
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    str_0 = "g(N \\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    str_0 = ":,lWv"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    float_0 = -210.240709
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    float_0 = 5179.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    int_0 = 3695
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    int_0 = 343
    dict_0 = {int_0: int_0, int_0: int_0}
    bytes_0 = b"\xe2\x9a\x87\xd2u\xd2"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    float_0 = -1704.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    str_0 = "?rl<d5I~\rO"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = "Lg,ztM5-]$m_|\tLO\tB"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    float_0 = 1188.262766
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    int_0 = -361
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    float_0 = -4264.41
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    int_0 = 2962
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    bytes_0 = b'"z\xa3N\x18C\x7f\xa4\xf3\xdfba \xaf\x97\xe4;'
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    list_0 = []
    int_0 = 2533
    tuple_0 = ()
    tuple_1 = (list_0, int_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bool_0 = False
    float_0 = 818.640651
    bytes_0 = b"\xeb\xca"
    dict_0 = {bool_0: bool_0, bool_0: float_0, bool_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    complex_0 = -2147.8242 - 2431.554j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    int_0 = -4165
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    int_0 = 2154
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_1363():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    int_0 = -501
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    complex_0 = 374.7 + 846.82j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    str_0 = "JPR^|{-V#w6A]0$*\\}G"
    set_0 = {str_0, str_0}
    list_0 = [set_0, set_0, set_0, set_0]
    tuple_0 = (str_0, str_0, set_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1368():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1369():
    int_0 = 961
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    str_0 = "\"w v?e+J4h?'w:m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    int_0 = 1074
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bytes_0 = b"\xadn\x8d\xc3\xb9\x0c209Mo\xeb\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    float_0 = 1906.774
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    int_0 = 1563
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    str_0 = "\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    int_0 = -433
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    str_0 = "r|e\n($#4#J1Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    none_type_0 = None
    bytes_0 = b"\xc7\xe7\xd2\x0c\x00O\x11\xbbaO\xaaI\x19\xb7\xf3Z\xa8\x07\x90\x01"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    list_1 = [list_0, list_0, list_0, set_0]
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    bool_0 = True
    str_0 = "\nAB"
    tuple_0 = (bool_0, str_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1383():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1384():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "kYSV/"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    float_0 = -39.0
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(float_0, set_0)


def test_case_1386():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1387():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bytes_0 = b"Q\xb3\xbe\x92\xbcH\x13"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    none_type_0 = None
    float_0 = -1155.2
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    int_0 = -395
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    float_0 = -6866.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    bytes_0 = b"j\xeb\x89$\x86\xc0\x11"
    list_0 = [bytes_0]
    str_0 = "w\n-\\J"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    int_0 = 1196
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    str_0 = "\r,(jgDJ\\\x0bn2^F[T>;"
    int_0 = 669
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    int_0 = 762
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    int_0 = 1719
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bytes_0 = b"\x87\xf9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1401():
    bytes_0 = b"\xd6s\xb6C\xcc\xd1\xb5\xe4Z\xad"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    bytes_0 = b"\xa9W^\xbah"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    int_0 = -1322
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    str_0 = "p1M}Y|$aPpk:pv>u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    float_0 = -132.2005
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    str_0 = "LL:-iqPp}|5"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    complex_0 = -5021.991654 + 309.228817j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    float_0 = 2627.65
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    str_0 = "fm8ly"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bool_0 = False
    complex_0 = -2118.827 + 1247.266j
    tuple_0 = (bool_0, complex_0)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bytes_0 = b"\xa0h\xabb\x1d\x07\xb6\xd8\\e\r \xd9\xef\x96\xcf(\x1a\xbc"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    str_0 = "#H(D,e trJt<R"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    bytes_0 = b"\x9e\x83c\xf9'\xe5,f\x80\xd7\x18#\xc3:\x11\xbf\x1e(\xd3\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    int_0 = 573
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    str_0 = "wQ2nm"
    str_1 = "Yd7X_lQ\rq~\n_P-u $m"
    set_0 = {str_0, str_1, str_0}
    module_0.match(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    bool_0 = False
    set_0 = set()
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    bytes_0 = b"5\xbd'\xce\xce\xa5\xf8\x07\xde\x0b\xbcy\xa0\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    str_0 = "U0-'<Mj96"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bytes_0 = b"\x8b"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (list_0, bool_0)
    int_0 = -772
    list_1 = [tuple_0, int_0, bool_0, tuple_0]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    bool_0 = False
    str_0 = ""
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    int_0 = -1552
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    complex_0 = 2740.3615 + 632.862851j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    bytes_0 = b"\x1a\xe0\xfc\xa7\xfdS\x815ixV\x81G\xa7vjR\x12\xe6"
    list_0 = [bytes_0, bytes_0]
    str_0 = "`"
    str_1 = "]z5^t\ni\x0b=bZgGPP}#gi"
    str_2 = "$\n\x0c>5J"
    dict_0 = {str_0: list_0, str_1: str_0, str_2: bytes_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    complex_0 = -547.6103 + 917.58225j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    str_0 = "E\\X\x0bW C)/6M)oI%_h"
    module_0.get_new_command(str_0, str_0)


def test_case_1433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1434():
    float_0 = 426.058
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    str_0 = "q&Sx\\Ko$\x0cJW7[OMCR"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bytes_0 = b"\r\x92\xa5\xdb\xa3\xc1] Z\x80\x87\xd0\x93"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


def test_case_1439():
    pass


def test_case_1440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1441():
    str_0 = "]Ut~]9tJXX8fjjW"
    list_0 = [str_0, str_0, str_0]
    int_0 = -1325
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    bool_0 = True
    bytes_0 = b';\x0b\xc4Ax"\xee'
    tuple_0 = (bool_0, bool_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    str_0 = "}sv^U3Ba@*/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = "\\MF"
    str_1 = "z27,e>.R"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    str_0 = "}"
    str_1 = "^"
    dict_0 = {str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    str_0 = "m>m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    int_0 = -2281
    module_0.match(int_0, int_0)


def test_case_1448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bool_0 = True
    int_0 = 4658
    dict_0 = {bool_0: bool_0, bool_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    float_0 = -1500.01
    int_0 = 268
    dict_0 = {float_0: int_0}
    object_0 = module_1.object()
    list_0 = [dict_0, int_0, object_0]
    module_1.object(*list_0)


def test_case_1453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1454():
    complex_0 = 1584.79942 - 1775j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    str_0 = ":\tqSv=ULSa!M\r\x0c#Pn\\!0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    int_0 = 1861
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    str_0 = "\nqDAGqkS}P&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    str_0 = ']*3"?tyq'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    str_0 = "l78%"
    str_1 = "P:p"
    bool_0 = True
    dict_0 = {str_1: str_1, str_1: str_0, bool_0: str_1}
    dict_1 = {str_0: str_0, str_1: dict_0, str_1: bool_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    float_0 = 2549.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    str_0 = "XMV"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    set_0 = set()
    tuple_0 = (dict_0, set_0, bool_0)
    tuple_1 = (bool_0, bool_0, tuple_0, tuple_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    bytes_0 = b"\xde\x16\xba\xea\xce\xa6\xa0\xddK\x1e6"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    int_0 = 151
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    bytes_0 = b"\xe8p\xbd?x\x93\x99iO8\x07'\xc2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    float_0 = 5724.0
    tuple_0 = (float_0, float_0)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, tuple_0)
    set_0 = set()
    list_0 = [tuple_1, set_0, tuple_1, tuple_0]
    list_1 = [list_0, float_0, set_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    bytes_0 = b"\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    float_0 = -939.486899
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    float_0 = 2428.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    bytes_0 = b"\xe9"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    int_0 = -1167
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    bytes_0 = b"I[z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    int_0 = 596
    list_0 = []
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    bytes_0 = b"\xbaRO\xc0[\xf0\x03\xedE\xdf\xc4\x83\x14\x90d\x8f\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    str_0 = "bW]ev$I0K;"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    complex_0 = 1554.7618 - 2087.7j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    int_0 = -1493
    module_0.match(int_0, int_0)


def test_case_1481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1482():
    str_0 = "CQ*"
    set_0 = {str_0, str_0, str_0}
    bool_0 = True
    tuple_0 = (str_0, str_0)
    float_0 = -1975.0
    tuple_1 = (bool_0, tuple_0, float_0, float_0)
    tuple_2 = (set_0, str_0, tuple_1)
    module_0.match(str_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    complex_0 = 2104.59572 - 1207.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    int_0 = -2761
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    str_0 = "U,29bX]=8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    int_0 = -1871
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    bytes_0 = b"m$"
    str_0 = "|T<Z`\n<VMEgs|rq\n$Wj"
    bytes_1 = b"\xdb\xbf\x82\xbf\xb5\xf3\xe3\x04%;4"
    tuple_0 = (bytes_0, str_0, bytes_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    bytes_0 = b"l\x93\x0b\x1bf\xe9\xd8\xf4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    int_0 = 561
    module_0.get_new_command(int_0, int_0)


def test_case_1491():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1492():
    str_0 = "sU\x0bgz"
    str_1 = "%6F$D:{^npi':\nje3.v"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    float_0 = -900.4267
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    int_0 = -2088
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    complex_0 = 1660.155895 - 1813.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    complex_0 = 1607 - 3193j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    bytes_0 = b'l\xcd\xf2;,^"\xf8la\xf9\x08'
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    none_type_0 = None
    float_0 = 2380.121029
    list_0 = [none_type_0, float_0, none_type_0, float_0]
    tuple_0 = (float_0, list_0, float_0, float_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    int_0 = -235
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    str_0 = '2_Fg?(3}=7hg"2}K\n'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bool_0 = False
    str_0 = ",\r^]Y4?"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    int_0 = 2412
    bytes_0 = b"\xfc\xce\x83WS{\xb9\xea\x12\xe5\x06\x04$\xc7\xc5\x1d\xed\x0e\xd7\x18"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    str_0 = "{bw('{>|!R\rD*74HXM\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    str_0 = "lq_3Ib"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    float_0 = 291.42
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    bytes_0 = b"\xf7\xd7\x10\x9eNL\xb3\x1b5\x9a\xbb\xf4H\xa8JE\xcdq\xc9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    complex_0 = -2218.82735 - 474.46746j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    bytes_0 = b"\xaa\xf5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    str_0 = "gLA#w`M<3j|"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    str_0 = "3-R(SUW"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    bytes_0 = b"s6\xde"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bytes_0 = b"\x19\xeb\xcaP\x85\x80\xc1\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_1517():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1518():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    float_0 = -672.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    int_0 = 3718
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    int_0 = -2100
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    bytes_0 = b"\x1b\xc7\x19ov"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    int_0 = 1164
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = False
    tuple_0 = (object_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bytes_0 = b""
    float_0 = -188.012
    tuple_0 = (bytes_0, float_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    str_0 = "iT-dYnQ_ e&VHt[("
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    bytes_0 = b'\x10B"IxM\x90xw\xad7~\x15\x99'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    int_0 = 1784
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bytes_0 = b"\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    str_0 = "p+@T\rs?G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    str_0 = "BDu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bytes_0 = b"\xe2\xbb6\x98!/\xd6Yltt\x8b\x96\xe0Q\xed\xca\x84\x96}"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


def test_case_1539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1540():
    int_0 = 2679
    set_0 = {int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    int_0 = -423
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    int_0 = -37
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    bytes_0 = b"\xbeW\xc2\xc2\x08>\xe2I\xa0Z\x84'H\xd5|ua"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    bytes_0 = b"\x1dM\xe4\x14y\xfb\xd1\xdc:D\xda|"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    str_0 = "\x0b'R\ns>h/Rx]jO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    bytes_0 = b"\xc3\xac\xcd1\x9f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    int_0 = -2847
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    int_0 = -650
    module_0.match(int_0, int_0)


def test_case_1553():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1554():
    str_0 = "5efIwITOKX"
    int_0 = -1353
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    bytes_0 = b"\x03\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    bytes_0 = b"\x86e<;\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    int_0 = 270
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    str_0 = "5=WA%! y\n^d2\t$\tsc"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bytes_0 = b"a\xa3\xd1\xabQz}\xd9\x92\xe2\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    int_0 = 748
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    int_0 = -963
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    int_0 = -286
    int_1 = 3390
    module_0.get_new_command(int_0, int_1)


def test_case_1564():
    pass


def test_case_1565():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1566():
    str_0 = ";F[cATG`YvzJ*y|"
    complex_0 = 308.8344 + 3897.182j
    tuple_0 = (str_0, complex_0)
    bool_0 = True
    tuple_1 = (bool_0,)
    list_0 = [str_0, tuple_1, complex_0]
    list_1 = [tuple_0, list_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bytes_0 = b"\xe7\xe1\xa3\x90&\xbbM]\xeaSww"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    int_0 = 733
    bool_0 = True
    int_1 = 4009
    tuple_0 = (int_0, bool_0, int_1)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    str_0 = "j'i?O`qbjheiQ)$,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1570():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1571():
    str_0 = "J7&V\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    str_0 = '"/8HL/4(K1-\r\n@'
    none_type_0 = None
    str_1 = "hzW~\\DzS"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


def test_case_1573():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1574():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    complex_0 = 4425.62 + 775.9893j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bytes_0 = b"\x98\x9d\xe8\x81\xff\xec4\xe2\x08b\xc0]\xdeB\x13\x84"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, object_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    float_0 = -462.4708
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    bytes_0 = b"\x08\xc4\x05\xc5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    str_0 = "("
    bytes_0 = b"\xda\x05\x18Hw"
    dict_0 = {bytes_0: bytes_0, str_0: bytes_0, str_0: bytes_0, str_0: bytes_0}
    tuple_0 = (str_0, dict_0, str_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    str_0 = "*iPq#5{gnt~Z\x0c}x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    int_0 = -2252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    int_0 = -3316
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    str_0 = "pmY'5\x0cy"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    bool_0 = True
    tuple_0 = ()
    set_0 = {bool_0, tuple_0, bool_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bytes_0 = b"'!-\x8d0"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    int_0 = -2581
    tuple_0 = (set_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    float_0 = -110.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    none_type_0 = None
    bytes_0 = b"DN)S"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = "`'/sfO"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    str_0 = "8q-."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    bytes_0 = b"\xb5\x9a\x1c\x99\xbf\xd5\x8cxo"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    none_type_0 = None
    bytes_0 = b"\x9a\x96\xea\xcc\xbe\xac"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    int_0 = -637
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    bytes_0 = b"h\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    float_0 = 1494.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    str_0 = 'V~.qi<\\w8"NQ'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bytes_0 = b"6l\xd8.\x8e\x06\x149\xb0\xd1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    str_0 = "Qd@V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    tuple_0 = ()
    str_0 = "I}>OVFq,k>"
    bytes_0 = b"\xc4I\xb3q\x08\x9c)O\x1c\xb9T\xff\xb6\xd8\xab"
    tuple_1 = (tuple_0, str_0, str_0, bytes_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    object_0 = module_1.object()
    int_0 = 559
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    bytes_0 = b"O\xc6"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    bytes_0 = b"JC\x8d\xb8\x9d\xd7\x9e[\xe8\xd7\x90\xec76(\xb1\xddW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    int_0 = 98
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    float_0 = -1557.15935
    list_0 = [float_0, float_0]
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    bytes_0 = b"\x83\x0eV\x95\xf9\"\x11\x14\xae;\x1d'\xa6\xc5\x9d\xcf\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    complex_0 = 708.4 - 4114.97591j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    complex_0 = 1719 + 643.5742j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    bytes_0 = b"\x95\xf5\xff\x99\xfa\x9au\x8a\x8d\x10WCF\x81\xbd\xbe\xa1\xc8\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    str_0 = ")"
    bytes_0 = b"\xc2"
    dict_0 = {str_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    bytes_0 = b"e\x1b\xc9\x1f\x94"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    int_0 = 2557
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    float_0 = 1028.55
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    float_0 = -2380.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    float_0 = 3863.09746
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    int_0 = -3606
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    float_0 = 863.2439
    bytes_0 = b"J\xc7!"
    bool_0 = False
    dict_0 = {float_0: float_0, float_0: bytes_0, bytes_0: float_0, bytes_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    int_0 = -1029
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    str_0 = "w21Bffd|5R"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    str_0 = "6wQaD1FA2:Fq.L\t&"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_1632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1633():
    tuple_0 = ()
    int_0 = 1234
    bytes_0 = b"\x10(\xcb3\xb9}\x85\xb5\x10\xe8\x9e\xa0"
    bool_0 = True
    tuple_1 = (tuple_0, int_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    int_0 = 3794
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    int_0 = -1174
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bytes_0 = b'\xe1\xe1@\x13\x91K\xd9\x04\x03\xa9\x9d"=@\xb8\xc9\xd3\x01'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    bytes_0 = b"\x9cO\xab."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    str_0 = 'Vb(y"%1=/]&%7#]=\t[i#'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    int_0 = 1733
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    str_0 = "`*$\x0b3[e'J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bytes_0 = b"\x1cT\xcf\x03\xb7k\x953\x1c\x8cX\xfa\x0c\xf2\xa8\xe0"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    dict_0 = {}
    bytes_0 = b"\xa5\xdc\xc7\x088\xc0\xbcB[.\xf5\xd3\xff\x16"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    float_0 = -717.06
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    bytes_0 = b"h\x19\x02w\xa70:\xd7Me\xeb\xd9\x9a(\xbc!\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    int_0 = -405
    str_0 = 't0bau"~H&S:ke'
    bool_0 = False
    tuple_0 = (int_0, str_0, str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bytes_0 = b"q2\x96\x049tt\x91G7\xa6\xeb\xba\x13\x91\xc8\xb5\x13"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    bytes_0 = b"\x98\xca"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    int_0 = -1514
    int_1 = 2528
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    bytes_0 = b"\xebS\xbdr+\xc1\xc0\x18\x9c\x87\xa6\xac\xf3\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    int_0 = -5265
    module_0.match(int_0, int_0)


def test_case_1653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1654():
    bool_0 = False
    bytes_0 = b""
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    float_0 = -425.46
    set_0 = {float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    float_0 = -155.88195
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    bytes_0 = b"M\x9cQ"
    dict_0 = {bytes_0: bytes_0}
    int_0 = 1511
    tuple_0 = (bytes_0, dict_0, int_0, int_0)
    list_0 = [tuple_0, bytes_0, tuple_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bytes_0 = b"\xbd\x93\xd6[\x12Gx\xa0\xb6SM\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    str_0 = "Y:+/(:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    bytes_0 = b"w7gJ\xa2\xe4E\xdb\x06z\x83=P"
    int_0 = -2579
    int_1 = -896
    set_0 = {int_0, int_0, int_1, int_0}
    tuple_0 = (bytes_0, int_0, set_0, set_0)
    list_0 = []
    bool_0 = False
    tuple_1 = (tuple_0, list_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    bytes_0 = b"\x11\xe7[\xe9ZUI\x1b\xa4\x18"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    bytes_0 = b"\xcc\xf7o\xa4\xe3 4"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    bytes_0 = b"\x1cd~\x1f("
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    int_0 = -2235
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    str_0 = "\nw\nH&yk'g=V&DsI"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bool_0 = False
    int_0 = -2406
    float_0 = -2649.6109
    str_0 = "l"
    int_1 = 1396
    tuple_0 = (float_0, str_0, int_1)
    list_0 = [bool_0, bool_0, tuple_0, float_0]
    tuple_1 = (bool_0, int_0, bool_0, list_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    tuple_1 = (set_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    int_0 = -3528
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    bytes_0 = b"\x83\xe3\xfe\xc5\xa0\xdd\x0e\x05\x84G\x08\x9a\x03\x81\x83C\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    int_0 = 28
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    bytes_0 = b"\xe9n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    int_0 = -289
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    complex_0 = 2043.27878 - 888.93j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    int_0 = 456
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    str_0 = "oZhoeEqS%)_"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    int_0 = 2616
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0, int_0, set_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    complex_0 = 517.11847 + 1205j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    str_0 = "\tIH N8Ox{ DlKHQXP"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    int_0 = -3448
    bool_0 = False
    bool_1 = False
    dict_0 = {int_0: int_0, bool_0: bool_0, bool_1: bool_0, bool_1: int_0}
    module_0.match(dict_0, bool_1)


def test_case_1683():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1684():
    float_0 = 3984.186
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1686():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1687():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    int_0 = 2329
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bytes_0 = b"!\x91@\x1bd\x9a8m\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    str_0 = "%&F!*W"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    str_0 = "#:2xo;:Gr6OA4R"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


def test_case_1694():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1695():
    complex_0 = -1724.27552 - 2024.874j
    float_0 = -2950.984
    dict_0 = {complex_0: complex_0, float_0: complex_0}
    list_0 = [complex_0, complex_0, dict_0]
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    int_0 = 5051
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    bytes_0 = b"M\xe3:9\xd4%2\xe3W\x98\x7fw\xeb\x8d\x19\xe0\x01\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    int_0 = 1324
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    int_0 = 2153
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    bool_0 = False
    str_0 = "\tI/*n0['53=[|Sx"
    set_0 = {bool_0, bool_0, str_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    str_0 = "O{I*9}e"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    tuple_0 = ()
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    int_0 = 1387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    bytes_0 = b"\x04\xb7\xff\xd2\x05O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bytes_0 = b"\x1f\xb0\x1a!\x12\x8d\xc9\x8e\x8e\xd2cl\xfb,.-7\x8emM"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_1.object(**tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    bytes_0 = b")\xef\xd6\xed\x14\x91\x07\xd4\xe6\xe7\rM\xf3\xb5\xc6\x08 \xab\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    int_0 = 4
    module_0.match(int_0, int_0)


def test_case_1709():
    pass


def test_case_1710():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    object_1 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1711():
    bytes_0 = b"\x1c\xfbz\xb2\xf4M\x94\x9a\xa5$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    str_0 = "53>=L9MXI>@Bivf"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    int_0 = -3780
    bytes_0 = b"N{\x91\x1b^\xc4\x15\xd5_"
    bytes_1 = b"\xda\xb45\x8b\x1e\xbbgi\x99\x0e\xf3\xcf\x031\xea\xef\xeb\xee\xe0"
    list_0 = [int_0, bytes_0, bytes_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    int_0 = -2576
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    str_0 = '"$Sa4yMm6p_9XpvaBrW'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    str_0 = "\to7wF\x0cO(2.k \\3Xk\\"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_1717():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1718():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    bytes_0 = b"\x94\x91\xa3g\xbb\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    complex_0 = 244 + 1138.936j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    int_0 = -990
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    set_0 = set()
    list_0 = [set_0]
    list_1 = [list_0, list_0, set_0, list_0]
    module_0.get_new_command(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    none_type_0 = None
    str_0 = "D)qDB+h_Y iW;zw"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    str_0 = "[\r2[X9!\t4(E*[:49"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    str_0 = "CU \x0c3oBX1j2Y<N*!B$]A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    int_0 = -824
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bool_0 = True
    int_0 = -2111
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bytes_0 = b"[\x91\x88\x89\xe2\x11"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    float_0 = -619.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    bytes_0 = b"\nfC7\xc1)\xf3\xe92\x14&FNJ\xa7\x92,%\xaf"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bytes_0 = b"X\xff&\x03\x102<\x9cov\xae\xfd!"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    str_0 = '06y"R-a~7UGd~\r4!f'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    float_0 = -1394.303286
    str_0 = "!Q8b6\nKea3"
    set_0 = {float_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    complex_0 = -1300.7139 + 1116.8958j
    module_0.match(complex_0, complex_0)


def test_case_1741():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1742():
    set_0 = set()
    str_0 = "<\n%(|}='7wwLHp|@g"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    complex_0 = -2298.71823 - 2092.97j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    complex_0 = 56.297601 + 5642.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    int_0 = -818
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    float_0 = -1946.72
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    int_0 = -1398
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bytes_0 = b"\x07e\xe6\xe3\x05&F{D\xd8d,\x17\xbdV\xbf\x95\xd9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    complex_0 = -3890.165794 - 931.8493j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    str_0 = "r;+>;DT'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    str_0 = "RddL|_F?AL3At:dg0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    float_0 = -1576.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bool_0 = False
    tuple_0 = ()
    int_0 = -1217
    str_0 = ""
    tuple_1 = (bool_0, tuple_0, int_0, str_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    int_0 = -1944
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    str_0 = "srfEJpg,9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    none_type_0 = None
    float_0 = -486.41
    module_0.get_new_command(none_type_0, float_0)


def test_case_1759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1760():
    int_0 = 662
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    none_type_0 = None
    float_0 = 1445.368
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bytes_0 = b"\xc2h\xab`H\xb8\xa7Yh\x1d"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    float_0 = 4981.192
    tuple_0 = (float_0, float_0)
    bytes_0 = b""
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    str_0 = "&2;"
    str_1 = "Hsg58H<"
    str_2 = "Lve/!sHur"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    int_0 = -372
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    float_0 = 393.55
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    str_0 = '#4e"'
    bytes_0 = b"e\xa5\x99\x01\xfe\x13/\xa6\x1b\xe4&\x15\x98\xd8\x91\x15"
    dict_0 = {str_0: str_0, bytes_0: str_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    bytes_0 = b"H\xf6\xd0[\x9b\x03\x89\xdb"
    bool_0 = True
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    bool_1 = False
    tuple_1 = (bytes_0, bool_0, tuple_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    str_0 = "!ry"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    bytes_0 = b"\xfa\xe4\xf8\x8f\xfd\x16D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    str_0 = "Ga"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1775():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1776():
    bytes_0 = b"*\x8d\x91>\x1b<\xdf\xea\xb3\xc2\xbe"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    bytes_0 = b"\x83\t\x85\x18\xb9\xf0"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    str_0 = "kp0Lv<7\rb_f|f3m#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    str_0 = "IrHO~n6Jd"
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    complex_0 = -2841.7419 - 263.659j
    set_0 = {complex_0, complex_0}
    bool_0 = True
    tuple_0 = (set_0, bool_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    str_0 = "WG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    float_0 = 2092.40207
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    int_0 = -2533
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    float_0 = 114.11437
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    float_0 = 3603.6
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    str_0 = '"M$+pzDV.s)Y!g'
    str_1 = "}7)WZ+H>qs90"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    bytes_0 = b"].\x99\x88S1\xad\xe0b*\xf0\xaa\xe8M\xd7\xf3"
    int_0 = 896
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    str_0 = "v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    bytes_0 = b"\x02\xee\xe5\xb0\xef\xbbJd\xa2\xbcj%O\xe0\xca\xc3\xa2\xa9g\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    float_0 = 393.916036
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    str_0 = "p}\t]uO6DkWc:sEZ\x0bE|:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bytes_0 = b"\xa7\t"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    float_0 = 1344.8
    bytes_0 = b"\x86\xbf\xf0])K/\x904X"
    bytes_1 = b"\n\x97\xbe\x9b"
    list_0 = [bytes_0, float_0, float_0, bytes_1]
    module_0.get_new_command(list_0, bytes_1)


def test_case_1800():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1801():
    float_0 = 738.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    int_0 = -941
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1803():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1804():
    str_0 = '`0t(iyJkoq"\\v'
    int_0 = -164
    complex_0 = 418.1 - 816.82397j
    tuple_0 = (str_0, int_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    int_0 = -5117
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    str_0 = "Y\rKEO!+\n}WNf\x0bI^wfy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    float_0 = -1881.61
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    str_0 = ".$(bNXIPIc/25"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    bytes_0 = b"\x03\x8d\xa42b\x91{\xa1)\xe7\xf2\xe9a)\x87\xba\x87\x9b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    float_0 = 2258.366214
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    float_0 = 1579.109
    module_0.match(float_0, float_0)


def test_case_1814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1815():
    int_0 = -2801
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bytes_0 = b"\xec\x01\x96\t\xa9K\x0e\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    str_0 = "Sl:y4N<uy"
    bool_0 = True
    str_1 = "g%>Ty\n:;bUUuVOV"
    dict_0 = {str_0: bool_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    bytes_0 = b";\x14R\x02\xaa74.\xf1\xb5\x844'+V4\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    float_0 = 2360.068432
    tuple_0 = (float_0, float_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_1, bool_1: bool_1, bool_1: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    bytes_0 = b"\x95\x06"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    int_0 = -2424
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    bytes_0 = b'\xda\x03\x07"^C\xae\x86'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    int_0 = 1804
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    complex_0 = -1384.855 + 627.8229j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    int_0 = 544
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    bytes_0 = b"\x03P\xdf*\xaa\xe3\x8ec\xad\x0b\xc3\xb7"
    list_0 = []
    float_0 = 1499.54302
    tuple_0 = (bytes_0, list_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    str_0 = 'qt/D\nfRV;"<W=U'
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    float_0 = -853.23
    str_0 = "Hi64"
    tuple_0 = (float_0, float_0, str_0, str_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    str_0 = "wCRJ"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    str_0 = "OpXt*),U"
    int_0 = 4485
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    bool_0 = False
    bytes_0 = b"\xbd&"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    int_0 = 693
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    str_0 = "s/nioz$-bD\t2|b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_1839():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1840():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    int_0 = -1381
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    int_0 = -304
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    str_0 = '7iW+$)$#}8^*.[](."*\x0c'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    int_0 = -16
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    str_0 = "=#ub+r=\rLrP)v11"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: bool_0, bool_0: dict_0, bool_0: dict_0}
    module_0.get_new_command(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    bytes_0 = b"`\x97\xe6\xf5\x92\xe8\xf5hqZ\xb9(\xa5S\xdcHb{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    float_0 = -976.37479
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: bool_0, bool_0: dict_0}
    module_0.match(bool_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    bytes_0 = b"W?\x0e\xd3?B!\xd6\xb1\xd5\xf9\xe8a\xa7\xe5\xe8q\xe4\xfb\xf4"
    tuple_0 = (bytes_0,)
    bytes_1 = b"\xa5V\xbdS\xf9l\xc1\xd6%\xc6\xf8\x18["
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "rL<a\n"
    dict_0 = {str_0: tuple_0, str_0: bool_0, str_0: bool_0}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    int_0 = -1792
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    bytes_0 = b"\x9a\x02\x87\x7fa:+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    str_0 = "<x ,u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    int_0 = 1598
    str_0 = 'ME)";Y1'
    tuple_0 = (str_0,)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


def test_case_1858():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1859():
    bytes_0 = b"[w\x88P\xcbN\xe3\xb7\x1d\xd9\xcc"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bytes_0 = b"e\xbf\x95;S\xcc\xe9\xd0C\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    bool_0 = True
    float_0 = -1438.9849
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    int_0 = 34
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    str_0 = '\tgQyc3GdO[^"e.\n\t'
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = -2952
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = "G\rYK$ISO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    str_0 = "#oZ^u;32\x0cWWO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    complex_0 = 3127.464904 + 2118.89j
    tuple_0 = (complex_0,)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    str_0 = "P3"
    bytes_0 = b"\x9d;\x07T\xba\xe3&"
    tuple_2 = (tuple_1, str_0, bytes_0)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    int_0 = -1950
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bytes_0 = b"\xbe\xdb)\xc3,C?t\xbc\x07\xc0:\xa4\xf3\xf1\xc3D\x15)\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    int_0 = -525
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    float_0 = -2074.0
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bytes_0 = b"\xa4:j\xa0j\xf1\xb7LM\xd1\xcb&\x03\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    int_0 = 391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bytes_0 = b"\xca\x96\x9e\x0e/\x84\xa3\x14\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    bytes_0 = b"\xa1+?\xb6.a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    bytes_0 = b"\xc0\xd4HQ\xe9(F^\x97Y\xe3\xb0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    float_0 = -14.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    str_0 = "T*QeAI_hQobN$`/?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    str_0 = "6[-R"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    set_0 = set()
    tuple_0 = (list_0, set_0)
    bytes_0 = b"'A\x93\x05.\t\xa9\x14"
    int_0 = 1638
    tuple_1 = (dict_0, tuple_0, bytes_0, int_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    str_0 = "}+4u:jxh>U=.*+E12*o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    str_0 = "dB?yzrj0;s>texTrgDf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    bytes_0 = b"\xfe\xdf\xdd\x11\xdb\xb5\x05\xfa\x8b\xc7\xcc\x86\xb7\xa7\xa2\xe6\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    int_0 = -131
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    int_0 = -1758
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    int_0 = -4056
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    none_type_0 = None
    bytes_0 = b"t"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    int_0 = 1762
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    bytes_0 = b"\x18{="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    int_0 = 1381
    dict_0 = {}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    bytes_0 = b"\x88%\x12\xb0\xb4\x88"
    complex_0 = 1904.5 - 4058.27j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    bytes_0 = b";K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    str_0 = '\n,\\K=v"bt6`\\E'
    module_1.object(*str_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    complex_0 = 210.697 - 1592.365j
    module_0.match(complex_0, complex_0)


def test_case_1897():
    pass


def test_case_1898():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1899():
    int_0 = -1250
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    str_0 = "t?#\tC <"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    float_0 = -367.0
    complex_0 = -735 + 1376j
    tuple_0 = (str_0, dict_0, float_0, complex_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    bytes_0 = b"'\x06\xc48\x15\x1b\xd5J\xb5\x94M\xb0M\x15\x04\xd3J\x06\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    int_0 = 2012
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    str_0 = "JIE`sm{@%P_SgauyMA5l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    float_0 = 923.641084
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    int_0 = -4362
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    float_0 = 806.0731
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    float_0 = 556.069
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    bool_0 = True
    bytes_0 = b"\xefQY\x0e\x81\xfb2|~\x90\x13"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    str_0 = ";_Ws\n[Br[c0!c6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    complex_0 = 2145 + 916.2769j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    str_0 = "t5X%( "
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bytes_0 = b"3\x0e\xac\xed\xc6o\xff\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1915():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1916():
    float_0 = -2176.51
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    bytes_0 = b"f\xe2\x82\xac\t']\xe3D_\xb4,\x85*w"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    int_0 = -3015
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bytes_0 = b"\xcak\xc1\xe1\x02x\x1c\x19\xdcJ7\xcd\x02\xc2\xea\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


def test_case_1921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1922():
    float_0 = 2339.0795
    module_0.match(float_0, float_0)


def test_case_1923():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1924():
    float_0 = -32.2482
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    bool_0 = True
    str_0 = ",nYt|]"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    int_0 = -883
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    int_0 = 2105
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    str_0 = "lJO\nk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    bool_0 = True
    bytes_0 = b".\xd7\xb8\xc0wnw\xd8Z"
    set_0 = {bytes_0}
    dict_0 = {bool_0: set_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    bytes_0 = b"ac|9H\xdaMSm\xc9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    str_0 = "8sr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    bytes_0 = b"\xdfv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    str_0 = "<"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    float_0 = -1352.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    int_0 = 4011
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    int_0 = -4239
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    str_0 = " "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    str_0 = "OSSWPi#V\nc-\x0b]@mg7$J"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (str_0, set_0, set_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    str_0 = "%\r#$|V\\Q[?jx"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    bytes_0 = b"\xa9G\xb4'\x81\xcfF\x85H\xf1\x84\x92\xe5>\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    int_0 = 3778
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    int_0 = -243
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    str_0 = "0R>8"
    str_1 = "6"
    list_0 = []
    dict_0 = {str_0: str_0, str_1: list_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_1945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1946():
    bytes_0 = b"z\xdbN"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    float_0 = 61.8246
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    str_0 = "PO\\kDC"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    bytes_0 = b"\x1aq\xca\xd35x\x01\xe5\xfdv-\x92\xe4G\xa8\xdb{"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    bool_0 = True
    float_0 = 2234.231
    set_0 = {bool_0, bool_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    complex_0 = -93.1 + 58.5j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1953():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bytes_0 = b"\xbe\x8f\xbcF\x81\xbd\x9e\xb4\xcd\xbf2\x8aa\x8e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    str_0 = "?y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    float_0 = -2735.9928
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    int_0 = 2215
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = "/<iz|"
    str_2 = "FKj\tji:p"
    list_1 = [str_1, str_2]
    dict_0 = {str_1: str_1, str_0: str_0, str_1: str_1, str_2: list_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bytes_0 = b"\x18\x1b\x91\xaf\xdf\xf2X\x1dE\xdc\xe4\x13\xf7\xcd\x03\xba\x9c\xc4\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    float_0 = 2175.41
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    bytes_0 = b"R\xcbd\x99\x9c\r"
    tuple_0 = ()
    dict_0 = {bytes_0: tuple_0, tuple_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    int_0 = 2076
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    str_0 = "}=&,QL0|$d}1D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    int_0 = 224
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    str_0 = "DMn=2=}Zn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = "=D]H+JFL^@k%Z"
    list_0 = [str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_1974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1975():
    float_0 = -3115.31
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    int_0 = -2977
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    complex_0 = 1885.25151 + 1423.06j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    int_0 = 845
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bytes_0 = b"c\xf7\xe3\x87I\x9e&\xe1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    str_0 = "MVX\n]%vD&G`\\-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    bytes_0 = b"9\x86\xfb\xaf\x8e\xf9\xc27\xcd.\x07\xe8M"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\x02\x07a\x17.\x180\x824\xb4Ac\x9b\xf3"
    tuple_0 = (list_0, list_0, bytes_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    float_0 = 5016.434
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bytes_0 = b"'\x96\xbe\xe1\xe2"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    list_0 = [object_0, object_0, set_0]
    module_0.match(list_0, list_0)


def test_case_1987():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1988():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    float_0 = 1070.17
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    bytes_0 = b"5\x99\xa4J\xf7\x07\xd25\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    bytes_0 = b"y\xcc\x14$\x95$\xd5\xf7\xd5\xa39"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    int_0 = 3152
    module_0.match(int_0, int_0)


def test_case_1993():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1994():
    bool_0 = False
    tuple_0 = ()
    bool_1 = True
    tuple_1 = (bool_0, tuple_0, bool_1)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    float_0 = -1873.939
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    float_0 = -151.26881
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    float_0 = 2923.536
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    bytes_0 = b"h\xbceM\x94z.\xf9\xff]=\xefB\x91\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_2000():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2001():
    bool_0 = False
    bytes_0 = b"y\xad\xc6pdC`\xfc\x12c\x91\x1a\n\xfa\x87\xc2\xf1\x95\xc4M"
    complex_0 = -2495 + 2608.024j
    tuple_0 = (bool_0, bytes_0, bool_0, complex_0)
    dict_0 = {tuple_0: bytes_0, bytes_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    int_0 = 2197
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = 787
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    str_0 = ":,#\n2jDurH,0S61GE8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    str_0 = "(=bZ+gXWT"
    none_type_0 = None
    str_1 = "rvB"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bytes_0 = b' \x97"\x9b\xf9\xe1s6\xe7 '
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bytes_0 = b"6O\xea\x9d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    int_0 = -55
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    int_0 = 1213
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    float_0 = -4574.363962
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    complex_0 = -3195.61 - 218.7681j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


def test_case_2015():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2016():
    int_0 = -892
    module_0.match(int_0, int_0)


def test_case_2017():
    pass


def test_case_2018():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2019():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    bytes_0 = b"\xe9\x85\x92\x0b\xb7|wJ\t&\xae\x80\x11\xa3u\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    bytes_0 = b"\x9ax\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    bytes_0 = b"#\xda\xe3\x89\x05\xaf\x03\x0b8\xccs\xbf\x0b\x19N"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    int_0 = -1000
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    str_0 = "$a)dS1`S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    int_0 = -1101
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    bytes_0 = b"S\xc45|\xcbN\xa1\x07\x9f\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    float_0 = 2000.14
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    float_0 = -1966.92
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    int_0 = 2265
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    str_0 = " [*UKR$pu;L'qm8!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2032():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2033():
    str_0 = "sZqD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    bytes_0 = b"y\x85\xa8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    complex_0 = 2305.013 - 457.149034j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    int_0 = -113
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    int_0 = -3943
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    int_0 = -1428
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    bytes_0 = b"\x1b\r\xdcy&"
    str_0 = "WOp"
    tuple_0 = (bytes_0, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    str_0 = "TH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bytes_0 = b"\xe6\x89\x11P"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    str_0 = "N@_Za"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"\x00\x8cq\x0b\xfc\xb5\xe6{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    bytes_0 = b'Q\x0e\xd3F,\x14"j:DI\x88\x87.\x82\xb2b\x89\xb2'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    str_0 = 'PC@HF\x0cqw$0h3\r"M:KI{w'
    list_0 = [str_0, str_0, str_0]
    float_0 = 2908.371112
    bool_0 = True
    float_1 = 1080.435
    set_0 = {float_0, bool_0, float_0, float_1}
    list_1 = [list_0, set_0, bool_0, bool_0]
    module_0.get_new_command(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    int_0 = 2640
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    int_0 = 1443
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    dict_0 = {}
    int_0 = 304
    tuple_0 = (int_0,)
    float_0 = -290.36745
    tuple_1 = (dict_0, tuple_0, float_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bytes_0 = b"ID\x9f\x13\x11\xef\xd4\xf2\x08\xf3Y\xfc\x88\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    int_0 = -1037
    int_1 = 889
    bytes_0 = b"\x94\x86\xe8f%\x07\xdcZ\xa5;[I\r\xc1\xcf"
    bytes_1 = b"n)k(\x8dg\\\xd7\xd3$\x02\x04!\xd7\xca\xce"
    tuple_0 = (int_0, int_1, bytes_0, bytes_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    str_0 = "\t"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    complex_0 = 1912.998 + 3784.452j
    int_0 = -1421
    set_0 = {complex_0}
    bool_0 = False
    tuple_0 = (complex_0, int_0, set_0, bool_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    bytes_0 = b"m\x07%pF\x1e>\xad\x9e\x12\xfeg"
    str_0 = "."
    set_0 = {bytes_0, str_0, str_0}
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    int_0 = -1057
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    float_0 = 3784.6797
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    int_0 = -3511
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bytes_0 = b")\xc8\xa4\xde\x86\x07\xb2'\xc53~\xad\xcb)\xd1\xdf\xce-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    float_0 = 703.46
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    bytes_0 = b"\xffz\xe9{\x9dC"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    bytes_0 = b"h%y\x05`jy\x8a\xb7q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    float_0 = -757.118
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    str_0 = "|ytSb]c3e"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    int_0 = 454
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    set_0 = set()
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    tuple_0 = (set_0, object_0)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_2076():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2077():
    int_0 = -1442
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    int_0 = -941
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    int_0 = -1292
    dict_0 = {int_0: int_0}
    module_1.object(*dict_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    bytes_0 = b"@#\xc9\x85\x8f\x05\xea(\xb9-\x829\xe8w&b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bytes_0 = b"\x9bm_\xd9\xcb\x1e\x1f\xc0\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    str_0 = "5(2kKn\x0b\rt=.s$2#N,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    float_0 = -1101.69
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2084():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2085():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    int_0 = 1306
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    str_0 = "bvH<Mqb.+`SF38#aZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    str_0 = "VW3R`e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    bytes_0 = b"\xe8\x9a\x19\xbfQ\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    int_0 = -983
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2092():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2093():
    str_0 = "(eOm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    str_0 = "ho"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    int_0 = 2517
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    bool_0 = True
    str_0 = ""
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1)
    bool_2 = True
    dict_0 = {tuple_0: tuple_0, tuple_0: bool_1, tuple_0: str_0, tuple_0: bool_2}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    float_0 = 2191.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    int_0 = -135
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    float_0 = 1153.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    str_0 = ">Am,KGk&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    str_0 = "Z\x0b{,K9d^5;3y"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    str_0 = "L\\\x0cO<;\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    int_0 = 1603
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bytes_0 = b"\xd2\xd0\x1a\xf5\xc9AXi\x93\xc2\xb8e\\z\x1f4"
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    none_type_0 = None
    int_0 = 196
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    int_0 = -296
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    str_0 = "Dl\rh.TvV@kp]kV}\tUOEu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    float_0 = -720.555
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    str_0 = "p7W+&U\t8w"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    bytes_0 = b"&\x13Q\xa1"
    module_0.match(bytes_0, bytes_0)


def test_case_2116():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2117():
    float_0 = 2125.893395
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    bytes_0 = b"-\x84\xda\x1b\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    bytes_0 = b"Nr\xaa\xde\xb3$\x03\x96Dv\xdc5\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    str_0 = "p|b21ymmP$~o^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    bytes_0 = b"\x89\xd4\xafH+\x92\x1aMl\xcdI\xc5\xcfN"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    int_0 = 1531
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    str_0 = "'=6CsA'"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    complex_0 = 425.666794 + 1092.0239j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    complex_0 = 1632.8727 + 1579.6901j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    int_0 = -1396
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    str_0 = "ZYt?ozR^=~;,Us"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    bytes_0 = b"l\xb5i\xd8e\tl\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    float_0 = -2731.2
    module_0.get_new_command(float_0, float_0)


def test_case_2133():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    bytes_0 = b"\x82*K\xd7\xa67\xaa\x14\x00\xden\x97\x00#\xbb\x8b\xd9u"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    bytes_0 = b"8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "buRhhsG!%YE-9c\r"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    float_0 = -4492.146
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    int_0 = 524
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    str_0 = "{ao`?nD+vPU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    int_0 = 1135
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    str_0 = "0?,& \\/=v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    bytes_0 = b"\xce\xf7\x8b\x122\xe6\x1b\xa4#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    bytes_0 = b"\x06\x97\t\x91~\x1f\xf6\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bytes_0 = b"\xac/\xfb\x82\xb3\x17\xc1\xe8\xd2D\xb6"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    bytes_0 = b"\xde\xcaB\x8d\x97\xafw4\xe3+K\x89@\x94\\\xbc\xfc\x9f\x84"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    bytes_0 = b"\x8fW$\xe8.\xec\x94\xd7\xa1\x02\x17\xe2\x88"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2150():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    object_0 = module_1.object()
    bytes_0 = b'=V\xec49$\xf1\x00"\xbdFg\xf7\xc4\xe6\xf0'
    list_0 = []
    set_0 = set()
    tuple_0 = (object_0, bytes_0, list_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    str_0 = "Cp~\x0bGqC\t (-Jnk63:"
    complex_0 = -51.353724 - 1062.22j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    float_0 = -3350.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    int_0 = 1661
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


def test_case_2155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2156():
    int_0 = -1983
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: bool_0, int_0: bool_0, int_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    bool_0 = True
    int_0 = -4077
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    int_0 = 284
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    bool_0 = False
    list_0 = []
    str_0 = "A3\x0cLWy3D|"
    dict_0 = {str_0: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    none_type_0 = None
    bool_0 = True
    str_0 = "-.yiekRFT\x0bp&"
    int_0 = -2519
    dict_0 = {bool_0: int_0}
    list_0 = [bool_0, int_0]
    tuple_0 = (bool_0, str_0, dict_0, list_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    bytes_0 = b"\xac.\xd2If\xb3\x1aP\xa7\x86\n\xb02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    int_0 = 546
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    complex_0 = 877 - 894.661j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2165():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2166():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    int_0 = -831
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    none_type_0 = None
    float_0 = -2331.712
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    int_0 = 139
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    bytes_0 = b"\xff\x83Y\x82\xb5\x9f"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_2171():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2172():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    bytes_0 = b"#\xee\x88\xcbV2\x89(O\xe8\x9e\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    bytes_0 = b"o\xa2\xecw\xb4\x16\x8b\xdf[\xab\xd1S\xb5"
    bytes_1 = b" Of\x15\xc5z\x90\x05\x80J\xcd\xdd\xb8W"
    tuple_0 = (bytes_0, bytes_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    int_0 = 2733
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    bytes_0 = b"\xaf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    float_0 = 1897.2107
    str_0 = "NM!56Q"
    set_0 = {float_0}
    bytes_0 = b"\xdfw;"
    tuple_0 = (float_0, str_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    bytes_0 = b"\xad\xe4\xbf\xdc\xcbI\x9a9"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    float_0 = 821.45464
    bytes_0 = b"\xbf\x8e\x93\x9b\xda\xeb"
    tuple_0 = (float_0, bytes_0, float_0)
    dict_0 = {tuple_0: float_0}
    bytes_1 = b"\xaf\xea"
    module_0.get_new_command(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    int_0 = -2312
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    bool_0 = False
    float_0 = -545.25336
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, list_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    str_0 = "hU\n#:/}C'u,3(WBe"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    int_0 = 3736
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    float_0 = 1995.0
    bytes_0 = b"\xdcz\x1cP.\x1e"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0,)
    set_0 = {float_0, float_0, tuple_1}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    str_0 = "F\rt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    str_0 = 'XIB<<;;Ew"1`{1lA'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    bytes_0 = b"\x04Cj\xc3A\x14.\xeb\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    bytes_0 = b"\x19\xed\xcf\xd5g\xa9\x18\xdb\x86\xc8\x8c\x82"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    bool_0 = True
    bytes_0 = b"]WP\xbf_\xc6\xf8\x83\xdb\xff\xce\x1e"
    bytes_1 = b"n\xa20\xeb2U\n"
    tuple_0 = (bool_0, bytes_0, bytes_1)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    bytes_0 = b"\x97\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    str_0 = '2er8"B\t|~FK7_"[gY=,'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    float_0 = -1926.87488
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bytes_0 = b"\xf5i{\xfd\xe3DdG3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    float_0 = -1691.2346
    list_0 = [float_0]
    list_1 = [list_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


def test_case_2199():
    pass


def test_case_2200():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2201():
    int_0 = -3198
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bytes_0 = b"\xa8\xcfk\xd5\x93\xf7\x02\xf9|\xacWy\t"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    int_0 = 797
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    float_0 = 1941.115428
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    float_0 = 1030.616427
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    int_0 = 1013
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    none_type_0 = None
    float_0 = 1101.2983
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    str_0 = '\'6G@"rvd"N4:AI?<>v'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    bytes_0 = b"yT\xc15\x9f\x90\x17v|$\x9c\x9c\x08\xb6[(\xf9\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2210():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2211():
    int_0 = 3229
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    str_0 = "/\r9UZ_NR@w`BDDb0wS3\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    bool_0 = False
    str_0 = ">%"
    dict_0 = {bool_0: str_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    str_0 = "/2${Yp$D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    int_0 = 1683
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    bool_0 = True
    float_0 = -902.0
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    bytes_0 = b"\x80\x1f\xe4\xd0yR\xd1c\xe0\xc4\x04\xb2\xbe}\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    int_0 = 1053
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    str_0 = "RSgU4fACrryC-.#"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2220():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = 1218
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    int_0 = 4065
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    int_0 = -584
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    str_0 = "6T6=ys[XU,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    bytes_0 = b"g\xa3\xc7\xd1\xd7\x0c\xe6\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    float_0 = 109.5786
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = "tYB`K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    int_0 = 376
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    bytes_0 = b"J\x12\x06\x81\x9f@\x8a\x8c3\x18\xbc\x89g"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    str_0 = 'q7W/B!344l"yE>]`\rj'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    int_0 = -1281
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2234():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2235():
    str_0 = ">\rx&7,E'y \x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    str_0 = "Zpz^]<Kr;lbdwA"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    bytes_0 = b"\x93\x16\x94u\xe9M\xf0d\xa8\xa7\xfe\xe3\xc0\x175\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    bytes_0 = b"\xa7\xb5]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    complex_0 = -1755.72649 - 1959.15526j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    bytes_0 = b"\x03\xe3M\x9bA\xea\x99\x96\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2242():
    object_0 = module_1.object()


def test_case_2243():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bytes_0 = b"iC\xb6JH\xd1\x7f\xb95\xc1\xa4\xd1"
    int_0 = 1806
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    float_0 = 545.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    float_0 = 2745.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    list_1 = [tuple_0]
    dict_0 = {tuple_0: list_1, tuple_0: list_1}
    tuple_1 = (list_0, dict_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    int_0 = -3652
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    str_0 = "\x0c;j{eIkJPrt$Lj"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    int_0 = -1258
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    list_0 = []
    none_type_0 = None
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    int_0 = -3218
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    complex_0 = 1726.857233 - 583.2j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    str_0 = "OL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    int_0 = -1331
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    bytes_0 = b"\xd3\xb8\xcfTg\xe6+D\n\x00\x7f"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    str_0 = "`N:kk,<Fk&h]R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    float_0 = -2348.905
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    complex_0 = 1052.695 + 3709j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    int_0 = -1682
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    int_0 = 522
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    str_0 = "(Bcvf#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    int_0 = 993
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    bytes_0 = b'\x0b\xc4\x91\x13\x05\xa3"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    int_0 = 3782
    bytes_0 = b"}"
    list_0 = [bytes_0]
    tuple_0 = (int_0, bytes_0, list_0, list_0)
    list_1 = [tuple_0]
    module_0.match(list_1, int_0)


def test_case_2269():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2270():
    str_0 = "\r1Yu@*sfRZbOP7tx"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    str_0 = "R4\nAv\x0cK\t/0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    str_0 = "=n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    int_0 = -643
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    bytes_0 = b"\xec$\xd4\xae~\xd0\xf0\xfd\xaa]\x91Ct\x15\x86x="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    float_0 = -1789.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    bytes_0 = b""
    str_0 = "pm*F"
    module_0.match(bytes_0, str_0)


def test_case_2278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2279():
    float_0 = 616.338032
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    int_0 = 567
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    int_0 = 1713
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    int_0 = -1013
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bytes_0 = b"\xa2\xaeA\xe9A& \x987"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    int_0 = -1898
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    int_0 = 2229
    list_0 = [int_0]
    str_0 = "zG;=\r!TAY<*1]`a~c\x0c3@"
    tuple_0 = (int_0, list_0, str_0)
    list_1 = [tuple_0, int_0, tuple_0, str_0]
    list_2 = [list_1, tuple_0, list_1]
    module_1.object(*list_2)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    float_0 = 2632.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bytes_0 = b"Z\xd1k'\xbb\x87\xd1\x03\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = -4936
    int_1 = -2965
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    str_0 = "wf"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    str_0 = "kj-~n"
    bytes_0 = b"\xfa\x96\xc4\x1d\x84\xe6!BQ"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    int_0 = 27
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    float_0 = -712.767
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    complex_0 = -1161.39 + 2709.89944j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    str_0 = "uvog3[pGz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    none_type_0 = None
    int_0 = 684
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    bytes_0 = b"\x9d\xa5\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    str_0 = " gn~1V\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    float_0 = 1394.49399
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    int_0 = 2747
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    float_0 = -6.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    str_0 = "U8,IQ\n"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    complex_0 = -3692.549 + 248.01j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bytes_0 = b"\xa0L\xf4M%\xd4"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    float_0 = -675.985665
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    int_0 = 913
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    int_0 = 1100
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    int_0 = 44
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    str_0 = "v!\r\n$8s2s$#~\npg"
    str_1 = "Xhzk+yB0q"
    str_2 = " w"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_0: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0]
    bytes_0 = b"\x94\xacJ\xf1\x0c\xe4\xe7"
    bool_1 = True
    dict_0 = {bool_0: set_0, bool_0: bytes_0, bool_1: bool_0}
    tuple_0 = ()
    tuple_1 = (bytes_0, dict_0, tuple_0)
    tuple_2 = (set_0, list_0, set_0, tuple_1)
    bool_2 = True
    tuple_3 = (tuple_2, list_0, bool_2, bytes_0)
    module_0.match(tuple_3, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    int_0 = 1300
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_2317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2318():
    int_0 = -1990
    complex_0 = -4320.4852 + 1906.8656j
    tuple_0 = (int_0, complex_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "AM"
    str_1 = "^\rK\n?>\nHumqu"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    complex_0 = -3923 + 1535.691j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    int_0 = -3068
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    bytes_0 = b"J\x15\x86\xf1\xf7\xcb\x95f\xb3\xd2j\x8a\xaf\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2326():
    complex_0 = -2854.15166 - 3039.96j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    str_0 = "kqHI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    int_0 = 2140
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    list_0 = []
    float_0 = 2575.2323
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    bytes_0 = b"SSu)\x07\xb9\xeb_\xfdhs\xa1\x13,\x9f\x0f"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    bool_0 = True
    bytes_0 = b"\x1b\x9c\xf9h"
    tuple_0 = (bool_0, bool_0, bool_0, bytes_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    float_0 = -1564.9
    dict_0 = {}
    tuple_0 = (float_0, float_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    bytes_0 = b"\xe7\xd3\xf5QC\x11z\xed\x16\xa6\xce\xd9\x0bJ\x19.u\xe3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    bytes_0 = b"\x81?\xb7\x93F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    int_0 = 1822
    bytes_0 = b"\xb4\xfe"
    tuple_0 = (bytes_0,)
    dict_0 = {int_0: int_0, tuple_0: tuple_0, int_0: tuple_0, tuple_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    float_0 = -544.041251
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    bytes_0 = b"I\x1a\xf4\x0c\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    int_0 = -16
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    bytes_0 = b"\x9c\\\xc6\x80]X\xe6\x8b\xe1@\x8b\x7f\xd4\x15m\xd6\x9b\xdd\x13Z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    str_0 = "2)Z36\\-fK']\rT"
    bytes_0 = b""
    list_0 = [str_0, str_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    bytes_0 = b"\x7f\x80\xbf\x8e\xf5L\x1d#\xed\xf4\x8e\x0c\xae./L,\x88\xdb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    bytes_0 = b"6"
    list_0 = [dict_0, bytes_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    str_0 = "AE6?8S|O\nwv"
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    float_0 = -520.673366
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    float_0 = 2241.568
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    int_0 = -1838
    dict_0 = {}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    str_0 = "''F:}G@)]o@CdE;-H"
    set_0 = {str_0, str_0, str_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    complex_0 = 682.7217 - 3410.28j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    float_0 = -3488.374
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    bytes_0 = b"9\xb5\xcd\xedDb\xe8"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    bytes_0 = b"\x10\xc0E\x87\xbe~\x05]v"
    bool_0 = False
    bool_1 = False
    int_0 = 181
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0, bool_1: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    float_0 = 286.093
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    int_0 = 3655
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_2360():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2361():
    bool_0 = True
    complex_0 = -2026.17 - 130.5j
    str_0 = "V'VE+_L"
    tuple_0 = (bool_0, complex_0, str_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    str_0 = "_stS&Znr#m'\\ A>8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    int_0 = -2274
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    complex_0 = -1605.52 - 1038.11425j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    float_0 = 2280.84529
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    int_0 = -390
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    int_0 = -4357
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    float_0 = 400.069
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    float_0 = 2364.6
    module_0.match(float_0, float_0)


def test_case_2373():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2374():
    float_0 = -705.884531
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    str_0 = "lN\rkAm=A8"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_2377():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2378():
    complex_0 = -1980 + 477j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    str_0 = "PnJ2#Nz-1Pwl'X`S%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    str_0 = ",K\nR<&{/5p#/'&Y72])J"
    bool_0 = True
    bool_1 = True
    dict_0 = {str_0: bool_0, bool_0: bool_1, bool_0: bool_0, str_0: bool_1}
    bytes_0 = b",\xc1\r#"
    str_1 = "p\\E)2b5k)8xL"
    tuple_0 = (dict_0, bytes_0, str_1, bool_0)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    str_0 = "/`I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


def test_case_2384():
    pass


def test_case_2385():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2386():
    int_0 = 1470
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    str_0 = "S`W0=0krh@!y`qd\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    str_0 = "IAY;pk\x0cPSl;9i-e"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2389():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2390():
    bytes_0 = b"}O\xcbp\xa1\x88\x84\xbc"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    float_0 = -613.8487
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    str_0 = "4arcsxH}'S"
    complex_0 = 605.0372 - 273.19992j
    tuple_0 = (str_0, complex_0)
    list_0 = [tuple_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    bytes_0 = b"\xec\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    complex_0 = 91.2534 - 1619.518702j
    bool_0 = False
    list_0 = [complex_0, complex_0, bool_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    str_0 = "q:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    none_type_0 = None
    complex_0 = -3588.182 + 232.199j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    bytes_0 = b"\xf4{\xca\x17\xe0^ai\x0b\xaf\xd3\x19R8\xcb"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    int_0 = 883
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    float_0 = -861.38582
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    bytes_0 = b"*2sd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    bytes_0 = b"6"
    list_0 = [bytes_0]
    int_0 = -2106
    tuple_0 = (list_0, int_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    str_0 = "aPs\r!|SW_\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    int_0 = 3046
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    list_0 = []
    list_1 = [list_0, list_0]
    tuple_0 = ()
    module_0.match(list_1, tuple_0)


def test_case_2410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2411():
    bytes_0 = b"\x83\xa8T\xa5V#\xc6\x0b1\x1f=o\x8fV"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    bool_0 = True
    str_0 = "$>*IL\ruD"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    int_0 = 722
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    float_0 = -272.7
    tuple_0 = ()
    tuple_1 = (float_0, tuple_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    str_0 = "CUR=k ez"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    str_0 = "{cu\t+<\\}>["
    module_0.match(str_0, str_0)


def test_case_2418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bytes_0 = b"\x8d7\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    object_0 = module_1.object()
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    str_0 = "ER7ae%ld^TC`L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    float_0 = -1159.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    none_type_0 = None
    str_0 = "}+QdRnv\x0b:\x0cqm53"
    module_0.get_new_command(none_type_0, str_0)


def test_case_2425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2426():
    bytes_0 = b"\xad\xac5Ktt-g\xf0G\xf2\x99\xe6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    str_0 = "{uz8[k"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    float_0 = -3053.45801
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    int_0 = 1329
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bool_0 = True
    str_0 = "*#'<]\n!i9?$`pM\x0bW_@"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    int_0 = -1350
    bytes_0 = b"\xa2\x95\x02_{a\xe6\x16\xb6\xbb"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    float_0 = 504.0
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    str_0 = "Hh\x0csn|2|:n,V\\y6an"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    str_0 = "@H=D\\:1K'.e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    str_0 = "a6oS9X"
    none_type_0 = None
    str_1 = "@G"
    str_2 = '\\?Q(^wXY~l"`:GG8h'
    str_3 = "Ea`}!,w1CJz"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(**dict_0)


def test_case_2437():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bytes_0 = b"sq\xbe\xb4\xd5d\x8e\xf0"
    module_0.match(bytes_0, bytes_0)


def test_case_2439():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2440():
    float_0 = -4954.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    int_0 = 3579
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    bytes_0 = b"\x88\xd3\xe5\x8b\x8fE0\x97r\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    str_0 = "N_H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    str_0 = "`Wq4(R\\l|x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    bytes_0 = b"I\x95P;/\xd6"
    module_1.object(*bytes_0)


def test_case_2447():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2448():
    int_0 = -55
    dict_0 = {}
    object_0 = module_1.object()
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    int_0 = 2971
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    str_0 = "!6cAr\t8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    int_0 = 2943
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    float_0 = 2705.7603
    set_0 = set()
    list_0 = [float_0, float_0, set_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    int_0 = -2614
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    int_0 = 375
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0, bool_0, tuple_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    str_0 = "Hw#c:zlOu\\}|\r\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    bytes_0 = b"\xf0\xe5Er\x19\xda\xcb\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    str_0 = "j\\+]Fz2s '67N!\rTXD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    float_0 = 1672.5706
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    float_0 = -1264.21784
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    bytes_0 = b"$js=\x10\xe7\x1f\xd5\xf6p\x16\x10v}\xbc\xd0\xaer\x89\x15"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    str_0 = 'b"nGGe*J'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    str_0 = "9>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    complex_0 = -1213 - 1616.818j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    bool_0 = True
    str_0 = "uCzp}Xx+i'V>M7I\x0b'6S"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    str_0 = "0ZT\rG5\t=t- 'D\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    bytes_0 = b"A\xbb\xe0\x19\x8cO\xff8+\x02l"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    str_0 = "q5)^33"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    str_0 = "m#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    bytes_0 = b"\x112\xe5\xa1w\xdd\x88\x02\xcb\xef)W.\x89\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    complex_0 = -209.2 - 2147.455j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    bytes_0 = b"(\x01;!a"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    int_0 = -104
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    int_0 = -424
    bytes_0 = b"Y\x8e"
    set_0 = set()
    tuple_0 = (int_0, bytes_0, set_0)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    bytes_0 = b"I\x85#\xae(\x18\xe1\\\xb8J"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    bytes_0 = b"\xc0\xef!S7\x06\xc6\x9f\xd78\xde\xd6Oa\xb0\x9f\x9b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    int_0 = 3256
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    bytes_0 = b"\xe2\x87\xf7IW\x18\xc0\xe7[\x8dj@\x08\xfa\x8b\xf9z\xac\x88"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    str_0 = "W"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    int_0 = 1002
    bool_0 = True
    complex_0 = -599.927 + 1046.19j
    tuple_0 = (int_0, bool_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    int_0 = 2041
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    bytes_0 = b"\xa8\x9a\xdc(\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    str_0 = 'x:CJ3+[k*91y#Gx-"'
    bool_0 = True
    float_0 = -90.7
    tuple_0 = (str_0, bool_0, float_0)
    list_0 = [tuple_0, float_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    str_0 = "AC,_,jQe5_nqB`Z!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    str_0 = "=`MT%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    int_0 = -4143
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    bytes_0 = b"\x8b`\xd9=-\x96\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    bytes_0 = b"$\x1d\xda-\x85\x18\xbb\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, bool_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    int_0 = -4275
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    int_0 = -1362
    module_0.get_new_command(int_0, int_0)


def test_case_2497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2498():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    int_0 = 4186
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    int_0 = -13
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    complex_0 = 236 + 3779.522184j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    bytes_0 = b"\xe2\xb8X\xbc\xa6\xfdfz\xbd\xea"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    str_0 = ")Lde#<P(mKK.5)`kkm;#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    str_0 = "kYO\x0b5"
    complex_0 = 329 + 283.41j
    bytes_0 = b"y\xaa\xef\xeb\x00\xb1\xc8\xa0\xe7\xee\xdb\xcf\x00\x06\x97\xe8\xc8\x96"
    tuple_0 = (complex_0, complex_0, bytes_0, str_0)
    set_0 = {str_0, str_0, str_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    int_0 = 1228
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b"\xfb\xbe\xd4\xb6V%\xf1\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    bool_0 = False
    bytes_0 = b"\xd0\xd6\xa6O\xb8\xaa\x8b*"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    bytes_0 = b"\xe1z\xbbp\xbf\xc3U\xd6\x91"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    int_0 = 979
    module_0.get_new_command(int_0, int_0)


def test_case_2512():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2513():
    float_0 = -4026.37
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    set_0 = set()
    int_0 = 968
    tuple_0 = (set_0, set_0, int_0, int_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    float_0 = -51.955
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    str_0 = "hn6103FBz"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    str_0 = '-|SDjJ"7:'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    bool_0 = False
    int_0 = 1326
    dict_0 = {bool_0: bool_0, bool_0: int_0, bool_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    float_0 = 942.02
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    str_0 = "@*d&;\rH>6;u!]t#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    str_0 = "j`HcS:>-{~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    int_0 = -153
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0}
    list_0 = []
    tuple_0 = (set_0, list_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    int_0 = 3281
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    none_type_0 = None
    int_0 = -3110
    module_0.match(none_type_0, int_0)


def test_case_2528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2529():
    str_0 = "&\\3ay"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    int_0 = 128
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    int_0 = 1184
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    str_0 = "?b,I*\r@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    str_0 = "*2&:^WE!b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    str_0 = "zuY0ce`<K^G6\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    int_0 = -2868
    str_0 = "-qil|a=xq'z"
    list_0 = [int_0, str_0, int_0]
    float_0 = 3167.5789
    tuple_0 = (int_0, str_0, list_0, float_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    bytes_0 = b"\xe2\xcc\x9c}\xc18\x8d\xbehh\xdb<\xa0\xbe"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bytes_0]
    tuple_0 = (bytes_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, dict_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    bytes_0 = b"\x1eod6l\xc3'A\xa2p\x90\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    str_0 = "\\BTc{Lw]+k?5j"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    float_0 = 570.6284
    bool_0 = True
    float_1 = -5104.433
    tuple_0 = (float_0, bool_0, float_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    int_0 = 1600
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    int_0 = -3414
    module_0.match(int_0, int_0)


def test_case_2544():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2545():
    str_0 = 'iY4E"Yy=Yc3'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    str_0 = "TJ:z0"
    set_0 = {str_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    bytes_0 = b'\x83\xf56"\xf6*\x04V\x8b#\x03\xfe2\xdei\x94BQ'
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    bytes_0 = b'\x93\xed(7\x92\x1a\xac\xb8 \xc8\x17L8\xd5"\xd8\xf4'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    bytes_0 = b"&\x18\xa3\xc2\x9d_\x93\xe9\xcc|\xf0\xda"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    str_0 = ";]/hlM<vYg\x0bvP-2"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    bytes_0 = b"\xbb\xe5i\xf2\x80.\xe0\x9b\xdf"
    float_0 = 894.62559
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: float_0}
    list_0 = [dict_0, float_0, bytes_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    str_0 = "-U\rEfy\\%-t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    tuple_0 = ()
    bool_0 = True
    float_0 = 4523.0
    tuple_1 = (tuple_0, bool_0, bool_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    str_0 = 'oOn/"F&Q8O2`Ep'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    int_0 = 878
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    int_0 = -504
    module_0.match(int_0, int_0)


def test_case_2562():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2563():
    str_0 = "F\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [bool_0]
    str_0 = 'sw"\x0bi76/j'
    bytes_0 = b"W\x8d\x1cJ\xd1\xcf\x1d&"
    tuple_0 = (set_0, list_0, str_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    int_0 = 1499
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    str_0 = "jTVpnin^Ac@lHUw"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    bytes_0 = b"\xe0\xa3 j \xfb\xdbN"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [list_0, list_0, object_0, object_0]
    module_0.match(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    float_0 = 2448.38
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    str_0 = "L R\nUp$XXDX\\"
    module_0.match(str_0, str_0)


def test_case_2571():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2572():
    str_0 = "nY]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bytes_0 = b"\xff\\\xd6G\xc7#\xad\x19Wo\xb0\xb7\x9b\x11"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    bytes_0 = b"pLQ\x07\xeb\xa2\x8aJ\x18'\xcd;\xb5/Rw\xe8M\x97\xb6"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    str_0 = "aUYzoT`pnYU,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    int_0 = 4033
    module_0.get_new_command(int_0, int_0)


def test_case_2579():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    float_0 = -939.0
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    bytes_0 = b"\xce\xef1^"
    list_0 = [bytes_0]
    bool_0 = True
    list_1 = [list_0, bool_0, bytes_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    int_0 = -21
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_2583():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2584():
    bytes_0 = b"\xb9x\xd4\x87\xfe)\xd2\xd5U"
    bytes_1 = b"u\xc20\xd9\xbbo\xeb\xc0"
    dict_0 = {bytes_0: bytes_0, bytes_1: bytes_1, bytes_1: bytes_1, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    float_0 = -269.64
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    int_0 = -1204
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    str_0 = "x^Y?` 4Ib"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    complex_0 = -858.0037 + 2348.27837j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    str_0 = "oM7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bytes_0 = b"\xc2\x0bM`\x1e \x9dru\xfdIW"
    dict_0 = {bytes_0: bytes_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    str_0 = "GH&O|pv-oQ("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bytes_0 = b"\x81\xdb:\x87Vw\xdc\xec\x94\x9b\xe3V\x87\xe5\x9a@"
    str_0 = "\n.&ABga06#4"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    float_0 = 3082.0652
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    none_type_0 = None
    bytes_0 = b'\xad"\xf5q\x1fNz\xf5g{\xd1\xc3'
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    int_0 = -1970
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    str_0 = "Db$Yhn9O`J{iur"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    bytes_0 = b"%\xbc\xeb\x14\xf6\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    bytes_0 = b"\xb2\xf3G6\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    bool_0 = True
    bytes_0 = b"o[\xe1rB\xb4\xdef\x12\xbe\xfc\xcd^\x8a"
    dict_0 = {bool_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    bytes_0 = b"\x07\x1c\x9f\xc0\xf3T\x86p\x1e\xbf\x99\x8f\x06-g"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2604():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2605():
    bytes_0 = b"\xd3hi\x9dr\xce\xb4\xb2K\x816l\x07\xa8\x98n\x10'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    str_0 = "=\n_f!+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    str_0 = "H(iwEb1;2}w/_xcKP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    float_0 = -1399.043543
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    int_0 = -4237
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    int_0 = 4502
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    str_0 = "#B+Y6Q6R4U1l"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = []
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    int_0 = 161
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    complex_0 = 2412.31283 - 2001.064506j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    bytes_0 = b"\xd0\x85I\xa8\xd8\xe8)h\x1b)\x90/$\x80)E"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    bytes_0 = b"NE\xe7\x89Q"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    str_0 = "+qAbWeek"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    bool_0 = False
    str_0 = "%{lL0"
    module_0.get_new_command(bool_0, str_0)


def test_case_2621():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2622():
    int_0 = -91
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    none_type_0 = None
    str_0 = "6A^5cHhQi) _Y{y"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    int_0 = 2800
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    int_0 = 2057
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    int_0 = -4285
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    float_0 = -1110.02624
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    str_0 = "p}m"
    str_1 = "j"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    int_0 = 129
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    bytes_0 = b"\xd8\xd8\x7fX\x07"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2633():
    int_0 = -1848
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    complex_0 = -859.37 + 2481j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    str_0 = ">\nH}-!Od@\x0c/"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    str_0 = "\x0b\nwIR/`Zo6^AVC"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    bytes_0 = b"5d\xdae\x1e\x85\xed`"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    float_0 = -1482.919468
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    bytes_0 = b"\x00\xf4"
    module_0.match(bytes_0, bytes_0)


def test_case_2640():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2641():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    float_0 = 930.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    float_0 = -2173.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    int_0 = 600
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    str_0 = "(@o-u4kAf\x0ci[\t-v\r]p`"
    module_0.match(str_0, str_0)


def test_case_2646():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2647():
    int_0 = -1052
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    float_0 = 2234.788
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    bytes_0 = b"\x11z\xff\xbc\xda\xc5nZ\x9d6\x8b\xb6P\xcb"
    module_0.match(bytes_0, bytes_0)


def test_case_2651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2652():
    int_0 = -452
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    complex_0 = -3318.261 + 3998.597j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    int_0 = -767
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    int_0 = 692
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    str_0 = "w~rtt]Bw{6D3Il<YpB_e"
    int_0 = -2729
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    str_0 = '3g\x0cS%Q\rs"j'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    int_0 = -1495
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    bytes_0 = b"\xdfP{>\x98\x88\x9d\xd5\x1e\xefL\x0480\xc5\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    int_0 = 403
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    str_0 = "nr?Q"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    bytes_0 = b"~\x97\xc6A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    int_0 = -1936
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    str_0 = "z8t3J10hS^#th5;5\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    int_0 = 185
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    bytes_0 = b"a\xd3\xa6\xae"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2669():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2670():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    str_0 = "Lnt2-Fam8(c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    str_0 = "S!qw^tI68+k^u+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    float_0 = -985.45333
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    str_0 = "9^B\r@<"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    int_0 = 1797
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    list_0 = []
    tuple_0 = ()
    tuple_1 = (list_0, tuple_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    bytes_0 = b"\xdc\xe6\xef\xbb\xfd\x04\xf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    int_0 = 672
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0, dict_0, dict_0)
    object_0 = module_1.object()
    list_0 = [tuple_0, tuple_0, object_0, object_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    str_0 = " v+t"
    int_0 = -945
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    int_0 = 1774
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    str_0 = "Ek).u84\\@w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    int_0 = 635
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [int_0, int_0, int_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    float_0 = 901.485
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    str_0 = "VaA\\n+{\x0cRLI"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    str_0 = "RW}D^:4<#X"
    module_0.match(str_0, str_0)


def test_case_2688():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2689():
    str_0 = "Z;cdB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    int_0 = 2561
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    int_0 = 2104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    float_0 = 1169.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    str_0 = "na(/v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    bytes_0 = b"\x0fO\x18\x90\x97\xd09"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2698():
    pass


def test_case_2699():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2700():
    str_0 = "f |3SDhcevln@>{ICJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    str_0 = "j\x0cu"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    int_0 = -209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    int_0 = -667
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    float_0 = -2127.648
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    str_0 = "\\GY"
    module_0.match(str_0, str_0)


def test_case_2706():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2707():
    bytes_0 = b"I^\x0e\x1d\xfe\x0bzp\x83\xd9\xd1/"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, bytes_0, dict_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2708():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2709():
    complex_0 = 788.3412 + 1330.16j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    str_0 = '" LMOL7^.mG<?k`'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    int_0 = 1552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    str_0 = "_zi*\x0c %9R3 $"
    set_0 = {str_0, str_0}
    int_0 = -464
    set_1 = set()
    tuple_0 = (int_0,)
    tuple_1 = (set_0, int_0, set_1, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    str_0 = "i#%r8B*Q%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    str_0 = "\t\tOit\x0b0N~n,\x0cpi"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    str_0 = "~i\x0cE,9(9>UhFp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    bytes_0 = b"\xa1\x1e\xc7Q\xa6`\x8a\xdf\xd0\xc2\xcf\x8c\x7f(Dl\xe1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    int_0 = -1806
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    complex_0 = 2656.501379 + 1735.334j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    int_0 = -2023
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    int_0 = -627
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    float_0 = 349.8892
    bool_0 = False
    list_0 = [float_0, float_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    int_0 = -1371
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    int_0 = 3701
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    str_0 = ""
    bytes_0 = b""
    dict_0 = {str_0: bytes_0, bytes_0: str_0, str_0: str_0, bytes_0: str_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    float_0 = 1200.78695
    none_type_0 = None
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    float_0 = -468.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    float_0 = -342.72
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    int_0 = -22
    list_0 = [int_0]
    bytes_0 = b"\xb0+s3\xb3\x1c"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    str_0 = "=UT*oKo22kT@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    bytes_0 = b"p\xfb\xf8\x19%\x98l\xf2oj\xf6\x93\xc1H\xfc'"
    set_0 = set()
    tuple_0 = (bytes_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    int_0 = 3770
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


def test_case_2736():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2737():
    bytes_0 = b"1\t\xde\xd1\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    bytes_0 = b'\xd9"\xc1\xa2\xf8\x9e\x9d'
    str_0 = "Zb"
    tuple_0 = (bytes_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    int_0 = -1666
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    bool_0 = True
    str_0 = "D&\x0bt*-\x0c5=lJV41qSC"
    list_0 = [bool_0, str_0]
    tuple_0 = (bool_0, str_0, list_0, bool_0)
    tuple_1 = (tuple_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    float_0 = -102.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    str_0 = "v4j:mGobPT!xi\rY"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_1}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    str_0 = "Zf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    str_0 = "\\Bt"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    int_0 = -2030
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    bytes_0 = b"v\xec\xfe{-\xf9\tg\x13\xd0f\xb7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    str_0 = 'TD"1=/\x0c_u'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    float_0 = -902.2767
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    str_0 = "`-Zl7VUAv._$u)+Hhm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    int_0 = -2943
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    bytes_0 = b"\xa3\xc9\xb5\xb1)\x01Q\x80\xfc\x80j\xeeJ\xf5\xac7\x91\xa5\x98Q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    str_0 = ')r7?)"xv"KG<'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    bytes_0 = b"\x90-sb\xf06\xdeP\x89\xbc\x98\xf1\x95\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    int_0 = -1444
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    complex_0 = 440.83 - 4015.975j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    str_0 = "6Y>F[O+vn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    float_0 = -1667.866
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    float_0 = 831.0
    bool_0 = True
    tuple_0 = (float_0, float_0, bool_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    str_0 = "6E$yxRinCp.OB'alz&L"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    str_0 = "/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    float_0 = 254.5514
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    str_0 = "HKH2EYX/"
    module_0.match(str_0, str_0)


def test_case_2767():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2768():
    int_0 = -429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    int_0 = -528
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    bool_0 = True
    str_0 = ""
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    float_0 = -497.4981
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    float_0 = -375.652583
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    str_0 = 'J"cC'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    bytes_0 = b"I"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [bytes_0, bytes_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    bytes_0 = b")!1x\x85\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    bytes_0 = b"\xf3\xd4+\xad\xc2sL|7HW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    object_0 = module_1.object()
    bool_0 = False
    dict_0 = {object_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bytes_0 = b"\xca\x0bCh\xf2m\xc2Xf\xf6\x05I\xf5l\xb7W"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    bytes_0 = b"~\xb0\x08\xe0\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    str_0 = "85yl#}.,4Ka'~lWkh"
    module_0.get_new_command(str_0, str_0)


def test_case_2783():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2784():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    int_0 = -1857
    object_0 = module_1.object()
    set_0 = {int_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    str_0 = "o\x0c*AR&o_jQ\"6Nc'sXo_"
    module_0.get_new_command(str_0, str_0)


def test_case_2788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2789():
    int_0 = -2950
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bytes_0 = b"\x8a4\xa3{\xe57\r{?@\x1eA"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    str_0 = "A\\\t 'Pe'F~GU%@L*P/"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    str_0 = "Oa\x0b)\x0bIReH~nUxsyTM]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    str_0 = "y ^#\\"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    bytes_0 = b"\xfd\x08\x96\x06\xc5\x9a\x89kd_J\\\xd6\x83\xc8e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    int_0 = 881
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    none_type_0 = None
    int_0 = 81
    module_0.match(none_type_0, int_0)


def test_case_2798():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2799():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bytes_0 = b"+Z\xc9d\xa0\x80"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2801():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2802():
    complex_0 = 1961 - 1857j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    str_0 = "2N3"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    int_0 = 1519
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    float_0 = 1634.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    float_0 = 1030.2601
    bool_0 = True
    tuple_0 = (bool_0, float_0)
    tuple_1 = (float_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    str_0 = "Sn\x0c2jd6rHjnnl<["
    float_0 = 2201.0
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    dict_0 = {}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    int_0 = 2017
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    int_0 = -1728
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    float_0 = 3499.6404
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    bytes_0 = b"\xcd\x07`\x9b1X\x13\x00\xb7\xcem\x1d\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    float_0 = -3006.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bytes_0 = b"r<J\\\x1fk\x9b\xa4\xa5\xb6L\x8enQ\x1a"
    list_0 = [bytes_0]
    module_1.object(*list_0)


def test_case_2818():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2819():
    none_type_0 = None
    str_0 = "2S&whWa&c#;3s]#R}_DF"
    tuple_0 = (str_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    str_0 = "E6$d5%|fr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    int_0 = -472
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    int_0 = -802
    set_0 = {int_0, int_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    int_0 = 966
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    int_0 = -713
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    float_0 = 1785.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    str_0 = "mPs>rI+pmA,J=yE{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    complex_0 = -633.8 - 1447.797332j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    float_0 = -1106.3
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    bytes_0 = b"\xf7\xb1\xf0&~\x04\xe6\xa7Ob"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    int_0 = -535
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    int_0 = 124
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: list_0}
    tuple_0 = (list_0, dict_0)
    list_1 = [tuple_0, dict_0, bool_0, bool_0]
    str_0 = '9np!D6\x0cO)7:""'
    tuple_1 = (str_0, str_0)
    list_2 = [list_1, list_1, tuple_1, tuple_0]
    module_0.get_new_command(list_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    complex_0 = -1555.4767 + 177.98j
    bool_0 = True
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: bool_0,
        bool_0: bool_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    str_0 = "(N\r}3{a!2p\t]M{"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    str_0 = ">j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    str_0 = "2_wq{$0\\TI"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    bytes_0 = b"\xa8]\x1f\xbej"
    list_0 = [dict_0, bool_1, bytes_0, bool_1]
    module_0.match(list_0, bool_0)


def test_case_2840():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2841():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    str_0 = "O{WFYNxjU9LGK"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    complex_0 = 1108.935 + 5298.624425j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    str_0 = "836j~#+mOB_0M$j]"
    module_0.get_new_command(str_0, str_0)


def test_case_2846():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2847():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bytes_0 = b'\x18\xdb)6\x10\x84\xb1\t0D7"O'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2849():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    int_0 = -699
    list_0 = [int_0, int_0]
    list_1 = [list_0, list_0]
    list_2 = [list_1]
    module_0.get_new_command(list_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    bytes_0 = b"\n\x07Ps\x9e\xe6\x82,-\x02\x9b\x04\xab\xd6\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    int_0 = 529
    list_0 = [int_0]
    tuple_0 = (int_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    int_0 = 521
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    bytes_0 = b"\xbc\xfdLK"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    int_0 = -2245
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    float_0 = 299.9644
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    str_0 = "THu:EM"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    bool_0 = True
    int_0 = -651
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    int_0 = -3071
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    int_0 = 2314
    bool_0 = False
    list_0 = [int_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    bool_0 = True
    bool_1 = True
    str_0 = "#I\x0c#D,P_"
    tuple_0 = (bool_0, bool_0, bool_1, str_0)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    int_0 = 183
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    float_0 = 3428.59
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    int_0 = -3336
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    bytes_0 = b"B+\xdd\x1a\x82"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    float_0 = 1400.478
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bytes_0 = b"\xc8}G,\xc3I\x9c\xa0\nRA\xa1\x1b\xc2,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    bytes_0 = b"p\xbf\xec\x8dC"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    str_0 = "PW(\nDK~"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    float_0 = 2297.9089
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: float_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    bytes_0 = b"_2\x90b\x0bD[~]\xef\x05^du@+V\x18"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    bytes_0 = b"d"
    bool_0 = False
    list_0 = [bytes_0]
    tuple_0 = (list_0, bool_0, bytes_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "Tf]x%bPpy4R{=#*"
    tuple_0 = (bool_0, dict_0, str_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    int_0 = -610
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    bytes_0 = b"\x0c-N\x85Q\xcb$\xd3\x94\xfe\x96\xa0H"
    module_0.match(bytes_0, bytes_0)


def test_case_2885():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2886():
    bytes_0 = b"\xb3\x92\xa0\xba\x1fE\xa2\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    str_0 = "m!zyIa'JDCbk-"
    module_0.match(str_0, str_0)


def test_case_2889():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = 2110
    str_0 = ".p\r=4-d6h"
    bytes_0 = b'\x95\xb8;\x03\xe2\xd7\x96%\x14(9C"\xed\x05'
    str_1 = "FZ!\n!^}=sb^y>ba~>"
    dict_0 = {int_0: str_0, str_0: bytes_0, bytes_0: int_0}
    list_0 = [str_0, str_1, dict_0, str_1]
    tuple_0 = (int_0, str_0, bytes_0, list_0)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    str_0 = "6;%i&KjOA\x0c"
    complex_0 = -2851 + 1584j
    tuple_0 = (str_0, complex_0)
    list_0 = [tuple_0, str_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    complex_0 = -1876.4 - 2442.88468j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    int_0 = 2599
    module_0.get_new_command(int_0, int_0)


def test_case_2894():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2895():
    bytes_0 = b"\x7f\x89\x91+\xb7\x0fy{}"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    complex_0 = 2521.82 + 2620.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    int_0 = -3281
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    float_0 = 1587.47999
    bool_0 = False
    str_0 = "2%"
    tuple_0 = (float_0, bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    bytes_0 = b"\xea\xda\x97\x90\x08k\xdd:58\xb4\\\x95\ncAQ\xf8\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    str_0 = 'p3rdWQ3>"0>W\rurRk'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    str_0 = "KA\rx)#WNq"
    module_0.get_new_command(str_0, str_0)


def test_case_2902():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2903():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    bytes_0 = b":\x1f\xb7\xf6\x19\xa7W\xcf%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    bytes_0 = b"\x82`\x1f(\x15\xa7\x00\xb1\xb0\xe6z\xe6\xc1\x0c\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    bytes_0 = b"\x1a\xfdJ\x15\xd9\x92A\xe3\x8d\xf4\xf9\xbeK\xd4j\xa6q&\xd1\x0b"
    str_0 = "v+f<DZhMt7@{@"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    int_0 = 2623
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    str_0 = "kvm]\\/.{"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    float_0 = 3421.76491
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    int_0 = 1671
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    str_0 = "Q?V~;u1_5:lSX "
    str_1 = "sx^YR}Q"
    tuple_0 = (str_0, str_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    str_0 = "G$P$;S9H"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    int_0 = -3208
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b"\xd2\xb4b\xd1\x817\xc6h\xf5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    float_0 = -1053.43
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    str_0 = "P!I=)kK$tW3u"
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {str_0: bool_0}
    tuple_0 = (bool_0, str_0, list_0, dict_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    bytes_0 = b"\x12\xbc\xd9\xbee'\x9bX"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    bytes_0 = b"\x92\xb3\xe8\xe7\xd0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    int_0 = -2986
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    str_0 = "\ro`V}!R?p1\\QN#7"
    module_0.get_new_command(str_0, str_0)


def test_case_2921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2922():
    bytes_0 = b"\xc6\x1b\xca\xdb?\x9e\xc6\xaaX\xcd\xfcF\x8a\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b"\xab\x8a\xee\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    float_0 = -562.2838
    str_0 = "Z7dLHu9g^^~Z!H,Zbo!Z"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    int_0 = 1782
    int_1 = -3568
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_2927():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "|\x0co4glhDh;/=\\__']\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    bytes_0 = b"\xcc\xcf\xacTW\x8aS\xe1\xbf~3\xd1\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2930():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2931():
    complex_0 = -1083.0559 - 2128j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    int_0 = -2258
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    float_0 = 1055.898816
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1, bool_0]
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    float_0 = 2791.0
    str_0 = "|d[*"
    int_0 = 961
    tuple_0 = (str_0, int_0)
    str_1 = "Z#yP+[\x0bE|r5G+9'.fJ5L"
    tuple_1 = (float_0, tuple_0, str_1)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    bytes_0 = b"5\xe8\x97\xc8\x99\x05"
    module_0.match(bytes_0, bytes_0)


def test_case_2938():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2939():
    set_0 = set()
    int_0 = -3873
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    str_0 = "R, t?BKXr,:y*=`l+<O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = 2382
    str_0 = 'V6/sE\r\rx]\tb"?NeqD8Az'
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    complex_0 = -571.46 - 817.1253j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bytes_0 = b"\xb2\x02\xc5\x91*\xadW\x07\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    float_0 = 1505.837
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    bytes_0 = b"\x8a\xec\xb0\x01\x86\xacf^J\xb70\xeb!:Q\x01C\xcb\x0e\x0f"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    int_0 = -3098
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_2947():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2948():
    int_0 = 1170
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    complex_0 = 1130.9 - 4851.187285j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    bytes_0 = b"q\xb5\xedYa2\xeb\x87V\xe9\xd9\xe6\xacS_\xecr\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    int_0 = -3320
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    complex_0 = 97.7 + 4139.413j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    float_0 = -3093.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    int_0 = 1169
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    int_0 = -3519
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    bytes_0 = b"]\xaf\x13E\xc4\x01\xb8\x01r_\xb8\x00\xb0z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    int_0 = -1555
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    str_0 = "(Jat;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    int_0 = 733
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    tuple_0 = ()
    list_0 = []
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    bytes_0 = b",\xe1\x89\x12\xcf;\x8c\xbb\xdf\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    bool_0 = False
    bool_1 = True
    str_0 = "=AEwlQ~O"
    bool_2 = False
    set_0 = {str_0, bool_1, bool_0}
    tuple_0 = (str_0, bool_2, set_0, str_0)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_1: tuple_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    float_0 = -1607.51475
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    complex_0 = 1520.05799 + 863.9301j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    complex_0 = -2033.8 + 2175.103j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    bytes_0 = b"\xa0\x95\xbe\x8d\xdc\x0f\xd1,\x17\xb8=\xdfx\x17W\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bytes_0 = b"\xab\xab\x13\x94\xc0\xba\xc8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    str_0 = "q0_[mNZ"
    bytes_0 = b"\x98\xeb\xae\xb4`\x9fj\xa14"
    int_0 = 4013
    bool_0 = True
    float_0 = -978.76945
    tuple_0 = (int_0, bool_0, float_0)
    tuple_1 = (str_0, bytes_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    object_0 = module_1.object()
    int_0 = 2745
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "$It4|8zAyj"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


def test_case_2975():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2976():
    float_0 = -754.16
    str_0 = "+O~_hH"
    dict_0 = {float_0: float_0, str_0: float_0}
    list_0 = [dict_0, dict_0, float_0, str_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    int_0 = -811
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    str_0 = "9u)\\\x0c(:!ZScGt<GP/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    float_0 = 1276.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    bool_0 = True
    str_0 = "J`.yu\rIzd ;x^D,"
    bool_1 = True
    dict_0 = {bool_0: str_0, bool_1: bool_1, str_0: bool_1, bool_1: str_0}
    module_0.match(dict_0, bool_0)


def test_case_2981():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2982():
    str_0 = "g^k)j?_>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    bytes_0 = b"\x96qJ\x06\x9ajy\xa0z\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    bytes_0 = b"\x0fy\xd0l\xc5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    int_0 = -1274
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    bytes_0 = b"+\xba\xc7\x92G!\x1cX\xa7\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    bytes_0 = b"\xbbNq\xa1\x1f\xa6\xefBib\xe6\x93\xb4r\xd1T\xf14J\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    str_0 = "MdU<C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    int_0 = 3795
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    str_0 = "b<sk.:QH{$n&TC"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    none_type_0 = None
    float_0 = 3273.698736
    module_0.match(none_type_0, float_0)


def test_case_2993():
    pass


def test_case_2994():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2995():
    bytes_0 = b"Lu\x83\x99\x94\x98\xcc\x84\xde"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    bytes_0 = b"\xbb\xc2h\x18\xf3\xbd\x04\xd3G\xbf\xdd\x92\x8f]\x7f,\xa6\xdc\xe0\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    str_0 = "tW]`l\n@lxZ d"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    none_type_0 = None
    str_0 = "|?#+>="
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    int_0 = 1860
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    float_0 = -2888.90366
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    str_0 = '"K/q1fM? (vT'
    str_1 = "0Yj0R}"
    list_0 = [str_1]
    tuple_0 = (str_0, str_0, str_1, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    float_0 = -1219.0078
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    int_0 = -2821
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    bytes_0 = b"\xa8\x97 \xf6\xaa\xf1~u\x94\xc1\x92_*\xa0\x8a\x98\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    int_0 = 1167
    module_0.match(int_0, int_0)


def test_case_3010():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3011():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    int_0 = -232
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bytes_0 = b"\x14G\x17\x1d\x94\xeb%\x97\x94Let\x86\xf7m\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    bytes_0 = b"\xf6\x80}#\x00\x99:\xfc\x1e&\xf0\xe1v"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    bool_0 = False
    tuple_1 = (tuple_0, list_0, list_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    int_0 = 2856
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    complex_0 = -1361.1023 + 1459.3j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    bytes_0 = b"\x0c\xd1\r\xb0\x9e\xf6\xbe\xe3>*t\x8f^\xea\xec\xfa\x7f"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    float_0 = -688.47
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    str_0 = 'A?I"-C+B1Lix.S/~A"5'
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_3023():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3024():
    str_0 = "PCpo'FW@<m>)%q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    int_0 = -2963
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_3026():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3027():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    float_0 = 1061.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


def test_case_3030():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3031():
    list_0 = []
    str_0 = "8BEDC|W@;y(ue7u[Ds$"
    str_1 = "KPuiqwEU~A:EtxD*g"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    str_0 = "G3:v\r`W]DCSMo8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    complex_0 = -3545.724 - 152.8j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bytes_0 = b"p\xe2/\x19x\\q\xce\xbb\x08\x9a\xc5&\x86\xfd4"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    int_0 = -97
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    int_0 = 2836
    bytes_0 = b"h\xa9:\xf6\r\xb0.5N\xab1\xdd"
    tuple_0 = (int_0, bytes_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    float_0 = 1421.353478
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    int_0 = 3163
    int_1 = 706
    int_2 = 3505
    dict_0 = {int_0: int_0, int_1: int_1, int_1: int_1, int_0: int_2}
    module_0.get_new_command(dict_0, int_2)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    tuple_0 = ()
    set_0 = set()
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    int_0 = 1020
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_3044():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3045():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    int_0 = 1187
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    str_0 = 'sFfTVA:")*)I<FeVL3|'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    int_0 = -757
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    list_1 = [list_0, list_0, set_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    int_0 = -1372
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    str_0 = "\x0c\x0brfqyUX}Aeu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    bytes_0 = b"O)\xa1]U\xe8"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    str_0 = "M]`x\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    bytes_0 = b"\\\xfci\xad-\xa6\xbb7?"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    bytes_0 = b"<1\xa6\x9dR"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    str_0 = 'cjRX0"0otLPQ^'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    float_0 = -2075.1353
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    float_0 = -1422.399789
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    none_type_0 = None
    bytes_0 = b"9u\xdd\xe8\xc4/S"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    str_0 = "Trkww3V~KA~W:g_ Hi"
    complex_0 = 58.531 + 417.8j
    dict_0 = {str_0: complex_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    bytes_0 = b")\t\xc0'\x04\xee1\x7fPCK\xce"
    bytes_1 = b"\xf9\xfd\xb3@\xec"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    bytes_0 = b"\xab\xcd\xd3H\xdb\xa1\xe0\xf8"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    bytes_0 = b"\xf5\xe1\xce(\xf5\x92="
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    float_0 = -2480.383
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    none_type_0 = None
    str_0 = "@ya/\\[u3\x0b& 4jIG"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bytes_0 = b"\xf5\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    complex_0 = -1143 - 583.811j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    int_0 = -229
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    bytes_0 = b"\x83\xb1\\\xd9\xfa?\x80\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    str_0 = "&dubO=~F\r(M5w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    int_0 = 2446
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    int_0 = -263
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    int_0 = -436
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    float_0 = -1398.589664
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    int_0 = -3110
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3078():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3079():
    bytes_0 = b"\x81w\x94\x07\x8aL\xe3\xc7~f&'"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    int_0 = 5114
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    bool_0 = True
    set_0 = set()
    str_0 = '$?]"av~;'
    tuple_0 = (bool_0, bool_0, set_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_3083():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3084():
    complex_0 = 4699.7 - 2548j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    int_0 = 856
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    int_0 = 1809
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"0jM\xfb\xfc,i\xe2\xe1u\x1c\xb0"
    module_0.match(bytes_0, bytes_0)


def test_case_3088():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3089():
    str_0 = "o\x0bJC[pV~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    str_0 = "j~Gj';E#d,}<"
    str_1 = "dd\nOt"
    dict_0 = {str_1: str_1}
    module_1.object(*str_0, **dict_0)


def test_case_3091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3092():
    float_0 = -585.99792
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    float_0 = -1330.830597
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


def test_case_3095():
    pass


def test_case_3096():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3097():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    bytes_0 = b"\x1ap\xfc'\x05\xb9u\xb4 :\xf5{\tb\x0e\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    none_type_0 = None
    bytes_0 = b"\xa3\xa3\xca\x10F\xf9m\x07\xcaq\xd5\xc5V\xe0\x07\x19\x00\x96"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    int_0 = 4229
    bool_0 = False
    list_0 = [int_0, bool_0, int_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    bytes_0 = b"&\xb5\x95 zB\xc9\xa7#\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    int_0 = -3589
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    str_0 = "T?iM~\x0c7:?E.</2-5</#o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    bool_0 = False
    tuple_0 = ()
    bool_1 = False
    tuple_1 = (bool_0, bool_0, tuple_0, bool_1)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    bytes_0 = b"<N@\xb9\xbd\x11`\x97~\xac\x08dk"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3106():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3107():
    str_0 = "zN5FO!re"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    int_0 = 1126
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    str_0 = "z9*@nR/7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bool_0 = False
    int_0 = 924
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    bool_0 = True
    str_0 = '^*O~Q3CA.#7#"<'
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bytes_0 = b'"\x87\x9a\x00\x8f\xe5\x83\xb3f\xa4>N\xd3\xe7\xc9k'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    complex_0 = 186 - 1085.799101j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    str_0 = '9k;ph"j9"\r'
    bool_0 = True
    bytes_0 = b"\xa5"
    bool_1 = True
    tuple_0 = (str_0, bool_0, bytes_0, bool_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    bytes_0 = b"\xb3\x0c\x1eGs\xba"
    bool_0 = True
    float_0 = -2814.0
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0, bytes_0: bool_0, bool_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    str_0 = "w"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_3118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3119():
    float_0 = 2214.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    complex_0 = -2824.588 + 1296.8014j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    bytes_0 = b"\x12\n\xc71\x82\x86\x99\xc8\x9e\x99\xd7\xe1\xc2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    int_0 = 5436
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    tuple_0 = ()
    bool_0 = True
    list_0 = [tuple_0, tuple_0, tuple_0, bool_0]
    str_0 = 'UV4YId"Te'
    tuple_1 = (list_0, str_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    bytes_0 = b"e\xf9\xa3\x1e%*\xb6m"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    str_0 = "M.R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    bytes_0 = b"\x14\xeeB3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    bytes_0 = b"\xd4\x902\xc9\xbas\x7f%\x17\xdd1B\xc3\xcctB"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3128():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3129():
    int_0 = -2865
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    float_0 = -76.7619
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    float_0 = -1332.199
    str_0 = "oOH;An*\t?NrR\x0bn&"
    tuple_0 = (float_0, str_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    str_0 = "/08T&&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    str_0 = "\t!O$tW#8;3QD\x0bfM \x0b3=Y"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    bytes_0 = b"\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    int_0 = 2557
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    float_0 = 2006.792
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    bytes_0 = b"7\xbe\xf6F\xeb\\Yg\x16U"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    bytes_0 = b"\xe8\xb48F\x88\xdc\xf4\x87>K\x05\x8e6"
    bytes_1 = b"\xda\xc7\xb7\xf5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_1, bytes_0: bytes_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    float_0 = 1848.85824
    set_0 = set()
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    int_0 = -916
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    int_0 = -1089
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    int_0 = 3808
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    bool_0 = True
    bytes_0 = b"W\xd3\xb4?Z\xa7\xa9S\xde*\xd5\xcc\xf6{\xe3\x89I/"
    tuple_0 = (bool_0, bytes_0, bool_0)
    list_0 = [tuple_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_3147():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3148():
    int_0 = 3762
    int_1 = 2352
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    int_0 = -2831
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    str_0 = "-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    bytes_0 = b"\r\x0f\x9a\x9cn\xe5\\9\xe7\xfe\xf5\xda\x8d\xbd\xab\xf6o[&B"
    module_0.match(bytes_0, bytes_0)


def test_case_3152():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3153():
    int_0 = 396
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    int_0 = 697
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    str_0 = "b Kg,C@k=AbexzzfeC4P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    str_0 = "*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    bytes_0 = b"\xdfh\xec\xab\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    int_0 = 1147
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = -557
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    str_0 = "4"
    module_0.match(str_0, str_0)


def test_case_3163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3164():
    int_0 = 768
    str_0 = "ukxA&%"
    tuple_0 = (int_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    str_0 = "`%!j]HH-u\tf`EH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3167():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3168():
    int_0 = -5040
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    str_0 = "Z2,T*tJ0ME\t(iMG5lyJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    str_0 = "6m-88/p\tn\tFunM-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    str_0 = 'GN[D2+R2"{[#`3'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    str_0 = "l\x0bK;giL\\;OSs:r<\t8"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    str_0 = "(}><U"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3176():
    float_0 = -3336.362
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    str_0 = "I9|[\n}90,*n6Y%"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    bytes_0 = b"Hq"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    bytes_0 = b"\xba\xd0\xca\xbf\xf6\xa7\xe4E9_qk"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    float_0 = 3191.719146
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    float_0 = 1631.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    str_0 = "236D28Eg`/,y3-C3FA"
    tuple_0 = (list_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    complex_0 = -3938.3 + 2328j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    bytes_0 = b";\x8b)L\x93\xbb\xe8\r\xf0\xd4m\xe0\x1a"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [bytes_0, bytes_0, bytes_0, dict_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    list_0 = [dict_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    int_0 = -6088
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    bytes_0 = b":\xe4\xb5\x18\xf5\x99;;\xf4\xe6\x07\xa7\x91\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    int_0 = -828
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    str_0 = "b"
    str_1 = "`_rh"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    float_0 = 1172.5
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    int_0 = -1970
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    int_0 = -1555
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    complex_0 = 2349 - 2964.38j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    complex_0 = -47.179056 + 1710.97935j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    int_0 = -3073
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    none_type_0 = None
    bytes_0 = b"\x16\x88\xb7\xc4\xac3\xf1\x88\xc6S\xd4\x1c\xeb\xe8\xf3"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    complex_0 = 333.596 + 1168.6j
    dict_0 = {complex_0: complex_0}
    module_0.match(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    bytes_0 = b'\x08\xd9\x9f\xac\x06n"\xf5\x97U'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    str_0 = "{ueH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    str_0 = "4UI+IV"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    bytes_0 = b"\x10\xec(`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    none_type_0 = None
    int_0 = -302
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    str_0 = "i,/[Amu'pP1@Wo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    str_0 = "{yqPSoTs"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    str_0 = ""
    str_1 = "q>?d"
    bytes_0 = b"<I\x0c\xd1\xacF\t\x8b\xc1\xf7\xe9G\xc4J}\xd56\x1b\x8c\x18"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_1: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    bytes_0 = b"k\x8b\x05\xc6p\xb9{\xc7\x03\xe7\xfa4%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    bytes_0 = b"\xbe R\xdbN\xfat"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    str_0 = "wwU-~I1b7.j~m__4X8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    str_0 = "-OR~Tw~b1Ix!]b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    str_0 = "=k6O,!X!eTvsE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    int_0 = 1756
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    bytes_0 = b":\xbb\xae5a3#\xf5^X\x13\x8a?\x9fW\xef\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    bytes_0 = b"-\x02\xff\xa2\xbeM\x95\xc1\xff\xd5\x11\x9f\xae\x81C\xe5\xea\x98\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    str_0 = '\rCpTyO"Q[T3o)'
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_3221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3222():
    int_0 = 2268
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    complex_0 = 84.72848 + 1077.9767j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    str_0 = "bE)S/LH3@NX"
    module_0.get_new_command(str_0, str_0)


def test_case_3225():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3226():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3228():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_3229():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3230():
    str_0 = ","
    list_0 = [str_0]
    str_1 = "e'L0dBf@"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    bytes_0 = b"'n%\x8c\xa5r\x05\xf6J\x0f\xe7\xeb\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    str_0 = '-$3X"Y7j)`ZxTI)VU?-Y'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    none_type_0 = None
    bytes_0 = b"\xb1\n\xb4\xd0\xe7\x90\x00\xe7~\xce\xe7\xad\xec\xa7\x07/\x90_\xd9h"
    module_0.match(none_type_0, bytes_0)


def test_case_3234():
    pass


def test_case_3235():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3236():
    int_0 = 2674
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = True
    list_0 = [dict_0, bool_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    complex_0 = 645.136 + 1217.05j
    int_0 = 1224
    tuple_0 = (complex_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    float_0 = -280.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    int_0 = 885
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    bytes_0 = b"\xe9\x91\x0bPgw\xfa\xfeA:\xe0b\xa1"
    module_0.match(bytes_0, bytes_0)


def test_case_3241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3242():
    float_0 = -2247.60187
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    str_0 = "Ug6Q<Bi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    float_0 = -1916.08
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    int_0 = -4733
    set_0 = {int_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    int_0 = -429
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    str_0 = '<:3TS1\nZje\t3A\nw}"b1'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    int_0 = -3535
    float_0 = 2893.55262
    tuple_0 = (int_0, float_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bytes_0 = b"\r\xc1\xb1\r\t\xb7\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    int_0 = -693
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    float_0 = 883.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    str_0 = "\x0b"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    bytes_0 = b"\xe15)\xec)\xce\x8c\xf9\xf4\xa1W\x08\xc1\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    float_0 = 760.6291
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    str_0 = "SZ?\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    str_0 = "@;|s"
    list_0 = [str_0]
    tuple_0 = (str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    str_0 = 'I"a'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    str_0 = "F+I|pNGfLvwarKGh"
    module_0.match(str_0, str_0)


def test_case_3260():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3261():
    bool_0 = True
    float_0 = 476.2839
    tuple_0 = (bool_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    bytes_0 = b"O-\xb1:\xbd'q`I;\x0f \x9f\x9c3\xb8"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    str_0 = "{dP\r5,q8~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    int_0 = 790
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    str_0 = "vq@\x0b?LAv"
    int_0 = -2699
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    str_0 = 'k k3"""a[v'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    complex_0 = 2841.67 + 932.52j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    str_0 = "}_Sx|R7s<ak8="
    module_1.object(*str_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    str_0 = "77D;rl42Z`rh>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    bytes_0 = b"\xcc\xbaz\x9c\xa6\xd6\x11\x91\xa0\x1f;\xcd\xbb2\xb8#T\x95XG"
    int_0 = 1346
    module_0.get_new_command(bytes_0, int_0)


def test_case_3272():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3273():
    int_0 = -1857
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    complex_0 = -984.141 + 2487.36678j
    str_0 = "#mn"
    int_0 = 772
    tuple_0 = (complex_0, complex_0, str_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    bytes_0 = b"\xc1vr\xd1M{$\xd0M\xa9e'\x98\xb4\x97\x14\x85"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    bytes_0 = b"=\xa4\xfcF\xfc\xf5\x99\xa3{\xe4\x84Z\xd2\xe0\xbdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    int_0 = -1454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bool_0 = True
    float_0 = 847.765481
    dict_0 = {bool_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    bytes_0 = b"\xb8\t\xb3\xf7\x819\x7f"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = 777
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    bytes_0 = b"A\xb2+\x97j\xf4 j\xef7'\x98\xbb\x8e\x15e"
    set_0 = set()
    tuple_0 = (bytes_0, set_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    bytes_0 = b'&/~\xaf"\xa0.\xf2/,\x99)&\xfa\xd4\x03uS'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    int_0 = 1376
    int_1 = -2730
    tuple_0 = (int_0, int_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    object_0 = module_1.object()
    complex_0 = 5106.6188 - 1149.839j
    str_0 = "19ei"
    float_0 = 41.3
    set_0 = {complex_0, float_0, float_0, str_0}
    tuple_0 = (object_0, complex_0, str_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\xa8\xb4\x02F\xf2\xa6\x18\x0f"
    bytes_1 = b'\xdb\xbe\xfe\x8d\x02\x8c\xb5"\xb0\x08A\xeeH=3'
    str_0 = "!T0c@(Q9?$"
    tuple_0 = (list_0, bytes_0, bytes_1, str_0)
    tuple_1 = (tuple_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bytes_0 = b"r\xab\x07r*\x92\xfb\x08\xef\xdf\xdeRc\xf5rS"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    int_0 = -1502
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    bytes_0 = b"a\xd8\x16z\xfdU@v\x1a\xbe"
    module_0.match(bytes_0, bytes_0)


def test_case_3293():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3294():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    str_0 = ".qNLs<,wF[g|HHT7mhZz"
    module_0.match(str_0, str_0)


def test_case_3296():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3297():
    complex_0 = -788.938 - 353.69j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    bytes_0 = b"~\xa5:\x8e\x1f\x93\xd5\xc5\xfb\x05\xde]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    bool_0 = False
    str_0 = "s'yoX3/"
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    str_0 = "Pj7!q9n(pad7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    str_0 = "mC)@^VA:w3Tr~~Pg?D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    bytes_0 = b"\x8743\x9bw~dN\x05"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    float_0 = 548.769158
    list_0 = [float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    str_0 = "a<yOFtPA_*"
    module_0.get_new_command(str_0, str_0)


def test_case_3306():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3307():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    bytes_0 = b"\xa3\x12=\xf5\x1e\x93\xbfB\xda\xeb\x81\xe0\x8f\x89"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    complex_0 = 4404 + 1111.158j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bytes_0 = b"\x16\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    str_0 = "KO\rHC"
    module_0.get_new_command(str_0, str_0)


def test_case_3314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3315():
    float_0 = -593.56409
    object_0 = module_1.object()
    module_0.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    bytes_0 = b"\xbf\xb6\xf3\xef\x97\x0f\x12\xaf7\xd2\x0c-5$\xbe\x1c\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    float_0 = -4151.34
    bool_0 = True
    bool_1 = True
    tuple_0 = (float_0, bool_0, bool_1, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    dict_0 = {}
    complex_0 = 76.407 + 4115.657656j
    list_0 = [dict_0, dict_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    int_0 = -4159
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    bytes_0 = b"\x94\x9a\x16\xcf,,\xe2*&"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_1, bool_1, bool_1}
    tuple_0 = (set_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    int_0 = 3618
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    float_0 = 2051.428
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    str_0 = ";yk,.Y\x0bA\n:"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    float_0 = 1733.156655
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    int_0 = 526
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    complex_0 = 80.1928 - 1521.0235j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    int_0 = 413
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    float_0 = 2435.87
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    float_0 = 862.18112
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    str_0 = "A|@t.4LMF\\ZFXHV.JX[<"
    int_0 = -4654
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    bytes_0 = b"I\x83\xf3\x0f\x00{>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bytes_0 = b"\x9d2"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3335():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3336():
    str_0 = "L$ "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    bytes_0 = b"\x8d\xb8"
    float_0 = -212.0
    str_0 = "w\ny_"
    list_0 = [float_0]
    tuple_0 = (float_0, str_0, list_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: tuple_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    int_0 = -950
    int_1 = -1299
    set_0 = {int_0, int_0, int_1, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    bytes_0 = b"\x01\x07N\xca\x1eI\xde\x11\xa2?9}J\t; ^s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    bool_0 = True
    int_0 = -3408
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    set_0 = {tuple_1, tuple_0, tuple_0, tuple_1}
    module_0.get_new_command(set_0, bool_0)


def test_case_3342():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3343():
    int_0 = 582
    bytes_0 = b"\x0e\xae-\x16E\xa8\xdd\x11\x05?i\x0e\x8d\x8a2\x1e\xd2"
    tuple_0 = (int_0, int_0, int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    complex_0 = 256.43418 + 232.85035j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    float_0 = 2151.07873
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    int_0 = 2355
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    complex_0 = -1188.16 - 881.61596j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    float_0 = -90.04
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    int_0 = 1109
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    float_0 = -1383.66
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    str_0 = "W:+kAE96=TsJ>gy>Gn"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    none_type_0 = None
    bytes_0 = b"\x1c"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    int_0 = -2366
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    bytes_0 = b"\xf8\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    str_0 = "w%S-:r,[VX@ZEFV*4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    float_0 = 1145.007
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    int_0 = -359
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    int_0 = 474
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    float_0 = 2679.3279
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    int_0 = -1673
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    int_0 = 1663
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    float_0 = -249.6074
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    float_0 = -854.07
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    int_0 = 891
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, tuple_0, bool_0)
    tuple_2 = (tuple_1, bool_0)
    list_0 = [tuple_2, tuple_2, tuple_0, tuple_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    str_0 = "\no'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    bytes_0 = b"\x0eB\xb2$c\xc8op\x18Jw\xfa\xe0\x18\xdeB\xae\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    bytes_0 = b"/m\x1bC"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    str_0 = "`QEykN]3go"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    float_0 = -4774.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    float_0 = 138.53275
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0, float_0, float_0]
    bool_0 = True
    list_2 = [float_0, list_1, bool_0, bool_0]
    list_3 = [list_0, float_0, list_2, list_0]
    module_0.get_new_command(list_3, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    bool_0 = True
    bytes_0 = b"'\xbd\xc3\x03\xf4\xf3\x1d\x05"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {bool_0: tuple_0, bool_0: tuple_0, tuple_0: bool_0}
    list_0 = [dict_0, tuple_0, dict_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    none_type_0 = None
    int_0 = -2176
    module_0.match(none_type_0, int_0)


def test_case_3379():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3380():
    str_0 = "K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    float_0 = 295.0
    module_0.get_new_command(float_0, float_0)


def test_case_3382():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3383():
    str_0 = 'rXwGHRz"+tIT'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    float_0 = -2988.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    str_0 = "g\x0b2UCn-FS?I.q@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    bytes_0 = b"\xe2\x08\xe3r8\xbc_\x89\x7f\xb2\x86\x954\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    float_0 = 296.354
    bool_0 = False
    set_0 = {float_0, bool_0, float_0, bool_0}
    tuple_0 = ()
    str_0 = "rX?<>\ny"
    dict_0 = {tuple_0: bool_0, str_0: str_0}
    tuple_1 = (float_0, float_0, dict_0)
    tuple_2 = (tuple_1, tuple_1, bool_0)
    list_0 = [set_0, set_0, tuple_2]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    bool_0 = True
    set_0 = set()
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    int_0 = 1698
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    str_0 = "O-U[@(Jd!k6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    int_0 = 1704
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    str_0 = "k\ri\\l ?7\n<ad8(V:YZ\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    float_0 = 588.406049
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    int_0 = 1749
    str_0 = ""
    bool_0 = False
    tuple_0 = (int_0, str_0, bool_0)
    tuple_1 = (int_0, int_0, tuple_0, str_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    int_0 = -994
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    bytes_0 = b"\xc17>\xb2\xd4\xf9p\xd5\x9a\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    bytes_0 = b"\xfb\x05D\x17k.c\xe0O]\x985o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    int_0 = 305
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    str_0 = "m&w$IXmh\tx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    float_0 = -1317.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    complex_0 = 2828 + 5694.69747j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    str_0 = "q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    int_0 = 2406
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    bytes_0 = b"\xc3\x9d\x1c5\xf6\xef\xf1$\x9e\xb5\x03lK\x10\x7f!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    int_0 = 643
    list_0 = [int_0, int_0]
    float_0 = 1520.0
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    int_0 = 1916
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    str_0 = "l1'8\\3}QBdM"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    bytes_0 = b"\x1b\xe5\x12V\xb1y\xd8\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    str_0 = "KgqK_Z\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bytes_0 = b"\xb7\xd8T\x8eb\xd9\xb4\xec\x1aOE!`\x80\xa0j"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    int_0 = 3127
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    complex_0 = 2065.3 - 2375.14j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3415():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3416():
    int_0 = 2065
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bytes_0 = b"\xcc\x01\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    bytes_0 = b"5g\xc3Op\x913\xb48j<u\x03\xf7<\x98\x93\x01"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    bytes_0 = b'\xa0\xffJ\xab\x11\xbe]\x0e"\x1a4\x8f\x98'
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    str_0 = ':BR@i7ih-" '
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    str_0 = "5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    str_0 = "_,8"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    bytes_0 = b"\xd4E{\xa6\x02q\xb3\xa5\xb3LN:\x89\x13"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_3427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3428():
    int_0 = -3963
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    bytes_0 = b"\x0fE\x8d\xcc\xcc"
    complex_0 = 1153.2 + 4738.63634j
    int_0 = -216
    tuple_0 = (bytes_0, bytes_0, complex_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    str_0 = "m4\\4]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    float_0 = 465.0
    int_0 = 920
    list_0 = [float_0, float_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    bytes_0 = b'Ic\x0cn="\xc1\x0c\xf1\xc5\xe5Q\x91\xa0'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    float_0 = 1532.1
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    int_0 = -771
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    str_0 = "k(dMvJ*E9HW\n{$"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    bytes_0 = b"\xc1\xc6\x05\xb8\xa0\xd2'\xe7\x1b\x9e\xf9\xcaH\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    float_0 = -3925.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    str_0 = 'rqx1"4uF0hLTU(E`/)'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    float_0 = -1071.6072
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    int_0 = -1548
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    bytes_0 = b"\xef\x8a\xde\xea\xe3"
    int_0 = 2026
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    bytes_0 = b"W\x16\xd3\xd1c\x97h\xbc/T"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    int_0 = 3624
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    bytes_0 = b"m\x83\x8dR"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    bytes_0 = b"\xdc\x95<6\x91+\xae\x17\x8d\x82\xf0\xac\xb5\xd7\x1a9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    float_0 = 571.315
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bytes_0 = b'\xe6\x8a*\xe2\x8e\xc4\xe3":\xae'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    str_0 = "hSfuy|1h"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    none_type_0 = None
    str_0 = ""
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    str_0 = "cRL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    tuple_0 = ()
    bytes_0 = b"\xa8\x99A\xa5\x8fDe\xae\xbb"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    complex_0 = -1211.93 - 388.6594j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    int_0 = 972
    complex_0 = -188.468 + 1255.27426j
    int_1 = 2496
    tuple_0 = (int_0, int_0, complex_0, int_1)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    float_0 = -352.3
    module_0.get_new_command(float_0, float_0)


def test_case_3459():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3460():
    bytes_0 = b"C\x9b\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    int_0 = -1725
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    str_0 = "_I0HF\n:JLZn-Uq\x0bj*?Hy"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    str_0 = "\\9J'&K88/^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    int_0 = -1543
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    str_0 = "\x0c\\Mw-FP)zG^}\raq/EG7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    float_0 = 1683.8
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    complex_0 = -1424 - 4292.159j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    bytes_0 = b"\xfdA\xa2u\x0f\xabM\xf1"
    tuple_0 = ()
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    int_0 = -1670
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    complex_0 = 1597.673 - 655.042363j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [bool_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    bytes_0 = b"\x0c\xfe\xaa\xbc\xeaE\x83\xa4\xe3\xec\xf0\xd1\x12pO"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    bool_0 = False
    dict_0 = {}
    bytes_0 = b"\xaa\xd8\xd5\xa2\xc7\x0e\xfd\x00\xd0\x9d\xf1\xe4\xdd\xe9\x15\xadw"
    tuple_0 = (dict_0, bytes_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    str_0 = "\x0c/mByS05"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    bytes_0 = b".\x12v\xb6W(u\x9b\x8dN\xe2\x86\xceM\x9d\xd2w\xa8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0)
    list_0 = [tuple_0]
    list_1 = [list_0, set_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    float_0 = -2644.2142
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    int_0 = -1393
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


def test_case_3484():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bytes_0 = b"Y<\x8c/\x06\xfb\xc6ZY\xb3c\x8b\x15i"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    float_0 = -854.400058
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    str_0 = "I<UUd%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    list_0 = [bool_0, tuple_0, tuple_0, tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    str_0 = "8k,~]CpA~2i2^1E.Eo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    bytes_0 = b"a\x1aA\xdfn\xc6\xbb\x1cH\xe4\xaa\x97\xb9\xf0\xf1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3492():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3493():
    bytes_0 = b"K\x93\x06\xdddy[\xe5\xfb\xfe?X\x18N\xd5\xa0\xed\xa1\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    bytes_0 = b"l\x11\x95AD\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    int_0 = -2216
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    int_0 = 1270
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    str_0 = "o&F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    int_0 = 1206
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    int_0 = 2316
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bool_0 = False
    bytes_0 = b"\x85\xaft7\xae\xf9f\x1br\xc5c\xdd\xa2_\x8fbx"
    tuple_0 = (bool_0, bool_0, bytes_0)
    list_0 = [tuple_0, bytes_0, bytes_0, tuple_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    set_0 = set()
    int_0 = -1315
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "MAC>ZhoUYj"
    str_1 = "bw_\x0c~Go"
    bool_0 = True
    str_2 = '\n-,#YCA3%$S.H")'
    dict_0 = {str_0: none_type_0, str_1: bool_0, str_0: str_0, str_2: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    str_0 = "Mv<3,VY#[@~mo0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    float_0 = -420.8
    module_0.match(float_0, float_0)


def test_case_3505():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3506():
    str_0 = "L6?!ka7\r\rTDB;,%Ura"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    float_0 = -498.22
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    int_0 = -1782
    bytes_0 = b"\x15\xf0\xc8c\x04"
    tuple_0 = ()
    tuple_1 = (bytes_0, tuple_0, tuple_0)
    int_1 = -1888
    tuple_2 = (int_0, tuple_1, int_1, int_0)
    bool_0 = False
    list_0 = [tuple_2, int_0, tuple_1, bool_0]
    tuple_3 = (tuple_2, list_0)
    list_1 = [tuple_3]
    module_0.match(list_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    str_0 = ""
    str_1 = "VM{RASD<*'w@"
    str_2 = "=\\|A\n"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    complex_0 = 1410.44 + 749.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    float_0 = 488.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    str_0 = "\r"
    complex_0 = -505.27541 + 992.73j
    tuple_0 = (str_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bool_0 = True
    bytes_0 = b"\x97\xb8\x90\xaa"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    int_0 = 2785
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bytes_0 = b"\x13=]0\x89\x13\x85Jma\x8a+/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    complex_0 = -1866.10543 + 3810.1079j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    list_1 = [complex_0, list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    str_0 = "`()C;avQy\ns:Tu"
    module_0.get_new_command(str_0, str_0)


def test_case_3520():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3521():
    complex_0 = -1307.282477 + 1437.762379j
    set_0 = {complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bool_0 = True
    int_0 = -2187
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    int_0 = -2910
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    str_0 = "B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    int_0 = 845
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3527():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3528():
    int_0 = -1813
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    bytes_0 = b"\xde\t\xc5\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    float_0 = -1276.64947
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    int_0 = -1689
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    bytes_0 = b"\x0eG\xcb\xd6L\x9b\x98\\\x82\x95\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    int_0 = -3097
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    str_0 = "Y2`+%4\rdc=-A@{"
    str_1 = "^S99"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    str_0 = "d2Ds"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0, dict_0)
    tuple_1 = (tuple_0, bool_0, dict_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    int_0 = 1033
    dict_0 = {int_0: int_0, int_0: int_0}
    int_1 = -973
    bool_0 = False
    tuple_0 = (int_0, dict_0, int_1, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    bytes_0 = b"m\xd6z\xaf-\xf8"
    int_0 = -86
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    float_0 = 1408.13
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    str_0 = "M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    bytes_0 = b"\x8e4]\x19\xdd\xd4N\xe4\xb6\x94V\x0e\x86\xa4\xc8\xcc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    str_0 = "Qjp>\t.@EqH8<F[rut?"
    str_1 = "pqtk%ebG}R"
    dict_0 = {str_0: str_1, str_1: str_1, str_0: str_1}
    int_0 = -1015
    tuple_0 = (dict_0, int_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    bytes_0 = b"\xbb8/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "\tdqd[<=#("
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    int_0 = 555
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    str_0 = "-"
    list_0 = [str_0, str_0]
    set_0 = set()
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    bytes_0 = b"\xcfW"
    float_0 = 1420.1
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    str_0 = "3mMR7(0oqfLvB'\x0cc"
    float_0 = 1829.5
    dict_0 = {}
    tuple_0 = (str_0, float_0, str_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    float_0 = -1017.1738
    bytes_0 = b'\xd0"'
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    str_0 = 'A.dp@"edlB*=rD~7\x0cP@N'
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    str_0 = "Oi+Dc<`}3"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    int_0 = 3922
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    str_0 = "++6;W0dPj"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


def test_case_3559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3560():
    bytes_0 = b"\xf2o\x98\xecP\xcb\x1a`5"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    str_0 = "8"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    int_0 = 2499
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    str_0 = "kgg.ChKU@C8\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    int_0 = -212
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    float_0 = -1850.723
    str_0 = "iBp)3"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    bytes_0 = b"\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    str_0 = "3l"
    int_0 = -2367
    set_0 = {str_0, int_0}
    list_0 = [set_0, str_0]
    module_0.get_new_command(list_0, set_0)


def test_case_3570():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3571():
    float_0 = -1791.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    int_0 = -2617
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    int_0 = 616
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    int_0 = 4183
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    float_0 = 1477.9
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bytes_0 = b"\xb2I\x9d{-\x11g\xe7\xdewI<\x95L\x86\xee"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


def test_case_3578():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3579():
    str_0 = "\\I[\n3 ri"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    int_0 = -1551
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    float_0 = 4505.9678
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    object_0 = module_1.object()
    int_0 = -99
    list_0 = [object_0, object_0, object_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    bytes_0 = b"cx~\xa4\xe4\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    str_0 = "GoWg'9u]7n@"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    float_0 = -1193.386933
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    int_0 = -675
    float_0 = 907.102
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, float_0: float_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    set_0 = set()
    float_0 = -2778.853919
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    str_0 = ""
    str_1 = "@"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bytes_0 = b"\xf2l"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    none_type_0 = None
    bytes_0 = b"\xbf\xba!\x0e@N\xb4\xb3.\x8e\x81"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    int_0 = -1159
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (int_0,)
    tuple_1 = (int_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, list_0)


def test_case_3595():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3596():
    bytes_0 = b"\xbc\xba\xb2\tp"
    complex_0 = -878.258644 + 8.887j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    float_0 = 914.146763
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0, bool_0, tuple_0)
    set_0 = {tuple_1, tuple_1, tuple_1, tuple_0}
    list_0 = [set_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    bytes_0 = b"\x7f3K\x16E\xe2\x0eE"
    int_0 = 304
    list_0 = [bytes_0, int_0, bytes_0, bytes_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    set_0 = set()
    list_0 = [set_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    int_0 = 948
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    float_0 = -2197.189184
    list_0 = [float_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    float_0 = -252.32155
    str_0 = '^<V,LZX"[ca\tL\t'
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    int_0 = -668
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    bytes_0 = b"j\xcf\xe7\x0f\xc3\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    int_0 = 298
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bytes_0 = b"F\x13\xbc\x17p\xe9\x9e>\x9cu8`"
    tuple_0 = (list_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_3608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3609():
    str_0 = 'V(*AA4D2mK"";+'
    none_type_0 = None
    str_1 = "V\\>(k^=yK5\x0bRD[ku6)\n"
    str_2 = "hFn`_L5'"
    str_3 = "1j]`!>sM!=1_I*"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    none_type_0 = None
    float_0 = 1712.5
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    int_0 = 281
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    str_0 = ":%hyA+nV-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    complex_0 = 2559 + 72.1j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    float_0 = -2017.820414
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    int_0 = -2219
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    bytes_0 = b"\r\xc2\x92\xd7,\xd6\xd1\xf1\x06\x8a\x06xRRt\xdfOa\x08\xda"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    str_0 = "3yr\\\nbgwNw"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    float_0 = 3450.5428
    module_0.match(float_0, float_0)


def test_case_3621():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3622():
    bytes_0 = b"\xf9\xaf\xf2e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    bytes_0 = b"\x14\xe7\xd0\x87\x89\x15\xd68\x00\xf4H$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    float_0 = 248.606822
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bool_0 = True
    str_0 = "K\\l;"
    dict_0 = {bool_0: str_0, bool_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    list_0 = [tuple_0, tuple_0, tuple_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    bytes_0 = b"p3'\x93\x94a\xcd\x98\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    str_0 = "T~\nz5\x0c0M9SS\nLJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    bytes_0 = b"pl\xcbs^\t\xa7\xfc^\xe3\x1eL\x12\xc7Q3\xfb{B"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    str_0 = "`FN4k0+k2qe?Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    int_0 = 3247
    tuple_0 = (int_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(tuple_0, set_0)


def test_case_3633():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3634():
    int_0 = 2118
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    tuple_0 = ()
    str_0 = "FVM#zv=JapF7"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    bytes_0 = b"\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    bool_0 = False
    str_0 = "\rM1_\t v&Ma5+TV\x0cF'"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    float_0 = 1140.30463
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    str_0 = "8({w|O.[BtTouGhW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    bytes_0 = b"\x8b\x8e\x9b\x81"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    list_0 = [set_0, object_0, object_0, set_0]
    int_0 = -695
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    int_0 = -4609
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    str_0 = "_$p,P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    int_0 = 1883
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    float_0 = -4660.57803
    module_0.match(float_0, float_0)


def test_case_3648():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3649():
    int_0 = -1308
    module_0.match(int_0, int_0)


def test_case_3650():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3651():
    int_0 = 1308
    module_0.match(int_0, int_0)


def test_case_3652():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3653():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    str_0 = "NWrhw'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    int_0 = -574
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    str_0 = "ZmO\x0c7hs{3\n@kJD2C%n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    str_0 = "lF\x0bV"
    float_0 = -2830.7055
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    complex_0 = 1093.32 - 119.2286j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    bytes_0 = b">\xaaH|\xa11\xab\x89\x97\xe7\xf6&\x0f\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    bytes_0 = b"\xc7\xab\xa2\x06;\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    bytes_0 = b"Y\xf2\xe4\xd5\x8c\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    int_0 = 1613
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    str_0 = "7U5e0\tCM\x0cv7<\n\\2&f(1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    bytes_0 = b"\x83J*tM\xb4\xfeC{w\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    int_0 = 2727
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    bytes_0 = b"_R\x199\xbd\xb3)%\x0fq\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    int_0 = 2545
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    str_0 = "P]y;n.-FR};;<xo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    bytes_0 = b"\x97\xde\x99\xe4\x0b\x08\x0cn\x1cb'\x0f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    str_0 = "%0)+Z%<p^C\x0cOi+\\UB9W"
    list_0 = [str_0, str_0]
    tuple_0 = (str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    int_0 = 1850
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    bytes_0 = b"R"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    int_0 = 368
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    bool_0 = False
    bytes_0 = b",6\xc1\x83\x906Y\xd5^\x89"
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    str_0 = "Q\x0c\r];f\t!e[kQvPyH"
    set_0 = {str_0, str_0, str_0, str_0}
    str_1 = "QDWL~EZ"
    module_0.match(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    bytes_0 = b"\xf8\xc9Q\xbbp\xee\xd6Y\xfb\xb6\xf1\xc1\xc4{\xa6\x84\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    object_0 = module_1.object()
    int_0 = -680
    str_0 = "%ogJ%u\tuM'\nDZff}i59J"
    set_0 = {object_0}
    tuple_0 = (str_0, set_0, set_0)
    tuple_1 = (object_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    int_0 = 2725
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    tuple_0 = ()
    int_0 = -2490
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    float_0 = 2185.945
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    str_0 = " >F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    bytes_0 = b"Y5\x11?\x8c"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    float_0 = -2170.84
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    bytes_0 = b'kZ"\xb1\xd3\x11\x88\x06\xafg'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    str_0 = "\x0c\t!z$ZO_({ouEhf~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    bytes_0 = b"\x0c~\xb3\x011\x0c5\x95\xf6\x94F\xa2La\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0, set_0]
    bytes_0 = b"#\x92\xcb\xcciZ\x8a\x04\xfd\xa3$>\x1e\xf7\xdal\x12b"
    tuple_0 = (list_0, bytes_0, bytes_0, list_0)
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    bytes_0 = b"\x90|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    str_0 = "["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    bytes_0 = b"\x10l\xb7\xdc\x96\x15"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    int_0 = 3619
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    complex_0 = -2047.1 - 2194j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    dict_0 = {object_0: tuple_0, object_0: object_0, tuple_0: object_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    int_0 = -1770
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    int_0 = 3196
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    int_0 = -800
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    bytes_0 = b"F\xc6\xa6\x05\xe3\xca1i\xcf9"
    int_0 = 2211
    list_0 = [bytes_0, int_0, int_0, bytes_0]
    list_1 = [list_0, int_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    str_0 = "9w@R."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    bytes_0 = b"\xf0V\xb7\x8aQ-@\x1c\xc3\xb9\xb4\xb1"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    bytes_0 = b"9\xa83\xe7\xa7"
    bool_0 = False
    str_0 = "u(@5$X[1kP[wtfH\x0b"
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1)
    dict_0 = {bytes_0: tuple_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    int_0 = -884
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    int_0 = -3058
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    int_0 = 749
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    float_0 = -2390.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    int_0 = 69
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3717():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3718():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    float_0 = -350.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    str_0 = "cn3+\x0b]r;-e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    bool_0 = True
    int_0 = -37
    bool_1 = False
    set_0 = {int_0, bool_1}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    bytes_0 = b"\x0b\xe9eoQ\x9d\xc53s\xa4\xbc\xe1\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    str_0 = "?isN}^r0z\tjIu7Rb"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    bytes_0 = b"\x157\xfa\x1d\xf8\x99\xa9yI\xce\xe8ir"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    str_0 = '+\t:)l!fk21GJ3"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    int_0 = 990
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    str_0 = ":"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, str_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    str_0 = "I%+kzN)yoC`s}V:Q\x0cD"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    str_0 = "64TecXB{-_^rEV("
    set_0 = {str_0, str_0, str_0}
    float_0 = 361.6345
    list_0 = []
    tuple_0 = (str_0, set_0, float_0, list_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    int_0 = -636
    set_0 = {int_0, int_0, int_0, int_0}
    int_1 = 246
    tuple_0 = (int_0, set_0, int_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    complex_0 = 1084.93 + 1576.135j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    complex_0 = 4546.5006 + 1137.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bytes_0 = b"\xc3"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    bytes_0 = b"]\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    float_0 = -1166.9388
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    int_0 = -135
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    str_0 = "klM7_^"
    none_type_0 = None
    str_1 = "oTj@Z%\tQQUt"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    int_0 = 3486
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    int_0 = -879
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    str_0 = "5UE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    str_0 = "`Lr3C}K(_U)`\x0czkymq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    bytes_0 = b"\x19\xcb\xd1\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    str_0 = "O2=\r;\rc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    bytes_0 = b"#&9@\x8d\xdd\xbc\xae\x97\xac\xbdJ)\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    bytes_0 = b"\xb8j\xf7\t\xf6\xca\xdemP\xfa"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    str_0 = "o1T)#)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    complex_0 = 432.959107 + 313.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    str_0 = "r,X:?#4~sme@b\tR$;b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    int_0 = 3064
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    bytes_0 = b"\xdd\xc1\xe4\xd8[@\x04\xef\xb61>jF\xfcZ\x17\xfd\t"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    float_0 = 2167.52
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    int_0 = 1326
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    bytes_0 = b"{\x81\xf6\xb8ul.\xa8\xcb\x13\x91#\x10\x1b\xacs\x91"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    str_0 = "Z:aO=*Z9XfIvTzT\x0cj"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    str_0 = "n\t2"
    int_0 = -489
    dict_0 = {str_0: str_0, str_0: int_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    float_0 = 2092.4
    int_0 = -1437
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    int_0 = -2248
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    float_0 = 3064.1359
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    bytes_0 = b"(J\x0f\x9djj\xd5V\xd6`\x93"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    complex_0 = 1102.36285 - 2291.95931j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    str_0 = "a$$/#dX8)#svFg,cr]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    str_0 = "9o6.xrs?SM[2\r;\x0bW>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    str_0 = "X8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    int_0 = 378
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    bytes_0 = b"UM"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    bytes_0 = b"\xcd6At\xeb\xeaf\xa9]#\xf2}\x83\xee\x88\xdbD\xa0j\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    int_0 = 4471
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    set_0 = set()
    str_0 = "3<tv/&^P^9\x0cf<"
    list_0 = [str_0]
    tuple_0 = (set_0, str_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    str_0 = "XHoS\r~a4JAL3h7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    str_0 = '\\"L?3qjv8-'
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    bytes_0 = b"\xe2\x81\xa3&\x1c\xdf\x06\x04\xa3g:\xd9s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    str_0 = ""
    bool_0 = False
    list_0 = [str_0, str_0, bool_0, bool_0]
    module_0.match(list_0, str_0)


def test_case_3780():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3781():
    int_0 = 2580
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    bytes_0 = b"\xc0j\xdal\x8d\xae\xfb\xd1\x05\xb9\xadz\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    none_type_0 = None
    complex_0 = 2121.69172 + 1254.43j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    object_0 = module_1.object()
    float_0 = 1012.257279
    dict_0 = {object_0: object_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    bytes_0 = b"\xe7~\xcfZ\x82\xdb\x9e\xcb\xa0\xd5x\xb8\xe3\xdb\xba"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    float_0 = -2069.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    bytes_0 = b"\x95"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    str_0 = "PKfB,4N'Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    bytes_0 = b"\x10J|E\xed\xba\x16s\x0bF"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    str_0 = "BW`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    str_0 = "\n42aiLa4!4Jk8Jjpa-M."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    float_0 = -2013.3871
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    bytes_0 = b"\xd6\xa9p*\xb4\xcfc\x01\x9c\xd9\xb1J\xd1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3795():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3796():
    str_0 = "4QRDl=y728ktiS"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    str_0 = "$U\tG43&}k+\rW/.j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    int_0 = -1744
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    bytes_0 = b"\x02\xd6\xd5\xabE\x92\x87\x13|\xa3\x83"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    float_0 = 2894.195945
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    float_0 = -2142.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    float_0 = -2070.896972
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    bytes_0 = b"V\xaal\xfc.aJ\xaa\xbf\x7f*\x95\x06<\xaa#\xae\xef\xad\xed"
    module_0.match(bytes_0, bytes_0)


def test_case_3806():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3807():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    bytes_0 = b"W\x7f\x96\xa5n\x8d\xa5\xe2\xe8r\xc8]tZ\x12\xa8\xc7,"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    float_0 = -697.1153
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    str_0 = "|\x0cgu*-h<9{@h$cy} "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    int_0 = -2531
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    set_0 = set()
    str_0 = "-{qy#[J?UOUX8.rmT6<w"
    tuple_0 = (set_0, set_0, set_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    int_0 = -1421
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    int_0 = 5208
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, set_0)


def test_case_3818():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3819():
    int_0 = 467
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    complex_0 = -1369.745835 + 1382.58j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    str_0 = "k!\r3guUqafVdFV"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    bytes_0 = b"\xa7\x0b\x0etq\xa61'\xe1\xbc\x0e\xab\xdd\xe6\xeaP\xc1\xcd\xee["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    str_0 = "9\x0c\x0cH} <E"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    str_0 = "^],U(b,("
    bool_0 = False
    str_1 = '%`/8!",,oZ/+4C'
    tuple_0 = (str_1,)
    tuple_1 = (str_0, tuple_0, tuple_0)
    tuple_2 = (str_0, bool_0, tuple_1)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    bool_0 = True
    bytes_0 = b'\xfd\xa7"\xc5F5\xe1\xfe_D,{\xc7u\xd8q\x06\xbd\xe2\xb4'
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    bool_0 = False
    str_0 = "4EwuBJ)"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bool_0 = True
    bytes_0 = b"\xf4\x9a\xb8\x0c\x03\x1et\xbc\xc0\xd6\x88e\x9d"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    int_0 = -2616
    float_0 = -2316.233308
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    int_0 = -811
    object_0 = module_1.object()
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    int_0 = -2994
    bool_0 = False
    tuple_0 = (int_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    int_0 = -301
    module_0.get_new_command(int_0, int_0)


def test_case_3832():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3833():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    int_0 = 2721
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    bool_0 = True
    str_0 = "Javb@"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    int_0 = 962
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    str_0 = "'=,9b3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bytes_0 = b"/4\xf6l\xde\x8d\xea\x05\x19eW\xe5\xec\\\x96\x96D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    bytes_0 = b"7I\xa0\xeb8\xb6\xb1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    int_0 = 3779
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    int_0 = -142
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    bytes_0 = b"\xc1]\xd9e3\x7f}\xbe\xbd(\xdfU\xe1\x0b\x08\xcf\x9fZ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    int_0 = -697
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    int_0 = 1735
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    int_0 = 965
    str_0 = "m(e)"
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


def test_case_3851():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3852():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    int_0 = -438
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3854():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3855():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, list_0)
    list_1 = [tuple_0, list_0, tuple_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    float_0 = 1101.3849
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_3859():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bool_0 = False
    bytes_0 = b"\x85\xba\xb7Z\x0f\xbc\x0f/\x9a\xb6\xd0\xc5\xff"
    bytes_1 = b"\xe0\x87\x89X\xc2IA\xd9\xe3"
    tuple_0 = (bool_0, bytes_0, bytes_1)
    list_0 = [tuple_0, bytes_1, tuple_0]
    list_1 = [list_0, bytes_1]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    int_0 = -2417
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    int_0 = -1013
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    int_0 = -611
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    complex_0 = 3084 - 1621.29j
    str_0 = "~(?7 YZr"
    list_0 = [complex_0, str_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    float_0 = 5811.67726
    set_0 = {float_0, float_0, float_0, float_0}
    complex_0 = 952.3 + 910j
    list_0 = [set_0, complex_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    int_0 = -337
    set_0 = {int_0}
    list_0 = [int_0, set_0, int_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    none_type_0 = None
    float_0 = -2828.2
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    dict_0 = {}
    tuple_0 = (dict_0,)
    set_0 = set()
    tuple_1 = (tuple_0, dict_0, set_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    float_0 = -2748.546594
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    complex_0 = -483.95 + 3544.1661j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    str_0 = "^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    str_0 = ".On"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    bytes_0 = b"\xab\xac\xa7\x96\xd4\xb4\x95+0\x97\x80\xb2\xc79"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    str_0 = "2J$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    str_0 = "j"
    str_1 = "1(bK6w5"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    str_0 = "#V-DC>qanV"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    str_0 = 'Ws`\np"pVtsA\t+<R:\rsf'
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    complex_0 = -616.8 + 970.6j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    str_0 = "aZzaBW)$\nA;q;"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (str_0, set_0, set_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    str_0 = "I73&\\O3qm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    complex_0 = -2111.6 + 2576j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    int_0 = -649
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    str_0 = "<D|"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3887():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3888():
    int_0 = -387
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    int_0 = -1535
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    str_0 = "-m"
    dict_0 = {str_0: str_0}
    str_1 = '4-N6u"V!?\x0c2P%vq'
    tuple_0 = (dict_0, str_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    str_0 = "N."
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    str_0 = "l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    float_0 = 246.41
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    bytes_0 = b"\xf1J\xa7"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    complex_0 = 3069.484 - 1430.009j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    bytes_0 = b"\xa8O/#\x08s)k?q\x0e\xe4Z\x11Y{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    str_0 = "!Cv<oA"
    module_0.get_new_command(str_0, str_0)


def test_case_3898():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3899():
    str_0 = "L#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    none_type_0 = None
    bytes_0 = b"\xe4\x9d\xcd\x8a\xf0\xa4a\xf4\x86\xb9"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    float_0 = 1089.6512
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    float_0 = 909.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    int_0 = -956
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    str_0 = "9?~rYCV%vyr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    int_0 = 1502
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    float_0 = 1108.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = 1635
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    str_0 = "?Y\tjx6Lt[KJINw"
    none_type_0 = None
    str_1 = "Jp$&\\Gejlzwlf>v)tHV"
    str_2 = "\tYm\nRTB53*\x0cN"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    str_0 = "\r==%s[\x0b"
    bytes_0 = b"\xf7\x88\x17\x08\x9bX\xd3\x8cd\xe8%\x95\x08\x89\x83"
    dict_0 = {str_0: bytes_0, str_0: str_0, str_0: str_0}
    set_0 = set()
    str_1 = "-\ttv ?\r4=J@G\to;"
    bool_0 = False
    tuple_0 = (dict_0, set_0, str_1, bool_0)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    int_0 = -2409
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    int_0 = -1401
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    str_0 = "2P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = 1238
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    float_0 = 622.3518
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    bytes_0 = b"\xc6\x9e\x8atY\x92\xa77\x8b\xc5Qjc$\xeb/o$\xac\x8f"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    bytes_0 = b"g\xce\x94\x814n^\xed\x8b\x89\x1c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    bytes_0 = b"0t\xf6\xb9@\x0bb\x9c`Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    bytes_0 = b"}\xd4Z\xb3r"
    bytes_1 = b"\xd8ar\x01\x7fDjGh}\x1a[y\xe4\x00Dn\xb6\t"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    int_0 = -4325
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    float_0 = -322.6586
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    float_0 = 5350.165
    module_0.get_new_command(float_0, float_0)


def test_case_3924():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3925():
    str_0 = ":+<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    int_0 = 3868
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    bytes_0 = b"Tak"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


def test_case_3929():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3930():
    str_0 = "P.#\x0c%*et^"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (str_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    bytes_0 = b"\xce\x9e\xc3n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    bytes_0 = b"\xda\xa3\x85M\x1f\xb9\xf4g\xec3\x8f E=('\x90="
    bytes_1 = b"\xfae\xc5G\xe73\x04\xe6"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_1: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    str_0 = "$4Z\rndC%l\x0bgoa}wZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    int_0 = -457
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    str_0 = "|5<J~uMq+!\\Ftu\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    str_0 = "hkO:)Aq#UY(c|x|[~7g"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    float_0 = 1460.871
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    bytes_0 = b"\x13\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    int_0 = 2526
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    bytes_0 = b"D^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    str_0 = "i K-RU1i4qD]z2O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    bytes_0 = b"3`t\xae\xef-D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    str_0 = "BcW;,7EK&="
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    str_0 = "0)F\t.-/%\tzL\r>('mm%n"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bool_0 = False
    str_0 = 'FTn{g"zD!;\tZ9:q?\\'
    bool_1 = False
    dict_0 = {bool_0: str_0, bool_0: bool_1, bool_1: str_0, bool_1: bool_1}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    str_0 = "Jhrvq!2E.lO7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    complex_0 = -3630.5 - 883.719j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    str_0 = "(!nvOIyb>lvjvPa s2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    int_0 = 496
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    str_0 = "dCNxu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    int_0 = -375
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    str_0 = 'dE."'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    int_0 = -4561
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    bytes_0 = b"}b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    bytes_0 = b"\xa5\xe4\x16\xb1J\x8e\xfd<\x97\xbc\x08eHf\x1d\xbf\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    bytes_0 = b"~\nt\xf56a\x07(\x8a\x1a\xa9PI\xe7Y\xa4\xe6\x0b\x1a"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    bool_0 = False
    set_0 = {bool_0}
    bytes_0 = b"\xe2<J\xdc\xf0"
    list_0 = [bool_0, bytes_0]
    tuple_0 = (set_0, bytes_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    str_0 = "s\\*)D|fJ="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    int_0 = 4018
    module_0.match(int_0, int_0)


def test_case_3967():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bytes_0 = b"\x14g%\xa28\xa8\xbb\xcbO"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    complex_0 = -1498.28 + 799.20328j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    str_0 = "$_\r"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    bytes_0 = b"\xddj\x81\xa4\xce\xf3Z\xea*a\xf8M\x99\xc0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bytes_0 = b"6^\x16\x88\xde):oF\x8b\xf4x\n\x89ag"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    complex_0 = -648 - 4794.16j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    bytes_0 = b"z1\xb0\xf4\x9a\xc8q{\xf0\xe0D\x7fL8\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    bytes_0 = b"\xbc\xb1w\x9c\x16\xe6?o\x92\xdb\x7f\x0e\t\x178"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    str_0 = "7-I\x0bNA'K|m\t{@qnW%pR$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    str_0 = "b\\L\x0b/"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    int_0 = -962
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    int_0 = 2097
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    bytes_0 = b"\xb8\xafX\xd5\xac\xfaj\x16'\xa5\xd7BL"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    int_0 = 579
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    none_type_0 = None
    str_0 = "Y_Y](vmcx2oIegzH="
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    str_0 = " xw"
    bytes_0 = b"&v\xd5=p\xda]"
    tuple_0 = (str_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    complex_0 = -1536.41 + 2158.5858j
    module_0.match(complex_0, complex_0)


def test_case_3986():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3987():
    float_0 = -466.297
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    int_0 = -540
    module_0.match(int_0, int_0)


def test_case_3989():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3990():
    str_0 = "mc"
    int_0 = 592
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    bytes_0 = b"u\xbc\x9e\xf7c\xa4\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    str_0 = "U\x0bOiP.?2/"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    str_0 = ")8}Vv2YL0>L ]|{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    complex_0 = -190 - 4079.37j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    str_0 = "lT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    bool_0 = True
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    float_0 = -388.767641
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    complex_0 = 2083 - 1085j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    float_0 = 231.38135
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    str_0 = "=h%VKNQ>Q'V6F+$IC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    complex_0 = 4565.3 + 175.497j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    complex_0 = 1927.07 - 1086.9615j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    complex_0 = -2168.58168 + 440.526j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    float_0 = 582.889
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    float_0 = -1977.4
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0, float_0]
    tuple_0 = (float_0, dict_0, list_0, list_0)
    str_0 = "[P\x0c7JHQARsNj.zDo*#"
    bool_0 = False
    tuple_1 = (tuple_0, str_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    str_0 = '9J;V*"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    str_0 = "IxeM"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    float_0 = 1801.0
    set_0 = {float_0, float_0}
    list_0 = [float_0]
    tuple_0 = (float_0, set_0, list_0)
    str_0 = "lX8`\x0c2V\x0b4(?s+\x0b&"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    bytes_0 = b"R\xa8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    int_0 = -2696
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    float_0 = 3728.8
    list_0 = [float_0, float_0, float_0, float_0]
    dict_0 = {float_0: float_0, float_0: list_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    int_0 = 706
    module_0.match(int_0, int_0)


def test_case_4013():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4014():
    int_0 = 2946
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    int_0 = -3087
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    bytes_0 = b"\x8f\x7f$a"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    bytes_0 = b"3:\x1b\xd8v\x1aYSr\xfa#\x9c\xf4g"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    float_0 = -1269.6838
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    str_0 = "P);9\r\nQQ]J#5fL=#"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    str_0 = "av%\\DEh^JwUnHdqb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    bool_0 = False
    str_0 = "?k\\;wfr>"
    list_0 = [bool_0, bool_0, str_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    float_0 = 1131.532667
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    str_0 = "|!@{3#"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    str_0 = "9.{.jn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    int_0 = -1780
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    int_0 = -1696
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    bytes_0 = b"\xa7\xeeXgF\xe2S\x11%?\xda\xa1FCC\x89Z\xa0\x84*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    str_0 = "~1/cpgI.w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    float_0 = -685.5073
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    list_0 = []
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


def test_case_4031():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4032():
    bytes_0 = b"\x81\xfa\xf7I\xc97"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    str_0 = "r(_)8GU]U"
    module_0.get_new_command(str_0, str_0)


def test_case_4034():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4035():
    list_0 = []
    object_0 = module_1.object()
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    float_0 = -4470.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    int_0 = 856
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    bytes_0 = b"c\x112`R0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    int_0 = 692
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    str_0 = "\\\nfkQsYUw(Llb\\'\\;k"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    str_0 = "EHTkO<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    list_0 = []
    bytes_0 = b"\xc4\x94\xb9\x9e3\xfd;\x07"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    str_0 = 'rvm%|Eu\x0b<V22T"Nq\x0c'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    int_0 = 1854
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    list_0 = []
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    str_0 = "]X"
    set_0 = {str_0, str_0}
    list_0 = [set_0]
    tuple_0 = (set_0,)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    float_0 = 524.588286
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    float_0 = -441.65
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    str_0 = "7xn PY(\\"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    bytes_0 = b"#,\xc6\x05\x01s!\x7fF^\xe2\xd1\xe6[\xa4~dkx"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    int_0 = 287
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    bytes_0 = b"\xb0U8Cy_\xe7\xd7\xe3\x88>\xe7X"
    tuple_0 = ()
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    int_0 = 297
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    str_0 = "t_5\x0c."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    bool_0 = True
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    bytes_0 = b"{\x12\x9f\xa5\x90\xde\x1e3\xb4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    list_0 = []
    bytes_0 = b"\xf3\x03'\x9f\xed\x81Y\xa5"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    float_0 = -3794.0
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    int_0 = -1434
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    int_0 = 1875
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    complex_0 = 1560.1 - 136.488786j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    int_0 = 671
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    int_0 = -1277
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    complex_0 = 3816 - 2244.82256j
    int_0 = 2731
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    none_type_0 = None
    float_0 = -2900.0
    dict_0 = {float_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    bytes_0 = b"\xf5\x90\xc3\xb1\x93\tAq\xef\x8b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    str_0 = "^g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    float_0 = 1815.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_4074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4075():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    float_0 = -1566.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    int_0 = -633
    str_0 = "ScC'X`[^M\nam"
    set_0 = {str_0, str_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    bool_0 = False
    float_0 = -1503.27444
    module_0.match(bool_0, float_0)


def test_case_4080():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4081():
    str_0 = "L"
    module_0.get_new_command(str_0, str_0)


def test_case_4082():
    pass


def test_case_4083():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4084():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bool_1 = False
    tuple_0 = (dict_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_4085():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4086():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (tuple_0, tuple_0, list_0)
    set_0 = set()
    set_1 = set()
    tuple_2 = (tuple_1, set_0, set_1)
    module_0.get_new_command(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    str_0 = "yhBo{P4G5XUm<{5{t<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    int_0 = -299
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    bool_0 = False
    bytes_0 = b"r\x8aH\x7f\x1e\xc9@\x87\xc8\x0f\xde\x1c*s^"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    float_0 = 1387.804712
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bytes_0 = b"\xcc\x84\xa4\xa1\xc6~\x04\x17\x16\xc7%\xab,\xfaA\xe7\xf9 \xba"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4092():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4093():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    bytes_0 = b"\x103\xd4\xebr\xdd\xc8i\xd5Qm1("
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    dict_0 = {object_0: set_0, object_0: set_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    int_0 = -1232
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    int_0 = -1868
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    str_0 = "am*q"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    str_0 = " {m\x0bqbar/ZAOr`hv"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    int_0 = -2194
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0,)
    tuple_1 = (bool_0, tuple_0)
    list_0 = [tuple_1, tuple_0, set_0]
    module_0.match(list_0, list_0)


def test_case_4103():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4104():
    int_0 = -1847
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    str_0 = ".BLY-Z"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    object_0 = module_1.object()
    float_0 = -1728.03493
    bool_0 = False
    tuple_0 = (object_0, float_0, object_0, bool_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    int_0 = -909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    str_0 = "T3[1gv_hh"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    bytes_0 = b"\xb9\xff\xedQ)z\xc0a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    int_0 = -1003
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bytes_0 = b"\x10\x91\xbe\xae\xaaa\x077d \xc6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4115():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4116():
    int_0 = -892
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    bytes_0 = b"\x9cnZ\x8e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    str_0 = "~BH{\x0b?9W~IbZ/dyJ6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    int_0 = -1679
    str_0 = "\x0c/v-fl"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    bytes_0 = b"1\xa4\xc7\xc1\x8e\xbe"
    str_0 = "H6"
    list_0 = [bytes_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    float_0 = 923.07
    set_0 = {float_0, float_0, float_0}
    float_1 = -801.0
    module_0.get_new_command(set_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    int_0 = -75
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    bytes_0 = b"\xfd\xd4O\xd0\xc0\x8f%\xff\xd6\xe4b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bytes_0 = b"\xff\x10\xe0T\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    str_0 = "z"
    module_0.match(str_0, str_0)


def test_case_4126():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4127():
    str_0 = "\x0c\n^9>'$)x2M"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    bytes_0 = b"\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    int_0 = -762
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    int_0 = 9
    module_0.match(int_0, int_0)


def test_case_4131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4132():
    int_0 = 511
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    int_0 = -466
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    float_0 = -1332.42135
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    int_0 = 1312
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    bytes_0 = b"\x13\xcc:t\xc4\xc49\x9c"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    str_0 = "^+\\MuPHYc~eWT<-Z/=@e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    int_0 = -2673
    str_0 = "K'8q_Qfo)R/\r>7>"
    list_0 = [int_0, int_0, str_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    int_0 = 1892
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    int_0 = -4217
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    int_0 = -82
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    int_0 = 3810
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    int_0 = 1660
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4148():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4149():
    str_0 = ")gncW@MQ_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    float_0 = -2204.66238
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    float_0 = 3515.078568
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    complex_0 = -1532.8303 - 1801.2286j
    str_0 = "lVs[6+0CdK:"
    set_0 = {complex_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    str_0 = ";,NPA1kV'T\rfB}F"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0]
    module_0.match(list_0, list_0)


def test_case_4154():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4155():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    str_0 = '.fU;-"wLu,'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    int_0 = 43
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    str_0 = "*eePet"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    float_0 = 1255.578
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    bytes_0 = b"\xd10\xc3O\x8c\x92\xd8\x0e/\xb8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    bytes_0 = b"p\xde\xf6\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    str_0 = "Qiu;_i-NY2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    float_0 = -807.7369
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    bool_0 = True
    int_0 = -2026
    list_0 = [bool_0, int_0, bool_0]
    int_1 = -22
    module_0.get_new_command(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    dict_0 = {}
    bool_0 = True
    list_0 = []
    tuple_0 = (dict_0, bool_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0,)
    tuple_2 = (tuple_1, bool_0)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    bytes_0 = b"\x04="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    float_0 = -2713.308444
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bytes_0 = b"J <\x0e\x9a\xc9\x02QR\xc3\xca\xf4\x05\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    str_0 = "BHAf^-DFiv \rX:IN4IR"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4176():
    float_0 = -193.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    int_0 = 1935
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    int_0 = -1876
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4179():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4180():
    int_0 = 861
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    float_0 = -3197.134798
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bytes_0 = b"\xb8\xa0\\u\x8a\x9fZ\xe9\t\x03\r\xcbF"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    int_0 = 881
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0, list_0]
    list_2 = [list_1]
    module_0.get_new_command(list_1, list_2)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = -158
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    bytes_0 = b"\xa1o\x06T\xc7\x08g7\xebj7\x15\x02\xdf\x0f\x90\x1b\xfdE\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = -1269
    bool_0 = False
    tuple_0 = (int_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    str_0 = "QSGbjl+6]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    bool_0 = True
    bytes_0 = b";\xb1\x13"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    int_0 = -34
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    str_0 = "1DgIA[ ;{Ao7-Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    complex_0 = -628.73185 - 5440.38842j
    module_0.match(complex_0, complex_0)


def test_case_4195():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4196():
    float_0 = 1815.003768
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    bool_0 = False
    float_0 = -3538.09061
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    bool_0 = False
    list_0 = []
    list_1 = [list_0, list_0, bool_0]
    module_0.get_new_command(bool_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    float_0 = -1432.0
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    int_0 = -1424
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    float_0 = -287.607
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    complex_0 = -696.7446 - 1411.98689j
    list_0 = [complex_0, complex_0, complex_0]
    complex_1 = -469.77 - 3124.45j
    tuple_0 = (list_0, complex_1)
    tuple_1 = (complex_0, tuple_0)
    list_1 = [tuple_1, complex_0, complex_0, tuple_0]
    module_0.match(list_1, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    int_0 = -710
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


def test_case_4207():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4208():
    str_0 = "4)`I2mFBkyP"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    str_0 = "$!qb QH&GK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = 1399
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    int_0 = -2749
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    bytes_0 = b"\xa3\x16\x05"
    str_0 = "]"
    bytes_1 = b"\xe6\xce\\\x99\xb0d\x9b"
    list_0 = [bytes_0, bytes_0, str_0, bytes_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    float_0 = 1381.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    bytes_0 = b"e\xdd\xa6\xfbhG'\xa1\xa6 W\r\x15\x88\x84\xa9Kr"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    int_0 = -2712
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    str_0 = "x\x0c0rxt,S!%ps_n"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    int_0 = -1143
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    none_type_0 = None
    str_0 = "je^}j@CwfpDC\\YS~}="
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    bytes_0 = b";\xc9\xb7\xe0\x1a\xb7y\xe7\xd2\xdf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    int_0 = -2537
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    int_0 = 2297
    module_0.get_new_command(int_0, int_0)


def test_case_4223():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4224():
    float_0 = -396.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    int_0 = -766
    list_0 = [int_0, int_0, int_0, int_0]
    set_0 = {int_0, int_0}
    list_1 = [list_0, int_0, set_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    int_0 = -38
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    bytes_0 = b"\xc3\x949;P\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    str_0 = "csznrV`\nz,}ekHb"
    bool_0 = False
    set_0 = {str_0, str_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    int_0 = -418
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    str_0 = "K[]3!rl*o)"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    complex_0 = 2848.169 + 1783.8357j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    float_0 = 4729.039
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    none_type_0 = None
    float_0 = 389.6612
    module_0.match(none_type_0, float_0)


def test_case_4234():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4235():
    str_0 = "x"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    bytes_0 = b"\xc3\xa1O\xe8fw"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    bool_0 = True
    bytes_0 = b'E6\xf1\xea\xb2\x99z \x9b"\xdb\xf0'
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    bytes_0 = b"\x08da\xa39d\xab%\xd1k\xaa\xc1bc\xc0\x9b\x84`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    str_0 = "RPY1o[35!eUT$m1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    str_0 = "TUKyt5e?@j&l}9~`"
    module_0.match(str_0, str_0)


def test_case_4241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4242():
    float_0 = -339.34003
    module_0.match(float_0, float_0)


def test_case_4243():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4244():
    bytes_0 = b"\xe2\x02\x0f4o\xf1y!/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    float_0 = 1155.2693
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    bytes_0 = b"\tY"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    float_0 = 247.0
    tuple_0 = (float_0,)
    bytes_0 = b"\x94Nl[\r"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    str_0 = "\x0b0,;f{sV`s9\x0b+%d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    str_0 = "}3].q\nL6K\x0c\x0bxps"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    str_0 = "+Xq3*MS\x0crH`"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    int_0 = -146
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    str_0 = "Zn"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    int_0 = -1610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    bytes_0 = b"\x98\x18\xe56\xfbz\xe45\xc7Z\x0f)yu}2P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    bytes_0 = b"\xf3\xe5Pv#k=\xff\x8d\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = "?k\tpJYRY{\\pW("
    none_type_0 = None
    str_1 = "C930vB^>5%Zvr#"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    float_0 = -167.439696
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4260():
    int_0 = -3040
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    str_0 = "H5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    tuple_0 = (object_0, set_0)
    str_0 = "%\x0c"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    int_0 = -1830
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    float_0 = 2180.06
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    bytes_0 = b"$\xa3\xee\xa6\xaa\xfd\x0b\x92\xca\xa5\xa7ZIv\x03S\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    float_0 = -779.51
    tuple_0 = (float_0,)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    int_0 = -139
    set_0 = {int_0, int_0}
    bool_0 = True
    tuple_0 = (set_0, int_0, set_0, bool_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    str_0 = "f>5)?x8t"
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    str_0 = "jc"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    float_0 = 1610.219
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    bytes_0 = b"\x13\xb9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    str_0 = 'z[K9\x0bIYJ"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    str_0 = '>\tH<,"4I=]'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    bool_0 = True
    int_0 = 1712
    list_0 = [bool_0, int_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    int_0 = -2397
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    str_0 = "4*M'hes{c?<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4277():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bytes_0 = b"\x12\x0e\xd7\xca\x10{\x918c`\xcd\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    bytes_0 = b"\xb0!\x8dtP\x90E\xbaKX"
    tuple_0 = (bytes_0,)
    str_0 = "za:;lDstECEL"
    dict_0 = {tuple_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    int_0 = 1682
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    bytes_0 = b"'\x02^\x1f\x9a\xf7\x82\x90"
    float_0 = -829.0
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    int_0 = -2090
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    bytes_0 = b"\x8fmH\xae\xa4UpX\x07\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    int_0 = 958
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    int_0 = 885
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    int_0 = 283
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    float_0 = 134.4746
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    str_0 = "W=V^+X B:>;)/6Kv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    bytes_0 = b"\xf0E\xf0$\x04\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    float_0 = -324.29
    float_1 = -312.6904
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    int_0 = 732
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    int_0 = -4462
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    bool_0 = False
    str_0 = "z"
    tuple_0 = (bool_0, str_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    int_0 = 917
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    bytes_0 = b"_\xb5\xbeE@\x881\xebwJ\x0bY\x96\xb6\xfb\x83"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    int_0 = 904
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    float_0 = 2072.549711
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    bytes_0 = b"\x8d\xde\xf3Nu\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    int_0 = -210
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    bytes_0 = b"\xa5\xed\x93\x96;\x81f\xa5\xc8h#\x80\xac\x85\xe6\xa0\xa4\xa0"
    str_0 = "Pn'64zWs'="
    str_1 = "v^ls,}~Bj>\r"
    str_2 = "I7n.[IB\tp~PEcy5DF"
    dict_0 = {str_0: bytes_0, str_1: str_0, str_0: str_0, str_2: str_1}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    str_0 = "O>Q>xg"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    float_0 = 1086.809003
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    float_0 = -650.9672
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    none_type_0 = None
    str_0 = ""
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    bool_0 = False
    complex_0 = -1645.11 + 1290j
    list_0 = [bool_0, complex_0]
    str_0 = "'($3`}>aWM1x$D\rGs"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    bool_0 = True
    bool_1 = True
    list_0 = []
    tuple_0 = (bool_0, bool_1, bool_0, list_0)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    float_0 = 226.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    int_0 = 1385
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    bytes_0 = b"q\xb0\x99\xd6\xf7\xd1\xc0\xc5\xcbG\xdf\xde )"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4312():
    str_0 = "h53`RiJPB(<K@"
    int_0 = -2460
    str_1 = "{XA/e\r}N:_`l}\x0b"
    tuple_0 = ()
    tuple_1 = (int_0, str_1, tuple_0)
    set_0 = {str_0, str_0, str_0, tuple_1}
    list_0 = [str_0, set_0, tuple_1, tuple_1]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    float_0 = 151.2
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    bool_0 = False
    bytes_0 = b"=-\xe7\x1a\x10\x83^\xc5&\xd46\xa5\xaa1\xdf\xe8"
    module_0.match(bool_0, bytes_0)


def test_case_4315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4316():
    complex_0 = -1055.969 + 65.40822j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    int_0 = -1152
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    int_0 = 1094
    list_0 = [int_0, int_0]
    tuple_0 = (list_0,)
    bool_0 = True
    tuple_1 = (int_0, tuple_0, bool_0)
    tuple_2 = (tuple_1, list_0, bool_0)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    list_0 = []
    tuple_0 = ()
    tuple_1 = (list_0, tuple_0, tuple_0)
    bool_0 = True
    tuple_2 = (tuple_1, bool_0)
    module_0.match(tuple_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    int_0 = 615
    float_0 = -2822.93148
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    int_0 = -909
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    str_0 = "Wlf)\r"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    str_0 = "m@{=<a+16C:2DX4%-~"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    bool_0 = False
    int_0 = -1
    list_0 = [bool_0, int_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    int_0 = -1205
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    str_0 = "`q\t\t"
    none_type_0 = None
    str_1 = ""
    str_2 = "3)eYq;*"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    float_0 = 576.996625
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    str_0 = "Dss/m0_Mc-"
    bool_0 = True
    list_0 = [str_0, str_0, str_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    bytes_0 = b"\x91\xfb\xc7o"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    str_0 = "dC}\x0bF\n/woEM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    int_0 = 675
    list_0 = [int_0]
    list_1 = [list_0]
    str_0 = "4xo`n"
    str_1 = ']kywnVO"@s9u5AM6h(BS'
    dict_0 = {str_0: int_0, str_0: int_0, str_1: int_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    complex_0 = 1565.11705 + 2903.98651j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    bytes_0 = b"&3\x19"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    float_0 = 840.0
    module_0.get_new_command(float_0, float_0)


def test_case_4336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4337():
    int_0 = -3513
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    int_0 = 672
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    bytes_0 = b"\xbaf\xbe\xd8D\xc0\x80O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    float_0 = -69.1
    list_0 = [float_0, float_0, float_0]
    object_0 = module_1.object()
    tuple_0 = (list_0, object_0, float_0, float_0)
    bool_0 = True
    bool_1 = True
    tuple_1 = (float_0, tuple_0, bool_0, bool_1)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    float_0 = 490.40007
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    int_0 = -85
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    int_0 = -1445
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    bytes_0 = b"\xe0v\xae\x1f\xec\t\xbe\xd1\xba3\x88\xf5 +\xd7\xa2`\xd79\xda"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    bytes_0 = b"\xd9\xb9^+\xf0U\xf4\xe2\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    bool_0 = True
    bytes_0 = b"\x90\xa8\xd8\xf5\xe9"
    dict_0 = {bool_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    int_0 = -2434
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    bytes_0 = b"8\xe3U\xe4\x03\xc2\x19\x93j\xd8\xe0\xc85\x1cS\xc9F"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    bytes_0 = b"\x89\xc3\x9c\x84\xb9\x15\xea\x1e5\x82\xd7[\xa1\xf6c\xf7\xe2R-"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bytes_0 = b'\x8d\x15T\x81\\\xa0"\x04\xdb\x82Oa\x06\x1fV\x93\x91\xce\xcap'
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    bytes_0 = b"\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    float_0 = 366.49572
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    str_0 = "Dp\n'=#\t=};}2KWd4p5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    bytes_0 = b"\xf9x[\xd3M"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    int_0 = 1507
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    bytes_0 = b"\x84\xc0\x05M"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    complex_0 = -2505.87644 + 1334.32j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    str_0 = "dPc+Jik`k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    int_0 = 858
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    str_0 = "\\a"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    complex_0 = 2236.525301 - 29.44j
    list_0 = []
    tuple_0 = (complex_0, list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    str_0 = "qp$wx{)I@Mq!~@Mwe\x0c1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    tuple_0 = (list_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    int_0 = -3028
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    int_0 = -356
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    bytes_0 = b"'Y:F$\xb0]\xc6\xe7R^!\x82\xae\x1e\x84\xb6\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    float_0 = -399.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    set_0 = set()
    dict_0 = {}
    tuple_0 = (set_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    bytes_0 = b"\xf7l*z\x00i\r"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    int_0 = -2482
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    str_0 = "NX?3`b\x0b%jWzM2y\nG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    str_0 = 'o4#U"kdAQ/'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    str_0 = 'ksj)2=r`"BV2*t=c'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    int_0 = 1578
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    bytes_0 = b"v\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    bytes_0 = b"\xad\xdf\x8bH\xfb\x85^\x1d\x85\x82\xaaU\x97\xbbJ%"
    float_0 = 280.9
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    str_0 = "Q}':G[[4\"r1[A?!\x0bUf"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    int_0 = -1651
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    int_0 = -1816
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    str_0 = "1ym9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    str_0 = "xW;P*Fz8y`+0J[=(\\;Z"
    tuple_0 = (str_0,)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    int_0 = -3410
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    str_0 = "BA"
    module_0.match(str_0, str_0)


def test_case_4389():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4390():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    str_0 = "1X}ZCH>\\M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    int_0 = 358
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    float_0 = -2566.46
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    object_0 = module_1.object()
    int_0 = -4073
    list_0 = [int_0, int_0, int_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    str_0 = "iyz\t:BF"
    bytes_0 = b"\xa7F}J\xe6%'o\\']ce\xd9"
    dict_0 = {str_0: str_0, str_0: str_0, bytes_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    bytes_0 = b"\xa2\xf8V2\xef\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    none_type_0 = None
    bool_0 = True
    bool_1 = True
    list_0 = [none_type_0, none_type_0, bool_0, bool_1]
    str_0 = "52xZSS`J^+"
    tuple_0 = (bool_0, list_0, str_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    float_0 = 1257.9311
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    int_0 = 3518
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    bytes_0 = b")r\xc7\x95\x8fn\xe3\x87\xaf\xb9\x86a\xce\x91\xf2\x1aj"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    str_0 = '-~w,mSh"<'
    str_1 = "1O^bmF16\r]WI0As*^"
    list_0 = [str_1, str_0, str_0]
    tuple_0 = (str_0, str_1, str_1, list_0)
    list_1 = [tuple_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    bool_0 = True
    int_0 = 558
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    bytes_0 = b"w<\xe4\xb1\x0bp\x86"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    bytes_0 = b"\xa3\x8e\xcb$\x19i\xe2\xcc\xcf\x98\xbd\x1b\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    float_0 = -2478.2175
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    tuple_0 = ()
    tuple_1 = ()
    bool_0 = False
    tuple_2 = (tuple_0, tuple_1, bool_0)
    set_0 = {tuple_2, tuple_1, tuple_1, tuple_2}
    module_0.get_new_command(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    complex_0 = 875.5 + 4968j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    complex_0 = 1193 + 660.43199j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    str_0 = "p1w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_4418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4419():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    bool_0 = False
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    none_type_0 = None
    bytes_0 = b"(\x7fS\xb8&Olh\xa3\xbef"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4425():
    str_0 = "c{6V}x`K2m'hO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    bytes_0 = b"\x99\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    int_0 = -4202
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    int_0 = -1482
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bool_0 = True
    list_0 = [bool_0]
    set_0 = set()
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    float_0 = 1499.0
    module_0.get_new_command(float_0, float_0)


def test_case_4431():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4432():
    str_0 = "J.<y)c~jhdl]SvJ=|Dkv"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    complex_0 = -1611.9 + 696.9j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    float_0 = -1402.194
    str_0 = "v98"
    tuple_0 = (float_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    int_0 = 1439
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    float_0 = -511.2
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    bool_0 = False
    int_0 = -2352
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    complex_0 = 2998.36882 - 2612.51j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    str_0 = "P;,fcLW\r"
    int_0 = 2286
    list_0 = [str_0, str_0, int_0]
    bool_0 = False
    tuple_0 = (str_0, int_0, list_0, bool_0)
    tuple_1 = (tuple_0,)
    list_1 = [tuple_1, tuple_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    bytes_0 = b"\xc6\xda]\xabq\xd11\x85 \x05\xf0W\xe6\xbd,AR"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    str_0 = "s0/QFzQf"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    str_0 = "!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    object_0 = module_1.object()
    list_0 = []
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = []
    int_0 = 3151
    complex_0 = -4130 + 558.5009j
    tuple_0 = (dict_0, list_0, int_0, complex_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    int_0 = 32
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    int_0 = 892
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    str_0 = "(l\\@e_]qK?@[i_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    bool_0 = True
    str_0 = 'zvZ(>"/}J#kBXV44Y}\\0'
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    dict_0 = {}
    tuple_0 = (dict_0,)
    tuple_1 = (dict_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    int_0 = -2979
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    str_0 = "QRB/*e("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    bytes_0 = b"\x9a\xc8uM\x17\x00\n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    float_0 = -950.01
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    complex_0 = -589.5 - 889.409415j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    bytes_0 = b"\xe9\xf50)\x81Y\xc1\x10#\x8d\xd8\xd5\x88\xee\xbcP\xf7Y!h"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    str_0 = "J7>bBg[E=\r\\3I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    str_0 = '"b70\t{5!Hn;r'
    str_1 = "wKzi"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    int_0 = 1205
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    int_0 = 1644
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, int_0)


def test_case_4461():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4462():
    str_0 = "'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    int_0 = -3277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    float_0 = 134.577
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    bytes_0 = b"\xf4\x1a\xdaR\xe2\xb0"
    int_0 = 913
    list_0 = [bytes_0, int_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    int_0 = 3137
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    bytes_0 = b"\x0c\x9c\x9a\x8f\xc8<\x87\xe4u\xa7\xf5\x87\xae=\x7fz\xe3O\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    int_0 = 332
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    int_0 = -222
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    bytes_0 = b"\x92k\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    bool_0 = True
    object_0 = module_1.object()
    set_0 = {bool_0, object_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    int_0 = 5520
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    int_0 = 671
    bytes_0 = b"\xd3\x01=\xf9^\xc1:!\x80m5E\x86\x88\xd18\x05"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    complex_0 = -724.292915 - 1927j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    str_0 = "o@"
    module_0.get_new_command(str_0, str_0)


def test_case_4483():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4484():
    bool_0 = False
    set_0 = {bool_0}
    str_0 = "h(;V%K.'\tA\x0cbS="
    tuple_0 = (set_0, str_0, bool_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    bytes_0 = b"\xf0\xc3|pq?\x8d\x90s+F\xab\x97\x0e3"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bytes_0 = b"e\xc0\xf6N\x99m#\x17\x8c%Q(l\x0bf&\xbb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    bytes_0 = b"\xf3\xd5\x15Z~\x02\x8e\xd3"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    str_0 = "{m`dID"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    bytes_0 = b"\\Q\x9d\x08\x97\xf5S\xee"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    bytes_0 = b"8}1\x05\xcf\xf8\xc6\x1a]\xd7"
    module_0.match(bytes_0, bytes_0)


def test_case_4491():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4492():
    str_0 = "B2c~C<tNk("
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    int_0 = -1718
    str_0 = "t"
    set_0 = {int_0, int_0, int_0, str_0}
    tuple_0 = (int_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    int_0 = -2992
    module_0.get_new_command(int_0, int_0)


def test_case_4495():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4496():
    float_0 = 3994.79
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    int_0 = 130
    str_0 = "@5izlwazcZSj9\t"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    bytes_0 = b"\x9b\xd6\xf0\x92A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    str_0 = " lY0yX.'wI24a~"
    complex_0 = 1911 - 2066.3817j
    bool_0 = False
    tuple_0 = (str_0, complex_0, complex_0, bool_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    int_0 = 2071
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    int_0 = -3490
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b'\x8c\x06\xcdw"\xc3MV\xc4\xbe\x93\xd3'
    tuple_0 = (int_0, list_0, list_0, bytes_0)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    str_0 = "c\r"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    str_0 = "]!c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    str_0 = ",0pN\noK#t\\"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    bytes_0 = b"a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    int_0 = 450
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    int_0 = -4220
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    str_0 = "vnv?GFrJl"
    str_1 = "sm$x-"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bytes_0 = b"2\xf7\x0e\xd83\x89\xd0fn\x0f\xe7HA\xa0l\xb2y\xb8\xa1"
    object_0 = module_1.object()
    set_0 = {bytes_0, bytes_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    int_0 = -1557
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bool_0 = True
    complex_0 = 6421.52341 - 4072j
    module_1.object(*bool_0, **complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    bytes_0 = b"\xe5\x854\xfeR\xb6"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    bytes_0 = b"O\xb9\xb60lE"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    bytes_0 = b"\xf7O\xf3.|\x19\x15o\x839\xcf\x8a\xa6\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    str_0 = "gx{z"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    bytes_0 = b"\xab \xd7\xc7\xdbRZ"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    float_0 = -598.3031
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    int_0 = -1474
    set_0 = {int_0}
    list_0 = [set_0, set_0, set_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    str_0 = "gQ9ZFU"
    tuple_0 = (str_0,)
    float_0 = -1551.014
    list_0 = [tuple_0, float_0]
    tuple_1 = (list_0,)
    module_0.match(tuple_1, float_0)


def test_case_4521():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4522():
    bytes_0 = b"\xce\xb9\xb0*"
    float_0 = -366.0
    str_0 = "4LY:PIxM|JN"
    dict_0 = {float_0: str_0}
    module_0.match(bytes_0, dict_0)


def test_case_4523():
    pass


def test_case_4524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4525():
    bytes_0 = b"|\xd9\xed\x1dr2D\xa5\xc9\xa7\xc3\xa5\xcbR@^y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    str_0 = ".UR&}\nTE(j,mCxE\\~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    complex_0 = -1674.901 + 1820.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    float_0 = -35.483873
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    str_0 = ">K"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    int_0 = 221
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    bytes_0 = b"\xd5p\xa6\xa2\x1fn\xb9R\xac\xb9~S'\x19\xfeec\xdb]"
    tuple_0 = (bytes_0,)
    module_0.match(bytes_0, tuple_0)


def test_case_4533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4534():
    int_0 = -3627
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    int_0 = -1141
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    int_0 = 401
    int_1 = -242
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    int_0 = -1809
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    int_0 = -2985
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    str_0 = "cQ :`"
    module_0.match(str_0, str_0)


def test_case_4542():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4543():
    float_0 = 138.378626
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    complex_0 = 725.21 - 4686.8j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    bytes_0 = b"\x1a\xe1]\xb5(\xaf\xd3)\xe5\r\xa0a/\x15\xb4\x9d\x99\xadu"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    int_0 = 2399
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    object_0 = module_1.object()
    str_0 = "9"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    tuple_0 = (set_0, list_0)
    list_1 = [tuple_0, list_0]
    list_2 = [list_1, set_0]
    module_0.get_new_command(list_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    float_0 = 2023.9482
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    int_0 = 201
    module_0.match(int_0, int_0)


def test_case_4552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4553():
    complex_0 = 2558.4941 + 1007.887j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    bytes_0 = b"\x0e\n\x1en\x12\t\xd4`\x05N\xad]\xedV"
    float_0 = 1190.65619
    set_0 = {bytes_0, float_0, float_0, bytes_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    int_0 = 551
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    float_0 = 1271.5203
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_4557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4558():
    str_0 = 'V$r-\x0ckRY1E#w.G1n\\H"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    int_0 = -41
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    int_0 = 113
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    bytes_0 = b"Ib\x0f\xb1s\xdc\x0ec\\\xd8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    int_0 = -301
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    int_0 = -178
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4565():
    int_0 = -4141
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    int_0 = 2276
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    int_0 = 2018
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    bytes_0 = b"J\xb3\xafJ\x8dy\x02\xcch9\xe6\xd4#U\x15z+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    str_0 = "i6b\r6C'#kU%7@{4B$=KK"
    set_0 = {str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    int_0 = -1160
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    float_0 = 1175.272
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    str_0 = "C4%mskP''_5myPJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    int_0 = 3159
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    str_0 = "7vYC7d@3Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    float_0 = 1261.108
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    bytes_0 = b"\xa2\\Nh(\x9c:<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    bytes_0 = b"Dr+\xfc\x89\xb4\xceq~"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    str_0 = "8a5>}B{ug=$ISM!15c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    int_0 = -1763
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    none_type_0 = None
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    int_0 = 924
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, int_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    float_0 = -3796.94017
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    float_0 = 2329.122
    list_0 = [float_0]
    module_0.match(list_0, float_0)


def test_case_4585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4586():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


def test_case_4588():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4589():
    str_0 = "sN@"
    str_1 = "&)y*:&6?$jfvH*qh9@\t]"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    str_0 = ':tl}4f"9!'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    float_0 = -1521.224624
    set_0 = {float_0, float_0}
    list_0 = [set_0]
    module_1.object(*list_0, **set_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    str_0 = ""
    object_0 = module_1.object(*str_0)
    list_0 = [str_0, str_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = 2607
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    float_0 = 1030.18
    module_0.get_new_command(float_0, float_0)


def test_case_4598():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4599():
    int_0 = 281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bytes_0 = b"\n\xa0,\\G\x08E\x112"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    tuple_0 = (bytes_0, dict_0, bytes_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    str_0 = "sK*:jb\r6a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    str_0 = "3\n4:5og_Eu\\7}S'=a|"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    float_0 = -457.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    int_0 = -2540
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    bytes_0 = b">\xf2q\x8a\x1d\xbba\x93\xe0\x12\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    int_0 = 1467
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    str_0 = "\nng{oAS?0Q/a"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    str_0 = "KSAs0Rw.])Mn<v8T[3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    int_0 = 1182
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    bytes_0 = b"\xbf\x18\x14\xff\xe7g\\\xac,\x1cV3\xf0\x83^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bytes_0 = b"\n\x7fZX\xa6-\xc2\x16\xe9j\xb3"
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    tuple_0 = ()
    int_0 = 1422
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    float_0 = 1786.0
    str_0 = "\x0b[d:s4'n2/"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    float_0 = -3457.993
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    str_0 = 'o\x0c`l1,tl"J]'
    int_0 = 1876
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    complex_0 = 889.8002 + 3073.02j
    str_0 = "jQ\x0b^9XH0}9@fI"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    str_0 = "W8c\x0bDv"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    float_0 = -825.318
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    list_0 = [dict_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    object_0 = module_1.object()
    bytes_0 = b"H"
    tuple_0 = (object_0, object_0, bytes_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    str_0 = "y"
    complex_0 = 4039.0021 + 3389.7j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    float_0 = -756.92767
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    int_0 = 3648
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    bool_0 = False
    float_0 = 1809.2574
    tuple_0 = (bool_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    int_0 = -952
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    complex_0 = 3375.093 - 914.01672j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    int_0 = -2024
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    bytes_0 = b"O\xee\x8e'\xc1?\xf1\xfcw"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    str_0 = "fbO.0a\r&:a>g\r|Pw>$-b"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    bytes_0 = b"\xdf\x97\x0f6Y\xafo F\x8f\x94\xdd\xf0&"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    int_0 = 921
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    float_0 = -219.449084
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    int_0 = 1178
    bool_0 = True
    bool_1 = False
    tuple_0 = (int_0, bool_0, bool_1)
    float_0 = 3009.5164
    module_0.get_new_command(tuple_0, float_0)


def test_case_4636():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4637():
    bytes_0 = b"1\xb0*\x11\x96\xe3dk\xa0\x93X\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    bool_0 = True
    str_0 = "qv@\no~`hfy\x0b"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    int_0 = -1727
    set_0 = set()
    tuple_0 = (int_0, set_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    float_0 = 746.387767
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_4641():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4642():
    str_0 = "h\t\\'+=INd~h\no\x0bLf"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    int_0 = -2520
    module_0.match(int_0, int_0)


def test_case_4644():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4645():
    bytes_0 = b"avK\xe0\xfc_[m\xbf\xe5K\x18\x9c\xb3\xb8"
    bytes_1 = b"I\xe3)E\x88\xb9\xae"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    bytes_0 = b",\x81\x8d@,\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    bytes_0 = b"\x0e\xaa\xbe\x13&\xa14\xdf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bytes_0 = b"|k\x86 "
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    complex_0 = 427.025 - 3215.229j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    int_0 = -892
    bytes_0 = b"+mj\xc3u\xd3\xaf"
    list_0 = [bytes_0, int_0, int_0]
    list_1 = [bytes_0, list_0, int_0]
    tuple_0 = (int_0, bytes_0, list_0, list_1)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    bool_0 = True
    str_0 = 'RV#B`Pgk)dRS@k"="@'
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = True
    tuple_0 = (str_0, list_0, bool_1, str_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    bool_0 = False
    bool_1 = False
    tuple_0 = (set_0, bool_0, bool_1, bool_0)
    bytes_0 = b"/\x16"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    str_0 = 'cFaq\x0c"T2aP'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bytes_0 = b"3y\xb2\xba\\*\xef\\V\xb6<P\xd7\x85\xff\xee\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    bytes_0 = b"\xc4(s\x86\xf2\x87\x7f\xd1\t"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    str_0 = "8<H/Sg\nb"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    float_0 = 755.5237
    bytes_0 = b"\x1f\x85\xb7\x89:n\xed\xa8\x14\xd2"
    tuple_0 = (float_0, bytes_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    float_0 = -2551.26579
    module_0.get_new_command(float_0, float_0)


def test_case_4664():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4665():
    bytes_0 = b"g\x8a\xf7\xe97"
    bytes_1 = b"o\\N2"
    dict_0 = {bytes_0: bytes_1, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    str_0 = "M#H5\r8:/\\G;-\tJdq=6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    str_0 = "Y%9i\x0brE$WtE7'#c \"G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    float_0 = 3828.2203
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    bool_0 = True
    int_0 = 1333
    tuple_0 = (bool_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    str_0 = "U [7a$"
    float_0 = 862.540565
    dict_0 = {str_0: str_0, float_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    float_0 = -3746.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bytes_0 = b"\xeb\x9c\xe0q\xc3Yvl\xdb\x10\xf8)j\x82\x91\x8d-\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    bool_0 = False
    str_0 = "3"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    str_0 = "\nk)bLU\x0cd5j7&92hg2*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    float_0 = -885.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    bytes_0 = b"\x81Y\xf8\x01~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    int_0 = 1216
    float_0 = 2363.8828
    module_0.match(int_0, float_0)


def test_case_4681():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4682():
    int_0 = 4736
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    str_0 = "\\v"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    str_0 = "J1hg k'N$#(4q~j;;S|["
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    str_0 = "2aamSD1F"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    float_0 = -2628.2854
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "@ mI2~ik7o])4&Q-b\\"
    set_0 = {str_0, str_0, str_0, str_0}
    bytes_0 = b"q\x8a\x8dI]3t\x12*\xb6<\xf6L\xb7\x0c\x02"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    int_0 = -1400
    list_0 = [int_0, int_0]
    bool_0 = False
    bool_1 = False
    tuple_0 = (list_0, bool_0, int_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    tuple_0 = ()
    int_0 = -2165
    bool_0 = False
    tuple_1 = (tuple_0, int_0, bool_0)
    set_0 = {tuple_1}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    str_0 = "TAv:`I"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    int_0 = -1209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bytes_0 = b"\x17\xfb~\xd0\xb8\x97\xf7B\xf3\x01\x11\xfa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    bytes_0 = b"\xf1\xe6^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    bytes_0 = b"\x14y\xc5@\x8c8I\x92\xc7\x14]G-\xfcZ\x17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    float_0 = 899.984
    module_0.match(float_0, float_0)


def test_case_4698():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4699():
    float_0 = 4214.425012
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    int_0 = -1255
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (int_0, int_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    none_type_0 = None
    str_0 = "\tD8pj4-<5l$\n7\x0bo!nQ"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    module_1.object(**list_1)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    int_0 = -300
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    str_0 = "(6|`\t"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    bytes_0 = b"\xda\xf0\xe7~+\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    float_0 = -3865.58
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    int_0 = 658
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    bytes_0 = b"O\xc5$6+9"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    str_0 = "3*-%[)?b\x0cN>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    str_0 = "@llA@fs:\\/)"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    float_0 = -769.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    int_0 = -576
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    str_0 = "cVOO/H+#/Za??VL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    int_0 = 436
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    int_0 = 2770
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    int_0 = 4417
    str_0 = "o"
    tuple_0 = (int_0, str_0, int_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bytes_0 = b"X\xe4"
    str_0 = "WzMRD8R\nP\rY;"
    str_1 = "^"
    int_0 = 1061
    tuple_0 = (bytes_0, str_0, str_1, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    str_0 = "#6h>3*DWTU7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    str_0 = ",\x0c3#TEW\tQs].'\nx5.|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    str_0 = "*;%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    none_type_0 = None
    bytes_0 = b"_\xa1F\xd0\xd5M\x9ehn\xe7\xed\xee\x91\xb8\xfb}"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    bytes_0 = b"p\x8d_P\nj&I\xcd\x12\xbb>G\xe3\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, list_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    int_0 = 2058
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    float_0 = 6223.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    int_0 = 2635
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    int_0 = -1131
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    float_0 = 1067.7
    bytes_0 = b"\x9e\x06"
    dict_0 = {float_0: float_0, bytes_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    float_0 = 1747.19
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_4737():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bytes_0 = b"F;\xcf\x11"
    str_0 = "IL4wr#"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    str_0 = ",>LiZ]2JcI"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    bool_0 = True
    float_0 = 4060.0
    list_0 = [float_0, float_0, bool_0]
    set_0 = set()
    bytes_0 = b"\x1a\xaf\xc3\xf7\xd3-r\xe6\xaf\xd2\xdd`\x99\x8f\x02s"
    int_0 = 316
    tuple_0 = (set_0, bytes_0, int_0)
    tuple_1 = (set_0, tuple_0)
    object_0 = module_1.object()
    tuple_2 = (bool_0, list_0, tuple_1, object_0)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    int_0 = -3074
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    none_type_0 = None
    set_0 = {none_type_0}
    int_0 = 2528
    module_0.get_new_command(set_0, int_0)


def test_case_4743():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    int_0 = 5888
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    bytes_0 = b"\xb0\x9e\xa7S\x19\x10J"
    set_0 = {bytes_0}
    float_0 = -4176.5617
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    bytes_0 = b"\x03\xd10sw\x9d\x9c\xd4g\xde\xe6\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    bytes_0 = b"{"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    str_0 = "WYLYe' &%'6+YV"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    str_0 = "I"
    float_0 = -263.177451
    str_1 = "Bu8"
    int_0 = 2696
    dict_0 = {str_0: float_0, str_1: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    bytes_0 = b"\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    bytes_0 = b"\x83\xba<q\x05\n"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4753():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4754():
    str_0 = "rnu \\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    int_0 = 1832
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    list_0 = [tuple_0, int_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    str_0 = "xQ4cOtX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    int_0 = -1248
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    int_0 = 140
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    bytes_0 = b"`9\x90\xba\xa0\x07\x15\x82\xf9:8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    bytes_0 = b"\xf7&\xe6\xcd\xf4[#\xd0\xed\x18\x7f4t\xc3\xc5\x1e\xffM\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    float_0 = -3289.592
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    str_0 = "7%mH hVFBX0\tX8uJn#N"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    str_0 = '\t\\Cfz"-jiwb@'
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    tuple_0 = ()
    list_0 = []
    tuple_1 = (tuple_0, list_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    str_0 = "?V"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    bytes_0 = b"9\x83\xfbM\xc7B\xf6*x(:\xebta\xa3\x95\x94"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, bool_0, bool_0, list_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    str_0 = "G\x0cYY8m8qAM$;!+wZRphe"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    bytes_0 = b"\xcf\xb2"
    str_0 = '.1op]^O,)SSW~My"p#X'
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    bytes_0 = b"\x97\x9cE\x10\xe6\x02\xd1\xca\xdbQ\x87\xfd\x0c\xf86"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


def test_case_4774():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4775():
    str_0 = "\\oYGw{yt"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    str_0 = "%:7U"
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, object_0: str_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    int_0 = 593
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    bytes_0 = b"a\x11?"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    complex_0 = 1318 + 2068.91j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    str_0 = ",lGu"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    str_0 = "_*$XTAsF/Z]h$6yS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    int_0 = 1456
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bool_0 = True
    int_0 = 940
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    float_0 = 1750.736617
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    bytes_0 = b'\xd8\xb9\xd9".\xbd\xd2(\x80\xe0O^\x9b=\xc8\xa2'
    bool_0 = True
    int_0 = 2694
    tuple_0 = (bytes_0, bool_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    complex_0 = -683 - 3269.718988j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    str_0 = "3M>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    bytes_0 = b"@\xc6L"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    bytes_0 = b"\xdf\xdeH$\x9c\x07"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    int_0 = -532
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    int_0 = -322
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    str_0 = "9<I7G[UJ<% |"
    str_1 = "\t#c}{`C7>x"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    bytes_0 = b"6p\x9dR\xc4pFs\xf8\xa6\x8c\xbe}4\x9eN\x93"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    str_0 = "]SCODT5Xe]+-SQ#$X(7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    int_0 = -72
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    complex_0 = 1079.793 + 3500.5j
    bytes_0 = b"V\x9ej\x7fi\x02\x86&\xe2"
    tuple_0 = ()
    dict_0 = {
        bytes_0: complex_0,
        bytes_0: complex_0,
        tuple_0: bytes_0,
        complex_0: tuple_0,
    }
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    int_0 = 75
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    str_0 = "\x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    float_0 = -2223.0
    dict_0 = {float_0: float_0}
    bytes_0 = b"\xc6Y\x8eD"
    float_1 = 3093.8635
    list_0 = [float_0, float_0, bytes_0, float_1]
    tuple_0 = (dict_0, bytes_0, list_0)
    tuple_1 = (float_0, tuple_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    bytes_0 = b">UL\x85\xfb\x1d\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    str_0 = "qzPPSRdt.]\n,NNZ,"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    float_0 = 362.52
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    str_0 = "G) x=-*pJbi~hu,;-H"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    str_0 = "K)p\\wW2f00F&\tONsR}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    object_0 = module_1.object()
    complex_0 = -312.55 + 2321.57j
    bool_0 = True
    tuple_0 = (object_0, complex_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    bool_0 = False
    complex_0 = -15.9 + 145.977j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bytes_0 = b"\x80\x1a\xf0\x81\t\x08\x95\x11-\xeb\xb0E'\xe4]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    bytes_0 = b"\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    float_0 = -1959.634
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    float_0 = -3536.59
    set_0 = {float_0}
    tuple_0 = (float_0, float_0, set_0, set_0)
    module_0.match(tuple_0, set_0)


def test_case_4814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4815():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    bool_0 = True
    float_0 = 2326.625
    str_0 = "Ux"
    tuple_0 = (bool_0, float_0, str_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    bool_0 = False
    str_0 = ":K,02+x"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    str_0 = "h6oSY.^m"
    tuple_0 = (str_0, str_0)
    dict_0 = {tuple_0: str_0, str_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    str_0 = "n!08"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    str_0 = "oe8lH/{W)N9\x0c5:<~"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    str_0 = "!:a\n%Z1P:w#_X.<u"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    bytes_0 = b"\xa0\x11\x1f\xb4\x99\xbf.\xc0!f\xe1W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    str_0 = "agMoQ&b0$\t]*_"
    module_0.get_new_command(str_0, str_0)


def test_case_4825():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4826():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_4827():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4828():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    bytes_0 = b"\xe8\x06X\xe7\x90\xc9T\xea64e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    str_0 = ".G73fr/J%ZM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    bytes_0 = b"\xf7\x15\xe8U\xf06V\xec\x1c\xfa\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (list_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    bool_0 = True
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    str_0 = "d+SAO?YWd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    int_0 = -2044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    str_0 = "5fswJN~CmbNf&7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    float_0 = 1635.553009
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    float_0 = 1984.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    float_0 = 1095.9922
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    complex_0 = 2543.518827 - 1414.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    str_0 = "b!Wl"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    float_0 = -1320.51437
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    str_0 = "~/]\x0bj;kInBsuQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    bytes_0 = b"\xb0>\xcc}=T\xcb9.\xd5"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    float_0 = 1431.5993
    tuple_0 = ()
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, tuple_0: tuple_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    bytes_0 = b"7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    bytes_0 = b"\n\xf7\x01i\xaa\xa9<(R\xeb\xd6-\x87\x00G7\t"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    int_0 = 1959
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    str_0 = "j]\r11_BP%H4GofN37F8"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0, str_0: bool_0, bool_0: str_0}
    module_0.match(dict_0, str_0)


def test_case_4855():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4856():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    str_0 = '"I{*'
    module_0.match(str_0, str_0)


def test_case_4858():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bytes_0 = b"\xd1\xd9\x87\x07\xe1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    int_0 = 809
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


def test_case_4861():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4862():
    bytes_0 = b"1r4\x8c\xafo\x01"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    int_0 = 717
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    bytes_0 = b"~\x11\xf2miFhc\xed\xcb\xf8\xafU|\xf26f_a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bytes_0 = b"\x97\xe5\xc4\x0c"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    bytes_0 = b"~ OCC\xf4\x8c[\xfe&\x82\xda\xfa\xe3\xf2"
    module_0.match(bytes_0, bytes_0)


def test_case_4868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4869():
    str_0 = "x.qLKk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    float_0 = 120.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    int_0 = -702
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    float_0 = 323.94
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    str_0 = "3x2Dr?"
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (str_0, bool_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    bytes_0 = b"\xf2\x12D,\x19h"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    none_type_0 = None
    str_0 = "j=@ks?m\x0bku{$"
    module_0.match(none_type_0, str_0)


def test_case_4876():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4877():
    bytes_0 = b"{n"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    str_0 = "FOdY$>s`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    complex_0 = -1746.28 - 2127.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    float_0 = -1361.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    str_0 = 'L"`k\\M=:gf\x0bS'
    dict_0 = {}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    str_0 = "I&t\tl-;_sF7O;l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    int_0 = -3691
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    float_0 = -469.03
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    bytes_0 = b"\xca\x11\xd9C\xd5\xa3!T\xa7\xfe\xd3\x87;\x04d\xff\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    bytes_0 = b"\x0fJ(\x85\xd4\x05*@\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    float_0 = 1112.0567
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    bytes_0 = b"3\xd7\xe0F\"\xaf\xff1'\x17\xbb\xf9\xd0^\xe8\xa8\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    bytes_0 = b"\xd6\xe9\x12d'\xceSzy\"\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    int_0 = 1863
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    str_0 = "F"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    int_0 = 138
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    list_1 = [set_0, set_0, list_0]
    bool_0 = True
    list_2 = [list_1, list_0, set_0, bool_0]
    none_type_0 = None
    module_1.object(*list_2, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    int_0 = -3807
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    bytes_0 = b"\xb2\x19\xdb\xe2"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    int_0 = -5075
    float_0 = 3109.92
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_4901():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4902():
    complex_0 = -4144.5834 + 1063.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    str_0 = "9X8Uan|= ,hu[IZm"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    bool_0 = True
    bytes_0 = b""
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    float_0 = 1190.776
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    int_0 = -657
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    bool_0 = True
    str_0 = "W{I[9iZ2}%\t :7\x0c"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    str_0 = "Qjc,4EG=^r%\t\x0b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    float_0 = 1399.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    complex_0 = -932.6045 - 2149.4j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    str_0 = "Mzb@m.O%ZLC VV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    str_0 = "a6!4X"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    int_0 = -1945
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    bool_0 = True
    bytes_0 = b"y\xe1"
    tuple_0 = ()
    tuple_1 = (bool_0, bytes_0, tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    int_0 = -258
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    bytes_0 = b"\x1c\x9ec\xd1T\xf6;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    bytes_0 = b"\xc2\xdfz\x85\xd3\xc6\xcek\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    str_0 = "4PI8amn%KB"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    complex_0 = -78.603106 - 1288.25743j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    float_0 = 1823.8467
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    float_0 = -3068.19
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    bytes_0 = b"\x06X\xd8d\xed\x00&\x0c\n\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    str_0 = "4FL>KfK.Bh1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    int_0 = -543
    module_0.get_new_command(int_0, int_0)


def test_case_4928():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4929():
    bytes_0 = b"m\xd8\xfe\x9c\xc8\x0f\xf0\xa7:\xc5\xad!\xb4pq\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4930():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4931():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    int_0 = -805
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bytes_0 = b"6\xbdXg\x98\xdb\xd9\xe3\x7f\xcf\xd9\x9c\x014"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


def test_case_4935():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4936():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    float_0 = 820.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    str_0 = "uf\n.O\x0b_tEA},I,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    complex_0 = 1118.681568 - 115.3569j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    str_0 = "<GrqztP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    int_0 = 1600
    module_0.get_new_command(int_0, int_0)


def test_case_4942():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4943():
    int_0 = 2251
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    int_0 = -2341
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    int_0 = 27
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    int_0 = 3810
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    str_0 = "n#kYmIev?VLK#BFS_+\r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    int_0 = 729
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bool_0 = False
    bytes_0 = b"\x87\xb2\x82\xe4r\x8c\x05"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    complex_0 = -1691.058319 + 569.14482j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    bool_0 = True
    int_0 = -182
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = "JQX13Yg~tq )J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    bytes_0 = b' \xda\xf4{\x8b\x18?"\xd8\x0e\xf8\x01\x95\x9cc\x94'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    bytes_0 = b'n\xde\xe6\xe4\x8b"j\x13\xf0p\xef\xc0Q'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4957():
    pass


def test_case_4958():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4959():
    str_0 = "\t^>U{pzjbSt\x0b=\x0b1p9q,%"
    list_0 = [str_0, str_0, str_0]
    int_0 = -2590
    tuple_0 = (list_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_4960():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4961():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    int_0 = -171
    module_0.get_new_command(int_0, int_0)


def test_case_4964():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4965():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_4966():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4967():
    int_0 = 2690
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    float_0 = -523.083138
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    int_0 = -3132
    str_0 = "XP^*T*%L^"
    list_0 = [str_0, str_0, str_0]
    str_1 = "Z0\r@"
    tuple_0 = (int_0, str_0, list_0, str_1)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    complex_0 = -2694.691127 + 1794j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    complex_0 = -1928.841496 - 142.561j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    int_0 = 1636
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    int_0 = 884
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    bytes_0 = b"\xc6\x15\xeb\xd0\xec\xb6\xa1\xd9\x7f#\\\x0c"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4975():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4976():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    int_0 = -2556
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4979():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4980():
    int_0 = -5818
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    bytes_0 = b"\x15\x19\xbd"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    complex_0 = -1510.7 + 118.3j
    module_0.match(complex_0, complex_0)


def test_case_4983():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4984():
    none_type_0 = None
    bytes_0 = b"\x83"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    float_0 = -963.95386
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    int_0 = -3564
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    object_0 = module_1.object()
    str_0 = 'CE_CGxRn.f.K!Hw\r"s!z'
    tuple_0 = (object_0, str_0)
    tuple_1 = (tuple_0,)
    module_1.object(*tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    bytes_0 = b"\x8c\xc5f\xfa\xb0\xd6\x99\x16\x91$\xb5\x9e\x02v>s"
    list_0 = [bytes_0]
    module_1.object(*list_0)


def test_case_4989():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4990():
    bytes_0 = b"\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    complex_0 = -3377.573262 - 2878.98j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    bool_0 = True
    str_0 = "X#B~:4GCMmv"
    float_0 = 1761.0
    tuple_0 = (bool_0, str_0, float_0)
    module_1.object(*tuple_0)


def test_case_4993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4994():
    float_0 = -602.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    float_0 = -5972.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    float_0 = -1148.948
    module_0.get_new_command(float_0, float_0)


def test_case_4997():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4998():
    str_0 = "$6;5mL?@#h9nYpynK*6["
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0, str_0)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


def test_case_5000():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5001():
    float_0 = 802.0578
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    bytes_0 = b"\n\x8b\x98\xd4\n&\x12O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    int_0 = 2108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    str_0 = "\nd'=z|~kP<ZKa;]-&Spf"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bytes_0 = b"TU\xf5n6\xfa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    int_0 = 3294
    int_1 = 829
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    complex_0 = -3160.2 - 433.951833j
    int_0 = 288
    bytes_0 = b"Mt|\xb9"
    bytes_1 = b"\x8d\xfbxz\x99\x9bd1%\x95"
    tuple_0 = (int_0, int_0, bytes_0, bytes_1)
    list_0 = [complex_0, complex_0, tuple_0, bytes_1]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    float_0 = 922.2419
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    bytes_0 = b"\xb7\xeb|\xce\x85-\x9c\x06\x13\xb2\xfbA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    str_0 = "|B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    float_0 = -176.17
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    str_0 = "E77Z.M7tF>u|~C"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0, list_0, list_0, object_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    int_0 = 101
    list_0 = [int_0]
    bool_0 = False
    tuple_0 = (int_0, int_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, list_0)


def test_case_5016():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5017():
    complex_0 = 1257 - 1447.77677j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    str_0 = "h\taYxLE4@q-M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    bytes_0 = b"\xed\x14Hs<\xc5j\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    str_0 = "#"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    bool_0 = False
    str_0 = ""
    bool_1 = True
    str_1 = "z~s\x0cIlb%\x0b Vn"
    tuple_0 = (str_0, bool_1, bool_1, str_1)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    int_0 = -2659
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    str_0 = "-_3D=0?$V\\P'~gQvO="
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    str_0 = "ZR b*x2%b4r-%"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    complex_0 = -4028.5977 + 1090.42582j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_5030():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = 460
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    str_0 = "PDlZ=~-@v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    str_0 = "Po%mS~)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    int_0 = 261
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    bytes_0 = b".\xb0\xa5\x17\xd6(7\x15\x867Z\x1b\x86 /\xb4\x80"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    str_0 = "h|*/-\\da8<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    none_type_0 = None
    str_0 = "isMMH"
    module_0.match(none_type_0, str_0)


def test_case_5038():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5039():
    float_0 = 2111.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bytes_0 = b"J\x00\x17\x8c\xc2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    str_0 = "iVV$C-Jdc*465?dRYDU4"
    module_0.match(str_0, str_0)


def test_case_5042():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5043():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    complex_0 = -1902.97 + 163.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    int_0 = 4121
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    str_0 = ";j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    str_0 = "n6^{dI/)KQ"
    int_0 = -2165
    tuple_0 = (str_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    int_0 = 3085
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    int_0 = -1900
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    int_0 = -1104
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    int_0 = -493
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    int_0 = -548
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    bytes_0 = b"\x10R\x04v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    bytes_0 = b"\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    bytes_0 = b"\x87Wx|"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bytes_0 = b"\xe3\xbc0\xe5\xc12\xfdG\xc73\xbe\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    int_0 = -1320
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    bytes_0 = b"\xac0"
    complex_0 = 643.82147 - 47j
    set_0 = {complex_0}
    tuple_0 = (bytes_0, set_0, set_0, complex_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    str_0 = "rjGbg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    str_0 = "6cjl1oM#3k"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    str_0 = "6]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    int_0 = 413
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    float_0 = -4728.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    int_0 = -1241
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    float_0 = -1054.794923
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    bytes_0 = b"\xd9IB\xb1\x1c\xaf"
    bytes_1 = b"\x07\xd5\xdf/]\x95\x1e\x97\xd9\x16\xc5\x9a{\xf4\x85\xc1\x97+"
    tuple_0 = (bytes_0, bytes_1)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    str_0 = "U3{;m5Deo=+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    bytes_0 = b"\xb4"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    bytes_0 = b"E\xe7/"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_5075():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5076():
    int_0 = -1714
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    float_0 = -2780.261
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    str_0 = "]?D1*mkX;s^"
    str_1 = ";q|&*Vnxvi"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    str_0 = "6hzZ@}+iZX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    bytes_0 = b"\xc9 \x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    int_0 = 1272
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    float_0 = -3447.293
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    bytes_0 = b"\x7f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    str_0 = "\nD%v+\\{e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bytes_0 = b"\xc7\\\xd6U\xf99\xa5\xd4\xa2}\xcc\xd2\x1f\x1d_\xec\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    str_0 = "H;#BwD>Tq"
    str_1 = "i#p0G"
    str_2 = "6T`H*=!4U(a#Y\\,(:ud/"
    str_3 = "CJkJWS`dqlHC]Pt%l"
    str_4 = ""
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_3, str_4: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    str_0 = "$sw0mcT"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    int_0 = -226
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    int_0 = 777
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    str_0 = "w"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    bytes_0 = b"7\x00/\x8b\xe3\x0elP\x96;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    bytes_0 = b"\x0fg\xe2X\xf7%\xe5x\x80W"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    int_0 = 2682
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    str_0 = "!gY=5XCM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    int_0 = -398
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    float_0 = 4355.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    int_0 = 2105
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    list_0 = []
    str_0 = "~LzbP4vk(C+V]v2]d\x0cx>"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    int_0 = -2578
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    float_0 = 1407.974992
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    float_0 = 2479.5192
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    float_0 = 2849.08
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    str_0 = ";k@$#'$U&Q@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    int_0 = 2240
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    bytes_0 = b"\x07jA\x97#\xe3"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    int_0 = 1805
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    str_0 = "0jj= .z:oDC"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    bytes_0 = b"\x18Gg\x8d@\xbf\xf8T4\xea\xb8\xf4\xe6\x19\xed=;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    bool_0 = True
    bytes_0 = b"\x9c4\xc4\x9b\xde\xd2\xd1\x94J\x93\xbdTe\xfd}\x11\x8b\xcfK2"
    dict_0 = {bool_0: bool_0, bytes_0: bytes_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    str_0 = "($jJy\x0c;kT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    float_0 = 1595.662
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_5117():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5118():
    bytes_0 = b"\x90'-\x02:\xa1,r\xed"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    list_0 = []
    bool_0 = True
    complex_0 = 1178.2 - 5769.475656j
    set_0 = set()
    tuple_0 = (list_0, bool_0, complex_0, set_0)
    module_0.match(tuple_0, tuple_0)


def test_case_5120():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5121():
    str_0 = "6uSCQ.@RIM4urrcq"
    str_1 = "vd/"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    str_0 = "("
    int_0 = 2847
    dict_0 = {str_0: str_0, str_0: str_0, str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bytes_0 = b")\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    float_0 = -1890.04801
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    complex_0 = 475.048489 - 4845.7727j
    module_0.match(complex_0, complex_0)


def test_case_5126():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5127():
    str_0 = "?Xw|{o;I"
    bool_0 = True
    bool_1 = False
    tuple_0 = (str_0, bool_0, bool_0, bool_1)
    int_0 = -2233
    tuple_1 = (tuple_0, bool_1, int_0, tuple_0)
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    str_0 = "rp@\x0b*-J_\x0c/yo"
    list_0 = [str_0, str_0, str_0]
    list_1 = [str_0, str_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    float_0 = 1980.0575
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    float_0 = -2199.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    bytes_0 = b"4_\xac\xa5\x8f\x07\x1bI\xefy\xfe\xa3\xb1\x19\x05I\xee\x18\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    int_0 = -247
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    str_0 = "2X"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    int_0 = 2330
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    int_0 = -62
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    float_0 = -1016.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    bool_0 = True
    bytes_0 = b"\xe8\xf7~\x82\xa4\xe1\xf5\x8a|\x02]\x9d*\tV\x86\xf9\xaf\xf4"
    tuple_0 = (bool_0, bytes_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    bytes_0 = b"\x9c\xadu"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    str_0 = "{m=b,O\x0c{M&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    bytes_0 = b"\x12\xca\x00\x9cn\\\x9d\x01\xeb&\x12\xd9\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    str_0 = "+yQS"
    list_0 = [str_0, str_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    str_0 = 'QKDko"X'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    str_0 = "t#mo*=L/Na"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    int_0 = 1831
    module_0.get_new_command(int_0, int_0)


def test_case_5149():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5150():
    str_0 = "\x0cf,5Rpdc)hw^&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    str_0 = "kL"
    bool_0 = False
    int_0 = 4518
    dict_0 = {bool_0: int_0, str_0: int_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (list_0,)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    bool_0 = False
    float_0 = -365.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    str_0 = 'm[jA+6^ d<H)\x0c!"b'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    dict_0 = {}
    list_0 = [dict_0]
    tuple_0 = (list_0, dict_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    bool_0 = True
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    set_0 = {bool_0, bool_0, object_0, bool_0}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    str_0 = "a\r03T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    int_0 = -1482
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    float_0 = 1396.852
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    int_0 = 3549
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    bytes_0 = b"\x94\xbc{\xdd\x9a\xa5\xb4\xac\xe7S"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    bool_0 = True
    none_type_0 = None
    module_1.object(*bool_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    int_0 = 689
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    int_0 = -1213
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    int_0 = 589
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    bool_0 = False
    set_0 = set()
    str_0 = ""
    bytes_0 = b"\x02\xcfa\x81M\x85\xadj"
    tuple_0 = (set_0, str_0, bool_0, bytes_0)
    tuple_1 = (bool_0, bool_0, tuple_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    int_0 = -1424
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    dict_1 = {int_0: int_0, int_0: dict_0}
    int_1 = 3276
    list_0 = [int_1, dict_0, int_1]
    tuple_0 = (dict_1, list_0)
    bytes_0 = b"("
    bytes_1 = b"\x8dL%\xf9&"
    str_0 = "k0Sp"
    tuple_1 = (tuple_0, bytes_0, bytes_1, str_0)
    module_0.match(tuple_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    int_0 = 1160
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    tuple_2 = (tuple_1,)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    float_0 = 937.441137
    set_0 = set()
    tuple_0 = (float_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    str_0 = "J0Rt;<t#*|H"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_5174():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5175():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    bytes_0 = b"\xc1\x8czY8\xe2\x96\x88\xca"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    bytes_0 = b"|h\xfdbp\x94A\xcbi\r:.\x9a\xde\x90P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    str_0 = "eI$e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_5181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5182():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    bytes_0 = b"H\xcf\xb7\x89\xfd\xc0\xe6\xc5\x80\xb1**\x86\x1f[\x07\xc2\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    str_0 = "7CT*"
    list_0 = [str_0, str_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    int_0 = -1363
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    bool_0 = True
    list_0 = []
    str_0 = "f/Z_"
    tuple_0 = (bool_0, list_0, str_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    str_0 = "J:\\g?&<d,)F1o"
    int_0 = 1133
    tuple_0 = (str_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    int_0 = -1487
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_5191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5192():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    float_0 = -2080.0
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    str_0 = "X:]J(|ydb*"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = "J.RvWoj<v6O."
    tuple_0 = (list_0, str_0)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_5198():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5199():
    float_0 = -1202.7114
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    str_0 = "|k@v)Q3_fjRd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    float_0 = -4179.66
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    int_0 = -4050
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    float_0 = 406.8934
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


def test_case_5205():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5206():
    str_0 = "8D]Tp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    int_0 = -1209
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    int_0 = 186
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    bytes_0 = b"\xca1\xb8\xa5\xbf)\xe1Qt\xdbB\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    str_0 = "j?s_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    bytes_0 = b"Z#&:<\xd4~%\x919Q\xee\x1d[\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    bytes_0 = b"s{8~\x87\x9b:Z\xcfr\x11I\xfc4\xa7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    bytes_0 = b"\xce-1_\xf3m\xdb\x92}\xb1sK\x1b>\x7f\xa5\x1f'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    bytes_0 = b"\xc2$s\xcdO9\xb0\xd5rbx\x1e\xfai\xb2*R\x1d"
    set_0 = {bytes_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    str_0 = "6> "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    int_0 = 2122
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    int_0 = -171
    module_0.match(int_0, int_0)


def test_case_5220():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5221():
    float_0 = 809.021404
    tuple_0 = (float_0, float_0, float_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    str_0 = '1?1jgLL","-0'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    bytes_0 = b"\x8e#\xe6\xcd\x88L\xbd\xc7_7\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    int_0 = 177
    str_0 = "~C}&GR26p"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    int_0 = -878
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    str_0 = ".ACd|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    float_0 = -2328.325904
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    bytes_0 = b"hyx"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    str_0 = "\x0cDdwE!??gy\x0cu\ns+@5d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    float_0 = 2003.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    complex_0 = 580.153 - 1385.62564j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    int_0 = -224
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    int_0 = -378
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    str_0 = "\n[J\x0c;l$"
    int_0 = -843
    list_0 = [str_0, int_0, str_0]
    tuple_0 = (str_0, list_0, int_0, int_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    int_0 = -3416
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    int_0 = -2759
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    str_0 = "G5Lk+*YOn4LKK@hxS%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    bytes_0 = b"\x13_3\xc8\xdfb\x02\xd2\x87\xb8\xfe\xfe\x1b="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    str_0 = "UyRu'['\x0cJ]R"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    float_0 = 2785.001
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    int_0 = -3422
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    str_0 = "|\t{.b+pyqa$b\r&b@+>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    float_0 = -219.763188
    str_0 = "$S@.bovflW1"
    set_0 = {float_0, str_0}
    list_0 = [set_0, str_0, float_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    float_0 = 806.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    str_0 = "\r.*V}XIUhh["
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    float_0 = 2109.1856
    module_0.get_new_command(float_0, float_0)


def test_case_5251():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5252():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, bool_0: bool_0, bool_0: bool_0, tuple_0: tuple_0}
    int_0 = 2899
    bool_1 = True
    tuple_1 = (dict_0, int_0, bool_1, tuple_0)
    list_0 = [tuple_1, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    str_0 = "XSBU|-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    bytes_0 = b"\xf4)\xe0\xf9\xb4\xa8\xe1\xdc\xd8\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    int_0 = -1428
    int_1 = -1135
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    str_0 = "2iFylVMY%"
    dict_0 = {}
    complex_0 = -1770.082872 - 642.961643j
    tuple_0 = (str_0, dict_0, complex_0, complex_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_5257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5258():
    str_0 = "EAjV>^<b&.8hC^bOq+"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    int_0 = 3724
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_5261():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5262():
    float_0 = -1825.7535
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    bytes_0 = b"A\x02\xdf\xf6\t\x97\xf3\xf2_\x18\xfbc\x89\xb0\x95\xed\xbf\xedfD"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5264():
    pass


def test_case_5265():
    pass


def test_case_5266():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5267():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = -3028
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    str_0 = "P9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    str_0 = "\rc*Llx)k/}t\x0b`\\Zj"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    str_0 = "Ck_?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    str_0 = "I'wO3\twrREA@g#\\[e9"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    int_0 = 2523
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    bytes_0 = b"\xed\xcaz"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    int_0 = 1643
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "aUGLu+>\r`Wes`Y\x0b\x0c,4"
    str_1 = "`^"
    bool_0 = True
    dict_0 = {str_0: none_type_0, str_0: list_0, str_1: list_0, str_1: bool_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    object_0 = module_1.object()
    str_0 = "!?!Gx:>fZ 2@%"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    float_0 = 2378.9171
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    int_0 = 1319
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    int_0 = -1687
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    bytes_0 = b"!\x99\rE\x03|\xf1\xb8\xeb\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    bytes_0 = b"\xaf\x10\xba\xb2\x13L\xcf\xbc"
    set_0 = {bytes_0, bytes_0, bytes_0}
    bool_0 = True
    str_0 = 'Y>\\9~s"TPzH@6'
    tuple_0 = (set_0, bool_0, str_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    bytes_0 = b"\n<\x15\xb7\x10\x89\t\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    str_0 = "eR7\t.!@M*k6>v}2*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    str_0 = "\t@`&g"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    str_0 = "c=rgTu;C9Gg+37g7Y?"
    str_1 = 'U7K31j)S<?4d@;KM"'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    float_0 = -2017.1
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    str_0 = '%7-84s$dKr"eBU\\Lz8'
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    bytes_0 = b"\xe4\x98"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    set_0 = set()
    tuple_0 = ()
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    bytes_0 = b"\xcc\xcb\x88\xf5\xb5\xaf\xb3q7\x0f\x19\x1c0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    complex_0 = -2223.5002 - 694.5j
    set_0 = {complex_0, complex_0}
    list_0 = [complex_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    int_0 = -12
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    bytes_0 = b"\xc2\x03\xa7\xfe\xa7\x80\\6,\xeb\xb7\xbe\x1c,\xf5\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    bool_0 = True
    bytes_0 = b"h\xed\xe7\xfc\xf9Qe+F]\xc8\xe1\xc0"
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    complex_0 = 930 + 231.6j
    set_0 = set()
    module_0.get_new_command(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    int_0 = 3039
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    str_0 = "\\Tl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    complex_0 = -281.83 - 2973j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    int_0 = -1333
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    bytes_0 = b"m\x9e\xae\xe4Ew\xf9\x8b\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    str_0 = ""
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_5309():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5310():
    str_0 = "PoFQ\nC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    bytes_0 = b"\xa0\x0e\xea\xc8\xbf\xf7C\xc8\x03B\x06"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    int_0 = 2950
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    float_0 = 1415.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    bytes_0 = b"\x95Z\xba|\x8a\x06\xf9\xf1\xb4\x93\xe9\xce \xf4{T\x04"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    int_0 = 112
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (list_0, int_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    str_0 = "\x0cdKQjtObJ]O!w~%/\x0c*}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    int_0 = 906
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    str_0 = ":Rk>'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    str_0 = "K`p&rlMJ@D@\t=\\=<."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    str_0 = "pby\rqKhM6mZle9hMaO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    int_0 = 2593
    bytes_0 = b""
    dict_0 = {int_0: bytes_0, int_0: bytes_0, bytes_0: int_0}
    tuple_0 = (int_0, bytes_0, dict_0, bytes_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    int_0 = -275
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    none_type_0 = None
    dict_0 = {}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    str_0 = "V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    float_0 = 180.0
    bytes_0 = b'\xaa\x03I\x14\xac?\xa8"(\xac\xb8\xe6\xd9'
    tuple_0 = (float_0, float_0, bytes_0)
    module_0.get_new_command(tuple_0, float_0)


def test_case_5326():
    pass


def test_case_5327():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5328():
    str_0 = "y\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    str_0 = "g=d~;plL"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    int_0 = 2327
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    bytes_0 = b"\x0c\xf0\x1a\x91\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    bytes_0 = b"="
    int_0 = 120
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    str_0 = ">l@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    str_0 = '"wz|*'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    str_0 = "\nV}c-;V$NRE6yK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    complex_0 = 2737.08182 - 2275.4j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    complex_0 = 1237.6 + 1206.06j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bytes_0 = b"[\xb4\xb1\x9cFs\x1aM/a\xa3\xe7\xd7\xa8\xff\xc1P4h"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5340():
    bytes_0 = b"\xb6\xe4Z\xe7l\x8c\xaa\xee\xecL+%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    float_0 = 1904.00928
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    float_0 = 1726.4643
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    int_0 = 4818
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    str_0 = ",0D (l/<1TMK\x0b5jY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    complex_0 = 1430.2128 + 2598.733j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    bytes_0 = b"\x0c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    complex_0 = 309 + 1058j
    bool_0 = True
    set_0 = {complex_0, bool_0, bool_0, complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    bytes_0 = b"\t\xf4\x921S\xa7\xd0\xf8\xec\xaf\x88`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    complex_0 = 1061.2 + 2386.49j
    str_0 = "62#/g("
    set_0 = {complex_0, str_0, str_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    bool_0 = True
    bytes_0 = b"Or\x95\xa6\xce\xea\xa8\xe0"
    tuple_0 = (bool_0, bytes_0, bool_0, bool_0)
    list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    bytes_0 = b"\xbb\xba\xef\xc7T\x18\\ 59\xba\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    str_0 = "UcHz\x0cJ_|xCANYZi]OK"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    object_0 = module_1.object()
    list_0 = [object_0]
    int_0 = -1447
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    bool_0 = False
    complex_0 = 3466.4 + 611.421276j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    complex_0 = 404 + 2728.18918j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    str_0 = "cJk;F{:"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    int_0 = -1048
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    int_0 = -502
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    str_0 = "^\rl"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    int_0 = 467
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    int_0 = 1607
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    bool_0 = False
    bytes_0 = b"\xbe\xa4"
    tuple_0 = (bool_0, bytes_0)
    bool_1 = True
    str_0 = "`3["
    tuple_1 = (tuple_0, bool_1, str_0, bool_1)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    tuple_0 = ()
    bytes_0 = b"%\xce\x8d\x81\x19\x02\xa6\xb8\x95"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    str_0 = "MY24wwV1>!GK9O-N4Hs*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    str_0 = "3@qPy?Y3/4R@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bytes_0 = b"x"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5372():
    bytes_0 = b"\xec\x93\xa8"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, bytes_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    str_0 = "\"lT|'?TJv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    float_0 = -819.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    float_0 = 252.66735
    bool_0 = True
    dict_0 = {float_0: bool_0, bool_0: float_0}
    list_0 = [dict_0, bool_0, dict_0, dict_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    str_0 = "S1"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    str_0 = "@>8>GkT\x0bJO. e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    float_0 = -851.26
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    str_0 = "SAn]@\x0b\tSOO`^)A("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    str_0 = '&D6OBU6$U;nM"t~7D]'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = 70
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bool_0 = False
    int_0 = -1071
    set_0 = {int_0, bool_0, int_0}
    tuple_0 = ()
    tuple_1 = (int_0, set_0, tuple_0)
    tuple_2 = (bool_0, tuple_1)
    str_0 = "?6qX"
    tuple_3 = (tuple_2, tuple_0, str_0, tuple_0)
    module_0.get_new_command(tuple_3, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    bytes_0 = b"\x14\xb3A\x98v\x86z\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    int_0 = -1582
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    bytes_0 = b"\xbe\x89\x8b`\xd1"
    float_0 = -2111.0
    tuple_0 = (bytes_0, float_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    bytes_0 = b"2\xd1\xe5+\xd5c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    float_0 = 19.878745
    tuple_0 = (float_0, float_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


def test_case_5388():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5389():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    int_0 = 646
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    str_0 = "-6}BU'44.8^\\/k9Z;e"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    int_0 = 503
    int_1 = -511
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bytes_0 = b"\xf9R\x05\xf9\xd2\x1f\xd5\xf3\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    int_0 = 1132
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bool_0 = False
    int_0 = 1786
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, int_0: int_0, bool_0: bool_0, tuple_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    bytes_0 = b"\xf2"
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    int_0 = 2579
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    int_0 = 5737
    dict_0 = {int_0: int_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


def test_case_5402():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5403():
    bool_0 = True
    str_0 = "E~;{s>M\x0bHnl|c"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    int_0 = -1488
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    int_0 = -2702
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    int_0 = 1705
    tuple_0 = (int_0, int_0, int_0, int_0)
    set_0 = {tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    int_0 = 376
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    int_0 = -1640
    int_1 = -1542
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    int_0 = 469
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    str_0 = "wcQ?S8"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    none_type_0 = None
    int_0 = -3270
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    int_0 = 2323
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_5415():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5416():
    float_0 = 1280.8
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    str_0 = "~w9;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    int_0 = 67
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    complex_0 = -1747.0162 + 437.3459j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    bytes_0 = b"Ai\x95B\xa8"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    bool_0 = False
    bytes_0 = b"o\xe0\x16\x06\xd7\xf3\xb8\x93\xbe\x0bJ\xbe\x8f\x9e\xd6\x84[\x82"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    int_0 = 1502
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    bytes_0 = b"Q4&t\xd8U5\xfc\x03\xe6\t\x10\xee\xcf\xbb3\x89\xfd\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    int_0 = 3464
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    int_0 = 902
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    bytes_0 = b"\x8d!\x0c\xe7\x89\xdc%\xcf\xfc \xe4\x95S\xb6\xfa\x105\xb9\xf1\x96"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    float_0 = 2040.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    bytes_0 = b"l\x00\xbb\xa2c#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    float_0 = -1644.9755
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    str_0 = 'NJ@\tqr"t/sN}\x0c'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    str_0 = 'meXrI?rFEw;%o:"4'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    bytes_0 = b"\xfc\x94bS\xf1\xec\x02z\xda\xb2\x17\x91EO"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    bool_0 = True
    str_0 = "Gstz%7Q;\\"
    tuple_0 = (str_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    str_0 = "qS!.7^wVn8jdVw!t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    int_0 = 866
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    str_0 = "Acr*N{7XG-4Gt<X5)'I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    float_0 = -2359.889
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    str_0 = "I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    int_0 = 70
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    int_0 = 2661
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    str_0 = ""
    object_0 = module_1.object(*str_0)
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    float_0 = 2054.761
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    bytes_0 = b"\xdf\xa3m\xa6E\x0f\xd7\xd3X\x03\x84\rB3u\xa8\xe1\x8f\xb0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    bytes_0 = b"'v#\xda)|-\x19\xc5\xb7\xb2\n\xbf\xaa\xdf\xf4\x86\xcd\xd6="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    bytes_0 = b'\xd4x\xcc\x99\xd0-\x1ap\xdd\xaa\xc6"\xd1\xc5'
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    bytes_0 = b"a\xe4\x8d=\x18\xec\x0b\xce\x81\xfd\xc3\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    complex_0 = -1601.19 + 437.476j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    bytes_0 = b"\xac-\x02\xc3\xe7\x12\xa3\x98\xcf\xda\xee\xc94\xc7k\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    bytes_0 = b"\xbf1\xfe\xf7\xda\xfd=~\x00\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5459():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5460():
    str_0 = "VJItU\x0cv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    str_0 = "l#6y`9b$CcO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    int_0 = -3203
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    bool_0 = False
    complex_0 = -1541 - 1819j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    bytes_0 = b"5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    bytes_0 = b"Bs\t\x99E}\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    bytes_0 = b"\x14\xa7W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    bytes_0 = b"\xfa\xa7\xc1^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    int_0 = 3990
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    int_0 = -1661
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    int_0 = 3437
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    complex_0 = -1152.2 - 1845.4332j
    str_0 = "gtBR_"
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    int_0 = 932
    module_0.get_new_command(int_0, int_0)


def test_case_5476():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5477():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    complex_0 = -1423 + 594.2j
    bytes_0 = b"n\x16G\xd8\xff\x16P^\x16\x97\x08\x0c\x0bva"
    dict_0 = {complex_0: complex_0, complex_0: bytes_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    bytes_0 = b"\x13\xc0^\xcc\xf1q\x19\\O\x8e\x19\xca9\x08Q"
    tuple_0 = ()
    int_0 = -11
    dict_0 = {bytes_0: tuple_0, bytes_0: tuple_0, int_0: tuple_0}
    tuple_1 = (bytes_0, tuple_0, dict_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    float_0 = -2217.07
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    bool_0 = True
    bytes_0 = b"\x049\xe0\xd3~Y\x19\xca\t\x90\x0e"
    int_0 = -2266
    tuple_0 = (bool_0, bool_0, bytes_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    int_0 = 5321
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    int_0 = 1821
    bytes_0 = b"\x9b\x9b\xf16RU\xcd]\x02\x8f\x89"
    module_0.get_new_command(int_0, bytes_0)


def test_case_5484():
    pass


def test_case_5485():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5486():
    str_0 = "rbNM\\TMePx%'D#|b%;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    bytes_0 = b"\xbc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    str_0 = "\t##6\x0b^-kH"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    bytes_0 = b"\xa5\xd6WF\x9c\xa8\xad\xf8\x84b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    str_0 = "\r2E-^4#:("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    float_0 = 224.184
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    int_0 = -2148
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    int_0 = -82
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    int_0 = -893
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    str_0 = "t"
    bytes_0 = b"\x8e\xa7\xafN\xb1\xe8\x14\x91\xc1t\xca1\x0f\xea\xb2\x06\xbcF\xa1\xf7"
    str_1 = '\t_rF*=>39\x0cKv\r\r{\t"!)'
    tuple_0 = (str_0, bytes_0, str_1, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    bool_0 = False
    int_0 = 1243
    str_0 = ">|~cQ1 5g}b$"
    tuple_0 = (bool_0, int_0, bool_0, str_0)
    set_0 = {tuple_0, tuple_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    int_0 = -745
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    str_0 = "G&$q O\x0cz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0}
    str_0 = ""
    tuple_0 = (bool_1, set_0, str_0)
    tuple_1 = (bool_0, bool_0, tuple_0)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    bytes_0 = b"\xf0Vp\xfd"
    int_0 = 97
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    bytes_0 = b"\xeaE\xa1qt\x949\xa7\x96\xc9&\x86"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    str_0 = '5}&s>?Xf(O2%"B!:NAG'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    bytes_0 = b"}\t\x11\x08P\x8dl\x8ccZ``\x93q!\xb6\xaf-t\xaa"
    bool_0 = True
    list_0 = []
    str_0 = "'O,5F|\"G(SVCr8]4B!g*"
    tuple_0 = (bool_0, list_0, str_0)
    list_1 = [bytes_0, bytes_0, bytes_0, tuple_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    bytes_0 = b",jks\x05\xbcp\xbc\x8d\xd6{b\xa0\xda\x1a\xb2\x8e\xf0\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    float_0 = 3123.2
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    bytes_0 = b"I\xb4?Q|@\x05\x83mUe\xa7TkSrTH\x86"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    str_0 = "xk1]v$h"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    bytes_0 = b"N\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    bytes_0 = b"QMC\x06\x93)\xb1\x84'\xeeB\x93\x9fJ\xeb\x82\x9b\xf8-?"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    float_0 = -4855.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    none_type_0 = None
    bytes_0 = b"\xd8\x17\x1dF%\xbev\x07"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    bytes_0 = b"9V\xea\x12Q\xbf\x14\x81Q%\xc6.\x85\x91W\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    bytes_0 = b"q\x00F<\xfa\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    str_0 = ".lvT:A+Zwzy0Dl:uts"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    int_0 = -405
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    bytes_0 = b"\x0eu\r"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5519():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5520():
    int_0 = -2546
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bytes_0 = b"A\x9d\x18\x91\x88\xda\x86m\xcf\x98\x9cv"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    bytes_0 = b"ye\xac\xed}\xe3\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    float_0 = -1227.67
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    int_0 = -259
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    float_0 = 2989.780475
    module_0.get_new_command(float_0, float_0)


def test_case_5528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5529():
    bytes_0 = b"};o\xf8<c\xc0\xe1\x80W\x0cQI\xe2\x95\x17\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    complex_0 = -1330.4617 + 475.53844j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    int_0 = -1679
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bytes_0 = b";\xaf\xae\x8b\xd8\xe3\xc28\x90\x07c"
    set_0 = {bytes_0}
    tuple_0 = ()
    tuple_1 = (bytes_0, set_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    int_0 = -2381
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    complex_0 = -1458 - 1537.587246j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    str_0 = "O^ "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    str_0 = "vh6tI>?FUfB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    bytes_0 = b"\xca}^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    str_0 = "jP{bRg)m:\\(lV#&xj]\r"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    int_0 = -1054
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    str_0 = "{rBG}7Y/kL`Buytj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    bytes_0 = b"\xdc\xef\xc7Z\xc5\x8f\r\xf0\xb2[\r\xe5z)|\x80\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    bytes_0 = b"Y\x12\xad"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    bytes_0 = b"z\xdd["
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (dict_0,)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    str_0 = "'Ow}KMx78MR]oS%w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    int_0 = -367
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    bytes_0 = b"X"
    tuple_0 = (bytes_0, bytes_0)
    int_0 = -1188
    set_0 = {tuple_0, int_0, bytes_0}
    list_0 = [tuple_0, tuple_0, set_0]
    set_1 = set()
    module_0.get_new_command(list_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    bytes_0 = b":\x1b\x84M"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    bytes_0 = b"\xe0\xf6\xcc\xd7\x96\xa56\xe7d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    dict_0 = {tuple_0: bool_1, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    tuple_0 = ()
    str_0 = "*:G,"
    tuple_1 = (tuple_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    bytes_0 = b"\x11\xb1\xdaX"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    int_0 = 4635
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    bytes_0 = b"\x063\x97\xcc\xa4\x94\xc1\x9aU\x8b\xb9"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5559():
    bytes_0 = b"\x93\x11x5\xc6"
    tuple_0 = (bytes_0,)
    set_0 = set()
    tuple_1 = (tuple_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    int_0 = 1060
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    int_0 = -1760
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    str_0 = "^H#)Rw\r|\nQ/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    str_0 = "J^Q@be4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    int_0 = 2224
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    float_0 = -3159.48286
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    str_0 = "Ocbn\nW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    str_0 = "idQN?J^!NC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    float_0 = 499.3132
    float_1 = -2961.9
    module_0.get_new_command(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    bytes_0 = b"\xdf\xae\xbc\xfd\x01\xc6\xbf\xa4\xea/\xb4c0ou"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    bytes_0 = b"\xbe\\\x8d\x06\xe0\xb0\xb7\x90\xee\xec\x17i\x11\x97%ce\xa1"
    set_0 = {bytes_0, bytes_0, bytes_0}
    dict_0 = {}
    bool_0 = True
    tuple_0 = (bool_0, bytes_0, set_0)
    tuple_1 = (set_0, dict_0, tuple_0)
    module_0.match(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    int_0 = -424
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    str_0 = "YIZxXROvK| -1Ti~%\nB"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    str_0 = "[2OG,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    str_0 = ">sV_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    str_0 = "s(\x0c%ZyKUR1^{k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    float_0 = -1130.449
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    bytes_0 = b"\r@>@\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    str_0 = 'x|:Pm1K(\x0b_\r+"[9'
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {}
    tuple_0 = (str_0, bool_0, list_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    str_0 = ".}^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    float_0 = -2021.6
    dict_0 = {float_0: float_0}
    list_0 = []
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    int_0 = 443
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    complex_0 = -166.7 + 2546.063215j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    int_0 = -30
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    str_0 = "q}(t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    bytes_0 = b"m\x97\x80\n:"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    str_0 = "i(;$:/&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    float_0 = 851.11397
    module_0.match(float_0, float_0)


def test_case_5590():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5591():
    float_0 = -5975.72
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    int_0 = -2452
    list_0 = [int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5593():
    float_0 = -1893.217706
    tuple_0 = (float_0, float_0, float_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    bytes_0 = b"\\W\x861r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    int_0 = -551
    list_0 = [int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    str_0 = 'J"JzSfb[%uN'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    float_0 = -1260.67
    set_0 = {float_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    int_0 = -894
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    list_0 = [set_0, set_0, set_0, bool_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    float_0 = -1955.01
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    int_0 = -1336
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    str_0 = "\nj?S:C&|\x0b\rc0_/];"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    int_0 = -1726
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    bytes_0 = b"q\xb4\xc9\x8d\nr"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    float_0 = 1682.926863
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    str_0 = "NM:hBAMQ<5\x0c&\r[@~XJqu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    int_0 = -2294
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    int_0 = -2013
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    int_0 = 1280
    float_0 = -896.209014
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    float_0 = 399.415
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    int_0 = 5473
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    int_0 = -810
    set_0 = {int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    str_0 = "@<)%)`)]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    str_0 = "AhF\r)5 AO9r\no#V8*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    float_0 = -1404.052004
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_5619():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5620():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    int_0 = -1709
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    str_0 = "R|\\.C7rm \\?K1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    int_0 = 1580
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    int_0 = -310
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    tuple_0 = ()
    float_0 = -468.675733
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    none_type_0 = None
    bytes_0 = b"h\xd9Q\xbb8\xda1"
    module_0.match(none_type_0, bytes_0)


def test_case_5627():
    pass


def test_case_5628():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5629():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    int_0 = 735
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5631():
    float_0 = 689.008
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    int_0 = 1140
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    str_0 = "]yY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    int_0 = 2777
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5635():
    bytes_0 = b"\x953z\xcc*\xba+$\xcb}"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5636():
    int_0 = -2881
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    float_0 = -1270.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    float_0 = -3408.5445
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    str_0 = "0}!*:,1 Oy4W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    complex_0 = 1388.3 + 1574.1j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    int_0 = 1534
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    float_0 = -425.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5643():
    str_0 = "I|B(/,oP}~gH Dh-q2g"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5644():
    bytes_0 = b"+\xa0pim\xfb\xc3\x1d_\xf3\xb1\xe0\xabJ\xae"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    int_0 = 1459
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5646():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5647():
    int_0 = -2830
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5648():
    bool_0 = True
    float_0 = 241.72
    list_0 = []
    tuple_0 = (bool_0, float_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    str_0 = "mM*%6\rU>k\x0bfXi~'"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    bytes_0 = b"\x10\x85o\xa7\xb8\xa6Tm"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    float_0 = -2238.0
    set_0 = {float_0, float_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5652():
    str_0 = "(12,8BN-aRK4F<Qe "
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5653():
    str_0 = "|j1J/~3"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5654():
    int_0 = 636
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5655():
    bytes_0 = b"\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5656():
    int_0 = -3959
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5657():
    bytes_0 = b"\x89$:_\xc1u\xe0\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5658():
    int_0 = -2505
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5659():
    bytes_0 = b"v\x99"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    str_0 = "c$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5661():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5662():
    bytes_0 = b"f\xc2\xa71\xf8I\xe9d\xa8\x90\xc7\xef\x04[\xda\xbe\xb5\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5663():
    bytes_0 = b"vV\xde\xe88\xc1Y3\xc0\xe3IWx\xc0\x18L\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5664():
    complex_0 = 1646.7 + 4056.25j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5665():
    int_0 = -1435
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5666():
    str_0 = "h;#/z N[K#"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5667():
    str_0 = "4NK6>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5668():
    int_0 = 1245
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5669():
    float_0 = -1554.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5670():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


def test_case_5671():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5672():
    float_0 = 414.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5673():
    float_0 = 2000.575275
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5674():
    complex_0 = -2587.9385 + 202.488j
    str_0 = "G~,"
    dict_0 = {}
    tuple_0 = (complex_0, str_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5675():
    complex_0 = -155.25 + 654j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5676():
    int_0 = -414
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5677():
    int_0 = -1439
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5678():
    str_0 = "}R?pJ\x0c_:f>yb!_~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5679():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5680():
    bool_0 = False
    bytes_0 = b"\x0e\xaa\xceA\xb7O\x9c\x03\x7f\xbf0\x11\x9a\xd0\xfd6"
    list_0 = [bool_0, bool_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5681():
    bytes_0 = b"@)\xb7o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5682():
    str_0 = "W00m(!8:!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5683():
    set_0 = set()
    list_0 = [set_0]
    bytes_0 = b"\xeb"
    list_1 = [list_0, list_0, bytes_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5684():
    float_0 = 576.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5685():
    complex_0 = 1308.35 - 2812.3362j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5686():
    str_0 = "{<{L8j]s3AL $>Q^S-5b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5687():
    float_0 = -1144.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5688():
    bytes_0 = b"\xe9W\xf5\xfc\xc3l\x0bmd'\x84\xa50"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5689():
    int_0 = 2862
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5690():
    float_0 = 1339.54561
    str_0 = "K89t7 -pdD\x0bD. qwj~n"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5691():
    complex_0 = -0.7914 - 1384.41j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5692():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5693():
    str_0 = "D 1]&O?"
    str_1 = "T2nRK;"
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_1: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5694():
    complex_0 = 1027.1243 + 2195.943454j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5695():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5696():
    str_0 = "ZLkS5o=tM.a\nMO"
    set_0 = set()
    dict_0 = {str_0: str_0, str_0: set_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5697():
    float_0 = -2394.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5698():
    str_0 = "SiF51$F#_.\x0cB/\r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5699():
    bytes_0 = b"\x16\x18\r\x9c\xb2Rh\xe7\xa2\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5700():
    bytes_0 = b"\xaf\xf7\xae\xc2@r:"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5701():
    str_0 = "i,oC%/Y,S"
    module_0.get_new_command(str_0, str_0)


def test_case_5702():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5703():
    int_0 = 150
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5704():
    str_0 = "l?>\x0c;-@}7h1`\ne#o c"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_5705():
    float_0 = 4236.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5706():
    bytes_0 = b"\xaf\xd8\xd1\xa6\xe3\x16\xc0\x1b\\sz\xceE\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5707():
    str_0 = "2}"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5708():
    int_0 = -276
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5709():
    float_0 = -2928.352959
    module_0.match(float_0, float_0)


def test_case_5710():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5711():
    float_0 = 420.525
    int_0 = -1522
    tuple_0 = (float_0, int_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5712():
    none_type_0 = None
    complex_0 = -790 + 504.1j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5713():
    float_0 = -1152.531
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5714():
    complex_0 = 2389.3 + 1632.242958j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5715():
    float_0 = 827.555
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5716():
    bytes_0 = b"\x93\x12(:\xbbV\xa5\x00\x9f\x90\xd4\x96\xa6I\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5717():
    dict_0 = {}
    bool_0 = False
    set_0 = {bool_0}
    float_0 = 2625.9446
    tuple_0 = (dict_0, bool_0, set_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5718():
    int_0 = 1347
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5719():
    float_0 = 484.92
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5720():
    float_0 = -1180.1542
    set_0 = {float_0}
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0,)
    dict_0 = {float_0: float_0, float_0: float_0, float_0: tuple_1}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5721():
    float_0 = 991.35001
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5722():
    int_0 = 912
    int_1 = -876
    dict_0 = {int_0: int_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5723():
    str_0 = "7XQDn|"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5724():
    complex_0 = -1749.19891 + 2040.31324j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5725():
    bytes_0 = b"\x99\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5726():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5727():
    bytes_0 = b"\x98\xed\x19\xeb\x89\xee\x9d\xb2X\xd6\x0b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5728():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    tuple_1 = (set_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5729():
    str_0 = "}Iz9Zgo7/W7-Hl\nE)iz,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5730():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5731():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


def test_case_5732():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5733():
    bool_0 = True
    bytes_0 = b"\xa2\x88#\xe1\x8b\t\xa8W\xaf\xdb\x81 \xf8\x10E"
    tuple_0 = (bool_0, bytes_0, bool_0, bytes_0)
    bool_1 = True
    tuple_1 = (bool_0, tuple_0, bool_1)
    dict_0 = {tuple_1: bool_0, tuple_1: bool_1}
    str_0 = "R+z}"
    str_1 = '\tsj"CT%Q"8J*,K:|^T'
    dict_1 = {str_0: str_0, str_0: str_0, str_1: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5734():
    int_0 = -377
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5735():
    bytes_0 = b"EZ\xf0\xfa\xf3|M\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5736():
    float_0 = 1068.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5737():
    int_0 = -1441
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5738():
    int_0 = 1593
    set_0 = {int_0, int_0, int_0}
    list_0 = [int_0, int_0, set_0, set_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5739():
    bytes_0 = b"\xa2\xc1\xfbqfo"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5740():
    int_0 = -2919
    int_1 = 1439
    list_0 = [int_0, int_1, int_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5741():
    bytes_0 = b'--\x94"\xa3'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5742():
    bytes_0 = b"9\xb6\xddNs1\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5743():
    int_0 = 732
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5744():
    list_0 = []
    int_0 = 1479
    tuple_0 = (list_0, int_0, int_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5745():
    str_0 = "-dQ&["
    module_0.match(str_0, str_0)


def test_case_5746():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5747():
    float_0 = 3382.041687
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5748():
    str_0 = "//p-MnWRsn`"
    int_0 = 1234
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: int_0}
    list_0 = [dict_0, str_0, int_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5749():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = "::K{D"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5750():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5751():
    float_0 = 2031.565
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5752():
    str_0 = "vAj{h @F_opbcuG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5753():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5754():
    int_0 = -3629
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5755():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5756():
    int_0 = -1656
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "\nbnaqb-1bb:"
    bytes_0 = b"yN{\r\x9e\x19\xd8\xe5"
    tuple_0 = (list_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5757():
    bytes_0 = b'"\xc0\x98>\xfe9x\x8a\x81X;'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5758():
    bytes_0 = b"\xf8\xcb`0\x84n\xef\xc0\xfa\xe6\xedx\xf4\xd3\xda\xcf\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5759():
    str_0 = "4spDi}dL)=\n+W-OR iH2"
    bool_0 = True
    set_0 = {str_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5760():
    bytes_0 = b"$\xc7\xfe(\x84\xd7\x92\x1bG"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5761():
    bool_0 = True
    bytes_0 = b"\xe4b;=\x89\xc0O"
    tuple_0 = (bool_0, bytes_0, bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5762():
    float_0 = -644.2553
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5763():
    bytes_0 = b"\x0c\x94)\xdd,\xb9\xef\x11\x91=M\xbd\x0c2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5764():
    float_0 = 2326.71607
    str_0 = ":k"
    set_0 = {float_0, str_0, str_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5765():
    str_0 = "TG%x "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5766():
    str_0 = "*}Fy=|+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5767():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5768():
    str_0 = "QGGE?Jx.a,g\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5769():
    int_0 = -1125
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5770():
    bytes_0 = b"\x17\xa5~_\xe1\xcb\x95"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5771():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    str_0 = '"QL9@\rIKI@j'
    module_0.get_new_command(set_0, str_0)


def test_case_5772():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5773():
    complex_0 = -246.046496 + 2441.76j
    bool_0 = True
    dict_0 = {complex_0: complex_0, complex_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5774():
    str_0 = "`zI5&K{di*\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5775():
    str_0 = "m{:)<R6Wf1!]~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5776():
    str_0 = "K;[+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5777():
    bytes_0 = b"\xa4"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5778():
    str_0 = 'c"+3-t*u/Ytk]e\x0bl2vX'
    module_0.match(str_0, str_0)


def test_case_5779():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5780():
    str_0 = "K"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5781():
    str_0 = "h9\n\t=S`z\x0c5OAs qa9"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5782():
    bytes_0 = b"\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5783():
    int_0 = -23
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5784():
    bytes_0 = b"\xf6\x86U\x93)\xae\xb8I\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5785():
    str_0 = "3<"
    list_0 = [str_0, str_0, str_0]
    bytes_0 = b"\xe0\x13\xac\n>q"
    tuple_0 = (list_0, bytes_0, list_0)
    int_0 = -1421
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5786():
    int_0 = 24
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5787():
    str_0 = "~l8 a.{n\x0caT6OuH"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5788():
    str_0 = "s 4^Eq\r@4*|s\rt9ITP\r`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5789():
    bool_0 = True
    int_0 = 1319
    list_0 = [bool_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5790():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5791():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bytes_0 = b"\xfc\xdc"
    list_1 = [bool_0, bool_0, bytes_0, bytes_0]
    module_1.object(*list_0, **list_1)


@pytest.mark.xfail(strict=True)
def test_case_5792():
    float_0 = -592.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5793():
    bytes_0 = b"Ll.$\xea\x18\xfb\xe8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5794():
    str_0 = "Jt/k\n\tq450e~yyu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5795():
    bytes_0 = b"\x84L"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5796():
    str_0 = "q\x0b#SM5=C?2`J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5797():
    int_0 = -2787
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5798():
    bool_0 = True
    int_0 = -3320
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5799():
    set_0 = set()
    float_0 = -2658.71
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5800():
    int_0 = -616
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5801():
    str_0 = "UZ}ZoK=.:"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5802():
    bytes_0 = b">Y\xb5\xf6\xf7C\xfa@)`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5803():
    int_0 = 2930
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5804():
    str_0 = "N|/,U>offhC<\x0cIb?f{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5805():
    bytes_0 = b"\xfe\xa5\xcc8\x0e\xed\xa8\xb8\xda9\xda\xf1\x84n:\xc6\xc5"
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_1 = b"\x94\x00R0\xaaH\xb3"
    set_0 = set()
    dict_0 = {}
    tuple_1 = (tuple_0, bytes_1, set_0, dict_0)
    tuple_2 = (bytes_0, tuple_1, bool_0, bool_0)
    module_0.get_new_command(tuple_2, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5806():
    str_0 = "?4ytl>R\n{G{PLIl"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_5807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5808():
    str_0 = "m})Xw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5809():
    str_0 = "q#}/"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


def test_case_5810():
    pass


def test_case_5811():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5812():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5813():
    int_0 = -3170
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5814():
    int_0 = -191
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5815():
    bytes_0 = b"2\xd4\xba\xef\x90/Mv\xc5\xdd\x83\xc7\xdaS%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5816():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5817():
    bytes_0 = b'EU+&\xa6\xd0\x07z\xb4\xd5\x04\xc2\xb2w\xdc\xc4"\x8b'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5818():
    bytes_0 = b"\x9e4u\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5819():
    int_0 = -1834
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5820():
    bytes_0 = b""
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5821():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5822():
    str_0 = "96O,.nCm'Pcx8}H!f"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5823():
    bytes_0 = b"\xe2/\xe7v"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5824():
    bytes_0 = b"9\xb11Z\x08\xae-\xb9\xaec\xfai$\xa0&\xa1i"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5825():
    str_0 = "y\r6>7M+vD92d\rJ$/eL<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5826():
    int_0 = 2430
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5827():
    str_0 = "*DI7B%JoF~fR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5828():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5829():
    bytes_0 = b">\xd4i\xc15w\xaaZ\xee+%\x10\xe5\xd5\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5830():
    int_0 = -4559
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5831():
    bytes_0 = b"\x84E"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5832():
    bytes_0 = b"\xfaa\\\x1f\xc9\xecb\x02\xd3\xa7\x98\xde8E\x10z\x0eW>"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5833():
    int_0 = 2198
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5834():
    float_0 = 1045.4563
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5835():
    str_0 = "=lo$]4wVy6k*\tXmmVw7\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5836():
    int_0 = -1686
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "w'\"QbpJ.-IsxV"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5837():
    bytes_0 = b"\x0e`,\xb9C\xc4\xfa\xd3$x\x0b\x9cx}\xf8\x83\xf2\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5838():
    bytes_0 = b"\xcfa:@\r\x081\xf5\xf4\x8a\xb2\x0b|"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5839():
    bytes_0 = b"\xa639\x90@\x86*\xca\xdb\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5840():
    str_0 = ";%A"
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5841():
    bytes_0 = b"\\f\xd8\xf5\x14(?\xae\x1b\xc8\x0e7\x9d\x9a\xbd\xffB\x92w"
    bytes_1 = b"\xe7vy\x1d\xd9\x95]k\xf8\x8cA\xb5\xc2s\x8f"
    int_0 = -84
    tuple_0 = (bytes_0, bytes_1, int_0, bytes_0)
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5842():
    bytes_0 = b"\xaa\x1eoK\xdcUGZ\x0c.[\x1b#\xd9ed\xfc\xd2\x8a1"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5843():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5844():
    int_0 = 1460
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5845():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5846():
    float_0 = 247.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5847():
    int_0 = -761
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5848():
    str_0 = "?paT+CHi*II_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5849():
    float_0 = -46.361568
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5850():
    int_0 = 696
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5851():
    int_0 = 1870
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5852():
    int_0 = -645
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5853():
    bytes_0 = b"9\t\xbc/\xf0\xb0p\x8d\xba\xaa\xb5<\x17\x11\xe9\x0c\xe0A\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5854():
    str_0 = ""
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5855():
    str_0 = "Q:P16HtewM)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5856():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5857():
    int_0 = 1610
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "pI}]zOAJ%"
    dict_0 = {str_0: int_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5858():
    complex_0 = 1850.906 - 2524.272696j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5859():
    bool_0 = True
    str_0 = 'pK)"\\%n'
    tuple_0 = (str_0,)
    bytes_0 = b"\xa8\x02t\xa5"
    bool_1 = False
    tuple_1 = (bool_0, tuple_0, bytes_0, bool_1)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5860():
    str_0 = "d>]HFx/^u2xV+MF})"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5861():
    int_0 = 1199
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5862():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5863():
    float_0 = -249.03516
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5864():
    bytes_0 = b"\xcd\x80"
    list_0 = [bytes_0]
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5865():
    float_0 = -3.069
    tuple_0 = (float_0, float_0)
    bool_0 = False
    list_0 = [tuple_0, float_0, bool_0, tuple_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5866():
    bytes_0 = b"\x02M\xe1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5867():
    int_0 = 1765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5868():
    float_0 = 2439.1
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5869():
    bytes_0 = b"\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5870():
    str_0 = "jt:{S^5"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5871():
    int_0 = 1582
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, int_0, dict_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5872():
    int_0 = 712
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5873():
    float_0 = 308.3305
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5874():
    bytes_0 = b"\xa3\x12\x02D\xd2x\xd0m\x82\x1e1\x97jQ"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5875():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5876():
    float_0 = 2143.86321
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5877():
    float_0 = 1151.94
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5878():
    bytes_0 = b"%\xdf\x882\xb8d3\xaf[\n\x94;\xcam\xf6a\x95\x1e\xc2\xf2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5879():
    int_0 = 611
    str_0 = "!vb6WHK"
    dict_0 = {int_0: int_0, str_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5880():
    bytes_0 = b"$\xf0\xf0uU\t\rm\xc9\x9d\x94\xff\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5881():
    str_0 = "HU!nhI,IRhJBvRN?\n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5882():
    str_0 = "y\rC\r[5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5883():
    float_0 = 1355.1257
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5884():
    int_0 = 1391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5885():
    bytes_0 = b"\xf9\xfe\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5886():
    str_0 = "%\r*~&\t\r<DWn"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5887():
    float_0 = 1100.75648
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5888():
    float_0 = -913.35172
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5889():
    float_0 = 2137.2466
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5890():
    str_0 = "'2-ri\r"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_5891():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5892():
    float_0 = 1834.24
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5893():
    str_0 = "??"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5894():
    bytes_0 = b"Mg\x81\xb9\x007B]6\xb8\xab\xb4\xe9\xd1g\xcf\x1d\x88:"
    int_0 = -255
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5895():
    str_0 = "61RgyE\nDZY~;fr2\x0cwxgo"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5896():
    str_0 = ",/ 5nOno_a3v=I"
    set_0 = {str_0, str_0}
    bool_0 = False
    bool_1 = True
    tuple_0 = (set_0, bool_0, bool_1)
    list_0 = [tuple_0]
    list_1 = [list_0, bool_1]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5897():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"\x13G\xb1\x14\xb3j\x8b"
    tuple_0 = (dict_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5898():
    bool_0 = False
    dict_0 = {}
    list_0 = [bool_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5899():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5900():
    int_0 = -750
    str_0 = "A_8\r\r{AC{6g[3kg\tp"
    list_0 = [int_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5901():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5902():
    bytes_0 = b"\x08\xb0\x0bl\x9d\xf2L\t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5903():
    bytes_0 = b":\r;\xbd`\x8b"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5904():
    complex_0 = 112 + 1264.8j
    float_0 = 3812.30175
    bool_0 = True
    tuple_0 = (complex_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5905():
    int_0 = 1569
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5906():
    str_0 = "\t\\]W\x0c\x0cYZ`n@Sw("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5907():
    int_0 = -2389
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5908():
    str_0 = "|=<L5O+X!`gTRbYQOrI&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5909():
    float_0 = 1867.705
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5910():
    int_0 = -272
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5911():
    bytes_0 = b"\x0e\x1d\xcf\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5912():
    int_0 = -1017
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5913():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5914():
    int_0 = 23
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5915():
    bytes_0 = b"\x8a9\x11\xec\xb3\xcf\xc1\x83d\x85y\x11j\xe2>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5916():
    bytes_0 = b"\x80,z\xbb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5917():
    bytes_0 = b"\xe7\xcbw\xc3\xc0R\xfdt\xa4\xf3e_\xa2\xbf\x15\x02\xbf,Z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5918():
    float_0 = -1553.86826
    object_0 = module_1.object()
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5919():
    bytes_0 = b"Z\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5920():
    bool_0 = True
    str_0 = "}`pq:[+NMBKW {"
    tuple_0 = (bool_0, bool_0, str_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5921():
    int_0 = -1600
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5922():
    int_0 = 1067
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5923():
    int_0 = -397
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5924():
    float_0 = 825.93252
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5925():
    bytes_0 = b"\xad\xaf\x01\xcd\xb3\x14\xb6\xc4\x06\x15\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5926():
    complex_0 = -111 - 816.273j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5927():
    bytes_0 = b"\xe6\x07\xb80\xf2\x9a\x06\xc3\x81\x18\xf9e\xa4\x15yV^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5928():
    int_0 = -327
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5929():
    float_0 = -398.94
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5930():
    str_0 = "AqO`mNF-]Hu+K$ *)'&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5931():
    float_0 = -3469.29
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5932():
    int_0 = -714
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    bytes_0 = b"\x84\xc0\x00P\ti\xef\xe1U"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5933():
    bytes_0 = b"\xe2\x17\x8bs0\xd06g3K\xd2\xe8\x83\xe9;\x9bh\xa0\xda\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5934():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, dict_0, object_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5935():
    bytes_0 = b"s\xde\xcelf]\x87\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5936():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5937():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5938():
    int_0 = -195
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5939():
    str_0 = "7*pa"
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = False
    bytes_0 = b"t\x86\x84\xa2EM\x8f\x08|"
    tuple_0 = (bytes_0,)
    tuple_1 = (bool_0, tuple_0)
    bytes_1 = b"YC\xc3\x96d\x93\x01\xc3j_"
    tuple_2 = (list_0, tuple_1, bytes_1)
    module_0.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5940():
    int_0 = -1863
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5941():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5942():
    bytes_0 = b"h+\xb6u3\xcbE\xaa\x82\xed\xad_\x196\x0f\xae\xe2\x95"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5943():
    bytes_0 = b"\x1a\x9a\x17\n\x00\x92\x99|mG\xd4\xd3"
    list_0 = []
    tuple_0 = (bytes_0, list_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5944():
    int_0 = -1321
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5945():
    bool_0 = False
    int_0 = -2063
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, int_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5946():
    float_0 = 295.694172
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5947():
    float_0 = -914.6213
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5948():
    float_0 = -1264.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5949():
    bytes_0 = b"\xb1\xc9%H\xb1"
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    str_0 = "r97$k"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5950():
    bytes_0 = b"\xb1\xcc\xe7\xff|\xd7e\xba\x93\x81\xb8\xb2E4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5951():
    str_0 = "sffm\n0ZWk\r\t>5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5952():
    str_0 = "5!\tN3\t"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5953():
    bytes_0 = b"\x1fW\xc9UL]"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5954():
    float_0 = -2273.0
    set_0 = {float_0, float_0, float_0, float_0}
    list_0 = [set_0, float_0, float_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5955():
    bytes_0 = b"xxv\x07\xd7\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5956():
    bool_0 = False
    list_0 = [bool_0]
    bytes_0 = b"\xe5\x95iW\x9eN\x11\xa4\xfd_\x98\xcc\x90\xf2\xffh\x9b\xd6\xed"
    tuple_0 = (bool_0, bool_0, list_0, bytes_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5957():
    bytes_0 = b"@EsA"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5958():
    float_0 = -3563.819
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5959():
    int_0 = 143
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5960():
    float_0 = 443.956
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5961():
    int_0 = -418
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5962():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5963():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5964():
    float_0 = -1766.16184
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5965():
    int_0 = -1972
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5966():
    int_0 = -124
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5967():
    bytes_0 = b"\xcc\x0bq\x11\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5968():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5969():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5970():
    str_0 = "v<d,%P|)nS1U-/"
    list_0 = []
    module_0.get_new_command(list_0, str_0)


def test_case_5971():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5972():
    int_0 = -1808
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5973():
    str_0 = "s.v\x0bW)^Ca\x0bB+#"
    set_0 = {str_0, str_0, str_0, str_0}
    bool_0 = True
    tuple_0 = (str_0, set_0, set_0, bool_0)
    list_0 = [tuple_0, set_0, bool_0, set_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5974():
    object_0 = module_1.object()
    complex_0 = 720.102243 - 1277.22459j
    tuple_0 = (object_0, complex_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5975():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5976():
    float_0 = -364.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5977():
    bytes_0 = b'\xa7{\xef\xea\xd4\x8d4\xe7"\x85`\xbc\xf9\\'
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5978():
    str_0 = "}u\x0bzPP-\x0b]\n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5979():
    str_0 = 'Enf"Q'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5980():
    bytes_0 = b"\x18\x82\x7f'\x0f\n\xb3\xd9\xfa\xd1\xd2\xee\x96\x14\xbf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5981():
    str_0 = 'uVEo"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5982():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (set_0, bool_0)
    list_0 = [bool_0, bool_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5983():
    int_0 = -411
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5984():
    float_0 = 2726.106961
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5985():
    str_0 = "Jbm_\x0b'G\tF9~I,\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5986():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5987():
    float_0 = 3224.34745
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_5988():
    float_0 = -5090.522
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5989():
    complex_0 = 4168 + 447.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5990():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5991():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5992():
    bytes_0 = b"\xd9\xb2\x93\xd0o4\xe4=[\x97qM\xae1"
    complex_0 = -1764.022444 - 567.04733j
    tuple_0 = (bytes_0, complex_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5993():
    bytes_0 = b"I\xaa\x88\xcc\xdc\x9d\x02\xbc\xe1[\x88"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5994():
    none_type_0 = None
    int_0 = -1078
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5995():
    bytes_0 = b"\x1d3\x0b\xb8\x9917k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5996():
    complex_0 = 611.2825 - 298.54204j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5997():
    bytes_0 = b"\xb9\xad\x15K\x85\xcf\xd5\x81\xf0\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5998():
    bool_0 = False
    bytes_0 = b"$\xd2\xc5\x8f&V"
    bytes_1 = b"\x1d\xd2\xc2\xdct\xadv\xd0\x967^\xed7M\xb7\xbdx\x0b\x06\x9e"
    list_0 = [bytes_1, bytes_1, bool_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5999():
    bytes_0 = b"\xcc\x8a\xa9\xe1\xf0\xf96X\x9d\xe7\xaaUbi"
    module_0.match(bytes_0, bytes_0)


def test_case_6000():
    pass


@pytest.mark.xfail(strict=True)
def test_case_6001():
    bytes_0 = b"8{\x9bi\xe6\x80d\xb1\x83\x11\x85"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6002():
    str_0 = "NsG'%)XU`\n2H\t7\"c3T"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6003():
    str_0 = "q!X4A"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_6004():
    bytes_0 = b"\x1bL*k\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6005():
    int_0 = 1089
    str_0 = "WL"
    set_0 = {int_0, str_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_6006():
    str_0 = "4"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6007():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6008():
    str_0 = ";?{32q8^rR\r*tM\r@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6009():
    bytes_0 = b"\xef(W\xach!\x9e\xfdx\xa1k\xb9"
    module_0.get_new_command(bytes_0, bytes_0)
