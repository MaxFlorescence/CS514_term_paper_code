# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import redistricting as module_0
import inspect as module_1
import scipy._lib.array_api_compat.common._helpers as module_2
import networkx.drawing.layout as module_3
import sysconfig as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.Redistricting(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    str_0 = ""
    bool_0 = True
    module_0.Redistricting(
        str_0,
        bool_0,
        none_type_0,
        none_type_0,
        bool_0,
        single_updaters=none_type_0,
        h=none_type_0,
        w=none_type_0,
        graph_name=none_type_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_1.trace()
    var_0.run()


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "triangular"
    bool_0 = True
    bool_1 = False
    module_0.Redistricting(
        str_0, bool_0, str_0, bool_0, bool_1, h=bool_0, graph_name=str_0
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    int_0 = 138
    str_0 = "\x0cn"
    var_0 = module_2.is_cupy_array(str_0)
    module_0.Redistricting(
        var_0, var_0, none_type_0, int_0, var_0, assignment_name=str_0
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "va"
    int_0 = 56
    list_0 = module_3.planar_layout(str_0, int_0)
    module_0.Redistricting(
        str_0, int_0, str_0, str_0, int_0, list_0, list_0, list_0, w=int_0
    )


@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_4.get_makefile_filename()
    bool_0 = False
    module_0.Redistricting(var_0, var_0, var_0, var_0, bool_0, h=var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    str_0 = "triangular"
    bool_0 = True
    int_0 = -3707
    module_0.Redistricting(
        str_0, int_0, str_0, int_0, bool_0, h=int_0, graph_name=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    str_0 = "grid"
    int_0 = 365
    module_0.Redistricting(str_0, none_type_0, none_type_0, str_0, int_0, h=str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    str_0 = "triangular"
    bool_0 = True
    int_0 = -1888
    module_0.Redistricting(str_0, bool_0, none_type_0, str_0, int_0)
