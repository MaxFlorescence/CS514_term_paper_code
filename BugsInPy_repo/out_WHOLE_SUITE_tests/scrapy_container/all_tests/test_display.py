# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import display as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 3278
    var_0 = module_0.pprint(int_0)
    module_0.pformat(var_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    var_0 = module_0.pformat(none_type_0)
    assert var_0 == "None"
    var_1 = module_0.pformat(var_0)
    assert var_1 == "'None'"
    var_2 = module_0.pformat(var_0)
    assert var_2 == "'None'"
    var_3 = module_0.pformat(var_0, *var_0)
    assert var_3 == "'None'"
    int_0 = -1191
    module_0.pprint(int_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    var_0 = module_0.pprint(none_type_0)
    none_type_1 = None
    var_1 = module_0.pformat(none_type_1)
    assert var_1 == "None"
    module_0.pprint(var_1, **none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    object_0 = module_1.object()
    var_0 = module_0.pformat(object_0)
    module_0.pprint(var_0, *var_0, **object_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    str_0 = "euHaM'|220X.J"
    dict_0 = {str_0: str_0}
    var_0 = module_0.pprint(list_0, **dict_0)
    var_1 = module_0.pformat(list_0, *list_0)
    assert var_1 == "[]"
    str_1 = "1ZGV3A"
    none_type_0 = None
    dict_1 = {str_1: none_type_0}
    var_2 = module_0.pformat(str_1)
    assert var_2 == "'1ZGV3A'"
    var_3 = module_0.pformat(none_type_0, *var_2)
    assert var_3 == "None"
    var_4 = module_0.pformat(none_type_0)
    assert var_4 == "None"
    var_5 = module_0.pprint(none_type_0, **dict_1)
    module_0.pformat(var_1, **var_3)


def test_case_5():
    int_0 = 3648
    list_0 = [int_0, int_0]
    var_0 = module_0.pprint(int_0, *list_0)
    var_1 = module_0.pprint(int_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b""
    dict_0 = {}
    var_0 = module_0.pformat(bytes_0, **dict_0)
    assert var_0 == "b''"
    str_0 = "RiiY\n4w"
    var_1 = module_0.pprint(str_0)
    var_2 = module_0.pformat(bytes_0, *str_0)
    assert var_2 == "b''"
    bool_0 = False
    int_0 = -745
    dict_1 = {bool_0: bool_0, int_0: int_0}
    var_3 = module_0.pformat(var_0)
    assert var_3 == "\"b''\""
    var_4 = module_0.pprint(dict_1)
    module_0.pformat(dict_0, *var_4, **dict_1)


def test_case_7():
    pass


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    str_0 = "i?KaiX|(Rbbqb"
    str_1 = "HuRLo$%1{ZO2@3=P&7<"
    dict_0 = {str_0: str_0, str_1: str_1}
    var_0 = module_0.pprint(bool_0, **dict_0)
    bytes_0 = b"3C+\x95tL\xee\xc6\xae\xda\x0b\xd0\xa2;\xa1\xb16\xe5\x8a\xda"
    var_1 = module_0.pprint(var_0)
    tuple_0 = (bool_0, bytes_0)
    dict_1 = {}
    var_2 = module_0.pformat(tuple_0, **dict_1)
    assert (
        var_2
        == "(False, b'3C+\\x95tL\\xee\\xc6\\xae\\xda\\x0b\\xd0\\xa2;\\xa1\\xb16\\xe5\\x8a\\xda')"
    )
    list_0 = []
    str_2 = "k$XG$A"
    dict_2 = {str_2: list_0}
    var_3 = module_0.pprint(list_0, *list_0, **dict_2)
    list_1 = [list_0]
    none_type_0 = None
    module_0.pprint(list_0, *list_1, **none_type_0)
