# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import pytree as module_0
import _io as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    module_0.type_repr(wildcard_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    module_0.WildcardPattern(max=wildcard_pattern_0, name=wildcard_pattern_0)


def test_case_2():
    bool_0 = False
    with pytest.raises(AssertionError):
        module_0.Node(bool_0, bool_0, prefix=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.Base()


def test_case_4():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.__eq__(bool_0)


def test_case_5():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.__eq__(leaf_0)
    assert var_0 is True


def test_case_6():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(AssertionError):
        leaf_0.replace(bool_0)


def test_case_7():
    tuple_0 = ()
    int_0 = 965
    node_0 = module_0.Node(int_0, tuple_0, prefix=int_0, fixers_applied=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "pytree.Node"
    assert node_0.type == 965
    assert node_0.children == []
    assert node_0.fixers_applied is None
    assert module_0.HUGE == 2147483647
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = node_0.get_lineno()


def test_case_8():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.get_lineno()
    assert var_0 == 0


def test_case_9():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.changed()
    assert leaf_0.was_changed is True


def test_case_10():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.remove()


def test_case_11():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.get_suffix()
    assert var_0 == ""


def test_case_12():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.depth()
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_13():
    float_0 = 1074.82738
    bytes_0 = b"&\xb8\xd2\xffd\xf2\xcds=\xd3\xda0\x1f4 L7\t"
    module_0.Node(float_0, bytes_0, fixers_applied=float_0)


def test_case_14():
    tuple_0 = ()
    int_0 = 936
    node_0 = module_0.Node(int_0, tuple_0, prefix=int_0, fixers_applied=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "pytree.Node"
    assert node_0.type == 936
    assert node_0.children == []
    assert node_0.fixers_applied is None
    assert module_0.HUGE == 2147483647
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )


def test_case_15():
    tuple_0 = ()
    int_0 = 727
    node_0 = module_0.Node(int_0, tuple_0, prefix=int_0, fixers_applied=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "pytree.Node"
    assert node_0.type == 727
    assert node_0.children == []
    assert node_0.fixers_applied is None
    assert module_0.HUGE == 2147483647
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = node_0.clone()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pytree.Node"
    assert var_0.type == 727
    assert var_0.children == []
    assert var_0.fixers_applied is None


@pytest.mark.xfail(strict=True)
def test_case_16():
    float_0 = 2107.53
    module_0.Node(float_0, float_0)


def test_case_17():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.clone()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pytree.Leaf"
    assert var_0.lineno == 0
    assert var_0.column == 0
    assert var_0.type is False
    assert var_0.value is False
    assert var_0.fixers_applied == []


def test_case_18():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_19():
    bool_0 = True
    module_0.Leaf(bool_0, bool_0, prefix=bool_0, fixers_applied=bool_0)


def test_case_20():
    float_0 = 1079.5497319350698
    with pytest.raises(AssertionError):
        module_0.Leaf(float_0, float_0, fixers_applied=float_0)


def test_case_21():
    int_0 = -1121
    with pytest.raises(AssertionError):
        module_0.Leaf(int_0, int_0)


def test_case_22():
    str_0 = "|\x0bK>"
    var_0 = module_0.convert(str_0, str_0)
    assert var_0 == ">"
    assert module_0.HUGE == 2147483647


def test_case_23():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647


@pytest.mark.xfail(strict=True)
def test_case_24():
    module_0.BasePattern()


def test_case_25():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.match(node_pattern_0, node_pattern_0)
    assert var_0 is True


def test_case_26():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.match(node_pattern_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b"^[ \\t\\f]*(?:[#\\r\\n]|$)"
    node_pattern_0 = module_0.NodePattern(name=bytes_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name == b"^[ \\t\\f]*(?:[#\\r\\n]|$)"
    assert module_0.HUGE == 2147483647
    node_pattern_0.match(bytes_0, node_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    list_0 = []
    int_0 = 607
    node_pattern_0 = module_0.NodePattern(int_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type == 607
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    node_pattern_0.match(list_0, list_0)


def test_case_29():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    list_0 = []
    var_0 = node_pattern_0.match_seq(list_0)
    assert var_0 is False


def test_case_30():
    leaf_pattern_0 = module_0.LeafPattern()
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    list_0 = [leaf_pattern_0]
    var_0 = leaf_pattern_0.match_seq(list_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_31():
    leaf_pattern_0 = module_0.LeafPattern()
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = leaf_pattern_0.match(leaf_pattern_0)
    assert var_0 is False
    var_1 = leaf_pattern_0.generate_matches(leaf_pattern_0)
    module_0.convert(leaf_pattern_0, var_1)


def test_case_32():
    bool_0 = True
    with pytest.raises(AssertionError):
        module_0.LeafPattern(bool_0, bool_0)


def test_case_33():
    int_0 = 944
    with pytest.raises(AssertionError):
        module_0.LeafPattern(int_0)


def test_case_34():
    str_0 = "|\x0bK>"
    leaf_pattern_0 = module_0.LeafPattern(content=str_0, name=str_0)
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content == "|\x0bK>"
    assert leaf_pattern_0.name == "|\x0bK>"
    assert module_0.HUGE == 2147483647


def test_case_35():
    float_0 = -940.5407061037954
    with pytest.raises(AssertionError):
        module_0.LeafPattern(float_0)


def test_case_36():
    leaf_pattern_0 = module_0.LeafPattern()
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    assert module_0.HUGE == 2147483647


@pytest.mark.xfail(strict=True)
def test_case_37():
    leaf_pattern_0 = module_0.LeafPattern()
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    module_0.LeafPattern(leaf_pattern_0)


def test_case_38():
    leaf_pattern_0 = module_0.LeafPattern()
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = leaf_pattern_0.match(leaf_pattern_0, leaf_pattern_0)
    assert var_0 is False


def test_case_39():
    str_0 = "\\s+(\\d+),$"
    with pytest.raises(AssertionError):
        module_0.NodePattern(content=str_0, name=str_0)


def test_case_40():
    bytes_0 = b"\x9c\x8cG\xf6"
    with pytest.raises(AssertionError):
        module_0.NodePattern(content=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    int_0 = 1405
    module_0.NodePattern(int_0, int_0)


def test_case_42():
    bool_0 = False
    with pytest.raises(AssertionError):
        module_0.NodePattern(bool_0, bool_0)


def test_case_43():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647


def test_case_44():
    list_0 = []
    node_pattern_0 = module_0.NodePattern(content=list_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content == []
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647


@pytest.mark.xfail(strict=True)
def test_case_45():
    bool_0 = False
    module_0.WildcardPattern(bool_0, name=bool_0)


def test_case_46():
    str_0 = "ROI"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (("R",), ("O",), ("I",))
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647


def test_case_47():
    int_0 = -1066
    with pytest.raises(AssertionError):
        module_0.WildcardPattern(max=int_0)


def test_case_48():
    string_i_o_0 = module_1.StringIO()
    with pytest.raises(AssertionError):
        module_0.WildcardPattern(string_i_o_0)


def test_case_49():
    int_0 = -2047
    with pytest.raises(AssertionError):
        module_0.WildcardPattern(min=int_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = " ROm"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, name=str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == ((" ",), ("R",), ("O",), ("m",))
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == " ROm"
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content == ((" ",), ("R",), ("O",), ("m",))
    assert var_0.min == 0
    assert var_0.max == 2147483647
    assert var_0.name == " ROm"
    wildcard_pattern_0.__new__(str_0, **var_0)


def test_case_51():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content is None
    assert var_0.min == 0
    assert var_0.max == 2147483647
    assert var_0.name is None


def test_case_52():
    bool_0 = True
    wildcard_pattern_0 = module_0.WildcardPattern(min=bool_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min is True
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content is None
    assert var_0.min is True
    assert var_0.max == 2147483647
    assert var_0.name is None


@pytest.mark.xfail(strict=True)
def test_case_53():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    wildcard_pattern_0.match(wildcard_pattern_0, wildcard_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    set_0 = set()
    none_type_0 = None
    wildcard_pattern_0 = module_0.WildcardPattern(name=none_type_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.match(set_0, set_0)
    assert var_0 is True
    var_0.post_order()


def test_case_55():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_56():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    wildcard_pattern_0.match_seq(wildcard_pattern_0, wildcard_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    bool_0 = True
    wildcard_pattern_0 = module_0.WildcardPattern(max=bool_0, name=bool_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max is True
    assert wildcard_pattern_0.name is True
    assert module_0.HUGE == 2147483647
    wildcard_pattern_0.match(bool_0, bool_0)


def test_case_58():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    negated_pattern_0 = module_0.NegatedPattern(wildcard_pattern_0)
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert (
        f"{type(negated_pattern_0.content).__module__}.{type(negated_pattern_0.content).__qualname__}"
        == "pytree.WildcardPattern"
    )


def test_case_59():
    bool_0 = True
    with pytest.raises(AssertionError):
        module_0.NegatedPattern(bool_0)


def test_case_60():
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    assert module_0.HUGE == 2147483647


@pytest.mark.xfail(strict=True)
def test_case_61():
    bool_0 = True
    var_0 = module_0.generate_matches(bool_0, bool_0)
    assert module_0.HUGE == 2147483647
    module_0.convert(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    bool_0 = False
    var_0 = module_0.generate_matches(bool_0, bool_0)
    assert module_0.HUGE == 2147483647
    module_0.convert(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    tuple_0 = ()
    int_0 = 668
    node_0 = module_0.Node(int_0, tuple_0, prefix=int_0, fixers_applied=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "pytree.Node"
    assert node_0.type == 668
    assert node_0.children == []
    assert node_0.fixers_applied is None
    assert module_0.HUGE == 2147483647
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )
    node_0.__repr__()


def test_case_64():
    tuple_0 = ()
    int_0 = 672
    node_0 = module_0.Node(int_0, tuple_0, prefix=int_0, fixers_applied=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "pytree.Node"
    assert node_0.type == 672
    assert node_0.children == []
    assert node_0.fixers_applied is None
    assert module_0.HUGE == 2147483647
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(AssertionError):
        node_0.replace(tuple_0)


def test_case_65():
    tuple_0 = ()
    int_0 = 683
    node_0 = module_0.Node(int_0, tuple_0, prefix=int_0, fixers_applied=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "pytree.Node"
    assert node_0.type == 683
    assert node_0.children == []
    assert node_0.fixers_applied is None
    assert module_0.HUGE == 2147483647
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = node_0.__eq__(node_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_66():
    tuple_0 = ()
    int_0 = 971
    node_0 = module_0.Node(int_0, tuple_0, prefix=int_0, fixers_applied=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "pytree.Node"
    assert node_0.type == 971
    assert node_0.children == []
    assert node_0.fixers_applied is None
    assert module_0.HUGE == 2147483647
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )
    node_0.set_child(node_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    tuple_0 = ()
    int_0 = 641
    node_0 = module_0.Node(int_0, tuple_0, prefix=int_0, fixers_applied=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "pytree.Node"
    assert node_0.type == 641
    assert node_0.children == []
    assert node_0.fixers_applied is None
    assert module_0.HUGE == 2147483647
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )
    node_0.insert_child(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    tuple_0 = ()
    int_0 = 682
    node_0 = module_0.Node(int_0, tuple_0, prefix=int_0, fixers_applied=tuple_0)
    assert f"{type(node_0).__module__}.{type(node_0).__qualname__}" == "pytree.Node"
    assert node_0.type == 682
    assert node_0.children == []
    assert node_0.fixers_applied is None
    assert module_0.HUGE == 2147483647
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )
    node_0.append_child(tuple_0)


def test_case_69():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.__repr__()
    assert var_0 == "Leaf(NAME, True)"


@pytest.mark.xfail(strict=True)
def test_case_70():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.leaves()
    var_0.__new__(var_0, *var_0)


def test_case_71():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.optimize()


def test_case_72():
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    assert module_0.HUGE == 2147483647
    var_0 = negated_pattern_0.match(negated_pattern_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_73():
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    assert module_0.HUGE == 2147483647
    negated_pattern_0.match_seq(negated_pattern_0)
