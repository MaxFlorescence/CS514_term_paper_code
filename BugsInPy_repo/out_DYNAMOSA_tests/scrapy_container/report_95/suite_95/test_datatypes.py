# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import datatypes as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.__deepcopy__(multi_value_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    merge_dict_0 = module_0.MergeDict()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_0) == 0
    var_1 = var_0.update(merge_dict_0)
    var_2 = var_0.get(var_1)
    multi_value_dict_0.get(multi_value_dict_0)


def test_case_2():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_0) == 0
    var_1 = multi_value_dict_0.values()


@pytest.mark.xfail(strict=True)
def test_case_3():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_0) == 0
    var_1 = var_0.update(multi_value_dict_0)
    var_0.getlist(var_0)


def test_case_4():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = caseless_dict_0.update(multi_value_dict_0)
    var_1 = multi_value_dict_0.setlistdefault(var_0)
    assert len(multi_value_dict_0) == 1


def test_case_5():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = caseless_dict_0.update(multi_value_dict_0)
    var_1 = multi_value_dict_0.update()


def test_case_6():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.values()
    with pytest.raises(TypeError):
        multi_value_dict_0.update(**var_0)


def test_case_7():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.update()


def test_case_8():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_9():
    merge_dict_0 = module_0.MergeDict()
    module_0.CaselessDict(merge_dict_0)


def test_case_10():
    merge_dict_0 = module_0.MergeDict()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = merge_dict_0.get(multi_value_dict_0)
    var_1 = multi_value_dict_0.update()


def test_case_11():
    merge_dict_0 = module_0.MergeDict()
    local_cache_0 = merge_dict_0.getlist(merge_dict_0)


def test_case_12():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.items()


@pytest.mark.xfail(strict=True)
def test_case_13():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.has_key(merge_dict_0)
    var_1 = merge_dict_0.copy()
    var_2 = merge_dict_0.has_key(merge_dict_0)
    var_1.normkey(var_0)


def test_case_14():
    bool_0 = True
    local_cache_0 = module_0.LocalCache(bool_0)
    assert (
        f"{type(local_cache_0).__module__}.{type(local_cache_0).__qualname__}"
        == "datatypes.LocalCache"
    )
    assert len(local_cache_0) == 0
    var_0 = local_cache_0.__setitem__(bool_0, bool_0)
    assert len(local_cache_0) == 1
    var_1 = local_cache_0.__setitem__(var_0, var_0)


def test_case_15():
    merge_dict_0 = module_0.MergeDict()


def test_case_16():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0


def test_case_17():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.__copy__()
    assert len(var_0) == 0
    var_1 = multi_value_dict_0.update()


def test_case_18():
    complex_0 = 1149 + 1201.2712181681475j
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.appendlist(complex_0, complex_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(complex_0)
    assert var_1 == (1149 + 1201.2712181681475j)
    multi_value_dict_1 = module_0.MultiValueDict()
    assert len(multi_value_dict_1) == 0


def test_case_19():
    bool_0 = True
    site_node_0 = module_0.SiteNode(bool_0)
    var_0 = site_node_0.to_string()
    assert var_0 == "True\n"


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\x08\r7J\x8d\x8biA\xaf"
    set_0 = set()
    site_node_0 = module_0.SiteNode(set_0)
    site_node_0.add_child(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    site_node_0 = module_0.SiteNode(none_type_0)
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    tuple_0 = ()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    local_cache_0 = module_0.LocalCache(tuple_0)
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    caseless_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.__contains__(caseless_dict_0)


def test_case_24():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = caseless_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    var_1 = multi_value_dict_0.update()


@pytest.mark.xfail(strict=True)
def test_case_25():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.setdefault(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.__copy__()
    var_1 = var_0.copy()
    var_0.__getitem__(merge_dict_0)


def test_case_27():
    local_cache_0 = module_0.LocalCache()


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = False
    local_cache_0 = module_0.LocalCache(bool_0)
    assert (
        f"{type(local_cache_0).__module__}.{type(local_cache_0).__qualname__}"
        == "datatypes.LocalCache"
    )
    assert len(local_cache_0) == 0
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.get(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    site_node_0 = multi_value_dict_0.__repr__()
    assert site_node_0 == "<MultiValueDict: {}>"
    merge_dict_0 = module_0.MergeDict(*site_node_0)
    assert merge_dict_0.dicts == (
        "<",
        "M",
        "u",
        "l",
        "t",
        "i",
        "V",
        "a",
        "l",
        "u",
        "e",
        "D",
        "i",
        "c",
        "t",
        ":",
        " ",
        "{",
        "}",
        ">",
    )
    merge_dict_0.get(merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    local_cache_0 = module_0.LocalCache()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_1 = module_0.MultiValueDict(local_cache_0)
    assert len(multi_value_dict_1) == 0
    var_0 = multi_value_dict_0.items()
    site_node_0 = module_0.SiteNode(var_0)
    assert site_node_0.url == []
    var_1 = multi_value_dict_1.__repr__()
    assert var_1 == "<MultiValueDict: {}>"
    var_2 = site_node_0.to_string()
    assert var_2 == "[]\n"
    list_0 = [
        multi_value_dict_1,
        multi_value_dict_0,
        local_cache_0,
        var_0,
        multi_value_dict_0,
        site_node_0,
        var_0,
    ]
    merge_dict_0 = module_0.MergeDict(*list_0)
    var_3 = merge_dict_0.__copy__()
    var_3.getlist(merge_dict_0)


def test_case_31():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_0) == 0
    var_1 = var_0.update(var_0)
    var_2 = multi_value_dict_0.update()


@pytest.mark.xfail(strict=True)
def test_case_32():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    caseless_dict_0.__delitem__(caseless_dict_0)


def test_case_33():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = caseless_dict_0.normvalue(caseless_dict_0)
    var_1 = var_0.copy()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datatypes.CaselessDict"
    )
    with pytest.raises(TypeError):
        var_1.update(**var_0)


def test_case_34():
    merge_dict_0 = module_0.MergeDict()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.update(merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    multi_value_dict_0.update(none_type_0)


def test_case_36():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.__copy__()
    assert len(var_0) == 0
    var_1 = multi_value_dict_0.copy()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_1) == 0
    list_0 = [var_1, var_1, multi_value_dict_0]
    with pytest.raises(TypeError):
        var_1.update(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_0) == 0
    var_1 = var_0.update(multi_value_dict_0)
    var_2 = var_0.getlist(var_1)
    var_1.__setitem__(var_0, var_0)


def test_case_38():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_0) == 0
    var_1 = var_0.update(multi_value_dict_0)
    var_2 = var_0.getlist(var_1)
    var_3 = var_0.setdefault(var_1)
    assert len(var_0) == 1


@pytest.mark.xfail(strict=True)
def test_case_39():
    complex_0 = 1149 + 1218.977081j
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.appendlist(complex_0, complex_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(complex_0)
    assert var_1 == (1149 + 1218.977081j)
    var_2 = multi_value_dict_0.update()
    var_3 = multi_value_dict_0.setlistdefault(var_1)
    multi_value_dict_0.update(var_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    local_cache_0 = module_0.LocalCache()
    str_0 = ""
    list_0 = [str_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    var_0 = merge_dict_0.has_key(str_0)
    assert var_0 is True
    var_0.add_child(list_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = '"L+g $\r.n?d'
    module_0.CaselessDict(str_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.items()
    var_1 = multi_value_dict_0.__deepcopy__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_1) == 0
    var_2 = var_1.__copy__()
    assert len(var_2) == 0
    var_3 = var_2.copy()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_3) == 0
    var_4 = var_2.update(caseless_dict_0)
    caseless_dict_0.pop(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    merge_dict_0 = module_0.MergeDict()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_0) == 0
    var_1 = multi_value_dict_0.update(**var_0)
    var_2 = multi_value_dict_0.setdefault(merge_dict_0, var_0)
    assert len(multi_value_dict_0) == 1
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_2) == 0
    var_3 = var_0.items()
    var_4 = var_0.update(multi_value_dict_0)
    assert len(var_0) == 1
    assert len(var_2) == 1
    local_cache_0 = module_0.LocalCache()
    var_3.get(merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.__setitem__(none_type_0, none_type_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.__deepcopy__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_1) == 1
    bytes_0 = b"!\xc5B\x8a\xa0\x18\xc1"
    var_2 = var_1.setdefault(none_type_0, bytes_0)
    var_1.update(var_2)


@pytest.mark.xfail(strict=True)
def test_case_45():
    none_type_0 = None
    site_node_0 = module_0.SiteNode(none_type_0)
    var_0 = site_node_0.add_child(site_node_0)
    site_node_0.to_string()


@pytest.mark.xfail(strict=True)
def test_case_46():
    bool_0 = True
    site_node_0 = module_0.SiteNode(bool_0)
    var_0 = site_node_0.to_string()
    assert var_0 == "True\n"
    merge_dict_0 = module_0.MergeDict(*var_0)
    assert merge_dict_0.dicts == ("T", "r", "u", "e", "\n")
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_1 = multi_value_dict_0.copy()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_1) == 0
    var_2 = var_1.update(var_1)
    var_3 = module_1.BaseException()
    var_1.update(merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bool_0 = True
    site_node_0 = module_0.SiteNode(bool_0)
    var_0 = site_node_0.to_string()
    assert var_0 == "True\n"
    merge_dict_0 = module_0.MergeDict(*var_0)
    assert merge_dict_0.dicts == ("T", "r", "u", "e", "\n")
    merge_dict_1 = module_0.MergeDict(*var_0)
    assert merge_dict_1.dicts == ("T", "r", "u", "e", "\n")
    var_1 = merge_dict_0.has_key(var_0)
    assert var_1 is False
    var_0.getlist(var_0)


def test_case_48():
    local_cache_0 = module_0.LocalCache()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.values()
    var_1 = multi_value_dict_0.__copy__()
    assert len(var_1) == 0
    var_2 = var_0.copy()
    var_3 = var_1.items()
    merge_dict_0 = module_0.MergeDict()
    str_0 = "%}F/"
    dict_0 = {str_0: str_0}
    var_4 = multi_value_dict_0.update(*local_cache_0, **dict_0)
    assert len(multi_value_dict_0) == 1


@pytest.mark.xfail(strict=True)
def test_case_49():
    complex_0 = 1149 + 1218.977081j
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.appendlist(complex_0, complex_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(complex_0)
    assert var_1 == (1149 + 1218.977081j)
    var_2 = multi_value_dict_0.items()
    var_3 = multi_value_dict_0.update()
    var_4 = multi_value_dict_0.setlist(complex_0, multi_value_dict_0)
    var_1.__contains__(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    complex_0 = 1149 + 1218.977081j
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.appendlist(complex_0, complex_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(complex_0)
    assert var_1 == (1149 + 1218.977081j)
    var_2 = multi_value_dict_0.values()
    multi_value_dict_0.update(var_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    local_cache_0 = module_0.LocalCache()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.setlist(none_type_0, none_type_0)
    assert len(multi_value_dict_0) == 1
    multi_value_dict_0.values()


@pytest.mark.xfail(strict=True)
def test_case_52():
    complex_0 = 1149 + 1218.977081j
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.setlistdefault(complex_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(complex_0)
    var_2 = multi_value_dict_0.update()
    multi_value_dict_0.update(var_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    local_cache_0 = module_0.LocalCache()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_1 = module_0.MultiValueDict(local_cache_0)
    assert len(multi_value_dict_1) == 0
    site_node_0 = module_0.SiteNode(local_cache_0)
    list_0 = [multi_value_dict_0, local_cache_0, site_node_0, site_node_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    merge_dict_0.get(merge_dict_0)
