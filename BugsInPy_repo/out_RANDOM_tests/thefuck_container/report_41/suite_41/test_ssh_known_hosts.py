# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import re as module_0
import ssh_known_hosts as module_1
import locale as module_2
import builtins as module_3
import enum as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    set_0 = {var_1}
    module_1.side_effect(set_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1():
    error_0 = module_2.Error()
    module_1.side_effect(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_0.fullmatch(base_exception_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    complex_0 = 852.22003 + 637.81j
    module_0.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "YR?8!pvTPq;:N"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


def test_case_10():
    pass


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    float_0 = 2699.0
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0, bool_0)
    module_1.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    module_0.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    complex_0 = -2381.092616 + 1354.11j
    module_4.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    enum_dict_0 = module_4._EnumDict()
    module_0.split(enum_dict_0, enum_dict_0, flags=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "hV=EndD? "
    var_0 = module_0.escape(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "cz#MRCZOWOll"
    var_0 = module_0.template(str_0)
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"S\x1d%n\xff\xc3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b"\xe2\xe5\xaf\xf7\xb2\xfb\x9f\x17\xa6\xbcn\x9d\x9eH\x93"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    int_0 = 1585
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b"^\xc1\x8f\xc4C\xe3\x7f\xbb{\xb6r"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    bool_0 = True
    module_1.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    dict_0 = {}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    int_0 = -967
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    int_0 = 1428
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    float_0 = 764.599
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b"C\xe2\xa6\xe3){\xb3\xafv\x8c\xe5X\x9f\xfa"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_45():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_47():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    bytes_0 = b"hh\x8b\xa4\x8ac"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    var_0 = module_0.purge()
    var_0.__setattr__(error_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    float_0 = -847.1
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    tuple_0 = ()
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    bytes_0 = b"\xfb\xf4\xab@\x13|e"
    none_type_0 = None
    module_0.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    float_0 = 2426.0
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    list_0 = []
    var_0 = module_0.purge()
    var_0.__repr__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    int_0 = -1790
    int_1 = 1533
    module_0.subn(int_1, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    tuple_0 = ()
    none_type_0 = None
    module_0.compile(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    str_0 = "7&DDCDp]SpRbf\nWT0g"
    bool_0 = True
    module_1.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    bool_0 = True
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    bytes_0 = b"X\xe2p3\xa1m\x8e\x96"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    bool_0 = False
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    complex_0 = -1100.9 - 4528.9657j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    str_0 = "}]-cV{@%\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.fullmatch(list_1, list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_67():
    list_0 = []
    int_0 = -2235
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    int_0 = -1962
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    int_0 = 8129
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    float_0 = -2353.0
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.finditer(set_0, bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    int_0 = -1405
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = "+Wg_$Qc2j"
    module_1.side_effect(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bytes_0 = b"A\xba\xca\xfcQo\xd5\xc2e\xe5\xd69\xcd\x1e\xf7l\x19\xbe.\x14"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    bool_0 = True
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__call__(none_type_0, none_type_0, module=none_type_0, qualname=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    int_0 = 1072
    list_0 = [int_0, int_0]
    module_1.side_effect(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = '\\"|]'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    dict_0 = {}
    error_0 = module_0.error(dict_0)
    complex_0 = -178.288002 + 2759j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    auto_0 = module_4.auto()
    none_type_0 = None
    module_1.get_new_command(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    bytes_0 = b"\xf9\xa0\xf4"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    bytes_0 = b"\xa3\xae\xbe\xff\xde\x1c|{B\xf4gQ\xfae"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    base_exception_0 = module_3.BaseException()
    var_0 = module_0.purge()
    var_0.__delattr__(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    float_0 = -1628.61
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    int_0 = 677
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.fullmatch(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    tuple_0 = ()
    bool_0 = False
    module_0.sub(tuple_0, tuple_0, tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    bytes_0 = b"\xec=\xe0\x0f\xec\xbc"
    var_0 = module_0.compile(bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bytes_0 = b"$g\x93_|\x88\xb5g\xc6\xfd\xb8`\x84.82"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    str_0 = ""
    var_0 = module_0.template(str_0)
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


def test_case_103():
    pass


@pytest.mark.xfail(strict=True)
def test_case_104():
    bytes_0 = b"\x8a~ \x8e\xd0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    bytes_0 = b"\x18\x8b\xad4\xa8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    int_0 = -2446
    dict_0 = {int_0: int_0}
    module_0.split(dict_0, int_0, flags=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    int_0 = -399
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.side_effect(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    str_0 = ""
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    object_0 = module_3.object()
    var_0 = module_0.purge()
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    dict_0 = {}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    exception_0 = module_3.Exception()
    module_1.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    bytes_0 = b"\x9f\xd3\x9a0\x7f"
    object_0 = module_3.object()
    module_1.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    int_0 = 3051
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    int_0 = -3484
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    list_0 = []
    bool_0 = False
    module_0.findall(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    int_0 = -818
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    var_0 = module_0.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    bool_0 = True
    none_type_0 = None
    module_1.side_effect(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    regex_flag_0 = module_0.RegexFlag.MULTILINE
    none_type_0 = None
    module_0.fullmatch(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    float_0 = 2726.755
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    str_0 = "pB+hC`"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    bool_0 = True
    module_1.match(bool_0, bool_0)


def test_case_129():
    pass


@pytest.mark.xfail(strict=True)
def test_case_130():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    list_0 = []
    module_0.match(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    float_0 = -763.32955
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    int_0 = 886
    module_0.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    bool_0 = False
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    int_0 = -4255
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    error_0 = module_2.Error()
    module_4.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    str_0 = "ix"
    var_0 = module_0.compile(str_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    float_0 = 4878.442884
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    str_0 = 'g"QnST?E\x0blj%hdEvfS'
    set_0 = {str_0, str_0}
    module_0.split(set_0, set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    str_0 = "3\\@"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    int_0 = 3890
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    bool_0 = True
    none_type_0 = None
    module_0.subn(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0}
    module_0.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    bytes_0 = b""
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    bool_0 = True
    var_0 = module_0.purge()
    module_0.fullmatch(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    dict_0 = {}
    module_0.Scanner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    float_0 = 1458.0
    module_1.match(float_0, float_0)


def test_case_164():
    base_exception_0 = module_3.BaseException()


@pytest.mark.xfail(strict=True)
def test_case_165():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_166():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    set_0 = set()
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    bytes_0 = b"\x7f\x97|\x9b\xaay\x18m\xb3D\x1f\xf8\xc9( cO"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    float_0 = 139.3956
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    int_0 = -782
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_173():
    str_0 = ".WSW~jz`=\tX@bYdN\x0cWim"
    module_1.match(str_0, str_0)


def test_case_174():
    set_0 = set()
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    int_0 = -1094
    set_0 = {int_0, int_0, int_0, int_0}
    module_4.unique(set_0)


def test_case_176():
    pass


@pytest.mark.xfail(strict=True)
def test_case_177():
    dict_0 = {}
    exception_0 = module_3.Exception(**dict_0)
    list_0 = []
    module_0.Match(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    str_0 = '%K*Fvm!"@q'
    dict_0 = {str_0: str_0}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    str_0 = "F~yh \tst"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    bytes_0 = b"\xa7g"
    module_4.auto(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    enum_dict_0 = module_4._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    bytes_0 = b"\x91"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    str_0 = "RmAUq"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    exception_0 = module_3.Exception()
    str_0 = '"\rn\x0cN}'
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    var_0 = module_0.purge()
    module_4.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    str_0 = "+"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    str_0 = "]BDa='\rQi:"
    dict_0 = {str_0: str_0}
    module_3.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    int_0 = -889
    bool_0 = False
    module_0.fullmatch(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    int_0 = -2246
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    int_0 = 837
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.side_effect(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    none_type_0 = None
    module_4.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    int_0 = -2145
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    float_0 = -306.34
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    int_0 = -2033
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    bytes_0 = b"?\xbf\x13f\xd7\x94"
    module_0.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    dict_0 = {}
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    var_1.__setitem__(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    bytes_0 = b"n\xc5\xac\x8b\xc6\x8c\x0e(c\xe5y$s#\xc4\x98"
    module_0.search(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    error_0 = module_2.Error()
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_0.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    str_0 = "M"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    int_0 = -1948
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    str_0 = "bOJ_-.`r(H|2';"
    error_0 = module_2.Error(*str_0)
    module_0.fullmatch(error_0, error_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    str_0 = "\x0b=K5%!z\t=mc_]4=XmD"
    none_type_0 = None
    module_0.finditer(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    bool_0 = True
    str_0 = "(UEd.-C=[Z|pXfi"
    str_1 = "PA8K_d{[k"
    int_0 = -1181
    int_1 = 1248
    str_2 = "7|ao\n]pO#927{DD4CZo"
    dict_0 = {str_0: str_0, str_1: int_0, str_0: int_1, str_2: str_0}
    module_4.EnumMeta(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    bool_0 = False
    list_0 = [bool_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    error_0 = module_2.Error()
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    str_0 = "G~D#+EaqWeON\r@a"
    module_0.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    error_0 = module_2.Error()
    none_type_0 = None
    module_0.subn(error_0, none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    bytes_0 = b"5\xe4V\xc75\x98\x98\x93\x05\xb9"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    int_0 = 1358
    complex_0 = -94.431217 + 227j
    list_0 = [int_0, complex_0, int_0, int_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    bool_0 = False
    var_0 = module_0.purge()
    module_0.finditer(bool_0, var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    none_type_0 = None
    set_0 = set()
    module_0.subn(none_type_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    list_0 = []
    module_0.match(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    int_0 = -614
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bool_0 = True
    none_type_0 = None
    module_0.compile(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    int_0 = 4360
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    int_0 = 1470
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    int_0 = 426
    bool_0 = False
    tuple_0 = (int_0, bool_0, int_0)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    int_0 = -1140
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_1.side_effect(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    float_0 = 40.6667
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_230():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    int_0 = 2092
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    int_0 = 1264
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    str_0 = "<l_~mk=rtL2VAy"
    var_0 = module_0.finditer(str_0, str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    bytes_0 = b"\xa0\xabW\xc4\xec\x8e\x1d\x9a\xd4\x96\x0f\x0e\xdd\xfb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    str_0 = "TziQ"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    int_0 = -376
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    set_0 = set()
    none_type_0 = None
    module_0.sub(set_0, set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    int_0 = 3440
    list_0 = []
    module_1.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    int_0 = 360
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    var_0 = module_0.purge()
    list_0 = [var_0]
    module_1.side_effect(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    list_0 = []
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    bool_0 = False
    none_type_0 = None
    module_1.side_effect(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    str_0 = "&~RO;es\t\nO"
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    str_0 = "\n{GF!8>bp2Hs"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0, str_0]
    none_type_0 = None
    module_0.compile(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    bool_0 = True
    module_4.EnumMeta(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    float_0 = -2814.14
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    error_0 = module_0.error(list_1)
    module_1.match(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    error_0 = module_2.Error(*list_0, **dict_0)
    module_1.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    bool_0 = True
    set_0 = {bool_0}
    str_0 = "oD0F"
    module_1.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    float_0 = 1345.783614
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    bytes_0 = b"\x9b#\xc9\xcb 6\xbf~>\xcf"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    str_0 = '<JMHW^k\\\t.$-N"X'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    str_0 = "1oIhP?u>Y5=(n\\[8>)<H"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    exception_0 = module_3.Exception()
    module_0.escape(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__len__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    bool_0 = False
    error_0 = module_0.error(bool_0)
    module_1.match(bool_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_272():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    str_0 = '"0):[*b'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    int_0 = -865
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    str_0 = " 'M2@Y\\W"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    none_type_0 = None
    tuple_0 = ()
    module_1.side_effect(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    int_0 = 2907
    none_type_0 = None
    module_0.split(int_0, none_type_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_0.findall(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    float_0 = 1953.0
    list_0 = [float_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    str_0 = "'*EVs:*+\r(V[jk"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    int_0 = 981
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    base_exception_0 = module_3.BaseException()
    module_1.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_290():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    str_0 = ">9i}\x0c!3(U3\r"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    str_0 = "Lk8CTFJ"
    none_type_0 = None
    module_0.compile(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    var_0 = module_0.purge()
    bool_0 = False
    module_1.match(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    bytes_0 = b"\x04\n\xb4\x99\xb7\xcb\xe7j\x0e"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    var_0 = module_0.purge()
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    str_0 = "88DL.#myl! )\nHTK{MT"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    str_0 = " Dd@$Y"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    int_0 = -3360
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (none_type_0, bool_0)
    module_0.search(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    str_0 = ""
    var_0 = module_0.sub(str_0, str_0, str_0)
    dict_0 = {var_0: var_0, var_0: var_0}
    list_0 = [dict_0, str_0, var_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    str_0 = "\x0c]c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    str_0 = "_A1#&?X/r|5JH4"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    bool_0 = True
    bytes_0 = b"\t\x0c\x00+\x7f\xea6\xbe\xbf\x13"
    tuple_0 = (bool_0, bytes_0)
    module_1.side_effect(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    bytes_0 = b'\x83\xdf\xc1\x9c\xe5"\xbb\xea\x9a\xa4\xean\xf6'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    float_0 = 4208.0
    list_0 = [float_0]
    module_0.findall(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    str_0 = "VH}F-}(tgC8y"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    bool_0 = True
    list_0 = [bool_0]
    module_1.side_effect(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    str_0 = "94\tS<\\]$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    int_0 = -327
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    float_0 = 257.1178
    bytes_0 = b""
    dict_0 = {float_0: bytes_0, bytes_0: bytes_0}
    set_0 = {bytes_0}
    module_1.side_effect(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    bytes_0 = b"\xda\x00T\xb5\xcc\xad\xdb\xaf\x00_#j<"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    int_0 = -377
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    list_0 = []
    none_type_0 = None
    module_1.side_effect(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    tuple_0 = ()
    module_0.fullmatch(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    bytes_0 = b"45\xc8\xe5\xc5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


def test_case_331():
    pass


@pytest.mark.xfail(strict=True)
def test_case_332():
    str_0 = "_b*={6&rwKio$~/4u^#("
    module_0.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    int_0 = -675
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    bytes_0 = b"\x86\xb9{"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.side_effect(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    int_0 = -1352
    dict_0 = {int_0: int_0, int_0: int_0}
    str_0 = '"[ EJmE"2<4v~ze5'
    tuple_0 = (dict_0, str_0)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    set_0 = set()
    none_type_0 = None
    module_0.findall(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bool_0 = False
    list_0 = [bool_0]
    error_0 = module_2.Error(*list_0)
    str_0 = "m<?"
    dict_0 = {str_0: error_0, str_0: list_0, str_0: list_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    str_0 = "NItAbI{$bc}*<"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    bytes_0 = b"{e\x89\xf4\xb0\xa06w\xd3@c\x9eI\xc0\xaf\x0b?\x9f,"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    var_1 = module_0.escape(var_0)
    module_1.side_effect(var_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    float_0 = 2966.616
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    none_type_0 = None
    module_0.template(none_type_0)


def test_case_344():
    pass


@pytest.mark.xfail(strict=True)
def test_case_345():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    str_0 = ",'\x0cF\\MdN2OU@~3"
    set_0 = {str_0, str_0}
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    str_0 = ""
    list_0 = [str_0]
    list_1 = [str_0, list_0]
    str_1 = "*"
    module_1.match(list_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_348():
    exception_0 = module_3.Exception()
    error_0 = module_0.error(exception_0)
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    bytes_0 = b'\xad\xa9\xe5\xa4\xd3|\t\x87\x1ds"z\xddm\xf8\x06\xef\x84'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    set_0 = set()
    module_0.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    int_0 = -328
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    var_0 = module_0.purge()
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    bool_0 = True
    int_0 = 2445
    module_1.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    int_0 = -935
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    list_0 = []
    module_0.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_1.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_362():
    complex_0 = -312.0031 + 286.69j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    bool_0 = True
    none_type_0 = None
    module_0.split(bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    float_0 = 333.722
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    list_0 = []
    module_4.EnumMeta(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    bytes_0 = b")\xa7e\xe4r\x80\xe5\xe7\xdc\xf0\x02=3\xe6\x80\x0b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    int_0 = -810
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    complex_0 = -1228.92 - 2639j
    none_type_0 = None
    module_0.subn(complex_0, none_type_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    float_0 = 1301.3284
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    bool_0 = False
    list_0 = [bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bytes_0 = b"\x9bs^%\xdc\x1f{\xf8W3n\xcb\xd0\x99"
    var_0 = module_0.template(bytes_0)
    set_0 = {var_0, var_0}
    module_1.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    str_0 = "o)\rUmZ^9HWypja"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    list_0 = []
    object_0 = module_3.object(*list_0)
    module_1.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    int_0 = -906
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    bytes_0 = b"\x02\x12\xf9\xbf\xa8P\xb3\xd3C\x814h\xba\xb1O\xc1\x9e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0]
    module_1.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    int_0 = 1869
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    bytes_0 = b"\xfe\x1aM\xd0\xb6m\xa6u\x00\x1e\xf5\xcf\x83\x86\x9f\xed"
    list_0 = [bytes_0, bytes_0]
    module_1.side_effect(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    str_0 = 'h(*qgSHDapKda";'
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    str_0 = ">$?F=*/lQ`]-H"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    float_0 = -721.1631
    var_0 = module_0.purge()
    module_1.get_new_command(float_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    bytes_0 = b"=0\xf8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    bool_0 = True
    module_0.Scanner(bool_0)


def test_case_395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_396():
    complex_0 = 3506.6638 - 1338.52j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.fullmatch(none_type_0, dict_0)


def test_case_402():
    bytes_0 = b"\xfe\x85'"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    var_1 = var_0.__dir__()


@pytest.mark.xfail(strict=True)
def test_case_403():
    bool_0 = True
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    str_0 = "[i8/a]F2"
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    str_0 = "u.\\$_sp`IF(G1;Lq\x0c"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bytes_0 = b"\x17Uz\x19\xc5\xfdo\xcd\xe7\\\x84\n\x8b :\xd1\x1e\xa2"
    var_0 = module_0.template(bytes_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_408():
    str_0 = "\n}1"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    bool_0 = True
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    complex_0 = 3249.9 + 761j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    dict_0 = {}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    complex_0 = -148.5 + 3977j
    none_type_0 = None
    module_0.findall(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    exception_0 = module_3.Exception()
    module_1.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    var_0 = module_0.purge()
    module_0.Scanner(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    str_0 = "H<i4c\\20*="
    str_1 = "y[HwaY1_ ;"
    int_0 = 6
    dict_0 = {str_0: str_0, str_0: str_0, str_1: int_0}
    module_3.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    base_exception_0 = module_3.BaseException()
    module_1.side_effect(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    bytes_0 = b"\x15"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    int_0 = -1493
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    float_0 = 49.49912
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    module_1.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    int_0 = 959
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    int_0 = 985
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    str_0 = "GrC\nCB=\\}sH*'/"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    dict_0 = {}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    complex_0 = -1978.97 + 89.3458j
    module_0.template(complex_0)


def test_case_432():
    pass


@pytest.mark.xfail(strict=True)
def test_case_433():
    int_0 = 792
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    bytes_0 = b"\xc5O^\xdd\xc6\xacs\x9e'`"
    tuple_0 = (int_0, var_1, var_0, bytes_0)
    module_1.side_effect(tuple_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_434():
    bytes_0 = b"\xb3\x16\xc4\x9e\xd1h\xbc\x95\x84\xb6bTv\x7f\xdb[\xb6\x8f"
    none_type_0 = None
    module_0.sub(bytes_0, none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    bytes_0 = b"\xb2gg\xa5W\x8c\xbbN\xfd\xc2\x9fX"
    var_0 = module_0.template(bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    str_0 = "\\r.@A0*l\x0cV3`okh"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    bytes_0 = b"\xce\x9f\xc9QG\xf5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    str_0 = ""
    str_1 = "\x0bg4F!&HW:z3d<WiD3b/O"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bytes_0 = b"v\xb2\x82OPK\xabM\xe4,\xe6w22\xd1\x8bb\x04,\xad"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_0.match(var_0, bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    tuple_0 = ()
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    int_0 = 810
    module_0.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    str_0 = 'owl"\\GE@L6\x0b>'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    str_0 = "0n/"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    list_0 = []
    exception_0 = module_3.Exception(*list_0)
    module_1.match(exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    complex_0 = 479.575736 + 1822.0025j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    var_0 = module_0.purge()
    int_0 = 45
    str_0 = "\x0cl-Uh!{_"
    tuple_0 = (int_0, str_0, int_0)
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    bytes_0 = b"\xb4\xca\xff\xa2\x97\x18Nu]8\x1fi\xdb\xba\xbd\xc6B"
    module_0.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    bytes_0 = b"b"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    str_0 = "TMp.\trTjw"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    complex_0 = -2577 + 1006.44j
    none_type_0 = None
    module_1.side_effect(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    float_0 = -1398.97
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    str_0 = "\\8/I"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    int_0 = -998
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    object_0 = module_3.object()
    module_1.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    str_0 = "mfh,\\r2\r_N1"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    str_0 = " bhpiSGlP%\rB/n/y@nD"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    str_0 = "0^T+%\x0cd@B6M"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    str_0 = "Ee&9d<)D)x"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    int_0 = 808
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    int_0 = -1321
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    str_0 = "~r4>\tr2j=JA`LPWdqh "
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    int_0 = -945
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    int_0 = -617
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    var_0 = module_0.purge()
    float_0 = -2669.59137
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    float_0 = -458.1
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    str_0 = "/'H:^_j+}?h\x0bw6L"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    str_0 = "p;5F2vE"
    none_type_0 = None
    module_0.subn(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    str_0 = ""
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    str_0 = "O@\nR("
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    bool_0 = False
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    int_0 = 204
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.side_effect(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bytes_0 = b"\xb8t\xf0I\xecI\x99#\xb5\x89\xc1"
    str_0 = ",t@"
    dict_0 = {bytes_0: str_0}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: dict_0}
    module_1.side_effect(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    int_0 = 584
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    int_0 = 1901
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    int_0 = -571
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    bytes_0 = b"$"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    none_type_0 = None
    module_1.side_effect(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    float_0 = 1395.17
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    str_0 = "R=<\ntW`ao3S3?O^IqB"
    module_0.Scanner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    bool_0 = False
    none_type_0 = None
    module_0.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    int_0 = 339
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_1.get_new_command(none_type_0, set_0)


def test_case_506():
    dict_0 = {}
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    with pytest.raises(AttributeError):
        var_1.__getattr__(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    bytes_0 = b"W-\xc2\x1dV\xd7\x94\xef\xb5\xe3\xd8E\x95\xfc."
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    int_0 = -2152
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    bytes_0 = b""
    none_type_0 = None
    module_0.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    float_0 = 611.852902
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    bytes_0 = b"\xb0\xf9\xce\x9e\xfb\xebo\xa9\xdf\xd99\xc6\xb5\xc7'G\xe9\x90\""
    module_0.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    str_0 = "gj`4^,J-cS"
    set_0 = {str_0, str_0, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    int_0 = 608
    bool_0 = False
    bytes_0 = b"E\xf7\xf7_\xa7\x04\xda7\x13\xb1\xeah\x04\xb7"
    tuple_0 = (int_0, bool_0, bytes_0, int_0)
    list_0 = [tuple_0, int_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    bytes_0 = b"\xf4T\x95"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    base_exception_0 = module_3.BaseException()
    module_4.unique(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    float_0 = 1876.1
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    int_0 = -1371
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    int_0 = 2063
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    float_0 = -3703.5764
    set_0 = {float_0}
    module_1.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    int_0 = -622
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    int_0 = 2230
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    str_0 = "icqSufy,1R<QKk\tF#H"
    module_0.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    bytes_0 = b"\xfb\xc2J\xdel)\xdc\xde\x06\xa2\xf0hy\xcf\x03{"
    module_0.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    str_0 = "7SJ=P]+6y7/%p|V6Y<$"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    str_0 = "c;q"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_540():
    bytes_0 = b"d\x18=kdZM\xf5\xc5\xba\xcaZ\xfdX\x95t\xcd"
    var_0 = module_0.search(bytes_0, bytes_0)
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    bytes_0 = b'{\xc9\xad\xa9dD\xf9\x08\x91"-\x12:\xe8'
    dict_0 = {bytes_0: bytes_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    set_0 = set()
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    bytes_0 = b"j\xfd\xee\x04U\x18\xe7m"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    float_0 = -3425.98
    none_type_0 = None
    module_0.finditer(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    tuple_0 = ()
    module_0.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    bytes_0 = b"\xb5q\x05\xff\x99\xcb \xc4Y`"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    str_0 = "CSRE*'XACi|'v}(I"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    int_0 = -5225
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    bytes_0 = b"Ze\xf1I\xa1\x18#\xfe\xf7\x8d"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    int_0 = 1457
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    float_0 = -148.38
    none_type_0 = None
    module_0.fullmatch(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    auto_0 = module_4.auto()
    module_1.side_effect(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    bool_0 = False
    set_0 = set()
    module_1.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    float_0 = 1664.0
    str_0 = "U"
    module_1.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    bytes_0 = b"\xa7t\xe1v"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    var_0 = module_0.purge()
    bytes_0 = b"\xbcU\x17v5\xa1>\xab~\x1f$}a\x00E"
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    str_0 = "iK\\|uU!dy=[1\\q\\\x0bq5N"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    int_0 = 1747
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    complex_0 = -1586.43 + 3654.913681j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    float_0 = -5487.0214
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_567():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    float_0 = 1275.14
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    str_0 = "wS,"
    none_type_0 = None
    str_1 = "u5RN7s UI@lR`\rUUz"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    complex_0 = -2667.63061 + 2707.063759j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    bytes_0 = b"-\xcd\xe6\xccZ\x84"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    int_0 = 1430
    list_0 = [int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    bool_0 = False
    none_type_0 = None
    module_1.side_effect(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    int_0 = 1073
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    bytes_0 = b">\x0b\xd7\xd1\x16\xbd\xad\x9bh\xc4\xb2\xedeA\x0c"
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    int_0 = 1882
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    list_0 = []
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    str_0 = "exz+&MOZ"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    bool_0 = False
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    bool_0 = False
    bool_1 = True
    module_1.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_584():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    int_0 = 3371
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    str_0 = "3QEQPU-'BR"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    str_0 = ""
    none_type_0 = None
    module_0.finditer(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    float_0 = 616.57
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    str_0 = "Ty#"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    float_0 = -1370.89
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    complex_0 = 2213.6 - 3149j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    bytes_0 = b"\x87\xf1\x97U"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    var_0 = module_0.purge()
    module_0.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    none_type_0 = None
    bytes_0 = b"qc\x03?.\x8e\xc8\x9a\xd8Gi"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    bytes_0 = b"\x95G@\x9b\xa1\xd3\xa0J\xf2\xcf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    bytes_0 = b"}\x1d"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    none_type_0 = None
    module_1.side_effect(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    bytes_0 = b"\xbe\xd4\x85\xf9\x9cj\xc0\x0cU\xd9\xe5\xe6\xf7\x01"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    int_0 = -166
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    bool_0 = True
    module_0.Match(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    str_0 = "C-~~\n[;rm"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    bytes_0 = b"@sI\xe2\xc8\x1f\xd6\xa6\xd1\xfe\xdf\xc4\x07\xa8\xc8\x95"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    int_0 = -1234
    var_0 = module_0.purge()
    var_0.__setitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    str_0 = "\nnc"
    list_0 = [str_0, str_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    int_0 = 2954
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    str_0 = "3%_w+"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_0.finditer(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    auto_0 = module_4.auto()
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    int_0 = 301
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    str_0 = "LV)%"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    float_0 = 3270.982
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    str_0 = "^w6\x0b_,*nsjQtfm\\b"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bytes_0 = b"\xb7\xcd\x11?\xf5\x17p\xd0oq\x19Uz\xfc\xa4 Cm\xdb"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    float_0 = -1135.036
    none_type_0 = None
    module_0.findall(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    dict_0 = {}
    none_type_0 = None
    module_1.side_effect(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    dict_0 = {}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    bytes_0 = b"\x19q"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    int_0 = 1759
    dict_0 = {}
    module_1.side_effect(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    var_0 = module_0.purge()
    module_0.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    bool_0 = False
    module_0.compile(bool_0)


def test_case_635():
    bool_0 = False
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    int_0 = 1519
    none_type_0 = None
    module_0.match(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bytes_0 = b"\xaef\x11\xa1ob!cXp\\.\xee\x18\x07\xfa0"
    var_0 = module_0.escape(bytes_0)
    list_0 = []
    module_0.findall(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    int_0 = 1071
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    bool_0 = True
    error_0 = module_0.error(bool_0, bool_0)
    module_4.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    int_0 = 218
    module_1.match(int_0, int_0)


def test_case_641():
    bool_0 = True
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, bool_0, bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    bytes_0 = b"te'`\xf8\\\xfdR\xe2\x81\x9e"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    none_type_0 = None
    float_0 = -776.743
    module_0.finditer(none_type_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_650():
    str_0 = "%$.YoF&O&"
    set_0 = {str_0, str_0}
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    str_0 = "Lx2Tc=wT0"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    exception_0 = module_3.Exception()
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_655():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    list_0 = []
    bool_0 = True
    module_1.side_effect(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    int_0 = -5259
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    enum_dict_0 = module_4._EnumDict()
    module_1.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    var_0 = module_0.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    bool_0 = True
    int_0 = 812
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    bytes_0 = b"\x0b\xda~\xb8\x952[\xea\xe6R"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    float_0 = -3709.733
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    int_0 = 2236
    error_0 = module_0.error(int_0, int_0)
    none_type_0 = None
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    int_0 = 340
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    float_0 = -2581.7634
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    int_0 = 1013
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    int_0 = 2315
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    bytes_0 = b"E\x03\x94:K \xb0\xdd\xc6\xbb\x07\xab\xa1V"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    float_0 = -1900.187035
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    int_0 = 28
    none_type_0 = None
    module_0.split(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    str_0 = "f|#6l|*CO#R`QoV{+"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    float_0 = 2584.184
    int_0 = 1371
    tuple_0 = (float_0, int_0)
    module_1.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    none_type_0 = None
    module_3.BaseException(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    float_0 = -2423.86863
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    float_0 = 3184.143466
    list_0 = [float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    int_0 = 936
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    float_0 = 762.367
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bytes_0 = b"e'[\xb0\x7fW"
    complex_0 = 3745.703 - 502.04j
    module_1.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    dict_0 = {}
    float_0 = 2059.3138
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    error_0 = module_2.Error()
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_1.match(error_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    list_0 = []
    str_0 = " RCg\x0c1+"
    str_1 = "cPa\n_)<P|(Ed."
    str_2 = "AV#llL\"% '<[Dur"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_4.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    int_0 = 2630
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    bytes_0 = b"q\x0b]\xa7\xd6\x8a\xed\x94\x01\xde\xb1Tl\x8b\xd2\xd8\xd1\xa1"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    str_0 = ""
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    bytes_0 = b"\xf1\x1f-i\x03\xf9\xa86{A"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    float_0 = -1956.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.subn(set_0, set_0, set_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    bool_0 = True
    enum_dict_0 = module_4._EnumDict()
    enum_dict_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    int_0 = 232
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    str_0 = "bq="
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    str_0 = "v7X7ja;)*,8m"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    exception_0 = module_3.Exception()
    dict_0 = {
        exception_0: exception_0,
        exception_0: exception_0,
        exception_0: exception_0,
        exception_0: exception_0,
    }
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    int_0 = -1745
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    error_0 = module_2.Error()
    module_0.fullmatch(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    str_0 = "y>9"
    bool_0 = True
    module_1.get_new_command(str_0, bool_0)


def test_case_706():
    pass


@pytest.mark.xfail(strict=True)
def test_case_707():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    bytes_0 = b"\xef\x91\xab\xaa\x91\xac\rU\x9c\x9a\xec"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    list_0 = []
    error_0 = module_2.Error(*list_0)
    module_4.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    str_0 = "<\x0b(35,(\x0bS@\reD"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    complex_0 = -3241.341636 - 1093.242086j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    str_0 = "\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    int_0 = 523
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    enum_dict_0 = module_4._EnumDict()
    str_0 = ""
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    bytes_0 = b"\xf3\x0e\x99\xdde\xdd\xe4\xcc\xc4\xd8)>7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    bytes_0 = b"f&\xe8\x8b69?J\xdf\x9c\x8cy"
    none_type_0 = None
    module_0.findall(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    str_0 = '3"m'
    set_0 = {str_0, str_0, str_0}
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    str_0 = "cQumee=9(L."
    module_0.Pattern(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    float_0 = -208.9
    object_0 = module_3.object()
    module_0.match(float_0, object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    var_0 = module_0.purge()
    bytes_0 = b"\x044\x94m\xf2"
    set_0 = {bytes_0}
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    float_0 = 2068.396
    list_0 = [float_0, float_0, float_0]
    module_0.sub(list_0, float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    str_0 = "[o>Pt7;!*#z S"
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    bytes_0 = b"\x10\xbc\xb8\xd3t\xd3\xc5\x1f}\x0f"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    str_0 = "WK3OFbnt\tLWq;"
    module_0.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    int_0 = -1104
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_1.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_730():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    list_0 = []
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    str_0 = "+jBJ`6'Q#&Y\x0cC-\t$(\r]"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    str_0 = "E$',EvIN`w\x0c!{}\"F"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    list_0 = []
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    bytes_0 = b"\xd9?\x8c\xd7\xe6\x08Z"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    str_0 = "z(n"
    module_0.subn(str_0, str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    str_0 = "^u$lj7B\nbXIvs@HCJZc"
    var_0 = module_0.compile(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    enum_dict_0 = module_4._EnumDict()
    str_0 = "E\\F\x0cA(Xq2ae:<1'#Y<="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    bool_0 = True
    none_type_0 = None
    module_0.split(bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    bytes_0 = b"|\x85\x87\xb3\xf7LbRO\x8c\xffz\x1e]\x85ar3\xf6%"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    bytes_0 = b"\x12'\x08\xa4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.findall(none_type_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    bool_0 = True
    error_0 = module_0.error(bool_0)
    dict_0 = {error_0: error_0}
    module_0.search(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    none_type_0 = None
    str_0 = "\tWDQq!"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    str_0 = "9>TY"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, flags=bool_0)


def test_case_753():
    pass


@pytest.mark.xfail(strict=True)
def test_case_754():
    int_0 = 3791
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.subn(set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    float_0 = 1888.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    bytes_0 = b"\xc9l48\x02\x1c\xfd\x1d\xd7\xcf\\\xc6\x98\xa9\x14\x0c\xd3\x9dG"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    float_0 = 2259.069299
    var_0 = module_0.purge()
    var_0.__iter__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    str_0 = "Am;Gg%}>Ib.^tTeM~;p"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_1.side_effect(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_1.match(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    str_0 = "l^.pqTA4$v ?"
    tuple_0 = ()
    list_0 = [str_0, tuple_0, tuple_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    str_0 = '@=Y7y^M"}h%[akSt(_'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    dict_0 = {}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    int_0 = 35
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    bytes_0 = b"s\xee\xcf\x98\xeb\x8e"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    list_0 = []
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    complex_0 = -388.306832 + 3026.87j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    bool_0 = True
    bytes_0 = b"\xb2\xdd\x89\xd9"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    var_0.__getitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    int_0 = -435
    var_0 = module_0.purge()
    var_0.__setattr__(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    str_0 = "L+1&O"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    str_0 = "[|\\ZD4py_E."
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    complex_0 = 1392.2718 - 17.5j
    module_0.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    int_0 = 2256
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    int_0 = 918
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    str_0 = "I#jmW!"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    bytes_0 = b'Kvv"\x1c\xc1\\'
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    dict_0 = {}
    exception_0 = module_3.Exception(**dict_0)
    module_1.get_new_command(exception_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    int_0 = 877
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    int_0 = 227
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    bytes_0 = b"\xf9\xd7)\xf3\xa9\xc6\xb2t\xe8\x05\xb274/\xbb\xb5\xec&\x11"
    module_0.error(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    var_0 = module_0.purge()
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    int_0 = 2684
    module_0.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_797():
    str_0 = "hm@~T<YA0\n-R>"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    int_0 = -1245
    dict_0 = {int_0: int_0}
    module_1.side_effect(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    float_0 = 902.0
    module_2.Error(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    str_0 = "]r\x0cL5zD40P+.L\\TEM"
    module_0.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    bytes_0 = b""
    var_0 = module_0.escape(bytes_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    float_0 = 3206.79132
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    none_type_0 = None
    bool_0 = True
    module_0.split(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


def test_case_807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_808():
    float_0 = -238.0
    error_0 = module_0.error(float_0)
    none_type_0 = None
    module_1.side_effect(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    bytes_0 = b"#\xdc-\x0e\x06]\x98\xf1.\x1b$|"
    var_0 = module_0.compile(bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    int_0 = 2538
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    dict_0 = {}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    complex_0 = 2249.8403 + 204.7794j
    tuple_0 = ()
    module_1.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    float_0 = 3308.592164
    set_0 = {float_0, float_0, float_0}
    module_0.search(float_0, set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    int_0 = 1355
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    list_0 = []
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    error_0 = module_2.Error()
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    float_0 = -1226.8
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    none_type_0 = None
    complex_0 = 1783.865 + 2365j
    module_0.subn(none_type_0, none_type_0, none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    str_0 = '7q6|@;H"zv\x0c.a'
    none_type_0 = None
    module_0.subn(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    bytes_0 = b"\xf4\xc4\xfa\xde=h%\x801\x86'M\xc5X\xa4\x1ew"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.side_effect(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {bool_0: list_0}
    module_1.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    set_0 = set()
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    float_0 = 1092.1
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_0.finditer(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    str_0 = "PO,~ht`3Xn)S&"
    list_0 = [str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    none_type_0 = None
    module_0.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = -3565
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    int_0 = -729
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    str_0 = "an@8~7"
    str_1 = 'G?"'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bytes_0 = b"\xde:\xcd\xa7\x137\xdc\xb5\x04\x06"
    set_0 = {bytes_0, bytes_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    int_0 = -182
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    list_0 = []
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    bytes_0 = b"\xac< \xff\xea"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    bytes_0 = b"E\xeb"
    module_0.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    bytes_0 = b""
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    bool_0 = True
    list_0 = [bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    bytes_0 = b"M\x07x\xcah\xc5\xaf\xbc\x06\x96\xa68W"
    var_0 = module_0.compile(bytes_0)
    none_type_0 = None
    list_0 = [none_type_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    bytes_0 = b"\x1c\xc9\x91D\xaf\xe0)9>\xdet\x87\xa2\x000\xfb\x14"
    str_0 = "\x0c\x0ck}I7"
    module_0.split(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    float_0 = 1739.423
    module_0.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    int_0 = -2401
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    str_0 = "q\x0b)F\n*x0"
    str_1 = "u0'HK]|^i8/G'\"(L"
    str_2 = "uWZqt~RP~D"
    var_0 = module_0.template(str_2)
    str_3 = "<X_"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: var_0, str_3: str_3}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    str_0 = "Go;Q"
    str_1 = " wJdIqI"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    str_0 = "X6pB'08"
    none_type_0 = None
    module_0.subn(str_0, str_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    complex_0 = -927 - 2280.1333j
    module_0.Scanner(complex_0)


def test_case_860():
    bool_0 = True
    dict_0 = {}
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, bool_0, bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bytes_0 = b"\x86H.F\xcd\xc2\x9a\x16\x94\xc4\x7f\xa7\x17\r\x0b\xf9\xcfu\xdfv"
    none_type_0 = None
    str_0 = "G/+bMF85k"
    var_0 = module_0.fullmatch(str_0, str_0)
    var_0.__call__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    float_0 = 844.2
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    float_0 = 628.181
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    complex_0 = 401 + 2440.5j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    bytes_0 = b'((\xb8F\x92Ej\x07\x06"\x9d\xf5l1\xa7~\x96'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bytes_0 = b"\xc60\x19\x1b\xff\x03"
    int_0 = 2421
    module_1.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    int_0 = -1400
    bytes_0 = b"\r"
    none_type_0 = None
    module_0.subn(bytes_0, none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    module_4.EnumMeta()


def test_case_877():
    pass


@pytest.mark.xfail(strict=True)
def test_case_878():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    str_0 = ",k x?"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    str_0 = 'V:LL"0pgA3/\x0c'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_883():
    bytes_0 = b"R\xa0\x9b\x18\xdaB1\xbc\n\xfdM"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    int_0 = -3447
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    int_0 = 1499
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    str_0 = "\r#\n.ib.n5"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    float_0 = 68.87454
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    set_0 = set()
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    str_0 = "iB<=yvW\x0b5%e}\rD~<d%"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    auto_0 = module_4.auto()
    module_1.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    float_0 = -619.849
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    float_0 = 1805.216018
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


def test_case_898():
    pass


@pytest.mark.xfail(strict=True)
def test_case_899():
    str_0 = ",?\x0c"
    module_1.get_new_command(str_0, str_0)


def test_case_900():
    pass


@pytest.mark.xfail(strict=True)
def test_case_901():
    float_0 = 646.903162
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    float_0 = -899.8
    module_0.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    int_0 = -484
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    str_0 = "OT8;{'+u1#Yz|1u^{Q}l"
    set_0 = {str_0}
    module_1.match(set_0, str_0)


def test_case_905():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_907():
    int_0 = -495
    str_0 = "h2o{gNn(_\x0cW(\x0cw"
    dict_0 = {str_0: int_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    dict_0 = {}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    str_0 = "X.fxB1clzf\x0b"
    bool_0 = False
    module_1.side_effect(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"\xbe\x9e\xfa]@\xfeb\xf9Cb="
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    complex_0 = 33.7 - 290.364j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_1.side_effect(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    int_0 = -47
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    float_0 = 1127.5403
    bytes_0 = b"\x00\n\xee\xfa\xab"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.__len__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    exception_0 = module_3.Exception()
    module_1.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    bool_0 = False
    module_0.compile(bool_0)


def test_case_919():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    bytes_0 = b"\xc0\x866%\x1cDT\x16\xfa\xfbJ\xacy\x0c\x1b"
    module_0.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    int_0 = -1942
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__contains__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    none_type_0 = None
    bool_0 = False
    module_1.side_effect(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    str_0 = "%:o YY(!!by`$"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    int_0 = 1098
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "B9M"
    var_0 = module_0.fullmatch(str_0, str_0)
    list_0 = [str_0, var_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    bytes_0 = b"\xaa\xc3"
    str_0 = "0@Ry\x0bc"
    dict_0 = {bytes_0: str_0}
    none_type_0 = None
    module_0.sub(dict_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    int_0 = -2254
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    exception_0 = module_3.Exception()
    module_1.side_effect(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    var_0 = module_0.purge()
    module_0.findall(var_0, var_0)


def test_case_935():
    list_0 = []
    str_0 = "nfS\x0b"
    var_0 = module_0.sub(str_0, str_0, str_0)
    with pytest.raises(TypeError):
        var_0.__new__(list_0, list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    auto_0 = module_4.auto()
    complex_0 = -1872.959 + 119.7j
    module_0.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    bool_0 = False
    list_0 = [bool_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    list_0 = []
    module_0.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    int_0 = 2348
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    int_0 = 381
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    float_0 = 3758.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    bytes_0 = b"\x0f\x8a\xa5\x8et;\xbc\x1d\x11\xaa\x13D\xfd"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    complex_0 = -887.445 + 512.9j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    int_0 = 1276
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    bytes_0 = b"\xed\xfb\x9dx\x98\xb5\x143\x97\x14"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    none_type_0 = None
    bool_0 = False
    module_1.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    int_0 = -3014
    module_0.escape(int_0)


def test_case_953():
    pass


@pytest.mark.xfail(strict=True)
def test_case_954():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    bytes_0 = b"N\xecm!A\x13\xa1\xdd\xa9d"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    str_0 = "\x0c|FrM}w{"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    complex_0 = 1502 - 2773.645j
    list_0 = [complex_0, complex_0, complex_0]
    str_0 = 'y9V"qH@'
    dict_0 = {str_0: complex_0, str_0: str_0}
    module_2.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    float_0 = -331.594
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    str_0 = "t\tt,9U?e({r<wT:u}\t"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bytes_0 = b"\xf1\xf2V:\x02W\x89"
    module_1.side_effect(bytes_0, bytes_0)


def test_case_970():
    pass


@pytest.mark.xfail(strict=True)
def test_case_971():
    bytes_0 = b"Pgs\xdctwn\x15\x98\x19\x1b\x12*\x90\xc9\xf2\xb8J\x88"
    error_0 = module_0.error(bytes_0)
    error_1 = module_0.error(error_0)
    module_0.compile(error_1, error_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_973():
    str_0 = "6KD!"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    error_0 = module_2.Error()
    none_type_0 = None
    module_1.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    int_0 = -2687
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    none_type_0 = None
    module_0.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    bytes_0 = b"\x13\xeemn\xea\xbb\xad1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    bytes_0 = b">\xccz\x9e\x12"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    str_0 = "-//9/"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    list_0 = []
    module_0.finditer(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    complex_0 = -2537.70748 - 149.6j
    module_0.sub(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    str_0 = "heY0\ncVS/l7JH_:*3EU"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    bytes_0 = b"\x18\xbd"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    str_0 = "%gf%\\"
    var_0 = module_0.escape(str_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    float_0 = -3847.60771
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    str_0 = '<lX<ybyK"=r-[u\n.hdi'
    var_0 = module_0.escape(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    str_0 = 'Jff!M"8ZBZ[O'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    int_0 = -3
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    str_0 = "HV$d~Wn<T!#{j5uQ"
    none_type_0 = None
    module_0.split(str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    bytes_0 = b"?\xbe\xa6\x12\xffy\xd8:\x01"
    none_type_0 = None
    module_0.match(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    list_0 = [var_1, var_1]
    module_0.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    int_0 = 3812
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    bool_0 = True
    none_type_0 = None
    module_0.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    str_0 = "|\x0cFc:;)"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    float_0 = -1615.2
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    int_0 = -2256
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.fullmatch(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    str_0 = "SO.ePhY>{"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    int_0 = -1479
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    bytes_0 = b"\xdbG\t\xaf+s\xf3u\x05\xb0\x92\xd5\xaa\xfd"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1017():
    complex_0 = -51.37184 + 3562.36j
    set_0 = {complex_0, complex_0, complex_0}
    module_1.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    float_0 = 2477.99
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    str_0 = "8iZ <iM\n"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    str_0 = "\r"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    bytes_0 = b"#p\xa6q\xb5\xb8\xc8c\xe6\xb0\xdc\x12;5\x16"
    none_type_0 = None
    module_0.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    bytes_0 = b"\xa1Du\xc1l)y"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    str_0 = "Z}Ki\tCD.`|2T"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    int_0 = 2593
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    int_0 = -916
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    bytes_0 = b"\xc3\x87\xde\xaa\xecET\xedr-\x98\x0f\x87r\xe7i!\xecn~"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bytes_0 = b"\x1c*\x0b\x83\x9b\xb7\r"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    str_0 = "@C?\\gU"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    float_0 = -1626.08667
    none_type_0 = None
    module_0.match(none_type_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    bytes_0 = b"\x85V\xd3*\x11&\xaf\xf4\xad\xea\x14\x8f\xab0e\xca"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bool_0 = True
    bytes_0 = b"\x1a\xd8\xabo\xeb\x92\xc94d@:\x8b&T\xb6"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    none_type_0 = None
    bytes_0 = b"j\x9b\x0eX\x88\xe2\x99\xe7"
    var_0 = module_0.findall(bytes_0, bytes_0)
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    complex_0 = 110.1936 - 1515.9j
    none_type_0 = None
    module_0.finditer(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    regex_flag_0 = module_0.RegexFlag.MULTILINE
    module_1.side_effect(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    str_0 = "C\t"
    var_0 = module_0.escape(str_0)
    module_1.side_effect(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    none_type_0 = None
    var_0 = module_0.purge()
    module_0.search(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    int_0 = 1954
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1048():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    var_0 = module_0.purge()
    list_0 = [var_0]
    exception_0 = module_3.Exception(*list_0)
    none_type_0 = None
    module_1.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    auto_0 = module_4.auto()
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1052():
    float_0 = -555.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_1.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bytes_0 = b"?1"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    float_0 = 1643.196166
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    none_type_0 = None
    bytes_0 = b"\x1f\x98\x0f5\xdah\xedv!\xa4"
    var_0 = module_0.compile(bytes_0)
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    int_0 = -581
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    str_0 = "\x0b^FMOI><kYiXpeE0U"
    none_type_0 = None
    module_0.subn(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    int_0 = -483
    error_0 = module_0.error(int_0)
    module_0.sub(error_0, error_0, int_0, flags=error_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    list_0 = []
    error_0 = module_0.error(list_0)
    module_1.match(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    int_0 = 279
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bytes_0 = b"\\"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    str_0 = "V>W-7'2J5@yf\x0c10"
    none_type_0 = None
    module_0.split(str_0, none_type_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    none_type_0 = None
    str_0 = "W S>NDW:|0_cQ?%:Sr~c"
    module_1.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    float_0 = -2027.966
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1070():
    float_0 = -369.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    list_0 = []
    module_0.search(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    bytes_0 = b"\x9b/\xe90\x13\x92\x1c\x06f\xfe;\xe19\xb2\xad"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    str_0 = "{|npIJ!\x0c,xW#DxI6yq:'"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    float_0 = -799.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    bytes_0 = b"&\x9a\xf3\xaa|L<"
    none_type_0 = None
    module_0.split(bytes_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    bytes_0 = b"\xf2p\xea\xc2C\x031\x17\xc2"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_0.search(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    int_0 = 2524
    none_type_0 = None
    module_0.subn(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    int_0 = -1747
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    base_exception_0 = module_3.BaseException()
    module_0.split(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    int_0 = 2187
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bytes_0 = b"\x89\xb00\xf0Q\xbd"
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_1088():
    bool_0 = False
    bytes_0 = b"\x94\xfb\x1b=H\xe2#\xc9x\x9d\x03\x8c"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0, bool_0: bool_0}
    none_type_0 = None
    bytes_1 = b"\xddi\xdc\xe6\xde\xb3\xe6"
    var_0 = module_0.split(bytes_1, bytes_1)
    with pytest.raises(TypeError):
        var_0.__contains__(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    int_0 = -4553
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    int_0 = -2441
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    int_0 = -172
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    float_0 = 1968.0
    set_0 = {float_0, float_0}
    module_1.side_effect(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    exception_0 = module_3.Exception()
    int_0 = -4752
    dict_0 = {exception_0: int_0}
    module_1.side_effect(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    bool_0 = True
    list_0 = [bool_0]
    base_exception_0 = module_3.BaseException(*list_0)
    module_1.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    int_0 = -781
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    object_0 = module_3.object()
    module_1.side_effect(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bytes_0 = b"b7XE\xd7\xa2Vo"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    object_0 = module_3.object()
    dict_0 = {object_0: object_0}
    module_1.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    bytes_0 = b"(\xbc\xdc\xf2l"
    set_0 = {bytes_0, bytes_0}
    module_0.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    float_0 = -4442.219
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    str_0 = "TAeMqe"
    var_0 = module_0.sub(str_0, str_0, str_0)
    bool_0 = True
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    none_type_0 = None
    bool_0 = False
    module_0.finditer(none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    str_0 = 'veZ6zMV.2":'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bytes_0 = b"\x9bC"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    var_0 = module_0.purge()
    set_0 = {var_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    str_0 = "s+6b31D[cQUD"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    str_0 = '0`&"I;D\\h!'
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    bytes_0 = b"L\xff\x90"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    float_0 = -924.6444
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_0.split(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    set_0 = set()
    module_0.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    str_0 = ".\x0cLB{gD\r *yE{gN;*6"
    none_type_0 = None
    module_0.sub(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    str_0 = "THGO'\t\\.M6urG"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1125():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bool_0 = True
    str_0 = "C-hU!|$GEeZ"
    module_0.subn(bool_0, str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    str_0 = ":rfbECv:c\\$\rEUj\ru{e"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    complex_0 = -439.2214 - 4888.5j
    list_0 = []
    module_0.fullmatch(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    int_0 = 2026
    module_3.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    int_0 = 119
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    enum_dict_0 = module_4._EnumDict()
    module_1.side_effect(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    int_0 = -552
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    float_0 = -2321.67823
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    dict_0 = {}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    bytes_0 = b"h"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    int_0 = -2027
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    str_0 = "5~\\t["
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    str_0 = "?I]4mTC0$g[GW"
    str_1 = "/M^(HL"
    module_0.subn(str_0, str_0, str_1, flags=str_1)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    str_0 = "CkL>Ot{"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    tuple_0 = ()
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    int_0 = 930
    none_type_0 = None
    module_0.match(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    float_0 = -387.8608
    module_0.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    int_0 = -846
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    bytes_0 = b"/\x18i\x1d\xb9\xd7T\x9a?\xe7*\xb1s\xcd3\x05"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    bytes_0 = b"\x81\x1d\x16\xeeQS$"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    int_0 = -221
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    int_0 = 422
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    tuple_0 = ()
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    int_0 = 1606
    module_0.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bytes_0 = b'\x85\xb2="\xe2\x039 Z'
    error_0 = module_2.Error(*bytes_0)
    module_1.get_new_command(error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    int_0 = 2700
    module_1.get_new_command(int_0, int_0)


def test_case_1168():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1169():
    str_0 = "*Bq~cSub?}"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    bytes_0 = b"\x9b\x018]\xf9\xb8}\x95$!C!R"
    float_0 = -2904.98235
    module_1.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    int_0 = -1686
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    bytes_0 = b"3\x8b\xfc\x0e\x9dU\xfb\x84\xb1\xd7\t!] \xf6"
    module_0.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    str_0 = "cl>\\?jm\x0bMy"
    list_0 = []
    module_0.fullmatch(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    bool_0 = True
    int_0 = 3920
    module_0.sub(bool_0, bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    str_0 = " 'h^I2Y.i5yw "
    dict_0 = {str_0: str_0}
    str_1 = ""
    dict_1 = {str_0: dict_0, str_0: str_0, str_1: dict_0}
    module_4.EnumMeta(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    enum_dict_0 = module_4._EnumDict()
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1177():
    set_0 = set()
    none_type_0 = None
    module_1.side_effect(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    int_0 = 463
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    int_0 = -2006
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    int_0 = 2196
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    str_0 = "{]nW"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    int_0 = -3271
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    var_0 = module_0.purge()
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    int_0 = -106
    none_type_0 = None
    module_0.sub(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    bytes_0 = b'\x9c\x17\xe5x\x1a"T\x1bS\xc2\xf3\xe71\xbaD['
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_1.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    str_0 = "tl},k;"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    bytes_0 = b"\xd3"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_0.findall(var_0, var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    complex_0 = -1710.4223 + 598.697254j
    none_type_0 = None
    module_0.findall(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    str_0 = "4tZEGff\n"
    var_0 = module_0.search(str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    auto_0 = module_4.auto()
    none_type_0 = None
    module_1.match(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bool_0 = False
    module_0.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    str_0 = "a "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    float_0 = 850.9
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "2ajX$|p"
    dict_0 = {str_0: none_type_0}
    module_2.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    bytes_0 = b"\n\xb3\xc4\x15A\xcb\x96s\x99`"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    float_0 = 1267.3428
    module_0.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    complex_0 = 236.56 + 365.09988j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    float_0 = 469.29
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    str_0 = ":{"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0, var_0, var_0}
    module_0.search(set_0, var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    str_0 = "X|q"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    str_0 = "[9}aBV$7N"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    int_0 = 1226
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    none_type_0 = None
    bytes_0 = b"D\xda"
    module_0.search(none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    complex_0 = -1680 - 1401.013j
    module_0.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bytes_0 = b"D\xf6H\x9bC\xaf\xb6\xfa<a\xcazV\xe1\x8fd\tD(\x18"
    bytes_1 = b"\xd7\xb8\x89\xce\xb1H\x87\x01\xbb\xf2\xbe\x19\xea_\xf4\x1b\xfd'"
    module_0.subn(bytes_0, bytes_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    int_0 = 1958
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    int_0 = -1254
    none_type_0 = None
    module_0.subn(int_0, none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    bool_0 = True
    bool_1 = False
    none_type_0 = None
    module_0.finditer(bool_0, bool_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    bytes_0 = b"s@"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    str_0 = '<2S-TTU&"JHV%$VSWI5'
    var_0 = module_0.fullmatch(str_0, str_0)
    module_0.split(var_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    int_0 = -3548
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    bytes_0 = b'\xf9\x81\x05U\xb6\x9a\xb7\x8a)z~\xb2}":\xe4v\x9d'
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bytes_0 = b"\xb2\x83\xcc$]\x07\n\xc4\xa6\xdb\xb2\xef"
    module_0.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    bytes_0 = b"\x06\xcb\xb8\xcf'r(\x02\xbeKF\x04\xdejy"
    bytes_1 = b"m\x9eV\x03\x1f\xc1\x06s\xb6\xbd\xc6"
    int_0 = -1228
    var_0 = module_0.purge()
    tuple_0 = (int_0, var_0, var_0)
    tuple_1 = (bytes_0, bytes_1, tuple_0)
    str_0 = "87{k"
    module_0.match(tuple_1, str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    complex_0 = 2703.81626 + 2753.5816j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    var_0 = module_0.purge()
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    dict_0 = {}
    none_type_0 = None
    module_0.sub(dict_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    int_0 = -2721
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1235():
    auto_0 = module_4.auto()
    module_1.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.search(dict_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    bool_0 = False
    list_0 = [bool_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    none_type_0 = None
    bool_0 = True
    module_0.subn(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    float_0 = 1515.18023
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    complex_0 = 1052.611072 - 930.64j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    int_0 = -1485
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"t\xd9J\xa8G\x7f\x88b\x88\xfdoU\xde\x9c\xc0HJ[\xbd"
    none_type_0 = None
    module_0.sub(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    str_0 = "&Zsk<K<<Y"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    float_0 = 265.33
    none_type_0 = None
    module_0.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    float_0 = 1000.17
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    str_0 = "\x0b-AKwb-G8kRS;K"
    module_4.auto(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    float_0 = 1345.393
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0, var_0, var_0}
    module_1.side_effect(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    str_0 = "2\rGrm83WXeMD*v8\rr"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    str_0 = "(\nn.1"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    str_0 = "PR@oq$"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    bool_0 = False
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    str_0 = '_"3a\t'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.side_effect(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bytes_0 = b"s"
    set_0 = {bytes_0}
    module_1.match(set_0, bytes_0)


def test_case_1261():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1262():
    str_0 = "`VAW!b[\\pm{"
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    complex_0 = 3218.0797 + 2294.5j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    bytes_0 = b"\x95\xe5\xa2\xe8\x9c\x90\x8d\x85\xbb\x11[\x7f"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    float_0 = 2893.658
    module_0.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bytes_0 = b"\xc7\xbe\xa1i!\xcakKW\xfc\xa5\xc1\xb8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    int_0 = -1487
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    none_type_0 = None
    module_0.Pattern(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    list_0 = [dict_0]
    module_4.EnumMeta(*list_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    str_0 = "\"!:2[Y!^^6\\T'l>}"
    float_0 = 2718.69504
    list_0 = [str_0, str_0, float_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    float_0 = -1730.0
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    str_0 = "\x0c2<Cg%#[hp]6tC"
    dict_0 = {str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    int_0 = -3826
    module_0.sub(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    list_0 = []
    str_0 = ",o\x0ctW.Sl]{="
    str_1 = "/@69w"
    str_2 = "1\x0b%sM|I\x0c"
    dict_0 = {str_0: list_0, str_1: str_1, str_2: list_0}
    module_4.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    int_0 = 2464
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    dict_0 = {}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    bytes_0 = b"\xe6\xdaw\xd5F\xe9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.Pattern(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    int_0 = -350
    none_type_0 = None
    module_0.split(int_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1286():
    float_0 = 309.9
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    list_0 = []
    module_0.sub(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    str_0 = 'C} RRl"(],\\m&'
    none_type_0 = None
    str_1 = "eIO(n]TY}.-H:9jVa\\@"
    str_2 = "C7\x0cv(RIJu<XN21"
    str_3 = "p0,&\x0c3zAIX9+h+58"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1291():
    bytes_0 = b"\x1dm\xdb\r\xe6\xe6\xed\xdf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    str_0 = "qq`F0}C)Lf\n"
    list_0 = [str_0, str_0, str_0]
    module_1.side_effect(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    str_0 = "P,eqb-u{x(eY"
    var_0 = module_0.escape(str_0)
    var_1 = module_0.compile(var_0)
    module_1.side_effect(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bytes_0 = b"|\xc3v\xc6\xb7\x10\xfc\xe6"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    int_0 = 2840
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    none_type_0 = None
    str_0 = "jL6g\r[\t,u"
    tuple_0 = (str_0,)
    module_1.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    tuple_0 = ()
    str_0 = ",HBa@gy x7Ut[a}b}w54"
    dict_0 = {tuple_0: tuple_0, str_0: str_0, tuple_0: str_0, tuple_0: tuple_0}
    list_0 = [dict_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bytes_0 = b"\x92x\xda>N\x0b\xf0\xf2\x1a\x06\xda\xf3\x98\t7\x90\x18\x96';"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    int_0 = -992
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    none_type_0 = None
    str_0 = "B1'[0L"
    module_0.compile(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    base_exception_0 = module_3.BaseException()
    bool_0 = False
    module_1.get_new_command(base_exception_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.fullmatch(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    var_0 = module_0.purge()
    int_0 = 609
    tuple_0 = (int_0, var_0)
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    module_0.split(var_0, tuple_0, flags=regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    int_0 = 847
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    str_0 = "HJXW"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    str_0 = "Qu)-)t\tW.nl6."
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    float_0 = -908.77
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    str_0 = "Bv6(%P\x0btV>\r`"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    str_0 = 'D,ty"))^YD'
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    int_0 = 1996
    set_0 = {int_0, int_0}
    module_0.sub(set_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    str_0 = "W6tDD'FKbQ#,{"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    bool_0 = False
    int_0 = 943
    module_1.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    str_0 = "I"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1322():
    int_0 = 63
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    float_0 = 751.1794
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    float_0 = 191.28
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    int_0 = 4122
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_4.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    set_0 = set()
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    str_0 = "aM\rV\x0cUD^\\l"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    bytes_0 = b"\xfb\x9a\xee\x9f\xf2X"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    list_1 = [none_type_0, list_0]
    module_1.match(none_type_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    str_0 = "no@nN19w"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    int_0 = 197
    module_0.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    none_type_0 = None
    str_0 = '"#+Al~j~7$S'
    module_1.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    float_0 = 1803.82
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    bytes_0 = b"Z5v\xcb\xe7-\xe4\xd6\x00W'\xa8"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    bytes_0 = b"\xb3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    list_0 = []
    module_0.split(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    float_0 = 409.2
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    none_type_0 = None
    var_0 = module_0.purge()
    module_0.findall(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"=/\x85\x17\x17\\\xa8_|\xc2\xcfj\xd6!\xf9v"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    str_0 = "\n.| \\3"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    int_0 = 919
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    bool_0 = True
    module_1.match(bool_0, bool_0)


def test_case_1350():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1351():
    int_0 = 2025
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    str_0 = "#"
    module_1.get_new_command(str_0, str_0)


def test_case_1353():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1354():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    list_0 = []
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    int_0 = 938
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    str_0 = "ihKOnnI [;\n"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    complex_0 = -1274.69 + 2258.3j
    set_0 = {complex_0, complex_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    bytes_0 = b"\xb3`"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_1.side_effect(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bool_0 = False
    float_0 = 543.953
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    var_1.__setattr__(float_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    int_0 = -2419
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bytes_0 = b"\x9f\xefg\xaa\x95:^W\x97\xf0E-"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    error_0 = module_2.Error()
    module_4.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    str_0 = ""
    module_4.EnumMeta(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    bytes_0 = b"\x0f{LP\x1ea-j\x1djE\xda\xa8\xc1v\x17\xc6\xf3\xa2\xf8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    auto_0 = module_4.auto()
    dict_0 = {auto_0: auto_0, auto_0: auto_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    complex_0 = -701.28041 - 1153.78358j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    bytes_0 = b"\x9d\x95r\xf37\xed}\x8a4ex\xd0*\x92\x01"
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    int_0 = -451
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bytes_0 = b"\x1c\x87.:\xcde8\x0b\xb8f\xdfr\x9f\x9d\xa3\xca\xcf\xe7"
    var_0 = module_0.search(bytes_0, bytes_0)
    bytes_1 = b"n\xa9\xc0\xc5,\x82\x82\x1e}P"
    module_0.fullmatch(var_0, var_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    str_0 = "x>2g`|pZ]ix"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    int_0 = 298
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bytes_0 = b"\x0e,\x1f\xb3\x10\xb8y\xae\xacL\xf2\x1c\x06~F\xa5V|\x97"
    module_0.sub(set_0, bytes_0, set_0, bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    enum_dict_0 = module_4._EnumDict()
    module_0.compile(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    float_0 = 619.9
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    bool_0 = True
    module_4.EnumMeta(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bytes_0 = b"^\xc6^\x89\xcbq\xa7\xd4\xcf\xd3\xaeu[\xa9Z<"
    module_0.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    int_0 = -5370
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    bytes_0 = b"\xbc7;E\x86\xe5\x1d\xea\xf5\x93\x10q\x16\xe2"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.fullmatch(set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_0.findall(enum_dict_0, enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    tuple_0 = ()
    none_type_0 = None
    error_0 = module_0.error(tuple_0, tuple_0, none_type_0)
    module_4.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    str_0 = "t0Ka4VF.Io+I`fn0"
    none_type_0 = None
    module_0.template(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    none_type_0 = None
    var_0 = module_0.purge()
    module_1.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    int_0 = 344
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1407():
    set_0 = set()
    module_0.compile(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    int_0 = 658
    bytes_0 = b"h\x88*\xa3"
    module_1.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    bytes_0 = b"Qs4{d\xd7\xbc`\xe2\xe9u\xe4b\x9a"
    var_0 = module_0.escape(bytes_0)
    dict_0 = {var_0: bytes_0}
    module_1.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    str_0 = "^$k2h{nG\\YF\nA0\\"
    var_0 = module_0.purge()
    var_0.__delattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    bytes_0 = b'2\x1d\x17\xb2E\xf1v"]\xb0\x17\xa7\xc2\xd62\xda\x07\x8a'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    int_0 = 2589
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    bool_0 = True
    none_type_0 = None
    module_0.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    str_0 = "~p\\8Z\n*+dO#yls9"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    int_0 = 4162
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    str_0 = "%s*HN:TzVhI&}"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    error_0 = module_2.Error()
    dict_0 = {error_0: error_0}
    module_1.match(dict_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    str_0 = "KdI;(,qF@3}o\tInik!fc"
    auto_0 = module_4.auto()
    set_0 = {str_0, str_0, auto_0}
    module_0.split(set_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bytes_0 = b"r\xb7D?"
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    list_0 = []
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    none_type_0 = None
    var_0 = module_0.purge()
    module_1.side_effect(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    none_type_0 = None
    float_0 = -89.0
    module_0.split(none_type_0, none_type_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    base_exception_0 = module_3.BaseException()
    module_0.split(base_exception_0, base_exception_0, flags=base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    bytes_0 = b"!2\x89!\xe4\xfe\x02\x7fW\x0b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    str_0 = "$Q-%0\x0cs&)T10.\tCCu83I"
    module_0.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    int_0 = -591
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    bytes_0 = b"\x9a,\x0eL\xda\x1a"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    float_0 = -3667.732205
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    error_0 = module_2.Error()
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1439():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    none_type_0 = None
    list_0 = []
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_1.side_effect(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = "f\x0b\x0cP!."
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bytes_0 = b"\xf0\xc0\x83N\x88R.\xd0`\x93\xc6i\xa5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    int_0 = 1288
    bytes_0 = b"~\x83\x07c`G\xb2\x80\xc1\xe9\xd7\xd0\x87\xaf\xf25\x12\xdf\t"
    module_0.fullmatch(int_0, int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    float_0 = -3562.150888
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    int_0 = 1544
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b""
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    float_0 = 1697.0
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1454():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.side_effect(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    str_0 = '"h'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    none_type_0 = None
    int_0 = 635
    module_0.sub(none_type_0, none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    list_0 = [error_0]
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    bytes_0 = b"\x16h\x1dB\xa9.\x94-m\xd0p:O?\xa1\xe4x"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    bytes_0 = b"z\x01\x0en\xa7q\xc8\xf9\x91\x16\x034Z\x08\x7f"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    str_0 = "[q&z@|53z#\t\x0c'\tMiq\x0c"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    int_0 = 3464
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    float_0 = -1870.57673
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bytes_0 = b"*F"
    error_0 = module_0.error(bytes_0)
    module_0.finditer(error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    int_0 = -929
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    bytes_0 = b"T~\x03m\xbb\x90\x9dC\x08\x11\xe0\xe7x\xba\x86"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    int_0 = -2362
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_1.match(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    float_0 = 1472.5
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    int_0 = -980
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    set_0 = set()
    none_type_0 = None
    module_0.fullmatch(set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    complex_0 = 2846 + 252.6j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    bytes_0 = b"\xf2\xbdS(u\xb1\xe2\xe8"
    module_0.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    bytes_0 = b"\x92$_2*zs\xcd6\txl~H\x99\x92q\xec"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    set_0 = set()
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.side_effect(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    complex_0 = -2499.468 - 1177.286708j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    bytes_0 = b"|D\xfb\x1b\t9\xe9\x9b"
    error_0 = module_0.error(bytes_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    base_exception_0 = module_3.BaseException()
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    bytes_0 = b"\x94f/\xe7\xef\x84\x04\xcb\xe3%\x1f|\x80\x01Mf1\xfd\xd8\x93"
    var_0 = module_0.escape(bytes_0)
    var_1 = var_0.__dir__()
    var_1.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_1489():
    int_0 = -1385
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    int_0 = -966
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    bytes_0 = b"Y8Q\xadY\x05l"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    bytes_0 = b"Y\x04\x07\xd8\xe7#\tL\xf5\xbb"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bytes_0 = b"\r\x1f\x07\x00\xc0_\xa8\xa1;\xb8\xa8J\xa7\xefT^\xfa:i"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    dict_0 = {}
    module_0.match(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    complex_0 = 839.015562 + 1029.9j
    none_type_0 = None
    module_1.side_effect(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    error_0 = module_2.Error()
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    str_0 = ">-/8{kl?\tP6;rc0o"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    str_0 = '2\tw"l`x`LJ0'
    var_0 = module_0.search(str_0, str_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    str_0 = "<ko,k@&2HE'IVW"
    none_type_0 = None
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1506():
    str_0 = "jGOz7;\n"
    var_0 = module_0.match(str_0, str_0)
    module_4.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    str_0 = "M%b"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    str_0 = "8YA"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    complex_0 = 1740.75 - 1176j
    module_0.findall(error_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    bytes_0 = b""
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    str_0 = 'E]6/L4"'
    tuple_0 = (str_0,)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    set_0 = set()
    module_0.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    int_0 = 3274
    bool_0 = False
    module_1.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    str_0 = "I678\x0c_:vF$1\\~d+wG"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    float_0 = 113.8157
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    str_0 = ".K*M\x0b\\,\\uvt$tBey\nL"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    float_0 = -415.1
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    int_0 = 1418
    bool_0 = False
    module_1.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    float_0 = -1939.8
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    str_0 = "\nMP:G$6\n8"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bytes_0 = b"+>\x17\xb2\x92\xfd\x9a^\x8f"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    str_0 = "F,W'Jmm{S:NU|E@LN\x0c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    int_0 = 1000
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    str_0 = "H4yayo=!:"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    str_0 = "d>@TT92\x0b9Q%sM\n-"
    module_0.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    str_0 = "!}GzO@ZJY"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    int_0 = 4437
    module_0.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    float_0 = -1011.936727
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    error_0 = module_2.Error()
    module_0.split(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    str_0 = "\r*I.0,6j53TJ@7D#5'"
    var_0 = module_0.search(str_0, str_0)
    str_1 = "C-ge^EeBl+'WY_d*'l"
    dict_0 = {str_0: var_0, str_0: var_0, str_1: str_0, str_0: var_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    bool_0 = True
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    bytes_0 = b"\x16\xfdx\xa6p\xa0\x1f\xd1\xd8o\x87\x02\xb5LU<\x85\x9d"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    float_0 = 210.701087
    module_0.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    enum_dict_0 = module_4._EnumDict()
    module_0.template(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bytes_0 = b"\xc0\x94Au\xfd'x\xab|{\xb2\xc2\x87hx\x02\x8c\xb9\x9b"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_3.Exception(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    str_0 = "Y\tquj\nC"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1549():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    exception_0 = module_3.Exception(*list_0)
    module_0.escape(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    str_0 = "v,5 oW"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    bytes_0 = b"iG_\xa9\x89X\xc8\x0b\xb9l0\x9a\xdf`"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    int_0 = 237
    str_0 = 'QCS!M]Xt2c_C"f@R^6T'
    var_0 = module_0.finditer(str_0, str_0)
    var_0.__getitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    bytes_0 = b"O\xa4N\xa45\xd1#\x04=7\x99\xa8t\xc5\x8bm\x91\x9c\xc1\x91"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    int_0 = 864
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    int_0 = 963
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    int_0 = -1177
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    str_0 = "5"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    float_0 = -3038.0578
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    str_0 = "NP8#Vm?~vvhZZ*"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    none_type_0 = None
    str_0 = "3pv{~O;}dE3[@$;\n"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    float_0 = 4620.3
    var_0 = module_0.purge()
    var_0.__contains__(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bytes_0 = b"R*\xbc\x043o\xc0y\xdb\xbdK\x92U~Dy\xb4 )\x8b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__delattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    none_type_0 = None
    module_2.Error(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    bytes_0 = b"/\xb3\x8e\x84\x1c\xfdH\xacV\x91#\xf5"
    bytes_1 = b"\x93\x91\xe3\xcd*\x05\xf3\xe9\xeaw"
    module_1.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    none_type_0 = None
    list_0 = [none_type_0]
    exception_0 = module_3.Exception(*list_0)
    list_1 = [exception_0, exception_0, none_type_0, none_type_0]
    module_4.auto(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    bool_0 = True
    module_1.side_effect(bool_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    complex_0 = -544.366 + 2267.855j
    none_type_0 = None
    module_0.subn(complex_0, complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    float_0 = -2355.10711
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    str_0 = "xHG`va$"
    module_0.Scanner(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    float_0 = -973.09044
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    str_0 = "7$\x0cVo\\gy"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    int_0 = 2743
    module_0.subn(int_0, int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    int_0 = 2569
    bytes_0 = b"\xb1"
    module_1.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "W[,F @]IE]1L"
    str_1 = "D<j1/`p6J"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_2.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bytes_0 = b"\xd8\xae\x95.\x1e\xde\xf36\x93\xba\xb2\xca\x89\x1c4\xcbQ\xe2\xa6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_4.EnumMeta(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    dict_0 = {}
    object_0 = module_3.object(**dict_0)
    none_type_0 = None
    module_1.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1592():
    bytes_0 = b"\x89\x0f\xa6\r\xfd\x8d\xf8-\x00U\xcf\xe9\xfb^\xfa\xb9\xac"
    base_exception_0 = module_3.BaseException(*bytes_0)
    tuple_0 = ()
    module_0.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1594():
    bytes_0 = b"xw"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    int_0 = 995
    str_0 = "nO3!7Ij$vm',5"
    str_1 = "/7M"
    dict_0 = {str_0: str_0, str_0: int_0, str_0: int_0, str_1: str_1}
    module_3.Exception(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    float_0 = -594.914434
    none_type_0 = None
    module_0.finditer(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    float_0 = 184.9
    error_0 = module_0.error(float_0, float_0)
    module_1.side_effect(error_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    bool_0 = False
    none_type_0 = None
    module_1.side_effect(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    float_0 = 734.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = -434
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_0.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    str_0 = "Nr8 !:@e"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    str_0 = "7Fz[HIt#rPQJ9~"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    complex_0 = 623.6525 + 4094j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_1.get_new_command(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    str_0 = "`n,+YE}r\rwqx4j2`,"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bytes_0 = b"q\xffZ\xf7\xf9\xff2s4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    float_0 = -923.3
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    error_0 = module_2.Error()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    float_0 = 936.356167
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    none_type_0 = None
    bool_0 = True
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    str_0 = ""
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    int_0 = -606
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    int_0 = -536
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0, var_0]
    module_1.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    float_0 = 3520.3259
    none_type_0 = None
    module_0.subn(float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    none_type_0 = None
    module_4.EnumMeta(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    str_0 = 'u1@w}W{o)|,nD;?lR"'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    none_type_0 = None
    str_0 = "|A\rKInJsCad1@rG"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    list_0 = []
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    int_0 = -1584
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bytes_0 = b"4\x92\xbf\xd3\xfcJ"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    module_1.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    bytes_0 = b'\xba"\xf9f>H\x0e\x16w\x10\x1c\xae\x95\x86k\xb5\xbb\x9f\x96\x92'
    var_0 = module_0.compile(bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    int_0 = 677
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.subn(int_0, dict_0, none_type_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    float_0 = -195.72281
    none_type_0 = None
    module_0.finditer(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    complex_0 = 2389.696365 - 1133.25j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    none_type_0 = None
    bool_0 = False
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    str_0 = "{\x0c}:2e8vr&~j8Ej"
    module_0.split(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    var_0 = module_0.purge()
    int_0 = -2482
    list_0 = [int_0, int_0, int_0]
    module_0.compile(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    str_0 = 'j;3"G]uQH\rd8i\\?S'
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    bytes_0 = b"\xae\x93\xa9\xaa,\x1d7\xd6[\xe4|\x93\xa9\x1c\x11\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    bytes_0 = b"o\x05\xb8\xca\x9a@\xf1\xc2"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    str_0 = "itI"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    str_0 = ":XPD#I3BAu^;-R*)AF|"
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    float_0 = 1860.569
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bytes_0 = b"P\xb3"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.finditer(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    str_0 = "uD{y?d\n["
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    float_0 = -739.38534
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    str_0 = "$\\gk(eG^p\rI^|)qy|i"
    str_1 = "I4u?0"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    int_0 = 619
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    str_0 = '(&\tT1$g<aS@EK"\\Z'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    base_exception_0 = module_3.BaseException()
    module_1.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    bytes_0 = b"u\xe2\xbf\x1e\xe5\xe1\xb7J04\xe6\xca\x94\x84\x0c\xb9\xe3;1\xc8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    bytes_0 = b"\x88\xd1"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    float_0 = 2217.4
    error_0 = module_0.error(float_0, pos=float_0)
    module_0.template(error_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    str_0 = ",d`9xfjy\t?m8nujc*C."
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    float_0 = 1887.7567
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    str_0 = "1"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    bytes_0 = b"1^\xc3\x1b_;"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    float_0 = 586.95
    module_0.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    int_0 = 579
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    int_0 = -1792
    error_0 = module_0.error(int_0)
    none_type_0 = None
    module_1.side_effect(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bytes_0 = b"A\x80\x1d\xb5-\x93^\xe9\xd7\x9e^]\xc4\xf3\x08\x03\xacD\xbb\x1d"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    bytes_0 = b"\xfd!\x06\xb0Zqj"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    bytes_0 = b"\x91"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    float_0 = -5.590082
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    int_0 = 2099
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    bytes_0 = b"\xb9\x16\xa3\x06\xb6\xb5F/\xec\r\xc0\xb5'05J\xb0"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    int_0 = -828
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    bytes_0 = b"\xf0\xe5\xb1\x18\xc3\xf6K\x95v\x87\xa8\x04\x12\xf1\xb0\x90\xae #"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    bytes_0 = b"\x07\n\x0c\xb0\xf4\x9f\xc2\x07\xc3\xe4@\xd4\x1ad\xd3\xaf9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    int_0 = 2670
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    int_0 = -1106
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    float_0 = 881.18
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1689():
    str_0 = "Uz/pLqC"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    bytes_0 = b"\xb93\xd5{\xd6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    str_0 = "\t@eRB#!k#7\r5f]eO?l"
    str_1 = '%7U"&f.COl(0p Sf?O<#'
    str_2 = "UJ;W2$"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_1: str_1}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    int_0 = -1799
    module_0.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    str_0 = ""
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    list_0 = []
    error_0 = module_2.Error(*list_0)
    str_0 = "v&T~NjjhR"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    str_0 = "l?F;hxt<=^GCd"
    module_2.Error(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    bytes_0 = b"\x19GWX\xfb\xf64\x88\x9d\xd4\xfc\xc1U\xd9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    bytes_0 = b"l\x8a\xfb8\xe9V\x97B\x1b\x98S\xd1\xe7m"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    bool_0 = True
    module_0.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1704():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    str_0 = "] hy[MA@a5)KL_j"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    bytes_0 = b'\xa5"-\xbd\xd67\xca\xecN\x1b\x1fA\xbc'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    dict_0 = {}
    bool_0 = False
    module_1.side_effect(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    exception_0 = module_3.Exception(*list_0)
    module_1.side_effect(exception_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    str_0 = "vIT`b\\4."
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    int_0 = -1979
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    str_0 = "(cKylV-}5 )"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


def test_case_1715():
    none_type_0 = None
    bytes_0 = b""
    var_0 = module_0.compile(bytes_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    int_0 = 1675
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bytes_0 = b"\x88\x0e\xb8\x86\xe7\x9cP\x7f\xc1t#"
    module_2.Error(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    none_type_0 = None
    str_0 = "\rj)H,zRF*cs_3w"
    dict_0 = {str_0: none_type_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    int_0 = -2491
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.findall(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    str_0 = 'T*rm["vI}'
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    float_0 = -3299.2362
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    bytes_0 = b""
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    float_0 = 2151.723
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    str_0 = "6A"
    var_0 = module_0.template(str_0)
    dict_0 = {str_0: str_0, str_0: str_0, var_0: str_0, var_0: str_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    float_0 = 1742.49
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bytes_0 = b"\xc6J,\xa5\xebN+_P"
    var_0 = module_0.purge()
    module_1.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    bytes_0 = b"~\xa9\xe5\xe8G$\xe9\x16\r\xc9"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    float_0 = 2995.04304
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    list_0 = []
    object_0 = module_3.object(*list_0)
    none_type_0 = None
    module_1.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    float_0 = 1060.19
    bytes_0 = b"\xa4Z[bm"
    module_1.side_effect(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    bytes_0 = b"A\xf3 @\xbc\x85!"
    module_0.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    none_type_0 = None
    module_0.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    float_0 = 3332.925
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, float_0]
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    error_0 = module_2.Error()
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1741():
    str_0 = "44{\tK9-`#,Q/p\rH&.B]"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    bytes_0 = b"\xe2J\xbbJ\xb2\x94\xd0\x1c<\x08\xf2\xce"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1744():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    int_0 = 816
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    str_0 = "rwBwz7tF\t"
    none_type_0 = None
    module_0.split(str_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bytes_0 = b"\xd3\x8f\x9c\x84<"
    var_0 = module_0.compile(bytes_0)
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bytes_0 = b"y\xeb\x94\xd7-\xca3`9\x9b\xec\xf85\x90\xac"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    str_0 = "&fUh}1'1:Kje"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    set_0 = set()
    tuple_0 = (set_0,)
    int_0 = 3303
    module_1.side_effect(tuple_0, int_0)


def test_case_1758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1759():
    bytes_0 = b"n_ ]"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    int_0 = 4592
    module_1.get_new_command(int_0, int_0)


def test_case_1761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1762():
    bytes_0 = b"\xfd\xa1)\xac\xf1H>\xce\xf4\xfb\xcd\xc2ki@B\xf1\x03"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    set_0 = set()
    module_0.subn(set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    str_0 = "1k"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    int_0 = -1687
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    bytes_0 = b"d.w\x02\xe9/a\x98\xd8\x99fx\x18\xb4t"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    int_0 = 1161
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    int_0 = 1483
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    int_0 = -2537
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1777():
    bool_0 = True
    none_type_0 = None
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    int_0 = 1872
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    bytes_0 = b"n$e)\xdf"
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    str_0 = "~z"
    str_1 = "ZIwazjGX+:*\x0b;"
    str_2 = ")\njogR|"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_2: str_1}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    bytes_0 = b'\xcb\x83{\x11s\xb6"k\xa4\xae\x96j\xf69.\x0c'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bytes_0 = b"E"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    str_0 = "S"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    str_0 = "c-"
    var_0 = module_0.match(str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    var_0 = module_0.purge()
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1792():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    complex_0 = 803.59 + 574.3j
    set_0 = set()
    bool_0 = True
    tuple_0 = (complex_0, set_0, bool_0, set_0)
    module_0.sub(complex_0, complex_0, tuple_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    str_0 = 'a#LN[Dv\x0cj<"N}A[-w'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    str_0 = 'r+=F1!`YG"ej'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    bytes_0 = b"\xbb+\xfa~\xcb\xda\xb9\x1d\x8d\x0eP\x85\xb5"
    module_0.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bytes_0 = b"\xbf\rG\xd2\x90\xd0Fz]\x15\x07;<\xf8b \x03\xbb"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    error_0 = module_2.Error()
    module_1.get_new_command(error_0, error_0)


def test_case_1799():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bytes_0 = b""
    var_0 = module_0.template(bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    list_0 = []
    var_0 = module_0.purge()
    var_0.__repr__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1803():
    bytes_0 = b"\xd1'\x8a\xf8\xdcr\xeb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    complex_0 = -1281.559 + 415.195513j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    int_0 = -1535
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    bool_0 = True
    bool_1 = False
    bytes_0 = b"\\L\xdf\x98\xa3\xb2B=+\xa4\xed"
    dict_0 = {bool_0: bool_1, bool_0: bool_0, bool_1: bytes_0}
    module_0.split(dict_0, dict_0, bool_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    str_0 = "N]gYes=S#yG"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    float_0 = -890.23109
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    bytes_0 = b"\xef\x1c\xac\x87\x89(gHS$\xa5%\xa7: \xe93"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    int_0 = -683
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    int_0 = 1524
    list_0 = [int_0]
    module_1.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bytes_0 = b"\n\xd0\rw\xe9n\xa8d\xd5l"
    bool_0 = True
    bytes_1 = b"\xdaS\xec\xa7=.\xda"
    var_0 = module_0.search(bytes_0, bytes_0)
    list_0 = [bytes_0, bytes_0, var_0]
    tuple_0 = (bytes_0, bool_0, bytes_1, list_0)
    module_1.side_effect(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    int_0 = -5203
    none_type_0 = None
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    int_0 = 3659
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    bytes_0 = b"\xddQf#n\x0es\x873\xaf|\xfe\x15\xb3\x12\xfb\x16\x855"
    none_type_0 = None
    module_0.sub(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    float_0 = 3429.89
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    dict_0 = {}
    error_0 = module_2.Error(**dict_0)
    module_1.side_effect(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    int_0 = -200
    module_0.sub(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    none_type_0 = None
    int_0 = -1339
    module_0.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    complex_0 = -961.968572 - 884.3j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    var_0 = module_0.purge()
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    bytes_0 = b"\xf5_\xa6=]3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    float_0 = -452.532
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    float_0 = 931.7899
    str_0 = 'H"=EAgx%\tki\t}c]zrm'
    var_0 = module_0.sub(str_0, str_0, str_0)
    var_0.__iter__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    str_0 = "~dc"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    bool_0 = False
    dict_0 = {}
    list_0 = [bool_0, bool_0, bool_0, dict_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1846():
    int_0 = -481
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    complex_0 = -129.58674 + 2413.47797j
    set_0 = {complex_0, complex_0, complex_0}
    module_1.side_effect(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    error_0 = module_2.Error()
    module_0.compile(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    var_0 = module_0.purge()
    bytes_0 = b"x\xd8Y\x1c\xbeP<n\xaf\x83\xb9 s\x87"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bytes_0 = b"\xe6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    exception_0 = module_3.Exception()
    module_0.split(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    str_0 = "rIDX:p64"
    var_0 = module_0.template(str_0)
    module_1.side_effect(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    set_0 = set()
    module_0.compile(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    float_0 = 991.38224
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    str_0 = "~NIs]I^Wq%uE"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    int_0 = -494
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    str_0 = "dgx=A;VBVJ"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bytes_0 = b""
    str_0 = 'k)%x]K"XQDL\x0cK=v4X T'
    module_1.side_effect(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    bool_0 = True
    module_0.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    auto_0 = module_4.auto()
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    float_0 = 256.39
    none_type_0 = None
    module_0.compile(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    str_0 = "~<}I{r-[g"
    float_0 = 2230.46522
    module_1.side_effect(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    int_0 = -1714
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bytes_0 = b"QPjXk\xd5y\x08n\xfb\x11\xf2v\xed\xfc\x85"
    var_0 = module_0.template(bytes_0)
    tuple_0 = (bytes_0, var_0, var_0)
    module_0.findall(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    error_0 = module_2.Error()
    module_0.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    int_0 = -1112
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.side_effect(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    float_0 = -710.60606
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    enum_dict_0 = module_4._EnumDict()
    module_1.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    str_0 = "*9$=oa*zQ,7q[hrPj*"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    int_0 = 79
    int_1 = 1894
    set_0 = {int_0, int_0, int_0, int_1}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    bytes_0 = b""
    bytes_1 = b"W#3)\x7f"
    module_1.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    float_0 = 1174.1
    none_type_0 = None
    module_0.findall(float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    float_0 = 239.059
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.side_effect(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    bytes_0 = b"\x80\x9fO0\x8e\xa8\xac\xe3;"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    complex_0 = 4014.2 - 1092.529j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    int_0 = 522
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    int_0 = 522
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    bytes_0 = b";\xb3\x03\xc1\x1e"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    str_0 = "'$\\)O\r&["
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    str_0 = ",p!PDOO\n'bhB^"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    str_0 = "cL\nQZJ|t0"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    bytes_0 = b"\x05\xde\xef"
    var_0 = module_0.purge()
    var_0.__repr__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    int_0 = -802
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    complex_0 = -3909 - 2443.79j
    module_0.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    bool_0 = True
    var_0 = module_0.purge()
    module_1.get_new_command(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    str_0 = 'hEWP5q^kd(\r"\x0c}!'
    module_0.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bytes_0 = b"=\x139\x843@r\xc9\xcdA\xedW\x95-"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    bytes_0 = b"\xa7\x1a\x14+\xf5\xce\x1e\x07\xcd\xbeI`\x18"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    bool_0 = False
    enum_dict_0 = module_4._EnumDict()
    enum_dict_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = -817
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1913():
    int_0 = 551
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    str_0 = ">~znF@bymW\n"
    var_0 = module_0.purge()
    var_0.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    str_0 = "j+Ts8wu-):WOXS<("
    bool_0 = False
    module_1.side_effect(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    int_0 = 596
    list_0 = [int_0, int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    int_0 = 2495
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    var_0 = module_0.purge()
    error_0 = module_0.error(var_0, var_0)
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    str_0 = "\x0bAC~\\Xq$qr"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    tuple_0 = ()
    module_0.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    list_0 = []
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    int_0 = -488
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    str_0 = "R"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    bool_0 = True
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    var_0 = module_0.purge()
    float_0 = -735.759302
    module_0.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    float_0 = -1520.6
    module_0.subn(float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    str_0 = "R6Eh+jAY^?d"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    int_0 = 356
    list_0 = [int_0, int_0, int_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    float_0 = -2024.87
    none_type_0 = None
    module_0.subn(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    str_0 = "X-i"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_0.compile(regex_flag_0, regex_flag_0)


def test_case_1937():
    var_0 = module_0.purge()


@pytest.mark.xfail(strict=True)
def test_case_1938():
    str_0 = "4o\n"
    var_0 = module_0.match(str_0, str_0)
    module_1.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    int_0 = 1824
    set_0 = {int_0}
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    int_0 = -603
    none_type_0 = None
    module_0.findall(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    none_type_0 = None
    module_1.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    var_0 = module_0.purge()
    var_0.__reversed__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.split(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    str_0 = "z>5-4,2o1nvW*GG`"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    bytes_0 = b"\x95"
    none_type_0 = None
    module_0.split(bytes_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    str_0 = "ViP`U"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    var_0 = module_0.purge()
    list_0 = []
    module_0.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    str_0 = "gX_9tUP,M"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    str_0 = ">=n!{|~I)q*s^LNH"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    bytes_0 = b"\x16t\xc6\x14\x93"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    complex_0 = 1176.4371 - 3689j
    module_0.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    int_0 = 2767
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    float_0 = 1124.6293
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    int_0 = -5436
    var_0 = module_0.purge()
    module_0.finditer(int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    int_0 = 563
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    bytes_0 = b"\x94x\x13\xeb\xa2y\xa7n\xc6\xee"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    str_0 = "Mp7['3|Tf~.f~"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    float_0 = 1135.371333
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    int_0 = 3297
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    str_0 = "N!:02<"
    var_0 = module_0.purge()
    set_0 = {str_0, var_0}
    list_0 = [set_0, var_0, str_0]
    module_1.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    bytes_0 = b"h3,\x0c\xf5A:\xa6t\x10Y"
    var_0 = module_0.escape(bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    int_0 = 3469
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.subn(int_0, int_0, set_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    str_0 = ">S"
    var_0 = module_0.sub(str_0, str_0, str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    bytes_0 = b"\x12\x02\xb7\x97\xe1\x89\xf6\xdd\xe9]'}\x19\x8ap"
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = "JP1W"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    str_0 = "q\x0c~wI'&62?vYN\t\nT~}"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bytes_0 = b'\xfaH\xd8\xfcw!&"\xaaQ\xe82d\xc5S\xcf\x94]'
    bool_0 = False
    module_1.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    float_0 = -3754.74521
    none_type_0 = None
    module_0.subn(float_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1977():
    var_0 = module_0.purge()
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    str_0 = "F:O"
    int_0 = -542
    module_0.search(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    bytes_0 = b"\xb9.$\t-"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    module_0.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    bytes_0 = b"7\xd9hk\xca\x83W\x8b0\xb1\xf9\xdd\xcc\x12"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    set_0 = set()
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    auto_0 = module_4.auto()
    module_1.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    dict_0 = {}
    error_0 = module_2.Error(**dict_0)
    module_1.get_new_command(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    object_0 = module_3.object()
    module_0.compile(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    complex_0 = -3971 - 219.089403j
    module_0.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    bytes_0 = b"K(L\x81\x1a\xaeX\x0eH\x83"
    none_type_0 = None
    module_0.sub(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    str_0 = ")35"
    none_type_0 = None
    module_0.sub(str_0, none_type_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    int_0 = -1369
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1995():
    bytes_0 = b"\x9b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    bytes_0 = b"\xf4\xaf\\\x17I\xc08"
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    bytes_0 = b"\xc6\xdf\xd7"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    str_0 = "F.gV\x0c~wO\x0cT??!m"
    module_1.get_new_command(str_0, str_0)


def test_case_2001():
    str_0 = "$s|U3"
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    int_0 = -634
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = -1914
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    str_0 = "iA.&fJt%BjkEA\x0b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bool_0 = False
    none_type_0 = None
    module_1.side_effect(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    float_0 = 2615.9285
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    bytes_0 = b"\xa2p\x8c\xe1\xf2C\xfa6\n"
    module_0.Match(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    object_0 = module_3.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    bool_0 = False
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    str_0 = "2I(o\\q'l2>"
    str_1 = ".Z\t"
    str_2 = "MBin7iU;X9vr]J;VZ"
    str_3 = "\r^"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_3}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    str_0 = ""
    module_0.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    int_0 = -1764
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    var_0 = module_0.purge()
    var_0.__reversed__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    complex_0 = 994.066833 + 1247.4214j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    set_0 = set()
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    float_0 = -27.268307
    list_0 = [float_0, float_0, float_0]
    module_1.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    int_0 = 2029
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = 556
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    complex_0 = 1176.133459 + 2137.49j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    float_0 = -3946.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    error_0 = module_0.error(none_type_0, none_type_0, list_0)
    module_1.get_new_command(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    float_0 = -3079.07
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    str_0 = " "
    bool_0 = True
    module_0.finditer(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    float_0 = 1318.0
    none_type_0 = None
    module_0.subn(float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    complex_0 = 2305.5 - 2032.6j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    bytes_0 = b"\xd9\xa5_\xaa\xd0+"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    dict_0 = {tuple_0: bool_0, bool_0: tuple_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    float_0 = -2889.53
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    int_0 = 895
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    int_0 = -1231
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    bytes_0 = b"\x9e6\xbd\xd1=\x9a\x07go\x92\x8c6\xd6:\xd8j\xbf\xe7;"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    none_type_0 = None
    complex_0 = 3356.7 + 132.6685j
    module_0.template(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    str_0 = "Qo$4oP|\x0bqOwa?i"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    enum_dict_0 = module_4._EnumDict()
    tuple_0 = (enum_dict_0,)
    str_0 = "+<*A'"
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    str_0 = "KX\x0bfA`\x0c;Cld\x0b`%tAS\rb"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    complex_0 = -1633.6383 - 318.9185j
    str_0 = ""
    module_1.side_effect(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    exception_0 = module_3.Exception()
    module_0.search(exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    int_0 = -401
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    int_0 = -96
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    str_0 = "F!S"
    module_0.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    str_0 = "Pq)y/g`Zl<PDPjL&zs"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    none_type_0 = None
    module_3.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    int_0 = 3116
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    str_0 = ")1IB`x>Bx"
    str_1 = "Ro)n<UT!sR=xE-//:g0M"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    str_0 = "L^<*vyV%"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    int_0 = 902
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    bytes_0 = b")\xaa\xa7\x02\x92\xdc\x18\x82,xc\xe2R\xdfvO"
    tuple_0 = (bytes_0,)
    module_0.search(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    int_0 = -1133
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    int_0 = 3402
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    var_0 = module_0.purge()
    enum_dict_0 = module_4._EnumDict()
    module_1.match(var_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    str_0 = '.jJC"(>^Xd\x0bR[!~0{'
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    enum_dict_0 = module_4._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    int_0 = 393
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    int_0 = -1583
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    error_0 = module_2.Error(*list_0)
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2078():
    int_0 = -990
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    complex_0 = -273.7 - 4295.4105j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    set_0 = set()
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    complex_0 = 72.7 - 3208.2j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    bytes_0 = b"\xa9\xa1\xd1/bH;:\xaf"
    enum_dict_0 = module_4._EnumDict()
    enum_dict_0.__setitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    float_0 = -2040.1
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bytes_0 = b"\xdc\xff\xee/5\x89\x1ez1\x12\xd8\xfa\xd5\x90\x02\x1f"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    var_0 = module_0.purge()
    var_0.__setitem__(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    int_0 = -1057
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    int_0 = -1384
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    bytes_0 = b"^\xad{N\xdf\xb5\xbb\x1bh.\xf4\x17At\x1c"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    int_0 = 1072
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    var_0 = module_0.purge()
    list_0 = [var_0]
    module_1.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    float_0 = -406.03
    set_0 = {float_0, float_0}
    module_1.side_effect(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    error_0 = module_2.Error()
    module_0.template(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    str_0 = "/e"
    var_0 = module_0.sub(str_0, str_0, str_0)
    var_0.__delattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bytes_0 = b"\xd4\x9d"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    int_0 = -303
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    int_0 = -1593
    none_type_0 = None
    module_0.subn(int_0, int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    list_0 = []
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    bytes_0 = b"C\xb5<s\xb6\x90!\xaf\x84?06\xda\x8a\xea"
    list_0 = [bytes_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    bytes_0 = b"\x8c\x1f\x01\xc3\xad\x85\x0e?\x0b\x12\xae\n\xad\xb0\x1c\x02\x8as"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    str_0 = "mYwY}1Uo@afpg]<x\r"
    var_0 = module_0.compile(str_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    set_0 = {regex_flag_0, regex_flag_0}
    module_1.get_new_command(set_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    list_0 = []
    none_type_0 = None
    module_1.side_effect(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0]
    module_0.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    float_0 = -281.744954
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    enum_dict_0 = module_4._EnumDict()
    dict_0 = {}
    none_type_0 = None
    module_0.finditer(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    str_0 = "#[5"
    none_type_0 = None
    module_0.split(str_0, str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    bytes_0 = b"\xef\x89\xb1E\xf4\xec\x0c"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    none_type_0 = None
    str_0 = "/,F>Z@c\\gOe\n"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    bytes_0 = b"+s\xc5\xa1\x12g\x85\x19>Rq"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    float_0 = 866.9099
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    str_0 = "i}"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    str_0 = "yK\n"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    bytes_0 = b"\x81A!\xc3\x10\x05\xc1\x13\x9a\xa7\xecfT\x8a\x001\x87\x1f"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0]
    module_0.search(list_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    bytes_0 = b"N+$]\xc8&"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    int_0 = 733
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    int_0 = 4061
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    str_0 = "\n\n|)L7#7r(q"
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    complex_0 = 2907.52 + 2963.438158j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    int_0 = 615
    tuple_0 = (int_0,)
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "'iCK.}S"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    bytes_0 = b"\xbe\xdf\xd9\x88O\xda"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_0.match(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    none_type_0 = None
    module_4.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    str_0 = '$\n"bLK'
    none_type_0 = None
    str_1 = ";[& eXM5;](Omz"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    int_0 = 3507
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    float_0 = -2364.9045
    module_1.side_effect(float_0, float_0)


def test_case_2147():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2148():
    int_0 = -2006
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    float_0 = 486.8
    error_0 = module_2.Error()
    module_1.get_new_command(float_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    none_type_0 = None
    bool_0 = True
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    complex_0 = 3169.901 - 5181.8j
    set_0 = {complex_0, complex_0, complex_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    int_0 = -1531
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    float_0 = -971.014
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    bytes_0 = b"\xd4"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    float_0 = 443.992
    set_0 = {float_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    dict_0 = {}
    module_0.search(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    float_0 = -898.24
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    str_0 = ",%"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    bytes_0 = b'\xff\xff"\xe3'
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    str_0 = "^b7i+BpT+S"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    bytes_0 = b"\xdfF\x0c8\xcb\x1b\x0eab\x9d(\x7f\xa1"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    float_0 = 758.28623
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    int_0 = -1459
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    set_0 = set()
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2177():
    bytes_0 = b"\xf4\\\xb6\xd5I\xd4\xee\x95\xbf\xaa\xb0!\x16\xb4"
    str_0 = "C'"
    set_0 = {bytes_0, bytes_0, str_0, str_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    str_0 = "+JZ"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    str_0 = "I}axu,wB"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    dict_0 = {}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    float_0 = 2598.197
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    float_0 = 370.38891
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    int_0 = 1458
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "5~C=0.Mc)Y\x0cB"
    str_1 = "(\\("
    dict_0 = {str_0: none_type_0, str_1: list_0}
    module_4.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    str_0 = "@fSpnra+iwDbD"
    str_1 = "/C}kPXt{<U\\<F_.{YO;"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    str_0 = "/8^"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    complex_0 = -441.7 - 470.2109j
    module_0.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2194():
    int_0 = 1567
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    str_0 = "l["
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    float_0 = 3215.13517
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    float_0 = -714.076312
    module_0.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    int_0 = 1130
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    int_0 = -3127
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bytes_0 = b"\xb7\xcf\x8f\x97d\x15*:\x05\xaf<\xc4`\xe89\xcc\x1b\xacW"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.search(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    int_0 = -15
    tuple_0 = (int_0,)
    module_0.split(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    var_0 = module_0.purge()
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    str_0 = "k0YVEiTtiB^oz;*2"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    complex_0 = 5347.053 + 2559.85482j
    module_0.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    var_0 = module_0.purge()
    int_0 = -835
    module_0.subn(int_0, int_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    str_0 = "#a\\W)9\\)"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    str_0 = 'S"Z/J'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    float_0 = 1006.04
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    str_0 = "f\x0c6Rzi"
    dict_0 = {str_0: str_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    bytes_0 = b"\x9a"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2223():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    str_0 = "m&OzT l ,yAXGS{t<b["
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2227():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    tuple_0 = ()
    module_0.sub(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = "H&uH7_|d4C[C~S6\rh6's"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    int_0 = -1798
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    bool_0 = True
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    str_0 = "6fzVTw%"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    bytes_0 = b"9\xdb{\xf6\x96-C2?N\xab\xf5VA\xad\x16l\xdf\xa6\xcb"
    none_type_0 = None
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    var_0.__contains__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    module_1.side_effect(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    bytes_0 = b"\xb8\x95\x14\xabM>Q\xc0\xf0ui"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    str_0 = '[Zn"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    str_0 = 's\t"3~4UAW?CAJx'
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    bytes_0 = b"\xb7\xd5\xa3\xda\x9c{\x85\xc4\xb7\r\x86\xcalg\xf8\xd5_\x14"
    var_0 = module_0.search(bytes_0, bytes_0)
    set_0 = {bytes_0, var_0, bytes_0}
    module_1.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    float_0 = -841.9
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    str_0 = "?I6{#;J64YN{vR.U-6"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    str_0 = "v(K8y"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    bytes_0 = b"\xc2\r "
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    int_0 = -1735
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = True
    module_1.side_effect(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    str_0 = "!/\tn5\\?]Xm"
    dict_0 = {str_0: str_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    int_0 = 2061
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2264():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    float_0 = -1384.54
    float_1 = -5889.11
    module_0.finditer(float_0, float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    bytes_0 = b"P\x07\x11\xce\x1d\x16=\xf8"
    none_type_0 = None
    module_0.template(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    none_type_0 = None
    error_0 = module_2.Error()
    module_1.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    error_0 = module_2.Error(*list_0)
    module_1.side_effect(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    float_0 = -1130.11
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2273():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    str_0 = "D"
    set_0 = {str_0, str_0, str_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_2276():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    float_0 = 50.6
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    float_0 = 3138.0
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_1.side_effect(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    bool_0 = False
    int_0 = -927
    module_0.sub(bool_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    str_0 = "o>`RvW <bub^y2>"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0, var_0, var_0}
    module_0.finditer(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bytes_0 = b"\xb4/"
    error_0 = module_0.error(bytes_0, pos=bytes_0)
    module_4.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    int_0 = -2258
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.fullmatch(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    bytes_0 = b"dYg,\xf3\r\x0e\xa4\xb4\xb7Vx\\\xe8\x08%3"
    var_0 = module_0.findall(bytes_0, bytes_0)
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    float_0 = 39.3418
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    int_0 = -1886
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    str_0 = "Hp+f\\j\\6m4w\x0c_\t<rk["
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    str_0 = "\\5uJ~J/8*K{[Wo9QEyf"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bytes_0 = b"\xebjImq\xb4\xc1\xed\xb4\xf1\x03\x8aK]v\xb3"
    none_type_0 = None
    bool_0 = True
    module_0.findall(bytes_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = -2590
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    int_0 = -1753
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    str_0 = 'd7^V"M*lPtSQ'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    float_0 = -840.44
    module_0.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    dict_0 = {}
    float_0 = 1339.2793
    module_1.side_effect(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    str_0 = "j(_]#44"
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: bool_0}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    int_0 = -4300
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    bytes_0 = b"8L%o\xb0\xeeh9+>RC\xa3\xbd,\xfd\xc2\x1fj\xc7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    none_type_0 = None
    enum_dict_0 = module_4._EnumDict()
    module_0.finditer(none_type_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    complex_0 = 4348.41 + 2596.1044j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    set_0 = set()
    tuple_0 = ()
    module_1.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    int_0 = 3183
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    str_0 = "mm%xb p]gI`;V"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.subn(bool_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    str_0 = "lKi!BXX"
    bytes_0 = b"\xcc"
    var_0 = module_0.findall(bytes_0, bytes_0)
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    str_0 = "#YZI!'?1\nOEN"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    float_0 = 164.0
    dict_0 = {}
    module_0.template(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    str_0 = "l8{"
    list_0 = [str_0, str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    bytes_0 = b"\xb3\xf2t}"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    float_0 = 1108.0
    module_0.subn(float_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    str_0 = "xm\x0cW&K$6%o7.q"
    var_0 = module_0.sub(str_0, str_0, str_0)
    list_0 = [var_0, str_0, str_0]
    module_1.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    int_0 = -3308
    enum_dict_0 = module_4._EnumDict()
    module_1.match(int_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    complex_0 = -726.972744 - 1212.13713j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.side_effect(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    bytes_0 = b"8_\xe6\xfd1\xdb\xa0"
    var_0 = module_0.match(bytes_0, bytes_0)
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    bytes_0 = b"U*\xec\xc1\xb3>\x92\xda\xf9\x04\x93\x80&\xaa\xe5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    str_0 = "\r@-ett)"
    dict_0 = {str_0: str_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    bytes_0 = b"JW\x9d\x93y\xc1\xd4PP\xc5\xdf\xaeH\xc2\x82\xddx<l\x05"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    bytes_0 = b"\xedgz\xfa\xc2$$i}\xbe\xfbr)"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    int_0 = -594
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    int_0 = -1403
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    int_0 = 2036
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    int_0 = 70
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bytes_0 = b"\xfc\x1dP\xfb\x9c\xba\xd3\x98\x84"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    int_0 = 1159
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    dict_0 = {}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2345():
    str_0 = "\x0cG:4fND$)DI%*]k$t"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    list_0 = []
    tuple_0 = (list_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    bytes_0 = b'M\xd2d\xcfT\x02\x052\x80"\x97i\x03\x80\xb7f\xcc'
    set_0 = {bytes_0}
    module_1.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    auto_0 = module_4.auto()
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    str_0 = "7"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    var_1.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    str_0 = "3dTS,"
    none_type_0 = None
    module_0.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    bytes_0 = b"6_\x92*\x9d\x0bq6\xff\x9e<\xdc"
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    str_0 = "x#k#3gn+V"
    bool_0 = True
    module_0.error(str_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    var_1.__setattr__(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    bytes_0 = b"q\xff/MV\xf8!i\xec\x80\xa2~v\xc0\x9d\x98%\x95"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_2368():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.side_effect(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    str_0 = "_e>9-L"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    complex_0 = 3163.24 + 2732.6j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    float_0 = 1214.34
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    int_0 = -1213
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    dict_0 = {}
    var_0 = module_0.purge()
    var_0.__reversed__(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    tuple_0 = ()
    list_0 = [tuple_0]
    str_0 = "k\nFSM{P"
    var_0 = module_0.search(str_0, str_0)
    var_0.scan(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    str_0 = "W\rh3"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    str_0 = "\\x(ESiJ}i'>DN\nM"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    list_0 = []
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    float_0 = 2135.5
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    complex_0 = 1545.808 - 1187.6j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    str_0 = '8%"VH0:Sy'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    list_0 = []
    str_0 = " y\x0b'l\x0b"
    none_type_0 = None
    str_1 = "h1#33a="
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_2.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    int_0 = 1220
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    complex_0 = -1478.15 - 1009.1j
    int_0 = 1778
    module_1.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    int_0 = -2471
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    bytes_0 = b"\n\x13\x9f\xbb\x17\xc6\x00\xa5nj\x19\xa2&\x89\xf9\xcf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    set_0 = {regex_flag_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    bytes_0 = b"\x14\xf4\xe6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    str_0 = "`\t<{E\x0b!"
    set_0 = {str_0, str_0, str_0}
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    int_0 = 1769
    tuple_0 = (int_0,)
    module_0.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    set_0 = set()
    bool_0 = False
    module_1.match(set_0, bool_0)


def test_case_2396():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2397():
    complex_0 = -399 + 1325.571558j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    int_0 = 4806
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    none_type_0 = None
    complex_0 = 5708 + 1183.2527j
    module_0.subn(none_type_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    bytes_0 = b"\xcc\x05\x15"
    var_0 = module_0.escape(bytes_0)
    bool_0 = False
    module_1.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    list_0 = []
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    str_0 = "MI%-<359XuFR&l@HTBb"
    dict_0 = {str_0: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    float_0 = 2525.9
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    str_0 = "i)jaHX\x0bT:mYo.QD"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    str_0 = "X{!#Js4=2;J*TVI"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    bytes_0 = b"\x02\xc3\xb1)\xaa\x048\x10\x03\xe2y\x0c[\xaf\xbf\xe4y\xb0"
    module_0.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    float_0 = 1749.0
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    bool_0 = True
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2415():
    bytes_0 = b"\xbf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    int_0 = -1499
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2418():
    complex_0 = 2165.57 - 210j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    str_0 = "IrJXbv6J^d"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    bytes_0 = b"l"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.sub(tuple_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_1.side_effect(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    str_0 = 'qp!"2\x0c'
    var_0 = module_0.fullmatch(str_0, str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    complex_0 = -3933.1 - 675.76j
    module_0.split(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    bytes_0 = b" 8\x8cO)"
    set_0 = {bytes_0}
    none_type_0 = None
    module_1.side_effect(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    int_0 = 2171
    none_type_0 = None
    module_0.subn(int_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    var_0 = module_0.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    bytes_0 = b"\xbf\xb9\n"
    var_0 = module_0.compile(bytes_0)
    module_1.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    int_0 = 4600
    str_0 = "4'(g`,64c.NG8g__"
    var_0 = module_0.escape(str_0)
    var_0.__setitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    float_0 = 696.0483
    tuple_0 = (float_0,)
    module_0.split(tuple_0, tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    bool_0 = False
    bytes_0 = b"#\xa5\x1f\xa7)9"
    module_1.side_effect(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    list_0 = []
    str_0 = "VF%?7,#x6g"
    var_0 = module_0.match(str_0, str_0)
    var_0.__reversed__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    int_0 = 1924
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    none_type_0 = None
    bool_0 = True
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    complex_0 = 1211.139 - 2102.2j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    str_0 = "NgD8h"
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    bytes_0 = b"\xde\x9e\r\xff\x98"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    int_0 = 844
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    int_0 = 989
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    int_0 = 900
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    float_0 = 1273.07769
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    int_0 = 167
    list_0 = [int_0, int_0, int_0]
    module_0.subn(list_0, list_0, int_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    bool_0 = True
    bool_1 = False
    module_0.sub(bool_0, bool_0, bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2451():
    none_type_0 = None
    module_4.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    str_0 = "l[Cu)Y*AKTA!"
    module_0.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    none_type_0 = None
    set_0 = {none_type_0}
    module_1.side_effect(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    str_0 = "]@i"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    bool_0 = True
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    bool_0 = True
    list_0 = [bool_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    int_0 = -341
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    var_0 = module_0.purge()
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    bytes_0 = b"\x8ei\xba3qA\xeb\x14M\x1b\xb3\n\xde\xe6"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    str_0 = "+.uf jBV$tKoc1O\nHj/"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    int_0 = -92
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    complex_0 = 2529.62 + 223.201566j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    int_0 = 287
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    var_0 = module_0.purge()
    auto_0 = module_4.auto()
    module_0.sub(auto_0, auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    float_0 = -1016.201
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    str_0 = "QS$JO1"
    set_0 = set()
    module_0.finditer(str_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    float_0 = -2371.79474
    none_type_0 = None
    module_0.subn(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    str_0 = "45YF\t7GSvku"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.side_effect(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    tuple_0 = ()
    none_type_0 = None
    module_1.side_effect(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    str_0 = "'\rd="
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {str_0: list_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    float_0 = 4391.9
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    str_0 = "4$*<v1"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    int_0 = 157
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    bytes_0 = b"\xc6\xc5\xf9\x9f"
    none_type_0 = None
    module_0.split(bytes_0, bytes_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    str_0 = "Nhk!v})v?hARS@ef\x0bz"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    int_0 = -2099
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    str_0 = ",[\"9:U)'^?E<#OR\tl6#B"
    str_1 = "+87K"
    module_1.side_effect(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.side_effect(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    int_0 = 1222
    var_0 = module_0.purge()
    var_0.scan(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    float_0 = -272.0905
    set_0 = {float_0, float_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    int_0 = -869
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bool_0 = True
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    str_0 = "!V40XC]0llxm*uWfHQ"
    module_0.Scanner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    str_0 = "xb !"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    int_0 = -652
    module_4.unique(int_0)


def test_case_2508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2509():
    int_0 = 2529
    int_1 = -30
    module_1.match(int_0, int_1)


def test_case_2510():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2511():
    var_0 = module_0.purge()
    int_0 = 6249
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    str_0 = "RT"
    none_type_0 = None
    module_0.sub(str_0, str_0, str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    bytes_0 = b"\x0bK\xd4\xb4\xcdI_\xc8o\xae\xab\xe3\t\xc1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    bool_0 = True
    int_0 = 242
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    str_0 = "C\nju"
    list_0 = [str_0, str_0]
    module_1.side_effect(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    bytes_0 = b"\xe3\x06\xfa\x9d\xd1t\xca&\x18F\x14"
    module_0.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    str_0 = "/F\t\r*("
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    set_0 = set()
    none_type_0 = None
    module_0.search(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    str_0 = "Nm[M"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    bytes_0 = b"L\x12e\x83\x07i~\x19"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    str_0 = "(,LSn+hnR\r"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    bytes_0 = b"\xf1\x01\xeb\x95P3M\xad]\xbd*Wv"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    int_0 = 1232
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    int_0 = -843
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    float_0 = -1632.083
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    int_0 = 2103
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    list_0 = []
    none_type_0 = None
    module_0.subn(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    error_0 = module_2.Error()
    int_0 = -4689
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    int_0 = 2139
    none_type_0 = None
    module_0.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    str_0 = "/"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    int_0 = 702
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    bytes_0 = b"_|t\xc7\xdbH\xf9\xbe\xed$\xf1\xd7=*\xb9\x9b\xea\xe1]\xb4"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    none_type_0 = None
    bool_0 = True
    module_0.sub(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_1.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    str_0 = "L9/C.ET8\\fC\x0bUdR1\r"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    str_0 = "l+!?cePwNz*"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    str_0 = "IlE9^,"
    var_0 = module_0.finditer(str_0, str_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    str_0 = ",xu>\rdTyD{O&u"
    none_type_0 = None
    module_0.template(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    float_0 = -2693.95
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    float_0 = 1910.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    int_0 = -542
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    bytes_0 = b"Ff\x15~?\xefTx\xd2\x99r\x08\x9f7\xd4\xab"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    bytes_0 = b"F9\xa2\xe3\xfb\xc9\xae\x04\xff\xf7[\x01\x1f\xed\xc9"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    set_0 = set()
    list_0 = [set_0]
    module_0.subn(list_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    float_0 = -1129.4
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    float_0 = 1935.9747
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    var_0 = module_0.purge()
    module_0.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bytes_0 = b"4\xbaK\xdc\xbbJ\x03#\xee\xabv\xd8\x86\xdc+\x80\x98D\xcd"
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    int_0 = -1155
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    bytes_0 = b"'\xad>\xf7"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    bool_0 = False
    none_type_0 = None
    module_1.side_effect(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    str_0 = ")0L^hT[BT-^gNZ"
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    bytes_0 = b"$\xd2\x81\xe8\xc4"
    int_0 = 1071
    module_1.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    str_0 = '&Tc=`"\tiQQ:'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    bytes_0 = b"\x0eK5\xae#\x1a\xa7\xac\x1f\x8f"
    var_0 = module_0.template(bytes_0)
    module_1.side_effect(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    bytes_0 = b"|\xaa`\x9bZ"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_3.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bytes_0 = b"_0NLd\x894\x99\x1au\x8b\x17\x90\x0e\x0bb\xc3m\xf5\x17"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_1.side_effect(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    int_0 = -1457
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    str_0 = "ER{H99"
    var_0 = module_0.purge()
    var_0.__getitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bool_0 = False
    module_0.split(bool_0, bool_0)


def test_case_2594():
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bool_0 = True
    var_0 = module_0.purge()
    module_1.side_effect(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    bytes_0 = b"y\xf2\xc2\xfd+"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    str_0 = "T5w6"
    list_0 = [str_0]
    module_1.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    bytes_0 = b"\x13R\xcf~\xc4"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    int_0 = 733
    var_0 = module_0.purge()
    var_0.__getitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    str_0 = "T+"
    none_type_0 = None
    module_0.findall(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    bytes_0 = b";\xb1c\xc2\xe7\x8c\xf1\xea\xab\xf9uj\x7f"
    set_0 = {bytes_0}
    module_4.EnumMeta(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    int_0 = -1064
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    str_0 = "{d>;\nN{EJ#3A ~-"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    none_type_0 = None
    float_0 = -673.0
    module_1.side_effect(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    auto_0 = module_4.auto()
    bool_0 = False
    module_1.get_new_command(auto_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.search(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b" \xf4\x1bC\x98\xa7` y\x8eCa\x89\xa0\x93\xe3\x80\xcb\xd5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    none_type_0 = None
    int_0 = 872
    module_1.side_effect(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2612():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_0.search(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    bytes_0 = b"\xe2\x8e\x015X-\x01m+\x0c\x83\x1e"
    module_1.match(bytes_0, bytes_0)


def test_case_2616():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2617():
    bytes_0 = b"\x81G\xd8\xfc\x89\x98\xbc\xd3\t\xcf\x86E\x89N\x1c"
    str_0 = " 5?.4O\te/j$&jD"
    tuple_0 = (str_0,)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: tuple_0}
    module_1.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    int_0 = -511
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    int_0 = -1671
    list_0 = [int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    str_0 = "{NkZqrRewUk{?2N%"
    bool_0 = True
    none_type_0 = None
    module_0.sub(str_0, bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    float_0 = 1288.3
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bytes_0 = b"G\x08\xcb \xd8[e\xed=>\xbd\xd4\xc4\xf4\x85\x86"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    str_0 = "pnKH<&2dhEs1Q\tMWx"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    bytes_0 = b"\n]_;|V\xb3L\xa6\x97"
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.subn(tuple_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    var_0 = module_0.purge()
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    float_0 = -255.302321
    str_0 = 'M98VD5s>"'
    set_0 = {float_0, float_0, str_0, str_0}
    module_1.side_effect(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    bytes_0 = b">\x0b8\xd1\x08,S"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    str_0 = "}5\rRTu0t3P%v@"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2641():
    var_0 = module_0.purge()
    error_0 = module_0.error(var_0)
    list_0 = [var_0, error_0, error_0, error_0]
    module_1.side_effect(list_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    int_0 = -185
    bytes_0 = b"\x05^\xec\x8d"
    tuple_0 = (int_0, bytes_0)
    bytes_1 = b"5"
    var_0 = module_0.template(bytes_1)
    var_0.__repr__(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    list_0 = []
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    float_0 = -5559.1173
    module_0.escape(float_0)


def test_case_2647():
    bool_0 = False
    str_0 = "@YDQ^j`=]|"
    var_0 = module_0.split(str_0, str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    int_0 = -1752
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    complex_0 = -730.85708 + 2125j
    module_0.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    str_0 = "hunIi"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.subn(none_type_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    str_0 = 'H1Bk%k+,<}-0NDH\nY"'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    complex_0 = 1194 - 1543.1807j
    list_0 = [complex_0]
    none_type_0 = None
    module_1.side_effect(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    error_0 = module_2.Error()
    none_type_0 = None
    module_1.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    bytes_0 = b"\x96s\x12\xf3%\xbb\xabl\x12\xf1\xe5\xf8\x15w\xda\x1c\x02"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    float_0 = 3576.03818
    tuple_0 = (float_0,)
    module_1.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    str_0 = ""
    none_type_0 = None
    module_0.subn(str_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    int_0 = -124
    bool_0 = False
    module_0.finditer(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    int_0 = 3868
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bytes_0 = b"(\\\xaa\xc4\xa6\xceQ\x8b\xd0\\R]\x95\x0e"
    module_1.side_effect(bytes_0, bytes_0)


def test_case_2666():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2667():
    enum_dict_0 = module_4._EnumDict()
    error_0 = module_0.error(enum_dict_0)
    module_0.template(enum_dict_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    str_0 = 'V#|x\r,2"Kd_-'
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    str_0 = "JGDP%R"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    bytes_0 = b"m!\xf3\xa7\xb4\x1b;\x1e\xd5\xf7\xf5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    complex_0 = 1388.43294 - 2234j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    int_0 = 487
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    int_0 = 3900
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    int_0 = -227
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    int_0 = -647
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    int_0 = -1448
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    int_0 = 1072
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    str_0 = "FZu\x0btRJ#cO\rW$ Y3QNO"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    str_0 = ""
    none_type_0 = None
    module_0.sub(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    float_0 = 2101.07
    module_1.get_new_command(float_0, float_0)


def test_case_2694():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2695():
    int_0 = -1708
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    float_0 = -726.12
    none_type_0 = None
    module_0.subn(float_0, float_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    bytes_0 = b"yB\xd5"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    float_0 = 1976.1299
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    int_0 = 436
    none_type_0 = None
    module_0.sub(int_0, int_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    str_0 = "2])qZfq-_j"
    str_1 = 'U^F[b|&"gZ,^/r'
    str_2 = "_2lW7(SN\\ahwf!CfQX@"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_2: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    str_0 = ":f&Af"
    var_0 = module_0.sub(str_0, str_0, str_0)
    none_type_0 = None
    module_0.sub(var_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    bytes_0 = b".\x9eO\x08"
    module_0.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    bytes_0 = b"X\x8e\x82S\x1a6\x1fmx\xc6A@\xbe"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    error_0 = module_2.Error(*list_0, **dict_0)
    int_0 = -1991
    set_0 = {int_0, int_0}
    module_0.compile(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bool_0 = False
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    int_0 = 1371
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    str_0 = "Qn$,\t=\x0b)"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    var_0 = module_0.purge()
    bytes_0 = b"-\x11\xba"
    module_0.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    str_0 = "!\x0cWI\x0cjKE0wf%\\gb3"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    float_0 = 1868.89
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    str_0 = "d:L\tb5id=gy)}P'1vm"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    str_0 = "<l1*RLNPqcNQ0$o"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    int_0 = -2162
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    float_0 = -322.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    var_0 = module_0.purge()
    str_0 = ""
    module_0.fullmatch(var_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    str_0 = '5mvL9<]?d["LGqp: @'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    int_0 = -2105
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    int_0 = -5633
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    float_0 = -2302.00281
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    int_0 = -1598
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    list_0 = []
    str_0 = "h"
    dict_0 = {str_0: list_0}
    module_2.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    dict_0 = {}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    str_0 = "@<bCU*,"
    var_0 = module_0.compile(str_0)
    module_1.side_effect(var_0, var_0)


def test_case_2740():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2741():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    bool_0 = True
    int_0 = 955
    tuple_0 = (bool_0, int_0)
    module_0.split(tuple_0, int_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    float_0 = 3017.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    base_exception_0 = module_3.BaseException()
    module_1.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    str_0 = "$r-6"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2749():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    bytes_0 = b'l\xc7\xa32\xf18\x85\xf1\xea\xca\xa07"\xec\x8e\x80\xe4"d\xc5'
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    float_0 = 366.122053
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_2754():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    none_type_0 = None
    str_0 = ""
    module_1.side_effect(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    bytes_0 = b"\xec\xab\xc8\x83\xe1\xd6q\xa8o\xf33/SNf"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    int_0 = 682
    none_type_0 = None
    module_0.compile(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    int_0 = 3239
    regex_flag_0 = module_0.RegexFlag.DEBUG
    module_1.side_effect(int_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bytes_0 = b'P\xcc\x92\x87"+e\x98m\x1a \x80\x1b\x81'
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_2761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2762():
    float_0 = -1169.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    bool_0 = True
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    str_0 = "edV^Hh<ZJnET."
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = -169
    var_0 = module_0.purge()
    tuple_0 = (int_0, var_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.side_effect(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    str_0 = "vLD2RovI\x0c"
    float_0 = 3174.174253
    tuple_0 = (str_0, float_0)
    module_1.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.split(bool_0, bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    bool_0 = True
    module_2.Error(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    int_0 = -2541
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    str_0 = "hNYh\nd`Ea,+8EqU-%"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    int_0 = 1017
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    int_0 = -1929
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    error_0 = module_2.Error()
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    float_0 = -3614.161298
    dict_0 = {float_0: float_0, float_0: float_0}
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    object_0 = module_3.object()
    module_4.unique(object_0)


def test_case_2779():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    float_0 = 2641.97
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    int_0 = -2426
    error_0 = module_0.error(int_0)
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    bytes_0 = b"\x106\xec\xb4^\xd0\t\x07\xf8jO\xe5\x985!\xd8\x99\xfd\x1b2"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    bytes_0 = b"\x83uA'\x0f\xa1\xa5\xf2\xb5\xdd\x95\xac\x92"
    var_0 = module_0.search(bytes_0, bytes_0)
    list_0 = []
    none_type_0 = None
    module_0.finditer(list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_0.compile(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    bytes_0 = b"H\xf7%V'\x0b\x9a)@W7\xba\x18\xb7\x01\x01\xcf\x0f\xca"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    var_0 = module_0.purge()
    str_0 = "D:FqLohAo$jSv"
    tuple_0 = (str_0, var_0, var_0)
    module_1.match(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    bytes_0 = b"\xce\x1f\x13\xa7\xda\x07\xbb[a\x12\x98\x9dZ\x80\xe1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bytes_0 = b"3\xda\x9e"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    str_0 = "}YUN!<8)Bq\x0ct:b1([-"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    bytes_0 = b"[\xd3\x7f*\xde\xe4\xc2\xac\xf0X\xd2W\xd4\xb6"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    str_0 = "k2PBplL\r`"
    bool_0 = True
    module_0.finditer(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    exception_0 = module_3.Exception(*list_0)
    module_1.side_effect(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    bytes_0 = b"X"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    int_0 = 3871
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    str_0 = "Z"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    base_exception_0 = module_3.BaseException()
    var_0 = module_0.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    str_0 = "Jx?}1o$"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    bytes_0 = b"\x15\x0e9J\x14"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    bytes_0 = b"\xdfk\x948\x80E3\x97"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.search(set_0, set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    int_0 = 59
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "<zf-lG'+\n"
    dict_0 = {str_0: str_0, str_0: none_type_0, str_0: str_0}
    module_3.BaseException(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    bytes_0 = b"c8\xb0\xcc2\x98K\x16\xa8\xe9\xfa\xa4yI\xb1j\xf2L\xf9"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    int_0 = 1425
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    int_0 = 20
    module_1.match(int_0, int_0)


def test_case_2816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2817():
    str_0 = ":\n[Cq#*R@BB=i0~rOH`"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    str_0 = ":[EHK2<z\n%o/\x0b>o^s~6"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    int_0 = 372
    tuple_0 = (int_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    str_0 = 'Q/hE[d_"M'
    dict_0 = {str_0: str_0, str_0: str_0}
    dict_1 = {str_0: dict_0, str_0: dict_0}
    module_1.match(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.search(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    int_0 = -3196
    tuple_0 = (int_0, int_0, int_0)
    module_0.subn(tuple_0, int_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    none_type_0 = None
    tuple_0 = ()
    module_1.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    int_0 = 745
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    bytes_0 = b"i\xe2\xef"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    int_0 = -852
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    int_0 = -2464
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    int_0 = 578
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    int_0 = 1384
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    none_type_0 = None
    float_0 = -357.423
    module_1.side_effect(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    set_0 = set()
    module_0.fullmatch(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    base_exception_0 = module_3.BaseException()
    set_0 = {base_exception_0, base_exception_0, base_exception_0}
    none_type_0 = None
    module_1.side_effect(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    int_0 = -456
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    base_exception_0 = module_3.BaseException(*list_0)
    module_1.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    str_0 = "-+hEb"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    dict_0 = {}
    module_0.template(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    float_0 = 1580.431
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    str_0 = ".*U-y"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.subn(set_0, set_0, set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    float_0 = 1758.91
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bool_0 = True
    bytes_0 = b"\xb8\xaa\x01\x96\x0eO\xf5\xb4>\x11\x05\x05\xd1\xb6\x18H\x1f\xdf\xe0"
    module_0.search(bool_0, bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    none_type_0 = None
    bool_0 = True
    module_0.findall(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    int_0 = -1244
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    str_0 = '(\\8"bAiT'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    int_0 = 2155
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.side_effect(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    int_0 = -1471
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    int_0 = -2784
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    bytes_0 = b">d\xb7@\x0b\x078\x94\xf1\x9d%\xb8nm\xa0\xf2"
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    str_0 = 'C\x0c"]Bh;h{Q!nxf-W'
    var_0 = module_0.template(str_0)
    dict_0 = {var_0: str_0}
    module_1.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    complex_0 = -3009.15767 - 273j
    module_0.Scanner(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bytes_0 = b"&\x94\x1d\xb3\xa0*\x0f\xae\xc5\x02%\x9f@\x86\xdc\x1b\xfb\xd5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    complex_0 = 1246.8 - 2227.54407j
    module_0.match(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    str_0 = "9*YQ0w4J2\t+8?s;?q"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    var_0 = module_0.purge()
    float_0 = -894.827797
    module_0.split(var_0, float_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    float_0 = 1873.068553
    module_0.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    float_0 = 1658.504
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    int_0 = 910
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    str_0 = 'b<-9,`ztA"|HLm?S'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    bytes_0 = b"m\xc2XL\x9a\x07\x0b\xfb|\x8a\xe9\xe4q\xfc\x84\xec\x1d\xf6%\xc0"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    exception_0 = module_3.Exception()
    bytes_0 = b"\x1boe\x9b\x0c\x92C\xe3C\xdb."
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    none_type_0 = None
    int_0 = -1552
    module_1.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    int_0 = 1412
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    int_0 = 1999
    module_0.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    bytes_0 = b"\x0fB\xd0#\x82\xae\xe2\xe7#\x8dh\x80\xe9\xdc\xb7\x8eRH\x9c"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.side_effect(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    int_0 = 1608
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    int_0 = -1458
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    str_0 = "T~EN!!;\\pMV.C"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    list_0 = []
    object_0 = module_3.object(*list_0)
    dict_0 = {}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    bytes_0 = b"\x00L\xe6\xf6l\x9b\n\xe6\xac\x0f\xf0,G \x93\x04"
    var_0 = module_0.purge()
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    bytes_0 = b"\x87\xf1\xfaN\x8b\x03m"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    bytes_0 = b"\x1ep\xf7\x9f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    bytes_0 = b"\xd7\x0boq\xb0\xfd\x04\x0c\xa8\x11X\xd0~\x96\xae\x86e"
    none_type_0 = None
    module_0.subn(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    error_0 = module_0.error(regex_flag_0, regex_flag_0)
    none_type_0 = None
    bool_0 = False
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    str_0 = "4RB8"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    bytes_0 = b"\x14\x13\xb9Q;\x9b\x8e\x8c?\xa6\xba\xb7\xb0\xf4\x913\x1f\x93\x96"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    complex_0 = 324.761 + 873.691j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    str_0 = "|k@./]"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2902():
    float_0 = 4277.5
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    str_0 = "?#J5\x0b"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    complex_0 = -377 - 5572.2j
    bytes_0 = b"\x11G\x0e\xe6\x95\xe0Azl\x8d\xaf#\xbf\\\x1e\xba\xa8v"
    module_0.sub(complex_0, bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    int_0 = -2662
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    int_0 = -2742
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    set_0 = set()
    module_0.split(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    set_0 = set()
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    bytes_0 = b"\\#\xa2U|L"
    module_1.match(bytes_0, bytes_0)


def test_case_2910():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2911():
    bytes_0 = b'\x8b\xdc\xfd\x14\x87n\xbb"\xc0\xe2\xbf\xd0\xd7*\xf4\xaa\xa8'
    module_0.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    tuple_0 = ()
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    str_0 = "r\\w~j;\x0c%\x0cx"
    str_1 = "sEqKG0Th"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    tuple_0 = ()
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    str_0 = ">|t"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    str_0 = "Z&f~HMzr(nC_w9%V)S"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    float_0 = -6.38
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    float_0 = 864.56
    none_type_0 = None
    module_0.match(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    int_0 = -3306
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    float_0 = -1897.66423
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    str_0 = "]uo4vq4KjlbM?T(p.a8G"
    module_0.split(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    str_0 = "Ql}X\\]\x0c7`"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_0.sub(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    float_0 = -1151.0
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__len__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    str_0 = ""
    none_type_0 = None
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    str_0 = "15R\\cW5Y7!X"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    complex_0 = 1190.846239 - 2856.448898j
    module_0.template(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    float_0 = -958.50921
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    bytes_0 = b"\xd6%N\xab\xdb\xd4\xe3\xe4\xae\xd5"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(none_type_0, bool_0)


def test_case_2936():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2937():
    bytes_0 = b"y\xa5\xcf?B=\xf4h\x84+\x17\xa7\xdc"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    str_0 = "1i{<S6&;?#UDf(|@"
    module_1.side_effect(str_0, str_0)


def test_case_2940():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2941():
    bytes_0 = b"~r2\x15\x99\x80\x15T\x8e|\x85\x0b\x9f\x00\x9d\xd0\xdc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    bytes_0 = b":y\x81(\x11\xa9\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bytes_0 = b"#g\x92\xa5\x9d\x1c\xfe\x80\xbb\xf7{"
    module_0.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    list_0 = []
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    dict_0 = {}
    exception_0 = module_3.Exception(**dict_0)
    var_0 = module_0.purge()
    error_0 = module_2.Error()
    module_0.finditer(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    bool_0 = True
    module_3.Exception(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    float_0 = -425.0
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    str_0 = 'Po:D!c+!HV#"E'
    float_0 = -3162.8
    dict_0 = {str_0: float_0, float_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    bytes_0 = b"A\tY\x1a\xdc"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    str_0 = "!Hv/1"
    var_0 = module_0.findall(str_0, str_0)
    module_1.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    str_0 = ">huvL"
    tuple_0 = (str_0,)
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    int_0 = -1536
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    str_0 = 'E*_7Alaxf=\rBvTh"5c8i'
    var_0 = module_0.search(str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    str_0 = "8*k[X\t'g'G^CG"
    str_1 = "YfY}"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    str_0 = "h"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    bytes_0 = b"2xl\xa5\x07\xed\x9aH\xcd3\xe8\xa6\xd2\xc2\x8b\xc0"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    bytes_0 = b"\x1f"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    str_0 = "q]3"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2969():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    int_0 = 94
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    float_0 = 2171.751
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    bytes_0 = b"!\xbb\xe2/k"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    bytes_0 = b'\xfb\x0f\xbc\xbck("\xef\xcd%\xa5\x88\x8fbf\xe5r\xf6fe'
    var_0 = module_0.purge()
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_4.EnumMeta(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    str_0 = "&6\th#/\niQsi)YuP$"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    var_0 = module_0.purge()
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    module_0.search(var_0, var_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = 2685
    str_0 = "l;p4%k;t;0m^(@\rD"
    dict_0 = {int_0: str_0, int_0: str_0, int_0: str_0, int_0: int_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    bytes_0 = b"\x81\xd5"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_2983():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    int_0 = -3046
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    float_0 = 1422.25
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    bytes_0 = b"\xcemy"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    str_0 = "7`N8v@vnu&z"
    var_0 = module_0.escape(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    dict_0 = {}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    str_0 = "2@ywwxqBI}e8\x0cvC,T3"
    dict_0 = {str_0: str_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    str_0 = "`]{;$"
    set_0 = {str_0, str_0, str_0}
    module_0.subn(set_0, set_0, set_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    str_0 = '(\tm2yg"'
    module_0.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    int_0 = -125
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    str_0 = "k\x0cGY.jY+7??!L"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2998():
    bytes_0 = b"\xf4\xff\x9f\xfc\xa9\xa6\x7f\x96\xc2\x15\xfa"
    none_type_0 = None
    var_0 = module_0.split(bytes_0, bytes_0)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    bytes_0 = b""
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    bytes_0 = b"\x18\xfc\xa1\x95\xad\xa2\xc0tr"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3005():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_0.sub(error_0, error_0, none_type_0)


def test_case_3006():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3007():
    bytes_0 = b""
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    str_0 = "^!DBx\x0cM"
    bytes_0 = b"`\x9f\x97\xeb\xef\xab\x98\xfbz/j\xba$\n"
    none_type_0 = None
    module_0.split(str_0, bytes_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    int_0 = 1618
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    str_0 = "gAo T{kM\t)q%#1AE"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    str_0 = "\n1AE"
    none_type_0 = None
    module_0.sub(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    int_0 = -154
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3017():
    bytes_0 = b"\xf8\xcerQ\x96@r\xee\x08"
    var_0 = module_0.compile(bytes_0)
    dict_0 = {bytes_0: var_0, var_0: bytes_0, bytes_0: bytes_0, var_0: bytes_0}
    module_1.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bytes_0 = b"8\x02?\xc5=M\xc1\xa7\x1e\xd9E\xab\xd3w\xba"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    bool_0 = True
    list_0 = [bool_0]
    module_0.subn(list_0, list_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    enum_dict_0 = module_4._EnumDict()
    str_0 = "M]H&?8"
    module_0.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3023():
    dict_0 = {}
    int_0 = -1627
    tuple_0 = ()
    tuple_1 = (dict_0, int_0, tuple_0)
    module_1.side_effect(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    int_0 = 491
    module_0.subn(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0}
    module_0.search(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    float_0 = -2878.7121
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: tuple_0, float_0: float_0, float_0: tuple_0, float_0: tuple_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    dict_0 = {}
    none_type_0 = None
    module_0.search(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    float_0 = 1069.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    bytes_0 = b""
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    float_0 = 915.161
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    int_0 = 1067
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    bytes_0 = b"5\xafu\xfcam\x80\x98\x82\xfd"
    none_type_0 = None
    module_0.sub(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3037():
    object_0 = module_3.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3040():
    str_0 = "4"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    float_0 = -124.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    var_0 = module_0.purge()
    bytes_0 = b'\x85\xf5\xe8NG"\x95;P\xc9\xb3\xcc:\x88mt\xfax'
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3044():
    none_type_0 = None
    list_0 = [none_type_0]
    error_0 = module_2.Error(*list_0)
    module_0.search(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    str_0 = "Zbi9y*nxNH#[S*DMX:0."
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    str_0 = "L{+BqLCuN.uZ+cF#nNW8"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    int_0 = -2653
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    str_0 = "ECf+BZlj<g<Isqb"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    int_0 = 198
    list_0 = [int_0, int_0, int_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    int_0 = 2748
    module_0.Scanner(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    int_0 = -128
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    float_0 = -338.0
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    auto_0 = module_4.auto()
    module_1.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    float_0 = 731.414189
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    float_0 = 1301.7
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3060():
    str_0 = "gx j"
    var_0 = module_0.purge()
    var_0.__delattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    int_0 = -1272
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    module_1.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    int_0 = 2017
    set_0 = {int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "qVuw"
    module_0.search(str_0, str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    int_0 = -4901
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    bytes_0 = b"Q\xd5'J\xd9\x92P\xac\x14~bt\xf1"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bool_0 = False
    set_0 = {bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    int_0 = -713
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    complex_0 = -5559.96419 - 330.77j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    int_0 = -981
    none_type_0 = None
    module_0.search(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    none_type_0 = None
    module_0.findall(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    bytes_0 = b" !\x15v\xde\xb5\x19\x80\xff\x02"
    var_0 = module_0.purge()
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    list_0 = []
    error_0 = module_2.Error(*list_0)
    none_type_0 = None
    module_1.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    int_0 = -4041
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    dict_0 = {}
    module_0.split(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    bool_0 = False
    error_0 = module_2.Error()
    module_1.match(bool_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    int_0 = -19
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    bytes_0 = b"\xf7\x03\x0f\xf8'\xbaV\xb1\xeb\xcc\x1a"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    enum_dict_0 = module_4._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0, enum_dict_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    int_0 = -2070
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"5B\xc5"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    bytes_0 = b"\xf8\xa5\xc1\xb5\x9fyn\xcaJ\xa1\xf8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    str_0 = "=|IXF:z&KW"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    str_0 = "{8"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    str_0 = ") W"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    float_0 = -145.94194
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    int_0 = 427
    module_4.EnumMeta(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    none_type_0 = None
    bytes_0 = b'\xde\xe0E\xae\xc1"'
    var_0 = module_0.escape(bytes_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3102():
    str_0 = ";f=%OZ6XDoh!r"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    int_0 = -2854
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    float_0 = -825.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    error_0 = module_2.Error(*list_0)
    module_1.side_effect(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    int_0 = 3316
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    dict_0 = {}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    str_0 = "\rhgQTC"
    var_0 = module_0.compile(str_0)
    var_1 = var_0.__dir__()
    module_1.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    tuple_0 = ()
    module_0.split(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    var_0 = module_0.purge()
    var_0.__iter__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    str_0 = "e~S7G(V"
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    bool_0 = False
    module_4.EnumMeta(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    module_4.auto(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    float_0 = 144.711731
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    set_0 = set()
    module_0.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bytes_0 = b'"\x9d\r\x84x_\xa8\xd2'
    list_0 = [bytes_0, bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_0.subn(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    str_0 = "2rT"
    var_0 = module_0.finditer(str_0, str_0)
    var_1 = module_0.purge()
    var_1.__contains__(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    bytes_0 = b"nb\x933\x94\xb7\x1eY4-\xd8\xbfs\x82\xdb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    float_0 = 3509.466005
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    int_0 = -186
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    error_0 = module_2.Error()
    set_0 = {error_0}
    list_0 = [set_0, error_0, error_0, error_0]
    module_1.side_effect(list_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    str_0 = ""
    dict_0 = {str_0: str_0}
    float_0 = 631.0
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    str_0 = ")c/\x0bn>6)z@"
    float_0 = 1162.7
    module_0.subn(str_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    bytes_0 = b"\xed4s\x14m\xc1\xf1\xd6\xb3:\x8f!F#\x80\x9d\xcd\x97\xdd"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    int_0 = -1093
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    complex_0 = -1382.2112 - 645.22341j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    str_0 = "x|*"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    int_0 = -1265
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    bytes_0 = b"y\x9c\xb1AU\xf7\x16\xc4"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    var_0 = module_0.purge()
    bool_0 = False
    str_0 = "2<$rc "
    tuple_0 = (bool_0, str_0)
    module_0.split(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    tuple_0 = ()
    module_0.sub(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    int_0 = 235
    module_0.split(int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    float_0 = -844.488
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, none_type_0, none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    float_0 = -417.69129
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    str_0 = "lOO9_e$0G"
    var_0 = module_0.escape(str_0)
    module_1.side_effect(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    complex_0 = -2329.978 + 1417.00868j
    list_0 = []
    module_1.get_new_command(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    int_0 = 138
    module_0.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    bytes_0 = b"V\x01\xda\xfe\xbf\x8bh\xe8\x92\x12K\x08[1\xe7T"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3152():
    int_0 = -239
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    float_0 = -1427.5179
    module_0.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    str_0 = '\\"]j8,n]'
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    bytes_0 = b"\xa6\x87\x7fF\x81-"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    str_0 = "E\nf\nkl"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = 239
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    str_0 = "\x0bWMkm6<+Oi/)"
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    complex_0 = -1587.217491 - 741.04j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    bytes_0 = b"\x1d\xeb\xcfxR\x88\x8f\xcc\x85z\xf9\xa7"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    float_0 = 661.4161
    module_0.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    float_0 = 308.014
    dict_0 = {float_0: float_0}
    module_1.side_effect(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    int_0 = -110
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    none_type_0 = None
    bytes_0 = b""
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    int_0 = 587
    none_type_0 = None
    module_0.search(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    str_0 = "&;<"
    none_type_0 = None
    str_1 = "e\r1`7dw3_O\ne\x0c@&i_"
    str_2 = "Q]GE-\tb)6/I,"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    complex_0 = 1927.35 + 1377.6723j
    none_type_0 = None
    module_0.findall(complex_0, none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    int_0 = -3001
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    str_0 = "f$Q9fFVA4PQ$cQCZ9"
    set_0 = {str_0, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    str_0 = "U6T6H4s0eh{p\n+"
    module_1.get_new_command(str_0, str_0)


def test_case_3179():
    enum_dict_0 = module_4._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_3180():
    str_0 = ".tt'szb~ ,+t\\x"
    module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3182():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    str_0 = "~v[p5:D"
    str_1 = "U."
    str_2 = ",]H("
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_2: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    enum_dict_0 = module_4._EnumDict()
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    str_0 = "#))"
    var_0 = module_0.escape(str_0)
    var_1 = module_0.finditer(var_0, var_0)
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3189():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    bytes_0 = b"gh|q^\x93=7\x90\x8b\xde%\xce\x1b\x81"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    float_0 = -2709.557011
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    bytes_0 = b"\xa9\xd0\x86\x7f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    bytes_0 = b"\xaa\xcb\x9e\xa3\xa6\x8e\xc9\x0f\xaf\x1d\xed\x1f8D\xa4\xe0\xe3"
    module_0.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    str_0 = "`|'|rcZ\"c;D 'IU "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    complex_0 = 1433.929 - 122.509j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    set_0 = set()
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    none_type_0 = None
    bytes_0 = b"F\x96\x02\x00:"
    var_0 = module_0.template(bytes_0)
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    float_0 = 2712.5
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    str_0 = "&Db"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    float_0 = 3007.74
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    int_0 = 3361
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    float_0 = -1959.4
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    float_0 = -1436.29472
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    int_0 = -2117
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    str_0 = ""
    var_0 = module_0.compile(str_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    str_0 = "."
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    tuple_0 = ()
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    bytes_0 = b"-\xf9\x80\xaej4\x0f\xc2\x17\xc3B"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    bytes_0 = b"\x06\x87\xd3\xeet\xb6\xf7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    str_0 = "Nw%$GF!f&#cBAcNSnYi"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    list_0 = []
    none_type_0 = None
    module_0.subn(list_0, list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    str_0 = "Mk\\&_,rG-;"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3233():
    set_0 = set()
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    str_0 = "4q<i"
    var_0 = module_0.template(str_0)
    dict_0 = {var_0: var_0, str_0: str_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3237():
    float_0 = -3638.463715
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    int_0 = 2255
    complex_0 = -3270.829598 - 478.54j
    dict_0 = {int_0: complex_0, complex_0: int_0, complex_0: int_0, int_0: complex_0}
    none_type_0 = None
    module_0.findall(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    float_0 = -995.889
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    str_0 = "A"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    int_0 = 1811
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    bytes_0 = b",\xf4\x99wH<1X4&\\}d\xd0\xe3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    var_0 = module_0.purge()
    none_type_0 = None
    bool_0 = True
    module_0.fullmatch(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    str_0 = ")=fE8q&qf."
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    float_0 = -782.396
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.search(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    int_0 = 2757
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    bool_0 = False
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    str_0 = "pmuS5lO~#"
    var_0 = module_0.template(str_0)
    list_0 = [str_0, var_0, var_0, var_0]
    module_1.match(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    int_0 = 823
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    base_exception_0 = module_3.BaseException(*list_0)
    dict_0 = {base_exception_0: none_type_0}
    module_1.get_new_command(dict_0, base_exception_0)


def test_case_3257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3258():
    float_0 = 1110.32
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    module_4.EnumMeta()


def test_case_3261():
    enum_dict_0 = module_4._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_3262():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    complex_0 = -2874 - 346.65j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    float_0 = -3554.951
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    str_0 = "V"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    int_0 = -554
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    bytes_0 = b"G\x0f\xac\xe0a\x12\x8e>\xa6\nK6J\xba\x1a\x97"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    int_0 = -520
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    none_type_0 = None
    str_0 = "y_>j;~:\tt>a^@#Sk"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    bytes_0 = b"\xd2\x87x\xab\xd5\x7f\xa8;\x0e\x92b\x06\xfd'\x9fH\xeb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    int_0 = 230
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    int_0 = 38
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    bytes_0 = b"\xc0\xcd"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bytes_0 = b" \x87\x165\xcf\xaa\xf1sx\x8boCk\xfa"
    var_0 = module_0.compile(bytes_0)
    set_0 = {var_0, bytes_0, var_0}
    module_1.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    int_0 = -1486
    bytes_0 = b"S\x80\xaa\x94q&\x14"
    dict_0 = {int_0: int_0, bytes_0: bytes_0}
    module_1.side_effect(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_3.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    str_0 = "LB*1Ei/Kv[&a=!x"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    float_0 = 1263.0
    str_0 = "R<{&9/#Q%i"
    str_1 = "dK6m\\W*>`@QZoQ\r9KC"
    module_0.finditer(str_0, float_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    int_0 = -1307
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, bool_0)
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    float_0 = 3145.879
    none_type_0 = None
    module_0.finditer(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    none_type_0 = None
    var_0 = module_0.purge()
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    none_type_0 = None
    module_3.Exception(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    auto_0 = module_4.auto()
    none_type_0 = None
    module_0.sub(auto_0, auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    bytes_0 = b"a\xda\x9bO\xed\x8a;\x17\xef\xddC\xb8,\xdf"
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.match(bytes_0, bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    int_0 = 822
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_1.side_effect(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    int_0 = 37
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    module_1.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    tuple_0 = ()
    var_0 = module_0.purge()
    tuple_1 = (tuple_0, var_0, var_0)
    module_1.side_effect(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    int_0 = -402
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    int_0 = 466
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    float_0 = -768.861
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    bytes_0 = b"\xa4\x81:&C"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    int_0 = 1223
    module_0.subn(int_0, int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    int_0 = 528
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    complex_0 = 3420.657 + 2393.928j
    module_0.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bytes_0 = b"\xbdw\x80"
    var_0 = module_0.search(bytes_0, bytes_0)
    module_1.side_effect(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    str_0 = "l`$\r/\rmvY'Lm:U~g]uJ"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    str_0 = "v9sfZX"
    none_type_0 = None
    module_0.split(str_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    bool_0 = True
    set_0 = {bool_0}
    module_0.subn(set_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    int_0 = -252
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    bytes_0 = b"l\x04.\xc0\x15#\xcd\x8f5\xfe\x06"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    bytes_0 = b"\x94\x1c\xc4Lv\xe6j"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    complex_0 = -2563.562 + 1155.8j
    module_0.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bytes_0 = b"'\xbb\xa1?g*"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3331():
    int_0 = 1989
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


def test_case_3333():
    int_0 = -2140
    none_type_0 = None
    str_0 = "~Ax|S+K"
    str_1 = "|^[o4!{'#OreB"
    dict_0 = {str_0: int_0, str_1: none_type_0, str_1: int_0, str_1: str_0}
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(int_0, int_0, none_type_0, none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    complex_0 = 2099.18354 + 535.4j
    module_0.subn(complex_0, complex_0, complex_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    str_0 = ">y=)s\tpMsu"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    str_0 = "?p=Td\nAYx\\"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    str_0 = "<N%d05x~q\x0cf550Qc"
    none_type_0 = None
    module_0.split(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    float_0 = 184.231
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    int_0 = -2310
    complex_0 = -2045.943 + 830.6318j
    module_0.search(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    float_0 = -149.7234
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    none_type_0 = None
    bytes_0 = b"n\x8ax}\xf2"
    module_1.get_new_command(none_type_0, bytes_0)


def test_case_3345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3346():
    complex_0 = 2165.9734 + 2322.1j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    complex_0 = 2258.609 - 632.2113j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    int_0 = -280
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    bool_0 = False
    regex_flag_0 = module_0.RegexFlag.DEBUG
    module_1.get_new_command(bool_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    int_0 = -2198
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    int_0 = 754
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    str_0 = "\\A\x0b811.?D4VU@b?H[p"
    none_type_0 = None
    module_0.split(str_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    list_0 = []
    module_4.auto(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3359():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    int_0 = -1420
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    complex_0 = -1694.1761 + 388j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    bool_0 = False
    list_0 = [bool_0]
    module_3.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    str_0 = "W\nC"
    list_0 = [str_0, str_0]
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


def test_case_3366():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3367():
    int_0 = 2524
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    int_0 = -438
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    int_0 = 2088
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    str_0 = 'cS.:"1'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    str_0 = "%<M"
    list_0 = [str_0, str_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    int_0 = -3130
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    str_0 = "x4OH"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    int_0 = 1444
    module_0.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    int_0 = -1685
    module_0.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    bytes_0 = b"\x0b\x99\x8f\x84|\xd4"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    str_0 = "8M|]jVR)"
    var_0 = module_0.escape(str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    int_0 = -1983
    set_0 = {int_0, int_0}
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bytes_0 = b"U\x1d\xdd\xa6,8,E\x7f\xea~L\x7f\x00"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    int_0 = 2177
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    complex_0 = -1903.8 - 2076.857j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    bytes_0 = b"\x98"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    bytes_0 = b"dEL\xe5"
    bool_0 = True
    module_1.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    dict_0 = {}
    list_0 = [dict_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    none_type_0 = None
    str_0 = '\x0c"RbE'
    dict_0 = {str_0: none_type_0, str_0: str_0}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    float_0 = -99.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    int_0 = -7
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    auto_0 = module_4.auto()
    module_0.sub(auto_0, auto_0, auto_0, auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    int_0 = 1275
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    bytes_0 = b"3F\xea\xda\x0c\xcb\x02*\x12"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    int_0 = 732
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    bool_0 = True
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    int_0 = -838
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    float_0 = -2903.8401
    list_0 = []
    tuple_0 = (float_0, list_0)
    tuple_1 = (tuple_0,)
    module_1.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    float_0 = 1294.83
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = -190
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    complex_0 = 564.059 + 292.249398j
    bool_0 = False
    tuple_0 = (complex_0, bool_0, complex_0)
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    str_0 = "oXg8IU/l1A*$(`"
    dict_0 = {str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    str_0 = "\\"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    bytes_0 = b"\xfa\x89"
    module_0.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    str_0 = ".]eo%\nf)z"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    str_0 = ",k3C,\x0bMm$RU7wEI"
    none_type_0 = None
    module_0.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    float_0 = 1068.438
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    complex_0 = -842.93403 - 2229.63541j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    bytes_0 = b"Dwe\x01\x90u\x03\x08%}"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    none_type_0 = None
    module_1.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    int_0 = 438
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    float_0 = 2724.92433
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    str_0 = "#]uAC&#"
    bytes_0 = b'\xf9\x05n\x13\x103"\xce,\xab+y\xdd\x0c\xb7m\x11\xbd\xf7'
    module_1.side_effect(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    complex_0 = 734.805275 + 675j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    int_0 = -939
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    str_0 = ".Ql%%v,x,bjc"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    bytes_0 = b"]z}\x11\xda\x93\xaa\xb6"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    var_0 = module_0.purge()
    list_0 = [var_0]
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    bytes_0 = b"FdT\x9cx\xd6\x90\xc4\x85\xbeS\x95\xdeh"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    str_0 = ",n\x0bxI"
    var_0 = module_0.fullmatch(str_0, str_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    enum_dict_0 = module_4._EnumDict()
    module_0.findall(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    float_0 = -1964.81336
    none_type_0 = None
    module_0.sub(float_0, none_type_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.findall(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    float_0 = -1066.533583
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    var_0 = module_0.purge()
    error_0 = module_0.error(var_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    var_0 = module_0.purge()
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.findall(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    exception_0 = module_3.Exception()
    module_0.subn(exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    int_0 = 1187
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    str_0 = '}8(";\t&NN!J-;~\x0cM'
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    str_0 = ""
    str_1 = "`~c>:c*H"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    float_0 = -2058.415
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    complex_0 = 256.16 - 854.8j
    list_0 = [var_1, complex_0, complex_0]
    str_0 = '?S|4\tq?%N\\S"'
    module_0.finditer(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    int_0 = 757
    none_type_0 = None
    module_0.compile(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.findall(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    object_0 = module_3.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [list_0, list_0]
    module_1.match(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    str_0 = "<:4ne;&K=;t8x,V6#;m"
    var_0 = module_0.match(str_0, str_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    str_0 = 'w/a0f~eV"RrF$J'
    list_0 = [str_0]
    module_1.side_effect(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3459():
    str_0 = "*&(N!`"
    set_0 = set()
    module_1.side_effect(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    float_0 = 1357.355839
    module_0.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    bytes_0 = b"\xf6D\xe1\xe8\xa5\xd7,V\xaaQ\xa2t'\xec\xfa<B5"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    str_0 = ";hN,"
    error_0 = module_0.error(str_0)
    set_0 = {error_0, error_0}
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    bytes_0 = b"G\x84\xc0Q\xda>\xe7K\x8d6_:\x91"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    list_0 = [var_1, var_1, var_0, var_1]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    int_0 = 4825
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    int_0 = 275
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    str_0 = ".b@!"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    bytes_0 = b".a<\xfb\x16'\xf9+\xb1`|\xab"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    tuple_0 = ()
    module_0.search(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    bytes_0 = b""
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bytes_0 = b"p%\x9c\x85\xa8\xab ~"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    float_0 = -197.048
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    str_0 = "~O\t"
    str_1 = "S.x\x0cZF,~tL_Z<:ieT"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    int_0 = 4807
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.side_effect(list_0, none_type_0)


def test_case_3482():
    error_0 = module_2.Error()


@pytest.mark.xfail(strict=True)
def test_case_3483():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    int_0 = 886
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    bool_0 = False
    str_0 = "GVWMI#ns"
    dict_0 = {str_0: str_0}
    module_4.EnumMeta(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    str_0 = "Y-i/X[u>"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    int_0 = 4067
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    int_0 = -2404
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    int_0 = 930
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    complex_0 = -2684.7174 + 602j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    var_0 = module_0.purge()
    bool_0 = True
    module_1.side_effect(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    complex_0 = -614.6 + 205.4655j
    module_0.Scanner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    var_0 = module_0.purge()
    int_0 = -2269
    var_1 = module_0.purge()
    var_1.__setattr__(int_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    bytes_0 = b"[\xc8US\xe6\xb5J\x03\xd4"
    module_0.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    bytes_0 = b"k\xc8#N\xc7\xb2\x03hI!\xa02\xf6p>s\xfc\xa5\xf9h"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    enum_dict_0 = module_4._EnumDict()
    dict_0 = {}
    module_0.split(dict_0, dict_0, flags=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    set_0 = set()
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    str_0 = "+IMdv[K)mR|*+[%M[kT6"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    none_type_0 = None
    bytes_0 = b"\xe0\x86"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    int_0 = 182
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    list_0 = []
    dict_0 = {}
    module_4.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    str_0 = "3E"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    int_0 = -490
    list_0 = [int_0, int_0]
    module_1.side_effect(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    float_0 = -1108.38799
    module_0.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    set_0 = {regex_flag_0, regex_flag_0}
    list_0 = [set_0, set_0]
    module_1.side_effect(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    bytes_0 = b":\x01\xe2\x10\xed"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bytes_0 = b"\x93\x87\x19\x8f\x88\x0c\xd4\xcd4+U\x8f\xc8jp\xc1`\xdb\x95"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    float_0 = -974.27
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    complex_0 = -1056.856608 - 3005.542337j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    float_0 = 446.0
    module_0.subn(list_0, list_0, float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    str_0 = "+[3%K"
    none_type_0 = None
    module_0.sub(none_type_0, str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    bytes_0 = b"\x98Y8\x1a\xd8\xf6\x90\x19\x8e\xa8\xeb\x8c\xfd\xaf\x18\x041"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    str_0 = "kmG "
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, none_type_0, bool_0)


def test_case_3532():
    dict_0 = {}
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(dict_0, dict_0, dict_0, dict_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    str_0 = "-"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    str_0 = "IWG"
    module_0.sub(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    int_0 = 95
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0]
    module_0.finditer(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    str_0 = '\tzef&w\r"\r!T}g'
    var_0 = module_0.search(str_0, str_0)
    str_1 = "o,a"
    list_0 = [str_1]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    complex_0 = 770.7 - 1872.75304j
    float_0 = -2548.69
    module_1.get_new_command(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_1.side_effect(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    str_0 = "g{ Aws/Y(o)^.x"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    exception_0 = module_3.Exception()
    bool_0 = True
    module_0.fullmatch(exception_0, exception_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    bool_0 = True
    set_0 = {bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    var_0 = module_0.purge()
    module_0.Scanner(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    str_0 = "xkiH>2TX-b o*"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = 1753
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.finditer(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    float_0 = 413.367135
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    bytes_0 = b"\xb3\xa1\xde\xd8\xf9\x12\xc6|\xed\xb3\xec"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    bytes_0 = b"\x84v\xfe*9\x96\xad\xed)\xed\x9a\xd9T`|o\xdf\xa3\xd50"
    module_0.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    bytes_0 = b"\x9f\xc9\xaf\xf2YN\xfeo\x87\xdc/"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    float_0 = -1914.96905
    list_0 = [float_0]
    bool_0 = True
    str_0 = "7s$\x0cf'#M;qP^bCu]mw*\\"
    tuple_0 = (float_0, list_0, bool_0, str_0)
    module_0.match(tuple_0, bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0)


def test_case_3564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3565():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3567():
    float_0 = 37.282407
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    str_0 = "l@^N^#dp"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    str_0 = 'qxvS"-T}hE0L/'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    dict_0 = {}
    module_0.search(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    float_0 = -321.0
    none_type_0 = None
    module_0.subn(float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    bytes_0 = b"\xa4\xf2\xbb\xa1"
    float_0 = -1064.570149
    module_0.subn(bytes_0, bytes_0, bytes_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    int_0 = -115
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    bytes_0 = b'\xf6\xb3"\x04\xa7\xe7x\xce\xfe\xaau\x85\xb6h\xf0\x81\x06'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    bytes_0 = b"-\x86'3N\xf9e\x83\xfa/^p\xc1eP\x1d\x93\x86"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3581():
    bytes_0 = b'\x8b\xfbvWC\x89\x89\xceJ\xe4"\xcd'
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    bytes_0 = b'\xb2\xcc1z5\xfb\x1d"\xad\x85I\xfe\xaa\xf9\x92\x80'
    var_0 = module_0.search(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    module_1.side_effect(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    float_0 = -519.94
    var_0 = module_0.purge()
    tuple_0 = (float_0, float_0, var_0, var_0)
    module_1.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    int_0 = 1526
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {}
    module_1.side_effect(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    none_type_0 = None
    bytes_0 = b"+\xc3\xfe6\xc8\xdei"
    module_0.subn(none_type_0, none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    str_0 = "8`o`/pO"
    none_type_0 = None
    module_0.subn(str_0, str_0, none_type_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    str_0 = "c"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    str_0 = "hC6r_"
    dict_0 = {str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    none_type_0 = None
    bytes_0 = b"+\xfa{\xedB\xd6_\x83\x8e\x05\x7f\xff\x96"
    module_0.subn(none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    dict_0 = {regex_flag_0: regex_flag_0}
    module_1.side_effect(regex_flag_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    str_0 = "N(v#1dXG?B\t n.lRm'"
    module_0.subn(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    module_0.compile(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    str_0 = "?@~k<FtP>\r2R}k?~?:"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bytes_0 = b"\x08\xe7J\xe2\x99{2\xfc\x18\xd4\xeeC\xba\xc0\xaa\xf7"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    str_0 = "@;NiZYU&%\x0b@VI"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    bytes_0 = b"\x1e6\xe7\xf5y\xc4\xaad\xb6\x993#"
    var_0 = module_0.compile(bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_0.sub(base_exception_0, base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    int_0 = 900
    list_0 = [int_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    str_0 = "^/)kyg&D%"
    module_0.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    complex_0 = 1543.27 + 2921.5735j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    int_0 = 2216
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    set_0 = set()
    none_type_0 = None
    module_0.search(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    complex_0 = -3226.9 - 1133.97j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    float_0 = -3033.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    complex_0 = 824.784 + 465.2378j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    bytes_0 = b"\xdeh\xff[\x9b\xf0\x17\x11\xab\x8b\x1a\xc0P\xc5\xec\xb2\x86\x11\xf6"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    int_0 = -2294
    set_0 = {int_0}
    tuple_0 = (set_0, set_0)
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    int_0 = 135
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    int_0 = 1993
    module_0.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    bool_0 = False
    none_type_0 = None
    module_1.side_effect(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    int_0 = 3946
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    str_0 = "[z0"
    module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    int_0 = 443
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    str_0 = "h[:Mso"
    module_0.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3635():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    bytes_0 = b"ys7(Z\xe9\xfd\x89\x96\xf8\xbe\xa3Dl\xa6\x96\xbeH"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    str_0 = "$"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    int_0 = 519
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    int_0 = -3112
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    bytes_0 = b"\xfe\xf3\x1b\xce\xcbv\xc7J\x87x\xfd\xfc\xc2\x81Xd\x07"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    none_type_0 = None
    module_0.split(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    var_0 = module_0.purge()
    var_0.__contains__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    error_0 = module_2.Error()
    module_0.fullmatch(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    bool_0 = False
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    error_0 = module_2.Error()
    dict_0 = {}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    float_0 = 257.6
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    float_0 = 685.8
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    int_0 = 689
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    str_0 = '"\x0b4hGy(l@&; 31'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    set_0 = set()
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    str_0 = "p=f=r\x0c|D"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    set_0 = set()
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    int_0 = 158
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    str_0 = "g,#6H\n\n_ I;Sv82x5L@"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    int_0 = -183
    tuple_0 = (int_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3665():
    str_0 = ")"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    set_0 = set()
    bytes_0 = b"\xb4U\x18\xa8\xd0f\x99\x0c\x86"
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    list_0 = []
    module_0.findall(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    float_0 = -5590.62
    module_0.split(float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    float_0 = 1352.9177
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    int_0 = -2094
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    int_0 = -1593
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    float_0 = 1863.961128
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    bytes_0 = b"\xd60\xd9Q\xb5\xfec\xeb\x9c\x10e\x99\x10n\xbb\x90\x91\xf1F"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    bytes_0 = b"\x8a\xaf"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3681():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    float_0 = -40.059461
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    complex_0 = -1645.04 - 87.45j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    str_0 = "xS"
    var_0 = module_0.escape(str_0)
    module_0.Pattern(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    int_0 = 1506
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    str_0 = "bgMW|g\tk7mg{xOO.Gf=0"
    list_0 = [str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    str_0 = "98Y@"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    bytes_0 = b"h\xd9k)\xb7u\xc7\x05\xfc\xab8H\xe0\xcd\x06\x01\xb3\xcb\xedx"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    int_0 = -3443
    str_0 = "iTn\x0b&Vi"
    module_0.finditer(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    str_0 = "B^;QZ5\\"
    var_0 = module_0.purge()
    var_0.__iter__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    int_0 = 1965
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    bytes_0 = b"\xec\x17_\x07\xbe\xd0\xa0\xc5\xce?\x8a\x00\xab&\x17\xab=\xc4\xaf"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    int_0 = 74
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    str_0 = "%^>;G/YmLJp4^G"
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    none_type_0 = None
    bool_0 = False
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    str_0 = '\x0bQy[b] z1#\x0c7Mj"j'
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    str_0 = ""
    var_0 = module_0.template(str_0)
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    int_0 = -2277
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    str_0 = "(W)t)s{Cv3-<t"
    module_0.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    str_0 = "gCLCKy"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    int_0 = 2061
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    float_0 = -1007.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    bool_0 = True
    bool_1 = False
    module_0.subn(bool_0, bool_1, bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    float_0 = 3195.622
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    int_0 = 474
    none_type_0 = None
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    bytes_0 = b"\xb5k\xed"
    var_0 = module_0.template(bytes_0)
    set_0 = {bytes_0, bytes_0, bytes_0, var_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3723():
    str_0 = "sW2V;=g0f(]f"
    var_0 = module_0.escape(str_0)
    var_1 = module_0.compile(var_0)
    module_1.side_effect(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    bytes_0 = b"\x0f\xcaS"
    var_0 = module_0.escape(bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    bytes_0 = b"<(\xc8\xdf\x96-\xe2\xa2\x9d\xf2\x13\xe0\xef=63(3[u"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bytes_0 = b"\xbb\xc0\x8fD\x03\x8e\xca\xbe\xbau\xac\x92\xd2\x0e\xcaj"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    bytes_0 = b"g\x9a\x873\x02\xd4\x90\xb7s_\x15\xe0\x8b)\xb1\xda[\xe4"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    exception_0 = module_3.Exception()
    module_0.split(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    str_0 = "oCRru)s?!#"
    tuple_0 = (str_0, str_0)
    set_0 = {tuple_0}
    module_1.side_effect(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    bytes_0 = b"y\xba\xbf_\xcfF\x8b"
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bytes_0 = b"\xc5\x9f0p\xa9\xf7i"
    complex_0 = -47 + 2568.1j
    module_1.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    bool_0 = True
    list_0 = []
    module_0.sub(bool_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    bytes_0 = b"e\xa8s\xa3\xae\xda"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    complex_0 = -4344.52 + 720.345j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    bytes_0 = b"\x05\xf1\x9e\xb0C"
    none_type_0 = None
    module_0.sub(bytes_0, none_type_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    bytes_0 = b"\xc9H\x95L\x05"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    bytes_0 = b"\xee\x80K<\xe3mn|\x1aK\xc6\xfb"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    bytes_0 = b"N8\xc7Ba6C\x02_\xfey\xc7e\xa2\xa6\xe55\xba\x07\x84"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    float_0 = -1641.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    int_0 = 15
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    bytes_0 = b"\xf6\xd9\x10\xb4H"
    var_0 = module_0.compile(bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3749():
    dict_0 = {}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    float_0 = -1210.0
    list_0 = [float_0, float_0]
    module_0.subn(list_0, float_0, list_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    float_0 = 3708.22417
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    none_type_0 = None
    list_0 = []
    module_0.fullmatch(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    str_0 = "[=95>}S"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    int_0 = -1345
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    str_0 = "G&TmKlLaRe<H{/>\n"
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    dict_0 = {}
    exception_0 = module_3.Exception(**dict_0)
    none_type_0 = None
    module_1.side_effect(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    none_type_0 = None
    str_0 = ""
    var_0 = module_0.finditer(str_0, str_0)
    var_1 = var_0.__dir__()
    var_1.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    bytes_0 = b"a\xca[\xa5\xe7+t:\xc8\x135&\xba\xcf\xdf"
    module_0.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    float_0 = 3928.8
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    none_type_0 = None
    var_0 = module_0.purge()
    dict_0 = {var_0: none_type_0, var_0: none_type_0}
    module_1.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    bytes_0 = b"\xb3\xccp"
    none_type_0 = None
    module_0.finditer(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3765():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3766():
    dict_0 = {}
    module_0.finditer(dict_0, dict_0)


def test_case_3767():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3768():
    str_0 = "HG"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    var_0 = module_0.purge()
    set_0 = {var_0}
    module_1.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    exception_0 = module_3.Exception()
    float_0 = -955.25
    none_type_0 = None
    module_0.split(float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    dict_0 = {}
    none_type_0 = None
    module_0.fullmatch(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    int_0 = -4995
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    int_0 = -3145
    set_0 = {int_0, int_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    str_0 = "p|r\x0b@qq\\am9G2`"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    str_0 = "4oOF,9"
    error_0 = module_0.error(str_0, pos=str_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.search(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    bool_0 = True
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    str_0 = "*\x0cT"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    int_0 = 406
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    float_0 = -2464.48
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    var_0 = module_0.purge()
    str_0 = "v3$oTBl\\.v[$HXo,"
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    float_0 = 430.0
    module_1.match(float_0, float_0)


def test_case_3795():
    bytes_0 = b"\x82\xcf\xce\x9bS\x0b\x053DQ)r"
    var_0 = module_0.escape(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    str_0 = "=Xo+@x6\x0b"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    bool_0 = False
    int_0 = -1190
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    int_0 = 774
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.template(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    bytes_0 = b")Zm\xfev\xda\xd5V"
    bytes_1 = b"\xb2\x9eH\xb8\x97\xde\xf8\xa6"
    module_1.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    float_0 = -590.83
    none_type_0 = None
    module_0.sub(float_0, none_type_0, none_type_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    int_0 = -647
    tuple_0 = (int_0,)
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    str_0 = "($|#uP0j0N|\\>&Z&0'M"
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {str_0: list_0}
    module_3.BaseException(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    int_0 = -1447
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    complex_0 = -1381 - 3520.98j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    int_0 = 1352
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    int_0 = -2853
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    bytes_0 = b""
    module_0.subn(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    var_0 = module_0.purge()
    module_4.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    bytes_0 = b'\xd8\xb4\xb4\xcb\xb0N\x86N"u\xb8\xdf\x04'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    str_0 = "y"
    module_0.subn(str_0, str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_0.fullmatch(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    int_0 = -1355
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    str_0 = "/u;uGH;"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    int_0 = -2666
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    complex_0 = -2689.86874 + 1932.4j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_1.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    var_0 = module_0.purge()
    var_0.__delattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    module_1.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    bytes_0 = b"\xa8j\\\xeaR\xdc\xf4\x8a\xa2x\x1a\xfd'\xf9\x86\xcf\xb8X\x8e\xef"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    str_0 = "^*pgV)hA<w}"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    none_type_0 = None
    str_0 = "%iG"
    var_0 = module_0.escape(str_0)
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    complex_0 = -2725 - 2577j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    int_0 = 1587
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    int_0 = 1271
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    int_0 = -376
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bytes_0 = b"\x91P\x8fJVa\x11\xdd\x0f8\x8e\xb4\xa25\xc4\xdb\x13\x95"
    module_0.Pattern(**bytes_0)


def test_case_3839():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3840():
    none_type_0 = None
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_1.get_new_command(none_type_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    bytes_0 = b"uv\xdf!\xf2\x9c\x06!"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bytes_0 = b"\xfb\x1f\\8\xa1Y/\xb79\x9f\xf2\x07"
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    int_0 = -2548
    module_0.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    dict_0 = {}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    float_0 = -495.324
    list_0 = [float_0, float_0, float_0]
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    str_0 = "hEy"
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    list_0 = []
    none_type_0 = None
    module_0.sub(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    int_0 = 3169
    list_0 = [int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bytes_0 = b"\x03"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    bytes_0 = b"-X\x99\x00\nw\x0c\xc1uD7\xe4\x05\xa2\xa3\xf9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    int_0 = 3575
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    int_0 = 182
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    bytes_0 = b""
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    module_0.sub(var_0, bytes_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    bytes_0 = b"%\xbc\xf1\x10M\x13\x8dp\xdd"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    str_0 = '"+k+8a\nT_.r-U'
    set_0 = {str_0}
    bytes_0 = b"\xfc%:\x19\x7f\x90<"
    list_0 = [bytes_0]
    list_1 = [set_0, set_0, bytes_0, list_0]
    module_1.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    int_0 = -764
    list_0 = [int_0, int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    float_0 = 4689.2
    list_0 = [float_0, float_0]
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    list_0 = []
    module_4.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3865():
    float_0 = -3359.910325
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    int_0 = -4819
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    bytes_0 = b"xr\xdf\x98\xee\xc3\xff\xc6"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bool_0 = False
    set_0 = {bool_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    bool_0 = True
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    int_0 = -2219
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    int_0 = -388
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    var_0 = module_0.purge()
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    int_0 = 1036
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    float_0 = 864.97
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    str_0 = ","
    var_0 = module_0.purge()
    var_0.__setitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    str_0 = "\rA(s1 6}"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    int_0 = -114
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    bytes_0 = b"\x88l\x10\x89\x89\xa8wX\xe8\xcd\xd3\x91\xba3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    int_0 = -794
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    str_0 = "I\x0c^7qTN'VA=D"
    var_0 = module_0.compile(str_0)
    module_1.side_effect(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3886():
    int_0 = 574
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    str_0 = " ^kbkY^X9u"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    bytes_0 = b"\x10\xdeGK\xd1\xf7\x8a\x85S\x1c0I\xfc\x8f\xe6\xe7b"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    error_0 = module_2.Error()
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    int_0 = -2
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    var_0 = module_0.purge()
    dict_0 = {}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    set_0 = set()
    module_0.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bytes_0 = b"\xd8E\xecA\xf6"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    complex_0 = 1818 - 1390.55j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    int_0 = 2711
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.split(set_0, set_0, set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    bytes_0 = b""
    int_0 = 649
    module_1.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    float_0 = -1130.3
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    bytes_0 = b"\xde"
    none_type_0 = None
    module_0.subn(bytes_0, none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: none_type_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    bytes_0 = b"aQ\xeev\xbb\xab\x14\x1a$\x05"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    complex_0 = 1333.33 + 1639.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    int_0 = 3024
    bool_0 = False
    module_1.side_effect(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    tuple_1 = (tuple_0,)
    module_1.get_new_command(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    float_0 = -1322.7922
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    list_0 = []
    none_type_0 = None
    module_0.split(list_0, list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    bool_0 = False
    int_0 = 407
    dict_0 = {bool_0: int_0, bool_0: int_0, bool_0: bool_0, int_0: int_0}
    var_0 = module_0.purge()
    var_0.scan(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = 3434
    none_type_0 = None
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_3.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    float_0 = 1299.069897
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    bytes_0 = b"\x80f"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    int_0 = 152
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    str_0 = "_2$`S"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    str_0 = "t\x0c\no"
    list_0 = [str_0]
    str_1 = "Fa>b[=<$\t.Yps"
    str_2 = "X*:pf'+6;=Fn-CwzSC"
    dict_0 = {str_1: str_1, str_1: list_0, str_2: str_0}
    module_0.Match(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    bool_0 = True
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    int_0 = -796
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    bool_0 = False
    int_0 = -124
    module_0.search(bool_0, int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    bytes_0 = b"\xf9\xe4\x1cQ\x97\xef\x1ep\xffC\xfc\x90\x17\nb\x81\xaa"
    module_0.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    float_0 = -1581.0
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    int_0 = -1470
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    float_0 = -1410.1916
    module_1.match(float_0, float_0)


def test_case_3933():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3934():
    float_0 = 105.0
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    bytes_0 = b"\xf5\x82\xd6<tj\x0e\xbdu\\n\x98\xe4\xa6\x82\xe4\xd4-"
    list_0 = [bytes_0]
    module_0.sub(list_0, bytes_0, bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    bytes_0 = b"c\x18\x82\x9d\x90\t"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    bool_0 = True
    bytes_0 = b"\x9d\x146\x8e\x82\xb5\x99\xee\xcc"
    module_1.side_effect(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    str_0 = "Uwp7GbA^SI=U\\?+4K"
    dict_0 = {str_0: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    int_0 = 2787
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    str_0 = "#N:j[u"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    int_0 = -1884
    none_type_0 = None
    module_0.template(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    int_0 = -371
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    float_0 = -3438.50895
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bytes_0 = b"\x1b\xe3\xf0\xb1\xb3"
    var_0 = module_0.template(bytes_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    tuple_0 = ()
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    base_exception_0 = module_3.BaseException()
    module_1.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    float_0 = 5583.886
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    bytes_0 = b"\xb5>\xc3%p\x8f\xa2\xd8\xdd'\t\xe8\xe7>e\xb3\xa4\xba"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bytes_0 = b"\x89\xf8Y[\x8e\x9b\x9e\x19"
    module_0.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    bytes_0 = b"wB"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3960():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    bytes_0 = b"\x9a\x05\xdd"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    bool_0 = False
    module_1.match(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    int_0 = 958
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    int_0 = -550
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    bytes_0 = b"j\xf38\xa1J4*Kn\x03"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    bytes_0 = b"l\xd8p\xb2\x9e\xa4\xda"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    str_0 = "e;Yc_#E8R5L!)"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    float_0 = 3060.95934
    none_type_0 = None
    module_0.subn(float_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    bool_0 = False
    bool_1 = True
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    enum_dict_0 = module_4._EnumDict()
    bool_0 = True
    int_0 = 2750
    dict_0 = {bool_0: int_0, bool_0: int_0, bool_0: int_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    bool_0 = True
    int_0 = -885
    module_0.split(int_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    error_0 = module_2.Error()
    module_0.sub(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    bytes_0 = b"\x07"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    list_0 = []
    bool_0 = False
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    str_0 = "1Mc]\n3\n6VyZ|49O[rQ\rh"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    set_0 = set()
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    bytes_0 = b"\xa7\x80\xb2\xb7G=\x04B\x97\xea"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    bytes_0 = b"\x88\x14\xf9\xedeb\xd1\xa0f@N3\xab\x94,\x98Z\xf9XN"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    int_0 = 2146
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    bytes_0 = b"\xef\xec\x9cw\x1f\xaaS\xfeE\xb6\xd0\x1a\xee\x178\x8d\xaf\xda\xa4\xc4"
    var_0 = module_0.match(bytes_0, bytes_0)
    module_0.sub(bytes_0, var_0, var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    none_type_0 = None
    module_3.Exception(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    error_0 = module_2.Error()
    none_type_0 = None
    module_1.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    list_0 = []
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3996():
    bytes_0 = b"\x9c\x1e{\xde\x00\\\xecR!\xc9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    bytes_0 = b"L\x1f\xe3\nVB\xe3\xa6\xb8U2H\xfd"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    int_0 = -1064
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    bool_0 = True
    none_type_0 = None
    error_0 = module_0.error(bool_0, pos=none_type_0)
    module_1.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    int_0 = -3570
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    dict_0 = {}
    none_type_0 = None
    module_0.subn(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    str_0 = "}s[LB2.Hg6u%Gp<Kli0"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    int_0 = 1005
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    str_0 = 'Ul."0:z'
    var_0 = module_0.purge()
    var_0.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    float_0 = 2701.359
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    int_0 = -1628
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    bool_0 = True
    int_0 = -2652
    tuple_0 = (bool_0, int_0)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.error(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    bytes_0 = b"G(sk\xfe\xf8\x8a\xc7u\xd4\xde\x94\x1a"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    str_0 = "`\nHnaE\x0ci?|B/A@,G"
    var_0 = module_0.match(str_0, str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_1.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    str_0 = "\r["
    module_1.side_effect(str_0, str_0)


def test_case_4028():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4029():
    str_0 = "i\tH"
    set_0 = {str_0}
    none_type_0 = None
    module_1.side_effect(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    bytes_0 = b'@\x1d;-r\x07y\x15<\xfd\xae\x85"'
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    int_0 = -2690
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    float_0 = 2078.3
    list_0 = [float_0, float_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    str_0 = "2g\x0b\rp!NyAh0n+U3LX3[`"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


def test_case_4038():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4039():
    bool_0 = True
    str_0 = "s-B~-E4Wp/RJ"
    module_1.side_effect(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    bool_0 = False
    list_0 = [bool_0]
    module_4.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    float_0 = 2156.04
    module_0.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = ' q-D"P4~F/uF-Z3oBu'
    str_1 = "&^0mV#"
    str_2 = "7[e9R{Yz#6BUU7"
    dict_0 = {str_0: none_type_0, str_1: str_1, str_2: str_2}
    module_4.auto(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    bytes_0 = b"\x97\x9d\\"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    bytes_0 = b"\xd5B3/\xda\xcf\xfaA\x13\xb3\x85j\xf7-j"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    bytes_0 = b""
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__getitem__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    int_0 = 539
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    float_0 = -1027.37
    none_type_0 = None
    module_0.template(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    float_0 = 517.3618
    set_0 = {float_0, float_0, float_0, float_0}
    module_1.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    list_0 = []
    module_4.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    bytes_0 = b"\x11\x95\xf4\xd7\x02a\xd6*\xc7"
    var_0 = module_0.search(bytes_0, bytes_0)
    bytes_1 = b"\xda\xf6\x14\x06\xce$\xa5\xbf\xba\xb50gSf\xb8h\xb9+A"
    module_0.split(bytes_1, bytes_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    base_exception_0 = module_3.BaseException()
    none_type_1 = None
    module_0.search(base_exception_0, base_exception_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    error_0 = module_2.Error(*list_0)
    dict_0 = {error_0: error_0}
    module_0.split(dict_0, list_0, flags=error_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    bytes_0 = b"*9\xe8"
    var_0 = module_0.purge()
    tuple_0 = (bytes_0, var_0, var_0)
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    str_0 = "g%&b\rcM'T,6zE6:dgW*"
    dict_0 = {str_0: str_0}
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (dict_0, set_0)
    list_0 = [str_0, tuple_0, dict_0, str_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    bytes_0 = b"\xfcl\xcb\xea\xa0\xe5\xcc\x90\xb5\xb1\x9b\xf6\x99\x1c\xaf\x1cW"
    float_0 = 5369.02771
    module_0.sub(bytes_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    bool_0 = True
    none_type_0 = None
    module_1.side_effect(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    none_type_0 = None
    bytes_0 = b"\x0c\xdc\xac\x1f:\xbbH+N\xd3\xb4\xc2\x80\xd0\xe7E2\xd4T"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0]
    module_0.findall(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    str_0 = "3U`Rbc64ZF#"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.finditer(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    str_0 = ",Uvm\n"
    str_1 = ";aM,kfIh2:*6x"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_0: str_1}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    str_0 = "r^w.ZhZr!Rx"
    var_0 = module_0.finditer(str_0, str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_4072():
    str_0 = "ZSi"
    var_0 = module_0.match(str_0, str_0)
    var_0.scan(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    float_0 = 2683.476
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    bytes_0 = b"\xb6\xde\xe0V3\xf3\x05\xa7"
    var_0 = module_0.match(bytes_0, bytes_0)
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    bytes_0 = b"S\xd3\x99tW\r\xbe\x02\n\xc3\x95\x91\xe2\x9a!i\xe4\x83\\~"
    tuple_0 = (bytes_0,)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    float_0 = 3539.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_1.side_effect(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    str_0 = "dCp\x0b*zV_S~\r>?F"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    str_0 = "4c`oLMRHK{Wg`_R3)K"
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    str_0 = 'C"7 .FmccN='
    var_0 = module_0.finditer(str_0, str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    bytes_0 = b"J\xefU\xd7\x84K1"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    var_0 = module_0.purge()
    module_4.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    str_0 = "=l'&{js@>"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    str_0 = "+\\L^/\r0,[\\kXJ+Z3UR"
    str_1 = "}Z"
    int_0 = -4675
    dict_0 = {str_0: str_0, str_1: int_0, str_1: str_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    complex_0 = 840.13 - 2169.6977j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    int_0 = -1665
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4090():
    str_0 = "-%\x0bs"
    var_0 = module_0.finditer(str_0, str_0)
    int_0 = -3293
    var_1 = module_0.purge()
    var_1.scan(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    bytes_0 = b"2\xf8\x02\xf0\xbc\t+{\x10\x0eT\xb5\\"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    int_0 = -766
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    var_0 = module_0.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    int_0 = -3018
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    complex_0 = -576.22316 - 958.803j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    str_0 = "b?74"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    str_0 = "i@Dq?S=7Y~dF>ycfynG"
    str_1 = ""
    int_0 = 168
    str_2 = "ukMivfqB`rsl{/&RX//s"
    dict_0 = {str_0: str_0, str_1: int_0, str_2: int_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    int_0 = 535
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    str_0 = "fRLy1CAmEKw2vk3H\x0b"
    var_0 = module_0.finditer(str_0, str_0)
    var_0.__delattr__(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = "I<a"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    str_0 = "y!-=\x0b&ztod3o-^$Ki"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    int_0 = -1912
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    str_0 = "B|_LO)"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    str_0 = "!L@d66H"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    bytes_0 = b"\r\xad;.\xa6\xa1G\xe57\xb6\xebN\x1f}"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    int_0 = 1123
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bytes_0 = b"\xbeEoi\xee\xbf\x11\x84\x18\xa1\xf6"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    bool_0 = True
    bytes_0 = b"\xaf\xd7\xee\xc9\xb8"
    var_0 = module_0.purge()
    var_0.__call__(bytes_0, bool_0, module=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bytes_0 = b"hl\x82\xe1\xf4\xb7\xd5\xe5\x10C\x017\xc9\xd6\xee\x86\xbd\x97m\x04"
    var_0 = module_0.compile(bytes_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    str_0 = "t"
    none_type_0 = None
    var_0 = module_0.sub(str_0, str_0, str_0)
    var_0.__call__(str_0, str_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    int_0 = -1348
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    float_0 = 417.6
    module_0.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4123():
    float_0 = 1658.75616
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    str_0 = "/D'hU8*0e_Fn%0M.[]^Z"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bytes_0 = b"K\x83\xab\xc0R\xf7\xcd!\xe5p\xff\xb6G"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    complex_0 = -331.01673 + 2776.39j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    int_0 = 1663
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setitem__(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0, var_0}
    module_1.side_effect(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    none_type_0 = None
    bool_0 = False
    module_0.search(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4133():
    str_0 = ".7H5F^&*>m|"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, tuple_0, bool_0, bool_0)
    module_0.escape(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    bytes_0 = b"K\xf6\xb4\xe9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    float_0 = -1779.130392
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bytes_0 = b" TO\x16m\x91\x8d\xd4\xb3\xc4m\x16\x12V=\x15\x97\xcb{\x82"
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bool_0 = True
    none_type_0 = None
    module_0.split(bool_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    str_0 = "\x0b\x0bN`,B\\$W3SL3"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    bytes_0 = b"\x96"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    none_type_0 = None
    module_0.compile(none_type_0)


def test_case_4144():
    var_0 = module_0.purge()


@pytest.mark.xfail(strict=True)
def test_case_4145():
    complex_0 = 2020.1 - 3170.53j
    module_0.findall(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    int_0 = 4221
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    float_0 = 212.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    float_0 = -2641.00208
    none_type_0 = None
    module_0.finditer(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    str_0 = 'w""'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    dict_0 = {}
    module_0.sub(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    float_0 = 2140.321
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    int_0 = -2773
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    str_0 = "l&BQh]fi6\n&"
    var_0 = module_0.escape(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    none_type_0 = None
    bytes_0 = b"C\x16\x18\xdd\t"
    module_0.split(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    str_0 = "! #"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    none_type_0 = None
    enum_dict_0 = module_4._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    int_0 = -662
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    int_0 = 348
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    str_0 = "U?j6,V(@P>$3=im[\tt"
    none_type_0 = None
    str_1 = "*hj?"
    str_2 = "P+)._h?>-\t"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    bytes_0 = b"\xe8\xcel"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    dict_0 = {}
    auto_0 = module_4.auto(**dict_0)
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    var_1.scan(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    set_0 = set()
    module_0.Scanner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    bytes_0 = b"\x8a\x81\x00\xf8&\x86\xd0Z\xa1"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0, bytes_0, bytes_0]
    none_type_0 = None
    module_1.side_effect(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    complex_0 = -1173.002161 + 234.218j
    module_0.fullmatch(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    int_0 = -1480
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    bytes_0 = b"\x94\xb1rI\xdd$\x86a"
    var_0 = module_0.split(bytes_0, bytes_0)
    none_type_0 = None
    module_4.EnumMeta(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    int_0 = 3000
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    error_0 = module_2.Error(*list_0)
    bytes_0 = b"?\xf1\xb8(\xd4\xaf\xf9\x1f\xfe\xc0\x9a\xd1I\x99\xc7s"
    tuple_0 = (int_0, error_0, bytes_0)
    bool_0 = True
    module_0.findall(tuple_0, list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.split(none_type_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    bytes_0 = b'V\xe6"I\x10\x91K\x93\x98\xad'
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_1.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    float_0 = 561.253824
    bool_0 = False
    module_1.side_effect(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bytes_0 = b"K\x10\xae\x8b\xd7-\xa2\xd2["
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    float_0 = 1096.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    bytes_0 = b"\xa85\xbd\xe2}^\x91\xc3\x81MK\x07H5\x1e\xe68[B\xa4"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    str_0 = "m+\r-j\t!j~W$T7W'"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    complex_0 = 2557.029632 + 340.69j
    none_type_0 = None
    module_0.split(complex_0, complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    str_0 = "zq >w/k (0."
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    bytes_0 = b"\xfd\x1b\xd1\xf5\x93ewoZ\x88s\xcb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    bool_0 = False
    float_0 = 550.8
    module_1.side_effect(bool_0, float_0)


def test_case_4193():
    bool_0 = False
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, bool_0, bool_0)


def test_case_4194():
    bytes_0 = b"f8\xfa\xfd\xcf\xd1\xe0\xcc\x98\xb9\xf4.\x96\x9fl\xcf\xba"
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4196():
    float_0 = 214.802
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    bytes_0 = b"R\x84-\t\x97\xc4\xd5\x90\xe4k.\xba;"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    bytes_0 = b"\x98\xbd\x19\x06"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    list_0 = []
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    bytes_0 = b"\r\xb1R\x80\xaa\xc0\xa6[\xba\x94\x1a\xc5\t"
    module_0.split(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    bytes_0 = b")X^\xa9U\x1b\xc2m\xb6\xa7\xebn\xbe"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    float_0 = 825.24
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.split(none_type_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    int_0 = -289
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    int_0 = 177
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    none_type_0 = None
    module_4.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    int_0 = -1177
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    bytes_0 = b"\xea\n\x8fr\xf9\x7f\xf9\x02F\xaff\x08x\xb3\xf2\xe6\xadQ"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    none_type_0 = None
    str_0 = '"r)\t]iV{q8E'
    module_0.subn(none_type_0, none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    bytes_0 = b"\x11\xa3\x8dR57Y\x0b\xbe6\x84\xae\xc9D\\"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    complex_0 = 438 - 3233.231124j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    str_0 = "eM;,hz6:O\tih"
    tuple_0 = (str_0,)
    module_0.search(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    int_0 = -5463
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    int_0 = 1617
    none_type_0 = None
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    int_0 = 445
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    list_0 = []
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    none_type_0 = None
    int_0 = 2899
    module_0.split(none_type_0, int_0)


def test_case_4228():
    bytes_0 = b"L\x81s\xa4\x12\x05\xec\x0f\x9f\x84"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    bytes_0 = b"\x8e\xc6\x97\xf1+\xb4oS\x87~8\x943\xe2E\xb8\x88"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    str_0 = "F EaEJm\n},-\\VYJ+Vn."
    module_3.Exception(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.split(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    str_0 = ")sZ~%Ia_"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    module_1.side_effect(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    str_0 = "\x0b>9woNjbwmU>{"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4237():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4238():
    str_0 = "q%;^5@MT9Ur6x!uB\x0c?"
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    int_0 = 1800
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    int_0 = 1462
    list_0 = [int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    int_0 = -2440
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    str_0 = "B"
    var_0 = module_0.template(str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    complex_0 = -45.062 + 858j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    int_0 = -1090
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    int_0 = -559
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    bytes_0 = b"`"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bytes_0 = b"\x8b|\xb4t|\xd6Y\xf9\xc3\x85QWOYL\x9a\x7f\xaa}\xff"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    int_0 = -57
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    str_0 = "s\tQY'q|0j"
    list_0 = [str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    bytes_0 = b"|\x0c,\xear\xac\x1e\xc0\xb7"
    var_0 = module_0.template(bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    bytes_0 = b"CKi\xb5x\xf5Vh\x1f"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    int_0 = -420
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    str_0 = "FCTtt?1Qc1j]2)"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bytes_0 = b"\x93\xd1\xefL\x16\x84&]\xa8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    int_0 = -1871
    module_0.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    bytes_0 = b"=a\x8bj\xd0\x8d\xbd;\xbd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.finditer(dict_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    bytes_0 = b"L\xeeL\xcc\xd0"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__call__(bool_0, bool_0, qualname=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    int_0 = -2573
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    int_0 = -746
    dict_0 = {int_0: int_0}
    module_1.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    float_0 = -735.8
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    int_0 = 879
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    str_0 = 'K)(?`"<dbD'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    none_type_0 = None
    base_exception_0 = module_3.BaseException()
    module_0.findall(none_type_0, none_type_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    float_0 = -1575.0
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    float_0 = -3003.891642
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    int_0 = -501
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    var_0 = module_0.purge()
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    float_0 = 2781.32
    str_0 = "{[l~_{W-1\x0bToRu"
    module_1.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    int_0 = -2423
    str_0 = "nT+5dv,<)pZ[U"
    module_0.fullmatch(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    bytes_0 = b"@\r\xdf\xe8.\xe0*48\xfb\xe77\x9e"
    var_0 = module_0.compile(bytes_0)
    error_0 = module_2.Error()
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    float_0 = 131.0
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    str_0 = " .plZ>\r /h1nK6"
    var_0 = module_0.escape(str_0)
    var_1 = var_0.__dir__()
    module_1.side_effect(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    var_0 = module_0.purge()
    complex_0 = -2404.058 + 2742.5774j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    bytes_0 = b"-\xe1\xcd[\xean4\xe1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    auto_0 = module_4.auto()
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    bytes_0 = b"h\xf3L\x16\x08\xefYkwt,\x85\x1d\xf1\x17\x0e\xf2"
    var_0 = module_0.search(bytes_0, bytes_0)
    int_0 = -2200
    module_1.get_new_command(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    float_0 = -3622.59
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    int_0 = -834
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    int_0 = 797
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    bytes_0 = b""
    module_0.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    var_0 = module_0.purge()
    var_0.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    set_0 = set()
    none_type_0 = None
    module_0.subn(set_0, set_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    float_0 = -3102.5
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    int_0 = -4845
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    list_0 = []
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    bytes_0 = b"\tJ\x1a\xfe\x10N\x19\xfa\x92\x18\xb3\xa9`\xecr"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.side_effect(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    str_0 = "\n585.le"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    str_0 = "y7AJIJT`'"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    float_0 = 4492.518
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    bytes_0 = b"PJLX\xe01\x14y"
    float_0 = 293.038
    module_0.fullmatch(bytes_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4312():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    tuple_0 = ()
    none_type_0 = None
    module_0.findall(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    none_type_0 = None
    str_0 = ""
    var_0 = module_0.compile(str_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    bytes_0 = b"\x88e@\x83\xf1\x1a\x0fn5\xc3\x84\xae\x10\x8e\xf4\xf5\xac\xf4"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    str_0 = "t}*'{i7hY|"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    none_type_0 = None
    bool_0 = True
    module_0.subn(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    float_0 = -2887.36317
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bytes_0 = b"\x14}\xb0\x8aj/\x91\x83\xae"
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    list_0 = []
    list_1 = [list_0, list_0]
    module_4.unique(list_1)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    none_type_0 = None
    str_0 = "\x0c2/:Y/c[](b"
    module_0.subn(none_type_0, str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    float_0 = -4545.37859
    list_0 = [float_0, float_0]
    base_exception_0 = module_3.BaseException(*list_0)
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    bytes_0 = b"\x014\xbedX\x1f"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    float_0 = 968.511
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    str_0 = ">p"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    int_0 = 1280
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    bool_0 = False
    none_type_0 = None
    module_1.side_effect(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    dict_0 = {}
    auto_0 = module_4.auto(**dict_0)
    bytes_0 = b""
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    bytes_0 = b"{\xe3\x8d\xe0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4338():
    int_0 = 3452
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    int_0 = -416
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    str_0 = '-"/Q]1Z6'
    var_0 = module_0.match(str_0, str_0)
    float_0 = 2328.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    bytes_0 = b"\xdeD\xa0"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    module_0.findall(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    tuple_0 = ()
    none_type_0 = None
    module_0.sub(tuple_0, none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    bytes_0 = b"\xac"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    str_0 = ";3\rrZeZ1v"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    dict_0 = {}
    none_type_0 = None
    module_1.side_effect(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    str_0 = "^Rov<Ld @^"
    str_1 = "OEUJQ7!pKGn+f\x0c"
    str_2 = "Lp-eOl-~q`w"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    bytes_0 = b"\xc5"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    int_0 = -3984
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    complex_0 = -426 + 163.74794j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    bytes_0 = b"9B]!\xac\x16E\xabB \xfb\xa1"
    tuple_0 = (bytes_0,)
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    str_0 = 'rw"%0;s'
    str_1 = "2,#&`TY)eOkI1]Z;"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_1: str_1}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    int_0 = 648
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    bytes_0 = b"A\x84{C\xf8\xda,\xcd-"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    int_0 = -3225
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    int_0 = 1769
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    complex_0 = -3814.38649 + 324j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    bytes_0 = b""
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    str_0 = "E&8$:Ueeu($"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    bytes_0 = b"\x1bm\xa9"
    var_0 = module_0.finditer(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    module_1.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    set_0 = set()
    bool_0 = False
    module_0.template(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    bytes_0 = b"\xf8\xd6\x92\xcd\xa6\x1c\x05\x88\xbc\xff@MF\xde\xd8"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    str_0 = "`pX?"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4371():
    bytes_0 = b"\x95\xc5s\xc6\xba\xc5H\x00\xc1\xbf\xfc\xab\x02\x11"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0}
    module_1.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    float_0 = -2369.58
    module_0.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_1: bool_0}
    module_1.side_effect(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_1.side_effect(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    error_0 = module_2.Error()
    module_0.findall(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    complex_0 = 1528.54 + 411j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    int_0 = 2331
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    str_0 = "N\x0cR~Zud- "
    var_0 = module_0.fullmatch(str_0, str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    tuple_0 = ()
    module_4.EnumMeta(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    bool_0 = True
    str_0 = ",r:pM QG$O\t,!R{\\+"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: bool_0, str_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


def test_case_4383():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4384():
    bytes_0 = b"^\xfb\xae\x171\x1da\x8a"
    var_0 = module_0.escape(bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    int_0 = 2438
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    exception_0 = module_3.Exception()
    str_0 = "Hm/},nwYY"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    bytes_0 = b"\x96Y\xcb\xad\xafpw*\x01Q\xf2\xd3"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    str_0 = "jDg"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    bytes_0 = b"\x80~\xd0Qd\xefk\xc7|\xa5c"
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    complex_0 = -2696.3798 - 935.992276j
    none_type_0 = None
    module_0.findall(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    int_0 = -439
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    none_type_0 = None
    module_0.subn(regex_flag_0, none_type_0, regex_flag_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    int_0 = -1807
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0, none_type_0)
    bool_0 = False
    module_0.split(error_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.side_effect(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_4.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    bytes_0 = b"nUt\xe8\n\x99\x8fn\xeb\xf3\xe2\xb3V\xc9\xd1\xb1\xcbU\xe5"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    float_0 = -3825.705
    tuple_0 = (float_0,)
    module_3.Exception(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    auto_0 = module_4.auto()
    bool_0 = True
    list_0 = [auto_0, bool_0, bool_0, auto_0]
    module_1.get_new_command(list_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    str_0 = "b'"
    var_0 = module_0.finditer(str_0, str_0)
    tuple_0 = (str_0, var_0, var_0)
    module_1.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    str_0 = " <;Am\x0b),,m\r_H)MY"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    int_0 = 36
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    str_0 = "sUDmjIw{{#Yl{("
    none_type_0 = None
    str_1 = "YZc] PetOMm;Gs\\s{bi"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_0.search(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    int_0 = -770
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    int_0 = -5293
    list_0 = [int_0, int_0]
    module_1.side_effect(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    str_0 = "]AoQ@D1AR@z?AlxEw4"
    none_type_0 = None
    module_0.search(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    bytes_0 = b"u\xd3\xb0\x96\xa1\xc81\xded"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    none_type_0 = None
    bool_0 = True
    module_1.side_effect(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    error_0 = module_2.Error()
    module_1.side_effect(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    dict_0 = {}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_1.side_effect(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    int_0 = -1036
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    bytes_0 = b"\x0eV\xd6\xf0Syp\xf3\xf5B\x00\xe6X\xd9"
    module_1.match(bytes_0, bytes_0)


def test_case_4428():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    set_0 = set()
    bytes_0 = b"\x89\xcc\xff\xe0D\xac\x97\xf8\x88L\x950\xf8"
    tuple_0 = (set_0, bytes_0)
    none_type_0 = None
    module_0.split(tuple_0, none_type_0, none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    int_0 = 2748
    exception_0 = module_3.Exception()
    dict_0 = {int_0: int_0, int_0: exception_0, int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    str_0 = "\x0b=B"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    bytes_0 = b'\x83\x8eL"WB \xc3\x8c\x03\x87\xba\x9c\x91*'
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    str_0 = "["
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    int_0 = 1445
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    str_0 = "m"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    int_0 = -770
    list_0 = [int_0, int_0, int_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    int_0 = 1993
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    float_0 = 809.159419
    set_0 = {float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    float_0 = -401.2404
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    str_0 = "y.\ts_"
    module_4.EnumMeta(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    complex_0 = 675 + 582.654j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    float_0 = 1677.2
    module_0.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    list_0 = []
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    str_0 = "(IKJW-=Kd\rRF|,7\tp?"
    none_type_0 = None
    module_0.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    complex_0 = -4271.9817 - 389.988j
    none_type_0 = None
    module_0.finditer(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    str_0 = "Ojh;."
    module_4.EnumMeta(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    int_0 = -878
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    float_0 = 1922.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4460():
    str_0 = "L<oW#$~f"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    int_0 = -3613
    module_0.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    str_0 = "y=^;8^ZnBd\tZ`."
    none_type_0 = None
    module_0.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    none_type_0 = None
    dict_0 = {}
    module_0.split(none_type_0, none_type_0, flags=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    str_0 = "a&'3FW+sE2\\"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4468():
    bytes_0 = b"\x06\x97\x96\xfa\xa5G\xbf\xb2s\xf1MS\x1c\xd4\xab"
    bool_0 = False
    module_1.side_effect(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    bytes_0 = b"\x87z\xe0\xb8\xe0\xed\xe5\xfa"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    none_type_0 = None
    int_0 = 3154
    module_1.side_effect(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    bytes_0 = b"\xdae\xfb\xee\xcc\x1f]"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    str_0 = "FcaT}"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    bool_0 = False
    int_0 = 169
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.search(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    str_0 = "28+A=-^?!B\x0cUG\x0c6%gCc"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    str_0 = "EG7YAc.6N:%W"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    str_0 = "fn\x0b$VIIO|7>Y"
    module_1.match(str_0, str_0)


def test_case_4484():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4485():
    str_0 = "8r!@%XdDEeN}nv%/T"
    var_0 = module_0.match(str_0, str_0)
    module_0.subn(var_0, var_0, str_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bytes_0 = b"s\x97\xf9\x08?\xbd\x12&\xa2\x0b\t^"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    str_0 = "|P]bA7L<\x0cYT*"
    dict_0 = {str_0: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    int_0 = 50
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    int_0 = -5058
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    int_0 = -1432
    bytes_0 = b":\xb8\xe0\x16\x07\xc2u"
    module_1.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {}
    list_0 = [tuple_0, tuple_0, tuple_0, dict_0]
    module_0.Scanner(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    int_0 = -2750
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    float_0 = -57.04
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    bytes_0 = b"\xec\xc8"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    float_0 = 2071.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    bytes_0 = b""
    list_0 = []
    list_1 = [bytes_0, list_0]
    none_type_0 = None
    module_0.subn(list_1, none_type_0, list_0, list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    int_0 = -50
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    none_type_0 = None
    module_1.side_effect(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    str_0 = ""
    bytes_0 = b"\x8f\x14\xbf\xa6\xef\xe5\x98\x1bU\n6\xca\xeey\x83f\xaag"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.scan(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_1.side_effect(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bytes_0 = b"\x0b\xa2\xd1\x19\x87\x17\xb7U}\xd5\xe5"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    object_0 = module_3.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    bytes_0 = b"H\xcc"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    bytes_0 = b"\xad\xeb\xd3\x92\xd7!\xf9\x9c\\D\xf5`%\x08"
    str_0 = "0\rfz<!| =R T|4{\t-_jf"
    var_0 = module_0.findall(str_0, str_0)
    var_0.__repr__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    bytes_0 = b"j\xe9R5\x05\xa7\xa2\x10\xa7\xbf\xb2\x91V]\xe4q\xaeZ\xd7}"
    var_0 = module_0.search(bytes_0, bytes_0)
    module_0.subn(var_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    float_0 = 1239.4889
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    float_0 = 3224.11525
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    int_0 = 4982
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    object_0 = module_3.object()
    none_type_0 = None
    module_0.finditer(object_0, none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    bytes_0 = b"\x1c\xde\x91\xaa\xdb\xcb\x00\x04\x82\x01\xa3u\xcb\xb3=\xc1<\xc9\xbc"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    bytes_0 = b"T^T\rbx\xd2\x8b\x0c\x05"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    float_0 = -4768.0
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    bytes_0 = b"EN"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    bool_0 = True
    module_0.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    float_0 = -3166.06
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    bytes_0 = b"\x13\xed\x11\xac0\xc7w"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    complex_0 = 2275.45 + 413.4j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    bool_0 = True
    str_0 = "PX"
    module_1.side_effect(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    int_0 = -5187
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    none_type_0 = None
    int_0 = -112
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    float_0 = 1195.273
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    str_0 = "_DDiuXXO(|\t7~teb\\"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    int_0 = 1182
    list_0 = [int_0, int_0, int_0]
    module_0.findall(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    str_0 = ";Q]`nrfo>xJl~"
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    int_0 = 189
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    bool_0 = False
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    str_0 = "}y)$Z1oB0w"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    bool_0 = True
    str_0 = ":%"
    tuple_0 = (bool_0, str_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    error_0 = module_2.Error(*list_0)
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    int_0 = 344
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    str_0 = "O^h7EGWlVC{x+?O&"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    bytes_0 = b""
    int_0 = 54
    none_type_0 = None
    module_0.sub(bytes_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    list_0 = []
    str_0 = "^2kh}CHID\x0cFl5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0, str_0: list_0}
    module_2.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    none_type_0 = None
    module_0.Match(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    bytes_0 = b"V\xc4\x90v\xcb5\xef\x84"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    complex_0 = -2418.354078 - 2416.6928j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    base_exception_0 = module_3.BaseException()
    list_0 = [base_exception_0]
    module_1.match(base_exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    int_0 = 804
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    none_type_0 = None
    bytes_0 = b"\xb6.\xc2\x85\xe8\x16[\x9e-TG;\xe7"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.side_effect(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    bytes_0 = b"\xeb3\xc1\xdaRM3\xf8S\xfb_\x9e~\xd1"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    none_type_0 = None
    str_0 = "wQ :"
    str_1 = "!$nshGV3\r\tU"
    complex_0 = 2014 + 2893j
    dict_0 = {str_0: none_type_0, str_0: str_1, str_0: complex_0, str_0: complex_0}
    module_3.Exception(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    bytes_0 = b"\\\x0c\xa3\x87\x90\x8f\xef\x8d/"
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    bytes_0 = b"\x1b\xfcS\xfc\xdc\x9b\xed\x1d\xdf"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    bytes_0 = b"g\x94\x8b\x0fS\xecN\xd8W\x885m\x0b\x04\x82d\xacW"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    str_0 = "."
    tuple_0 = (str_0,)
    list_0 = [tuple_0, tuple_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    str_0 = "AQL=ga2AV~YQlx|"
    dict_0 = {str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    bytes_0 = b"\x8b\x0f\xca\x1f\x9elN\xdf\x04jFd\xeb\x1aY"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    set_0 = set()
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    str_0 = "zG@mYS~"
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    list_0 = []
    list_1 = [list_0]
    module_0.finditer(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    bytes_0 = b"\xb9w\x86\x92<?\x16\xdf\xc1\xa1\xa2\x01\xec,\x18'\xa1\xd0"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    bool_0 = True
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    str_0 = "~Q\x0b\rs+!t"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    tuple_0 = ()
    module_0.fullmatch(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    var_0 = module_0.purge()
    str_0 = "kA@b`}W*wsV<+["
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    int_0 = -3125
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    int_0 = 1528
    module_0.finditer(int_0, int_0)


def test_case_4585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4586():
    bytes_0 = b"\x81\x01m.\n\xbd\xabe\xb5\xbd"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    bytes_0 = b'=\x9a\x11\xbb\xc5X\x83\x00%\x9b"~[\x8b\x97\xa0\xd9'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    none_type_0 = None
    int_0 = -249
    module_1.side_effect(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    str_0 = "l(k&jX"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    int_0 = -5039
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    bytes_0 = b"\xfd\xcdU6l*\xa9\x82\xf2\xbe'R*\xeb\xad\xea\xbb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    str_0 = "JA6X\rGz X4D#}!1Bi"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    int_0 = -3044
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    bytes_0 = b"\xdcR[W\x10>i\xc2\xf0\xf7}"
    list_0 = [bytes_0]
    none_type_0 = None
    error_0 = module_0.error(none_type_0, list_0, none_type_0)
    tuple_0 = (list_0, bytes_0, error_0, error_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    int_0 = -1456
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    set_0 = set()
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    int_0 = 256
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    module_4.EnumMeta()


def test_case_4604():
    int_0 = 1973
    str_0 = "Nj"
    str_1 = "|]3y$wE dY\ng3"
    str_2 = "c{Y_"
    dict_0 = {str_0: int_0, str_1: str_0, str_2: str_0}
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(int_0, int_0, int_0, int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    str_0 = "\t$EoG#"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    str_0 = "goP."
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_3.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    float_0 = -481.232
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    float_0 = -678.57322
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    float_0 = 1850.6401
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    exception_0 = module_3.Exception()
    module_1.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    int_0 = 3883
    none_type_0 = None
    module_0.subn(int_0, int_0, int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    int_0 = -2702
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    int_0 = 2576
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    int_0 = -771
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    complex_0 = -345 + 5609j
    module_0.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    dict_0 = {}
    error_0 = module_2.Error(**dict_0)
    list_0 = [error_0, dict_0, error_0, dict_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    none_type_0 = None
    str_0 = 'hj-\x0b"hJ.x>\nd\r|*u%$y`'
    module_1.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    error_0 = module_2.Error()
    module_0.compile(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    str_0 = "hBl~R~L-4\\N'o]}m"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    float_0 = -45.63796
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    str_0 = "pL?"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    str_0 = "\x0cOZ?L4IU"
    none_type_0 = None
    module_0.subn(str_0, str_0, none_type_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    str_0 = "Hng#%,ZVdGfx,"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    bytes_0 = b"\x84\xf8\x97\x08\x85\xce%"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    bytes_0 = b"\xa6\x19\xd3\xc8\x7fj\x95i?\xe3"
    none_type_0 = None
    module_0.subn(bytes_0, bytes_0, bytes_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    float_0 = 415.0
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    str_0 = "Vip}V,H\nH|'1(M4V&"
    module_0.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    int_0 = -2815
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    str_0 = "JNn<4Q]&v"
    none_type_0 = None
    str_1 = "B54I,Aaa%]"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    str_0 = "p("
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    dict_0 = {}
    none_type_0 = None
    module_0.subn(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    str_0 = "OFqg`7oo"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    str_0 = "S`;A\t!/JQl?]my=9"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    module_0.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bytes_0 = b"`\x07\xbf\x87\x9d\xa7\x07\x05"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    str_0 = "\t\rGpJe7DEPJ0KkK|Lf"
    var_0 = module_0.escape(str_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    int_0 = -2196
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "{P!UjUI%\n]m'8X{Qz"
    dict_0 = {str_0: int_0, str_0: int_0}
    module_0.Pattern(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    set_0 = set()
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    str_0 = "`[:G`"
    list_0 = [str_0, str_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    complex_0 = 880.03 - 3549.91035j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    complex_0 = 4351.395893 - 758j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    base_exception_0 = module_3.BaseException()
    module_0.finditer(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    str_0 = "@%W3XNR=|@4^m`jYR{P"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    bytes_0 = b"\x91\x02\xe2\xd6f\x16v"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    var_0 = module_0.purge()
    module_0.Pattern(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    int_0 = 1876
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    str_0 = "juGnfE[5AraesORWto]"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    bool_0 = False
    bytes_0 = b"\xcf\x0b*\r\x83\xa09 "
    list_0 = [bool_0, bytes_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    int_0 = -235
    str_0 = "8l)G'"
    module_1.side_effect(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    bytes_0 = b"P"
    var_0 = module_0.purge()
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    none_type_0 = None
    float_0 = 634.3713
    module_1.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    int_0 = 1734
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    str_0 = '-B&pd}p+0#\\~"hzS'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    base_exception_0 = module_3.BaseException(*list_0)
    module_1.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    int_0 = 2736
    none_type_0 = None
    module_0.split(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_4.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    tuple_0 = ()
    none_type_0 = None
    module_0.search(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    str_0 = "&{I1a\n4V~:GE\x0c5WH=U=/"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    set_0 = set()
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "hOMaA5"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4689():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    set_0 = set()
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    int_0 = -700
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    bytes_0 = b"\xdbX\x01\x07!~;"
    error_0 = module_0.error(bytes_0)
    module_0.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    error_0 = module_2.Error()
    set_0 = {error_0}
    error_1 = module_0.error(set_0)
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    complex_0 = -997 - 711j
    module_0.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    tuple_0 = ()
    module_0.fullmatch(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    int_0 = -780
    bool_0 = False
    module_1.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    str_0 = "\rG\x0b?`Sr%+ewGX;"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    str_0 = "|#2s`#7F"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    str_0 = "cJ\rJ;p?}\n%h<Ed"
    module_0.Match(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    error_0 = module_2.Error()
    set_0 = {error_0, error_0, error_0, error_0}
    var_0 = module_0.purge()
    module_1.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    str_0 = "?h.w 1 "
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    str_0 = "&n?,8J*-"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    int_0 = 1295
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    str_0 = "`UA\\G"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    bytes_0 = b"\x83q"
    bool_0 = True
    module_0.split(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    str_0 = "M"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    complex_0 = -1185.07 - 864j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    base_exception_0 = module_3.BaseException()
    float_0 = 251.83
    module_4.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    float_0 = 151.405
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    int_0 = 1014
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    int_0 = -82
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    none_type_0 = None
    bool_0 = True
    module_0.subn(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    int_0 = 1191
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    none_type_0 = None
    int_0 = -813
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    str_0 = 'LH"t#'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    bytes_0 = b"\x82X\xc6c<\xcb\xed\x02~b\x0f\x89)\xd7\x00\xb2\xed \xf6V"
    none_type_0 = None
    module_0.sub(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    complex_0 = 2133 - 192.8j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    int_0 = -2406
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    str_0 = "bKc&CSu7gD4US]TX"
    var_0 = module_0.escape(str_0)
    var_1 = module_0.purge()
    dict_0 = {var_1: var_1}
    module_0.subn(var_1, var_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    float_0 = -3463.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    str_0 = "]lfo1/.h%"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0]
    module_1.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    str_0 = '$"4r[EF>v/\r'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_3.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    base_exception_0 = module_3.BaseException()
    module_1.side_effect(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    bytes_0 = b't\xdeE"\x82%\xdb!'
    var_0 = module_0.finditer(bytes_0, bytes_0)
    module_0.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    str_0 = "QiU"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0, tuple_0)
    module_1.side_effect(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    str_0 = '*V\\YU(2){t\n<KWr2T"\x0b'
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    complex_0 = -1647.459 - 4729.7j
    list_0 = [complex_0, complex_0]
    module_1.get_new_command(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    float_0 = -464.49148
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    bytes_0 = b"\xe3X\x8aS\xab\xbdJ\xc4 "
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    str_0 = "4\tBES^:eEveVW\\QCL]s"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    set_0 = set()
    none_type_0 = None
    module_1.side_effect(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    complex_0 = -969.8062 - 673.2j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    bool_0 = True
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    bytes_0 = b"\x15<\x87|r\x10"
    none_type_0 = None
    module_0.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    var_0 = module_0.purge()
    int_0 = -2974
    list_0 = [var_0, var_0, int_0, var_0]
    module_4.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    float_0 = -1759.282488
    module_0.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    str_0 = ";J\reZgvNy(KNO\t"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    str_0 = "iiE\x0czYV$beai'VL{qK"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    int_0 = 715
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    int_0 = -1328
    bytes_0 = b"E\xda-CF\xb5"
    set_0 = {int_0, bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    int_0 = -836
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    bytes_0 = b"\x86\xdb05\x05\xd3|po(75\xf3\xe8\xd3\x92\xd8\x19"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    int_0 = -373
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    bytes_0 = b"(Z\r\xb76\x04\xd3Ee#XS\x0fm"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    float_0 = -2421.7
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    str_0 = "#mO!!#g\x0bju"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    int_0 = 794
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    str_0 = "E<r!$BE xPG\t"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    int_0 = -357
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    complex_0 = -257.246281 - 44.734j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    module_4.unique(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    float_0 = 833.7604
    module_0.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    set_0 = set()
    module_0.subn(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    float_0 = -2886.9531
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    list_0 = [tuple_1, tuple_1]
    list_1 = [list_0]
    module_1.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    complex_0 = -1007.7 - 3039.7058j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    dict_0 = {}
    error_0 = module_2.Error(**dict_0)
    none_type_0 = None
    module_0.split(error_0, error_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    str_0 = "r\\/5(5kHtm,6an"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    str_0 = "pQBuA_\tn $;)knmB"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    str_0 = "[4\x0bX#cW62@cFjK5*_y"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    int_0 = -240
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__call__(none_type_0, none_type_0, type=none_type_0, start=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    bytes_0 = b"\x97\xa8\xe1\x9d\xc1\x02 \xefS\xcb\x16\xcc\xf0\xe1\x17\xf4\xb1\xa6g\\"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    bytes_0 = b"\xa3.6| ZC\x932\x86"
    none_type_0 = None
    module_0.finditer(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    int_0 = 1287
    var_0 = module_0.purge()
    var_0.__repr__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    int_0 = 2082
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    str_0 = "tTZT\nG;oabqJ~zJuG(L"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.side_effect(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    str_0 = "HP(7fgRG'^^H'B7\r{\\"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    float_0 = 592.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    float_0 = 427.942
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    int_0 = 1573
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    float_0 = 2058.66059
    none_type_0 = None
    module_1.side_effect(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    bytes_0 = b"\xd2\xc8/\xdd\x87<\xdd\x8d5E\x95 h\xc4\x17"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    int_0 = -3157
    module_0.subn(int_0, int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    var_1.scan(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    object_0 = module_3.object()
    module_1.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    base_exception_0 = module_3.BaseException()
    module_0.sub(
        base_exception_0, base_exception_0, base_exception_0, flags=base_exception_0
    )


@pytest.mark.xfail(strict=True)
def test_case_4826():
    bytes_0 = b"\x9e\x8b\x14\x9cTt\xbf\xea\xd5\x1d\x83x\xe4\xfaw"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    var_2 = module_0.purge()
    dict_0 = {var_0: var_0, var_1: var_2, var_0: var_0}
    module_0.subn(var_0, var_0, dict_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    list_0 = []
    var_0 = module_0.purge()
    tuple_0 = (list_0, var_0)
    module_4.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    int_0 = 2109
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    str_0 = "/( izxr?"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    enum_dict_0 = module_4._EnumDict()
    module_0.fullmatch(enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    bytes_0 = b"\x00H\xff\x898\x0366j7\xeb\x9d\x94\x7f~\x0b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    float_0 = -1850.140938
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    str_0 = "k(P5\te]A0]Y"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    str_0 = "Es+P.&K9F%4S."
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    str_0 = ":U~"
    set_0 = {str_0, str_0, str_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    bool_0 = True
    int_0 = 1609
    module_1.side_effect(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    error_0 = module_2.Error()
    str_0 = "\rk8zHXAM:IX9\r\x0bEPJx"
    module_1.get_new_command(error_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    str_0 = '"qa-'
    str_1 = "D\x0b^Y.^fztgE$hqlR$e"
    var_0 = module_0.finditer(str_1, str_1)
    tuple_0 = (str_0, var_0)
    module_1.side_effect(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_0.finditer(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    str_0 = "dN\x0bT?(s ;^S,/_]c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    int_0 = -2047
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    error_0 = module_2.Error()
    dict_0 = {}
    module_1.side_effect(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    int_0 = -549
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    str_0 = "m9Y5Y"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    int_0 = -1055
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    int_0 = -6771
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    int_0 = -2034
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    int_0 = -2222
    module_4.auto(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    int_0 = -82
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    float_0 = -1072.92657
    str_0 = 'w)(;\x0c\nP"taN$[R_Lb>X'
    module_1.side_effect(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    str_0 = "[\nYv\\dr8@^wA+VBG:p"
    none_type_0 = None
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    none_type_0 = None
    bool_0 = True
    module_0.fullmatch(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    float_0 = -334.79761
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    str_0 = '\n"\rC\\`*VSXeVj^'
    module_1.side_effect(str_0, str_0)


def test_case_4874():
    var_0 = module_0.purge()
    dict_0 = {}
    var_1 = module_0.purge()
    with pytest.raises(TypeError):
        var_1.__new__(var_0, var_0, var_0, var_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    str_0 = "9Hz"
    none_type_0 = None
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    int_0 = -2438
    int_1 = 551
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    tuple_0 = (set_0, list_0)
    none_type_0 = None
    module_1.side_effect(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    bytes_0 = b"\xb5\x05\x19^[\xdd:\xe9"
    none_type_0 = None
    module_0.template(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    int_0 = 1131
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    int_0 = -2773
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    list_0 = []
    module_0.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    float_0 = 3525.443
    module_0.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4890():
    str_0 = 'iEh2}W{Z!W\x0cdD\t"S'
    str_1 = "/(RT{v$r?X%\\[Q|;\ne\t"
    str_2 = "\x0c\\{:.(|?s"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_2: str_2}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


def test_case_4893():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4894():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.side_effect(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    int_0 = 2147
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    str_0 = "&pF|=b,rv3Hs#,:eE`"
    str_1 = "spC2F.6Yc|q$ovVx"
    str_2 = "@yi\\h\rey_|{.V*/\rMP"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_2: str_1}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    int_0 = 1065
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    int_0 = 2826
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    str_0 = "kLhg-M5W[x!h*I&"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    dict_0 = {}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    bytes_0 = b"\x956\xe4\xc4\x01c"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_1.side_effect(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    bytes_0 = b'\xe9|824"\xc7q\x9d$\x05IL\xa1'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    set_0 = set()
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    int_0 = 1244
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.sub(exception_0, exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    str_0 = '2Z;mWf4:?\x0b4%.qz"Q6\r'
    dict_0 = {}
    module_0.Pattern(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    int_0 = 2134
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    float_0 = -160.54
    bytes_0 = b"XYh\xa8\xa33\xd3\xd2\x9b\x1d~B}\xfb)r1V5i"
    module_1.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    complex_0 = 2364.77294 - 1147.43j
    module_0.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    str_0 = "\x0c2\\\x0cv1$p30,JF%AT"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    float_0 = 1903.333
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    str_0 = "U,GcJtH$kAU\x0c^Me_w"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    int_0 = 950
    tuple_0 = (int_0, int_0, int_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    int_0 = -2324
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    int_0 = -2480
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    str_0 = 'w"b1,F#%ufmxyQ\nbP]'
    var_0 = module_0.finditer(str_0, str_0)
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    var_2 = var_1.__dir__()
    list_0 = []
    str_0 = "M&;L:"
    str_1 = "!n:Y(QGty>\x0c"
    str_2 = "<1"
    dict_0 = {str_0: list_0, str_1: list_0, str_2: str_2}
    module_4.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bytes_0 = b"\xa2\xdblm/B\n\xed\xe9F){G0\xcfR)\x03L"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    int_0 = -223
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    none_type_0 = None
    complex_0 = 77.49161 - 578.72122j
    bool_0 = True
    set_0 = {complex_0, bool_0, none_type_0, none_type_0}
    module_0.subn(none_type_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    int_0 = -332
    none_type_0 = None
    module_0.search(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    bool_0 = True
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    none_type_0 = None
    float_0 = -259.47
    module_1.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    int_0 = 1358
    list_0 = [int_0, int_0]
    error_0 = module_2.Error(*list_0)
    int_1 = -509
    module_0.split(int_1, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    complex_0 = -4148.1907 + 1901.1j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    int_0 = 1345
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    int_0 = 720
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    tuple_0 = ()
    none_type_0 = None
    module_0.search(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    dict_0 = {}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    float_0 = 1404.63416
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    int_0 = -2858
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    bytes_0 = b"\xad\\\xc5\x86d\x16\xf7\xf6\xea8\xe6"
    var_0 = module_0.template(bytes_0)
    module_1.side_effect(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    int_0 = 115
    module_3.BaseException(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    str_0 = "ynZ9{eAY'"
    none_type_0 = None
    module_0.fullmatch(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    float_0 = -3620.37
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    float_0 = 1884.282
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    int_0 = 629
    tuple_0 = (int_0,)
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bool_0 = True
    list_0 = [bool_0]
    module_1.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    bytes_0 = b"\x1ak?\x8e2\x88"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    str_0 = "kr1`/"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    int_0 = 3312
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    int_0 = -6
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    str_0 = "\\/6&w^9Kt\rch"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    int_0 = 1256
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bool_0 = False
    int_0 = 2265
    module_1.side_effect(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    int_0 = -3860
    set_0 = {int_0, int_0}
    tuple_0 = (set_0,)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    bool_0 = False
    bytes_0 = b"\n\x82\x1f\xf0\x83\xc7\x82\xba\x12\x8a\t-\xa9]"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    str_0 = "X\\y"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    int_0 = 3217
    module_0.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    bytes_0 = b"\xb4Oj\xfe\x13\x9c\xa0\x8e\xd4O\x93#\xfa\xceB\xd0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    complex_0 = -585.3216 + 57.76781j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    none_type_0 = None
    bool_0 = True
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    int_0 = -5290
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    int_0 = -5189
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    str_0 = "9NFM6V(GF1yt:iflK"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.side_effect(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    int_0 = 1225
    none_type_0 = None
    module_0.search(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    none_type_0 = None
    bool_0 = True
    module_0.findall(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    bytes_0 = b"Z\xf9J\xd3e\xc4"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    var_0 = module_0.purge()
    error_0 = module_2.Error()
    module_1.get_new_command(var_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    list_0 = []
    module_0.template(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    int_0 = 41
    module_2.Error(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    bytes_0 = (
        b"\xa4\xe9\x94\xce\xc8o\x1b\xee\xf7\x16\x00\xfb\xbf\xa9\xb3\xf9\x90\x8c\xbc"
    )
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    str_0 = "w\t="
    none_type_0 = None
    module_0.finditer(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, list_0]
    module_0.search(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    str_0 = "GY.'"
    var_0 = module_0.search(str_0, str_0)
    module_0.subn(var_0, var_0, str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    bytes_0 = b"\x9d\xe4\xfc\xd3\xcd\xeacQ\x0f\xb55\xbb\x1b\x96\xca\xb0Z"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_1.side_effect(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    str_0 = "^ 7t$c8"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    int_0 = 2206
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    int_0 = -1433
    var_0 = module_0.purge()
    var_0.__setattr__(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5007():
    str_0 = "'\tmQ"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    int_0 = -2369
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    bytes_0 = b"\xbe!\x00"
    module_0.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.finditer(none_type_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    int_0 = 4906
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    int_0 = -49
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    str_0 = "XL]HrO?Sco%>9,H`"
    none_type_0 = None
    str_1 = "M]`fgp"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
    }
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    int_0 = 1206
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    int_0 = 969
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    int_0 = 769
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    str_0 = "E"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    float_0 = -2097.9056
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.template(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    bytes_0 = b"\x1b"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bool_0 = True
    set_0 = set()
    module_1.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    bytes_0 = b"|h\x8a"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = 1502
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    module_0.search(error_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    int_0 = -1489
    list_0 = [int_0, int_0, int_0]
    str_0 = "y7{%WY"
    dict_0 = {str_0: int_0}
    module_3.BaseException(*list_0, **dict_0)


def test_case_5036():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5037():
    int_0 = -1508
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    bytes_0 = b"\xd5\xa9j_"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    dict_0 = {}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    str_0 = "J\rns?V"
    str_1 = "1G!sU\x0c%=vc|3f\x0c"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    float_0 = -1481.541386
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    bytes_0 = b"S:"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    complex_0 = -2432.876005 - 974.97144j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    int_0 = 986
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    bool_0 = True
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    int_0 = 680
    module_0.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    float_0 = -2123.18
    dict_0 = {float_0: float_0, float_0: float_0}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    bool_0 = True
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    int_0 = -2055
    none_type_0 = None
    module_0.search(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    bytes_0 = b"\x04\xfc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    dict_0 = {}
    exception_0 = module_3.Exception(**dict_0)
    list_0 = [exception_0, exception_0]
    module_4.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    enum_dict_0 = module_4._EnumDict()
    module_0.split(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    str_0 = "0C07A(_9D|=A&"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bytes_0 = b"\xf1\xbcA\xfb\x85\x80c\xb1*\x06"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    str_0 = "anbx}|8W:7D`\n4hFUH="
    var_0 = module_0.purge()
    var_0.__getitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    bytes_0 = b"|\xbb\xfeQl\x12\xe0\x90"
    error_0 = module_0.error(bytes_0)
    module_0.fullmatch(bytes_0, error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bytes_0 = b")e'r\x0bY`\x98\t\xcd\xcf4k\x00mv"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    int_0 = -457
    module_0.escape(int_0)


def test_case_5061():
    int_0 = -2040
    set_0 = {int_0, int_0, int_0}
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    str_0 = "*iC[M.?-@\x0c%?8`owPfA"
    str_1 = "\x0bZJv6!FgE3"
    list_0 = [str_0, str_0, str_0, str_1]
    module_1.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.side_effect(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    int_0 = -337
    list_0 = [int_0, int_0, int_0]
    bool_0 = False
    var_0 = module_0.purge()
    module_0.subn(list_0, bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    complex_0 = -819.52 + 248.2j
    module_0.sub(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    bytes_0 = b"L7\xa2S\x8d3<\xe4\xb6\xddbw\xfb\x82`x5\x9f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    str_0 = ""
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bytes_0 = b"\r\x91\xd4\xa2\x1b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    str_0 = "PaU>'rjN:\tC-Ip"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    str_0 = "oe@8Vj=a{N\x0cCy7bA="
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    str_0 = "<k:>[saqBF8fz<]="
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    str_0 = "%r:OYGlSe%>t0oWZ[DW"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    int_0 = -2211
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    str_0 = '"\t=?U{[^geS?'
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    float_0 = 2236.115
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    int_0 = 917
    list_0 = [int_0, int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bool_0 = False
    list_0 = [bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bytes_0 = b"z\rD\xf7!"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    bytes_0 = b"B\xa4*\x96J"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    str_0 = "\r@E&EcxE,5 -w0%EQ,"
    str_1 = "uVC\rd\\b"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_0: str_0}
    module_2.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    float_0 = -4505.6006
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    int_0 = 81
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    set_0 = set()
    module_0.subn(set_0, set_0, set_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    auto_0 = module_4.auto()
    set_0 = {auto_0, auto_0, auto_0, auto_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    str_0 = "F}"
    none_type_0 = None
    str_1 = "Z%L++a_8s"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    complex_0 = 2111.7 - 1568.09j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    float_0 = -2602.02
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    str_0 = "^ICe("
    var_0 = module_0.escape(str_0)
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    bytes_0 = b"\x1d,\xd0\xa5\xf1m\xd8\xae\xe7"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    int_0 = -24
    none_type_0 = None
    module_0.finditer(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    int_0 = 1500
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    str_0 = "cUceXH"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    bool_0 = False
    module_3.Exception(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    str_0 = "90wN.diI!3be"
    var_0 = module_0.purge()
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    bool_0 = True
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    set_0 = set()
    module_0.Match(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5112():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    none_type_0 = None
    int_0 = -1134
    module_0.findall(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    int_0 = -3420
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    bytes_0 = b"\x06\xf3\x19\xf0"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    complex_0 = -324.1 + 3503.4007j
    none_type_0 = None
    module_0.sub(complex_0, none_type_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    str_0 = "\"pPY'+K16^|\x0c5:;"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    str_0 = "v\tx%H\\h|;(mWcK\x0c8ckg"
    module_0.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    float_0 = 556.94177
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, bool_0]
    module_1.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bool_0 = False
    bytes_0 = b"\xfep\xf3nm\x17\xa5\x839\xf8\xd0\xa6\xc1\x11\xb0\x8d"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    bool_0 = False
    complex_0 = 1197 + 1299j
    module_0.sub(bool_0, bool_0, bool_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    tuple_0 = ()
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5127():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    tuple_0 = ()
    module_0.sub(tuple_0, tuple_0, tuple_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    bytes_0 = b"p\xdb\xda_#\x81"
    bytes_1 = b"\x17N\xd8\xe4\xa8~G\xe1@\x8f\x9b\x8e\xc9\xc4\xe2/\x1b"
    module_1.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    complex_0 = -924.899 + 4017.0698j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    bytes_0 = b"\xccI\x13\x8aZO"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    list_0 = []
    module_4.auto(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    str_0 = "S"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    str_0 = "q|J^:}q;>],Wz^tCq5"
    str_1 = ".W~sc\tb~BPe=A76<u,6"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    str_0 = "n$=^$*6L\\"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    none_type_0 = None
    bool_0 = False
    module_0.sub(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    str_0 = "\x0br7t3^ K`7:z"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    float_0 = 3033.1626
    dict_0 = {float_0: float_0, float_0: float_0}
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    set_0 = set()
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    str_0 = "p{_|6/j}#3QGu,M%L"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    int_0 = 2821
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    str_0 = "\\UgfG)d/@|X5"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.side_effect(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    bytes_0 = b"\xbc\xf8"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0}
    module_1.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    int_0 = -624
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    bytes_0 = b"\xfc_\xf3\xe0\xa5y\x00\xf1\x88k\x1d0\xf4\xf1\x0b"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    bool_0 = True
    bytes_0 = b".\xc2 \x9c\x03"
    module_1.side_effect(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    bytes_0 = b"\xad\xbb\xb5\\k4\xd9\xbb\x04\xa6\xa0O\x0b\x94\xd2\xc1Ek\xfa"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    bytes_0 = b"\x8a"
    var_0 = module_0.template(bytes_0)
    module_4.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    str_0 = "+\x0b-/4/iCwew|Cv#V2br"
    dict_0 = {str_0: str_0}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    float_0 = 1916.6158
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    bool_0 = True
    module_0.escape(bool_0)


def test_case_5161():
    enum_dict_0 = module_4._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_5162():
    var_0 = module_0.purge()
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    bytes_0 = b"K>\xa4+3\x9a\xc0i4:\xce[|O\x03\x8a8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    int_0 = -1267
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    tuple_0 = ()
    module_1.side_effect(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    bytes_0 = b""
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    int_0 = 78
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    bytes_0 = b"x\xa08`\xe0\x11\x8e\xa2\xc9\xb6\xbc\xb5"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    list_0 = []
    module_0.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    float_0 = 561.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    var_0 = module_0.purge()
    list_0 = [var_0]
    tuple_0 = (list_0, var_0)
    module_1.side_effect(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    str_0 = "<GG-p_@F_`]31@n# osI"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    int_0 = -252
    none_type_0 = None
    module_0.sub(int_0, int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    str_0 = '&_Z"u)ZER+6Z>STC'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    enum_dict_0 = module_4._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    bool_0 = True
    set_0 = {bool_0}
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    complex_0 = -2294.854449 - 2479.75j
    set_0 = {complex_0, complex_0}
    none_type_0 = None
    module_0.compile(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    str_0 = "v\t /7<nXU@M"
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    str_0 = 'esV{Rrq)Qs8s1 .M":D)'
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    bytes_0 = b"\x82\x9aA,\xd9"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    str_0 = '8-"1$Y<'
    var_0 = module_0.subn(str_0, str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    none_type_0 = None
    float_0 = -72.0
    module_0.fullmatch(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    int_0 = -423
    str_0 = "n'>Gy$"
    list_0 = [int_0, int_0, int_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    int_0 = -922
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    int_0 = 23
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    module_0.sub(set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    bytes_0 = b'\x1e\xa7\xe7\xd9"!\x05Y\x8d'
    var_0 = module_0.template(bytes_0)
    module_1.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    str_0 = ";\x0b5|)0-lRw9#+AN"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    bytes_0 = b"2\xd2\xdc\x97J\xedB\x82\xc9V \xd9\xd4s"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    str_0 = "\x0bYec:+Pzf"
    module_0.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    none_type_0 = None
    str_0 = "K0"
    var_0 = module_0.compile(str_0)
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    str_0 = ".5jv*K*yc\x0b7"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    int_0 = 1556
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    float_0 = 4903.2196
    dict_0 = {bytes_0: tuple_0, bytes_0: float_0, bytes_0: float_0}
    tuple_1 = (bytes_0, tuple_0, float_0, dict_0)
    bool_0 = False
    module_1.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    int_0 = 2540
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    dict_0 = {}
    base_exception_0 = module_3.BaseException(**dict_0)
    dict_1 = {base_exception_0: base_exception_0}
    module_0.escape(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    str_0 = "){ZIE\n(]NPa>c?%O"
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0]
    list_1 = [list_0, regex_flag_0, list_0, list_0]
    module_1.match(list_1, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    float_0 = -2901.772884
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    str_0 = "0rsOe?G'p-D*8"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    enum_dict_0 = module_4._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0, enum_dict_0, enum_dict_0]
    none_type_0 = None
    module_1.side_effect(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    bytes_0 = b"\xe4\xf5\xd4o\xc3\xa9p"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    bytes_0 = b"\xb4\x01K\x08\xf2\xa1\xeaU\xa2\x1c\x98N\x81\x91\x95"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    auto_0 = module_4.auto()
    module_0.escape(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    str_0 = "\\"
    module_0.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    bool_0 = False
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    int_0 = 215
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    str_0 = "Lc"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    float_0 = 2024.822
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    var_0 = module_0.purge()
    module_0.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    str_0 = "Z+[=Cc|,!T\rmi!!R{]"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    bytes_0 = b"'E\xb9J+\xc3\xa3\xb8u\xf8&\xb8\x9b\xe1\x1f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    set_0 = set()
    none_type_0 = None
    module_0.findall(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    int_0 = 1768
    list_0 = [int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5240():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    float_0 = -57.174141
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    none_type_0 = None
    bytes_0 = b"\xd5+\xa3@N\xdf.\x06\x8d\xdc\x9cw\xed0\xe6\xfc\t\xb1"
    module_1.side_effect(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    int_0 = -3171
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    bytes_0 = b"L\xac\xa6\x88\x99R\x8e\xfb\n\xc1\x97\xcb\xea\x83\xc8\xe9\xd3="
    var_0 = module_0.compile(bytes_0)
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_0.subn(var_1, none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    int_0 = -376
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    str_0 = 'MV\nC"If'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    int_0 = -641
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    int_0 = -2767
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    none_type_0 = None
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    var_1.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    bool_0 = False
    list_0 = [bool_0]
    module_1.side_effect(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    str_0 = '9VIixN\n"vA2DZQ{;s'
    dict_0 = {str_0: str_0}
    module_4.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    str_0 = "D\n`"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    int_0 = -1804
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    float_0 = 862.5525
    list_0 = [float_0, float_0]
    str_0 = "r`L^n\\"
    dict_0 = {str_0: str_0}
    module_4.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    str_0 = "}\nTFIK$3<.gDIh~"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    int_0 = -3315
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    int_0 = 2387
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "TD7']4)<uK\\v"
    dict_0 = {str_0: int_0}
    module_2.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    str_0 = "j"
    none_type_0 = None
    str_1 = "!FYw+Xg\x0bpx\x0c7 "
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
    }
    module_3.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    int_0 = -2309
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    bool_0 = False
    str_0 = ',Kz"Pu@,[n1mj='
    dict_0 = {str_0: bool_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    float_0 = -2359.4
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    bytes_0 = b"\x8c\xe8\x7f\x9dg\xb4?\x97M\xed\x82\x1e\xff\x86"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    str_0 = "Q?-)/*RM\tq;#?'*\x0cG8#D"
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bool_0 = True
    auto_0 = module_4.auto()
    module_1.side_effect(auto_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    str_0 = "|0p"
    set_0 = {str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    str_0 = "~@4! SJi/Xs*Y*(w6"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    bool_0 = False
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    str_0 = "a)*z$k?@}7!a+RB(~sed"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    none_type_0 = None
    float_0 = -940.0
    module_1.side_effect(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    float_0 = -391.599
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    set_0 = set()
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.subn(list_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    bytes_0 = b"\x9d\xee]\xaa\x7f\xce\xb5\xa5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    str_0 = "XA~#54o\rft1)PJjA`"
    list_0 = [str_0, str_0, str_0]
    module_4.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    set_0 = set()
    module_0.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    int_0 = -761
    bool_0 = False
    module_0.finditer(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5298():
    bool_0 = False
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    str_0 = "e [F &2nL_;\\"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    int_0 = 1202
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    float_0 = 723.6
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    int_0 = 1242
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    str_0 = "CZT!@a7)qe5\x0buQ'{MS"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    list_0 = []
    complex_0 = -951.019 + 468.89j
    module_1.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    str_0 = "+wpjBcg584"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_1.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = "V["
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    none_type_0 = None
    int_0 = 3953
    int_1 = -3837
    module_0.sub(none_type_0, int_0, int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    float_0 = -3863.5771
    dict_0 = {float_0: float_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    enum_dict_0 = module_4._EnumDict()
    module_1.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    str_0 = "Z[SOIc:BRKd"
    module_1.get_new_command(str_0, str_0)


def test_case_5318():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5319():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.side_effect(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    str_0 = ">T|K"
    var_0 = module_0.escape(str_0)
    var_1 = module_0.split(var_0, str_0)
    module_1.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    bytes_0 = b"\x90\x92\x95\xf6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    float_0 = -359.30057
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


def test_case_5323():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    complex_0 = 2954.036872 - 2554.3j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    float_0 = 2498.0
    set_0 = {float_0}
    module_1.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    str_0 = "\x0bLG#[t]"
    none_type_0 = None
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    str_0 = "G\n~H"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    bytes_0 = b"@"
    var_0 = module_0.finditer(bytes_0, bytes_0)
    int_0 = 974
    none_type_0 = None
    module_0.findall(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    bytes_0 = b"\xa2"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    float_0 = -2988.78963
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    bool_0 = True
    list_0 = [bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    dict_0 = {}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__getitem__(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    int_0 = -2604
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    int_0 = 168
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    bytes_0 = b"\xf4\xd94\xf2\xf6\xd9\n\t\x88`H.R\xb4E\x13\xde\x11\xc9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.split(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    bytes_0 = b"M\x01R\xd9\xf6\xde!"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    str_0 = "p.\tfog\tV8E:!|C\te\r"
    str_1 = ";_(n-XHkI"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    module_3.BaseException(**regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    str_0 = "}XX"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    float_0 = -1778.826
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    int_0 = -795
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    bytes_0 = b"\xf0D"
    set_0 = {bytes_0}
    module_0.split(set_0, bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    bytes_0 = b"\xc6ha\xd1rK\x01fWY\x0bb!\xb1\x83N"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    list_0 = [set_0, var_0, var_0]
    list_1 = [list_0, list_0]
    module_0.findall(list_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    bytes_0 = b"@I"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    float_0 = -216.82
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    bytes_0 = b"\x17\x8bwN\xc2\x1c\x89`8Q\xef\xfa\n\xda{\xc8N\xcf"
    module_0.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    int_0 = -778
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    bytes_0 = b"\xaf\xb2\x08\xa4\xc6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    int_0 = -1110
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    int_0 = -2263
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5362():
    bytes_0 = b"t\x0b0\xeeT4\x0e[\xc6"
    module_0.fullmatch(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    float_0 = 506.619
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    var_0 = module_0.purge()
    bytes_0 = b"\xaf"
    module_0.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    float_0 = 171.93812
    module_0.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5371():
    bytes_0 = b"\xb5\xcf"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    list_0 = []
    none_type_0 = None
    module_0.search(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    str_0 = "zrl1m%\x0bz1"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    list_0 = []
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    float_0 = 3879.870543
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    enum_dict_0 = module_4._EnumDict()
    module_1.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    str_0 = "KYo|EiHQZ\tJMX"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    int_0 = 556
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    int_0 = -547
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    int_0 = -901
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    int_0 = -1005
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    int_0 = -113
    none_type_0 = None
    module_0.subn(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    str_0 = "}h^~t4$,zo$"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    int_0 = -2491
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    int_0 = 110
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    str_0 = "Xo"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    float_0 = -1552.584
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    bytes_0 = b"\x14(\xbb?\xd0\xaaQ\xb2z\x00\xf5\xa3\xdc"
    list_0 = [bytes_0]
    module_0.fullmatch(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    float_0 = -1109.26
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    float_0 = 771.8577
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    str_0 = "C+\nM\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    str_0 = "J*\r1H;"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    int_0 = 2043
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    str_0 = "k5._8/-<mCmP"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5409():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_5410():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    str_0 = "N\n,HOzp.m~J7h\n\tL=vv"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    int_0 = 600
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    bytes_0 = b"\x8a\xfc\xb9\xc4\x0f\xaf`\xbb$\xd7C3R"
    none_type_0 = None
    module_0.subn(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    bytes_0 = b"$If\xedG\xc4\x02\xda\x0c7\x9bO\xae"
    module_0.Pattern(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    int_0 = -58
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    str_0 = 'CM\x0b\x0cdHPq{:"bYpLM>t}'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    bool_0 = True
    module_0.Scanner(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    complex_0 = -3411.66867 - 3190.05j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    var_0 = module_0.purge()
    module_1.side_effect(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    float_0 = -931.18
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    str_0 = "JL6w"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    bytes_0 = b"R+"
    module_4.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    str_0 = "Qcfuc&`"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    int_0 = 370
    module_0.sub(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5428():
    str_0 = "O{:^?-\\!+Hk7.U"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bytes_0 = b'\xca"qi*\xf7\x90QD\xb8Kq3>EZB'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    str_0 = "\x0cm\t_AaKQZ$R\"'b>-9^u"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    str_0 = '\t6w@"va}Yvpw'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    str_0 = "Gc>kM>a)wDVr..!"
    none_type_0 = None
    str_1 = "NrPU@B]"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    bool_0 = True
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__contains__(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    bytes_0 = b"\x1b"
    dict_0 = {bytes_0: bytes_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    bytes_0 = b"\x15\x9c\x08\xdf\xfe\x1c\xa3\x9edH\xb8e\xe9_\x8b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    str_0 = "aPlH:^n"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    bytes_0 = b'\xb2\x89"H\xffJ\xde\xf01n\xdd'
    var_0 = module_0.escape(bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5439():
    int_0 = 627
    none_type_0 = None
    module_0.split(int_0, int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bytes_0 = b"\xfc\xf2k\xb7\xc6\xaf\xa8\xc9T?O{\xe6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    bytes_0 = b"\xa021\x12\x0f\x19\xfc\xf7"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    int_0 = -949
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    bytes_0 = b"\xa9!\xc0*\x88-\xdf\xfc)\xf3\xc5\x0c'p\x0c"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    bytes_0 = b"\x00dB@\xd5\xbed\xbeVQZ"
    dict_0 = {bytes_0: bytes_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    bool_0 = True
    bytes_0 = b"\xdf"
    tuple_0 = (bool_0, bytes_0, bytes_0, bool_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    bytes_0 = b"Z\xea"
    list_0 = [bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    int_0 = 1639
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    float_0 = 1422.0
    list_0 = [float_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    str_0 = "CGL8.hByrx"
    float_0 = 1504.0
    module_1.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    int_0 = 2998
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    str_0 = "K\x0cg"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.template(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    int_0 = 1049
    none_type_0 = None
    module_0.split(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    complex_0 = -125.6003 - 964j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.side_effect(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.subn(list_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    int_0 = -2162
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    complex_0 = 322.82 - 260.7473j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    str_0 = ";}|i5mtS`@"
    none_type_0 = None
    module_0.sub(none_type_0, str_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    bytes_0 = b"3\t\x13A\x0c6\x89\xbc\xdd\x87\xe9\xb4\xfd\x1c>JE"
    bool_0 = True
    set_0 = {bytes_0, bytes_0, bool_0}
    module_1.side_effect(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    tuple_0 = ()
    module_0.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    int_0 = -1715
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    bytes_0 = b"\x02U-"
    none_type_0 = None
    module_0.subn(bytes_0, bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    none_type_0 = None
    int_0 = 1957
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    bytes_0 = b"\xb5\xe5\x92%kc\xcb\xfd/\xdfd\xda*\xcf$$\xb3\xa4\xcd"
    tuple_0 = (bytes_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    int_0 = -433
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    int_0 = 324
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    bool_0 = True
    none_type_0 = None
    module_0.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    str_0 = "?g<RV'"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    bytes_0 = b"\x93"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    bytes_0 = b"\xa9\xf9Xbxj[V2\xc5\x06\x9c\x89bDZ\x9f\xd3\xe5"
    str_0 = "`=G\x0b\\/a_qx@*"
    module_1.side_effect(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    int_0 = 2217
    str_0 = "9<)0;^d:2"
    module_0.finditer(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    error_0 = module_2.Error()
    module_0.match(error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    bool_0 = True
    module_4.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    str_0 = "}Zr%u[8g9q#~s1"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    bool_0 = True
    module_0.error(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    float_0 = -1560.123267
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5490():
    str_0 = "Z4 |8zD~h;"
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    int_0 = 83
    set_0 = {int_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    float_0 = -385.0
    module_0.subn(float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    bytes_0 = b"\x92\x0e\xae"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    var_0 = module_0.purge()
    var_0.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5503():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    none_type_0 = None
    base_exception_0 = module_3.BaseException()
    module_0.match(none_type_0, none_type_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    float_0 = 1976.8
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    bytes_0 = b"\x9e\xe0E$6\x1e2P[s\x8a8\xb4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    str_0 = "Upw\\E@"
    module_0.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    str_0 = "+)~!Z^{|NFL7pry"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    bytes_0 = b"\xc2'\xees\x9eu\xe7r\xf8\xd4\xd8\xee\x80\xac\xf9\x00x"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    str_0 = "\x0c\r|BNE2DeczL<v8UGJ\t"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    exception_0 = module_3.Exception()
    set_0 = {exception_0, exception_0, exception_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    float_0 = -1705.9
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    str_0 = "u+mQwz"
    set_0 = {str_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    module_1.side_effect(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bool_0 = True
    error_0 = module_0.error(bool_0)
    module_0.search(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    str_0 = "H]4MQSMY|DQ0Mv\x0b J>v@"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    bytes_0 = b"\x00>\xca\xf2<0Y\x8c\xf4\xa9\x00G"
    set_0 = set()
    module_0.finditer(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0, none_type_0)


def test_case_5525():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5526():
    str_0 = "2yEF~GSI"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    complex_0 = -1657.26 + 750.14j
    list_0 = [complex_0]
    module_1.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    complex_0 = -1716.3 + 603j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    bytes_0 = b"Z\xfb~J\x18#EZ\xce\xdf\xa6\xc8;P\xa0f\xd2\xa1"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    complex_0 = 744 - 1401.0832j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.search(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    str_0 = "uDg"
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    var_1.__delattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    str_0 = 'Ts["Cz()8f\x0c\n-\n\x0bTl'
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    int_0 = 180
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    none_type_0 = None
    list_0 = []
    module_0.search(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    int_0 = 596
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    bytes_0 = b"\xe7"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    int_0 = -1148
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    str_0 = "v\t%7N\tEI$GDQ*}8|I"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    int_0 = -136
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    str_0 = "liA.Zk!zQ}k^Wcl_'J}q"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    none_type_0 = None
    bool_0 = True
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    str_0 = "QKO'\t~{Xp6"
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    int_0 = -2140
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    int_0 = -3609
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    bytes_0 = b"\x01\xef"
    none_type_0 = None
    module_0.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    str_0 = 'qf)YaW@$*`"]M+aP4'
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    str_0 = ""
    var_0 = module_0.compile(str_0)
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    bytes_0 = b"\x13GU\xfa>p\xab\n:\x9e[)\x1dc\xf2\xe4"
    module_0.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    int_0 = -263
    list_0 = [int_0]
    int_1 = 584
    module_1.side_effect(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    str_0 = "/rqqm'hVx5bt)-;"
    module_0.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    float_0 = -1489.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    str_0 = "B1QXKvDzpRi"
    none_type_0 = None
    module_0.sub(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    int_0 = 27
    none_type_0 = None
    module_0.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    int_0 = -2129
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    int_0 = -1160
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.subn(dict_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    int_0 = -2032
    none_type_0 = None
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    int_0 = -64
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    bytes_0 = b"\xaf\xbae}\x87yD;r"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    float_0 = -1576.4134
    module_1.get_new_command(float_0, float_0)


def test_case_5572():
    pass


def test_case_5573():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5574():
    str_0 = "{#bOCtYnx;2n;q"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    bytes_0 = b"\xae\xa5\x000\xaegmC\x97\xc8\xc1-\x04\xd4@\nB\xfa\xd7b"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    int_0 = 229
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    complex_0 = -330.114 - 497.92338j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    str_0 = "\tP<HO'Ed7^\"Mz5gV"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    bytes_0 = b""
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    int_0 = -3289
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    str_0 = ""
    module_0.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    float_0 = -965.308336
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    int_0 = -872
    none_type_0 = None
    module_0.split(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    str_0 = '5\t_7`O".(@_'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    str_0 = ")]#"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    float_0 = 648.985318
    module_1.side_effect(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


def test_case_5591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5592():
    bytes_0 = b"\x82\x91\xcfG\xb4@\xb6\x8a~Bg\xe1~\xb5D\xd3w\xa8A"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5593():
    int_0 = -1633
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    int_0 = -2228
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    int_0 = 1014
    none_type_0 = None
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    float_0 = 564.952
    tuple_0 = (float_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    int_0 = 3355
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    complex_0 = -2198.884661 - 1242.56405j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    str_0 = "r~\x0c'so\\a{$Re"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    bytes_0 = b"\xb1B\x0eip';\x05J\xe2\xcc]\xed\xcd3\xbd\xb5\xcf"
    none_type_0 = None
    module_0.findall(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    none_type_0 = None
    int_0 = 2757
    module_1.side_effect(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5608():
    int_0 = -99
    module_0.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    bytes_0 = b"%\xfb\xf5\xc5\xa8\xe4\xc3\x1aJ6!\x92\x1a\xe0\xb2\x0c\x83\xdd\r\x10"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    tuple_0 = ()
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    int_0 = 308
    module_0.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.side_effect(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    dict_0 = {}
    exception_0 = module_3.Exception(**dict_0)
    dict_1 = {exception_0: dict_0}
    module_1.side_effect(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    list_0 = []
    base_exception_0 = module_3.BaseException(*list_0)
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    bool_0 = True
    var_0 = module_0.purge()
    module_0.finditer(bool_0, bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    tuple_0 = ()
    bool_0 = True
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, bool_0: tuple_0, bool_0: tuple_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    complex_0 = -1663 - 1736.37j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    int_0 = -967
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5627():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    str_0 = "8(q~V'qj^ B5X@\tZWN\""
    module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    int_0 = 246
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5631():
    int_0 = 3073
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_5634():
    bytes_0 = b"\xb6\xf7\xbf\xe0\xf2j\x90g\xf4Z\x990r\xc9\xd1&"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5635():
    int_0 = 2355
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5636():
    str_0 = "1yykK3Ea("
    none_type_0 = None
    module_0.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    bytes_0 = b"\x19\xb9\xfa\x97azFb*\xb6\xcf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    str_0 = "T8Tny8\x0c*"
    dict_0 = {str_0: str_0}
    module_4.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    bytes_0 = b"\xc0\n\x87.\xe7"
    none_type_0 = None
    module_1.side_effect(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    list_0 = []
    error_0 = module_2.Error(*list_0)
    module_0.sub(error_0, list_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    int_0 = 4036
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5643():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5644():
    bool_0 = False
    list_0 = [bool_0]
    module_0.split(list_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    int_0 = 4078
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5646():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__iter__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5647():
    str_0 = "}&:Y~"
    bytes_0 = b"\x81z\xa2\xa4*\xae\xbe9\x03g\x7fL"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    var_0.__iter__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5648():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    set_0 = set()
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    float_0 = -324.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5652():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "E's\x0bRV#j"
    str_1 = "\nnG1C35pHEU:0ompIQ1'"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: none_type_0, str_1: list_0}
    module_4.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5653():
    none_type_0 = None
    list_0 = []
    module_0.fullmatch(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5654():
    str_0 = "}"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5655():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5656():
    complex_0 = -2233.89 + 2514.3156j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5657():
    error_0 = module_2.Error()
    none_type_0 = None
    enum_dict_0 = module_4._EnumDict()
    enum_dict_0.__setitem__(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5658():
    bool_0 = True
    module_1.side_effect(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5659():
    bytes_0 = b"\xf1YeDt\xd0\x04\xfb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    bytes_0 = b"}\x1c\xd6|D\xb3"
    module_0.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5661():
    complex_0 = -1541.755 + 177.52j
    tuple_0 = (complex_0,)
    module_4.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5662():
    int_0 = -2192
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5663():
    none_type_0 = None
    module_2.Error(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5664():
    str_0 = "@fW\r;$dgIC"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5665():
    bytes_0 = b"\x80\x0b:\x1b'/\xca\x8a\xb1N"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5666():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5667():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5668():
    str_0 = "G(LXr\x0bT7Z1#"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5669():
    bytes_0 = b"=\xa06\xcd\x0c\xd8\x80\xc3\xe1\x19s\x92\xd7N\xc9s\x1e"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5670():
    bytes_0 = b"\xb4\xdc\x84.\x01\x87\xec\x0c\xe5r$v"
    none_type_0 = None
    module_0.split(none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5671():
    float_0 = -1230.12
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5672():
    str_0 = "ZS=4@-xhVIf"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5673():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5674():
    str_0 = "uz\tlcEI}I"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5675():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


def test_case_5676():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5677():
    int_0 = -109
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5678():
    str_0 = "t-(y~s`W8bM*u/(*"
    module_1.match(str_0, str_0)


def test_case_5679():
    error_0 = module_2.Error()


@pytest.mark.xfail(strict=True)
def test_case_5680():
    float_0 = 2054.24355
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5681():
    str_0 = "&k*r"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5682():
    int_0 = 902
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5683():
    str_0 = ",)JX2mGM/Gq|IYzx"
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5684():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5685():
    str_0 = "LUw.JBz2pV,E\tk.>"
    list_0 = [str_0, str_0]
    module_1.side_effect(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5686():
    float_0 = 1519.56
    set_0 = {float_0, float_0, float_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5687():
    str_0 = "]z#:"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5688():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5689():
    float_0 = 595.0
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5690():
    bool_0 = True
    list_0 = [bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5691():
    bytes_0 = b";\xa8\xbc\xa5\x89\x9bNP\x96\xd6\x8bNaW\xb3\xaa"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5692():
    bytes_0 = b"A\x98\xbe\xe5\xac"
    none_type_0 = None
    module_0.findall(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5693():
    str_0 = "CyqOP+)(mPkdy}:pl$"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5694():
    float_0 = -2461.142069
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5695():
    bytes_0 = b"\xd8%t\xdeTpY\xd2\xfeW\xfd\x86zmt}"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5696():
    exception_0 = module_3.Exception()
    list_0 = [exception_0, exception_0]
    none_type_0 = None
    module_0.fullmatch(exception_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5697():
    none_type_0 = None
    module_0.Pattern(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5698():
    complex_0 = -1631.89335 + 1707.5959j
    var_0 = module_0.purge()
    var_0.__repr__(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5699():
    int_0 = -155
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5700():
    int_0 = 1044
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5701():
    int_0 = 974
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5702():
    str_0 = "Df\tFWK"
    dict_0 = {str_0: str_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5703():
    bytes_0 = b"\xae5\xbe,\x151\xa7\x87"
    var_0 = module_0.compile(bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5704():
    int_0 = 749
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5705():
    var_0 = module_0.purge()
    str_0 = "\r)42z6d#j-&$b7"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5706():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5707():
    enum_dict_0 = module_4._EnumDict()
    set_0 = set()
    module_0.fullmatch(enum_dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5708():
    float_0 = -3778.3857
    module_0.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5709():
    var_0 = module_0.purge()
    str_0 = "_Z."
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5710():
    enum_dict_0 = module_4._EnumDict()
    module_0.compile(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5711():
    int_0 = 142
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5712():
    str_0 = "Nr6 7#Nj"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5713():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5714():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5715():
    str_0 = ""
    none_type_0 = None
    module_0.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5716():
    complex_0 = -911.6 - 3007.660152j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5717():
    int_0 = -4310
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5718():
    str_0 = "zD2NJ"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5719():
    complex_0 = 4907.96 - 1325.776023j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5720():
    set_0 = set()
    module_4.EnumMeta(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_5721():
    complex_0 = 1817.652 - 113.6352j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5722():
    bool_0 = True
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5723():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5724():
    list_0 = []
    bool_0 = True
    module_0.finditer(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5725():
    int_0 = 2137
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5726():
    var_0 = module_0.purge()
    tuple_0 = (var_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5727():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5728():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5729():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5730():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5731():
    dict_0 = {}
    error_0 = module_0.error(dict_0)
    module_1.get_new_command(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5732():
    str_0 = "f\n^"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5733():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5734():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5735():
    bytes_0 = b"\x1b\x89"
    none_type_0 = None
    module_0.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5736():
    bool_0 = False
    base_exception_0 = module_3.BaseException()
    module_1.match(bool_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5737():
    bytes_0 = b"\x90\xf8\x05ne\x9a\x1c \xaf\xe7\x0c\xa8c\xf8\xb7\xcd\xb7\xb8\xe1"
    none_type_0 = None
    module_0.subn(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5738():
    bytes_0 = b"\x00"
    set_0 = {bytes_0}
    module_1.side_effect(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5739():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5740():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5741():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5742():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5743():
    var_0 = module_0.purge()
    var_0.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5744():
    bytes_0 = b"\xb0\x9a\x00jb4"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5745():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5746():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5747():
    bytes_0 = b"\xc8"
    var_0 = module_0.split(bytes_0, bytes_0)
    list_0 = [var_0, var_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5748():
    int_0 = 1558
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5749():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5750():
    bool_0 = False
    bytes_0 = b""
    var_0 = module_0.compile(bytes_0)
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5751():
    str_0 = "1?&[@G\\0b/Ei'O+CQ"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5752():
    int_0 = -2485
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5753():
    complex_0 = 2459.347 - 1306.059575j
    none_type_0 = None
    module_0.match(complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5754():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5755():
    str_0 = ">uO:-\\\\jb"
    none_type_0 = None
    module_1.side_effect(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5756():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5757():
    int_0 = -3050
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5758():
    str_0 = "tAXm"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5759():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5760():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0, var_0}
    module_1.get_new_command(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5761():
    complex_0 = -303.034261 + 1371.7677j
    module_0.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5762():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5763():
    str_0 = "j<;&>cyi@L=4=r?"
    module_1.side_effect(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5764():
    str_0 = "0bxux?i8f<\tgk1TM)"
    bytes_0 = b"b\x840"
    set_0 = {bytes_0, str_0}
    dict_0 = {str_0: set_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5765():
    str_0 = "Y(v1V4@v1 N-RvbX7"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5766():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5767():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5768():
    int_0 = 1163
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5769():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5770():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5771():
    bytes_0 = b"\xd6\xe0\xff\x8f\xed\xf3\xd6_\xf7\x8f_\xf0qp \x87"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5772():
    float_0 = -2028.4
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5773():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.fullmatch(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5774():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5775():
    bytes_0 = b"\xae\x96#\xe1\xc9#\xbb\xffz\x9bbr"
    var_0 = module_0.escape(bytes_0)
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5776():
    bytes_0 = b"\xf1\t\x97\xe9c\\\xa4\x1f\xf4\xc4p\x07\xed6\x16\x94"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.finditer(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5777():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5778():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5779():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.Pattern(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5780():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.split(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5781():
    int_0 = 1249
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5782():
    exception_0 = module_3.Exception()
    module_1.side_effect(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5783():
    str_0 = "H*=FkBa6L%A"
    none_type_0 = None
    module_0.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5784():
    complex_0 = 2063.084 + 2144j
    module_0.Scanner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5785():
    none_type_0 = None
    bytes_0 = b"\xa1\xf8]2\x8e\xe0\xa2\x96D\x02\x1f}c\x96g"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5786():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5787():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5788():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5789():
    float_0 = -1715.0
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5790():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5791():
    int_0 = -729
    list_0 = [int_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5792():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5793():
    int_0 = -2889
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5794():
    str_0 = "?fn\x0c :E1\x0bu\x0cG"
    module_0.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5795():
    float_0 = -1042.02
    set_0 = {float_0}
    none_type_0 = None
    module_0.sub(set_0, none_type_0, none_type_0, float_0)


def test_case_5796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5797():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    module_1.side_effect(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5798():
    complex_0 = 3210.1489 + 576.68j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5799():
    error_0 = module_2.Error()
    module_0.template(error_0)


@pytest.mark.xfail(strict=True)
def test_case_5800():
    str_0 = 'H~"'
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5801():
    enum_dict_0 = module_4._EnumDict()
    none_type_0 = None
    module_0.sub(enum_dict_0, enum_dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5802():
    bytes_0 = b"ltT"
    module_1.side_effect(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5803():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5804():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5805():
    bool_0 = False
    set_0 = {bool_0}
    module_4.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5806():
    int_0 = 4432
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5807():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5808():
    float_0 = -1346.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5809():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5810():
    none_type_0 = None
    module_4.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5811():
    dict_0 = {}
    base_exception_0 = module_3.BaseException(**dict_0)
    module_1.get_new_command(base_exception_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5812():
    bool_0 = False
    bytes_0 = b"\xc4\x8bS\xbd\x824.\xc5\xb2\x9f\xed\x9b\xe8\xd7Q\x08\x84"
    module_1.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5813():
    dict_0 = {}
    module_0.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5814():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5815():
    int_0 = 2435
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5816():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5817():
    bytes_0 = b"\x0f\x8bQ?\x83\xfc\xe2\xd1[ymh"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5818():
    float_0 = 192.6
    bytes_0 = b"3\xe6\x97\xbb\x80=\xa7\xd5d\xa40'\x16"
    module_0.sub(float_0, float_0, float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5819():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5820():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5821():
    set_0 = set()
    tuple_0 = (set_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5822():
    str_0 = ":\nA|\n0CkMR)(Q?I"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5823():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5824():
    bytes_0 = b"?<.L\x84\xce\x88\xa3\xaf\r\x18\xd8/"
    module_0.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5825():
    float_0 = 731.0
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5826():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5827():
    int_0 = -3732
    module_4.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5828():
    complex_0 = -200.6068 - 3647.85j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5829():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5830():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5831():
    complex_0 = -2407.239923 + 1428.28j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5832():
    complex_0 = -1303.80494 + 638.338053j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5833():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5834():
    float_0 = 578.63
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5835():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5836():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5837():
    float_0 = -4525.745547
    str_0 = "/u>*#@eG{T^I~)"
    module_0.search(float_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5838():
    none_type_0 = None
    bytes_0 = b"\xf1R\xe7\x1b\xbdA6\xdbE\xa5\xc4\xb2\x1aF3"
    module_0.search(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5839():
    str_0 = "2|h{jZ\rl%J3>R"
    bool_0 = True
    str_1 = "sB92\\ln0<"
    set_0 = {str_1}
    dict_0 = {str_0: bool_0, str_1: set_0}
    module_4.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5840():
    str_0 = "WuLKqeK(sE1M@V8-HFB"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5841():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5842():
    module_4.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5843():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5844():
    str_0 = "r@DLV3CctJVc"
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5845():
    float_0 = 3068.945353
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5846():
    str_0 = "f!Px_-)'rIC-jJ-t{U{K"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5847():
    str_0 = "z$_qZ\r1~`L% "
    list_0 = []
    module_1.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5848():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5849():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5850():
    str_0 = "\n2?`)w^h~~&|3ZZ0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5851():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5852():
    str_0 = "Ay"
    module_4.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5853():
    complex_0 = -1766.025 - 464.2072j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5854():
    str_0 = "(HB%"
    list_0 = [str_0, str_0, str_0]
    module_1.side_effect(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5855():
    str_0 = "dO_^x~.!O}"
    str_1 = "9%aLc\t gD:B#="
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5856():
    set_0 = set()
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5857():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.template(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5858():
    float_0 = -730.0
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    var_1.__iter__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5859():
    set_0 = set()
    module_0.match(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5860():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5861():
    str_0 = 'X7J\nh:SYpi"O)i@1w=rF'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5862():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5863():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5864():
    var_0 = module_0.purge()
    bytes_0 = b"\xe4\x97\xcc|\xcb\x8e\xe6\xf9\x19\xfdZ\x02\x8a\r\x80"
    list_0 = [bytes_0]
    module_0.split(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5865():
    set_0 = set()
    bool_0 = True
    module_1.get_new_command(set_0, bool_0)


def test_case_5866():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5867():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5868():
    dict_0 = {}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5869():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5870():
    bool_0 = False
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5871():
    int_0 = -913
    module_1.side_effect(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5872():
    none_type_0 = None
    module_1.side_effect(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5873():
    complex_0 = 341.81391 + 1624.05j
    module_1.side_effect(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5874():
    int_0 = -702
    none_type_0 = None
    module_1.side_effect(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5875():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5876():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)
