# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import matplotlib.pyplot as module_0
import utils as module_1
import networkx.generators.small as module_2
import networkx.generators.lattice as module_3
import _locale as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.twiny()
    none_type_0 = None
    str_0 = "8)\x0bE2X.BH\x0c%K{ 7>"
    module_1.draw_graph(var_0, var_0, var_0, none_type_0, var_0, str_0, var_0, str_0)


def test_case_1():
    var_0 = module_0.twiny()
    none_type_0 = module_1.draw_graph(var_0, var_0, var_0, var_0, var_0, var_0, var_0)
    assert module_1.SIZE_FACTOR == pytest.approx(0.006697, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_0.twiny()
    bool_0 = True
    var_1 = var_0.set_sketch_params()
    none_type_0 = module_1.draw_graph(bool_0, var_0, var_0, var_0, var_0, bool_0, var_1)
    assert module_1.SIZE_FACTOR == pytest.approx(0.006697, abs=0.01, rel=0.01)
    var_1.set_zlim(view_margin=var_1, zmax=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_1.draw_graph(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    var_0 = module_2.moebius_kantor_graph()
    var_1 = var_0.__contains__(var_0)
    module_1.draw_graph(bool_0, var_0, var_0, bool_0, bool_0, var_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    none_type_0 = None
    var_0 = module_3.triangular_lattice_graph(none_type_0, bool_0)
    module_1.draw_graph(
        bool_0, none_type_0, var_0, none_type_0, bool_0, var_0, none_type_0, var_0
    )


def test_case_6():
    int_0 = 461
    tuple_0 = module_1.grid_graph(int_0, int_0)
    assert module_1.SIZE_FACTOR == pytest.approx(0.006697, abs=0.01, rel=0.01)


def test_case_7():
    bool_0 = False
    tuple_0 = module_1.grid_graph(bool_0, bool_0)
    assert module_1.SIZE_FACTOR == pytest.approx(0.006697, abs=0.01, rel=0.01)


def test_case_8():
    bool_0 = True
    tuple_0 = module_1.triangular_graph(bool_0, bool_0)
    assert module_1.SIZE_FACTOR == pytest.approx(0.006697, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_4.localeconv()
    module_1.stripes(var_0, var_0, var_0)


def test_case_10():
    list_0 = []
    bool_0 = True
    dict_0 = module_1.stripes(list_0, bool_0, list_0)
    assert module_1.SIZE_FACTOR == pytest.approx(0.006697, abs=0.01, rel=0.01)


def test_case_11():
    int_0 = 322
    int_1 = 2472
    tuple_0 = module_1.triangular_graph(int_0, int_1)
    assert module_1.SIZE_FACTOR == pytest.approx(0.006697, abs=0.01, rel=0.01)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 855
    module_1.stripes(int_0, int_0, int_0)
