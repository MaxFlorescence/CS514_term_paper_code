# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import format as module_0
import builtins as module_1


def test_case_0():
    none_type_0 = None
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = gzip_wrapper_0.pipe_reader(none_type_0)
    var_2 = var_0.__exit__(gzip_wrapper_0, gzip_wrapper_0, var_1)
    var_3 = var_0.__exit__(var_1, var_1, var_2)
    with pytest.raises(RuntimeError):
        var_0.close()


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    str_0 = "Actually checking if\nrange %s of %g is complete"
    dict_0 = {str_0: str_0}
    text_wrapper_0 = module_0.TextWrapper(**dict_0)
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    text_wrapper_0.pipe_writer(none_type_0)


def test_case_2():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    object_0 = module_1.object()
    var_0 = chain_0.pipe_reader(chain_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "format.Chain"
    assert var_0.args == ()


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    str_0 = "6C"
    file_wrapper_0 = module_0.FileWrapper(set_0)
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    str_1 = "S6c~\r&\nE7cE;U\tV>))`"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    var_0 = file_wrapper_0.__enter__(**dict_0)
    var_1 = file_wrapper_0.__iter__()
    var_0.__getattr__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.__del__()
    assert var_0.closed is True
    var_2 = var_0.__exit__(none_type_0, var_0, bzip2_wrapper_0)
    var_3 = var_0.writable()
    bzip2_wrapper_0.pipe_reader(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.__exit__(bzip2_wrapper_0, bzip2_wrapper_0, var_0)
    assert var_0.closed is True
    var_2 = var_0.__del__()
    var_3 = var_0.readable()
    var_4 = var_0.close()
    var_5 = var_0.__enter__()
    var_2.abort()


@pytest.mark.xfail(strict=True)
def test_case_6():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.seekable()
    var_2 = var_0.readable()
    var_3 = gzip_wrapper_0.pipe_writer(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_3.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_3.close()


def test_case_7():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = gzip_wrapper_0.pipe_writer(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_1.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_2 = var_1.seekable()
    with pytest.raises(RuntimeError):
        var_1.close()


@pytest.mark.xfail(strict=True)
def test_case_8():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_0.__exit__(none_type_0, gzip_wrapper_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_0.__enter__(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_0.__enter__(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = gzip_wrapper_0.pipe_reader(none_type_0)
    var_2 = gzip_wrapper_0.pipe_writer(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_2.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_3 = var_1.__enter__()
    var_4 = var_3.writable()
    var_2.pipe_writer(var_2)


@pytest.mark.xfail(strict=True)
def test_case_12():
    set_0 = set()
    none_type_0 = None
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    var_0 = chain_0.pipe_writer(set_0)
    module_0.InputPipeProcessWrapper(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    module_0.InputPipeProcessWrapper(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    text_wrapper_0 = module_0.TextWrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    text_wrapper_0.pipe_reader(text_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    file_wrapper_0 = module_0.FileWrapper(none_type_0)
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    file_wrapper_0.__exit__()


@pytest.mark.xfail(strict=True)
def test_case_16():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    module_0.OutputPipeProcessWrapper(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    float_0 = 336.6603301560344
    module_0.InputPipeProcessWrapper(float_0)


def test_case_18():
    text_wrapper_0 = module_0.TextWrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None


@pytest.mark.xfail(strict=True)
def test_case_19():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    bool_0 = False
    var_0 = gzip_wrapper_0.pipe_reader(bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_0.__del__()


@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    chain_0 = module_0.Chain(*list_0)
    assert f"{type(chain_0).__module__}.{type(chain_0).__qualname__}" == "format.Chain"
    assert chain_0.args == (None, None)
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0.pipe_reader(list_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    format_0 = module_0.Format()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    assert (
        f"{type(module_0.Format.hdfs_reader).__module__}.{type(module_0.Format.hdfs_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_reader).__module__}.{type(module_0.Format.pipe_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.hdfs_writer).__module__}.{type(module_0.Format.hdfs_writer).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_writer).__module__}.{type(module_0.Format.pipe_writer).__qualname__}"
        == "builtins.method"
    )
    format_0.pipe_reader(format_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    str_0 = "isdir"
    gzip_wrapper_1 = module_0.GzipWrapper(str_0)
    assert (
        f"{type(gzip_wrapper_1).__module__}.{type(gzip_wrapper_1).__qualname__}"
        == "format.GzipWrapper"
    )
    assert gzip_wrapper_1.compression_level == "isdir"
    gzip_wrapper_1.pipe_writer(str_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    float_0 = -1205.0
    list_0 = [float_0]
    chain_0 = module_0.Chain(*list_0)
    assert f"{type(chain_0).__module__}.{type(chain_0).__qualname__}" == "format.Chain"
    assert (
        f"{type(chain_0.args).__module__}.{type(chain_0.args).__qualname__}"
        == "builtins.tuple"
    )
    assert len(chain_0.args) == 1
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_1 = module_0.Chain()
    chain_0.pipe_writer(chain_0)
