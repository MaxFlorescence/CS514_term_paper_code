# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import inspect as module_0
import metrics as module_1
import numpy as module_2
import networkx.algorithms.efficiency_measures as module_3
import platform as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    none_type_0 = None
    bool_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    block_finder_0 = module_0.BlockFinder()
    module_1.disparity(none_type_0, block_finder_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_2.geterrcall()
    module_3.efficiency(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_4.python_compiler()
    none_type_0 = None
    var_1 = module_1.producing_spanning_trees(none_type_0)
    assert var_1 == -1
    assert module_1.available == [
        "cut edges",
        "size disparity",
        "population disparity",
        "size deviation",
        "population deviation",
        "contiguous",
        "producing spanning trees",
        "log producing spanning trees",
    ]
    bool_0 = False
    module_1.deviation(none_type_0, var_1, bool_0)


def test_case_4():
    bool_0 = True
    int_0 = module_1.round(bool_0)
    assert int_0 == 1
    assert module_1.available == [
        "cut edges",
        "size disparity",
        "population disparity",
        "size deviation",
        "population deviation",
        "contiguous",
        "producing spanning trees",
        "log producing spanning trees",
    ]
    str_0 = "o\\  pnY.Dgke"
    with pytest.raises(Exception):
        module_1.map_to_updater(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    module_1.extreme_parts(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_1.cut_edge_count(none_type_0)


def test_case_7():
    str_0 = "N_u)?JtT"
    with pytest.raises(Exception):
        module_1.map_to_updater(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "size deviation"
    callable_0 = module_1.map_to_updater(str_0, str_0)
    assert module_1.available == [
        "cut edges",
        "size disparity",
        "population disparity",
        "size deviation",
        "population deviation",
        "contiguous",
        "producing spanning trees",
        "log producing spanning trees",
    ]
    module_1.cut_edge_count(str_0)


def test_case_9():
    str_0 = "size deviation"
    bool_0 = True
    with pytest.raises(Exception):
        module_1.map_to_updater(str_0, target_population=bool_0)


def test_case_10():
    float_0 = -1060.1
    int_0 = module_1.round(float_0)
    assert int_0 == -1059
    assert module_1.available == [
        "cut edges",
        "size disparity",
        "population disparity",
        "size deviation",
        "population deviation",
        "contiguous",
        "producing spanning trees",
        "log producing spanning trees",
    ]
    str_0 = "=ts"
    with pytest.raises(Exception):
        module_1.map_to_updater(str_0)


def test_case_11():
    str_0 = "population deviation"
    with pytest.raises(Exception):
        module_1.map_to_updater(str_0)


def test_case_12():
    str_0 = "population deviation"
    with pytest.raises(Exception):
        module_1.map_to_updater(str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    str_0 = "population disparity"
    callable_0 = module_1.map_to_updater(str_0)
    assert module_1.available == [
        "cut edges",
        "size disparity",
        "population disparity",
        "size deviation",
        "population deviation",
        "contiguous",
        "producing spanning trees",
        "log producing spanning trees",
    ]
    str_0.__float__()


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "population deviation"
    callable_0 = module_1.map_to_updater(str_0, target_population=str_0)
    assert module_1.available == [
        "cut edges",
        "size disparity",
        "population disparity",
        "size deviation",
        "population deviation",
        "contiguous",
        "producing spanning trees",
        "log producing spanning trees",
    ]
    int_0 = 1319
    var_0 = module_0.formatannotationrelativeto(int_0)
    var_0.__add__(str_0)
