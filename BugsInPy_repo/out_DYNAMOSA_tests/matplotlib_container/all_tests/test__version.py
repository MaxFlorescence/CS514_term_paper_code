# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import _version as module_0
import re as module_1
import enum as module_2


def test_case_0():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1


def test_case_1():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1


def test_case_2():
    bytes_0 = b"^\xe4\xa3GH\xbc\xf1\xf1\xb91\xd3\xbd\x86"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    with pytest.raises(AssertionError):
        module_0.run_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == "+"
    var_2 = module_0.git_get_keywords(var_1)
    module_1.findall(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.git_get_keywords(none_type_0)


def test_case_5():
    bool_0 = False
    none_type_0 = None
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(bool_0, bool_0, none_type_0)


def test_case_6():
    var_0 = module_0.get_config()
    assert var_0.VCS == "git"
    assert var_0.style == "pep440-post"
    assert var_0.tag_prefix == "v"
    assert var_0.parentdir_prefix == "matplotlib-"
    assert var_0.versionfile_source == "lib/matplotlib/_version.py"
    assert len(module_0.HANDLERS) == 1


def test_case_7():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == "+"
    with pytest.raises(ValueError):
        module_0.render(var_0, var_1)


def test_case_8():
    str_0 = "pIS)$c?jy*7/Db"
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(str_0, str_0, str_0)


def test_case_9():
    str_0 = "PA0;I6CWVwk5k,w3"
    var_0 = module_0.versions_from_parentdir(str_0, str_0, str_0)
    assert len(module_0.HANDLERS) == 1


def test_case_10():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    bool_0 = False
    not_this_method_0 = module_0.NotThisMethod()
    var_1 = module_0.git_get_keywords(bool_0)
    with pytest.raises(AssertionError):
        module_0.run_command(var_1, not_this_method_0)


def test_case_11():
    var_0 = module_0.get_keywords()
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_versions_from_keywords(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_0.get_versions()
    assert len(module_0.HANDLERS) == 1
    var_1 = module_0.get_versions()
    var_2 = module_0.get_versions()
    var_3 = module_0.plus_or_dot(var_2)
    assert var_3 == "+"
    none_type_0 = None
    module_0.render(var_2, none_type_0)


def test_case_13():
    var_0 = module_2._EnumDict()
    var_1 = module_0.plus_or_dot(var_0)
    assert var_1 == "+"
    assert len(module_0.HANDLERS) == 1
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(var_0, var_1, var_0)


def test_case_14():
    str_0 = "umxst`XqT"
    with pytest.raises(module_0.NotThisMethod):
        module_0.git_pieces_from_vcs(str_0, str_0, str_0, str_0)


def test_case_15():
    str_0 = "'?S&< Un"
    str_1 = "git-describe-long"
    bool_0 = False
    with pytest.raises(module_0.NotThisMethod):
        module_0.versions_from_parentdir(str_1, str_0, bool_0)
