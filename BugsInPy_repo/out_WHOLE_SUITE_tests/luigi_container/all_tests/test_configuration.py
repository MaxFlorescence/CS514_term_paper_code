# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import configuration as module_0
import configparser as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getboolean(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getfloat(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    none_type_0 = None
    int_0 = -1103
    int_1 = -1238
    module_0.LuigiConfigParser(
        none_type_0,
        allow_no_value=int_1,
        comment_prefixes=none_type_0,
        inline_comment_prefixes=int_0,
        default_section=int_0,
        interpolation=bool_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 2
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getboolean(none_type_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = -904.2
    dict_0 = {float_0: float_0}
    module_1.RawConfigParser(
        dict_type=dict_0,
        delimiters=float_0,
        comment_prefixes=dict_0,
        inline_comment_prefixes=dict_0,
        strict=float_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    int_0 = 0
    var_1 = var_0.getboolean(int_0, var_0, bool_0)
    assert var_1 is True
    var_2 = var_0.__len__()
    var_2.set(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 2
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_1 = var_0.update()
    var_2 = var_0.getint(var_1, var_0, var_1)
    var_0.getfloat(var_1, var_2)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 2
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_1 = var_0.clear()
    assert len(var_0) == 1
    var_2 = var_0.defaults()
    var_0.get(var_1, var_2)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "Truncatung table %s"
    module_0.LuigiConfigParser(dict_type=str_0, default_section=str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getintdict(var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    bool_0 = True
    var_1 = var_0.defaults()
    var_2 = var_0.get(bool_0, bool_0, bool_0, **var_1)
    assert var_2 is True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.LuigiConfigParser(
        set_0, comment_prefixes=bool_0, default_section=bool_0, interpolation=bool_0
    )


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "ev4:13 "
    str_1 = "lX<QxO!Qsm^<a0h"
    bool_0 = True
    none_type_0 = None
    luigi_config_parser_0 = module_0.LuigiConfigParser(
        inline_comment_prefixes=none_type_0, strict=none_type_0
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0 = luigi_config_parser_0.getintdict(none_type_0)
    module_1.RawConfigParser(
        bool_0,
        allow_no_value=str_1,
        delimiters=str_0,
        inline_comment_prefixes=bool_0,
        empty_lines_in_values=str_1,
        converters=str_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_12():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    var_0.set(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    var_0.set(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    bytes_0 = b"\rN\xbb\xa3,\xe6V\x1c\x99'\xbc\x9dxl\xd7V"
    var_1 = var_0.__setitem__(bytes_0, var_0)
    assert len(var_0) == 2
    var_2 = var_0.items()
    var_3 = module_0.get_config()
    var_0.get(var_1)
