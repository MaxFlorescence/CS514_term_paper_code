# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lock as module_0
import _blake2 as module_1
import builtins as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "MXYs\nj.@D'@ne8"
    list_0 = [str_0, str_0]
    str_1 = "*=xn(>PM<}l5B@;\rN"
    var_0 = module_0.get_info(str_1)
    none_type_0 = None
    dict_0 = {str_1: none_type_0}
    module_0.acquire_for(str_0, none_type_0)
    blake2b_0 = module_1.blake2b(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"\x15\x02\x96\x8b\xc3E&\x9c"
    set_0 = {bytes_0, bytes_0, bytes_0}
    var_0 = module_0.getpcmd(set_0)
    assert var_0 == ""
    blake2b_0 = module_1.blake2b()
    var_1 = module_0.getpcmd(blake2b_0)
    str_0 = "eL7N2qTQ"
    var_2 = module_0.acquire_for(str_0)
    assert var_2 is False
    exception_0 = module_2.Exception()
    var_3 = module_0.getpcmd(str_0)
    module_0.acquire_for(var_3, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    value_error_0 = module_2.ValueError()
    none_type_0 = None
    module_0.get_info(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    object_0 = module_2.object()
    var_0 = module_0.getpcmd(object_0)
    assert var_0 == ""
    str_0 = "hits"
    var_1 = module_0.acquire_for(str_0)
    assert var_1 is False
    var_2 = module_0.get_info(var_0)
    var_3 = module_0.getpcmd(str_0)
    var_4 = module_0.get_info(var_3)
    module_0.acquire_for(var_4)


@pytest.mark.xfail(strict=True)
def test_case_4():
    value_error_0 = module_2.ValueError()
    module_0.acquire_for(value_error_0)


def test_case_5():
    str_0 = "hits"
    var_0 = module_0.acquire_for(str_0)
    assert var_0 is False
    int_0 = 5581
    var_1 = module_0.acquire_for(str_0, int_0)
    assert var_1 is True
    var_2 = module_0.get_info(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'\x07f\xc3\x17\x1c\x0e\x7f8\xe6\xfb\xea^\x96\t"'
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0}
    module_0.acquire_for(dict_0)
