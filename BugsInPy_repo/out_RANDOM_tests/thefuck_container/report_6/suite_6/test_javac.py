# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import javac as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bytes_0 = b"%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "I{(;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    complex_0 = -5.353129 + 4178j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    complex_0 = -551.0673 - 2324.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    bytes_0 = b"t\xc4\xa6\xf5\x90"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 3287
    dict_0 = {}
    bool_0 = False
    tuple_0 = (int_0, dict_0, bool_0)
    dict_1 = {bool_0: dict_0, int_0: int_0}
    module_0.match(tuple_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    complex_0 = 323.896896 - 1177.469487j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = 'D"&[dz'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bytes_0 = b"G\xdd\xe0*\x03\xfe4\x0f\x8e=\\-\xf9\x93\xb0X"
    list_0 = [bytes_0]
    tuple_0 = ()
    tuple_1 = (list_0, tuple_0)
    module_0.match(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = -1440
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\xbaa,\x1d\x96 JUa\xc4P}\x81R\xd3F\x08\xc4\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "KZe"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    float_0 = -1498.03
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "5\r^32|O"
    module_0.match(str_0, str_0)


def test_case_24():
    pass


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = False
    str_0 = "_"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    str_0 = "Qnl!O*M"
    set_0 = {str_0, str_0}
    dict_0 = {str_0: set_0}
    bytes_0 = b"\xac\xe0\x18\xfc\xe6"
    tuple_0 = (dict_0, bytes_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "vJ\x0bMF3[F"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, bool_0]
    bool_1 = False
    tuple_0 = (list_1, bool_1)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    int_0 = -931
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    int_0 = -416
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bytes_0 = b"\xf2\xec\xda"
    str_0 = 'E]\\+rO*1"\t~b2e'
    tuple_0 = (bytes_0, str_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


def test_case_39():
    pass


@pytest.mark.xfail(strict=True)
def test_case_40():
    complex_0 = 1516.94243 + 1904.64686j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    float_0 = -5753.77
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b"[7\xc4\x94\xa8\xe6\x8c\xcf\x06\x1ec\xdb\x11\x1f\xf8p"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    float_0 = -295.55
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = "Y-Q%\rn$J{oc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bytes_0 = b"\x85\x1f\xf8'"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    int_0 = -3372
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    int_0 = 1006
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    int_0 = -1028
    int_1 = 1099
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_51():
    int_0 = -294
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    int_0 = -277
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = "a<GKe-XOQ9'\\G|Ij"
    str_1 = " "
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    set_0 = set()
    object_0 = module_1.object(*set_0)
    dict_0 = {}
    list_0 = []
    tuple_0 = (set_0, object_0, dict_0, list_0)
    list_1 = [tuple_0, list_0, dict_0, list_0]
    list_2 = [list_1]
    module_0.get_new_command(list_2, object_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    float_0 = -921.91443
    list_0 = [float_0, float_0, float_0]
    int_0 = -815
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    int_0 = 1925
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    str_0 = "\t?xmor*OL"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    float_0 = -1021.080921
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    float_0 = -2846.19804
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    complex_0 = 1648.7 + 568j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    none_type_0 = None
    float_0 = 1366.517316
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    list_0 = []
    bytes_0 = b"\x97\x8c)\xd1%(\xdecN\xb0\xd2\xd2"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    complex_0 = -271.223 + 1882.27j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    str_0 = "@X?dr;9Wj4%B|"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    float_0 = 3903.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    bool_0 = True
    float_0 = 908.0
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    complex_0 = 965.87682 - 1588.517j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    complex_0 = -712.9886 - 1795.6571j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    str_0 = "kmO)u\n8F[2k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    int_0 = 425
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    int_0 = 852
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    str_0 = "$\\S$IL4K^C'dn\x0c$2luK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    bytes_0 = b"u\x8bV\xfb\x8b\xdc\xee\xc5\xaa-0B\xb5\xdf\x93\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    float_0 = 913.136
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_1}
    tuple_0 = (float_0, bool_0, dict_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    bytes_0 = b"_\xd6-_5\xbc\xe9XQ \xbe\xa9\x15\x81\x10xr\xe0"
    float_0 = -1266.7
    set_0 = {bytes_0, bytes_0, bytes_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    int_0 = -1222
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    bytes_0 = b"\x9b\xbeD\r\x9d@\xfe\xd6&\xa5$\xd7\xd9\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    bool_0 = True
    bytes_0 = b"2j\xe6\x90`\xd0\xf3\xcc0r\x0c"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    int_0 = 4494
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    none_type_0 = None
    bytes_0 = b"f\xba\xf9\x06\xd2\xb9\xad\xe9\xc2\x8b\x1a\x7f"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    str_0 = "\nV~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    float_0 = 1038.99799
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    float_0 = -2526.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    str_0 = "Ane9"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    str_0 = "eHgM<[oS0;Gz?hQ5\x0cL<>"
    str_1 = "ow}d%4sp*za-"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bytes_0 = b"\xec\x1b\xcc\x15\x18*"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_103():
    int_0 = 824
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    str_0 = "7wVcY\x0bz"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    int_0 = 2131
    int_1 = -2368
    dict_0 = {int_0: int_1, int_1: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    set_0 = set()
    tuple_0 = (set_0, bool_0)
    tuple_1 = (set_0, tuple_0)
    tuple_2 = (list_0, tuple_1, list_0)
    str_0 = "(>]~c5^z"
    tuple_3 = (tuple_2, str_0)
    float_0 = 768.56529
    module_0.get_new_command(tuple_3, float_0)


def test_case_107():
    pass


@pytest.mark.xfail(strict=True)
def test_case_108():
    int_0 = -895
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    bytes_0 = b"\xdbv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    bytes_0 = (
        b"\xcf\x83\x97\x94\xcb\x04\x03\x87\xc7\r\xf7f\x1d\xa1\xf4\xbc\xcc\x91\xba\xe5"
    )
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    str_0 = "'Ql8Vme\\flks}%*sY!qy"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_115():
    int_0 = -1729
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    str_0 = "\r2DH\r"
    bool_0 = True
    set_0 = {str_0, bool_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    bool_0 = True
    bytes_0 = b"\xf6g\xc5,\x85#\x18\xe1\xabK\xfa\x17\xf0q\x96Ya\xe2\x1d\x04"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    int_0 = -1857
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    int_0 = -267
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    str_0 = "ZIG0lnkY??#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    bytes_0 = b"\xc3=Uh\xa0\xf3\x9ai2\xf0\x94\xccA\x86\x95u\xcd\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    int_0 = 131
    module_0.match(int_0, int_0)


def test_case_126():
    pass


@pytest.mark.xfail(strict=True)
def test_case_127():
    bool_0 = True
    set_0 = {bool_0}
    bool_1 = True
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_128():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    bytes_0 = b"9\xef=\x80/\xc6K\x87\x8a\xac\xdf4\xc3+e\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    list_0 = []
    str_0 = "S4iI5%HoFj]\n&vD'Y+"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    int_0 = -1080
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    int_0 = 1867
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    str_0 = "S>2)vhE^Y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    int_0 = 3555
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    float_0 = 12.0153
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    int_0 = -699
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    none_type_0 = None
    bool_0 = True
    dict_0 = {bool_0: none_type_0}
    str_0 = "d}0KV<\t(!Q"
    tuple_0 = (bool_0, dict_0, str_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    str_0 = "`u\x0b!5-:,\r5pOV$"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    str_0 = '"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    bytes_0 = b"\x94u\x1d"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    float_0 = 3075.3
    list_0 = [bytes_0, set_0, float_0, bytes_0]
    tuple_0 = (bytes_0, set_0, float_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    complex_0 = -950.6 - 938.17j
    bytes_0 = b"e\x9e#\x12_\xc3\x90\xa6#\xbd\xb5"
    list_0 = [complex_0]
    tuple_0 = (complex_0, bytes_0, list_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    str_0 = "LyMh\x0c\t@.k>G_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    bytes_0 = b"\x02\xab\xff\xd6\x9e\xed\xed\x0e\x1ab\x88\xfe|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    bytes_0 = b"\xb5\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    int_0 = -4718
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    int_0 = 1831
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    float_0 = -1073.96164
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    complex_0 = 183.5 + 201.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    int_0 = 1840
    str_0 = 'nt"d\rrP>zuvx'
    tuple_0 = (int_0, str_0)
    int_1 = 1622
    set_0 = {int_1, str_0, tuple_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    int_0 = 1016
    list_0 = [int_0]
    str_0 = "8Me3\x0c7}%`o-k~o"
    str_1 = "\x0c"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    bytes_0 = b"\x7f\x88\xa3\xfd\x07l.D\xa4\xfa\xf7.\xee\x99\xc3u\xa2#~+"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    bytes_0 = b"k\xca[\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    bytes_0 = b":\xcc\xedX\xd0V\xfb\xe5N"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    bool_0 = True
    str_0 = "[qN"
    dict_0 = {str_0: str_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    int_0 = 2031
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    str_0 = "-lI#Wgyw'[,\x0cdMR*["
    str_1 = "\tYsB+M2/7Eg{uIr"
    bool_0 = False
    dict_0 = {str_0: str_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    bytes_0 = b"A\x1c\x19\x83JL\x9f'z8\xcf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    bool_0 = False
    str_0 = "LqoF2XEebn5/|Bk(^"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    float_0 = 856.13
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    bytes_0 = b"W\x9a$/13O\xa4\x0e{&\x91KG\n\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    int_0 = -306
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    int_0 = -2461
    module_0.match(int_0, int_0)


def test_case_170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_171():
    str_0 = "/cif~R}OD.{P\rv8F) K?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    bytes_0 = b"R!\xed\xa9#\x85\x84\xb4&\r\x97c\xddf\xf4v\xe7/\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    int_0 = 796
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    bytes_0 = b"<f\x94xC\xa8\x01W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    int_0 = 3549
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    float_0 = 3436.251535
    module_0.get_new_command(float_0, float_0)


def test_case_177():
    pass


@pytest.mark.xfail(strict=True)
def test_case_178():
    str_0 = "X\x0bE'828 gkg"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_179():
    pass


@pytest.mark.xfail(strict=True)
def test_case_180():
    tuple_0 = ()
    int_0 = -113
    tuple_1 = (tuple_0, tuple_0, int_0, tuple_0)
    list_0 = [tuple_1, tuple_1, int_0]
    tuple_2 = (tuple_1, list_0)
    module_0.get_new_command(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_181():
    int_0 = -696
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    str_0 = "fzL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    int_0 = 3989
    int_1 = 2048
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_187():
    pass


@pytest.mark.xfail(strict=True)
def test_case_188():
    str_0 = "UkRq(v"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    int_0 = 2580
    module_0.match(int_0, int_0)


def test_case_190():
    pass


@pytest.mark.xfail(strict=True)
def test_case_191():
    int_0 = -553
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    bytes_0 = b"\x8a\x06x\xe8\x8d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_1, bool_0)
    tuple_1 = (bool_0, bool_0, tuple_0, tuple_0)
    tuple_2 = (tuple_1, bool_1)
    list_0 = [tuple_2]
    module_0.get_new_command(list_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_194():
    bytes_0 = b""
    float_0 = -1259.0
    list_0 = [bytes_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    str_0 = "1|}$X}QyZ+&.11\\xP_1p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    int_0 = -564
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    bytes_0 = b"\xb1\x147\x8e\x80\xa1?/3\x17\xce\xbd\x91\x08c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    bytes_0 = b"'\xfe\xf5M\xbe\xfc$\xb1\x16"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    int_0 = 4537
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    bool_0 = True
    int_0 = -3147
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    float_0 = 1410.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_204():
    pass


@pytest.mark.xfail(strict=True)
def test_case_205():
    bytes_0 = b"\xf9o?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    list_1 = [str_0, list_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_207():
    bool_0 = False
    int_0 = -1720
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    int_0 = -1985
    bytes_0 = b"\xcf>"
    set_0 = {int_0, int_0, bytes_0, int_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    str_0 = ""
    bool_0 = True
    list_0 = [bool_0, bool_0, str_0]
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: list_0}
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    str_0 = "u2P7r?}x\n>kbC~kHv\rL"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    none_type_0 = None
    complex_0 = 1592.69 + 1402.9j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bool_0 = True
    bytes_0 = b"DX\xb3\xac(1a"
    set_0 = {bool_0, bool_0, bytes_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    bytes_0 = b"U\xee\x82\xd3;\x17t\x17b\x11\x1e\x07\xb5\xf6\xaaW\x0c\xa4\xe3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    int_0 = -592
    module_0.get_new_command(int_0, int_0)


def test_case_218():
    pass


@pytest.mark.xfail(strict=True)
def test_case_219():
    str_0 = 'SOvz@Z"i\\2'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    str_0 = "8Km(~0"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    int_0 = -1501
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    int_0 = 240
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bytes_0 = b"!d\xdf\x07\n\xf5\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    int_0 = -1493
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    int_0 = -3680
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    str_0 = "\r.^\rC1l/Gv=8>c}1N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    bool_0 = True
    float_0 = 1356.63
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    bytes_0 = b"\xae\xe9\x13X\xf9k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    set_0 = set()
    str_0 = "~sMhGEEP"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    int_0 = -1314
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    int_0 = -3746
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    str_0 = 'E^gX,Bv">p9m@'
    set_0 = {str_0}
    tuple_0 = (str_0, set_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    int_0 = 2455
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    int_0 = -887
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    complex_0 = 1152.765 + 146.292822j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = ()
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    float_0 = 4888.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    str_0 = "<wT"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    str_0 = "eu~"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    float_0 = 399.215284
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    int_0 = 1694
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    float_0 = -1245.85679
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    str_0 = "Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    bytes_0 = b"M\x12\x9a\xf6\xedb\xe79\xa6<"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    int_0 = 2000
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    int_0 = -1425
    int_1 = -2313
    module_0.match(int_0, int_1)


def test_case_259():
    pass


def test_case_260():
    pass


def test_case_261():
    pass


@pytest.mark.xfail(strict=True)
def test_case_262():
    int_0 = 1078
    list_0 = [int_0, int_0]
    int_1 = 1797
    module_0.get_new_command(list_0, int_1)


def test_case_263():
    pass


@pytest.mark.xfail(strict=True)
def test_case_264():
    bytes_0 = b"b\xdc\xbcG\x94<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    none_type_0 = None
    float_0 = 1328.5
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    float_0 = 886.4013
    module_0.match(float_0, float_0)


def test_case_268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_269():
    bytes_0 = b"\x19\xf7\xdfP\xa9\x1fO\x92mj\\\x06S\xc9\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    bytes_0 = b"td\x7f\xb1\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


def test_case_273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_274():
    float_0 = 503.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bytes_0 = b"\xe5\xde-\x16\xf9\xcc\x06{.\xc1oW\xba\x11\xfdU\xcdQ\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    set_0 = set()
    str_0 = "RP:+PR"
    module_0.get_new_command(set_0, str_0)


def test_case_278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_279():
    none_type_0 = None
    str_0 = "_m}y/?4"
    dict_0 = {str_0: none_type_0}
    module_1.object(*none_type_0, **dict_0)


def test_case_280():
    pass


@pytest.mark.xfail(strict=True)
def test_case_281():
    int_0 = 3993
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


def test_case_283():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_284():
    set_0 = set()
    str_0 = "n'Sw}qP:* r%Z-e6i="
    module_0.get_new_command(set_0, str_0)


def test_case_285():
    pass


@pytest.mark.xfail(strict=True)
def test_case_286():
    int_0 = 3103
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    bytes_0 = b"\xbd\xc9\x1dYa78\x9c\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    str_0 = "\\{`/Uj"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    complex_0 = -1048.41077 + 1755.02886j
    bytes_0 = b"\x19T]\x11+u\x02\x02\xc2_\x07\x89."
    bytes_1 = b"+\x1e\xde\xc2$\xcc=A\xa7\x15\xfcf\xc9\xd0?Y\xea\xba\xba"
    tuple_0 = (complex_0, complex_0, bytes_0, bytes_1)
    complex_1 = 2394.2969 + 2499.3121j
    set_0 = {complex_1, complex_1}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    float_0 = 1346.496725
    dict_0 = {float_0: float_0}
    str_0 = "LuD"
    tuple_0 = (float_0, dict_0, str_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    int_0 = -760
    set_0 = {int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    float_0 = 3649.725
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    bool_0 = False
    float_0 = -955.0
    set_0 = {bool_0, float_0, float_0, float_0}
    list_0 = [bool_0]
    tuple_0 = (bool_0, bool_0, set_0, list_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    str_0 = "UxV;_\x0cW=Hzi+4xUS"
    module_0.match(str_0, str_0)


def test_case_295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_296():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    int_0 = -3629
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_299():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    int_0 = 1705
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    bytes_0 = b"\x92\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    bytes_0 = b"\x9b*\xe4\xa6\x8a\xae\xeb~\x94\xe1\xf6\xea\x8f\xa1\xb7\x8c\x1f"
    bytes_1 = b"\x9c]M\xfa\xc1\x90\x1d\xd5oL{|\xfe\x10O\x05l\x14"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_303():
    complex_0 = 907.33483 + 3963.871979j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    bytes_0 = b"R\xdf@!\xc6\xab\xd8\x12\xfb\xfc\xeag\xbf\x9d\xb8\xb8\xf0\t\xa2\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    int_0 = 2382
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    bytes_0 = b".P\xf6;&Wtm\xc9\xc4\x05\x81\xc8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    bool_0 = False
    float_0 = 1721.0
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    object_0 = module_1.object()
    int_0 = 1374
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    bytes_0 = b")G}5"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    str_0 = "c{ _9^;>/=n&daeV<uK"
    list_0 = [str_0]
    list_1 = [list_0, str_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_314():
    str_0 = "1y\x0c\n-\x0brB&N\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    str_0 = "F-\x0b^6*95sS\x0bT6"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    int_0 = 1125
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    bool_0 = False
    int_0 = 29
    bool_1 = True
    dict_0 = {bool_0: bool_0, int_0: bool_1, bool_1: bool_1}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    bytes_0 = b"\xbe\xb8Eh\xd9\xbf\xde0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    str_0 = '"v*bF)n.x77.~-U\n'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    str_0 = "~ /\x0ci38t\n"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    none_type_0 = None
    complex_0 = -2996.463 + 330.34j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    float_0 = -1376.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {bool_0: bool_0, bool_0: tuple_0}
    tuple_1 = (bool_0, bool_0, bool_0, dict_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    str_0 = "I1G\r#%z|}_a+\x0bYa0pz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    str_0 = "L\x0ct2b{yN3k|<cl>&u0"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    str_0 = "?w{zvD5*~#uiV"
    module_0.match(str_0, str_0)


def test_case_328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_329():
    int_0 = 755
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    float_0 = -125.95
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    int_0 = -162
    bytes_0 = b",$\xb5a\xc7\xb2\t\xfdI\xa1+\xa1L"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


def test_case_332():
    pass


@pytest.mark.xfail(strict=True)
def test_case_333():
    str_0 = "\\az>fEW2"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    complex_0 = -103.21 + 1415.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    float_0 = -3778.409
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    str_0 = "u"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    bytes_0 = b"\xb0\x87\\\xe79\xa3\xdc\x8c,\x1an"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    float_0 = -1871.247612
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    str_0 = "F|n\x0cf, ?R\nu"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    none_type_0 = None
    int_0 = -2460
    module_0.get_new_command(none_type_0, int_0)


def test_case_343():
    pass


@pytest.mark.xfail(strict=True)
def test_case_344():
    float_0 = -877.798
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    float_0 = 2641.830842
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    str_0 = "\tS:m@+|+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    int_0 = -2207
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    bool_0 = False
    bytes_0 = b"VS?#R\xe6\\\xf2\x0cyc\xba\x99\x99Y\xf1,2"
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_350():
    pass


@pytest.mark.xfail(strict=True)
def test_case_351():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    bytes_0 = b"{k<\x10#d48'\xe6x\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    bytes_0 = b"\t\x0c9\xb8\xb1\xb0\xa8\xc8\x9c8\x85Z~\x10\xc0-"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    str_0 = "r\rM]bwY2?0nZvR"
    bytes_0 = b"\xe2-\x08"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    bytes_0 = b"a\x01\x85\xcb\x87\xbc\x98\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    str_0 = "?na< NWd\t#pv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    float_0 = 723.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    bytes_0 = b"ro\xee\x02_y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    str_0 = "~/5Lzj'pt\tH*\r\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    bytes_0 = b"\x9b\x07l"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    bool_0 = False
    bool_1 = False
    bytes_0 = b"+\xe4|N\xd7!7\x0e\x03y\x88L\xad\xef\xb3"
    tuple_0 = (bool_1, bytes_0, bool_1, bool_1)
    list_0 = [tuple_0, bool_0]
    tuple_1 = (tuple_0, list_0)
    tuple_2 = (bool_0, tuple_1)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_362():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    bytes_0 = b"\x9a\xed\xd7\xdc\x95\xfe\xe9\x9ad\x1d\xe7\x9d\xdf/\x1d5`V\xca6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    int_0 = 1288
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    str_0 = "o+\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    bytes_0 = b"\x9cQ\x85\xc8\xb0\xf6N"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    bytes_0 = b"=\x8a\xf4\xe6Q\x1c\x8b/\x15\x8c`"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    int_0 = 903
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    bytes_0 = b"\xf8\xce:%.\x19{f\xd7\xb9\xac\x00v\x88\xb1\x81\xc6"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    int_0 = -795
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    float_0 = 1663.497965
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    str_0 = "3,&0\tw^;7-^k+7!w\t1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    bytes_0 = b"P\xa5\x02h\x88y\xe0\xee\xd2>\x90!x:\x0f\x81\x80\x1f\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    str_0 = "z<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    complex_0 = 1633 + 2230j
    set_0 = {complex_0}
    float_0 = -376.622
    tuple_0 = (complex_0, set_0, float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    str_0 = "#gb@hI3@nDAEN\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bytes_0 = b"r\x1e\xba.\x1e\x83\xe7\xc4\xaf"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    float_0 = 2606.84
    module_0.get_new_command(float_0, float_0)


def test_case_383():
    pass


@pytest.mark.xfail(strict=True)
def test_case_384():
    set_0 = set()
    list_0 = []
    list_1 = [set_0, set_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_385():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


def test_case_386():
    pass


def test_case_387():
    pass


@pytest.mark.xfail(strict=True)
def test_case_388():
    bytes_0 = b"\x0b\x96\xc4\xc5P#\x14K\xba\x81/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    int_0 = -379
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    str_0 = "]\\zV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    bytes_0 = b"\xaa1\xe0a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    str_0 = "xZqT"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    str_0 = "{6,o{RBb\\}<"
    bytes_0 = b"f\xcd\xe7w\xe3P\xa2z\xec"
    tuple_0 = (str_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    bytes_0 = b"\xe8JP\xf2{\x08v\x007\x07\xb38\x955P"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    float_0 = 3005.35191
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = 2985
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    bytes_0 = b"\xef\xff\xe1\x19"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, bytes_0)


def test_case_400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_401():
    int_0 = -394
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    int_0 = 771
    module_0.match(int_0, int_0)


def test_case_406():
    pass


@pytest.mark.xfail(strict=True)
def test_case_407():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    str_0 = "E]D#/`Q8Fr\nw]_lx6:/"
    bytes_0 = b"E \x81\xafA_\x1e\x0c\xca"
    tuple_0 = (bytes_0, bytes_0)
    tuple_1 = (str_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_410():
    int_0 = 672
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bytes_0 = b"N\x11%IrD\xe5Wj\x18Q"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_412():
    pass


@pytest.mark.xfail(strict=True)
def test_case_413():
    float_0 = -459.429
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    float_0 = -19.33105
    set_0 = set()
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    complex_0 = -1275.89 + 379.716j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    bytes_0 = b"!S\xf8:"
    bytes_1 = b"xj\xc0'\xdd"
    dict_0 = {bytes_0: bytes_0, bytes_1: bytes_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    str_0 = "_8H$eUVnahbP"
    module_0.get_new_command(str_0, str_0)


def test_case_419():
    pass


@pytest.mark.xfail(strict=True)
def test_case_420():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    int_0 = -305
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    int_0 = 701
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    bytes_0 = b"1\xba\x03\xd0\xaa\x0b\x13W\xf1"
    bytes_1 = b"\xb9}"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_424():
    str_0 = "6e8\nM"
    str_1 = "'BYAU2\x0b"
    str_2 = "NW"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


def test_case_425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_426():
    str_0 = "2tw\n<a-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    str_0 = "l"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


def test_case_428():
    pass


@pytest.mark.xfail(strict=True)
def test_case_429():
    dict_0 = {}
    bool_0 = False
    list_0 = [dict_0, bool_0, dict_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    int_0 = 353
    bytes_0 = b"sIH\x8cL\x19\xd6\xde\x93\x14\xfd\xf4\xc7gUb\xab\x13b"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    int_0 = 388
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    int_0 = -1531
    module_0.match(int_0, int_0)


def test_case_435():
    pass


@pytest.mark.xfail(strict=True)
def test_case_436():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    int_0 = 1539
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bytes_0 = b"WY=\x1b\xe4\xbd\x0b\xf0|7p\\"
    int_0 = -1129
    bool_0 = False
    tuple_0 = (bytes_0, int_0, bool_0)
    set_0 = {tuple_0, int_0, int_0}
    dict_0 = {}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bool_0 = True
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    float_0 = 639.5954
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    int_0 = -835
    dict_0 = {}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    int_0 = -466
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bytes_0 = b"\x15\x02\xe9#\x08\xa6\x87\x9b\xbc\x15\x94|\xfde\x85\xfd3"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    str_0 = "^Vinq@uK4R{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bytes_0 = b"o\x8bv\xdb\x01\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    int_0 = 1848
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    str_0 = "4AB~FB[*59sT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_454():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    int_0 = 2041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    str_0 = "#oq|{!T"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    bool_0 = False
    int_0 = 141
    tuple_0 = (bool_0, int_0)
    tuple_1 = (tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


def test_case_458():
    pass


@pytest.mark.xfail(strict=True)
def test_case_459():
    float_0 = -843.38
    str_0 = "naU_J3+}eY]o|8^=?zgV"
    bool_0 = False
    tuple_0 = (float_0, str_0, bool_0, bool_0)
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    float_0 = 2467.2719
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    bytes_0 = b"~\xe1\xe8\x9c\xb4m\xc4\xef"
    module_0.match(bytes_0, bytes_0)


def test_case_462():
    pass


@pytest.mark.xfail(strict=True)
def test_case_463():
    float_0 = 1174.026
    float_1 = 391.90235
    set_0 = {float_0, float_1, float_1}
    list_0 = []
    tuple_0 = ()
    str_0 = "jps5^#RbtS\n'IU8Xrs!"
    tuple_1 = (list_0, tuple_0, str_0)
    list_1 = [set_0, float_0, float_1, tuple_1]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_464():
    str_0 = "up#a)O`y:7"
    dict_0 = {str_0: str_0, str_0: str_0}
    str_1 = "(E}EQ"
    dict_1 = {str_0: dict_0, str_0: dict_0, str_1: dict_0, str_1: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_465():
    int_0 = -2061
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    str_0 = "vA-K,Q)=r,?zQQU#d0Q"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    float_0 = 2782.887
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    int_0 = -2531
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    bool_0 = True
    bytes_0 = b"\xfe9\x85\x99\x9cA%\xadu\xa8\xa1\xaa\xf4:\xd4$\xd7\xe7e"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    str_0 = "FaAp8_ZP]yatLE"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_473():
    pass


def test_case_474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_475():
    float_0 = -1426.27
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    str_0 = "(rL\x0b`) oNU;oyZ"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    int_0 = 412
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    str_0 = "K,Gf\x0b`hj|87;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    str_0 = "JX),DF>xfZ#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    str_0 = "A!ms J"
    module_0.match(str_0, str_0)


def test_case_481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_482():
    int_0 = -2738
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    float_0 = -231.39
    module_1.object(*float_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    int_0 = 817
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    int_0 = -302
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bytes_0 = b"\xc3\xca\x88GR\xbf\xa7\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    str_0 = "\r*rN@)"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_490():
    bytes_0 = b"i(\xc1#\xb8@L\x11\xab\t+\xf0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = -756
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    int_0 = 1113
    module_0.get_new_command(int_0, int_0)


def test_case_493():
    pass


@pytest.mark.xfail(strict=True)
def test_case_494():
    str_0 = "~SG'F!~sc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    int_0 = -429
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    bytes_0 = b"\xac[\xff\x8a\x94i\x02^\xdb\xb6\xc2"
    bytes_1 = b"\xf9\x98\xc4\x04P\x08\x9f\x9bl\x8e\r\xa8'fmK\xabC"
    tuple_0 = (bytes_0, bytes_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    none_type_0 = None
    str_0 = 'j"\x0b=0 ?5\x0bjB<1K&%\t~q6'
    set_0 = {str_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    str_0 = "H<z"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    bytes_0 = b"fY\xd1\xe4ow\x0b7\x81\xdd]Y\xbeT_\xf3~n\x8c\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    str_0 = "PpxYKr^]008sL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    float_0 = 1844.625031
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    float_0 = 1818.219
    module_0.get_new_command(float_0, float_0)


def test_case_503():
    pass


@pytest.mark.xfail(strict=True)
def test_case_504():
    str_0 = "'(Y-!*A,6;j+\")/)M|\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    dict_0 = {}
    float_0 = 2023.970102
    list_0 = [float_0, dict_0, dict_0, float_0]
    set_0 = {float_0}
    tuple_0 = (dict_0, float_0, list_0, set_0)
    str_0 = "Y"
    tuple_1 = (tuple_0, str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_506():
    pass


def test_case_507():
    pass


@pytest.mark.xfail(strict=True)
def test_case_508():
    str_0 = "1x@$U1ME!s}z#k8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    bytes_0 = b"\xee#q%~\xd6\xe8\xfd\x00\x9f\xc8\x82\xea\xc2Hl\x0b\xeb\x05\x88"
    int_0 = -1153
    set_0 = {bytes_0, int_0}
    list_0 = [bytes_0, int_0]
    tuple_0 = (bytes_0, set_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    str_0 = "6bBkUa>tq@\t~\nc9<N0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    float_0 = -560.41
    str_0 = "R"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    str_0 = "'X$n;24~>hi8WP\\"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    str_0 = "(`_4*-OWZK}^{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    bytes_0 = b"\xb6 r-\x05\x91\x91\x06k\x13Dc\x06\xfb\x9a\xf2\xa9\xa6"
    set_0 = {bytes_0, bytes_0, bytes_0}
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: set_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    str_0 = "cW#1a1r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_519():
    pass


@pytest.mark.xfail(strict=True)
def test_case_520():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = True
    tuple_0 = (set_0, set_0, bool_1)
    tuple_1 = (bool_0, tuple_0)
    float_0 = 1027.76
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    int_0 = 1731
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    int_0 = -796
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    str_0 = "f\rT~_qI1D\tNg9#%-|SIt"
    str_1 = '\x0c*2DA_V$HOi6^d"\x0cB>'
    str_2 = "r"
    tuple_0 = (str_0, str_1, str_2, str_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    bytes_0 = b"78\x84\x9a\x80M\xfb\xfd\xf6),.\xd6\xa5?7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    bytes_0 = b"\xd1\x198\xf6\x8b\x88\xf4\x1e\xb5\xc9"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = (list_0, tuple_0, dict_0)
    tuple_2 = (dict_0, tuple_1)
    module_0.match(tuple_2, tuple_1)


def test_case_529():
    pass


def test_case_530():
    pass


@pytest.mark.xfail(strict=True)
def test_case_531():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_534():
    int_0 = -2055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    float_0 = -3826.56366
    tuple_2 = (tuple_1, float_0)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_536():
    complex_0 = 997.37 + 551.27517j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    str_0 = ":h;~sCJS^e`laz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bytes_0 = b"\xe7\xad\xc9"
    int_0 = -1418
    set_0 = {bytes_0, bytes_0, int_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    bytes_0 = b"S\x04\x1a~\xb0:\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    str_0 = "`"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    str_0 = '(22Ewn,\rVtrZ"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_544():
    pass


@pytest.mark.xfail(strict=True)
def test_case_545():
    float_0 = 4037.1915
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    bytes_0 = b"&a\xb0M\xb7\xa3"
    complex_0 = 1766.1 - 1001.29313j
    float_0 = -313.0
    list_0 = [float_0]
    tuple_0 = (bytes_0, complex_0, float_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    float_0 = -105.26173
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    float_0 = 274.8355
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    int_0 = 356
    module_0.get_new_command(int_0, int_0)


def test_case_550():
    pass


@pytest.mark.xfail(strict=True)
def test_case_551():
    str_0 = "M]Gyr;^dFP"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    float_0 = 1941.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    float_0 = 1889.52636
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    str_0 = "7U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    int_0 = -1234
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    str_0 = "nKm!5BzO1\x0c7R,nTv"
    module_0.get_new_command(str_0, str_0)


def test_case_558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_559():
    bytes_0 = b"\xd9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    complex_0 = -3189.556 - 1277j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    complex_0 = -529.9022 - 1348.64j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    int_0 = 3147
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    float_0 = 251.8736
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    int_0 = 2131
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    complex_0 = -728.02 - 600.00478j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    float_0 = 527.182
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    bytes_0 = b"\x184\xbbq\xder\x8b2P\r\xba\x98_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    bytes_0 = b"\x92\xe2O\xa2\x85|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_571():
    pass


@pytest.mark.xfail(strict=True)
def test_case_572():
    str_0 = "yG38gUr>^d:)"
    module_0.match(str_0, str_0)


def test_case_573():
    pass


@pytest.mark.xfail(strict=True)
def test_case_574():
    str_0 = "8bT"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    int_0 = -871
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    int_0 = 895
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    complex_0 = -359.97 - 1863.62757j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    bytes_0 = b"\x14\x80\xba\x89\xc2a\xe7\x96\xdbz\xe9\x0f\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    float_0 = 92.8935
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    float_0 = 5704.4347
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    int_0 = -407
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bool_0, int_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    int_0 = -2465
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    bytes_0 = b"\xd1,\xbaH\x95\xa2\xf4\x99\xa3\xe3\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    str_0 = ")7m!+gt!z"
    str_1 = "]@x_N~\\[b;n"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    int_0 = -4893
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    int_0 = 4280
    tuple_0 = (int_0, int_0, int_0)
    bool_0 = False
    tuple_1 = (int_0, tuple_0, bool_0)
    list_0 = [tuple_1]
    float_0 = -4174.73
    list_1 = [list_0, float_0, list_0]
    set_0 = {float_0, float_0, tuple_0}
    tuple_2 = (list_1, set_0)
    module_0.match(tuple_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    float_0 = 944.086749
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    bytes_0 = b"k%V\\\x05:\xab\x94\x1d'v\x96\xb7\xb9Z\xb2\x9b\x95\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    float_0 = -1017.8753
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    str_0 = "\\\r{\n=,ccD%AVe}hK#]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    str_0 = "E.Pa dQ8:]+LAj=@Nn"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    bool_0 = False
    int_0 = 2916
    tuple_0 = (bool_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    int_0 = 21
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    complex_0 = 1484.8401 - 1711.2757j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    complex_0 = -1165.252 - 374.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    str_0 = "6\tpiTQ)7&^"
    tuple_0 = (str_0, str_0, str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bytes_0 = b"%"
    tuple_0 = (list_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    str_0 = " QOI`"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    str_0 = "lR(p#VBw;`AZX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    str_0 = ":t?$An#b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    str_0 = "OK]6iI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    bool_0 = True
    float_0 = -1602.6842
    dict_0 = {bool_0: bool_0, bool_0: float_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    str_0 = "\\"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    none_type_0 = None
    int_0 = 1778
    module_0.match(none_type_0, int_0)


def test_case_612():
    pass


def test_case_613():
    pass


def test_case_614():
    pass


@pytest.mark.xfail(strict=True)
def test_case_615():
    bytes_0 = b"|\x14\xf3`?C\xa4\x89I4nH\xb7\xc5\xc1y"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    str_0 = '\r"'
    module_0.match(str_0, str_0)


def test_case_617():
    pass


@pytest.mark.xfail(strict=True)
def test_case_618():
    float_0 = 716.433
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    bytes_0 = b"\x8e4\x88X\xab\xb8\xa8"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, bytes_0, set_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    float_0 = 1692.781137
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    str_0 = "O8@)S"
    bytes_0 = b")\x9d\x8c^*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bytes_0, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    str_0 = "E\x0c4P}NK?J38b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    float_0 = 382.1
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    float_0 = 1896.18
    int_0 = -5124
    tuple_0 = (float_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    bytes_0 = b"[\xc4S\xb2\xb4nuQ\x00\xe3\xbe\xdf'\x92{"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    str_0 = "\x0c%jLPtk\\<0u.sf1@ms6W"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    int_0 = -1784
    module_0.match(int_0, int_0)


def test_case_630():
    pass


def test_case_631():
    pass


@pytest.mark.xfail(strict=True)
def test_case_632():
    bytes_0 = b"\xdd\x06\xc3\x19\x06\xc4\xb0x\x8e\r\xec\xcbe\x00\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    none_type_0 = None
    int_0 = 3273
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    float_0 = -641.219
    module_0.get_new_command(float_0, float_0)


def test_case_635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_636():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    int_0 = -2117
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    complex_0 = 1963 - 1726j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    str_0 = "V9)#'ujI'T\r!="
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    str_0 = "e$%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    str_0 = "m!C1wo"
    module_0.match(str_0, str_0)


def test_case_642():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_643():
    none_type_0 = None
    int_0 = 1033
    module_0.match(none_type_0, int_0)


def test_case_644():
    pass


@pytest.mark.xfail(strict=True)
def test_case_645():
    float_0 = -186.7233
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    float_0 = 2289.66172
    object_0 = module_1.object()
    module_0.match(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    int_0 = 277
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    str_0 = '+&Q("kPak'
    int_0 = 834
    dict_0 = {str_0: str_0, str_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    str_0 = "Uo3[d+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    float_0 = -307.70799
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    str_0 = "o&az8<sx;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bytes_0 = b"\xe4P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bytes_0 = b"\xa9\x1b\xab$\x99@\xc6\x18m\x8e%4J\xf3>\x80\xe05\xd1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    int_0 = 2276
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    int_0 = 322
    module_0.match(int_0, int_0)


def test_case_661():
    pass


@pytest.mark.xfail(strict=True)
def test_case_662():
    float_0 = -2004.1
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    str_0 = "QNhi;\r>n"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    float_0 = -2617.962791
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    float_0 = 826.0
    str_0 = "`_q)'*x\"I\tf\x0b"
    str_1 = "(}l%W&mJ"
    dict_0 = {str_0: float_0, str_0: float_0, str_1: str_0}
    module_1.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    int_0 = 3068
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    bytes_0 = b"\xa9\x8dfSa\x94\xbeK\xcc\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    int_0 = -2036
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    int_0 = -3825
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    int_0 = 1442
    tuple_0 = (int_0,)
    set_0 = {int_0, int_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    complex_0 = -4714.844574 - 2278.944j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    str_0 = "@`2u\rFKVDC\x0cn("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    bytes_0 = b"\x81\x81\xecF\xe8\x7f\x9a\x9e\xa1\xcf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    bytes_0 = b'7\xad\xa1\x84N"\x80\x98y\xf46K\x0e8\xce'
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    int_0 = 4518
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    int_0 = -1839
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    float_0 = -1597.955311
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    bytes_0 = b"\xd6\xb5I\xd8\x0e\x19\x86\xbav\\\xee\xf5T\x99"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    bytes_0 = b"\x8f\xec\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    int_0 = 963
    set_0 = set()
    list_0 = [int_0, set_0, set_0]
    list_1 = [list_0, set_0]
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    int_0 = -1468
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    float_0 = -1542.1
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    bool_0 = False
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    int_0 = -2503
    object_0 = module_1.object()
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    float_0 = 957.0
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    float_0 = 2103.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    float_0 = -3354.62026
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    int_0 = -638
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    str_0 = "\r$=T#2D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    str_0 = "\x0cR\x0bHN}2$\x0ctC)GVa0a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    str_0 = "^<\tt=F 4?\n>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    str_0 = "K\niCf9R1P[CJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    str_0 = 'RIHm4q{R0.h"pB\rSI3'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    str_0 = "lgnl/v}l\t%Z\n6u;5dZ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    int_0 = -1125
    module_0.match(int_0, int_0)


def test_case_708():
    pass


@pytest.mark.xfail(strict=True)
def test_case_709():
    int_0 = -249
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    str_0 = "5^@\\kTv-3m2t.0C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    float_0 = -2940.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    none_type_0 = None
    int_0 = 234
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    int_0 = 769
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    int_0 = -2849
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    str_0 = "uBljM0<~EiV1_=|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    int_0 = 197
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    int_0 = -1726
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    bytes_0 = b"U"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    float_0 = 34.21
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    int_0 = 638
    module_0.match(int_0, int_0)


def test_case_722():
    pass


@pytest.mark.xfail(strict=True)
def test_case_723():
    int_0 = 378
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    int_0 = -1058
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    bool_0 = True
    dict_0 = {}
    list_0 = [bool_0, bool_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    bytes_0 = b"\xe3\x9c\xc1"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    complex_0 = -316.84 - 3842j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    bytes_0 = b"+\xb0\x96;\x1c6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    none_type_0 = None
    float_0 = 1219.2
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    bytes_0 = b"\xfef\x0e\xbc\xac5\xd0\x89Q\xda\xe9\x0b1\xa5\x9a"
    str_0 = "7Ye49~Fn\x0b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, str_0: bytes_0, str_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    float_0 = 3788.0
    str_0 = "D{r) uo~pq:"
    set_0 = set()
    tuple_0 = (float_0, str_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    float_0 = -2737.736
    module_0.match(float_0, float_0)


def test_case_734():
    pass


@pytest.mark.xfail(strict=True)
def test_case_735():
    str_0 = "ir"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    str_0 = "lp\x0bh\x0baoZ!"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    bytes_0 = b"\xdfw\xb8pC"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    str_0 = "zgDC=`uu\r^jd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    bytes_0 = b"\xea\xd6"
    set_0 = set()
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (set_0, list_0)
    list_1 = [bytes_0, bytes_0, tuple_0]
    str_0 = "6p*/y"
    dict_0 = {str_0: bytes_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    str_0 = "`0hp9GD\r0U%,?ppAcEc/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    bool_0 = True
    bool_1 = True
    tuple_0 = ()
    tuple_1 = (bool_0, bool_1, tuple_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    str_0 = 'OTrk)XfX"g,\x0c}'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    complex_0 = 1993.22407 + 500.037288j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    str_0 = "$Q"
    tuple_0 = (str_0, str_0)
    tuple_1 = (bool_0, bool_0, set_0, tuple_0)
    bool_1 = False
    float_0 = 3935.0
    tuple_2 = (tuple_1, set_0, bool_1, float_0)
    module_0.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    float_0 = -326.828
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bytes_0 = b"\xa1Ia-\xd4\xa0R\\n\xb4xp\x05\xe9\xdcxif\x88"
    int_0 = -775
    list_0 = [int_0]
    tuple_0 = (bytes_0, int_0, list_0)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_754():
    pass


@pytest.mark.xfail(strict=True)
def test_case_755():
    int_0 = 640
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    str_0 = "\tY'O"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    complex_0 = -2631.77787 - 263.9j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    str_0 = ":,\rn{>l)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    int_0 = 3896
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    bytes_0 = b"e\xab\xc7[\x91\xc5\x9d\x11gV\xdb\xd3cy\xec\xb9O;"
    bool_0 = True
    str_0 = "X*98QnB~m\x0cS9U06E(S"
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: bool_0}
    tuple_0 = (bytes_0, bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    float_0 = -1942.23
    int_0 = 1895
    module_0.match(float_0, int_0)


def test_case_763():
    pass


@pytest.mark.xfail(strict=True)
def test_case_764():
    int_0 = 1759
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    int_0 = 3752
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bytes_0 = b"z\rJ\xe5zY\x04\x91\xa3B\xdd7B\x9dQJ\x97\xc6\xa6\xad"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_767():
    pass


@pytest.mark.xfail(strict=True)
def test_case_768():
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    complex_0 = 401.4225 + 1483j
    tuple_2 = (tuple_1, complex_0, complex_0)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_769():
    bytes_0 = b"\xbf\xfb\x15\xb9\xc4\xc3\xf4h>8\\u\xac\xd1\x9dG["
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    complex_0 = -3675.983 - 3440.121j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    str_0 = ":`7s5uk!lMEr0I\x0ct"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    int_0 = 452
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    str_0 = ",kU_`) \\q>L\x0cbt\x0bs*41y"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    float_0 = 2386.5057
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    bytes_0 = b"\x00\x19\xaam]<F\xabB\xc0\x86Vvf\xa0\xc9 q\x82\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    float_0 = -243.54
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    set_0 = set()
    int_0 = -1879
    bool_0 = False
    tuple_0 = (set_0, int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    dict_0 = {}
    bytes_0 = b"\x9f[.tK;\xea\x13l"
    tuple_0 = (dict_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    str_0 = "y\x0bGy*t!EfA<{(Y"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    str_0 = ":X=[2-g1+g"
    object_0 = module_1.object()
    str_1 = "Tfj\\"
    str_2 = "4@\\1gn(Pq{l\n<3"
    dict_0 = {str_0: object_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    int_0 = 2943
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_782():
    pass


@pytest.mark.xfail(strict=True)
def test_case_783():
    str_0 = "%9\r"
    int_0 = -729
    list_0 = [str_0, str_0, int_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    float_0 = -342.82614
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    int_0 = -1975
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    bytes_0 = b"P\xfe\xff,S\x12\xe66q\xb8\\\xae\xb4\xfd\x13\xa5\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    complex_0 = -1497 + 324.101j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_791():
    pass


@pytest.mark.xfail(strict=True)
def test_case_792():
    bytes_0 = b"\x96\xec\x8c\xbb\xc8\xdc\nsyo~?\xbf\x9e\xb3\x91\xdeu\r]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    int_0 = 3870
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    str_0 = "x*\rC"
    bytes_0 = b'"\x9eyX\x8a\xe7\xb5k\xc8+'
    tuple_0 = (str_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    int_0 = 603
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    int_0 = -3328
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    str_0 = "}muw~y="
    module_0.match(str_0, str_0)


def test_case_798():
    pass


@pytest.mark.xfail(strict=True)
def test_case_799():
    bytes_0 = b"\xce\xd8G\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    float_0 = -3838.8056
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    int_0 = -2674
    dict_0 = {int_0: int_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    int_0 = 2655
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    str_0 = "R: @pF*x? ]R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    float_0 = 1512.654
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    int_0 = -916
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    bytes_0 = b"\xc4,s\x88\xec\\k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    bytes_0 = b"u\x0f\xe6ei&\x06'\xe5RM\xc1\xa7\x17s\xa6\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    int_0 = 1069
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    set_0 = {int_0, tuple_1, tuple_1}
    tuple_2 = (tuple_1, set_0)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_810():
    str_0 = '\n>8"<[pX'
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    float_0 = 1005.0
    list_0 = [float_0]
    tuple_0 = (float_0, float_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    str_0 = "wu\n)6'Q`>xn#ABv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_816():
    bytes_0 = b"\xd1\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    str_0 = "M;[t/iJ(^a;Ow~"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = {str_0: dict_0, str_0: dict_0}
    float_0 = -1827.4
    tuple_0 = (dict_1, float_0, dict_0)
    str_1 = ""
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_818():
    str_0 = ' P?Ezr9"Al[IAI&yip}X'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    str_0 = "9]\r'2\r79%\x0b$lw)a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    str_0 = ",$f\\jL\r)\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    int_0 = 522
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    str_0 = "(NQgD$;QnU*"
    int_0 = -2667
    bool_0 = False
    dict_0 = {str_0: int_0, str_0: bool_0, str_0: int_0, str_0: str_0}
    int_1 = 1806
    tuple_0 = (str_0, int_0, dict_0, int_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    bytes_0 = b"[V\xb9.|\xd1\x93Pxx2\xbb\x86\xa7"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    str_0 = "V>B2yAryCqvSgq1,Db"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    bytes_0 = b"\x0b\x95\xff!\x13\xe0\x1c=x\xafy\xdc#\xa9\x9f{"
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_1,)
    str_0 = "~xA*P_er\x0cXN^AF>{FrY{"
    set_0 = {bool_1, bytes_0, str_0, bytes_0}
    tuple_1 = (bool_0, tuple_0, set_0, bytes_0)
    module_0.get_new_command(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_827():
    int_0 = 1349
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    bool_0 = True
    bytes_0 = b"\xc2\x18\xb6?\xb2\xd6\xb1\xec\x1f\xec\xa3V\x03\xf5:"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    str_0 = "<}Oe9FB 1Y8cWJR "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    bytes_0 = b"\x11-\xbbI\xc8.\x18\xb750\xc8q5\x83"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    str_0 = 'MG\t`At84<_\rL"f\x0b'
    module_0.match(str_0, str_0)


def test_case_832():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_833():
    bytes_0 = b"Cq\x18\x7f\xae\xc4\x10Mp\x13\xf4\x1b\x11q\xd7\x9c\x83"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    str_0 = "L"
    module_0.match(str_0, str_0)


def test_case_836():
    pass


@pytest.mark.xfail(strict=True)
def test_case_837():
    str_0 = "\x0c|N:me"
    module_0.match(str_0, str_0)


def test_case_838():
    pass


@pytest.mark.xfail(strict=True)
def test_case_839():
    bytes_0 = b"`\xd1,\xec\xca/\xd9\xe6\x0c\\yD"
    module_0.match(bytes_0, bytes_0)


def test_case_840():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_841():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    int_0 = -52
    dict_0 = {int_0: int_0}
    module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    str_0 = "_*`"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_845():
    pass


@pytest.mark.xfail(strict=True)
def test_case_846():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_848():
    pass


@pytest.mark.xfail(strict=True)
def test_case_849():
    int_0 = -719
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    bytes_0 = b"\xe4\x98Z\xce\xc5!V\x803\xf1"
    module_0.match(bytes_0, bytes_0)


def test_case_851():
    pass


def test_case_852():
    pass


@pytest.mark.xfail(strict=True)
def test_case_853():
    float_0 = 1390.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    int_0 = -5005
    str_0 = "pLAj<Z<"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    float_0 = -212.78
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    complex_0 = 2835.4796 + 1074.473j
    float_0 = 622.1353
    list_0 = [complex_0, complex_0, complex_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    int_0 = -278
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    str_0 = "amSmz(6j[N9"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    str_0 = "?H"
    none_type_0 = None
    str_1 = "wpx~"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bytes_0 = b"\xb4c\xaf\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    float_0 = -2484.0
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    str_0 = "tm24^RH!Z;dWF(C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    int_0 = -1354
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    tuple_0 = ()
    bytes_0 = b"\xd8"
    tuple_1 = (tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_866():
    int_0 = 126
    set_0 = {int_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    none_type_0 = None
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    int_0 = -6673
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    int_0 = -2566
    module_0.get_new_command(int_0, int_0)


def test_case_870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_871():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    int_0 = -3524
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    bytes_0 = b"\x8f\x90\xfe\x9eS\xa7\x91~[`J\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bytes_0 = b"\xff7\xc8>\xce\xc8\xb4;\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bytes_0 = b'Mf1\x9a\xff\xc4Av\xbf\xc4"\x8c,X24\xde'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    str_0 = "Pi\nJ,@2?aD)x*&>LGa1."
    module_0.get_new_command(str_0, str_0)


def test_case_880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_881():
    object_0 = module_1.object()
    module_1.object(**object_0)


def test_case_882():
    pass


@pytest.mark.xfail(strict=True)
def test_case_883():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    bytes_0 = b"t\xdbv\xe3y\x83ay0T-#vO\x94\x1f\xf9"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    str_0 = '"hXDgOb",c84d'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bytes_0 = b"\x88\xed\xb5rj\xb4\xdaHG>\xf5<\n\xf9"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_887():
    pass


@pytest.mark.xfail(strict=True)
def test_case_888():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    int_0 = 1360
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    float_0 = 624.26768
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    int_0 = 881
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    str_0 = 'i$_5m^Jjz\n@pEc$R"Z'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    set_0 = set()
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


def test_case_895():
    pass


@pytest.mark.xfail(strict=True)
def test_case_896():
    int_0 = 2210
    str_0 = "*Q!*qU^heSZakdqV\tLK"
    dict_0 = {str_0: str_0, str_0: int_0, str_0: int_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    bytes_0 = b"$\xdfa\xbaq\xff&"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, set_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    float_0 = 3.268739
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    int_0 = -2602
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    bytes_0 = b"~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    str_0 = "{IE(n'\"H"
    module_0.match(str_0, str_0)


def test_case_902():
    pass


@pytest.mark.xfail(strict=True)
def test_case_903():
    str_0 = "+!hC|~D\t]{ayq'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    float_0 = -168.3631
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    bytes_0 = b"\x13\xae]v]y"
    str_0 = "4*1y!%%"
    tuple_0 = (bytes_0, str_0)
    dict_0 = {tuple_0: tuple_0, str_0: str_0, tuple_0: bytes_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    str_0 = "]\r9gAmbu}sMMZIt)\x0bpl"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    int_0 = 4841
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    bytes_0 = b"\x94\x8c\xd0\xe1o"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    str_0 = "\\r%\\Ouu)g1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    bytes_0 = b"\xfe\xad"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    str_0 = "\x0b&pPB>(?B3"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    bytes_0 = b"\xdf\x11\x03p#\x0ch\xad\x99\x82\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    int_0 = -340
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    int_0 = -1624
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    bytes_0 = b"\xb6\xe1\xe7\xe0\xf4\xbau\x8d_D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    bytes_0 = b"\xab\x83L;\xd1\x87f\xf9N\xf6\xc6k\x9a\x18i\xb2\xe0b\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    bytes_0 = b"\xfeD\xc4\x7f}?\xf4\xc7\xd2\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    float_0 = -1086.05
    set_0 = {float_0, float_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, set_0, set_0, set_0]
    list_1 = [list_0, set_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    str_0 = '(!"Bn/'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    bytes_0 = b",o\x8d_\x93\x84\x01\x93\xb5/"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_924():
    pass


@pytest.mark.xfail(strict=True)
def test_case_925():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    str_0 = "NQ4\x0c)VKe}32HA"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    bytes_0 = b"\x89F\xf7\xa4\x86e|Bz\xf1\xc7\xce"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_928():
    pass


@pytest.mark.xfail(strict=True)
def test_case_929():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    int_0 = 3897
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    str_0 = '/7);q"`\'q@"Peh0dG'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    complex_0 = 1673.113873 + 364.97j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"\x02\x10\x1c\xa7\xa1\xe0\x90\xee\xa5m\xc0"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    float_0 = 931.3042
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    none_type_0 = None
    str_0 = "2Xy(F@G%'t_P>3\r"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    int_0 = 1405
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    str_0 = "!tN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    bytes_0 = b"\xe9\xd2z\xd8r\x04\xbb"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    int_0 = 1636
    str_0 = "D"
    list_0 = [int_0, int_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    int_0 = 1952
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    float_0 = -2695.7208
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    none_type_0 = None
    complex_0 = -3749.099551 + 1001j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    int_0 = -2050
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    bytes_0 = b"\xd6l\xe1ps[4nC\xeb\x1c\xfb:\xad\x8f\xbe\x89\x1d\xef"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    complex_0 = -786.90893 - 1982.4j
    bool_0 = False
    str_0 = ""
    tuple_0 = (bool_0, complex_0, str_0)
    module_0.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    int_0 = 4104
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    int_0 = -2907
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    bytes_0 = b"\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    bytes_0 = b"\x88\xcb6\xa1\xd1E\xc7-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    int_0 = 1370
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    str_0 = 'l"hCajMgr47'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    int_0 = -1744
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    float_0 = 77.8297
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    bytes_0 = b"\xb9t\x1e\x9c\x9az\x85\xa0y\xc4\xcfl:D\x82\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    tuple_0 = (dict_0, bool_1, bool_1, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bytes_0 = b'\x19r\xefQ\x17\xee\xcd\x18e\xedc"\x9b@\xcb'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    str_0 = "wk:w3kktftz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    bytes_0 = b"\xea@j\x90\xe0\x10"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    str_0 = ".2LL\tqHOo"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    str_0 = "t I2\x0b.YlE"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    int_0 = 2732
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    str_0 = "\x0c$OTt`\t3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    str_0 = "mh3"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    float_0 = -1818.097658
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    bytes_0 = b"\xc3\x94\xae1\x11\x0b\xd4\xdd\xb5y\x00\xb2\x93\xef\x10"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    bytes_0 = b"W\x845\xafz\xd1\xcf"
    tuple_0 = (bytes_0,)
    bytes_1 = b"\x19\xb4"
    list_0 = [tuple_0, tuple_0, bytes_0, bytes_1]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    int_0 = -2035
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    int_0 = 1381
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


def test_case_980():
    pass


@pytest.mark.xfail(strict=True)
def test_case_981():
    int_0 = 385
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    bytes_0 = b"\x85zi\xb3<N\xaf\x87\xae&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    float_0 = 653.9335
    str_0 = ""
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    int_0 = -2041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    bool_0 = False
    int_0 = 441
    tuple_0 = (int_0,)
    dict_0 = {bool_0: int_0, int_0: int_0, int_0: tuple_0}
    bytes_0 = b'\x96\x9c"\xc9b\x81\xdee\xc0Qy\x88\xdc\xe3\xec\xe4w'
    tuple_1 = (bytes_0, tuple_0, dict_0)
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_986():
    int_0 = -2999
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    str_0 = "B=QTdU\tx^eObMJ&q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    bytes_0 = b"\xfa\xbfR\xb9\xde\xa4%"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    none_type_0 = None
    int_0 = -1774
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    int_0 = -48
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    float_0 = 784.818
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    str_0 = "J"
    object_0 = module_1.object()
    list_0 = [object_0, str_0, str_0]
    tuple_0 = (list_0,)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    bytes_0 = b"9\x82\x1b=\xa5\xe2\xb9\xcfU\x9b\xbc\x12-\xf2\x08{Gg\xda\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    str_0 = "\x0b0FYMP{e)k!TGK"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    bool_0 = True
    float_0 = -1680.2
    set_0 = {bool_0, float_0, bool_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    bytes_0 = b"\xb5\x83\xce\xb4m\xb4?'"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    int_0 = 2492
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    str_0 = "s0[\ru8do\\Q%0"
    int_0 = 71
    str_1 = ".$4"
    tuple_0 = (str_0, int_0, str_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


def test_case_1003():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1004():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    int_0 = -924
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    bytes_0 = b"\x89\x0c\xea\xa8\xae\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    bytes_0 = b"\xb3\xf2\xf6\x8ar\x198K\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    complex_0 = 3145.34 + 271.88677j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_1011():
    pass


def test_case_1012():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1013():
    bytes_0 = b"l\x1fo\xf7\xf6z\x95*\x84\x15\xf8\xaf\xa5{\xde\x12*\x11"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    int_0 = -994
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bytes_0 = b"\x1a\x05\x89\xe0\xc7\xda\xe6q"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    int_0 = 2112
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    str_0 = "f!t%^%cW-G>[7\nv@#gR{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    int_0 = 3109
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    str_0 = "$"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    int_0 = -613
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    complex_0 = -1538.451675 + 356.4918j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    str_0 = "Vm#H]^S]R%Hd0dkt"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    int_0 = -934
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    int_0 = 626
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bytes_0 = b",\x14\xfds\x11\n\xd3\x9f\x01\xb1\xf6\xec\xe0\xa5\xc6\xc8i\xf3\xa6"
    str_0 = "/[w\r`~:-]vw3:7c'u"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    complex_0 = -1154.697 + 4052.531215j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bytes_0 = b"k\x06\xc3\xc0\xb4\xdf\xcd\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_1034():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bytes_0 = b"\xd4 \x08\x17M]\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    int_0 = -655
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    bytes_0 = b"\xb3j"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    int_0 = -136
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    float_0 = 273.833
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    int_0 = -985
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    str_0 = 'Q7n:t&&62\x0cC\x0b9AR"'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bytes_0 = b"\x029\x1d%"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    float_0 = 4434.889
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    str_0 = "L\x0b\x0bPj6Z2C"
    str_1 = "!ppn@xG\\)3xZ`E?"
    set_0 = {str_0, str_0, str_0, str_1}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    bytes_0 = b"\xffgL,\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    none_type_0 = None
    float_0 = -421.6
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    int_0 = 911
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    float_0 = -766.579847
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    float_0 = -4006.21
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


def test_case_1052():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1053():
    float_0 = 2012.174
    object_0 = module_1.object()
    list_0 = [float_0, object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    str_0 = "xE74ZB;U0;Ha"
    complex_0 = 4203.005 - 14.93082j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    str_0 = "<%vjL=OIcqR:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    str_0 = "c4HrV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    int_0 = -610
    set_0 = {int_0, int_0}
    int_1 = -2629
    str_0 = "*%(8f4OR??<m&"
    tuple_0 = (set_0, int_1, str_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    float_0 = -549.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    int_0 = -122
    list_0 = [int_0]
    module_1.object(*list_0)


def test_case_1061():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1062():
    int_0 = -2220
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    int_0 = -2771
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    bool_0 = True
    str_0 = "%#JFa2e{(JO.R98167"
    tuple_0 = ()
    tuple_1 = (bool_0, str_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    int_0 = -1690
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    complex_0 = 1364 + 1595.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    str_0 = "o"
    str_1 = "e"
    str_2 = "-WY3"
    str_3 = "["
    str_4 = "`Di2a^r\n"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_3, str_4: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    str_0 = "qT'$a\n8qTN|:f\x0c)+G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    int_0 = -1525
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bytes_0 = b"\x0727\xe5\x85\xb4\x94g4\x1fCIy\x1c!\xa8b\x05"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1073():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1074():
    bytes_0 = b"M4\xc5a\xe2\xd2\x19\x1e"
    str_0 = "&`PH\nm$<W-IDR&8e,G,`"
    complex_0 = 4433 - 195.3291j
    dict_0 = {bytes_0: bytes_0, str_0: str_0, bytes_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    bytes_0 = b"\x1d\x0c\xa56\x91\xe0\x91\x10\x9c\xee\xb6U\x96\x80\xf8$\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    bytes_0 = b")K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    int_0 = -2137
    int_1 = 300
    dict_0 = {int_0: int_1}
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    int_0 = 313
    module_0.get_new_command(int_0, int_0)


def test_case_1079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bytes_0 = b"\xd5\x8f\xb64#\x1a \xe0\xf5\xe9l\xf4U\xec'"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    str_0 = "^>}QT*)\\IS]\t{\rq)H_"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    int_0 = 1504
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    bytes_0 = b"\xb4\x06\x88)t\x83\xc6\xddJ\xb1\xd5nt\x1a_dg\x91"
    int_0 = -867
    tuple_0 = (bytes_0, bytes_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    int_0 = 2249
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    int_0 = -1633
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    bytes_0 = b"_\x1b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    none_type_0 = None
    int_0 = -4649
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    bytes_0 = b""
    dict_0 = {}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    complex_0 = -1341 + 1411.9j
    list_0 = [complex_0, complex_0, complex_0]
    str_0 = "eS5(]t@Wnj"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    float_0 = 391.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    complex_0 = -2958.91 - 2481j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    bytes_0 = b"\xd2k\xd0\x9d\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bytes_0 = b"W\x12ho"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    int_0 = 611
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    str_0 = "v \x0cunZ@2\nFI*\tq\\e!S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    int_0 = 1012
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    int_0 = 1114
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    int_0 = -1079
    tuple_0 = (int_0,)
    complex_0 = 3356.68 + 3278.71342j
    tuple_1 = (tuple_0, complex_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    float_0 = -400.2358
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    float_0 = 85.175
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    float_0 = 2158.96
    module_0.get_new_command(float_0, float_0)


def test_case_1105():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1106():
    str_0 = "Y"
    bool_0 = True
    str_1 = "1.Xh\rY=P\n7~0LD"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    list_0 = []
    float_0 = 763.1321
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    str_0 = "N#$LX-0!__qnO"
    module_0.match(str_0, str_0)


def test_case_1109():
    pass


def test_case_1110():
    pass


def test_case_1111():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1112():
    str_0 = "5{l@#H"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    str_0 = "9t)r7JjYNvNyyM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    str_0 = "<nu\tMn|<-\\@I<)iFr"
    bytes_0 = b"w\xdd!=?\xccktD#\n^"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bytes_0, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    int_0 = -1648
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_1117():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1118():
    str_0 = "PO*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    complex_0 = 247.4167 + 332.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bool_1 = True
    list_0 = [dict_0, dict_0, dict_0, bool_1]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    float_0 = -1357.6
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    bytes_0 = b'l\xf2\xfb\xe6)\xff\xcb"\xba\x91\xb2\x8f'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    bytes_0 = b"\xcaM\xa4\x95T\x147\x0b\xff\x1e\xac*rb"
    set_0 = {bytes_0}
    bool_0 = True
    str_0 = "=rS2B%77q4uh>"
    tuple_0 = (bytes_0, set_0, bool_0, str_0)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    bytes_0 = b"|p\xb72\x9aU$\\\x9dV\xba\xb7\x98\x93_\x00\xc3\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    int_0 = 1561
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    str_0 = "f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    str_0 = "eyOn3[\t@rmU:/IFN{4]O"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1128():
    pass


def test_case_1129():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1130():
    float_0 = 1302.43
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    int_0 = 1109
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    float_0 = 1521.87
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    bytes_0 = b"\xea\xb0"
    dict_0 = {bytes_0: bytes_0}
    bool_0 = False
    str_0 = "O!IEuv\rH\x0cT $$"
    float_0 = 2293.584
    tuple_0 = (bool_0, str_0, dict_0, float_0)
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    str_0 = "qOOPHmyr[S85,q9:\rM)"
    int_0 = 1516
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1136():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1137():
    bytes_0 = b"\xf2/S\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    str_0 = "=z@Jnk"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    complex_0 = 1479.48957 + 648.97797j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    set_0 = set()
    str_0 = "X'94FA\",XK67qTKT?jV"
    tuple_0 = (set_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    float_0 = -182.877
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    str_0 = "SorCc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    bytes_0 = b"\x91=\xdaTMU\xd5\x13\xce_\xd9m\x9f\xfc\xc44\xb10\xb4"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    bytes_0 = b"1\x81M)\xf0d\xbb\x83=\x86ne\x18\xd3\xa0\xff"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    str_0 = ""
    float_0 = 200.3
    bytes_0 = b"=\xceV\xf1\x1aF\x84"
    tuple_0 = (str_0, float_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    bytes_0 = b"\xf7$\x05Bt7\x95\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    int_0 = 2112
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    list_0 = []
    list_1 = [list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    str_0 = "\tG<,/UA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    complex_0 = 1429.4 - 1423.527j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    list_0 = [complex_0, set_0, complex_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    int_0 = -2469
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1156():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1157():
    str_0 = "qdZbJ7\n!G~n5\x0bSjv"
    bytes_0 = b"v\x92\xdd\xa3\x1e-\xe7"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    str_0 = "{ars8\r-b\\L"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    str_0 = "Fl&kdVLL"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    bytes_0 = b"S\x11Y\xeb\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    bytes_0 = b"\x1ai\xd8\x00\xe3\x08\x12\x95"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    bytes_0 = b"7\x8f:\x12d\x1a\x91\x94\xcbZ\x18\xc6\xa8,#\xfa"
    bytes_1 = b"]\x91\xedl\x08\x1f"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bytes_0 = b'"\x9a\r'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bytes_0 = b"\xa2qR@%\x85z\xbc\x10\x18\xcd1M-\xccK6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    int_0 = 757
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    str_0 = "Q9}J"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_1170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1171():
    str_0 = "#jTiQ%+i*t1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    float_0 = -213.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bytes_0 = b"\xc3\xa85ES\xea\xdd\xa2\xf1rh\xed\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    complex_0 = 2504.358977 + 1517.199j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    float_0 = 1055.58
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    str_0 = "/Lc1OUt6w=>x=W%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    str_0 = ""
    int_0 = 1110
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    float_0 = -2561.41028
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    bytes_0 = b",\xb3\x9f?\xa8!n\xa2\xf7\x82S\xbc,U\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    bytes_0 = b"\x98%\xdd\xba\xdef\xed\xac\xc4kG"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    int_0 = 1035
    module_0.get_new_command(int_0, int_0)


def test_case_1183():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1184():
    list_0 = []
    tuple_0 = (list_0,)
    list_1 = [tuple_0, tuple_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    str_0 = " *i]"
    int_0 = 2308
    bytes_0 = b"K\xd9Kd\xf4\t]J\xa1"
    tuple_0 = (int_0, int_0, bytes_0, bytes_0)
    set_0 = {str_0, tuple_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    float_0 = 1682.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    bytes_0 = b">\xd4\x91\xc2\xfd{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    int_0 = -1090
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    int_0 = 2445
    module_0.match(int_0, int_0)


def test_case_1190():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1191():
    bytes_0 = b"\x91{\xf5k"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    str_0 = "yfdp](\rQ"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_1193():
    pass


def test_case_1194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1195():
    int_0 = -284
    module_0.get_new_command(int_0, int_0)


def test_case_1196():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1197():
    complex_0 = -1955.377 - 1161.047j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    str_0 = "BPa"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    int_0 = 683
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    str_0 = "[J~D4Ka/"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    str_0 = "\x0b\r~$`_L#-nC:8\tb<]p"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    bytes_0 = b"N4\xf2\xf5]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    bytes_0 = b"\xf1r\xab\x98\xb1SM\x01\x94\xea\x93\xae\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    int_0 = 1300
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    str_0 = ""
    str_1 = "3*\tA($u"
    str_2 = "TO+J?!t4"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_0: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    bytes_0 = b"\xf0\xddh\xeaR_|\xb4\x99_\x94"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    bytes_0 = b" M\xa6\x85\xe7\x1e\x92\x98\x80\xb3\n\xe5\xd5\x15},\x84\xaf\xc9G"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_1208():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1209():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


def test_case_1210():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    str_0 = ";\\\x0ccvB\\F9v}[*"
    set_0 = {str_0, str_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bool_0 = True
    int_0 = 1653
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    bytes_0 = b"\x9a\xc7?$u\xcdw&\xad\xce\xeab%\x9c\x90\x1f\xc9)\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    int_0 = -2740
    tuple_1 = (list_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    float_0 = 3009.97775
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    dict_0 = {}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    complex_0 = 2164.9525 + 4779.452589j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bytes_0 = b"\x9a\x84|\xa0Z\xe9\xdf\xf5(^M\xf67\x89\x18"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_1223():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1224():
    str_0 = 'h<504j"Op'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    float_0 = 1607.8743
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    int_0 = 3812
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    float_0 = -14.8998
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    bytes_0 = b"\x88\x8b\xad?v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    float_0 = 929.472548
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bool_0 = False
    int_0 = 163
    int_1 = 164
    list_0 = [int_0, int_1, int_0, int_0]
    module_0.get_new_command(bool_0, list_0)


def test_case_1232():
    pass


def test_case_1233():
    pass


def test_case_1234():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bool_0 = False
    float_0 = -291.0
    dict_0 = {bool_0: float_0}
    tuple_0 = (bool_0, float_0, float_0, dict_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    int_0 = -590
    bool_0 = True
    list_0 = [int_0, int_0, int_0, bool_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    str_0 = "HB9^{\x0bz%)w+vMf>N]a9&"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    int_0 = -2518
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bytes_0 = b"M\xd3\x85\xfc\x06\x05\x01\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    dict_0 = {}
    bool_0 = True
    list_0 = []
    tuple_0 = (dict_0, bool_0, dict_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    float_0 = 860.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    bytes_0 = b"\x1d\xb1A\x844"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    int_0 = -3372
    int_1 = 2179
    set_0 = {int_0, int_1}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"\x9bt=\x08~\x07\xde\x8dm\x8d#+"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    object_0 = module_1.object()
    bool_0 = True
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    bytes_0 = b"s\x85\xc3V\xcdL\xc3\xb8P\x9b\xa6+!G\x18\x03"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1248():
    pass


def test_case_1249():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1250():
    none_type_0 = None
    int_0 = 900
    dict_0 = {int_0: none_type_0, int_0: int_0, int_0: none_type_0, none_type_0: int_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    str_0 = 'U e"o1FBvW&~*-'
    dict_0 = {}
    bytes_0 = b"2\xbf\xa5\xe1i"
    bool_0 = False
    tuple_0 = (str_0, dict_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    int_0 = -1752
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    int_0 = 2693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    bytes_0 = b"\x92\xbc\xb0\xf7\xcf.;\xee|Nw\x81\xfd\xf1X\x198"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    str_0 = "c8%uCLTd-;5oqk34"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    str_0 = 'O";e->6QaI\x0c"#NAL'
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bytes_0 = b"\xc5f_\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    int_0 = -1145
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    str_0 = "DZd\x0cY(nJ zp0f\r=aG~"
    str_1 = "6"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    bytes_0 = b"\xe8\xc7\x0e[\xecd\xa3\xe9k\xe2\xdc\x92\xeb\x92\n\xf4\xbc\x8b\x87c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    int_0 = -2387
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    bytes_0 = b",\xa9\n\xca \x04\xc5\xbd\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    int_0 = -10
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    bytes_0 = b"t\x00n|\x942\x86 \xbb\xff\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bytes_0 = b";\xb5\xa7\x9b<x\xee\xef"
    set_0 = {bytes_0, bytes_0}
    bool_0 = True
    tuple_0 = (set_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    str_0 = '_Alsp]*OnN(r",\r'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    complex_0 = 120 - 936.6519j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    str_0 = "K4&^RL=m(J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    bytes_0 = b"\rr\x9d\x89\xa9*Ie\x05\xaa\xeanZ"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    float_0 = -75.188
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    bytes_0 = b"A\xc7\xff\x1e0\xa9\x17\xb5\x0c\xfd(lR"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    float_0 = 2567.0101
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bytes_0 = b"g\x0f\xb6\x81\xcc\xe5\xed\xf3V\xe0\x9f\x15\xe0,S% "
    list_0 = []
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: list_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    int_0 = 4621
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    complex_0 = 210.688 + 4973j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    bytes_0 = b"\xfe\x1fU\x17\xb5Zq\xbbB:\xb0V\x1bpz\x07\x89\x0b/"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    int_0 = -2900
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    int_0 = 272
    module_0.match(int_0, int_0)


def test_case_1285():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1286():
    str_0 = "#^m8|[5a"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    none_type_0 = None
    int_0 = -1048
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_1289():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1290():
    str_0 = "ITyd8%EFRf-hc2:QPsUC"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    int_0 = 1632
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    str_0 = "yN}-Gf$<bKmL=s"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    str_0 = "\x0cH;0lL\x0b;S{Uu4{"
    int_0 = -1015
    module_0.get_new_command(str_0, int_0)


def test_case_1295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_1298():
    pass


def test_case_1299():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1300():
    dict_0 = {}
    str_0 = '"x96lzExO.(r\neK_}x'
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    bytes_0 = b"U`\x98j\x9eu'\x99^\xf4\xdd\xcb\x1e\xdd\xd9G\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    int_0 = -858
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    int_0 = -2926
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    int_0 = -4816
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    bytes_0 = b"\xab\xb97\xeef\x95\xb7$<\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bytes_0 = b"\xf4\x8dm\x81-v\x12x"
    float_0 = 1858.607
    tuple_0 = (bytes_0, float_0, float_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = True
    dict_0 = {bool_1: set_0}
    bool_2 = False
    tuple_0 = (bool_0, set_0, dict_0, bool_2)
    tuple_1 = (set_0, tuple_0)
    module_0.get_new_command(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    bytes_0 = b"w=\x7f\x91\xf0y.\x00\xd5#\x18j--\x8d\x9d*"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    dict_0 = {}
    int_0 = 1260
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    str_0 = '-gK>aG8+"dh8}\nV8R]Tt'
    bytes_0 = b"\xcdB\xbas\xf6?\xf6}\x04"
    dict_0 = {str_0: bytes_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    complex_0 = -377.9428 - 498.5j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    float_0 = 2154.509485
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    int_0 = -1089
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bytes_0 = b"\x89\x9dQ\xb2\x00\x004^\xe9Rc#\x11^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    bytes_0 = b"=/\xe7\xa8\xc24J;i\xe2\xf6$\xcf\xcd,\xf65\x17\xe1\xb0"
    int_0 = -234
    dict_0 = {}
    tuple_0 = (int_0, bytes_0, bytes_0, dict_0)
    tuple_1 = (bytes_0, int_0, tuple_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    float_0 = 1258.1
    bool_0 = True
    tuple_0 = (float_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    int_0 = 3984
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bool_1 = True
    tuple_0 = (bool_0, set_0, bool_1)
    list_0 = [tuple_0, bool_1, bool_1, set_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    float_0 = 259.112675
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    int_0 = -889
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    int_0 = 1447
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    int_0 = 1782
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    bool_0 = False
    str_0 = "&`U`ZPR\rU~\"X4v#N'"
    dict_0 = {str_0: bool_0, str_0: bool_0}
    tuple_0 = (str_0, dict_0, str_0, str_0)
    tuple_1 = (bool_0, bool_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    float_0 = 415.178
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    bytes_0 = b"\xae\xc3f\xfc\xf7>\x94\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    int_0 = 921
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    int_0 = 844
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    complex_0 = 3438.301 - 373j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    int_0 = 2105
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    int_0 = -140
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    list_0 = []
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, tuple_0, tuple_1]
    bool_0 = True
    bytes_0 = b"\x8c\xe0a\xee\xd2\xdb\xccn\x1b\x03M=\xf5\x88h\xf6"
    tuple_2 = (list_0, bool_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bytes_0 = b"\xdb1\xefr\x97\xed\xf8\x8c\x13\xdc\x9d"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    complex_0 = 130.319 - 1177.2448j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    int_0 = 1666
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    complex_0 = 31.1212 - 2079.95199j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1349():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = "p%P:;-"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    str_0 = "@t$P8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1352():
    pass


def test_case_1353():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1354():
    int_0 = -4432
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    int_0 = 4876
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    str_0 = "p.IT^3wBLM(4TU,7_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    float_0 = -2395.397
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bytes_0 = b"<B\xbb\x1c\xa5\xbbk"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    int_0 = -922
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    bytes_0 = b"\xc27r\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    tuple_0 = ()
    float_0 = -1241.107
    module_0.match(tuple_0, float_0)


def test_case_1362():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1363():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    int_0 = 2702
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    bytes_0 = b"L\xdaz\xcb\xa3"
    str_0 = '\tvbTKl/mF<"J=t6'
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    bool_0 = True
    int_0 = 127
    bytes_0 = b"&P\x14wK\xd3\xb3\x1fa\x08\x05\xc2\xd5\x8f"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0, int_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    str_0 = "GCB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    int_0 = -146
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bytes_0 = b"+\x0e\x87Y\xb21\xd0"
    int_0 = -69
    str_0 = 'oJIU?)9^X2v8:q";,\x0b>@'
    tuple_0 = (bytes_0, int_0, int_0, str_0)
    set_0 = {tuple_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bytes_0 = b"\xcd;_\xe8\xd5\xfe\xd7\xc3\x9e\x86\xfa\x17\xdd"
    set_0 = {bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    float_0 = -26.953068
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    float_0 = 3030.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    int_0 = -948
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    str_0 = "o5Y#"
    str_1 = "i!*GoS&Kb^<+U"
    str_2 = "TU"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1, str_2: list_1}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    int_0 = -1629
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    str_0 = "71H!H\\Ivszy|%+<*/\x0c^i"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bytes_0 = b"\x16\x15"
    bytes_1 = b"1\x98\xf2T\xfc\xb0\xe6"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    float_0 = -1960.3778
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    str_0 = "!7n\rnhnk=y&\n&[NMN7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    complex_0 = -1012.853 + 509.5942j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    int_0 = -2154
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, set_0, int_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bytes_0 = b"\xe48\x84\xc2\x01>\x97\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bytes_0 = b"\xd6\xcd?%l\x96\xbb\xd5\x8c\x9eG"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_1390():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1391():
    str_0 = "i!#D\tp<2~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    str_0 = "p?/7~cn<Phu*(0:Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    set_0 = set()
    list_0 = [set_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0, list_0, set_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    none_type_0 = None
    bytes_0 = b"\xa29\xffU\xc6\xaa\xf4\xb92\xcb(TR\xa5"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    str_0 = "99y,Aa@h"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    str_0 = "'(9A33D6>I\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    str_0 = "-v]&-D4{/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    int_0 = 950
    set_0 = {int_0, int_0, int_0}
    str_0 = "AJ{Xgfo4f\x0cV{wcb&Jp<"
    dict_0 = {}
    tuple_0 = (dict_0, set_0)
    list_0 = [int_0, int_0, int_0]
    tuple_1 = (set_0, str_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    int_0 = 3321
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1402():
    str_0 = "?43II!M(LNP`i \x0c_x:"
    int_0 = -273
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    bytes_0 = b"\xed\xe9N\xc9\x0b\r\x18&\xcf5\xb6"
    str_0 = " w]r6"
    module_0.get_new_command(bytes_0, str_0)


def test_case_1404():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1405():
    float_0 = -1469.478259
    module_0.match(float_0, float_0)


def test_case_1406():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    float_0 = -1241.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    int_0 = 209
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    int_0 = -789
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    int_0 = -1037
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    list_0 = [bool_0, bool_0, dict_0, bool_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    bytes_0 = b"z\xa0q\xc2\xd4\xe0\x9e\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    complex_0 = 1584.3675 - 1820.50249j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    str_0 = "o"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_1418():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1419():
    str_0 = "qR^f"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    int_0 = -2867
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    str_0 = '/W.nPyH`~jHc"n'
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    object_0 = module_1.object()
    dict_0 = {}
    module_0.get_new_command(object_0, dict_0)


def test_case_1424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bytes_0 = b"m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bytes_0 = b"\xf2\x06\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    str_0 = ">e30rx%"
    dict_0 = {str_0: str_0}
    str_1 = "%i+IG$Dn\x0c(CGQ(_H"
    tuple_0 = (str_0, dict_0, str_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    complex_0 = -370.9297 - 1946.89j
    tuple_0 = (complex_0, complex_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1430():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1431():
    str_0 = "W\x0bc]l+}z+Q<TR;tTuV"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    int_0 = 514
    module_0.get_new_command(int_0, int_0)


def test_case_1433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1434():
    int_0 = 747
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    str_0 = "ocSpR^HE*)"
    float_0 = -2019.0
    set_0 = {float_0, float_0, float_0}
    bool_0 = False
    bool_1 = False
    tuple_0 = (str_0, set_0, bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    float_0 = -94.222752
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    float_0 = 3312.79288
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    complex_0 = 1182.155862 - 2582.39543j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    float_0 = 4069.771
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    float_0 = -2907.348
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    str_0 = "TF?t\x0cRbdW*8t<$j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    bytes_0 = b"\xcc\xf6\xfb~b\xf13\xc6"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    bool_0 = True
    list_0 = [bool_0]
    bool_1 = True
    tuple_0 = ()
    tuple_1 = (bool_0, list_0, bool_1, tuple_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    str_0 = "[\rO_f?h[D"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_1, bool_0: bool_1}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    int_0 = -990
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    bool_0 = False
    int_0 = -1391
    set_0 = {bool_0, int_0}
    module_0.match(set_0, bool_0)


def test_case_1449():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    int_0 = 5422
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    int_0 = 55
    float_0 = 828.5
    set_0 = {int_0, float_0, float_0, int_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_1]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    int_0 = -3801
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    str_0 = "wd:Hby+0VJaj]3 wIkV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    str_0 = "qb3~B1XbzT*TD:Hvg,/K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    float_0 = 3153.831595
    module_0.get_new_command(float_0, float_0)


def test_case_1460():
    pass


def test_case_1461():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1462():
    float_0 = 1705.462
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    float_0 = 1120.704
    module_0.match(float_0, float_0)


def test_case_1465():
    pass


def test_case_1466():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1467():
    str_0 = "VREhFIT|9'F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    int_0 = -162
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    str_0 = "F"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    int_0 = 1918
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    bytes_0 = b"J;\x85\xd9%\xf5\xb5\xdf\xa9\xa2\r~\x9e\x91>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    str_0 = "|b\"p'}54S} {sv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    float_0 = 1770.3571
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    str_0 = "pM&ZS("
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    bool_0 = True
    int_0 = 1677
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bytes_0 = b"\xa6\xc7\x12l\xd3\xda\xe8{!k\xb5\xd5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    float_0 = 1537.7543
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    str_0 = "=%)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    float_0 = 87.0
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    int_0 = -2704
    bool_0 = True
    dict_0 = {int_0: bool_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    str_0 = '}:r4"5:*iaGN"mh '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    float_0 = 0.52
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    int_0 = -1551
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    bytes_0 = b"\xe2\xd5}\xe7F\xe6\x9dx"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    int_0 = -3566
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    bytes_0 = b"f\xf4u\xbd\x0e\xc7\x019\xc7\x06Q\x8cb\xddT\x159"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    str_0 = ""
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, str_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    float_0 = 2181.749
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    bytes_0 = b"\xc1\xdc\xfe\xa0&\xe3\xf7\x07]\x9b\xce\xe7\xae\x85\x17\xcf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    str_0 = "]E/l1\x0c\\"
    str_1 = "o"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    int_0 = -3317
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    str_0 = "}c/m\x0b'}E4e>)zH\t&Kf3"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    str_0 = "C.j[r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    bytes_0 = b"\x8c\x1bej\x1f\x99\x87\x9b"
    set_0 = set()
    list_0 = [bytes_0, set_0]
    dict_0 = {bytes_0: bytes_0, bytes_0: list_0, bytes_0: list_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0, list_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    int_0 = -320
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    int_0 = 1007
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bool_0 = True
    list_0 = []
    list_1 = [bool_0, bool_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    float_0 = -831.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    int_0 = -1661
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    int_0 = 1104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    bytes_0 = b"qx\x9f\xa3}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    float_0 = -2817.33537
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    int_0 = -60
    set_0 = {int_0, int_0, int_0, int_0}
    bool_0 = True
    tuple_0 = (int_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    bytes_0 = b"\xeb\xf1=\x8f\xf1\xff)\x1f\xc5\xfc\xfcg\xb9e\x86!wg\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    float_0 = -2574.212561
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bytes_0 = b"#\xaa\xe0\xacZ-\x16rQ\x90+"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = ()
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    bytes_0 = b"\x0c\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    complex_0 = -1692 - 2315.4934j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    str_0 = ")\x0bw^B\nGbX)'<"
    str_1 = "$Im-':bm=P}"
    str_2 = "%eR"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    str_0 = "T\rp%<U]Dpm9T>"
    bool_0 = False
    bytes_0 = b"\x93M\xd6\xc1,\xa1q7\x04,\xde\xf09G\xed\xcf"
    set_0 = {bool_0, bytes_0, str_0, bool_0}
    tuple_0 = (str_0, bool_0, set_0)
    bytes_1 = b"\x92h\x12\xc4"
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    str_0 = "Y.\nQ>RTs&\x0cd`_Ed"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    bytes_0 = b"\xa7\x0c0\t\x04YSg\x1d\rl"
    list_0 = [bytes_0, bytes_0]
    str_0 = "A)L\\&)|"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    str_0 = "9$6Bd<M\x0cj<t*7DeD'/Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    tuple_0 = ()
    int_0 = 1479
    list_0 = [int_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bytes_0 = b".4\xdc\x8e\xcd\x05\x1bQT\x04"
    module_0.match(bytes_0, bytes_0)


def test_case_1522():
    pass


def test_case_1523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1524():
    str_0 = "\"p5@(mt/)'Vzy\rP&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    bytes_0 = b"\x91\xd9we\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    str_0 = " ^b\r61M\n\t3_"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    str_0 = "\\X'\tD-_mw5*Q@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    str_0 = 'N).c\n(Lx]9#fgW"L:a'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (list_0,)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    int_0 = -3328
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    str_0 = "_hZF%N!,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    bytes_0 = b"\xcd\x8f.F\x16\xc3\x852"
    list_0 = [bytes_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    complex_0 = 469.385 - 341.9102j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    int_0 = -457
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    complex_0 = -1678.97712 + 22.2625j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    float_0 = 3766.9
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: bool_0, float_0: float_0, bool_0: float_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    float_0 = -309.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    bytes_0 = b"\xe4S\t\x00\xd8\xe4c\xc5\xca\xe3\x82\xdb'\xab\xc1("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    str_0 = "<"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    int_0 = 1658
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    int_0 = -235
    module_0.match(int_0, int_0)


def test_case_1544():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1545():
    int_0 = 94
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    int_0 = -1018
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    str_0 = "f?is[H"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    int_0 = -3467
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    int_0 = 498
    list_0 = [int_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, int_0)


def test_case_1550():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1551():
    int_0 = 4535
    module_0.match(int_0, int_0)


def test_case_1552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1553():
    str_0 = "k.T 4>9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    bool_0 = True
    str_0 = "F'\ra_@?\"Un_P/pN=pL@'"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    bytes_0 = b"\xa8\xcb\x18\x07\xd2!\x87P\x9bF\x01\xcfO\xd4o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    int_0 = 1673
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    str_0 = "YXB"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    str_0 = "{Tv_LbT[Igo>NXh"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_1561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1562():
    str_0 = "kPkLI2\\h=X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    bool_0 = True
    float_0 = -881.4
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


def test_case_1565():
    pass


def test_case_1566():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bytes_0 = b"\xdb\x0fk\x0845M\xf9m\xe3\xbc\n\xd2\x85\xfe\xfaX\x05\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    int_0 = -906
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    int_0 = 181
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    int_0 = -2533
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    float_0 = -862.8503
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bytes_0 = b"j\x06&N\x05\xcat\xda\xc2\xa3r\xd54"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bytes_0 = b"D\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0]
    dict_0 = {}
    tuple_0 = (dict_0,)
    tuple_1 = (bool_0, set_0, list_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    set_0 = set()
    float_0 = -3802.0
    tuple_0 = (set_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    bytes_0 = b"\t\xa06GiD\x8e\x18\x13\xf5\xce\x89\xa25\x12\xd5\x0bB&"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0, dict_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    int_0 = 1285
    str_0 = "C\\Vb\"56dfM'FXLT\x0c-:"
    int_1 = -89
    tuple_0 = (int_0, str_0, int_1)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    str_0 = "_[<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    bytes_0 = b"\xa8GG"
    str_0 = ";C<D`'a1Hw\\I[5}qx!WI"
    list_0 = [bytes_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bytes_0 = b"9\xedH\xbd\xd0\xe9\xd0\x1a\xba\x13?@T\xfb\xbb\xf5\xf5\xad@"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


def test_case_1581():
    pass


def test_case_1582():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1583():
    bytes_0 = b'\x9b\xd6"\xcf'
    float_0 = -2803.0
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b'\xaa\xea\xd2\xe7{"\xa6\x99\xa4'
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    bytes_1 = b""
    tuple_1 = (bytes_0, tuple_0, bytes_1)
    tuple_2 = (tuple_1,)
    int_0 = 2787
    bool_1 = False
    tuple_3 = (tuple_2, int_0, bool_1)
    module_0.get_new_command(tuple_3, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    complex_0 = 1513 - 1075.978j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    str_0 = "WW`4\x0bp#c"
    module_0.match(str_0, str_0)


def test_case_1588():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1589():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    str_0 = "aJ~U]pchH6*#)W"
    module_0.match(str_0, str_0)


def test_case_1591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1592():
    bytes_0 = b"\x1bR\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    bytes_0 = b"v\xd4+"
    str_0 = '"&W2\x0bmDQ|6,\t{ g2HGO'
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    bytes_0 = b"M\x91\x1c\xe0\x08a\xe17\\\xedA6mM\x92\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    float_0 = 1080.955
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    int_0 = 508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    str_0 = "\x0cz;,=7B'mP.<"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_1598():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1599():
    int_0 = -236
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    float_0 = 2900.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    int_0 = -1859
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    float_0 = 58.218063
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, dict_0, float_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    str_0 = "oi"
    list_0 = []
    str_1 = "3l&c"
    dict_0 = {str_0: str_0, str_0: list_0, str_1: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = -634
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    int_0 = -135
    tuple_0 = (int_0,)
    set_0 = {int_0, tuple_0, int_0}
    list_0 = [set_0, int_0, tuple_0, set_0]
    tuple_1 = (set_0, list_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    float_0 = 1560.20792
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    str_0 = "ncN0.ZSBY\njPh!#.F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    float_0 = -809.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    int_0 = -1697
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    float_0 = 1787.85
    module_0.match(float_0, float_0)


def test_case_1611():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1612():
    str_0 = "-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    none_type_0 = None
    str_0 = "XgUX~E"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    int_0 = 2806
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    str_0 = "<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = -279
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    bool_0 = False
    float_0 = 1448.98
    float_1 = -268.693
    set_0 = {bool_0, float_0, float_1, bool_0}
    module_0.match(set_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    int_0 = -3137
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    int_0 = 1801
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    bool_0 = True
    set_0 = {bool_0}
    bytes_0 = b"9\xbc\xb5S\xbc\x99\x88\xaf`\xe5\x17\x0f\x0f\x03["
    tuple_0 = (bool_0, set_0, bytes_0, bool_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    complex_0 = 356.09 - 1500.11j
    bool_0 = True
    dict_0 = {complex_0: bool_0, bool_0: complex_0, complex_0: bool_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bool_0 = True
    bool_1 = True
    float_0 = 1856.7807
    tuple_0 = (bool_0, bool_1, float_0)
    list_0 = [tuple_0, tuple_0, bool_1]
    module_0.match(list_0, float_0)


def test_case_1625():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1626():
    float_0 = 1757.3369
    str_0 = '-"~\r|(P;Ev-MQ"!ta'
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    bytes_0 = b"\xd4"
    module_0.match(bytes_0, bytes_0)


def test_case_1630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1631():
    bytes_0 = b"\xe9\x88\x04\xac\xe3\xb8\xc98\xfd\xc7\x00w\xe3T4\xda\x9d\x95\x02"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1633():
    int_0 = -487
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    str_0 = "GsKv/WKTI46bq_u$Ys"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    int_0 = 437
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    int_0 = 1818
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    int_0 = -808
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    str_0 = "O>3Vop"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    bool_0 = False
    bool_1 = True
    int_0 = -2477
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1, bool_1: int_0}
    module_0.match(dict_0, bool_0)


def test_case_1644():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1645():
    int_0 = -2764
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    bool_0 = True
    bytes_0 = b"*\xd6\x89&\xcb:\xcf\xc2\x9fIX\xd2"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    int_0 = -111
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bytes_0 = b",r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    int_0 = -3091
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    bytes_0 = b"\x93qk\xcf\xaft\xa7B\xd0\xa1\xf1"
    list_0 = [bytes_0]
    tuple_0 = (list_0,)
    tuple_1 = (bytes_0, list_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    int_0 = -812
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    str_0 = "yQQ@liH?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    bytes_0 = b"o\xa4\x9e\x16\xae\x03\x0c"
    bool_0 = True
    str_0 = "-,"
    list_0 = [str_0, bool_0]
    tuple_0 = (bytes_0, bool_0, list_0)
    int_0 = 2409
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    bool_0 = True
    int_0 = 292
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    bytes_0 = b"\xf2\xbck&\xbeqt\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    complex_0 = -2226.3457 + 321.19j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    float_0 = 1279.9721
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    int_0 = 168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bool_0 = False
    str_0 = "B"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    float_0 = -1204.9704
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    bytes_0 = b"\xfe\xd7\x16\x0bS\xd1\xb1\x0eR\x90\x86X4\x0b\x9b\x08^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    bytes_0 = b"S\xa0 \xf9o\xe8\x83\x80r Wu"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    int_0 = -178
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    int_0 = -3056
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    float_0 = 1286.5494
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    tuple_1 = (tuple_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    int_0 = -1847
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    int_0 = 29
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    int_0 = 984
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bytes_0 = b"\xe5>Sa\x8cPf\xa2J:2\xc43\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    int_0 = 738
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    str_0 = "U{exiUr;;/{["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    int_0 = -1759
    list_0 = [int_0, int_0, int_0]
    bool_0 = True
    bytes_0 = b"\xf1\xd9M\x03N\xc3%\x89\xd8\x89\xe0\x03\tE"
    tuple_0 = (int_0, list_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    float_0 = -2630.1
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    str_0 = "5s"
    set_0 = {str_0}
    set_1 = {str_0}
    module_0.match(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    bool_0 = True
    bytes_0 = b"\xa7\xd1\xf8#T\xfa\xe8\xcd\xeb"
    list_0 = [bool_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    int_0 = 1270
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    str_0 = "7v\tAFe!c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    bytes_0 = b"\x19\x0b\xc2w"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    str_0 = "[AS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    str_0 = "`Wg!H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    str_0 = "P\\&a=Vcl`rL}b~\x0b:EM`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = 2712
    tuple_0 = (bool_0, bool_0, list_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1]
    list_1 = [list_0, bool_1]
    int_0 = -404
    list_2 = [list_1, int_0, int_0]
    module_1.object(*list_2)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    bytes_0 = b"\xbe\xaf\xba}\x98\xc9\x89|\x9aJx\x01i"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    bytes_0 = b"iu\x12C\x89\xd7\xd0\xd1\xee\xb3\xb8\x82:\xa0\xba^3\xce\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    float_0 = 2016.93
    bool_0 = False
    dict_0 = {float_0: bool_0, float_0: bool_0, float_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    set_0 = {bool_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    bool_0 = True
    int_0 = 216
    int_1 = 4444
    tuple_0 = (bool_0, bool_0, int_0, int_1)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    int_0 = 2835
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    bool_0 = True
    bytes_0 = b"\tN\xc7\xe8\xff\x15k\xf8\x924"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    int_0 = 960
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bytes_0 = b"f\t\\\xa6\x14\x0fF\xeb\xcd\xa0"
    module_0.match(set_0, bytes_0)


def test_case_1702():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1703():
    str_0 = "{yLKQ9}FZO\x0cv' <eB\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    float_0 = -1174.4716
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bytes_0 = b"\xd4@\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    complex_0 = 2592.3 - 226.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    str_0 = "ttZq`8IkM/|1oe2f*Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    float_0 = -2281.73
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    str_0 = "4o,"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    int_0 = 3215
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    str_0 = "8'^+:\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    int_0 = 3314
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    float_0 = 1891.676
    str_0 = "mW!wL{~nWd~"
    int_0 = -1722
    tuple_0 = (float_0, float_0, str_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    str_0 = "''"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    bytes_0 = b"%`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bytes_0 = b"\x03\x1b0\t\xdb\x0f\xd2\xaa\x85\x8e\xed\x83\xb0z\xa7\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    int_0 = -317
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    str_0 = "aR0n+giA-O&"
    list_0 = [str_0]
    bool_0 = False
    tuple_0 = (str_0, str_0, bool_0)
    str_1 = "l N}wUr"
    str_2 = "= @_>g<"
    dict_0 = {str_0: tuple_0, str_1: bool_0, str_2: str_0}
    module_1.object(*list_0, **dict_0)


def test_case_1720():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1721():
    complex_0 = 1074.651 + 2176.423471j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    int_0 = -2113
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, list_0]
    list_2 = [list_0, list_0, list_1, list_1]
    module_0.get_new_command(list_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    complex_0 = -652.989 - 1109j
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    str_0 = "$}t4%@f2d}>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    str_0 = "DB^_wO{5g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    str_0 = "61"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    str_0 = "19\t.\tyKXC"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    int_0 = 450
    list_0 = [int_0, int_0, int_0]
    int_1 = 1301
    set_0 = {int_0, int_1, int_1}
    tuple_0 = (int_0, list_0, int_0, set_0)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    str_0 = "e4m?sz`'Mq5~_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    float_0 = -2042.79799
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bool_0 = False
    int_0 = -124
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (bool_0, int_0, list_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    int_0 = -170
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1734():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1735():
    bytes_0 = b"9\xfb\xfa\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bytes_0 = b"\xf0z\xf0g\xc5\\D\x88?\xb2\xd4c\x9b\x11A\x90\xbb"
    module_0.match(bytes_0, bytes_0)


def test_case_1737():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1738():
    bytes_0 = b"\x08\xf8\x00\xbc\xed\xba\xe5\x8amB\x05\xeb\x13\x06\xd1\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    bytes_0 = b"\xd7\xaa\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bytes_0 = b"E\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    str_0 = "J1Ry@3r[wh'%2AN"
    list_0 = [str_0]
    object_0 = module_1.object()
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    str_0 = "kkWV07}t[k]pTafDg"
    bytes_0 = b"\xdf\x15"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    int_0 = 1743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    bytes_0 = b"\xca\x0cd\xba\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


def test_case_1749():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1750():
    str_0 = "e"
    list_0 = [str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bool_0 = False
    bool_1 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: object_0, bool_0: bool_0, bool_0: bool_1}
    dict_1 = {bool_0: bool_0, bool_0: bool_1, bool_0: bool_1, bool_1: dict_0}
    str_0 = "Msqa.6-Q%P#G!QY"
    bool_2 = True
    list_0 = []
    tuple_0 = (dict_1, str_0, bool_2, list_0)
    module_0.match(tuple_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    complex_0 = -3025.581 + 42.4912j
    str_0 = "Lr=czs`4H|8f\rN"
    tuple_0 = (complex_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bool_0 = False
    bytes_0 = b"\x8a\x8e\x02"
    str_0 = "O`Y-y4\n3g"
    tuple_0 = (bool_0, bytes_0, str_0, bytes_0)
    bytes_1 = b"\x16@L3\xe4c\xce\x15\x13\xd9"
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    bytes_0 = b"W\x8f\x9dB"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    str_0 = ">!']N0U3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    int_0 = 1035
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    bytes_0 = b"pu"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    int_0 = 2895
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    int_0 = 2367
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    str_0 = "mzg\\'4=MDb[*h\x0bl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    str_0 = "|20-7AKeI@7k+4V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    float_0 = -372.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    float_0 = 3307.0
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bytes_0 = b"E"
    int_0 = -1075
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    str_0 = "\rx\x0b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    bool_0 = True
    str_0 = 'FPE]ae|x`k-wCD|$o_"'
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    int_0 = -384
    list_0 = [int_0, int_0, int_0]
    str_0 = "f_7IRc%4=\\O{aa'"
    str_1 = "r1a[oC^"
    str_2 = "m%#\\O{?WDq; *\r'C:.G"
    dict_0 = {str_0: list_0, str_1: list_0, str_2: int_0}
    module_1.object(*list_0, **dict_0)


def test_case_1771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1772():
    float_0 = 1232.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    int_0 = -310
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    int_0 = 2186
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    int_0 = -1136
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    int_0 = -2010
    bytes_0 = b"\xe0\xc6\xaf\x1f5=\x1c\xc7\x08}ep\xe6\x81\x92L\xe7"
    module_0.get_new_command(int_0, bytes_0)


def test_case_1780():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1781():
    str_0 = "\tOs"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    str_0 = "Z26Y[peu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    bytes_0 = b"\x0f}\xd1\xb8)\xd8-\xc3f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    str_0 = "GT4s"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    int_0 = 3158
    bytes_0 = b"\x80\x08\x1f\x11km\xcd\x1a"
    dict_0 = {int_0: bytes_0}
    set_0 = set()
    list_0 = [dict_0, int_0, bytes_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    float_0 = 2091.2
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    bytes_0 = b"VCn\xb8\x06\x113J\x8d6\xd8\x0c\xf4"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_1790():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1791():
    int_0 = -709
    int_1 = 77
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    str_0 = ":'sz^"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    float_0 = 2182.83
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    int_0 = 193
    float_0 = -658.272
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bytes_0 = b'q7s\x92"\xc0\x83$\xa2Y\xf7:\xb2'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    str_0 = "I{\rYQ("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bytes_0 = b"\xcb\x92\xa7H\x0c\x94\xde'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    bytes_0 = b"s\xad{\x98:\x1eABm\x86b(\xcf"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bytes_0 = b"\xa4\x0b\xa3+\x18"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    bytes_0 = b"\xbd\x1e\xb4\xc1\xe4@\xdb\xbf\xbf\xc7\x10\x95|v\xb8\xcd3_\xe7"
    bytes_1 = b"\r\xe8\n\x9c\xe9\xc9\xe2H"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_1: bytes_1}
    float_0 = -1320.176146
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    str_0 = "Re`8P(nv_BK#/a/ "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    list_0 = [object_0, dict_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    float_0 = 3487.44
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    str_0 = "61\x0b}?b!23SxA1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    str_0 = "KBOjm9\\Aiw09ByKD9"
    str_1 = "%W2\\x\t*M&:"
    dict_0 = {str_0: bool_0, str_1: tuple_0}
    module_1.object(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    int_0 = -885
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    bytes_0 = b",r\xbd\xf6\xde\xfc\xa2\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    bytes_0 = b"\x8c\xc8mF\xc7\xcd\x8bNwvp\x01"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1811():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1812():
    int_0 = 421
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    int_0 = 1261
    module_0.match(int_0, int_0)


def test_case_1814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1815():
    int_0 = 924
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    int_0 = 206
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    int_0 = -1746
    set_0 = {int_0}
    bool_0 = False
    list_0 = [int_0, int_0]
    tuple_0 = (set_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    list_0 = []
    bool_0 = True
    float_0 = 708.13105
    tuple_0 = (list_0, float_0)
    tuple_1 = (list_0, list_0, bool_0, tuple_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bytes_0 = b"A2\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    str_0 = "O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    str_0 = "L_$*l{^]uOfirIpQz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    int_0 = -493
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    int_0 = 1052
    dict_0 = {int_0: int_0}
    bytes_0 = b"\xfe\xf5\x844i\r\xcf\x84m"
    tuple_0 = (int_0, dict_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


def test_case_1824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1825():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    bytes_0 = b"\x0e3G\xe3\xf6\xba aw\x12K\xdbx\xe5\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    int_0 = 241
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    float_0 = 433.82
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    bytes_0 = b"\xb4r\x9d\xd6\x17\\\x07\xa9\xb3\x02\x8f\xb3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    bytes_0 = b"\xd5b\xec1\xf9\x86v2\xa8-'\x00\xeaHc\x1b\x89"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bytes_0 = b'\xd1#\x0b\xff\xdf\xc2\xdb\xc04A~\x9du=2\xd6"\xa7\x1d'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


def test_case_1834():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1835():
    float_0 = -3660.929239
    complex_0 = 2485 + 1446.66j
    str_0 = "JSQNG8~"
    bytes_0 = b"`R\xd4\xa8d\xf1\x1f%\xbf\x8e\x0e\xb3"
    tuple_0 = (float_0, complex_0, str_0, bytes_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    int_0 = -2363
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    float_0 = 656.498268
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    str_0 = '}<M]`RPy 1Ag"B=vS6CP'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    int_0 = -3485
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    int_0 = -584
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    str_0 = 'ZR<"VE|Y$iTO"-MGV_'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    str_0 = ">R2s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    int_0 = 513
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    complex_0 = 1892.535032 - 1625.60049j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    int_0 = -2915
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    complex_0 = -45.1632 + 5035.871j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    bytes_0 = b"\n$\xfe\xae(\x17R5]R\nQ\xa7\xa9\xf6&"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1850():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1851():
    object_0 = module_1.object()
    str_0 = "GD{OB]r"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bytes_0 = b"\xb6\xe9\xdax\xb2\x17\xbeU}\xd8\x95\xcf/\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    bytes_0 = b"s"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    str_0 = "F.zaIfGvjTa'Vr<*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    bytes_0 = b"\xe9\xa5\xe6n\xd3\xea\xe2\xbe\xf1\xd7\x9c\xa8\x8f!_x\xf5\xb0|C"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    int_0 = 1582
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    bytes_0 = b"\xa4\x81\x99\xf0\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bytes_0 = b"\x83t\r0Hm\xdb\xe3c\xc6\xdeg8\x8a\xb4\x8d"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: list_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    float_0 = 890.376927
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    complex_0 = -2356.37 - 1930.86444j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    int_0 = 1210
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    str_0 = "0Y}saA\x0c~{"
    str_1 = '"W\rQC6d'
    int_0 = -2284
    dict_0 = {str_0: str_0, str_1: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    float_0 = -192.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    str_0 = "h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    float_0 = 45.2484
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    str_0 = '4@K";U$*\\5{'
    float_0 = 184.50696
    bytes_0 = b"\xfdd=n\x0f\xb5|\xed\xb7Z\xf0V"
    tuple_0 = (str_0, float_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    str_0 = "U\nc*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    bool_0 = False
    int_0 = -2987
    tuple_0 = (bool_0, int_0, int_0)
    bytes_0 = b""
    float_0 = -550.0
    tuple_1 = (bytes_0, float_0, bytes_0, tuple_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {bool_0: bool_0, bool_0: set_0, bool_0: set_0, bool_0: set_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    none_type_0 = None
    bytes_0 = b"P\x8a\xee\n\xf5\xd7\x81\x88\x96\xe8\x14\xddJ\t\x8e"
    module_0.match(none_type_0, bytes_0)


def test_case_1873():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1874():
    complex_0 = -3015.831991 - 1029j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    float_0 = 991.648688
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    str_0 = "\nD:'cuWT5J4L"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    bytes_0 = b"\xea\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    float_0 = -984.644415
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    float_0 = -1431.79
    int_0 = 3425
    bool_0 = False
    tuple_0 = (float_0, float_0, int_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    bool_0 = False
    bytes_0 = b""
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    bytes_0 = b"ec*j\xe2\x0c\xc9:\xc4,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    str_0 = '`9!\x0c?\t3"cllZ'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    int_0 = -1061
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    bytes_0 = b"\xea\xcf"
    bytes_1 = b"\xc2\xda\xb84i\xfa8\x1b\xa5J\x94"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    bytes_0 = b"3\xba\xc6z\x82\xc3\xa9\xbb\xdf\xba\xecML~\xa1\xc3\x0b)\xc9\xe4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1890():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1891():
    str_0 = "&q@b_Ug|R/MNR(G8\\=f3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    int_0 = -1793
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    int_0 = 496
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    int_0 = 2207
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    str_0 = "sjC^?jC"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


def test_case_1898():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1899():
    float_0 = -300.5415
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    float_0 = 1198.5689
    module_0.match(float_0, float_0)


def test_case_1901():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1902():
    str_0 = "u7_:!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    int_0 = 426
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    bytes_0 = b"\xa8M\xbf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    int_0 = 245
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    str_0 = "Z2#^/ ]_t:i6w5;!R"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    list_0 = []
    str_0 = ""
    dict_0 = {str_0: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = -2668
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    set_0 = set()
    bool_0 = True
    str_0 = ">"
    tuple_0 = (set_0, bool_0, set_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    float_0 = 488.271
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    int_0 = -3376
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    complex_0 = 1985.150893 + 6609.5j
    module_0.match(complex_0, complex_0)


def test_case_1914():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1915():
    bytes_0 = b"\x80\x17"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    int_0 = -232
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    bool_0 = True
    bytes_0 = b"\xec\x80\xba\x19\xd2\x07\x08a\xc8\xef\xdf\xa4\xefu\xdb%\x1d"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bool_0)


def test_case_1919():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1920():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0, bool_0)
    bool_1 = True
    list_1 = [tuple_0, list_0, bool_1]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    int_0 = -1021
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    str_0 = ",Sv[qwW c}>r\x0by|_"
    bool_0 = True
    list_0 = [str_0, bool_0, str_0]
    str_1 = "Dlyy%A'p]%eLE"
    tuple_0 = (bool_0, list_0, str_1, list_0)
    tuple_1 = (bool_0, tuple_0, list_0, list_0)
    module_0.match(str_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    list_2 = [list_1, list_0, bool_0]
    module_0.get_new_command(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    bool_0 = True
    str_0 = ""
    set_0 = {bool_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    int_0 = 260
    bytes_0 = b"\xf5~\xa8g\x8ev\xfe\x8f\xf8\xa8\xed\xba\xede\xbae:"
    module_0.get_new_command(int_0, bytes_0)


def test_case_1928():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1929():
    float_0 = 1608.334
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    str_0 = "K_*m"
    str_1 = ""
    tuple_0 = (str_0, str_0, str_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    str_0 = "<1:XU}@\x0brX\\6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    int_0 = -1664
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    float_0 = 2043.429453
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    int_0 = 1401
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    int_0 = 1790
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    str_0 = "H!ajX"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


def test_case_1937():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1938():
    int_0 = 344
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    str_0 = "-S%\x0c\t\x0bG%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    int_0 = -1005
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    int_0 = -1027
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    int_0 = 1568
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    int_0 = 288
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    complex_0 = -3931.844 - 1446.53924j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    int_0 = -44
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    int_0 = -1479
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    int_0 = 2717
    int_1 = -3112
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xfc!\x80\x8b-\xf5x\xa5\xbf\xafGVk\x07&\xde\xe9"
    tuple_0 = ()
    tuple_1 = (set_0, bytes_0, bytes_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    int_0 = -2114
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    float_0 = 456.406294
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    int_0 = -1828
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    float_0 = 1.98286
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    str_0 = "%g"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    float_0 = -3427.601514
    bytes_0 = b"pgAQtn\xcb\x15\xb8C\xf2\x80%\xce\xd9\x05J\xd3"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    float_0 = 697.792
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    bytes_0 = b"\xd3\x07z\x95\xcbU{"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    list_0 = [set_0, set_0, object_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    bytes_0 = b"p\x83b\xc0"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    bytes_0 = b"o\xe7\x17O\xc3\xe8\x13MB"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    bytes_0 = b"E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    int_0 = -5185
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    str_0 = "*Ug"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bytes_0 = b"\xf7Y\x8b\xeb\xe5\x91Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    complex_0 = -380.17 - 1319.471126j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    float_0 = 1753.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    float_0 = -742.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_0, bool_1}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    int_0 = 2515
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    float_0 = -1804.4
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    bytes_0 = b'\x8cE\x84\x13\xa5\x8aN\xe9"\xf3'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    str_0 = "y&/rH\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    int_0 = 3408
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    int_0 = -892
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    int_0 = 1632
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    int_0 = 1634
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    str_0 = "%j,\x0chfS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    float_0 = -1153.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    int_0 = -1338
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    int_0 = 840
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    int_0 = 851
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    int_0 = -184
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    int_0 = -454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    str_0 = "2[k"
    bool_0 = True
    str_1 = "~"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    int_0 = -3570
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = -1150
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    complex_0 = -1620.948 + 746.812j
    list_0 = [complex_0, complex_0]
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bytes_0 = b"\xaf\x16`\xb0aC,7\xc4S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    str_0 = "\\p;3W=7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    int_0 = -1416
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    str_0 = "_L_"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    dict_1 = {str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    float_0 = 241.6689
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    int_0 = 2655
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    bytes_0 = b"$dp*\x99\xee\xd1\r\x97\xcbw\x8aj\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    complex_0 = -3719.679 - 2197.710564j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    float_0 = 495.96
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    str_0 = "9!`Qde/o"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    str_0 = "ctMajK~r#17\r"
    float_0 = -2896.904
    str_1 = "\\q`gw8u;ohP"
    tuple_0 = (str_0, float_0, str_1)
    float_1 = 430.953
    tuple_1 = (tuple_0, float_1)
    dict_0 = {tuple_1: float_1, float_1: float_0, float_0: tuple_1, str_0: str_1}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    bytes_0 = b"\xcb\xd3|3\xfc#\x98\x00C\x9a"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    float_0 = -225.028
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    float_0 = 912.634488
    module_0.match(float_0, float_0)


def test_case_2022():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2023():
    float_0 = 4011.51715
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bool_1 = True
    list_0 = [bool_0, bool_0, dict_0, bool_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    str_0 = "=BS\x0cgZo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    int_0 = 1526
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    bytes_0 = b"\x1d"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    tuple_0 = ()
    str_0 = "HFwZZF$QKk`@f3Gc?"
    tuple_1 = (str_0, str_0)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    int_0 = 900
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    bool_0 = True
    tuple_0 = ()
    bool_1 = True
    tuple_1 = (bool_0, tuple_0, bool_1, bool_1)
    tuple_2 = (tuple_1, bool_1)
    str_0 = ""
    module_0.match(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    bytes_0 = b"\xc6\xe4\xd7\xe8B\xc5\x04\xf0P\xe2\xbf\x1b\xab%\xc1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    str_0 = "X1UD\\"
    str_1 = 'GoV>+#a6v CB "kH%e6'
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (str_0, str_1, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


def test_case_2035():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2036():
    int_0 = 643
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    str_0 = "^Bt)DD1"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    complex_0 = 4795.451 + 872.0797j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2041():
    pass


def test_case_2042():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2043():
    bytes_0 = b"\xb7N\xdb\x93(B\xd33Y\x1d4\x9dcw.D\x98"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2044():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2045():
    bytes_0 = b"\x8d"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    bytes_0 = b"\xcd\x82\xe1\x99\xc7p!"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2047():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2048():
    int_0 = -921
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    str_0 = "F0!a}ytISu3cH)AvJKqm"
    str_1 = "vu%]"
    dict_0 = {str_0: str_1, str_0: str_0}
    list_0 = [dict_0, str_1, str_0, str_1]
    module_0.match(list_0, dict_0)


def test_case_2050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2051():
    none_type_0 = None
    float_0 = -1294.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, set_0, set_0]
    tuple_0 = (list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    str_0 = "W`wmQXkOhc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0, bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    int_0 = 414
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    int_0 = 1459
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    int_0 = 2500
    module_0.match(int_0, int_0)


def test_case_2059():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2060():
    int_0 = -1091
    int_1 = -207
    dict_0 = {int_0: int_1, int_1: int_0}
    dict_1 = {}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    str_0 = "k@qQJ+u0}gjw:%!;}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    int_0 = 463
    module_0.get_new_command(int_0, int_0)


def test_case_2063():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2064():
    bytes_0 = b"\x8cp-\xba\x8c<"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    int_0 = -1134
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    bytes_0 = b"\x0c\x80Z\xfd\xf0\xefL\xc9\x1e\x8b\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    complex_0 = -221.5 + 224.04j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    int_0 = 3786
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    int_0 = 2508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    float_0 = 722.07
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    str_0 = "Z=QAJ/KBP.HN 3H_"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0, set_0, set_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bytes_0 = b"\x83/\xc2\xf3k\x99\x91`\x7f\xfd^W\x84|\xf0\xe9\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    complex_0 = -2894.421 - 186.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    int_0 = -348
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    bool_0 = False
    int_0 = -1057
    dict_0 = {bool_0: int_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    str_0 = ",&/d9=AR_{<M2@r1v\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    bytes_0 = b"\xf9\x15qk\xb0\x8d\x05\x80C\xca\xcc\x9f\x7f\xc9\xa1m\xec\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bytes_0 = b"S"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    int_0 = 4433
    module_0.get_new_command(int_0, int_0)


def test_case_2084():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2085():
    str_0 = "\x0b3*3O"
    module_0.match(str_0, str_0)


def test_case_2086():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2087():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    int_0 = -2366
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xad&\xaa\x9cw\x83(Gv8\xf4S\xb0"
    dict_0 = {bool_0: bytes_0, bool_0: bool_0}
    module_0.get_new_command(set_0, dict_0)


def test_case_2090():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2091():
    int_0 = -2054
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    str_0 = "d7\x0c+35"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    int_0 = -138
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    none_type_0 = None
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    int_0 = -347
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    bytes_0 = b"\xe6\xd4\xb8 \x16\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    str_0 = "i\tqot_ko_u~zBSb&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    float_0 = 1047.5873
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    str_0 = "4X8rph(("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bytes_0 = b"\x84\xb2"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    float_0 = -1783.579
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    int_0 = -2797
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    int_0 = -345
    module_0.get_new_command(int_0, int_0)


def test_case_2105():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2106():
    str_0 = ",l^:=Y73OCV~\x0c#d\x0b"
    bool_0 = False
    int_0 = 634
    tuple_0 = (str_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    complex_0 = 2617.59 + 1163.56585j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    str_0 = "l\x0b9nS#+&.2u"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bytes_0 = b"\xc2\x16\xc1J\xbf\xcf=\x0f\x92\xf0g\xf8\x95\xc8q\xe6"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    str_0 = "+NhE0~E3`l ."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    int_0 = 1707
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    str_0 = "?"
    module_0.get_new_command(str_0, str_0)


def test_case_2115():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2116():
    str_0 = "QEvLpN>m9qcITdK\rR:hY"
    bool_0 = True
    bool_1 = True
    int_0 = 718
    tuple_0 = (bool_0, bool_1, int_0)
    tuple_1 = (str_0, bool_0, bool_0, tuple_0)
    set_0 = {bool_0}
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    int_0 = 0
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    int_0 = -606
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    complex_0 = -1009.68423 + 2910j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    bytes_0 = b"\xd8\x98\xa5N"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    str_0 = "3ycQNk^\rQ-1,5e!m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    bytes_0 = b"2\x9d\xf0\xc5\xa1\x01Eg\xb1$\xb6j"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2124():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2125():
    float_0 = -3820.71
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    float_0 = 659.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2128():
    float_0 = -1546.77749
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    str_0 = "\x0cd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    float_0 = 1749.617
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    int_0 = -2511
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    int_0 = 614
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    int_0 = 19
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    bytes_0 = b"L\x00\\\xef\x18\x0b\x83\xe2S\xf2\xd5\x04E\xaf\xb2\x07\xe3\x08\xb0\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    str_0 = "YaY;8a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    int_0 = 957
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    float_0 = 171.249
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    str_0 = "1"
    tuple_0 = (str_0,)
    bool_0 = False
    list_0 = [tuple_0, tuple_0, bool_0, str_0]
    list_1 = [list_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    float_0 = -913.933345
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    str_0 = "RC <h;z9}\tl~)%)TybYQ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    complex_0 = -1363.6 + 2402.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    int_0 = 3372
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    float_0 = -3034.9
    tuple_0 = (float_0,)
    bytes_0 = b"dz\x0e\x07`\xb2\xa8\xbd\xb8\xea:\xf5B\xd5\x8e"
    tuple_1 = (tuple_0, bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    float_0 = -2108.37751
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    bytes_0 = b"\xd2A\x84wm\xdcA\xcc\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    str_0 = "JWkktHBw'teg"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    complex_0 = -404.48508 - 1426j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = False
    str_0 = "e6*zu"
    dict_0 = {bool_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, bool_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    int_0 = -360
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.match(none_type_0, list_0)


def test_case_2155():
    pass


def test_case_2156():
    pass


def test_case_2157():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2158():
    complex_0 = -563.01 + 1587j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    int_0 = -1619
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    float_0 = 351.29
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    none_type_0 = None
    float_0 = -3986.230815
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    str_0 = "[:fY1C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    bool_0 = True
    int_0 = 2444
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    complex_0 = -1574.0284 - 686.7862j
    str_0 = "T>$6D!.Hx-NL"
    tuple_0 = (complex_0, str_0, complex_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    int_0 = -1171
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    str_0 = "LN3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    bytes_0 = b"7\xcaO\xa5O\x8eN:?\xe5\x80\x91\xc7\x1d\xf5W\xa5!u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    str_0 = "mrGHNmH3ZO5XC.js"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    str_0 = "-if\tf:o0qSx%vo$N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    bytes_0 = b"\x04"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    float_0 = -643.406548
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    dict_1 = {object_0: dict_0}
    module_0.get_new_command(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    str_0 = '"\x0b?Qj*\t}6&'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    str_0 = "}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    bytes_0 = b"\x98!\x97\x86\xa6\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bytes_0 = b";\xa9\x1d\xeb\xe9\xbeB\x1d\xf2N\x03\x18\xa53*J\x1a\xd4H"
    list_0 = [bytes_0]
    set_0 = set()
    list_1 = [list_0, set_0, set_0, list_0]
    module_0.get_new_command(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    str_0 = "jJa7+W:f1\nX"
    bool_0 = True
    tuple_0 = (str_0, str_0, str_0, bool_0)
    module_1.object(*tuple_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    bytes_0 = b"\xb2V(\xb9\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    bytes_0 = b"\x8e\xf3\x85(%v\xbe\xa5\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    none_type_0 = None
    int_0 = 966
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    str_0 = "@J\\9{b?-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    int_0 = -4451
    module_0.get_new_command(int_0, int_0)


def test_case_2190():
    pass


def test_case_2191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2192():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    bytes_0 = b"\xd5D\x81\x8c"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    set_0 = {tuple_0, bytes_0, tuple_0}
    list_0 = [bytes_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    str_0 = "#Qn;DqM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    int_0 = 2070
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    int_0 = 1470
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    float_0 = -822.32
    module_0.match(float_0, float_0)


def test_case_2201():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bytes_0 = b"ms\xa4\x02\x84\xf6\xef\x98\xd8Pf\x8bR\x1ex\xca"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    bytes_0 = b"\xc6\xb0Z'\xe6y=8.\x94\x9a\xf4\x96\x18\xa4"
    none_type_0 = None
    module_0.get_new_command(none_type_0, bytes_0)


def test_case_2204():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2205():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    str_0 = "K\r3`1^EazG!lR2\\"
    module_0.get_new_command(str_0, str_0)


def test_case_2208():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2209():
    int_0 = -1734
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    str_0 = "ly1]~a !f(aUv,k)`9G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    float_0 = -544.59033
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    int_0 = 700
    bytes_0 = b"\x7f\x17\x1b\xb1"
    str_0 = "S3{z~x\nm:*DK"
    tuple_0 = (int_0, int_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    float_0 = -811.611
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    int_0 = -823
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    bytes_0 = b"\xe2\xbad;V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    int_0 = -1455
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    bytes_0 = b"\xec\xfaG\x9d\xe5\xa8\xd9\xcfw\x1c\xc7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    int_0 = 1071
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    str_0 = "#B#@pw ^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    str_0 = "5(ng[zVS\x0b;"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    int_0 = 1615
    module_0.match(int_0, int_0)


def test_case_2224():
    pass


def test_case_2225():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2226():
    float_0 = 182.0
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


def test_case_2227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2228():
    int_0 = -1091
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    bytes_0 = b"\xc7\xd9\xe3F\x13\xa4\x9c7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    bytes_0 = b"\xa7"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    complex_0 = -1575.91 + 3100.699095j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    complex_0 = 1459 + 1860.63j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    int_0 = -3512
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    int_0 = -813
    int_1 = 2379
    dict_0 = {int_1: bytes_0, int_0: set_0}
    tuple_0 = (int_0, dict_0, bytes_0)
    bool_0 = False
    tuple_1 = (set_0, set_0, tuple_0, bool_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    str_0 = "dm'\"PQIf4\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    str_0 = "^1D|"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    int_0 = -494
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    int_0 = -7
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    str_0 = "j"
    str_1 = "+#"
    str_2 = '7\\Y"l'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    int_0 = -2091
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    float_0 = 2057.05143
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    bool_0 = False
    list_0 = []
    tuple_0 = ()
    bytes_0 = b"ga\x95\x7fM#\x80\xd4'[\xe1\x1a"
    tuple_1 = (bool_0, list_0, tuple_0, bytes_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    bytes_0 = b"%\xe3i"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bytes_0 = b""
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_1, bytes_0}
    tuple_0 = (bool_0, bool_1, set_0)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    int_0 = -685
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    int_0 = -1468
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bytes_0 = b"\xe5\xfe\xf4|\xaf\xc6"
    bool_0 = False
    dict_0 = {bytes_0: bool_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    bytes_0 = b"\xa3\xaa}\xc0\xf2KP"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    int_0 = 15
    list_0 = [int_0, int_0]
    bool_0 = False
    str_0 = "LKrl"
    set_0 = set()
    tuple_0 = (list_0, bool_0, str_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    int_0 = -3275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    bytes_0 = b"\x10'\x03\xea =\x19\xbe\xb1\x86i\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    int_0 = 2962
    module_0.get_new_command(int_0, int_0)


def test_case_2260():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2261():
    str_0 = "s(  \\kiqpC0U`8"
    module_0.match(str_0, str_0)


def test_case_2262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2263():
    bool_0 = False
    complex_0 = -2576 - 868.32063j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    float_0 = 1708.778074
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    str_0 = "O5}vZ!OA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    float_0 = 2549.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    int_0 = 26
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


def test_case_2269():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2270():
    float_0 = -7036.506
    bool_0 = True
    dict_0 = {float_0: float_0, bool_0: bool_0, float_0: bool_0}
    tuple_0 = (float_0, dict_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    int_0 = -2996
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bool_0 = False
    tuple_0 = (bool_0,)
    complex_0 = 2467.3 - 2296.006j
    tuple_1 = (tuple_0, complex_0, bool_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    bytes_0 = b"\x8cm\x13\x08\x1dS\xcd\xd5M\x8bi"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    int_0 = 3117
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    str_0 = "qIW+z\x0b~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    int_0 = 400
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    str_0 = "6z[loY\trca(\\\\"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    str_0 = ")X"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    float_0 = 871.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    float_0 = -1684.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    float_0 = 1106.2109
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    list_0 = []
    str_0 = "\rm4/\x0b#%wZ/lbc@4"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


def test_case_2291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2292():
    float_0 = -1431.64
    module_0.match(float_0, float_0)


def test_case_2293():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2294():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_2295():
    pass


def test_case_2296():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2297():
    float_0 = -850.089265
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    bytes_0 = b"S\xf6\x07\xe7L\xa9\x16\x0cu\rK\xd7$\x98d\xb8\xe5\x1fD"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    str_0 = "hVcJS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    complex_0 = 2536.185113 + 1673.9j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    float_0 = 636.56
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    object_0 = module_1.object()
    bool_0 = False
    list_0 = [object_0, bool_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    float_0 = -2199.15293
    module_1.object(**float_0)


def test_case_2306():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2307():
    object_0 = module_1.object()
    str_0 = 'y"#8!1'
    dict_0 = {object_0: object_0, object_0: str_0, str_0: object_0, str_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    str_0 = '"F8bdU@7M-mxCQz '
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    int_0 = 3156
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    float_0 = -1422.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    bytes_0 = b"\xee\x99\xa3\x18\x13\xffE\x01\xfd\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    float_0 = -1283.99536
    tuple_0 = ()
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    str_0 = " Aeq_$CV["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    int_0 = 3353
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    bytes_0 = b"\x07;S\x11h4Fy\xcf^kk\xe8\x1d\xb7\xb09\x84_\x10"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bytes_0 = b"\xc0<\xcc62\xaa\xb7\xde\x91"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    int_0 = -170
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    bool_0 = True
    str_0 = "`-$Um a =s!*c"
    set_0 = {str_0, str_0}
    list_0 = [bool_0, set_0]
    tuple_0 = (str_0, set_0, bool_0, list_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    bytes_0 = b"\x07\x13\xe8*"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    str_0 = "zNtDk1\x0c\x0bC"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    bytes_0 = b"\xcb\x96\xb88)\x0e\xdc\xb6\x95\x8bQow/C\x013EX"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    int_0 = 1166
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    int_0 = 1063
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_2328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2329():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    int_0 = 2282
    bool_0 = False
    list_0 = [int_0, int_0, bool_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    int_0 = -4468
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    str_0 = "7|\x0b#V"
    bytes_0 = b"\xad\x8e\x90)\xd4\x96\xc7\xb64\xf0\xe3\xad,\xc9z\xe0\xc5\x96w\x17"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    str_0 = "P5@BzO_L'gE0?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    str_0 = "pR3w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    bytes_0 = b"\x07\xadZT\xe2\xab\x1cK\x8aq\x82\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    float_0 = -1620.6909
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    float_0 = 2709.24282
    module_1.object(*float_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    bool_0 = False
    str_0 = "xsM"
    set_0 = {bool_0, str_0, bool_0}
    dict_0 = {}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    float_0 = 33.9633
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    complex_0 = 1030.819 + 909j
    tuple_0 = (float_0, dict_0, complex_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    str_0 = 'QEhFNfG7N$">F'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    str_0 = "E3x<\x0bmUzrrS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    bytes_0 = b"C\xb6\x86\x88\x08\xc28R\x08\xbc\xb9*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    str_0 = "[*&rQQb;Fn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    bytes_0 = b"f%\xacDB\xc3\x99\xb3\x9f\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    str_0 = "=f\nBt`G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    bytes_0 = b"\x8f@\x82e\xbb\xac&\x0f\x15hCoL"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    str_0 = "R|\x0c"
    bool_0 = False
    str_1 = "ja'{<7Qsd768Bug"
    float_0 = 941.745491
    dict_0 = {str_0: bool_0, str_1: str_1, str_0: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    str_0 = "EMW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    str_0 = "r*g7nW<TR?M\n! "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    bytes_0 = b'\xec\xb16"I\xac\xb4\xd1e\xd9\x15\xf3l\x06'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    int_0 = -961
    dict_0 = {int_0: int_0, int_0: int_0}
    set_0 = {int_0}
    tuple_0 = (dict_0, set_0, set_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    str_0 = ">gQ==Dk6(5s\rM_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    bytes_0 = b"\xecb~n#\xac/\xa6v{P\xee\xc4'\xdel"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    int_0 = -596
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    int_0 = -1795
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    str_0 = "(n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    str_0 = "tlZY2[Z`~iyJJiV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    int_0 = 2228
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    str_0 = ")y\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    bytes_0 = b"\xf9e>-\x03\xea=d\x8c\xd5\xcd"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    int_0 = 1252
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    int_0 = 1034
    bool_0 = False
    int_1 = -1447
    tuple_0 = (int_0, bool_0, int_1, int_1)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "Q0"
    str_1 = "t_"
    dict_0 = {str_0: list_0, str_0: str_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    int_0 = 1361
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


def test_case_2374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2375():
    object_0 = module_1.object()
    int_0 = 176
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    float_0 = -326.723914
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    float_0 = -1897.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    bytes_0 = b"\x95y Ti"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    str_0 = "-$8in7,;F&5p\n`X<6w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    float_0 = 388.66266
    tuple_0 = (float_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    bytes_0 = b"\xb8\xca\x07\xb1Y\xe9\xb9\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    bytes_0 = b"\x9a\x9bG \x1e\xde\x1f\x9d7\x90\xa2\xbb\xc5\x00\xf1\xef\xed\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    complex_0 = -2478.942069 + 503.7j
    module_0.match(complex_0, complex_0)


def test_case_2385():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2386():
    int_0 = -2518
    bytes_0 = b"xce\xec\xef\x8bk\xa7\xc8\xc0\x1f\xafdU;\xde"
    tuple_0 = (int_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    float_0 = -1751.40074
    str_0 = "?zF\x0c,GQ91;.FZhj"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    str_0 = ">UbNU6.KWF$)^uFN"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    int_0 = -950
    bytes_0 = b"\xf9\x93\x0f\xe8\xf0\xf6\xd7\xd36p\xca\x1b'\xcd\xce\x8f\xfa"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    int_0 = 150
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    int_0 = -868
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    int_0 = -1770
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    int_0 = -1376
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    float_0 = 182.65
    set_0 = {float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    float_0 = 1078.52
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    complex_0 = -2541.324932 - 4567.6j
    module_0.match(complex_0, complex_0)


def test_case_2398():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2399():
    str_0 = "J&\x0cotPO2\x0cZ"
    str_1 = "_bX\x0br^01^F\rG"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    bytes_0 = b"2\xc6\xc7\x1f\xf7\xa6\x92\xa9\x14\xc1\xf3Q1\xd4@\xd8\x9f"
    int_0 = -372
    tuple_0 = (bytes_0, bytes_0, int_0, bytes_0)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    int_0 = 2959
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    float_0 = -332.449
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    int_0 = -574
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    str_0 = "_O\r>NXTSnj-O)[NT9\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    int_0 = 1328
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    bool_0 = False
    str_0 = "y,97p\x0bSA$&b+-\x0c\nmYg4"
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bytes_0 = b"\xaa\xfe\xe3$h"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    int_0 = -2496
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    float_0 = 2462.78863
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    int_0 = -1706
    bytes_0 = b"$\xbawR\xbayQ>\xe7\xd66j\xaf"
    set_0 = {int_0, bytes_0, bytes_0, int_0}
    tuple_0 = (int_0, bytes_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    none_type_0 = None
    str_0 = "SaC)c`]z~UA9 ld"
    bytes_0 = b"'\xb3"
    str_1 = "(\n&<3w\t-vfIs@mpWD"
    float_0 = 1671.7293
    dict_0 = {str_0: none_type_0, str_0: bytes_0, str_1: float_0, str_0: none_type_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    bytes_0 = b"m\x11QF3\xe0\xd2\x18\xdc'on\x08u\x01>\x85*&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    float_0 = 1730.411
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    str_0 = 'Rr~-L"Jpr.`_'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    float_0 = 1032.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0, dict_0)
    int_0 = -144
    list_0 = [tuple_0, tuple_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    str_0 = "{&eo%#&lKx3`Ds#b,F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    int_0 = 255
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    bytes_0 = b"\xe0\r-Jf8\x19\x05\t4\xb9Cu\xeeP\xaf\xe7\xff\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    int_0 = 483
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    int_0 = 110
    bool_0 = False
    set_0 = {int_0, int_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    int_0 = -2056
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    str_0 = "#yfB9-g|E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    bytes_0 = b"L^\xbd\xb4\x9a\xed\x04Q\n\xf57"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"\xb6YVl1\xb7\x8e\x93\xd3\xf0\xdf\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    bytes_0 = b'\x01\xfa{/\xd6<\x8cV\x849\x8e"\xbc\x12'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    str_0 = "O59V?x`\x0cF!II0B^TG"
    complex_0 = 123 - 2544j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    int_0 = -3739
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    bytes_0 = b"K\xd8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "jb$X_Zg"
    tuple_0 = (bytes_0, dict_0, str_0, bytes_0)
    bool_0 = False
    int_0 = -1191
    list_0 = [int_0, tuple_0, dict_0]
    tuple_1 = (tuple_0, bool_0, dict_0, list_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    bytes_0 = b"\x1d\xde\xd0\x1c\xd8\xe4\xa3\x1b\x88\n"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    int_0 = 350
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    str_0 = 'fB\\PV.d"\rykPC\tu1M-'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    int_0 = 13
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    float_0 = -2447.68
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    int_0 = -229
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    complex_0 = 1305.3888 + 1780j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    int_0 = -4475
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    int_0 = -1730
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    int_0 = 964
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    str_0 = "m="
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    bytes_0 = b"\x1f\x01"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    int_0 = 1968
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    bytes_0 = b"_\xa11\xbci\xbf\x04\xbdz=\xdb\xe3\xf2\xb8\xd7\x1d\x02u\xa7\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    int_0 = -298
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    float_0 = 1515.42697
    str_0 = ""
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "vA\x0c0V9j("
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    bytes_0 = b"\xb6m\xc6\xca\xea\x89\x1cIH\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    complex_0 = 3609.491 - 713.27837j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    int_0 = 2517
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    str_0 = "|Mt}j7alY*I?uT*W6h8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    bytes_0 = b"\x92\xd1\xf0\xe2'\x96\xdd\xf0\x02.(x\x08z\x89\xb1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = False
    bool_1 = False
    list_1 = [list_0, list_0, bool_0, bool_1]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    int_0 = 1575
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    str_0 = "|ZzUY8l$Xkz6JPSP"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    none_type_0 = None
    bytes_0 = b";\x9fh5\xc8\xd9\xe4\xd1"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    float_0 = -1189.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    int_0 = -1856
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    str_0 = "d/?td({L`i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    str_0 = "\x0c'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    str_0 = "A-YJ^#a0G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    str_0 = "C^!F,B/w)o9:\\Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    bytes_0 = b"\xff\x80O`\x13\xe73,\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bytes_0 = b"\xe2\x7f{]\xc9S\x15_5\x03wel\xfc\xb0Hc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    bytes_0 = b"!\xbb`B=\xada{\xed"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    int_0 = 599
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    str_0 = '(7)5sKN<!,vH!V"~o'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    str_0 = "P X7\tugq[&0K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    int_0 = -1275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, list_0, bool_0)
    list_1 = [tuple_0, bytes_0, tuple_0, bytes_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    str_0 = "/Q6suTRs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    bytes_0 = b"\xa9\xa2\xf7"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    str_0 = "n#V^U"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    bytes_0 = b"\xc5\xcb/\x93\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    float_0 = -758.02
    set_0 = {float_0, float_0, float_0, float_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    str_0 = "8p&'r}\nc7 ;P\"vry\x0bF*!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    str_0 = "rH\x0cL"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = -746
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bytes_0 = b"u4^\xb89\x10)\xc403\xd4\xd6+\xad\xb1\x97\xaf\x16\xa1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    bytes_0 = b"Iz\xf8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    int_0 = 2027
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    int_0 = -6104
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    bytes_0 = b"\xf2\xbb!\xf1\xae]\xe2(.=\xbc\xda5Q\x06[\x02s"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    str_0 = "zUBwZ)NT#e2F"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    bool_0 = False
    complex_0 = -2583.8 + 99.8j
    module_0.match(bool_0, complex_0)


def test_case_2497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2498():
    int_0 = 2074
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    float_0 = -12.751236
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2500():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2501():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_2504():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2505():
    str_0 = "uTF,zD<&hfl0}=]ZLBjC"
    none_type_0 = None
    str_1 = "8_'A"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b"\xdfM\xd6\x80,\xd9|\xbb\xe9\xb8\xef\xd4\x98\xcf>Swe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    int_0 = -1169
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    float_0 = -1317.86
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2509():
    pass


def test_case_2510():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2511():
    str_0 = "LAy#1o\nc*B>mX>&&w ,h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    str_0 = "[1?3WBM#:}]uYmYS-ou%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    int_0 = -3348
    int_1 = -2085
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    bytes_0 = b"\xba,\xff\xa4yO\x88\xf8\xf1\x99q !V+NK\x1e\x92\xcf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2516():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2517():
    none_type_0 = None
    float_0 = -3237.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    bytes_0 = b"gU\xa2\xf7\x86\xb1JT\xa4\x14\xc4\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    int_0 = 1094
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    complex_0 = -410.83861 + 517.0358j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    int_0 = 498
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    bytes_0 = b"\xef\xd2\xf4"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    str_0 = ".YZ\x0b,b)Nb~puq."
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    none_type_0 = None
    complex_0 = -1390.94299 + 5278.304j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    float_0 = 1051.4587
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    str_0 = "S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    str_0 = "\nf-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    str_0 = "P?\\CJ;d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    int_0 = -627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    bool_0 = False
    bytes_0 = b"\xa7G\x15\xe7r\xee\xb6"
    str_0 = "dzX$VG7v~BVrd\x0bPm"
    tuple_0 = (bool_0, bytes_0, str_0)
    complex_0 = 4441 + 1887.28006j
    str_1 = "ON ~BE\x0bDP\n1lpZ}d"
    tuple_1 = (bool_0, tuple_0, complex_0, str_1)
    dict_0 = {bool_0: tuple_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    bytes_0 = b"\xcf\xf2B\xcb\x13qF\x12\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    float_0 = -1383.6715
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    bytes_0 = b"\x04j97\x95Sr\xd9\xb1\x03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    str_0 = "2pX?)-.yYz)n BWC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    complex_0 = 6.01956 + 308.886j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1]
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bool_0 = False
    int_0 = 565
    list_0 = [bool_0, bool_0, int_0]
    list_1 = [list_0, int_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    bool_0 = False
    bytes_0 = b"1\xf1E"
    dict_0 = {bool_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bool_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_2542():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2543():
    complex_0 = -271 + 3264.39j
    set_0 = {complex_0, complex_0}
    int_0 = 2421
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    str_0 = "7x+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    int_0 = -1636
    module_0.get_new_command(int_0, int_0)


def test_case_2546():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2547():
    float_0 = -1356.40997
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    str_0 = "c.f\t?c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    int_0 = 2728
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    int_0 = -977
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    float_0 = -708.446167
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    int_0 = -1814
    list_0 = [int_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    int_0 = -542
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bytes_0 = b"\x04x\xf5\xc7\x13?\xfc\x80\x1c\x90\xb4\x1b\xabW\xbe\x90\x8a"
    bytes_1 = b"f\x11f\xc4"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    bytes_0 = b"\x08\xb51P"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    int_0 = -1173
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    complex_0 = -1779.02 - 633.932j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    float_0 = -106.66296
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    int_0 = -2680
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    str_0 = "Y),`8!Un-s~T0,"
    bool_0 = False
    set_0 = {str_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    complex_0 = -1998.286396 + 1718j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    bytes_0 = b"9\xc1\xbb\t\xe5>B\xbe|"
    str_0 = "f'"
    tuple_0 = (str_0,)
    list_0 = [bytes_0, bytes_0, tuple_0, tuple_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    bool_0 = False
    str_0 = '"(M7Y^(u<-'
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    complex_0 = -3636.7332 - 4644.0199j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    int_0 = -695
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    float_0 = -887.6587
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    float_0 = 1531.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    bytes_0 = b"2$\xe8\xb4"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    int_0 = -1842
    set_0 = {int_0}
    tuple_0 = (set_0, set_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    float_0 = -63.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    bytes_0 = b"\x02\x16\x11\xcb\x9f7G\xb5<\xd9\x19\x06\x18pk\xc02\xdcB"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    none_type_0 = None
    float_0 = -2774.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    int_0 = -4635
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    int_0 = 4165
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    complex_0 = 1462.301 - 3198.91317j
    bytes_0 = b"\xd5?\xc8\xe3\xaa'\x04y"
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: bytes_0}
    list_0 = [dict_0]
    str_0 = "l0"
    float_0 = -4559.09887
    tuple_0 = (list_0, str_0, float_0)
    set_0 = {complex_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    bytes_0 = b"\x08Vl\x10\xfc\x93\xf7\x1b5\x16\xba\x11\xd2kE\xd4W"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    bytes_0 = b"\xa2x\xe64*5\x9f\x01S/\x8b7\xd4=9\xca[\xcb\xce\xcb"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2579():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2580():
    int_0 = -3588
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    int_0 = 1399
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    bytes_0 = b"R\xd6\n[\xf4\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bytes_0 = b"\xf6r\x92|\x8e\xf5\n\xd5\x1f"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    bytes_0 = b"\xc3\xd2\x8f\xa6\xe5\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    bytes_0 = b"eMxY\x03\x11b\xb5\x90u\xe1\x00J"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    int_0 = -940
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    complex_0 = -5151 + 599.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bytes_0 = b">\x0f\x13D\xff'\x17\xe6\xa2\xf3Y\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    bytes_0 = b"\xec\xe6\xe5"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bytes_0 = b"x\x96\x0f\xf1\x08\x9f\x13\xf7\x0b\x1ez\x04X\tg\x14\xf0\xce\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    float_0 = 1409.4043
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    float_0 = 2264.748093
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bytes_0 = b"\xa5\xffX\x935\xef\x11"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    float_0 = -728.001526
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    bytes_0 = b"\xd2w\x9a\xfb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    int_0 = 1457
    tuple_0 = (int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    bytes_0 = b"\xc5"
    module_0.match(bytes_0, bytes_0)


def test_case_2602():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2603():
    str_0 = "+{ ="
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, set_0, str_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    int_0 = 558
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    str_0 = "hH:*krP<{+O"
    module_0.match(str_0, str_0)


def test_case_2606():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2607():
    bytes_0 = b"h\x06\x84.\x04\xfa\rJ\xd9\x0b\xc5\xe8\xdf-\x9f\x19\xaf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bool_0 = False
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    str_0 = "O604@!o W.7*Ki>Q6)"
    float_0 = 3616.53
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    bytes_0 = b"(\x0fQZ}<Y\xd6'\xb2\xb1\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    bytes_0 = b"\xd5\xef\x0b"
    module_0.match(bytes_0, bytes_0)


def test_case_2613():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2614():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_2615():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2616():
    int_0 = 548
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    int_0 = -2300
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    int_0 = -1858
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    str_0 = "O$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    str_0 = "aUC+h7s{!@3*>@"
    set_0 = {str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    int_0 = 1161
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    bytes_0 = b"v\x04\xe1\x01\x89"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    str_0 = "v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    int_0 = -2628
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    bytes_0 = b"\xde\xc2\xaf\x8a\x9c"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    complex_0 = 3429 + 2017j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    float_0 = -593.0
    module_0.get_new_command(float_0, float_0)


def test_case_2634():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2635():
    str_0 = "[$P\r_xuJ7JelHzY"
    bytes_0 = b"\xb2MkAx \x1e{)"
    set_0 = {str_0, bytes_0, bytes_0}
    tuple_0 = (str_0, bytes_0, set_0, str_0)
    module_0.match(tuple_0, tuple_0)


def test_case_2636():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2637():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    int_0 = 36
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    str_0 = "*!A~*"
    module_0.get_new_command(str_0, str_0)


def test_case_2640():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2641():
    int_0 = -405
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    str_0 = "J7@0\\3rA"
    float_0 = 671.1
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    str_0 = ")i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    int_0 = 3643
    int_1 = 137
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    str_0 = "\\w>4"
    str_1 = "\nwq"
    list_0 = [str_0, str_0, str_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    str_0 = "^+-\\fZT)"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    complex_0 = -1787.44 + 1995.1598j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2649():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2650():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    str_0 = "ZoIa("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    int_0 = -3175
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    float_0 = 996.0
    module_0.match(float_0, float_0)


def test_case_2657():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2658():
    int_0 = -2369
    module_0.match(int_0, int_0)


def test_case_2659():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2660():
    str_0 = "zMK:W~c;z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    bytes_0 = b"\x98\xa4\xc2\x8aW\xab\xfe/@\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    str_0 = 'qCC=}f"l)b/:>'
    str_1 = "ha(;o"
    bool_0 = True
    tuple_0 = (str_0, str_1, str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    float_0 = 713.47821
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    complex_0 = -78.025206 - 1764.33244j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    complex_0 = -2062.7233 + 2269.44601j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    str_0 = 'DZB-g(\rAAN\\X"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    str_0 = ""
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = "%XvY,vaE&}"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    float_0 = 1155.347
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    int_0 = -3332
    module_0.get_new_command(int_0, int_0)


def test_case_2675():
    pass


def test_case_2676():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2677():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    str_0 = "Y\\Uo:LeOE4<Qrf6=(;s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    int_0 = 2042
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    bytes_0 = b"\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    int_0 = -2587
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    int_0 = 780
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    complex_0 = -2957.18 - 3067.2j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    bool_0 = True
    bytes_0 = b"\xa5\xd7\x98\x13?\xe2\xc8(1\x97\xe6"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    bytes_0 = b"\xb3\x88\x95\xca\x8f\x1f\x1eB<IC\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    bool_0 = False
    bytes_0 = b"fK:\x8e"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    float_0 = -3807.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    str_0 = "aWK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    str_0 = "A1/xgj5\t\x0b@l!."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    float_0 = 3944.674047
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    int_0 = 4796
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    float_0 = 813.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    int_0 = -1181
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    str_0 = "}4\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    float_0 = -1122.0
    tuple_0 = ()
    tuple_1 = (float_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    float_0 = -2508.75
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    int_0 = 4186
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    float_0 = 135.8778
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    float_0 = -1180.5954
    module_0.get_new_command(float_0, float_0)


def test_case_2704():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2705():
    int_0 = 1545
    float_0 = -240.0
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    float_0 = -1752.8
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    none_type_0 = None
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    str_0 = "60"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bytes_0 = b"\xe4\x94\xf0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    str_0 = "-5C)KZ\x0bYRg:\r__8GI}-G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    str_0 = "<9UXXU%'PQ:fs2"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    int_0 = 4
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    str_0 = "*''N="
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    int_0 = 1229
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    float_0 = -642.794013
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    str_0 = "U'MP|\\o~N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    float_0 = 1737.41
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    str_0 = "*K`+e@ez%=.FkJ~D"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_2722():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2723():
    int_0 = -2177
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    float_0 = 2528.47
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    int_0 = 1835
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    str_0 = "d|ho9^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    str_0 = "Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    bool_0 = True
    str_0 = "e8P2R1"
    module_0.match(bool_0, str_0)


def test_case_2729():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2730():
    float_0 = 466.4
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    str_0 = "tM%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    bytes_0 = b"\xe3\xe8\xdbhl8\xb6\xef"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    str_0 = "&E9u5\x0b\\PYTt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    int_0 = -2632
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    bytes_0 = b"\x89\xf9@G\x1d\x86\xe4\xf8\xd0\xa2K\x8f\x8c\xdc\x8c\xd6\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    int_0 = -834
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    int_0 = 2488
    module_0.match(int_0, int_0)


def test_case_2738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2739():
    str_0 = ":c.|7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    bytes_0 = b"-\xadm\xce\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    str_0 = "$K<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    float_0 = 1926.52904
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    str_0 = "ix tV8W-%D>.XxG&i2"
    bool_0 = False
    tuple_0 = (str_0, str_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    int_0 = -726
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    float_0 = -640.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    int_0 = 2142
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    none_type_0 = None
    str_0 = "59*)\nv7y"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    list_0 = []
    str_0 = "5B,Q3TtN17S:6+NX%"
    tuple_1 = (set_0, list_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    bytes_0 = b"~\xfe\x08s\xf9\xda{\x97\xa0\x97\x9e=y\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    str_0 = "cR#8X%Hzd~Ua\\Wm:NxH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    float_0 = 7821.2
    list_0 = [float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    complex_0 = -327.8419 + 634.08j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    str_0 = " Ws&;3FXed$gv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    none_type_0 = None
    bytes_0 = b"\xa8~\xd3\xc9G\xec1\x17"
    int_0 = -539
    tuple_0 = (bytes_0, int_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    float_0 = -2835.559
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    int_0 = -2920
    float_0 = 2603.30263
    list_0 = [float_0]
    bool_0 = True
    list_1 = [list_0]
    dict_0 = {int_0: list_0, bool_0: list_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    int_0 = -2156
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = True
    list_0 = [dict_0, int_0, bool_0, int_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    bytes_0 = b"\x84\xf1\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    int_0 = -3510
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    object_0 = module_1.object()
    int_0 = 288
    dict_0 = {object_0: object_0, object_0: object_0, object_0: int_0}
    bytes_0 = b"\xe6\x1c\xb8\x05C\xbb;\xe0.\x1c\xd6j"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = -4250
    bytes_0 = b"=j\xfc (\xc3c)\x96\xcb\x84\xb8\x1d\xae0\x1f\x12\xc7"
    bool_0 = True
    tuple_0 = (int_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    str_0 = "=U=&ZJUf\r5%$njz`?"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    set_0 = set()
    str_0 = "v%\r7H(1T"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    bytes_0 = b"\x1d.\x01\x06T\xfc\x95\xe5\x01\xcc\x97sM\xd0\xcb\xba\xb8\x1a\x90q"
    list_0 = [bytes_0]
    list_1 = [list_0, bytes_0, bytes_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    complex_0 = 2584.663509 + 1385.0215j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    int_0 = -1361
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    int_0 = -1232
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    bool_0 = False
    str_0 = "=>FO"
    tuple_0 = (bool_0, bool_0, bool_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    str_0 = "X`sPhN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    float_0 = -568.3117
    tuple_0 = (float_0, float_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    int_0 = -2419
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    bytes_0 = b"\x03\x0f\xa8\xb7\x8b\xd9Vy\xbbk"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    str_0 = "saCR0\noW&nHNANKLv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2779():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2780():
    str_0 = " l1"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    bytes_0 = b":M\xb7\xf1Q#\x83c\xcf\x95\xc4\xf0\x90Q\x10s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    bytes_0 = b""
    float_0 = 281.51
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    str_0 = '"&'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    int_0 = -2642
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    float_0 = 966.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    float_0 = 1729.88
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bytes_0 = b"\xe67F\x9c`\xcb\x1c@\x1fa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    dict_0 = {}
    float_0 = -495.33352
    tuple_0 = (float_0,)
    list_0 = [dict_0, dict_0, tuple_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    int_0 = 532
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    int_0 = 1670
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bytes_0 = b"\x93M9\x8f\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    float_0 = 2163.77048
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    str_0 = 'lH3MI"?_l`'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    str_0 = ".KmqW0*M+\\\x0cZt:guSm8^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    int_0 = 1486
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    none_type_0 = None
    float_0 = 59.0
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    float_0 = -2938.48
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    str_0 = "\nuZ;q\x0b\x0chK6>y3?"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bytes_0 = b"\x91\x16mM[KD\xb2M\xfe\xfc\x97\x9bR\n"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    bytes_0 = b"\xd4x8\xf0\xd2"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    bytes_0 = b"'["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    str_0 = ""
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    str_0 = "d\r=e="
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = True
    str_0 = "G"
    tuple_1 = (tuple_0, bool_1, str_0)
    module_0.match(tuple_1, bool_0)


def test_case_2809():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2810():
    bytes_0 = b"H\xcf\xc7.T2"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    str_0 = "!#ex\t\\mVdJ(\\hE"
    tuple_1 = (tuple_0, str_0)
    float_0 = -4802.1402
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    str_0 = "{B-[z:6"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    int_0 = 1759
    tuple_0 = ()
    list_0 = []
    dict_0 = {int_0: int_0, tuple_0: int_0, tuple_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    str_0 = "s6M`!^c1swsU`r)=*O="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    bytes_0 = b"\x05\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    int_0 = 4041
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    int_0 = 757
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    bytes_0 = b"\x04\xcf\xe5#\x04\xd1/\xb00\xa1\xf5b\xf3\x89."
    int_0 = -1070
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bytes_0, int_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    int_0 = 373
    bytes_0 = b"\xb9gLW\xf6\x8d\x97Q\xcfV\xc1D:M\x16n"
    tuple_0 = (int_0, bytes_0)
    dict_0 = {tuple_0: tuple_0, int_0: bytes_0, tuple_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    complex_0 = 1254.8 - 1353.763j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    complex_0 = -4467.804 + 1235.22j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    bytes_0 = b"\xb4\xbf\xde\x80\xd6\x18d\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bytes_0 = b"?\xbal\xe1qY\xd4"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    str_0 = "I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    bool_0 = True
    bytes_0 = b"\xc1\xaf"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    int_0 = -237
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_2829():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2830():
    int_0 = -1295
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    str_0 = "`sQ"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    int_0 = -1392
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    float_0 = 210.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    int_0 = 1191
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    bytes_0 = b"9\xe0u\x08\xef\x81/\xc5P\x05\xb6\xed\x0b`uW\x82\x82\xcf\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bytes_0 = b"\x1bV\xec\xbd\xcf\x1d\x02NZ\x1e\xc7\xccyfk|\xa2}\x04\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


def test_case_2839():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2840():
    none_type_0 = None
    float_0 = 1011.811181
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    bytes_0 = b"&\x80\xac11\x8e\x13m\x81\xbd\x05\xcd%\xa69l\x87\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    float_0 = 363.34
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    bytes_0 = b"\xfc,]/\xaa\x7f"
    tuple_0 = ()
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, tuple_0: bytes_0, bool_0: bool_0, bytes_0: tuple_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    str_0 = "Go93KMtNdr:9:B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    bytes_0 = b"b\x8e\xd7\x1e_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    str_0 = "F"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    bytes_0 = b"5\xd5\xa7\x87;\xda\x9e\xab\x0f\xbaV\xd9"
    int_0 = -4516
    bool_0 = False
    tuple_0 = (bytes_0, int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bytes_0 = b"\x89\xf2\xe9\x05\x02"
    str_0 = ":5u}]WL"
    str_1 = "OQ$^~K]tM'Q9k,"
    int_0 = 817
    dict_0 = {bytes_0: bytes_0, bytes_0: str_0, str_1: bytes_0, int_0: int_0}
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bytes_0 = b"\xda\x97\x08\xbb3\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    int_0 = 2597
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    dict_1 = {object_0: dict_0}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    str_0 = "+VZ+W lZ%tjO{w~n"
    str_1 = "\\Wbf>R`$vSFm:pJ"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    float_0 = 1851.588265
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    str_0 = "p<7fZ/WS\rT9XG2\nBUW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    int_0 = 2256
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, set_0]
    str_0 = "nrox( /~2'0i"
    str_1 = "<&0Wb+q#i1"
    str_2 = "o"
    dict_0 = {str_0: str_0, str_1: list_0, str_2: set_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    bytes_0 = b"\x07\x0c\x1e\xd5E\x98\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    float_0 = -902.0
    list_0 = [float_0, float_0, float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = "Y@t*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    complex_0 = -4490.83 + 3996.62666j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    int_0 = 2998
    bytes_0 = b"\xbfFc\xd9\xcb\x89\x95\xd4\x90\x98\x1a\xec\xb9\xb3m\x02\xff\xfc\xb0"
    set_0 = {int_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    str_0 = "\x0c>U\\L{\x0bd@clLyT."
    str_1 = ""
    dict_0 = {}
    str_2 = "GewETC"
    str_3 = "{ok-c 4>K).sT [fO\n*\r"
    dict_1 = {str_0: str_0, str_1: dict_0, str_2: dict_0, str_3: str_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    str_0 = "aa"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    bytes_0 = b"\x86z0\x0bN"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    none_type_0 = None
    float_0 = 1856.38704
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    int_0 = -1174
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    int_0 = 3724
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    str_0 = "D7)g{zqSY-4\\M15"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    bytes_0 = b"*\x817\xc9gHG\x05\xb5\x0c\xbe@\x81\xc1~0"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    int_0 = 385
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    int_0 = -133
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    str_0 = "dnv4)4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    bytes_0 = b"\n\xbf\xce\x88\x8bvoP\x82\x8a\x86\xddp\x13J3'"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    bytes_0 = b"\xdf\x83\x8b\x9ar<"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    bytes_0 = b"\x0c\xc4\xa3\x0f\xc9\xb8JR`c\xf9\x05]|xK\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    int_0 = 340
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    bytes_0 = b"`\x90\xcb\xbb\xaa7\xf8Fm'\x9b\x92\xf4h\xbd&p"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    str_0 = "\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    object_0 = module_1.object()
    str_0 = 'MNNK\r"o5'
    list_0 = [object_0, object_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    int_0 = 147
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    float_0 = 1031.0067
    set_0 = {float_0, float_0}
    bool_0 = True
    bytes_0 = b"%\x16\xae\xd1C\xcd\x94\x8a\xb9u`\x95"
    tuple_0 = (float_0, set_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    int_0 = 2700
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    float_0 = -3062.5168
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = 35
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    int_0 = 466
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    int_0 = 2162
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    str_0 = "t>{?\x0b>5,aOp"
    bool_0 = False
    list_0 = [str_0, str_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    str_0 = "(PO"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    none_type_0 = None
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    int_0 = -3204
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    float_0 = 1047.71805
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    str_0 = "!aGxR"
    module_0.get_new_command(str_0, str_0)


def test_case_2900():
    pass


def test_case_2901():
    pass


def test_case_2902():
    pass


def test_case_2903():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2904():
    str_0 = "+wE^"
    none_type_0 = None
    str_1 = "L\\(l"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    int_0 = 753
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    bytes_0 = b"v\xbd\x9cT\xf7\xbd\x97\x1c\xfag\x1fE"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    int_0 = -1
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    list_0 = []
    str_0 = "+umu#"
    dict_0 = {str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    list_0 = []
    bytes_0 = b"\x80\xb6\xca?\xe9\xf8\xbd#\xf72\xd3\x12\xcf\xf55\x83?\xa9\xc7"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    str_0 = "me{OS\tNe"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    float_0 = -2132.51
    tuple_0 = (float_0,)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b"P\xb2E\x89<\xcc\x87\xe8M\x80\xc7\xfe\xbc\x92\xe6\x12h\xe0y\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    str_0 = "?JUL\x0b,v6(B$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    str_0 = "h]=n*OpB\n="
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    int_0 = 236
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    int_0 = -1824
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bool_0}
    list_0 = [dict_0, dict_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_2922():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b"\xf3\xbc\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bytes_0 = b"_\x88\x87\xe9\x13\x83\xc0N\xcd\x04\x96\xad\x94J\xfa\x1a\xfe+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    str_0 = ">-l*$T\x0b DwZly\\rEW\\y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    str_0 = "~/<N_mt~ameCR:("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    int_0 = 1662
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "G\nOGB)bo%~ZgS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    int_0 = 1210
    set_0 = {int_0, int_0, int_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    int_0 = -256
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    str_0 = "\rt1&t/XM\n"
    bytes_0 = b"\x1bf;)\x87\xfc\xd4A "
    tuple_0 = (str_0, bytes_0, str_0)
    dict_0 = {bytes_0: bytes_0}
    bytes_1 = b"\x1f\x0c@\xd70\xc7g#\x07\x11a+wz"
    tuple_1 = (tuple_0, dict_0, bytes_1)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    str_0 = "Szj\r3l(G!-"
    str_1 = ",8fXTn}U@eKO\\j=["
    str_2 = "F+}uQ"
    str_3 = "JEXsujSir"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_3: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    str_0 = "5 ;!0'EK$yh82_\x0b"
    bool_0 = False
    module_0.match(str_0, bool_0)


def test_case_2934():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2935():
    str_0 = "_|>|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    int_0 = 3673
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    int_0 = 714
    dict_0 = {int_0: int_0, int_0: int_0}
    dict_1 = {}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    float_0 = -1533.9
    bool_0 = False
    dict_0 = {float_0: bool_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    bytes_0 = b"R\xa12\xe3\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    str_0 = "dyiGZr"
    list_0 = [str_0]
    list_1 = [list_0, str_0, list_0, str_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    float_0 = 272.86
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bool_0 = False
    bytes_0 = b"\xe2\x19\xff\x9e"
    tuple_0 = (bool_0, bytes_0, bytes_0, bool_0)
    tuple_1 = (tuple_0,)
    dict_0 = {tuple_1: tuple_1, tuple_0: tuple_0, bool_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    complex_0 = -382.1 - 2148.52j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    str_0 = "e\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    str_0 = "AV(NE5obYZmj~PD2BK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    int_0 = 1088
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    int_0 = -57
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    str_0 = "-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    bytes_0 = b"2\xfb\xea\xa8\xd5\x82\xd8\xcc\x8b5./\xf2\xf2"
    dict_0 = {}
    tuple_0 = (bytes_0, dict_0)
    bytes_1 = b",ovN"
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    bytes_0 = b"\x0fG\xb3\x9cxRx\xf9\xb4\x8d\xf38?\x80|\xf5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    tuple_0 = ()
    str_0 = "/c>w"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    complex_0 = 34.865451 + 627.142j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    str_0 = "Ch"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    str_0 = "*r\nY_F %\rpzR?\n\\?"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    str_0 = "`u!8]uMRaEf7LdLM"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    bool_0 = True
    bytes_0 = b"\xf5K\xa4`\xb0\x04,zR\x0f"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    bytes_0 = b"\x1c\x84\x96\xf0\xd8bTk9:\xed\xc7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    bytes_0 = b"\x94\x02\xf12gA\x98\xf7)2`\x0e,\x19v\xa5\x83\x97F"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    int_0 = 2295
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    float_0 = -307.37
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    int_0 = -1458
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    float_0 = -2079.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    float_0 = -3884.58466
    tuple_0 = (float_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    int_0 = 852
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    str_0 = "wg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    int_0 = 794
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    int_0 = 1321
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bool_0 = True
    str_0 = "J?]6\x0bv#9"
    set_0 = {bool_0, str_0, str_0, bool_0}
    tuple_0 = (str_0, set_0, str_0)
    list_0 = [bool_0, tuple_0, bool_0, tuple_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    bytes_0 = b"\x07\x88\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    str_0 = 'yq&o|,*?"|d;rs'
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    int_0 = 1467
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    set_0 = set()
    int_0 = 2303
    tuple_0 = (set_0, int_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    complex_0 = 247 - 121j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    float_0 = -1367.37572
    int_0 = -1990
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    str_0 = "M%xqZ>=Fl}W"
    module_0.get_new_command(str_0, str_0)


def test_case_2980():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2981():
    float_0 = -938.502
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    bytes_0 = b"\xafN~\xb1\xa6\xb9\xd6\xfcJ\x10\xe1\xa7\x81\xf3"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    str_0 = "rXGb>d"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    int_0 = 1960
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    bytes_0 = b"\xeex\r,\xab\xc9z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    none_type_0 = None
    bytes_0 = b"\xdc;M\xd1\xf3M\xa1\xf8*\xe2\xf4s"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    bytes_0 = b"\x9a\xc30\x11T\xb6\xc5\xecT\x02\xe2k"
    list_0 = [bytes_0, bytes_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    float_0 = 282.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    bytes_0 = b"\xfb>\x836[."
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    str_0 = "q8W_o~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    int_0 = 506
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    bytes_0 = b"\xc9\x0e\xc7\xa8\xbcP;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    str_0 = "m`;7A"
    str_1 = ":>zfwhCrr^Hj8KvJKq^"
    set_0 = {str_0, str_1}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    int_0 = -215
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bool_0 = False
    set_0 = {bool_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    bytes_0 = b"\xe5\xd1\xf1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    complex_0 = 855.429 - 1103.5949j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    str_0 = "4W\tFc37WnGn]7Z)Oj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    float_0 = 1363.3
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    bytes_0 = b"V\x93}\xcc\xe0\xa0Q\xcf\xa3B`<\x81["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    int_0 = 35
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    bytes_0 = b'\xd5"J\xe2\x0eF\xd8jW\x81L\xa4\x9c^\xe7\xbeK'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    bytes_0 = b";\xa2\x92d\x9f,\xf7\n\xf1\xeb\xd1\xdf+r\x0fd\x838\xb1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_3009():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    bytes_0 = b"a+g\xa9\xa4\xa1\x16y\xa3\x077P\x9f"
    bytes_1 = b"\x98#\xcbf\x92+\x1a\xac\xaf\x1b\x0c*\xd2\xfe\xad\xd8\xe7\xed\x9e\xb5"
    tuple_0 = (bytes_1,)
    set_0 = {bytes_0, tuple_0, tuple_0}
    module_0.match(set_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    int_0 = 936
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    bytes_0 = b"^\x84\xd6\xf5\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    int_0 = -1340
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    int_0 = -113
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    bytes_0 = b"!\xe0\x17\xfa\xbcl\xac@\xf6\x08p\xfd\x8a\x89\xcf\xa73"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    bytes_0 = b"\x9f\xad\xae\xe2\x0e\xf9~\x93.\xd6\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    bytes_0 = b"\x1cV\xa4\xd5\x86\xca\x12\xeb\x0c6`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    str_0 = "5E\ncpvuC)"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    float_0 = 2284.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    int_0 = -109
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    complex_0 = -2793.05271 + 1639j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    float_0 = -987.89
    bool_0 = True
    set_0 = {float_0, float_0, float_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    str_0 = "0H8Yb|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    int_0 = 83
    str_0 = "U{sAGBr~m=HdhLj34&"
    list_0 = [int_0, int_0, str_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    bytes_0 = b"\x83\x11,"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    complex_0 = 3128.46 + 4516.208j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    float_0 = -344.2
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    float_0 = 896.515
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    complex_0 = -1416 + 1283.09j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    str_0 = "J"
    str_1 = "uN\x0b_:ztz<)5jl\x0c4"
    str_2 = "+:w=o.uGt6hy98O&XfW+"
    str_3 = "hJA6"
    tuple_0 = (str_3,)
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    int_0 = -2591
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    int_0 = -1788
    module_0.get_new_command(int_0, int_0)


def test_case_3040():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3041():
    bytes_0 = b"Z\xc8w5\xea\xf1yG\xf2\x87\xe1\xe9O\x19\xa5&LP\xb2\x05"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    set_0 = set()
    bool_0 = False
    list_0 = [bool_0, set_0, set_0, set_0]
    tuple_0 = (set_0, bool_0, list_0, set_0)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    float_0 = -1059.35
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    str_0 = "1mk"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    bytes_0 = b",\x18\x1ao~7\xad\xb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    bytes_0 = b"\xdcrK\xfdcV\x08T"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3048():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    str_0 = "d.5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    str_0 = '"@D^@'
    bytes_0 = b"_\x99\x9f\xe2\xda\xf0\x976(\xefDv\x89\xcb\x95"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    int_0 = -565
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    int_0 = -1676
    list_0 = [int_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    int_0 = 2312
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_3055():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3056():
    complex_0 = 1064 - 2710.35776j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    bytes_0 = b"T?"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3059():
    int_0 = -3614
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    str_0 = "\x0c=sVg>B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    float_0 = -2177.756
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    int_0 = -1287
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    bool_0 = False
    list_0 = [bool_0]
    float_0 = 826.23
    tuple_0 = (list_0, float_0)
    tuple_1 = (tuple_0, bool_0)
    tuple_2 = (tuple_1, tuple_1)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    bool_0 = False
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


def test_case_3065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3066():
    complex_0 = -1747.638 + 93.3944j
    dict_0 = {complex_0: complex_0}
    float_0 = -1721.8602
    tuple_0 = (dict_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    bytes_0 = b"U\x7f^4\x96v\x92\x86\xa4\xd7\xf1\x8dp\x19J"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_3068():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3069():
    float_0 = 1803.5137
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    int_0 = 409
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    bytes_0 = b"X\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    int_0 = 196
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    bytes_0 = b"\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    str_0 = ""
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    none_type_0 = None
    int_0 = -2634
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    bytes_0 = b"\\<_8k\xd2O\x96S"
    int_0 = -388
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    float_0 = -592.22263
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    float_0 = -985.0
    module_0.match(float_0, float_0)


def test_case_3081():
    pass


def test_case_3082():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3083():
    str_0 = "#m#AO|Lp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    complex_0 = 392.5 - 2741.28763j
    list_0 = [complex_0, complex_0]
    str_0 = 'KacJ3T"'
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    complex_0 = 281 - 18.63j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


def test_case_3086():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"\x14FZ\xbb\xca!lO"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    int_0 = -1446
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    complex_0 = 1811.97 + 3276.440093j
    bool_0 = False
    bytes_0 = b"\xc5\xb3\x94\xc9u"
    int_0 = -4633
    tuple_0 = (complex_0, bool_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, complex_0)


def test_case_3090():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3091():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    int_0 = 1777
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    int_0 = 783
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    int_0 = 967
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    bytes_0 = b"`\xfa\xdc9\t\xe0\xec\xc7\xd7\xf4\x01"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3096():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3097():
    complex_0 = 2757.408 + 1705j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    int_0 = -2837
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    bytes_0 = b"\x9cAF\xf7\xa5\x9e\xa1\xb6\xd8H"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    float_0 = 2644.5046
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    str_0 = "k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    bytes_0 = b'k\x87y\xa0\x9a\xfdAW\xf2EqO"\xdf\x94\x86:\xaa/\xd2'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    int_0 = 1453
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    bytes_0 = b"\x8a\x16\xc5\xe6\xd5K\x8d.\xde\x17r\x13y\x19"
    int_0 = 3260
    bool_0 = True
    tuple_0 = (bytes_0, int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    str_0 = ")vtw;|D|fEo-'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    str_0 = ":m,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    int_0 = -1689
    module_0.get_new_command(int_0, int_0)


def test_case_3111():
    pass


def test_case_3112():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3113():
    str_0 = "q(2mdn\nFH#E7h/+x?a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    bytes_0 = b"\xc1\xb0\x84\xad|\xec\x18\xe8\xda\x1c\x1e3n\xb6\xea\xee\xb6\xee\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    float_0 = -3339.322592
    object_0 = module_1.object()
    set_0 = {object_0}
    list_0 = [set_0, set_0]
    int_0 = -985
    tuple_0 = (float_0, object_0, list_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    bytes_0 = b"'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    str_0 = "\x0cn\t98}#SFto+~fg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    str_0 = "w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    complex_0 = -1798 + 1453.13791j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    complex_0 = 1093.3 - 639.194j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    list_0 = []
    str_0 = '"tZ'
    str_1 = "#E\x0bV/Y[]&\\#gV%0("
    dict_0 = {str_0: list_0, str_0: list_0, str_0: list_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    int_0 = -1069
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    bytes_0 = b"\xab\t/\xbc8\xc1\xdc\xf7\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    str_0 = "|$\x0bEL}lQ\n^PW0&"
    module_0.match(str_0, str_0)


def test_case_3125():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3126():
    bytes_0 = b"\x94N\xe8{>5\xa4\xfb\x9b\xc6\xec\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    bytes_0 = b"J5\xe7_\x9a\xa3l1\x9e;\xfa\xb6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    float_0 = -264.235854
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    bool_0 = True
    float_0 = -825.510175
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    int_0 = 85
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    float_0 = 621.01
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    bytes_0 = b"\xf5e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    float_0 = -1394.19
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    bytes_0 = b"z\xaf\xb7j\x0c\x10\n'c\xe4k(\xbd"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    set_0 = {tuple_0, bytes_0}
    module_0.match(set_0, set_0)


def test_case_3136():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3137():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bytes_0 = b"\xbd\xb0\xb5\n%yOQ\xd1\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    str_0 = "6Rjp'.{dbZ2C>|Q~4s;e"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3140():
    pass


def test_case_3141():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3142():
    str_0 = "3\x0bZ4d'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0, object_0, object_0}
    bool_0 = True
    tuple_0 = (set_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    bytes_0 = b"\x94Q\x8e\xfa\x97Wu\x9b\x19rF\x84\xaa\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    str_0 = 'd|V}GxpGT0B"T1}'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    int_0 = 2538
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    complex_0 = 4439.03 + 593.847366j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    bytes_0 = b"\x93h\xb5h\xe0\xfa\xb7\xe4"
    int_0 = -43
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    bytes_0 = b"\xc2~@\x9d6\x94v\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    object_0 = module_1.object()
    float_0 = 2947.5
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    tuple_2 = (object_0, float_0, float_0, tuple_1)
    module_0.get_new_command(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    complex_0 = -2163.41447 - 83j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0, dict_0, list_0]
    list_2 = []
    module_0.match(list_1, list_2)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    float_0 = 1052.32
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    int_0 = -389
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    int_0 = -290
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    bytes_0 = b"\xd3\xe9\x1e\x18"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    int_0 = 1421
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    int_0 = -832
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    int_0 = -775
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = 762
    set_0 = {int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    bool_0 = False
    float_0 = -2141.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    float_0 = 20.14484
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    list_0 = []
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    bytes_0 = b"\x01\xe7\xb09\xf0\x10\x0e>\x98!%\xde\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    bytes_0 = b"f3\xae\x0e\xa0\x1d\xe4\x03\x89\x98(\xd7\x03\x88[\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    str_0 = ""
    float_0 = -2201.0
    dict_0 = {str_0: str_0, str_0: float_0, str_0: float_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_3166():
    pass


def test_case_3167():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3168():
    str_0 = "%k5;ng$QR"
    str_1 = "\rZ_nq*ff&JyT]hg8T~"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    float_0 = 477.21
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    tuple_0 = ()
    int_0 = -3707
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    bytes_0 = b"\xbbK\xe4\x9a="
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    str_0 = ")4T,~O\r4FG[$"
    int_0 = -3168
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    int_0 = -3287
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    float_0 = -856.52
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    bytes_0 = b"V\x90\xa0\xedO*\rE"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    str_0 = "h&aU=cO9N=]y [E2(^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    int_0 = 950
    complex_0 = -3048 + 1090j
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: complex_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    str_0 = "]H!>V^"
    str_1 = "-C05G9!@G/"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    bytes_0 = b"\x15\x90M\xa3\xa6\xdf\xe0\x89\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    str_0 = "5b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    int_0 = 86
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    int_0 = 3322
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    str_0 = "\x0cm2ZqY7S]xC4"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, tuple_0, tuple_0}
    bool_1 = True
    list_0 = [tuple_0, set_0, bool_1]
    module_0.get_new_command(list_0, set_0)


def test_case_3187():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3188():
    str_0 = "43N@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    str_0 = ""
    object_0 = module_1.object()
    list_0 = [object_0]
    int_0 = -1493
    tuple_0 = (list_0, int_0)
    tuple_1 = (set_0, str_0, tuple_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    int_0 = -1374
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3192():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3193():
    complex_0 = -256 + 1350.76235j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    bytes_0 = b"ow\xf0\x15\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3195():
    pass


def test_case_3196():
    pass


def test_case_3197():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3198():
    str_0 = "J*B\x0cg4gt?m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    bool_0 = True
    int_0 = -28
    float_0 = -1232.19
    bytes_0 = b""
    set_0 = {float_0, float_0, bytes_0}
    tuple_0 = (bool_0, int_0, set_0)
    tuple_1 = (bool_0, tuple_0, int_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    list_0 = []
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    int_0 = -599
    list_0 = [int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    float_0 = -1654.523
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    bytes_0 = b"\xa2\x19\xe0?2\xaf@D3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    bytes_0 = b'\xa7\x93"0\xe6p\xed'
    bytes_1 = b"\x98\x10\x88\xb0\xd6\xe1\n"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_1, bytes_0: bytes_1, bytes_0: bytes_1}
    module_0.get_new_command(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    bytes_0 = b"\xbe\x15|8k\xb7\xbc\x96H\xcbx\xf98\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    tuple_0 = ()
    bytes_0 = b"\x90\xb2"
    int_0 = 2839
    bool_0 = True
    tuple_1 = (tuple_0, bytes_0, int_0, bool_0)
    dict_0 = {tuple_1: bool_0, tuple_0: bool_0, bool_0: tuple_1, int_0: int_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    float_0 = 1784.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    float_0 = 1103.619143
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    float_0 = -3748.37754
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    complex_0 = 471 - 2836.771j
    list_0 = [complex_0]
    float_0 = -2509.1066
    tuple_0 = (complex_0, list_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    bool_0 = True
    set_0 = set()
    str_0 = "m,~X;z\r]^FMI|z?9N!"
    dict_0 = {bool_0: str_0, str_0: set_0}
    tuple_0 = (bool_0, set_0, dict_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bytes_0 = b"fmuF\xf9!\xf5\xf4\xeeJ\x9c\xb6?\x7f\xa0\xa2\xa5\x03\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    float_0 = -360.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    bytes_0 = b"\x9b\xa1\x98\t\xacK\x07"
    bytes_1 = b"\x0f\xa0'K\xc3\x07\x91N\xa0O\xd2\xd8^e#Q"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    str_0 = "*)\nN^rpb3f@Aft51"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    float_0 = 2548.366
    list_0 = []
    tuple_0 = (float_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    list_0 = []
    str_0 = "-]U%O"
    str_1 = "XeMM!5#KlC~_\t*5pH6"
    str_2 = ']]"o[^uL87N!wzN'
    dict_0 = {str_0: list_0, str_1: str_1, str_2: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    int_0 = 563
    module_0.get_new_command(int_0, int_0)


def test_case_3220():
    pass


def test_case_3221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3222():
    bytes_0 = b"U\xea\x01\x16E\x08\xd0>"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    str_0 = "kdO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    int_0 = 3595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    bytes_0 = b"L!c\x97e\xb8O\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    int_0 = -88
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    str_0 = "'BJr}/YkXX"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    float_0 = 1182.956
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    int_0 = 347
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    int_0 = 1668
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    bool_0 = True
    bytes_0 = b"\xc3\x1c{\x02y9M~\xc6Q\xbe"
    str_0 = "\\\t{p"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0, bytes_0: str_0, bytes_0: bool_0}
    list_0 = [dict_0, str_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    str_0 = "7y9K3"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    str_0 = "i^6<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    bytes_0 = b"\x12\x94Z\xe0\xcd\x01\xb3]*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    int_0 = 804
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    int_0 = 1136
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    str_0 = "&kX<cR\rZ$\t&\x0bED"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    list_0 = []
    bytes_0 = b"i\x1ch\x02"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    float_0 = 1190.522255
    complex_0 = -1074.21 - 574.94666j
    module_0.match(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    complex_0 = -2768.20649 - 663.4663j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    list_0 = []
    bool_0 = True
    int_0 = 2845
    tuple_0 = (list_0, bool_0, int_0)
    bool_1 = False
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    str_0 = "G)f|[O/+\rm"
    module_0.get_new_command(str_0, str_0)


def test_case_3247():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    float_0 = 189.376
    dict_0 = {float_0: float_0}
    int_0 = 4020
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    int_0 = 358
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    str_0 = "^5K/`xPv&H?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bytes_0 = b"\x8d\x8c\xcc\xc4\xadV\xa3\xcd\xa1\\\xadfOh\x01@p\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    str_0 = "e,\\RnXI2LV\n\x0c]_\x0c\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    bytes_0 = b"\x8bR\xaf\xb0\xfbv\x7f\xfd\xa7\xa1$`47\xd9"
    list_0 = [bytes_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    int_0 = 3545
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    str_0 = "U9C\nnMbR4)~b"
    module_0.get_new_command(str_0, str_0)


def test_case_3257():
    pass


def test_case_3258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3259():
    bytes_0 = b"\xac\xa0^\x9cb\x9fI\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    bytes_0 = b"\xa1\x80\xcb\xbaTT\x8cEi\x8c\xef\x00"
    object_0 = module_1.object()
    list_0 = [bytes_0, bytes_0, object_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    str_0 = ";Y.E\x0c<m4mEG"
    module_0.match(str_0, str_0)


def test_case_3262():
    pass


def test_case_3263():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3264():
    str_0 = "\tF\x0csvjpJTN%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    int_0 = -931
    set_0 = {int_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    bytes_0 = b"\xc3\xb6"
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    float_0 = 276.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    float_0 = -3864.33583
    bool_0 = True
    bytes_0 = b"\xee\x93\xc0BO\xcc\xdc\xd0\x85R\xdda\xaapi"
    bool_1 = True
    tuple_0 = (bool_0, bytes_0, bool_1)
    bool_2 = False
    tuple_1 = (float_0, tuple_0, bool_2)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    int_0 = -1151
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    int_0 = 604
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    int_0 = -1694
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    int_0 = 4466
    dict_0 = {int_0: int_0, int_0: int_0}
    str_0 = "HnOUx%\tQ#-jx3]l?TM`U"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    int_0 = -2271
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    none_type_0 = None
    bytes_0 = b"\x9d\xb8\xcb\xef\xea\x9e\x10,\x8a`"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    bytes_0 = b"\xd1\xb2{'\x86]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    bytes_0 = b"\x89iq\xf0s\x83\xb4\xd5\xf5,\xb4!\xf6\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    str_0 = "b*x\rNR\nB3o}"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    str_0 = "g6Ht"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    bytes_0 = b"\xc8l\x10\xde\xc2\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    float_0 = -2993.587
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3283():
    float_0 = 382.837864
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    int_0 = 1688
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    bytes_0 = b"\xb3\x9f\x1d4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    dict_0 = {}
    bytes_0 = b"\xe4\xac\x8d\xc4|\xa7\xb4"
    bytes_1 = b'5\xc39\xc6\xa3\x83"\x1b\xfe'
    tuple_0 = (dict_0, bytes_0, bytes_1)
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bytes_0 = b"\xa9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    str_0 = ",7CO&3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    str_0 = "R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    bytes_0 = b"\xbb7\xbbV\x81\xbf\xa0\xddP\xc82\xa7y{\x90k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    float_0 = 3708.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    bytes_0 = b"\xc8\xd4\xaad\xb5\xa4pB\x16\xde\\\xdf%\x1f\x88\x86\xe9O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    list_0 = []
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    bool_0 = False
    bytes_0 = b"\x0e\xee\xcc\xfe#\x01\x08#\x9d\x9b\xd4\xac\xebv\xb8h\xd4TR"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    bytes_0 = b"\x80\xb2Xz\x10X\xdc\xeeH\x8a\x12\x18\xfd\x92\xa57\x1dJ"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    int_0 = 550
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    str_0 = 'H"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    str_0 = ".i"
    none_type_0 = None
    str_1 = ",Za'${v"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    float_0 = 4279.53189
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    str_0 = "U1\r-z"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    bytes_0 = b"W\xd8\xd4gr\x83I4\xf9\x97"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3305():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_3307():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3308():
    str_0 = "yy.0f]p*"
    list_0 = [str_0]
    list_1 = [list_0, list_0, list_0, str_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    str_0 = "^&3zED{"
    int_0 = -1458
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    int_0 = 494
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    float_0 = 1854.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bytes_0 = b"\xe1\x03\x03\xc0\xdfRy\xdb\xfc\x01Y\x81r\xf0;\\\xae?3\xbe"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    str_0 = "&uL=fPMKYTfx5^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    bytes_0 = b"\x1cp\xbf?"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    str_0 = ";\\-0,S>%7%@i`|&\x0bZ{f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    bytes_0 = b"\xeaT\xa0iI\xff\x97\xe3\x98\xd1\xee\xf2N\x95\xdbL\x9c"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    complex_0 = 53.5 - 2356.4305j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    int_0 = 2053
    list_0 = [int_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    str_0 = "ut2jz$8E\t6<Z2"
    module_0.get_new_command(str_0, str_0)


def test_case_3321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bytes_0 = b"e\xf6["
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    float_0 = 2653.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    bytes_0 = b"\xf7.\xe4\xd8\x13~h\x18\x12\x17\xb7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    complex_0 = 495 - 2786.96j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    set_0 = set()
    str_0 = "&|CKdy_3$Z"
    tuple_0 = (set_0, str_0)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    int_0 = 662
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    bytes_0 = b"\xeaz\x93\xa4\xef\x983\xa9\xb5!@\xe3\x89"
    float_0 = -807.43312
    tuple_0 = (bytes_0, float_0, float_0)
    list_0 = [tuple_0, tuple_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    str_0 = "qx>84%[L`\x0cqxgU$=Jy"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    float_0 = 1547.384471
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    list_0 = []
    str_0 = '=2*SQ<ad;P" )'
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    int_0 = -66
    int_1 = 1698
    list_0 = [int_0, int_0, int_0, int_1]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    float_0 = 561.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    float_0 = 1653.624528
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    str_0 = 'O!dO~>p]+[(J"2'
    float_0 = 3142.03
    str_1 = "f1L)z3\\=O/"
    float_1 = -3420.459
    dict_0 = {str_0: float_0, str_0: str_0, str_1: float_0, str_1: float_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    float_0 = 3212.78
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    tuple_0 = ()
    bool_0 = True
    list_0 = [tuple_0, bool_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3341():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3342():
    int_0 = 645
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    float_0 = -495.84
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    str_0 = "\t%8 "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    str_0 = "}>6[fxOvo/;Uq"
    set_0 = {str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_3347():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3348():
    str_0 = "(\t+-uP/]b1uknV"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    float_0 = 1614.1
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    bytes_0 = b"\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    bytes_0 = b"\xcdzA|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    int_0 = -4340
    module_0.match(int_0, int_0)


def test_case_3354():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3355():
    bytes_0 = b"\x92\xe0\x9e\x97\x16\t(\rI\xc3Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    str_0 = "+wnFH{-o10p0zw"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bytes_0 = b"\x97\xb0\xfb\x82.X\xd3nX\xcc\xaa^\xdc\xdf\xfe{s\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    int_0 = 1294
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bool_0: bool_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    complex_0 = 1068.549035 - 342.257207j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    int_0 = -907
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    complex_0 = 1138.5 + 1434.65196j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    bool_0 = True
    str_0 = ""
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    float_0 = 3338.420352
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    tuple_0 = (bool_1, bool_2, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    int_0 = 816
    str_0 = ">"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    complex_0 = 683.746712 + 2890.664687j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    float_0 = 473.61371
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    float_0 = -1291.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    bytes_0 = b"\x7f\xcc\xf2)\x0c\xf6\xaf\xb0]ZLxD\x04Z\xcf=Y;\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    float_0 = -995.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    complex_0 = 1014.56874 - 3343.87j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    complex_0 = 806.0301 - 1456.9583j
    bool_0 = False
    bool_1 = True
    tuple_0 = (complex_0, complex_0, bool_0, bool_1)
    dict_0 = {bool_1: complex_0}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    bytes_0 = b"\xc9FN\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    int_0 = 2108
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    int_0 = -204
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bytes_0 = b"\x0fV\xdd\xe4\xfaT."
    list_0 = [bytes_0]
    module_0.match(bytes_0, list_0)


def test_case_3381():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3382():
    none_type_0 = None
    list_0 = [none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    str_0 = "1Ad\\7rlu:Zn *O=vP{X3"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    str_0 = "m,wu@8{:"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    str_0 = "L\x0c=e$\x0bS0mM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    str_0 = ';+dMk"Ev\nc'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    str_0 = "0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bool_0 = False
    bytes_0 = b"u("
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    int_0 = 2287
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    bytes_0 = b"\xdeg&\x90\xcf7K!\xcb\x92"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    str_0 = ":=\x0bHEfW1=b"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    float_0 = 575.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    bytes_0 = b"\xfe@S&\xd0\x8f\xbf5S'\xc2t\xff\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    float_0 = 1179.34408
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    bytes_0 = b"S\xbd\x08\xad\x0c)\xde\x0cE#+\x0fu\x80\xb5\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    int_0 = 1625
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = False
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    int_0 = -4132
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = 1529
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    str_0 = ",2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    bytes_0 = b"\xd9@\x8a\xcd\xec\x85\x14\xc6xGx\xf8\x81\xb2\xe2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    int_0 = 206
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    bytes_0 = b"+\xf8\xdf\x15\x9eUm\xdcL\xd6\xb8\xc2\xd5\x80|"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    int_0 = -3074
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    int_0 = 2375
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bytes_0 = b"\x8d\x82MXT\xb5\x8ac\x03\x03@\xad\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    str_0 = "9z44.AGc~h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    bytes_0 = b"e\xf1\xfa\xac=\xac\xd4\xb7\x1f\x8e|"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    bool_0 = True
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    bytes_0 = b"\xb9\x00\x9bkQ\xe3l}\xa03\xeb\xf7\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    str_0 = "?W\x0b\t~K#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    int_0 = 1184
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    bytes_0 = b"\x82"
    str_0 = "-n{flpD"
    set_0 = {bytes_0, bytes_0, str_0, bytes_0}
    list_0 = [set_0, bytes_0, str_0, str_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    str_0 = "@05IL0V|W,_4+\x0cCeI"
    none_type_0 = None
    str_1 = "\\td;\tQ-Gg>[z"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    bytes_0 = b"\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    bytes_0 = b"\x1f\xad2\xfe\xe9\x9ca\xcc\xe5\xb0R\x9ee\xb5\xe7`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    int_0 = -428
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    int_0 = -411
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    str_0 = 'k*.V*vo^}Jrw6[W1"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    str_0 = "L]v4bDUXm%U1R("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    complex_0 = 663.08836 - 1472.925287j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    complex_0 = -2187.169684 + 766.053247j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    complex_0 = 1278.6 + 3520.723326j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    float_0 = 486.7975
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    dict_0 = {}
    bool_0 = True
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    bytes_0 = b'\xc9\x93(\xf1m5\x19\x81\xb2\xdck"\xc9\x0f_'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    int_0 = 2185
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    bytes_0 = b"\xe0<YpC\x9c\xc0"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    bytes_0 = b"\xa7W\xccQ\xebC\xe5\xc5\x9c\xba.yK5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    complex_0 = -1235.6 - 1933.7j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    str_0 = "/Nz-:T2Ghw"
    int_0 = -267
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    str_0 = "&:.*["
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    complex_0 = -3167.83024 - 386.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    int_0 = 2021
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    float_0 = 1643.872
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    none_type_0 = None
    int_0 = 1638
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    int_0 = 2259
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bytes_0 = b"v\xe9\x90\xe5o\xe5\xd0\xd4\x92\xeb\xcb\x95`4\x0c\xbd]\xb6\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    bool_0 = False
    tuple_0 = (bool_0,)
    float_0 = -1644.921
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    bytes_0 = b'\x83\xca\xcf"\xf6x?'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    str_0 = "*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    float_0 = -650.463
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    str_0 = "93Iio"
    bytes_0 = b'A"V\xdaN'
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    str_0 = "-6Jw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    float_0 = 6049.0
    tuple_0 = (float_0,)
    bool_0 = True
    bytes_0 = b"w\xa4\xc0e\xc0\x1f{-\xef"
    tuple_1 = (tuple_0, bool_0, float_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    int_0 = -867
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    str_0 = "+S;%.yIFX!,OP+K8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    bytes_0 = b"\x9b\x1dN"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    str_0 = "<Sb_5),p,\r'7Ii}"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    int_0 = -3276
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    str_0 = "XUIg=ZyZm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    float_0 = 943.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    int_0 = -1628
    int_1 = 1212
    tuple_0 = (int_0, int_1)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    bytes_0 = b"7\x06\xc5\x1e\x87\x8a|\xa9s\xda\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    float_0 = 2959.0719
    set_0 = {float_0, float_0}
    list_0 = [set_0, set_0, set_0]
    bytes_0 = b"\x16\x8dbO\xf3\x87\x08\x06\xa7\xeb\xdc\x16\xbc\xa4\xb8\xd5"
    str_0 = "+c|"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0, str_0)
    tuple_2 = (bytes_0, list_0, tuple_1)
    tuple_3 = (float_0, set_0, list_0, tuple_2)
    list_1 = [tuple_3, set_0, tuple_3]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    float_0 = 1915.06
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    str_0 = '"V,XF*%@7]r7I'
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    int_0 = -527
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    float_0 = 572.7878
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    int_0 = 773
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    float_0 = 366.532072
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3482():
    int_0 = -3884
    tuple_0 = (int_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    int_0 = -579
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    bool_0 = False
    float_0 = 276.77751
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bool_0 = True
    int_0 = -461
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    float_0 = 2093.816
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    int_0 = 1862
    str_0 = "^"
    module_0.match(int_0, str_0)


def test_case_3489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3490():
    float_0 = -2063.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    str_0 = "vr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    float_0 = -1458.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    str_0 = "VCl"
    complex_0 = 2587.81 + 6890.67j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    int_0 = -1553
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    bytes_0 = b"?%\xc1=E<\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    float_0 = 108.8
    module_0.get_new_command(float_0, float_0)


def test_case_3499():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3500():
    str_0 = "D"
    set_0 = {str_0, str_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    float_0 = 4187.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    list_0 = []
    tuple_0 = (list_0,)
    bytes_0 = b"\xae\x908\xec\xfb\x00\xc3T\xbb\x9f\xa1\x9cp#l@v\x91S"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    float_0 = 1563.7
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    complex_0 = -1146.1475 + 1731.952j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    bytes_0 = b"\xc8w\x87A\x16\x17:\x82t\x96\xfd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    int_0 = 900
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    int_0 = -864
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    int_0 = 1318
    bool_0 = True
    tuple_0 = (int_0, bool_0, bool_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    float_0 = 93.4252
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    str_0 = "brd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    complex_0 = 1276 + 263.563j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    int_0 = -121
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bool_0 = False
    bytes_0 = b"a"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    float_0 = -724.862368
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    int_0 = -2100
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    bytes_0 = b"9J"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    int_0 = -2477
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    int_0 = -3543
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    str_0 = "^nV#]aa@"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    str_0 = 'm"uJ>V/Asm'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    int_0 = 427
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    bool_0 = False
    bytes_0 = b"&\x16\xafZ\x82tki\xd7\xb9`\xa4\\1\x1ai"
    bool_1 = True
    tuple_0 = (bool_0, bytes_0, bool_1)
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    bytes_0 = b"\xc9v\xb6\xfd\xc5"
    str_0 = "[#"
    str_1 = "7'Q+>p54qB%,F#`;n:O4"
    str_2 = "y;^QXJ4F"
    dict_0 = {str_0: bytes_0, str_0: bytes_0, str_1: str_1, str_2: str_0}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    str_0 = "\nvOmU/"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    int_0 = 1705
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    int_0 = -669
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    int_0 = -2394
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    int_0 = 1669
    str_0 = "$Y/9rUvLDFR&P}."
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    str_0 = "N?O?'h)!"
    tuple_0 = ()
    list_0 = [str_0, str_0, str_0]
    complex_0 = 655.187 + 285.783774j
    tuple_1 = (str_0, tuple_0, list_0, complex_0)
    list_1 = [tuple_1, str_0, list_0, str_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    int_0 = -5004
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    complex_0 = 2254.16081 + 645.22j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    float_0 = 582.10739
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    int_0 = 1025
    bool_0 = True
    bytes_0 = b"\xdfyS=\xb2\xebok,\xef9\xe8\xfe\x8f(|\xf6s"
    tuple_0 = (bool_0, bytes_0)
    tuple_1 = (int_0, tuple_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    str_0 = "/^K4ihxT/&-td\nk*{d><"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    str_0 = "+'f%y`v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    str_0 = "z(Zp\x0b]y{nqKNo8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    str_0 = ":\x0c{O9cu_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    float_0 = -3386.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    complex_0 = 738 - 3283.788j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    str_0 = "LaJ\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bytes_0 = b"E\x9ai\xc8\xc4\xdf\xc2\x97\xe8\x92\xbeY\x85Ev\xd8\x04"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    bytes_0 = b"\x85\x0e\xa1"
    module_0.match(bytes_0, bytes_0)


def test_case_3550():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3551():
    str_0 = "+<nR}#M\t8\r\\Kcls"
    bytes_0 = b"\xf1"
    set_0 = {str_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    str_0 = "iVb`b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = -2453
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    bytes_0 = b"\xa3t\xe3]\xa1#\r\xb8\xf6c\x85\xd2$j\xd6\xce\xabX\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    int_0 = 1091
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    bytes_0 = b"\x89\x8d\x1a"
    bool_0 = False
    list_0 = [bytes_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    int_0 = -2070
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    bytes_0 = b"8\x0fz\xd26\xabV\xd7a`\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    int_0 = 587
    list_0 = [int_0, int_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    bytes_0 = b"\xf3\xabT\xba\xc2\xfcA\x97-\x15ey\x1bU_\x1b\xd4;$V"
    module_0.match(bytes_0, bytes_0)


def test_case_3562():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3563():
    str_0 = "i6I.V9n-aNGY vf$m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    str_0 = "pk5^oaNR"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    int_0 = -1960
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    int_0 = 2356
    bool_0 = False
    int_1 = -2705
    tuple_0 = (int_0, bool_0, int_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    str_0 = "i`g,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    str_0 = "ZQZ%G"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bytes_0 = b"kwF\x1f\x8e\xdf\xa0\x19\x03\xea\x8e\n\xe5\x95\xab\x06N\x17\xf8\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bytes_0 = b"\x08\x8a\xc1\xbf\x81\xf2\xfa\xact\x8c\xdc\x8f.\x13Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    float_0 = 2233.0403
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    str_0 = "X"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    str_0 = "h\tt<(u&8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    int_0 = -202
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    int_0 = 3480
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    float_0 = -616.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    int_0 = 3195
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    float_0 = 1596.627
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    str_0 = "L[/M"
    float_0 = 2559.913
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    int_0 = 3645
    module_0.match(int_0, int_0)


def test_case_3586():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3587():
    float_0 = 462.15271
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    int_0 = 2129
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    bytes_0 = b"\x8dsAD\x10\xbb\xdb{\xbfS\x10(P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    bytes_0 = b"D\x10#}\xbd\xc5\x96\xb6"
    list_0 = []
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    str_0 = "B\x0c:dtXMZN5~&&V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    complex_0 = -2841 - 1144.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    str_0 = "8TgVl"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    int_0 = -1852
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    str_0 = "/1{>*9B \tIo"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    complex_0 = -2682.14 + 451.64j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    bytes_0 = b"+tu\xdb\xe8\xb0\x00\xd8\x9a\xc1\x13"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    str_0 = "u7\t|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bytes_0 = b"\xff\xd4\x8c5.s\xe7\xa7A>"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_3603():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3604():
    bytes_0 = b"F\x8c\xa6\x98`\x00K`\xc1/1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    bytes_0 = b"\x864\x86\x8f\xb8\xdb\xfd-R\xb0\xb24\xfa "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    str_0 = "\nmW\r%yQ%KGPc<w8)lV?U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    bytes_0 = b"$[\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    str_0 = '}}Jis"jW3##\'70"z-'
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bytes_0 = b"\xa9\xec\x9e(\x1a\xab\xb04\xea"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    bytes_0 = b"\xc6\xeb\xd7S\x9bU\xba@\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    str_0 = "}mtu? "
    none_type_0 = None
    str_1 = "_]"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    int_0 = -106
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    int_0 = 1051
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bool_0 = True
    str_0 = "Q)ty# .K@\\"
    tuple_0 = (bool_0, str_0)
    tuple_1 = (tuple_0, bool_0)
    module_1.object(**tuple_1)


def test_case_3617():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3618():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    complex_0 = 1486.012 - 3316.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    int_0 = -1064
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    none_type_0 = None
    int_0 = 2731
    module_0.get_new_command(none_type_0, int_0)


def test_case_3623():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3624():
    bytes_0 = b"\r\x7f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    str_0 = "#uJ?F:v^odIjFFp[5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3627():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3628():
    float_0 = -2077.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    str_0 = "x8'>G.Fpc+fzG<o"
    bool_0 = False
    list_0 = []
    tuple_0 = (str_0, bool_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    bytes_0 = b"\x00I\xde<\xa6\x7f\x0f\xd3\xe7\xec4&\x82\xea\xed\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    bytes_0 = b"K\x12\xce!\xe1\xca\xa3\x0c$D\x82\xc2\xaa\x1a\xc2f?\x15"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    int_0 = 3032
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    int_0 = 2722
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    complex_0 = -1633.578928 - 156.238709j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    bytes_0 = b"\xd8\xed\xe2\xb3\x0cy\xbb\x1c\xbd*\xfdY]\xb1\xc0\xd5p#\xf3\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    str_0 = ".%Y!j^!}Oy( hKxh-?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    int_0 = 401
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    float_0 = -3109.05
    module_1.object(*float_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    float_0 = -1661.0954
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    str_0 = "U^iH ISFeF9fnY\t;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    str_0 = "E +^wT$&`B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    bytes_0 = b"\x80\x16#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    str_0 = "zt.%F)u"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    int_0 = -1031
    tuple_1 = (bool_0, tuple_0, int_0, bool_0)
    dict_1 = {}
    list_0 = [tuple_1, dict_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    float_0 = 1226.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    bytes_0 = b"\x07"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    str_0 = "RC-XJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: object_0, object_0: object_0, bool_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    int_0 = -773
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    str_0 = "EgZV<\nw2fk.]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    int_0 = -639
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    bytes_0 = b"\xb0\xe8\xe5U\x8f\xdc\x9e^`\x19\x00\xd5e\xd4S"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    str_0 = "^ENc2QOX{2CfBEUgxYx"
    tuple_0 = (dict_0, bool_1, bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    bool_0 = False
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = ""
    int_0 = -2460
    str_1 = "U|lD%q5ux'76Sk"
    dict_0 = {str_0: int_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    bytes_0 = b"\x1c\x8d\x96\x82\x05\xfa\xabN-\xa0\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    bool_0 = True
    bool_1 = False
    dict_0 = {}
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_1: dict_0}
    module_0.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    str_0 = "Od"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = False
    int_0 = 1197
    tuple_1 = (tuple_0, bool_1, tuple_0, int_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0, list_0, list_0, object_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    set_0 = set()
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_3673():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3674():
    str_0 = "B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    dict_0 = {}
    str_0 = ""
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bool_0 = False
    dict_1 = {object_0: dict_0, object_0: dict_0, object_0: bool_0}
    module_0.get_new_command(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    complex_0 = 484.73225 + 1535.062j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    str_0 = "r!;6}WV+G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    bytes_0 = b"#\xf6\xbf\x19\x84\x88x\xe6)\xdfci\xb7\x8c;q"
    int_0 = 830
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    str_0 = "t=5m!\x0bsMD+U"
    str_1 = "sp.^8#\\$"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: str_1, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    int_0 = -932
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    str_0 = "3oC58x\x0bAN\r/"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    float_0 = -1861.53
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    int_0 = 4814
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    int_0 = 153
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    int_0 = 3390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    float_0 = -2476.55927
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    float_0 = 2582.18
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    bytes_0 = b"\x01Y\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    object_0 = module_1.object()
    int_0 = 1632
    dict_0 = {object_0: object_0, object_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


def test_case_3694():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3695():
    str_0 = "yc;x@=r/HzE2A}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    str_0 = "O\x0c8r;:_l#P&m`[7q"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    set_0 = set()
    list_0 = [set_0]
    float_0 = -2106.0
    tuple_0 = (list_0, list_0, float_0, list_0)
    tuple_1 = (set_0, tuple_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    float_0 = -488.715
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    int_0 = -3193
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    float_0 = 1178.7641
    bytes_0 = b"B"
    tuple_0 = (float_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    float_0 = 279.562
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    str_0 = "y7X\neK\t.]=2CrN"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    float_0 = -2886.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    bytes_0 = b"\xd3lWrA;\x8a\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0, set_0]
    bytes_0 = b'\xac\xb0"d\ny\xf0\xe4s\xa9j\xfb/k\x0f!\xed'
    tuple_0 = (set_0, list_0, bytes_0, set_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    float_0 = -1941.888884
    set_0 = {float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    bytes_0 = b"\xb6\xff\x8fy~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    int_0 = 919
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    float_0 = 4486.746
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    str_0 = "HPs!9KL}N!"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    int_0 = 1121
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    str_0 = "}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0, bool_0: tuple_0, tuple_0: bool_0}
    bool_1 = False
    bytes_0 = b"\r\x01\x8avcv\xf3A\xd9*\x07\x9f\x8b\x8d\x86B"
    tuple_1 = (bytes_0,)
    tuple_2 = (dict_0, bool_0, bool_1, tuple_1)
    bool_2 = True
    tuple_3 = (tuple_2, dict_0, bool_2)
    bytes_1 = b"\xc1"
    tuple_4 = (tuple_3, bool_0, bytes_1)
    module_0.match(tuple_4, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    int_0 = -642
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    bytes_0 = b""
    int_0 = 901
    dict_0 = {bytes_0: bytes_0, int_0: int_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    bytes_0 = b"\xfc\x1c16\xc4W,e3\x05}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    bool_0 = False
    object_0 = module_1.object()
    dict_0 = {bool_0: object_0}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    str_0 = "[]5*^iQ!50F~u|"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    bytes_0 = b"2\x99?\x05\xb0\xc0+\xde~)\xdb^\xba\x9ah\xa6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    str_0 = "]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    bytes_0 = b'\xd1"|'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    str_0 = "3\nc*?{OU8yl\t8P:aQ%|p"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_3724():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3725():
    bytes_0 = b"\x1b\xbde\x15\xe0\xcar\x1edflzA"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    int_0 = -4765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bytes_0 = b"*\xa3\x7f\x93\xf9_"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    str_0 = "YRG\rRU\\*Af\n|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    bytes_0 = b"e\xb4\xd4\xe1\xcb:g\xe6\xc3\xf3\xe2\xa0Kr*P\r\x05#\x8a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    int_0 = -596
    module_0.match(int_0, int_0)


def test_case_3731():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3732():
    int_0 = -1640
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    bytes_0 = b"L\xde\xec\xb8Y\xbdD\xe5h"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bytes_0 = b"L\xd1\xec\x88P\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    complex_0 = -2096 - 681j
    bytes_0 = b"\xc9\xb0'K"
    module_0.match(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    str_0 = "Y7#r[}Fy=&J*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    str_0 = ":"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    str_0 = "X(-hiU4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    float_0 = -1424.44
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    str_0 = ']\rUr)=f\r.%sr6\x0b"\x0b/;'
    module_0.match(str_0, str_0)


def test_case_3742():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3743():
    str_0 = "XX'8!a}+1ZVn,q',qvG("
    set_0 = {str_0, str_0, str_0, str_0}
    float_0 = 3683.1
    bool_0 = False
    list_0 = []
    tuple_0 = (list_0,)
    tuple_1 = (float_0, bool_0, tuple_0)
    tuple_2 = (str_0, set_0, tuple_1, list_0)
    module_0.get_new_command(tuple_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    str_0 = "j="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    int_0 = 2101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    int_0 = 2609
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    float_0 = 893.10872
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    int_0 = 338
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    str_0 = "4XYpcUPwYi:[.@R+iI08"
    tuple_0 = ()
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    int_0 = -2244
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    float_0 = -3763.878232
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    bytes_0 = b"\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    str_0 = "WrLpz#7(\r;o>m<"
    none_type_0 = None
    str_1 = ""
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    int_0 = 914
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    str_0 = 'Nr".F#:/\x0cwxsD(t'
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0, set_0]
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    bytes_0 = b"\x01\xe0\xfc\xf2\xd9\x0b\x8dP\x16\xb9r\x01\x87\xa8\x89"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    bytes_0 = b"lU\xcb\x8b\xd6\x97O\xfd\xcb\xc2q\xe2\x89a\xf1\xc9\x88"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    bytes_0 = b"\x92\x8b_\x8eg\xc6\\\x02\xb5xD"
    module_0.match(bytes_0, bytes_0)


def test_case_3761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3762():
    float_0 = 155.970438
    set_0 = {float_0, float_0}
    int_0 = 1379
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    str_0 = "\x0c)v<pk(3oiy'(Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    complex_0 = 1474.93392 - 206.13j
    str_0 = "8MFgcV["
    complex_1 = -4257.1 - 1326.792j
    bool_0 = True
    tuple_0 = (complex_1, bool_0)
    complex_2 = 1040 + 2405j
    tuple_1 = (tuple_0, complex_2)
    tuple_2 = (complex_0, str_0, tuple_1)
    list_0 = [complex_1]
    tuple_3 = (complex_0, tuple_2, list_0)
    module_0.get_new_command(tuple_3, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    int_0 = -1173
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    bytes_0 = b"x\x82\x8c\xac\xed\x96d:_\xfb\xad\xbe\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    bool_0 = True
    bytes_0 = b"\xa9\xc0\xc2\xeey\x85\x81="
    tuple_0 = (bool_0, bytes_0)
    bool_1 = False
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    bytes_0 = b"\xa2\xe8Cy\xab\xbb\x89?\xef\xefI\xb5\xbf\x17\xe1YZ"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    int_0 = 3888
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    str_0 = "S,#>RcSM2*8"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    str_0 = "=(YVR"
    bytes_0 = b""
    list_0 = [str_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    int_0 = 2905
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    str_0 = "vCbZ^6=f"
    module_0.get_new_command(str_0, str_0)


def test_case_3776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3777():
    bytes_0 = b"\xfa=Z\x8b\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    bytes_0 = b"\xf7\x17z6\x10\xc1\x90\x8a\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    str_0 = "T\\Va\nl,R]w--%riG\\\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    str_0 = "3h82"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    str_0 = "-!/#gR?@'g,&TM"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    int_0 = 125
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    bool_0 = False
    complex_0 = 632 - 2294.967414j
    int_0 = -548
    tuple_0 = (complex_0, bool_0, int_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    float_0 = 278.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    bytes_0 = b"\xd1Aa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    int_0 = -2164
    int_1 = 14
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_3790():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3791():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    float_0 = 6779.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    int_0 = 1070
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    dict_0 = {object_0: object_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: object_0}
    int_0 = 968
    module_0.match(dict_0, int_0)


def test_case_3796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3797():
    str_0 = "@:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    int_0 = 1935
    bool_0 = True
    set_0 = {int_0, bool_0}
    tuple_0 = (int_0, int_0, set_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    int_0 = 1996
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    int_0 = -1760
    int_1 = -1063
    list_0 = [int_0, int_0, int_1]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    int_0 = 1741
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    int_0 = 2159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    bytes_0 = b"\xbdP\x88a\xfa'\x06\x1a!\x9b\x0b"
    int_0 = -370
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    str_0 = "}}\\G0p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    int_0 = 912
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    complex_0 = -727.6 + 133.622j
    bytes_0 = b"\x14\xea"
    tuple_0 = (complex_0, bytes_0)
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    int_0 = -3837
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    complex_0 = -454.3028 + 407.027j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    str_0 = "*$*Oh$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    float_0 = 1873.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    bytes_0 = b"Y\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    int_0 = -2059
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    int_0 = -541
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    bytes_0 = b"P\x87\x9fPN\xf62\xc8W\x1fU\x07\xf6}\xa7\x10\x10~"
    int_0 = -431
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    bytes_0 = b"\ro:['E\x804}1c\xc9\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    float_0 = 1205.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    bytes_0 = b"7)'\x1c\xb5\xe2\xd4wEg\\\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    str_0 = "3kmSOn9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    bytes_0 = b"\xb5\x8fS\xb2,\xcd\xfc\xe3\x02e\xbe\xf3\x99\xe5\xdf\xcd\xb6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bytes_0 = b"\x83L\xb8\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    bytes_0 = b"}9l28"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    bytes_0 = b"q\xe5\xfe\xac\xb0\x16\x1a"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    int_0 = 3577
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    complex_0 = 364 - 2732.843j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    bool_0 = True
    str_0 = "bIZysom"
    dict_0 = {bool_0: bool_0, str_0: bool_0, str_0: bool_0, bool_0: str_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    str_0 = "l"
    complex_0 = 1306.395 - 1112.53529j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    str_0 = "uw'WJm[g6NLR(\tm"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    int_0 = 877
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    int_0 = 2544
    set_0 = {int_0}
    bool_0 = True
    float_0 = -344.6
    dict_0 = {bool_0: set_0, bool_0: float_0}
    tuple_0 = (int_0, set_0, dict_0)
    bool_1 = True
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    bytes_0 = b"T\xdfP\x06\xef\xe5\xcc\xde\xfcv "
    module_0.match(bytes_0, bytes_0)


def test_case_3838():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3839():
    bool_0 = True
    str_0 = "@bby`T]\x0cgdj/F"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


def test_case_3841():
    pass


def test_case_3842():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3843():
    int_0 = 60
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    list_0 = [dict_0, dict_0, bool_1, bool_1]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    str_0 = "?>l1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    int_0 = -3145
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    object_0 = module_1.object()
    bool_0 = False
    set_0 = {object_0, bool_0, object_0, bool_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    str_0 = "+.6uf/|m^,=R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    float_0 = 72.89758
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    bytes_0 = b">\x0c\xa7\xdc*/(R\x922U\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    int_0 = -203
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    str_0 = '2Egy9\x0bQ]z]/6"Q\rN3B5'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    float_0 = -491.0984
    set_0 = {float_0, float_0}
    tuple_0 = (float_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    str_0 = "uahh]-/\\"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    int_0 = -415
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    bytes_0 = b"\xab\x12\xbfUB\xa9&\xfe\xd0\x18\xd23Y\xf8"
    int_0 = 3003
    float_0 = -1186.0
    set_0 = {float_0, bytes_0}
    tuple_0 = (bytes_0, int_0, set_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    int_0 = 56
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    int_0 = -6310
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    str_0 = "f(gn ,JWN6F4 "
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    float_0 = 3067.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    int_0 = -1416
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    int_0 = -2574
    tuple_0 = (int_0, int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    float_0 = 3501.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    int_0 = 36
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    str_0 = '(N;Cz<]"\rQ\\yD'
    int_0 = 895
    tuple_0 = (str_0, str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    object_0 = module_1.object()
    list_0 = []
    dict_0 = {object_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_3872():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3873():
    bytes_0 = b"!\xf51@\xac\xd8!g\x0b\x985\x9dTYG\x9fXC$\xda"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    int_0 = 2411
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    complex_0 = -298.06894 + 1594.55j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    bytes_0 = b"@lQ!O,D\xbb\xdc"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    str_0 = "<\tcIG \rv+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    int_0 = -3595
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    bytes_0 = b"C"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    int_0 = -2646
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    str_0 = "<481sfh3"
    str_1 = "T=$.&$&bo7E[Bn'UE^2"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    int_0 = 198
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    bytes_0 = b"\xd2H\xda\xa3\xebw"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bytes_0 = b"\xb0\xb3\x7f]\x19\xb9\xc8\x0b\x9cs>\x9a\n\x83\x06W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    float_0 = -690.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    str_0 = "y]*f^Yby8\n|p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    bool_0 = True
    str_0 = "Y\nbdif"
    list_0 = []
    list_1 = [bool_0, str_0, list_0]
    tuple_0 = (list_1, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    int_0 = 1404
    tuple_0 = (int_0,)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    object_0 = module_1.object()
    list_0 = [object_0]
    str_0 = "6[Oxm+Cm-\n<TmWVA"
    str_1 = "%2W5VcI"
    dict_0 = {str_0: object_0, str_1: object_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    int_0 = 684
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bool_0 = False
    str_0 = "gq\t_PG\r,@l>Ss}VUi!"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    str_0 = "#Zu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    bytes_0 = b"AM"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    int_0 = 2444
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bytes_0 = b"\x95IfA\xb2D\xd0\xa5t\xe8\x16\xd9.5N-\x00\xa3"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    int_0 = 680
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    bytes_0 = b"\xb2\xf6)\xda\xf0M\x90\xf0\xfd~2c\x1e~(\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3902():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3903():
    int_0 = 1897
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    none_type_0 = None
    bytes_0 = b"\xea\x8ci\x89)\xd1qX\xd0-\x1e\x94"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    str_0 = "F{K+N!\rwDeOc#a&kD/"
    list_0 = [str_0, str_0, str_0, str_0]
    set_0 = {str_0, str_0}
    bool_0 = False
    tuple_0 = (list_0, set_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    float_0 = 2152.469
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    bool_0 = False
    int_0 = -3626
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    str_0 = "h\r5^SStC!EV&P"
    module_0.match(str_0, str_0)


def test_case_3910():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3911():
    str_0 = "k15"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    str_0 = "Fb;mz@|iW&>tuEL,"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    str_0 = "qad\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    bytes_0 = b"\xd3J\xa9w\x11\\\x8b\xfc\xff8\xef|3\xad \x99\t.\x88<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_3916():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3917():
    str_0 = "D(|\rBG"
    tuple_0 = (str_0,)
    tuple_1 = ()
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    str_0 = 'ea"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    str_0 = "pH!OeD/::?3W$U[Hdk\x0cx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    bytes_0 = b" \xb9\xad\xc9R\xb0O\x1f\x17\xa4h\xfc\x94\xf7\xf9\xc9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    float_0 = -948.462
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    bytes_0 = b"\xdbx\xe9~}w\xf6f{H\xe9M\xdd\x8f_\xfd\xb4:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    float_0 = -384.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    bool_0 = False
    bytes_0 = b"\x14\xd4\xeaq?u\x04\n"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bytes_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    bytes_0 = b'\x8f\xc3%\x93]\xa3\xae\x92"\x96'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    bytes_0 = b"Y\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    int_0 = -102
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3928():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3929():
    bytes_0 = b"\xce\x04-\x0e\xb8\x06\xb5%LN\xec{\xd7\x05\x0c"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    bytes_0 = b"\xa1\xa7\x08\xfc\xde\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    str_0 = "2BP~0Nyg\n.v-J/&f\n[%:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    str_0 = "]\x0bvgr<>#8<I"
    int_0 = -2867
    set_0 = {str_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    dict_0 = {}
    float_0 = -3290.0
    list_0 = [float_0, dict_0, float_0, dict_0]
    bool_0 = False
    tuple_0 = (dict_0, float_0, list_0, bool_0)
    module_0.match(tuple_0, list_0)


def test_case_3934():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3935():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    complex_0 = 1012.583 + 2056.1j
    list_0 = [complex_0, complex_0]
    list_1 = [list_0]
    list_2 = [list_1]
    module_1.object(*list_2)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    str_0 = "C+F]"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    float_0 = 1278.6831
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    str_0 = "W,3!Gvx(soJINq>I(d\x0by"
    list_0 = [str_0, str_0, str_0, str_0]
    object_0 = module_1.object()
    int_0 = -2501
    tuple_0 = (list_0, object_0, int_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    float_0 = 2277.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    bytes_0 = b"\xc2\xa6\xe3\xfcf\x86\xe2\xf7Q\x1f\x19\x92\xcf\xd64\xdb\x86\x88"
    set_0 = {bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    int_0 = -95
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    str_0 = "t<T:K<E*l"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    bytes_0 = b"\xadR\x92\x0c\xad\x16\x02c8<D\x8ae\xe9\x10"
    module_1.object(*bytes_0)


def test_case_3947():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3948():
    bytes_0 = b'\x99\xaah\xed\xd3"\x90\xd7'
    bytes_1 = b"\xc4\xc1\xa4\xf1\x85s\x84u\xab\xbe\xd8jN\x92"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bytes_0 = b"\x1b\xb8(,l\x12\xdf\xcf\x8f\xf0\xe9E"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    str_0 = "6GZa\\'^d"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    str_0 = ",_z,gg"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    str_0 = ":l{dQ!9z*5';KR\x0c_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    bytes_0 = b"\xc6\xbb\xcc\x8b\xaf\xb2>H\x96\x8a\x93q%\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    int_0 = 2476
    set_0 = {int_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    int_0 = 3780
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    int_0 = -905
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    str_0 = 'd"sH2\tDg'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    bool_0 = False
    str_0 = "T,"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    str_0 = "G#3'FS6\tQ2FqnI%\n"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    bytes_0 = b"\xa7N\xa9\xb3\x8e[Z\xa5\x1c\xcfL\xc6k\xff"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = -846.799189
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    bytes_0 = b"\xb8\xf7s\xfe\xcf\x06\x9b\xb6z\xbf<iC\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    float_0 = 877.351
    str_0 = 'pT<RCW"F'
    set_0 = {str_0, float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    str_0 = "Q\x0b'-rvd\x0b&W|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    int_0 = 91
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    str_0 = "ueP|S+!h5E9UlMXY\x0cj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    str_0 = "X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    tuple_0 = ()
    bool_0 = False
    dict_0 = {tuple_0: tuple_0, tuple_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_3971():
    pass


def test_case_3972():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3973():
    int_0 = -2968
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


def test_case_3974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3975():
    float_0 = -1607.6728
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    tuple_1 = (tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    str_0 = 'u8`)jn+{]g\rd:(N?z"B4'
    str_1 = "+X',i"
    str_2 = "X26[C"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bool_0 = True
    int_0 = -3679
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    int_0 = 2743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    int_0 = -1069
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    bool_0 = False
    str_0 = "L\\*2/7Yav`p)"
    bool_1 = False
    tuple_0 = (bool_0, str_0, bool_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    bytes_0 = b"N)/}\xc9[\xcaG"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    str_0 = "S83Y,$~zuXp0_7ql"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    float_0 = -930.827073
    list_0 = [float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    int_0 = 635
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    int_0 = 2659
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    int_0 = -610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    int_0 = 3380
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


def test_case_3992():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3993():
    bytes_0 = b"+\x18Y\xe1@_\x80\x1f\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    float_0 = -2368.02
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    int_0 = 5022
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    str_0 = "OkQ="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    bytes_0 = b"ZR"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    complex_0 = 5161.8767 + 1135.86926j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    float_0 = 663.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    float_0 = -3227.91
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    int_0 = -550
    bytes_0 = b"\x84e\xc6K"
    bool_0 = False
    tuple_0 = (int_0, bytes_0, bool_0, int_0)
    int_1 = -444
    module_0.match(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    bytes_0 = b"\xe9\x0b\x16\xcc\xd7W\xf4"
    str_0 = "Wj1RdDlGfX:\n"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    int_0 = -2810
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    str_0 = "447h[_&6HE@K8$"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    int_0 = -2233
    module_0.match(int_0, int_0)


def test_case_4009():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4010():
    int_0 = 1249
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    bool_0 = False
    str_0 = "I*l#.Km(\naR"
    set_0 = {str_0, str_0}
    tuple_0 = (bool_0, str_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    float_0 = -2129.622779
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    int_0 = 4052
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0, int_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    int_0 = 3137
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    int_0 = 254
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    bytes_0 = b"H\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    bytes_0 = b"n\t\x11\x9bC\xdd]c\x19_\xc5D\xb8V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    int_0 = -943
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    complex_0 = 647.079 + 2245j
    str_0 = ";/Dko*?\x0cKI'/;3,/B5V"
    tuple_0 = (complex_0, str_0, complex_0, str_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    bytes_0 = b"\xb4\xe4\x85\xd6r\x18\x9fj\xfe\x9b\x8b\xad\xcb[r\xb2\xb3\xca\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    float_0 = 1190.52
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    float_0 = -1241.2889
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    bytes_0 = b",G\xcb\x13\xdb\xa6\x1aP\x0f\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    int_0 = -1796
    bytes_0 = b"\xdc\xfc\xb4hu\xc3\x17\xd4-\xc0"
    set_0 = {int_0, int_0, bytes_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    int_0 = -2903
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    int_0 = -1272
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    int_0 = 5486
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    int_0 = 332
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    int_0 = -481
    module_0.match(int_0, int_0)


def test_case_4032():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4033():
    bytes_0 = b"\x1d\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    int_0 = -1910
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    int_0 = -193
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    int_0 = -355
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    complex_0 = -4847.085 + 245.06678j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    bytes_0 = b"\xe0\xa0R\x83_g\xc4\xd2\x18\x92cA\x0bMlL\xc2\x06\xbc\x8f"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_4040():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4041():
    bytes_0 = b"\x99ZtP\xc5\xcf\xb8[/)\xce\tX\xbf\xbd)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    int_0 = 2006
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    int_0 = 2293
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    int_0 = -3176
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    bytes_0 = b"B"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4049():
    pass


def test_case_4050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4051():
    bool_0 = False
    int_0 = -868
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bytes_0 = b"\x12("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    float_0 = -2025.5
    module_0.match(float_0, float_0)


def test_case_4054():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4055():
    int_0 = 260
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    complex_0 = -2636.93 + 1560.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    str_0 = "0H.I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    float_0 = -2428.09
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    bool_0 = True
    int_0 = 4253
    tuple_0 = (bool_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    int_0 = 1279
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    bool_0 = False
    int_0 = 1548
    tuple_0 = (bool_0, int_0)
    int_1 = 3046
    module_0.match(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bool_0 = True
    int_0 = 2821
    set_0 = {bool_0, bool_0, int_0}
    str_0 = "BO}7whO>xx&G"
    tuple_0 = (bool_0, set_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    bytes_0 = b"h\x8dL\xaed\xcc\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    int_0 = -2929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    float_0 = -5230.0978
    module_0.get_new_command(float_0, float_0)


def test_case_4068():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4069():
    none_type_0 = None
    float_0 = -1574.680976
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    int_0 = -114
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    int_0 = -463
    module_0.get_new_command(int_0, int_0)


def test_case_4072():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4073():
    bytes_0 = b"\x07\x06\x0f\xb0\x81[\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    str_0 = "#Fy?N$gM;iPS:g\tR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    str_0 = 'S7c-<r"3~d5s -\x0c;6m'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    float_0 = -1125.9
    set_0 = {float_0, float_0, float_0}
    bool_0 = False
    str_0 = "|@j}&)8{\\J\\&`%pM"
    tuple_0 = (set_0, bool_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    int_0 = 2443
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    float_0 = 387.84941
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    int_0 = 8
    bool_0 = False
    list_0 = [int_0, bool_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    str_0 = 'Q<JV="s'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    int_0 = 2794
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    tuple_0 = ()
    str_0 = ".<bAN|`8$;2e"
    tuple_1 = (tuple_0, tuple_0, str_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    int_0 = 3160
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    float_0 = -2146.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    float_0 = -2596.06
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    complex_0 = -705.3 + 882.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    int_0 = 961
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    bytes_0 = b"6\xda&\xf7g\xb7*\xd6hG\x199R&\xbf\xc4"
    str_0 = "uZ&"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    int_0 = -2065
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    int_0 = 2891
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    int_0 = 1708
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, int_0, int_0, set_0]
    str_0 = "ZS"
    bool_0 = True
    tuple_0 = (set_0, list_0, str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    str_0 = "'a\nb=xtr5e'9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    bytes_0 = b"\xe1O\xb2\t\xb55k"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4099():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4100():
    int_0 = -1787
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\x16\x08f\xe9\x0f\xd2\t\x9fRT"
    tuple_0 = (bool_0, set_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    str_0 = "A&X7+\tD\x0c1<K`=F1M~'\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    str_0 = "Ib)SfX^g/qby\x0cH3Z<"
    module_0.get_new_command(str_0, str_0)


def test_case_4104():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4105():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    int_0 = -2215
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    bytes_0 = b"\xb0\xb5Y\xd5\x8a\xf3=\x10A\x8e\x83\xd8\x92\xfa\x8a\x96"
    bytes_1 = b"\x85\x88\x0e\xccA\x05\xae\xb0\x103\xa7\x9ao\xa7\xd4jM"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    int_0 = -1901
    module_0.match(int_0, int_0)


def test_case_4109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4110():
    float_0 = 3771.20744
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    bytes_0 = b"!/\xe28\xa8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    bytes_0 = b">\x81v\x82&"
    bytes_1 = b"o\x0b~[\xda\x86\x11o\xc2"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_1]
    module_0.match(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    float_0 = 924.59332
    set_0 = {float_0}
    bytes_0 = b"\xb9\x94\xa0\x0c"
    bytes_1 = b"\xa7*\x1b\x9f\x08\x02\xcb\xcb!8$\xe2\x8dQN"
    int_0 = -536
    list_0 = [float_0, int_0, set_0, bytes_0]
    module_1.object(*list_0, **bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    int_0 = 3769
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    str_0 = "4d\x0c:W P\r\x0b2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    int_0 = -2552
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bool_0 = True
    float_0 = 1394.745
    set_0 = {float_0}
    list_0 = [bool_0, bool_0, set_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    int_0 = 471
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    int_0 = 1422
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    str_0 = 'm`1UT\tC"VG'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    str_0 = "2O`qU|PhHn/#%-$"
    bool_0 = False
    tuple_0 = (str_0, bool_0, str_0)
    int_0 = 571
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    int_0 = 518
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    int_0 = -196
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bool_0 = False
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0, bool_0)
    bytes_1 = b"%2]`\x9e\x13\xa0"
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bytes_0 = b"\x0c\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    str_0 = "'.3A<#{~rP"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    str_0 = "g;uEgUK92\t\\wuMV:y}u~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    str_0 = "];!\x0c&4G+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    float_0 = 2412.058
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    float_0 = -1896.542
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    str_0 = "3TN#\x0b!t=fc2YtE"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    bytes_0 = b"\xa4.\xde\xf8i\x80]\xf7\xfd\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    bytes_0 = b"7\x0e\x8dc\x9e\x8d"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bytes_0 = b"V"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bytes_0 = b"\xb1M.\xb7\xd1\xd0\xcf\x95\xb6\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    float_0 = -221.291
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    str_0 = "g]@`"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    float_0 = -2870.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    float_0 = 1689.4417
    module_0.get_new_command(float_0, float_0)


def test_case_4144():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4145():
    str_0 = "<Lw[V=bVW\x0czRD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    int_0 = 3389
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    int_0 = -508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    dict_0 = {}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    bool_0 = False
    int_0 = -2704
    dict_0 = {int_0: int_0, bool_0: int_0}
    bool_1 = True
    str_0 = "1XEuKq\x0bv%|\x0b/}Z)0;"
    list_0 = [bool_0]
    tuple_0 = (dict_0, bool_1, str_0, list_0)
    tuple_1 = (bool_0, int_0, tuple_0)
    list_1 = [tuple_1]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    bytes_0 = b'\xaf\xfc\xa8\x8f\xcf\xc3\xd4\xccA^"`&Gl\x04n\xeb'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    int_0 = 23
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    float_0 = 1232.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    bytes_0 = b"a\x82;\x05\xa4"
    set_0 = {bytes_0, bytes_0, bytes_0}
    int_0 = 514
    tuple_0 = (set_0, set_0, int_0)
    str_0 = "lIF|\t\tqjy7iz/^fd2U+"
    tuple_1 = (set_0, set_0, tuple_0, str_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    bytes_0 = b"\x92K\x0c\xf2=\xa8\xce5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    int_0 = 567
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = ""
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    none_type_0 = None
    int_0 = 2777
    set_0 = {none_type_0, none_type_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    bytes_0 = b"\xe2\xd4\x12\xe7\xf1\x87\xdf.\x97\xe7+\xabN%dH\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    list_0 = []
    int_0 = -1699
    module_0.match(list_0, int_0)


def test_case_4163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4164():
    int_0 = -2101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    bytes_0 = b'1\x8cf\x88\xed"\x9f7u\xe7\x9a;'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    str_0 = "9lJeyEqL/+\x0blL=1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    str_0 = "x*Pb>*wAIG(~\nx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bytes_0 = b"\xbf\xb4?#\x89x\xff\x8c5F\xe4w\x04"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    bytes_0 = b"\xd4\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    int_0 = 606
    module_0.get_new_command(int_0, int_0)


def test_case_4172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


def test_case_4175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4176():
    bytes_0 = b"\x01R\xb0G\xbd"
    int_0 = 3263
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    complex_0 = 1091.12488 - 3293.457331j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    str_0 = "E6t@t\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    str_0 = "\\Vl46{.c6Tt(*S\\4-OX9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bytes_0 = b"G\xa9\xd5\x84\x02\x16\xc0\x06 \xf0\x01T>\xeb{sF\xce:l"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    float_0 = -2460.747
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    str_0 = "M%nk<Mb;pYBrEMQ|="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    bool_0 = False
    bytes_0 = b"\x14\xf5\xc0\xed.J\xcb\xac\xfe"
    int_0 = 336
    tuple_0 = (bool_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_4185():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = 1736
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    int_0 = -3927
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    bool_0 = False
    int_0 = -320
    tuple_0 = (bool_0, bool_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    int_0 = 1059
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    int_0 = 1438
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    int_0 = -755
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    int_0 = 2710
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    str_0 = "L%cTv^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    str_0 = "ls'/Tf*G d`4+_N/ w]"
    str_1 = "4%T\x0c\rQD25R]O+2BUM}"
    dict_0 = {str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    int_0 = 1022
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    str_0 = '\r\x0bP"Wu n(3|'
    bytes_0 = b"\xe18\x9c\x1f`\xdb\x15@3\xd9\xf1\x92\xf9}\xc7\xf9\xae\x03"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    bytes_0 = b"3m\xcf\xc4\xb91\x10b>/\xffg"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    int_0 = -818
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    int_0 = -2289
    int_1 = 3298
    tuple_0 = (int_0, int_0, int_1, int_0)
    list_0 = [tuple_0, int_0, int_1]
    module_0.get_new_command(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    str_0 = "9\n/imV|\t)\rX],/Nz)2"
    module_0.get_new_command(str_0, str_0)


def test_case_4202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    int_0 = 211
    bytes_0 = b"r5hv\x9d\xb4\xda\xf8"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    bytes_0 = b"k\xcf\xf8\xf7X!\x01,-\x96\x91\xd0\x98\xd4)\xbeJ\xee\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    int_0 = 2987
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    int_0 = -1267
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    float_0 = -446.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    bool_0 = False
    set_0 = set()
    list_0 = [set_0, set_0, bool_0]
    bytes_0 = b"\xa7ui\x0e\x17\n\\"
    tuple_0 = (bool_0, set_0, list_0, bytes_0)
    list_1 = [tuple_0, list_0]
    tuple_1 = (list_1, list_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = 3287
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    str_0 = "9aI{l?I}wl:a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    int_0 = 381
    int_1 = 3192
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_4214():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4215():
    complex_0 = 527.09 - 3739j
    tuple_0 = (complex_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    bytes_0 = b"{\xc4$\xbb\xf5\x9fCu\xe5;\x061\xb3"
    int_0 = 5562
    tuple_0 = (bytes_0, int_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    bytes_0 = b"\x8e\xd6v\xe9\xa98\x8f_*\x93\xab\x16\xdb$6w"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    str_0 = "!m$\x0bdf9e.j{uIn}8X"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    float_0 = -597.163
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    int_0 = 2257
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    int_0 = -963
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    float_0 = -4483.73706
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    bytes_0 = b"_\x85\x85P\x0c\x0b\x00\x8ck\xd9\x94As\xb9\x83#\xa0Q\x98\n"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    str_0 = "\rAjS&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    str_0 = "!\\_yr.#\x0c_&"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    complex_0 = 1819 + 244.30847j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    complex_0 = -495 + 910.5554j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    int_0 = -1915
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    complex_0 = -240 - 590.67j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    bytes_0 = b"\x9co\xc3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0, bytes_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    float_0 = -863.813587
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    bytes_0 = b"%k\xf5h"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    str_0 = "o+dJ\t2 "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    int_0 = 2347
    bytes_0 = b'\xec\xbf,BR\x1d\xebO"\x0cR\xac\xbds'
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    int_0 = 1005
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    str_0 = "Y-Ar?M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    float_0 = -1671.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    complex_0 = 846.6 - 1737.12688j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    str_0 = "?>rZ]TE+\t*e+tESDd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    int_0 = -2645
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bytes_0 = b"%\xe1Q\xb3`\xc0\xb9\x96\\cp\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    str_0 = "y~hnj:p"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bytes_0 = b"x\x15\x83\x00\x00\xd8\xc3I=~\xdd\xe1\x84\xa7\xe1\x88\xcf"
    bool_0 = True
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, bool_0, bool_0, set_0)
    tuple_1 = (tuple_0, set_0, tuple_0, set_0)
    dict_0 = {bool_0: tuple_1, bool_0: set_0}
    tuple_2 = (tuple_1, dict_0)
    module_0.get_new_command(tuple_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    int_0 = 2860
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    int_0 = -2152
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    str_0 = "EN1ed.umA$Zs"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    bytes_0 = b"\x87\xdc\xa1\xd4\x8f*g!\xe0y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    complex_0 = 1758.1985 - 723.229743j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    bytes_0 = b"EDR\xfd2\x94\xc8\xea\xf6\xd2b\xe5M\xf8\x15\x8e\x8a\x85k"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    float_0 = -2470.74
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    str_0 = " |\x0c(zRgk^U])"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    float_0 = -537.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [bool_0, bool_0, bool_0, list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    str_0 = "O~pO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    complex_0 = -71.066 - 895j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    int_0 = 2398
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    str_0 = "~S<b6| AJHDcO_;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    complex_0 = -1569.94799 - 2115j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    bytes_0 = b"\xc0\x11g\xed\xc0\xa6\xd68S3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4269():
    str_0 = "Vc[q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    str_0 = "-3M_\tXPMhMjU^"
    str_1 = "$IbNk?`}~\x0cX"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    str_0 = '~INiN"\\~&AGS'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    int_0 = -13
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    bytes_0 = b"IbpCl]&\xa4\x80\xd0"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    none_type_0 = None
    str_0 = "n !ih4#h"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    bytes_0 = b"\xa8>k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    float_0 = 2257.716
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    str_0 = "m*y\x0bRc{@riJp}^U}w"
    str_1 = "}F@"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    str_0 = "= `si;d]n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    float_0 = -1590.467159
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    int_0 = -1031
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    str_0 = "7`"
    bool_0 = False
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    float_0 = -244.0
    bytes_0 = b"\xbd\xe2N\xcb\xf7\xf3\xde\x94\x9e\x96g\xb8\x11\xbe\xbf\x7f]T\xadT"
    list_0 = [bytes_0]
    str_0 = "\x0b6\t:%Aie.WNmq"
    tuple_0 = (float_0, bytes_0, list_0, str_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    float_0 = 2854.9136
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    bytes_0 = b"V\xe4\xb5\x85Nr\r\xf8"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    int_0 = -3464
    module_0.get_new_command(int_0, int_0)


def test_case_4286():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4287():
    str_0 = "?5=h!Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    bool_0 = True
    bytes_0 = b"*\xe1\xac=M\xd4\xc5t\xbd\xa7q,\xef\xc5\xa4\x7f"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    object_0 = module_1.object()
    str_0 = "=aGmkGcb"
    list_0 = [object_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    float_0 = 1952.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    str_0 = "=63oAf"
    bytes_0 = b"\x87\x05M4\x8f\xa2\xbc"
    bool_0 = False
    tuple_0 = (str_0, bytes_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    float_0 = -2510.475
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    int_0 = -1683
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bytes_0 = b"#\xd3\xf1\x14\xab\xc5\x112?J"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4296():
    int_0 = 1877
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    str_0 = "I]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    int_0 = -924
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    str_0 = "a1<S`f|FNT?OH_!4Z0"
    set_0 = set()
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    int_0 = 1981
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    str_0 = "lkx]Y'uW|/|)n\\/M+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    int_0 = 1994
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    str_0 = "E\t\ryR4`U;\ni+."
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    int_0 = 644
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    bytes_0 = b"D"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    bytes_0 = b"\x82\x98}\xcf\xfa\x9d^\xbd\tk\xc1\xf6"
    bool_0 = True
    str_0 = "c\\&>T\x0c\x0c.t_f:"
    tuple_0 = (bytes_0, bytes_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    str_0 = "VmJ688Y6DfclV17f*x,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    bool_0 = False
    str_0 = "hEu5P0s:Uwg)O#;x`%"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    bool_0 = True
    list_0 = []
    str_0 = "P'}@/|"
    tuple_0 = (bool_0, bool_0, list_0, str_0)
    list_1 = [tuple_0, bool_0, list_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    complex_0 = 1893.06 - 1697.69j
    tuple_0 = (complex_0, complex_0, complex_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    bytes_0 = b"\xbe:\x84\xfb-\xdc\xaa\x8c\x01\x03"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    float_0 = -1324.04
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    str_0 = '"PW~kk@szXdu'
    str_1 = "*9vhRy>uwX"
    str_2 = 'rDC <_[J="v\x0b8+a3'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    str_0 = ".p9FP{9$eEVbP=Q-nt"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    int_0 = 203
    dict_0 = {}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    int_0 = 3542
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    int_0 = -719
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    int_0 = -979
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    int_0 = -1224
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    str_0 = "=/$]JtOqKXQ*)Ll>"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    str_0 = "N#xKrY3a09\t nGeS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    str_0 = "vM\x0b@+TAd-\t6"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    int_0 = -692
    complex_0 = 194.8535 - 13.781j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    int_0 = -4081
    set_0 = {int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    str_0 = "_%q;G!\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    int_0 = 775
    bytes_0 = b"q\xd7o\xca\x96\x12F\x7f\xc2t\x96&\xb4\xb5\xae\x92\xcd"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    bytes_0 = b'r\xcc\x1c|\xe8r\x06\xb8w\x93\xd0?\xa12"\x12C'
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    float_0 = -3832.066
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    int_0 = -988
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    int_0 = 873
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    int_0 = 284
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    str_0 = "]]Fll)_\rt22o!pi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    str_0 = "O*AU}quUU[Zj\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    list_0 = []
    int_0 = 161
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    str_0 = "\x0cFv:Ln\n."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    str_0 = "-R<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    str_0 = "giIRt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    int_0 = 924
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    str_0 = "\x0cv%Ri#\x0cWY"
    module_0.match(str_0, str_0)


def test_case_4351():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4352():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    bytes_0 = b"(e\xe1\xd8\x0e\xa95\xb6x\xca\xbb\x1c[<=\xd49"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    int_0 = -1039
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    bytes_0 = b"\x82"
    set_0 = {bytes_0}
    float_0 = -3526.439
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    bytes_0 = b""
    bytes_1 = b"\xbbx\xd6r\xf9\x8c\xba\xfeq\x825Sc\x1a\xe8M\x88"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    bytes_0 = b"\x1c([\x13\xad\xe6o-~\xc1\xce4\x19\x9a\x89\x01+\x9e\xa5\xc4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    bytes_0 = b"\xea\xd8:-\x0b3+\xf1TX$\x8ey\xddrC>\x04"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    int_0 = -3541
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    int_0 = -618
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    int_0 = 4720
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    int_0 = 2517
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    str_0 = "8g\x0c\rXYPWBBp<G|g mgE%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    complex_0 = -1235 + 2338.3166j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    str_0 = "0P5\x0cKTZwA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    dict_0 = {}
    int_0 = -2037
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    bytes_0 = b"G*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    bool_0 = False
    bytes_0 = b"\x05\xbd\x93O\xb5"
    str_0 = "uES[kL&hUG`"
    tuple_0 = (bool_0, bool_0, bytes_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    int_0 = 588
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    int_0 = -108
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    none_type_0 = None
    str_0 = ""
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    str_0 = "rT*d\rGf<j"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    str_0 = "d=:{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    str_0 = "1m\t$Pw)!B#o:\x0c>]"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    complex_0 = -1337.37 - 873j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    int_0 = 1045
    str_0 = "B"
    str_1 = "+b!|q"
    dict_0 = {str_0: int_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    bytes_0 = b"\xd1#jyXoh2\xd4\xcc\xf7\x01?SD"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0]
    int_0 = 2539
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    float_0 = -1070.763952
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    bytes_0 = b"\x9dyp\xd6\xd6\x06\xde-\xfd}\xea\xac"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    str_0 = "lLJf|["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    bytes_0 = b"\xa7\x00\xe2\\z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    int_0 = 3036
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    float_0 = -916.0
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bool_0 = False
    str_0 = "'eN$\noKb?%H4"
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0}
    dict_1 = {str_0: dict_0}
    int_0 = -1438
    dict_2 = {}
    tuple_0 = (bool_0, int_0, dict_2, bool_0)
    tuple_1 = (dict_1, tuple_0, dict_1)
    str_1 = "+J7V`U;4y@:yM"
    tuple_2 = (bool_0, str_0, tuple_1, str_1)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    bytes_0 = b'?\x08\xe7\x1e\x9a-\xd8^\xe3"\x18%\xd9'
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    str_0 = "!3uD(XDKlN$,,\ri7M"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    str_0 = "a\\%$)68K\\WE[3m{E,n"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (str_0, str_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    complex_0 = 1048.4 - 848.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    float_0 = -140.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    bytes_0 = b"?\x90"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    float_0 = 446.61
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    bytes_0 = b"n\x89 +\x7f\x99{\xce\xe7\x02y"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    bytes_0 = b"\x148$"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [bytes_0, bytes_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    complex_0 = 122.35581 + 730j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    float_0 = -627.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    int_0 = 1116
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bool_1 = True
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    int_0 = -373
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    float_0 = 214.01
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    int_0 = 4268
    set_0 = {int_0, int_0, int_0, int_0}
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    float_0 = 4431.927
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    bytes_0 = b"83j\xea\xc8\x9a\x08\x00{\xf8="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    complex_0 = 160.18846 + 719.582758j
    module_0.match(complex_0, complex_0)


def test_case_4412():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4413():
    bool_0 = True
    bool_1 = False
    bytes_0 = b"b\xb7\x01\x07U\x80\x10\xf4\x0cXU\xc5"
    tuple_0 = (bool_0, bool_1, bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    str_0 = "^``"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    int_0 = -2202
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    bytes_0 = b"\xab\xe9\xb8\xbb\x03\xd4\xac*v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    str_0 = "f.%y#UC~HP\x0bMW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    none_type_0 = None
    int_0 = 2666
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    bool_0 = True
    tuple_0 = (bool_0,)
    float_0 = -2079.5
    list_0 = [tuple_0, tuple_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    bytes_0 = b"\xfe\xccI\xf5b\xb8\x10\xad_"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4423():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4424():
    complex_0 = -648.209 + 2133.5j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    str_0 = "'c\r+v)+i^\\dk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    str_0 = "SRi:o>m l{e+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    bytes_0 = b"\xfcg"
    dict_0 = {}
    list_0 = [bytes_0, dict_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bytes_0 = b'\xcb\x06\xdd">&'
    module_0.match(bytes_0, bytes_0)


def test_case_4430():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4431():
    int_0 = 217
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    complex_0 = -979.354 - 2438j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    int_0 = 940
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bytes_0 = b"\xe9\x85#\xe1\xed\xb8\xfe\xb2\xbf\xb1P\xed\x02k\x8c"
    bytes_1 = b"W\xc3\xe53\xd0G\x9a\xb1\xec2\xcd"
    str_0 = "{uxT}GxG-doA"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_1, str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    bytes_0 = b"\xc92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    object_0 = module_1.object()
    bool_0 = True
    set_0 = {object_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    float_0 = -1152.4
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    str_0 = "{Y%6I}"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    int_0 = -383
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    float_0 = 2482.45
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    bytes_0 = b"~i\xf3\xfa7"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    int_0 = 185
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    str_0 = '`ZlI=I"e\n,\x0b'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4445():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4446():
    complex_0 = 3337.1657 + 1444j
    module_0.match(complex_0, complex_0)


def test_case_4447():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = -2270
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, bool_0)
    bytes_0 = b"\xed"
    list_0 = [tuple_0, bool_0, bool_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    str_0 = "oL\nby(<{@vw:r0q\x0ciNA'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    int_0 = -758
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    complex_0 = -1267.2 - 2455.8424j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    tuple_0 = ()
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    float_0 = 2118.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    float_0 = -762.6503
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


def test_case_4457():
    pass


def test_case_4458():
    pass


def test_case_4459():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4460():
    bytes_0 = b"\xef8\xa3\x9d\xfa$\xf8aV\xc7\x84'/v\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    str_0 = "q-aNr{ 8=La\t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    int_0 = -2360
    bytes_0 = b"\x8c\xe6s\xe4\xa5bH\xfb\xe9\xf2\x9e\xb1a\xe7\x1a\xc7\xff\x80B\xb6"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    int_0 = -207
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    str_0 = "Em\n7JyL}\\9\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    str_0 = "rLu][}k0$\\IcH9'-3vHt"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4468():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4469():
    float_0 = -1985.0
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    int_0 = -2032
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    float_0 = -1042.588217
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    int_0 = -1669
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    int_0 = 2869
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    bytes_0 = b"\x7f1Mc\xe3\xd1\x07\xc7\x00:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    int_0 = 41
    dict_0 = {}
    list_0 = [int_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    int_0 = -889
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    str_0 = "\t1v^D*\n.7iR+<,!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    int_0 = 6562
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    str_0 = "GQ.Arfh7t'=I{$C-)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    int_0 = -219
    bool_0 = True
    int_1 = 74
    tuple_0 = (int_0, bool_0, bool_0, int_1)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    str_0 = "o0;&6$?%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    int_0 = -1074
    module_0.match(int_0, int_0)


def test_case_4485():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4486():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


def test_case_4487():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4488():
    str_0 = ">Wh$u"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    int_0 = 1666
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    int_0 = -4776
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    str_0 = '4TEP"2\n=\rkT'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    int_0 = -1618
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    str_0 = "4)P;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    int_0 = -1335
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    str_0 = "7#e!z^~m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    float_0 = -2222.631592
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    float_0 = -175.0
    module_0.get_new_command(float_0, float_0)


def test_case_4499():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4500():
    str_0 = '"-\x0b#;ECDw\n'
    int_0 = 750
    tuple_0 = (str_0, str_0, int_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    float_0 = -658.662196
    module_0.get_new_command(float_0, float_0)


def test_case_4502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4503():
    float_0 = -1908.168
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    float_0 = -2610.8
    module_0.get_new_command(float_0, float_0)


def test_case_4505():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4506():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    str_0 = 'Q-@A++";e"L;X!\nV'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "MabA=\tU;\tJLI%~"
    tuple_0 = (list_0, list_0, bool_0, str_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    set_0 = set()
    int_0 = 434
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    complex_0 = -4928 + 1642.32445j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    bytes_0 = b"\xd5\x11K\xc6\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    str_0 = "HblP*>6E\x0c`W>KOt#gN$M"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    str_0 = "l\r=>'S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    str_0 = "3wV8uqojLE\x0bc&nx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    str_0 = "/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    bytes_0 = b"F\xe1k\xff\x1e\x1b\x0e}\x8c\xc0\xe9\x05`M~\xac\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    object_0 = module_1.object()
    tuple_0 = ()
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    str_0 = "H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    float_0 = -531.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    bytes_0 = b"\xb0\xa7XgL\xaa\x9f7\xb7\xc12\xf5\x7f\rB\x83\xfb\n\xaf\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_4523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bytes_0 = b"\xf28\x92f)\x8d_\xb7\x8a$\x0c\x88\xd7\x1d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    bool_0 = False
    str_0 = "?:Y9ZOn3&>;"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0, bool_0]
    tuple_0 = (str_0, list_0, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    int_0 = 2723
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    str_0 = "*{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    str_0 = "?4}_\x0b)Jj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    str_0 = "\t$*m9DBBPT%S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    dict_0 = {}
    int_0 = -3299
    bytes_0 = b"I\xb0a\xcc\xfd{\x1c\xd9d\xd9\xb0\xc2\x8d"
    tuple_0 = (dict_0, int_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    dict_0 = {}
    complex_0 = 1525 - 209.17j
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    bytes_0 = b"\xa6\xd5\xa4\xe3E\n|\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    bool_0 = False
    tuple_0 = ()
    str_0 = "{"
    tuple_1 = (bool_0, tuple_0, str_0)
    list_0 = []
    bool_1 = True
    tuple_2 = (tuple_1, bool_0, list_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


def test_case_4535():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4536():
    none_type_0 = None
    bytes_0 = b""
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    int_0 = 1752
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    str_0 = " %Fy.nX\x0b>s]GB\x0b&\x0c"
    float_0 = -1159.5
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    str_0 = "XJOq\nj"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    float_0 = 2474.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    bytes_0 = b"\x1b\xac\xb0\xd7hj\xb8\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    int_0 = -3016
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    str_0 = "He]8vk[X~~..O"
    str_1 = "[3yM\\#3a_7Y\nY%WD&ggi"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    bytes_0 = b"B\x8c\xe7\xd5\xad\x8e\xa3\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


def test_case_4546():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4547():
    str_0 = "\x0c\x0cZi-7I;pow*&0_Sj"
    str_1 = "\t:{:S~:0XmB)fyx0"
    float_0 = -975.84812
    dict_0 = {str_0: str_0, str_0: str_0, str_1: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    bytes_0 = b".\x0f=\x9c\x05\n\xfd\xc0\xbd\xf3(\xe1o\x86\x15\xad^Z\xa6|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    str_0 = "{`KUov@^l`FKgc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    float_0 = -2519.86
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    complex_0 = 1588 + 3203.21j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_4553():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4554():
    str_0 = 'Yj_WDcWMS81"9r*f\r+}'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    int_0 = -3172
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    int_0 = 2911
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    int_0 = -1393
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    complex_0 = 1557 + 701.911533j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    complex_0 = -1548 + 1792j
    list_0 = [complex_0]
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    float_0 = 2938.87776
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    bytes_0 = b"\x85\xaf\xc9y\xd6\x13hik\x0e|g\x90"
    str_0 = "E=>y3Vg.N6CaF\\\r;\x0bI;Q"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    float_0 = 1270.433832
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


def test_case_4564():
    pass


def test_case_4565():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4566():
    str_0 = "YC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    str_0 = "'il"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    str_0 = "D]<AMy "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_4569():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4570():
    str_0 = "-T6"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    str_0 = "52)^;n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    float_0 = -398.8687
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    none_type_0 = None
    float_0 = -1026.6602
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: float_0,
        float_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    int_0 = -2564
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bytes_0 = b"U\x8b\x1a\xa0N\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    str_0 = "v\t?_}x"
    list_0 = [str_0]
    tuple_0 = (str_0, str_0, list_0)
    list_1 = [tuple_0, list_0]
    module_0.get_new_command(list_1, str_0)


def test_case_4577():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    str_0 = "]Miu="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    str_0 = "GtV6syP(Zb=X!AK"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    bytes_0 = b"\xa4\x9d\xc4\xa2\xb22aT\xa5\xa9\x89\xc2\x07\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    str_0 = ">]/B\t?q{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    bytes_0 = b"\xe6\x0e"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    none_type_0 = None
    bool_0 = False
    float_0 = -710.5463
    bytes_0 = b"GM\xc1s!P\x8a|\x87\x11\x04Vz\xf4\xf5"
    float_1 = -2465.84
    tuple_0 = (bool_0, float_0, bytes_0, float_1)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    bytes_0 = b"m1t\xbeC[;\xec.\xf4\x00\xfby\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    str_0 = ".R![[A\x0bA_NC+"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    str_0 = "_{ ?p#r*k4;"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    float_0 = 719.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    str_0 = "! }GCpEL\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    int_0 = -715
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    bool_0 = True
    str_0 = "<i{|}Fd}n}x%hs4tX"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    complex_0 = 1926.267329 + 3240.3705j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    str_0 = "mqE+zN\rHcS<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    str_0 = "D68m/\tbEfK"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    float_0 = 779.49753
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    bytes_0 = b'"\xc6C\xd2A'
    none_type_0 = None
    module_1.object(*bytes_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    int_0 = 2482
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    str_0 = "@I\rp6mN?l>Nyg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    float_0 = 1942.5601
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    tuple_0 = ()
    set_0 = set()
    tuple_1 = (tuple_0, set_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    float_0 = -895.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    none_type_0 = None
    int_0 = 177
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    bool_0 = True
    int_0 = -618
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    int_0 = -3582
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    bytes_0 = b"\xfb\xd2G\xf4\xbc*x\xe0\x11\xdc\x9ea]"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bytes_0 = b"\xcb{IH\xcc\x8d\x06\x89"
    tuple_0 = (bytes_0,)
    bytes_1 = b"\x9c\xb5\xa7\x16\xf9\xec\x9f]\x87E\xd4\xea\x12\xf7"
    module_0.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    str_0 = "a5[p8MoZv;GE_U]H"
    str_1 = '+IUgbo@"N(-</Z61C'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    int_0 = -1573
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    str_0 = "2."
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    str_0 = "/+RHgnn&u\nVgAfM<]Uw_"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    int_0 = -656
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    int_0 = -1510
    module_0.get_new_command(int_0, int_0)


def test_case_4619():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4620():
    str_0 = "kBdL\rj3hQ!jf[-qA"
    str_1 = "=N0Dm~FaC]iF\n8P"
    object_0 = module_1.object()
    list_0 = [str_1, object_0]
    bool_0 = False
    tuple_0 = (str_0, list_0, bool_0)
    tuple_1 = (str_1,)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    complex_0 = -961 - 3044.627j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    float_0 = -2730.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    bytes_0 = b"QRo\xe3\xa9\xf4~\xce"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    bool_0 = True
    float_0 = 1661.84
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    int_0 = 34
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    int_0 = -309
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    int_0 = 224
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    str_0 = "Tn16"
    int_0 = 2943
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bytes_0 = b";\x99G\xd6'Q\x050\xb0\xd8\xf2\xb3\xd7\r\\\xc7\xac3j"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    complex_0 = 1104.7879 - 1810.274j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    complex_0 = 3007 + 318.794264j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    int_0 = -922
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    int_0 = -2076
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    bytes_0 = b"\x10\x8d.\xd1>P\xed3\xa8\x0e\x1aJ/\x01H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    str_0 = "9@AuTm: v]9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    bytes_0 = b"s\x8b\xc1u\x93o\xa9\xe3W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    bytes_0 = b"\xae9c8\xd8y.hlr\x83\x80\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    str_0 = "y3\rxM\tr42/Dj !rC,u"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    str_0 = "\\)Cr]\x0ci+y\r\r8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    bool_0 = True
    int_0 = 349
    dict_0 = {bool_0: bool_0, int_0: int_0}
    tuple_0 = (dict_0,)
    object_0 = module_1.object()
    tuple_1 = (tuple_0, bool_0, object_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = 'x*"L~)G_R"~c=R'
    str_1 = "MhpkiK9jtMx8U#n\\"
    dict_0 = {str_0: str_0, str_1: bool_0}
    module_1.object(*list_0, **dict_0)


def test_case_4644():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4645():
    bool_0 = False
    bytes_0 = b"\x8b\x15\xf4\xfd\x90\x1c\x80\x13"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    int_0 = -1631
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    str_0 = "Pnol#dU5Z+*.|N\tVud_^"
    module_0.match(str_0, str_0)


def test_case_4649():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4650():
    complex_0 = -1262.76189 - 2285.51105j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    str_0 = "+f3rL%MUkC7pr[;W>"
    module_0.get_new_command(str_0, str_0)


def test_case_4652():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4653():
    str_0 = "lr,/"
    dict_0 = {str_0: str_0, str_0: str_0}
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: dict_0}
    none_type_0 = None
    module_0.get_new_command(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    float_0 = 830.0
    object_0 = module_1.object()
    module_0.match(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bytes_0 = b"\x7f\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    int_0 = -465
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    int_0 = -2116
    module_0.match(int_0, int_0)


def test_case_4658():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4659():
    bytes_0 = b"|v\x9e)!\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    int_0 = -2405
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    float_0 = -434.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bytes_0 = b"\xdd\xdf\xd0\n\xe4\xec\xbb\xa8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    float_0 = -167.94
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    int_0 = -1575
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    str_0 = "@[-}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    complex_0 = -796.20205 - 281.183j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bytes_0 = b"\xc9\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    tuple_0 = (set_0, set_0)
    tuple_1 = (tuple_0, set_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    bytes_0 = b"\x0e\x8ck\xa3\xb5}\xd4\x06\xf3\x85\xe3t.\xc1\x8c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    str_0 = "&LH"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    bytes_0 = b"\xaf\xe7\xda:\xdc\xa1`\xa9\t\x13\xcf zM\x16\xfe\rz"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    float_0 = 592.0
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    int_0 = 22
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    str_0 = "8.Rv l-L,2]u#"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    bytes_0 = b"j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    int_0 = -498
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    bytes_0 = b"\x85\xa6\xe9\x19\x8e\x82c\x9f\xa4"
    module_0.match(bytes_0, bytes_0)


def test_case_4681():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4682():
    float_0 = -2083.43133
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    int_0 = -485
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    bool_0 = True
    str_0 = "A"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    int_0 = -1873
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    bytes_0 = b"D>\xb1:\xb1rgY=\xe5\x9f\xfdUD\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "q>H\nmw{FQSD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    str_0 = "K?3B\t^tZ=P#SoD\r.W4yg"
    str_1 = "Q=hX"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    str_0 = "YTiR*)\x0cy*\rE!'"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    float_0 = 503.654
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    str_0 = "s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    int_0 = 3709
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    str_0 = "++WgK/mwd'_9yI8n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    bool_0 = False
    bytes_0 = b"\x9f\xb6"
    str_0 = "Ae{G7mG3\x0bBkVmpA9r\x0b["
    bytes_1 = b"H\x11\x10\xf3\x0c\xb4"
    tuple_0 = (bool_0, bytes_0, str_0, bytes_1)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    bytes_0 = b"\xfa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    str_0 = "`P@M9wy\rx5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    bool_0 = False
    bytes_0 = b"Fcl!\xaaO\x03\xa1\xbbD"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    str_0 = "W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    bool_0 = True
    complex_0 = -402.466524 - 2263.88j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    int_0 = -124
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    str_0 = '=`?t4]+"'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    bool_0 = True
    bytes_0 = b"2\xbf\x97X."
    set_0 = {bool_0, bool_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    str_0 = "cYw\x0be@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    int_0 = -886
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    str_0 = "9B,WKN]Jon46uL!$x3("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    complex_0 = -1362 - 1208.97j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    str_0 = "Wi`}*q{[rcIO<)q"
    str_1 = "KTE#2|joZ^*"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    bytes_0 = b"J"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    int_0 = 2087
    int_1 = 891
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_1}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    none_type_0 = None
    float_0 = 1072.0
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    bytes_0 = b"\xbb-\xf8[9\x91\x9d\xac\x99\x8c\x7f\x88z\x7f<"
    bytes_1 = b"\xa1\xa2O?\xf3\x86\xa9\xda\xc3\xe7=\xf6eV\x81\r\xaa\x16c["
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, bytes_1, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    str_0 = "I6Y"
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    float_0 = -2115.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    float_0 = -1160.335
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    float_0 = -1896.01
    bytes_0 = b"\xd9$\x12d\xaa2'\x90-\x1e\xbe\x08"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    bool_0 = True
    int_0 = 5811
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    int_0 = -1172
    bool_0 = False
    int_1 = 1786
    str_0 = "1\x0cg,!?MAFQ- q\\Y'r3"
    tuple_0 = (int_0, bool_0, int_1, str_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    int_0 = -3719
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    bytes_0 = b"X\xf5\x151\x9c\xa6\xfc\xa4\xbe\x14\xc8\x98\xd3\x83\xf6"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    bytes_0 = b"\xc8)F#\xf3\xfc\x90\xd3\xcd\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    str_0 = "pv|6cgdj#,lx/,?0d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    float_0 = -335.5183
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    float_0 = 897.1487
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    int_0 = -674
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    bool_0 = True
    int_0 = 447
    list_0 = [bool_0, int_0, bool_0]
    tuple_0 = (list_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    float_0 = 287.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    bytes_0 = b"`\xe0\x1f\xf7\xe0\xd8p\xbd\x8ev\xe6\x1a!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    float_0 = 1263.3479
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    str_0 = "f#?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    int_0 = -1254
    dict_0 = {int_0: int_0}
    list_0 = [int_0, dict_0, dict_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    int_0 = 228
    bool_0 = True
    dict_0 = {int_0: bool_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    int_0 = 315
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    float_0 = -655.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    int_0 = 835
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    complex_0 = 2608.43 - 2143.45j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    bytes_0 = b"2\x08\x00W\x9b\xb3 pVV\x81M"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    int_0 = -390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    int_0 = 1128
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    int_0 = -3893
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    int_0 = 623
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    object_0 = module_1.object()
    int_0 = 2186
    bytes_0 = b"\xc0\xf6\r8"
    tuple_0 = (int_0, bytes_0)
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    int_0 = 740
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    bytes_0 = b"\x81\x02D\xef\xaf\xd8\xa3\x1aI\x97\x00[-"
    int_0 = -2975
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    int_0 = -792
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    tuple_1 = (int_0, int_0, int_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    str_0 = "hO"
    module_0.match(str_0, str_0)


def test_case_4752():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4753():
    str_0 = "+7G|\x0c3H<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0, set_0)
    tuple_1 = (tuple_0, tuple_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    int_0 = -442
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    int_0 = -3532
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    bytes_0 = b"\xc1\rB\xc8\xcb,`\xd9l"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    bytes_0 = b"\xe6/\x13!\xce\xe7W`I\x1d!\x0e\x12\x83\xe8\xcd"
    tuple_0 = (bytes_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    int_0 = -1935
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    int_0 = -1151
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    float_0 = 334.871
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    tuple_0 = (object_0, list_0, list_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    bytes_0 = b"\x13\xfa\xdc\xb0\xba[<\x11l\xca\xc8a(va\x97\x89m\xf7"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    int_0 = -2629
    module_0.match(int_0, int_0)


def test_case_4766():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4767():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    str_0 = "VxRn?h\n0ifQV\rnHUfi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    complex_0 = -449 + 860.2467j
    set_0 = set()
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    int_0 = -1830
    module_0.get_new_command(int_0, int_0)


def test_case_4771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4772():
    str_0 = "mS;]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    str_0 = ")eUu8\\7L<j8/If}EtU!"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    complex_0 = -3251.7 - 2784.72j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    bytes_0 = b"\xa9}y%`"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    str_0 = "7:s>^\x0c#?HW"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    str_0 = "~_iPF@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    bytes_0 = b"\xd8\x0b9;p \xbe?\x0c$]\xd6\x8c\xb9AV\x12\x11j"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    str_0 = "c"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    bytes_0 = b"m\x05sd\x95,\xbf\x14$\xed\xb1k\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bool_0 = True
    str_0 = "b(\x0c+zM#|`yn)Z"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    int_0 = -1311
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    float_0 = 1392.73
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    str_0 = '~nJwc<US"2'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    int_0 = 2067
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (bool_0, bool_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    int_0 = -908
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    str_0 = "*J^iS6tu+z\x0c0"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    int_0 = -485
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    complex_0 = 1232 - 1625.95j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    int_0 = 4200
    dict_0 = {}
    str_0 = "2"
    tuple_0 = (list_0, int_0, dict_0, str_0)
    list_1 = [tuple_0, complex_0, dict_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    bytes_0 = b"\xa4\xb3\x87\x1a@\x99,\x16|\x06"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


def test_case_4797():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4798():
    bytes_0 = b"\x19\xde\x0c\x96B\x823\x86q\xe4\x99\x97\xbc(\xf8\xf8\xe9\x19"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    int_0 = 1303
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    float_0 = -1940.97616
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    float_0 = 1384.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    bytes_0 = b"\\L\xd1\xc7\x8e\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    int_0 = -832
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    bytes_0 = b"\xf2>\x9aS*\x92I\x91j:\x97"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    str_0 = "&EA*3Tt>o\x0bDb/cR"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    str_0 = "dHIJPhqz5a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    str_0 = '\r0U@c1RJnyGpB \x0bM>^"I'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    bytes_0 = b"r\xd2\xb5!X\xd7\x04\x00j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bool_0 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: object_0, bool_0: bool_0, object_0: bool_0, bool_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    bytes_0 = b"\x9bY\x86\xea\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    int_0 = -2914
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    str_0 = "&'-~UiHg[rdC<LM1sg\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    int_0 = 982
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    float_0 = -2028.83
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    str_0 = "Ik=nDL4e]QXc~:I7+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    str_0 = "i{"
    list_0 = [str_0]
    str_1 = "("
    str_2 = "boV"
    dict_0 = {str_1: str_0, str_2: str_1, str_1: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    int_0 = -1358
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    int_0 = 1521
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    str_0 = '"]GnUUSAn]eI3t96""?'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    complex_0 = 2177.594 - 3112.9524j
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    int_0 = 383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    str_0 = "kI(`T&sW"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    str_0 = "\n~y>,9\ng~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    str_0 = '/#@"6r$g%qNhp"'
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    int_0 = 1273
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    int_0 = -266
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    int_0 = 910
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    int_0 = -42
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    float_0 = 393.69991
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    bytes_0 = b"\xc0\x8f\x0b\xe1\x8e\xe31I\x08v\xe3\xc3\xd0"
    list_0 = [bytes_0, bytes_0]
    int_0 = 3795
    bool_0 = True
    tuple_0 = (list_0, list_0, int_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    float_0 = 630.0
    list_0 = [float_0]
    list_1 = [list_0, float_0, float_0, float_0]
    module_0.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    str_0 = "WgqjQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    float_0 = -1656.2942
    bool_0 = False
    set_0 = {float_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    int_0 = -391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    int_0 = -1872
    int_1 = -1340
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    str_0 = 'BpK?n}HF.2h1:"W#"'
    tuple_0 = (str_0,)
    tuple_1 = (tuple_0, tuple_0, str_0, str_0)
    dict_0 = {tuple_1: tuple_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    str_0 = ",6/2WL-ob1"
    complex_0 = -1684.032 - 446.4118j
    module_0.get_new_command(str_0, complex_0)


def test_case_4841():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4842():
    none_type_0 = None
    float_0 = 3277.5
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    tuple_0 = ()
    bytes_0 = b"iz\xbe7\x11\xcb\xf4\xea~\x9bZ\xc2"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    str_0 = "9,B]@`!~8\r{q)r 0-(%"
    module_0.match(str_0, str_0)


def test_case_4846():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4847():
    int_0 = -600
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    int_0 = 1460
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    str_0 = "\t=x\\N![')[[O%qjg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    str_0 = "t,c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    bytes_0 = b"\xd7\x148\xdb\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    float_0 = 1010.508
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    str_0 = "\x0b\n::+IF"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    complex_0 = 1236.41 - 2537.288j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    complex_0 = 912 - 504.92964j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    bytes_0 = b"n\xd8]U?!\x9f\xc6O\x96"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    float_0 = 1526.38
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    int_0 = 2433
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    bool_0 = False
    float_0 = -773.0
    tuple_0 = (bool_0, bool_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    int_0 = 120
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    str_0 = "\n7_-?awPl`JtV+I~Zw"
    bytes_0 = b"\xb7\xdcS\xfe\x98\xf8"
    set_0 = {bytes_0, str_0, str_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    none_type_0 = None
    tuple_0 = ()
    list_0 = []
    str_0 = "&p=xn&Lb6c'0eNR'Xx"
    bool_0 = True
    tuple_1 = (tuple_0, list_0, str_0, bool_0)
    module_0.match(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bool_0 = True
    bytes_0 = b"!=C9^\xd2"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    dict_0 = {}
    object_0 = module_1.object()
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    bytes_0 = b"\x82\xaa"
    module_0.match(bytes_0, bytes_0)


def test_case_4870():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4871():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    int_0 = 106
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    complex_0 = 1203.59707 - 178.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    int_0 = 292
    module_0.match(int_0, int_0)


def test_case_4875():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4876():
    str_0 = "{5VwL%_w,z=Pz"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


def test_case_4877():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4878():
    str_0 = "P?t62\rC85"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    complex_0 = -3424.31 - 2388.9j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    str_0 = "mh.."
    str_1 = "&H9v-\rC(c.|C5t7"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    int_0 = -196
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    int_0 = 2826
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    float_0 = -948.7103
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    str_0 = "|ok"
    int_0 = 710
    dict_0 = {str_0: str_0, str_0: int_0}
    list_0 = [str_0, str_0, dict_0, dict_0]
    dict_1 = {int_0: int_0, str_0: int_0, int_0: str_0}
    module_0.get_new_command(list_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    int_0 = 2367
    float_0 = -761.513
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    str_0 = ">0ZM\x0c i[u+4L(9]'"
    int_0 = 624
    bytes_0 = b"{O#\xf26\x87\x97\xab\x95@#\xb6"
    tuple_0 = (str_0, int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    int_0 = 272
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    int_0 = 1164
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    bool_0 = False
    int_0 = 1836
    set_0 = {bool_0, int_0, int_0, bool_0}
    list_0 = [bool_0, bool_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    str_0 = "c~[;&QL<I:\x0cjMX<z~ZM"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    int_0 = 1815
    module_0.match(int_0, int_0)


def test_case_4894():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4895():
    int_0 = -3619
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    bytes_0 = b"k\xd7m\xb1\x17\x13ww\x93\xc8FYo\x9b\xb35\xc5\xbe\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    bytes_0 = b"\x1eg\xbd\xea\xac\x0c\xb9U\xca\xa9\xf5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    bytes_0 = b"On\xb9\xd8Z\x00\xf019\x12\x04\x1c\x98\x83\xb6F]K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    int_0 = -350
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    str_0 = 'F"F<41o J'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4902():
    pass


def test_case_4903():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4904():
    int_0 = -352
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    bytes_0 = b"\x05\xbf\xa9\x8f\xbe\xc2CC<\xd1\xc9\xcc\x1c\x92\xae\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    bool_0 = True
    str_0 = "x(A"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    int_0 = 553
    str_0 = "BY^Dk|b?|>1"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    none_type_0 = None
    float_0 = 2438.784
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    str_0 = '*"QQFve%C'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    str_0 = "1|x(-kpuiV"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    bytes_0 = b"\x02sM\x97`|;a].\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    bytes_0 = b"\xa9 \xa1?\x9f\xf1\xff\xcb\x95("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    int_0 = -71
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    bytes_0 = b"\x96\xc54Q\x01P"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    list_0 = [tuple_0, tuple_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    str_0 = "]P0`x)FR\\"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    int_0 = -579
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    str_0 = 'L`mTL,h*x"'
    tuple_0 = (str_0,)
    set_0 = {tuple_0, tuple_0, str_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    str_0 = "Z!a*A`XEhl\\r=coea'E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    complex_0 = -243.3389 + 3031.4277j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    float_0 = -605.1949
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_1}
    module_0.match(dict_0, dict_0)


def test_case_4924():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4925():
    float_0 = -537.7827
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    bytes_0 = b"+%\xe0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4927():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4928():
    int_0 = -1968
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    str_0 = "pl%Sy&p~"
    complex_0 = -1133.737 - 5255.5j
    module_0.match(str_0, complex_0)


def test_case_4931():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bytes_0 = b"\xba\x12\xca]\xad;"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    str_0 = "\r<V8S\r`f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    float_0 = 616.027
    str_0 = "Y&f~D~Yb"
    bytes_0 = b"\x8c"
    list_0 = [str_0, float_0, bytes_0, bytes_0]
    tuple_0 = (float_0, str_0, float_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    float_0 = 644.38353
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    int_0 = 640
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    str_0 = "WRz?hQ~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    str_0 = "z~0`~'Dr1@\"hP[\x0cAMs\nd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    tuple_0 = (bool_0, dict_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    str_0 = "\nM|hG9+Un&QwA!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    set_0 = set()
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    int_0 = 2521
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    str_0 = "C$8`"
    module_0.match(str_0, str_0)


def test_case_4947():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4948():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    bool_0 = True
    str_0 = "'xD"
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: bool_0, bool_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [bool_0, bool_0, bool_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    float_0 = -466.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    bytes_0 = b"\x1f\x88t\xc4\xa3$\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    str_0 = "\n7sX~g\nrt"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    bool_0 = False
    int_0 = 2571
    module_0.get_new_command(bool_0, int_0)


def test_case_4957():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4958():
    complex_0 = -1302 - 2964j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_4959():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4960():
    int_0 = 977
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    bool_0 = True
    str_0 = "|"
    list_0 = []
    tuple_0 = (bool_0, str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    int_0 = 1712
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    bytes_0 = b"\xc5\xef\xce\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    str_0 = "'Z#^'/v8^_St1vu5fm"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    int_0 = 4289
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    int_0 = -794
    bytes_0 = b"7\xa0\xcc\xeb\x00\xdf\x8c$m\xbf\x17K\xfa\x9b\xb6\xf3\x88\xe1"
    dict_0 = {int_0: int_0, int_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    bytes_0 = b"OR\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    bytes_0 = b"\xd7\xbd\xda\x1c$/\xb6\xf0IKJ\x8b\xa5\x886\xab\x1c\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    float_0 = 1179.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    str_0 = "YYLd2j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    str_0 = "Xm\rlX=D"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    float_0 = 1451.24
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    float_0 = 2006.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    str_0 = "R[C5s4\x0cIH=QMQ{8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    int_0 = -183
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    int_0 = -891
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    str_0 = "(NW"
    module_0.match(str_0, str_0)


def test_case_4981():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4982():
    complex_0 = 681.4 + 1969.32j
    list_0 = [complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4983():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4984():
    bytes_0 = b"\x1b\xc1M?T\x11lWqn"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    bytes_0 = b"n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    str_0 = "\ry^$!wT->Q}\x0bIUSI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    bytes_0 = b"\xb5\x907vM\xc2\xc6\xc6\xb6zA6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    bytes_0 = b"\xfar\x9aWI\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    bytes_0 = b"\xba\xd31\x7f\xe0\xe9\xfcmm\xe8v,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    str_0 = "0\tj :qvT"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    str_0 = "Cx@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    str_0 = "(MKa&K= #bY(+`9\to"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    bytes_0 = b"\x98\xde}\x9a\xbf\xe7\xb4\xc1\xbaz"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    complex_0 = 1268 - 2255.7581j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    int_0 = -5821
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = True
    list_0 = [dict_0, bool_0]
    str_0 = "j!{"
    bool_1 = True
    tuple_0 = (list_0, str_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    complex_0 = 1297.117 - 941.710696j
    set_0 = {complex_0}
    bytes_0 = b"\x07\xb8\x8f*"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    int_0 = 4042
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    bytes_0 = b"\xa3\xbb\n\xeb\xea\x88\x079\x1b"
    none_type_0 = None
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    float_0 = 2790.6885
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    float_0 = -273.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    float_0 = -4057.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    complex_0 = 1465.99 + 924.8133j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    bytes_0 = b"V\x9dCV\xd6\xb9"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bytes_0 = b"\xb2\xd5f\xbb\x84f\xe4k\xf5\x18\x19\x83\xa6\x02\xa1\x16"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    str_0 = "/,,]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    bytes_0 = b"\x91\x0b;\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    float_0 = -2317.7
    list_0 = [float_0, float_0]
    str_0 = "/DkS:YG1:Pj[<"
    tuple_0 = (list_0, list_0, str_0)
    list_1 = [tuple_0, list_0, str_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    bytes_0 = b";H|\xa9\x93\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    bytes_0 = b"d\xf2\xea\x81FwT\x98\xfe%\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    complex_0 = -1185.34 + 916.55j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    str_0 = "\\|\rH4@W58q*z;+~l\x0chKj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    complex_0 = 812.52981 + 2442.63j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    float_0 = -534.365
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    bytes_0 = b"\xfd`\xfb\x8f\xed]\xa1V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    int_0 = -620
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    int_0 = -1190
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    float_0 = -480.13
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    int_0 = -103
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    float_0 = 3576.35344
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"\x89\\\xe8\x06uN\xdd]\xbc\xe3\x1c\x14\xee6\xc8\x90\xcdj\xa8"
    set_0 = {tuple_0, bool_0, tuple_0, bytes_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    bytes_0 = b"\x83\x1bUP\xf9\xce\xfc&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    str_0 = "p_y33p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bytes_0 = b"E\xd2U\xe1\xd5\xf3\xe1\x88D\x8a\x01\x13"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    int_0 = 1519
    bytes_0 = b".\xf22f\xad\x9c\xa0rf\xd4\x1bi\xdaL\xf4\xa0"
    set_0 = {int_0, bytes_0, int_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    str_0 = "VWL0TpHz\x0bw.VH*hoJ<"
    module_0.get_new_command(str_0, str_0)


def test_case_5030():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = 3505
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    bytes_0 = b"\xd9!6\x83;\n\xff\xb9N\x04\x8f\xe6i\x9e\x05"
    list_0 = [bytes_0]
    list_1 = [bytes_0, bytes_0, list_0]
    module_0.match(bytes_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bytes_0 = b"\x8c \xecG\xbe\xa9a\x95\xe5\xc7\xd1\xeb\xd0"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    bytes_0 = b"\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    float_0 = -996.505014
    bool_0 = False
    tuple_0 = (float_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    int_0 = 2473
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    float_0 = 355.3302
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    complex_0 = 915 + 1373.62699j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    set_0 = set()
    list_0 = [set_0, set_0]
    object_0 = module_1.object()
    bytes_0 = b"\xc2\xa6\x9f\x15\x8bW\x84\r"
    tuple_0 = (set_0, list_0, object_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    str_0 = ",Dvb/YVGJi)z?MlP"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_5042():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5043():
    float_0 = -977.06056
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    int_0 = -1540
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    float_0 = 384.6
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    list_0 = []
    str_0 = "\\E?U+*"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    float_0 = -903.59
    set_0 = {float_0}
    tuple_0 = (set_0,)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    bytes_0 = b"YO\xb5@ku1M\x95{C\xc1\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    bytes_0 = b"\xdf$DoQ\x93\x0fE\xaa\xddX\x99\xe6\xba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    none_type_0 = None
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, bool_0, list_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    str_0 = "Lmq_=+:+Yy\t:."
    set_0 = {str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    str_0 = "`!':z}"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    float_0 = 559.453967
    set_0 = {float_0}
    tuple_0 = (float_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    int_0 = -1887
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bytes_0 = b"L\x19\xeav\xf4\xa3\x06\x0cW"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    bytes_0 = b"\\Q\x8f\x11\x02\xc9\xd7\x19\x1a%\xfe%\xad\xb0\xee"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0, list_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    bytes_0 = b"w\xe4\xa7\xb7Ol\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bytes_0 = b"n;(o.\x86f\xa0\xf8j\xa9F\x1dRz"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    str_0 = '/*u\t0\x0b~"c6Q'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    bytes_0 = b"\xd9\xbeJ\xbb\xd4\xbe~\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    float_0 = -1043.09
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    str_0 = "\\eF!x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    bytes_0 = b"\xbb\xbe\xb1egg\\raP\x1e;\xa2\x1a"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    int_0 = -2133
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    float_0 = 1869.634
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    bool_0 = False
    int_0 = 1016
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, int_0: tuple_0, tuple_0: tuple_0}
    bool_1 = False
    tuple_1 = (bool_0, dict_0, bool_1)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    int_0 = 1367
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    str_0 = "Pn\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    bytes_0 = b"\xc3\x97\x90\xd4\n\xd8\xadX \x9a\xf4Z\x87\n\xb4\xb23,"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    float_0 = -530.899416
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    int_0 = 980
    list_0 = [int_0, int_0, int_0]
    float_0 = -831.0
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    bool_0 = True
    str_0 = "nf~,\toD>B<<!./89:Bf%"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: str_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    float_0 = 4113.51
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    str_0 = "$%^{OD5d!"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    str_0 = "u=}\x0c\x0cei_S+Uf~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_5086():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5087():
    str_0 = "qYH<(5W+< DJ"
    list_0 = [str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    float_0 = -1361.595
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    bytes_0 = b"\xdc\x9e]\xa2 g#\xa9\x11\xd9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    int_0 = 1872
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    int_0 = 1155
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    str_0 = "IE{T:D(y[B%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    bytes_0 = b"~\x1f\\}\x8b{d\x07"
    tuple_0 = (bytes_0, bytes_0)
    str_0 = "*^T1)1W+\n!-L;hQ({9;"
    list_0 = [str_0, tuple_0, bytes_0]
    tuple_1 = (tuple_0, str_0, list_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0, bool_0)
    str_0 = "2\\pYq[Pul&,c|"
    tuple_1 = (dict_0, tuple_0, bool_0, str_0)
    str_1 = "D\r4;Cq_uaK20]x)DU"
    int_0 = 234
    float_0 = -1009.76
    tuple_2 = (str_1, int_0, float_0)
    module_0.get_new_command(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    int_0 = 2505
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    int_0 = 2532
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    float_0 = 2215.59351
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    int_0 = 318
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


def test_case_5101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5102():
    complex_0 = 1417.01688 + 83.76j
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [complex_0, complex_0, tuple_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    int_0 = 2792
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    int_0 = -1403
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    int_0 = -1905
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    int_0 = 1159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    bytes_0 = b"?,\xfa\xec\x9d\x11\x11\xd3=<]\x8d\xb7\xc1\xbe\x03\x1d\xfd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    int_0 = -1148
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    bytes_0 = b"c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    float_0 = -1040.6433
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bytes_0 = b"\xbf\x15)\xb2\xfa\xe6\xd0U\x06\x144\xa4\x0f\x8d\xf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    none_type_0 = None
    bytes_0 = b"\tm\xe8\xbd{\x90\x85,\xd6"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    str_0 = "z/<Q8?ace6Tfx=c,f1.-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5115():
    bool_0 = True
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    float_0 = 1908.51136
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    bytes_0 = b"\xea\xf4\xb2\xcd\xa1\x1aY"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    int_0 = 67
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    str_0 = "A-\ric.@ZKLL\x0b+^\x0bXKv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    bool_0 = True
    bytes_0 = b"x\x1cb"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0,)
    float_0 = 3907.1
    tuple_2 = (bool_0, tuple_1, float_0)
    module_0.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    str_0 = "YU=!9/xS"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    int_0 = -3766
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    int_0 = -746
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    int_0 = 2885
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    bytes_0 = b"\xaf/)\xbc\xa3\xc2\x9e\xd0\x94}\x1dGC6\xb8\xec\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    str_0 = "MbQCp]si-ykNI<1g7`A"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    bytes_0 = b'\x0e\x02{\x8c\xd4"\xf0\xd9g|e \xb8_\x11\xc2\x9f G'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    str_0 = "$]O_V@M$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5129():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5130():
    complex_0 = -384 - 840.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    bytes_0 = b"\x1bE\xa3\xf14%\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    float_0 = -1904.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_5136():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5137():
    bytes_0 = b"\x17\xd3\xea\x88\xc5A\x8a|\x86c\xe3\x9c\x1f'\xfb\xdd\x0e"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    str_0 = ")1ACPE8;JEYWL"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    tuple_0 = (dict_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    str_0 = "}@>n"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    str_0 = "pc__n~I\\P1"
    bool_0 = False
    list_0 = [str_0, bool_0]
    module_0.match(list_0, str_0)


def test_case_5142():
    pass


def test_case_5143():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5144():
    str_0 = "s1%h00]e\x0bF/Ku\t~v~f$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    str_0 = "\r$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    bytes_0 = b"4\x93No\xd8\xc5V\x9b\xc6y6tD\\\xf4w\x81\xac"
    bool_0 = False
    set_0 = {bytes_0, bool_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    complex_0 = 1194 - 501.08j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    str_0 = "S9I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    bool_0 = False
    int_0 = -3878
    set_0 = {bool_0, bool_0, bool_0, int_0}
    tuple_0 = (bool_0, bool_0, set_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bool_1 = True
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    bytes_0 = b"\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    int_0 = -7041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    str_0 = "(aTeJF4+?:[o`Lw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    int_0 = -2224
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    str_0 = "'R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    int_0 = -2517
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    float_0 = -381.237
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    bytes_0 = b"\xf8yW\x85\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    bytes_0 = b"\x94\xdf\x95S\xb4\x08>\x8f\x92&\x83\x04\xe9\xd6\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    bytes_0 = b"[\xb7\xfer"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    float_0 = -1726.13573
    str_0 = "Hm-`\\)[u)(w)"
    tuple_0 = (float_0, str_0)
    set_0 = {tuple_0, float_0, str_0, str_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    bytes_0 = b"oC\xc8RS\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    bytes_0 = b"\x7f\xc97\xe1\xff\xf0<\x1c\xf3\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    str_0 = "/%gF(C"
    bool_0 = False
    int_0 = 953
    tuple_0 = (str_0, bool_0, int_0, int_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    bool_0 = False
    int_0 = -745
    dict_0 = {int_0: int_0, int_0: int_0, bool_0: int_0}
    tuple_0 = (bool_0, dict_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    int_0 = 1581
    module_0.match(int_0, int_0)


def test_case_5177():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5178():
    int_0 = 243
    module_0.get_new_command(int_0, int_0)


def test_case_5179():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5180():
    complex_0 = -2790 + 860.7955j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    float_0 = 1077.147
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    int_0 = -1427
    bytes_0 = b">8\xb6A\xc0\x8f\xc0\xe7!\x15\x8f\xca\x02\xcf"
    float_0 = -7382.0
    tuple_0 = (int_0, bytes_0, int_0, float_0)
    dict_0 = {int_0: bytes_0, int_0: tuple_0, bytes_0: tuple_0}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    bytes_0 = b"D\xc3\xe64q-\x83\xb5\xcd2\xa1\xbbep;\xea\xb2\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    float_0 = -1115.0
    set_0 = set()
    dict_0 = {}
    tuple_0 = (float_0, set_0, set_0, dict_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    bytes_0 = b"3"
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    object_0 = module_1.object()
    module_0.match(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    bytes_0 = b".7\x18\xb0\x92\xb4\xe7'p\xcb\xae\xba\x1f,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    bytes_0 = b"\xf7\xd7u\xf0Cl\xf7\xe5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    complex_0 = 2340.13 + 990.87j
    module_0.match(complex_0, complex_0)


def test_case_5190():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5191():
    float_0 = 1276.317698
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    int_0 = 1784
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    str_0 = "zWu%?yW7d6<[PBH,z<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    int_0 = -347
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    bytes_0 = b"\xd7\xedp\xc5\xed\x98\xff"
    int_0 = 773
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    bytes_0 = b"\xb9:/[\xb4r\x14n+\x81!\t\xd3d\xe7\x12\x0fA\xc7"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    str_0 = '\n+\n\x0b P>@:+LS:^+I"pr'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    bytes_0 = b"\xd8\x9a\x88X\x0f{\xac\xc4\xb1\xf2\xe3~\xaez\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    float_0 = 887.92
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    str_0 = "f|eLo]2<W{vKi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    str_0 = ">UEP\x0cjDRka|kN\r"
    int_0 = -1067
    tuple_0 = (str_0, str_0, str_0, int_0)
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    tuple_0 = ()
    bytes_0 = b"Xl\xda\xbc8\x89\xa6\x9c\x0e\xc2\xe4\xe4\xb6\xe8\x83\x7fh\xb0"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    bytes_0 = b""
    bool_0 = False
    list_0 = [bytes_0, bool_0, bool_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    str_0 = "!<!9bvO\r\tgV-Jr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    bool_0 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: object_0}
    tuple_0 = (bool_0, bool_0, dict_0, bool_0)
    module_0.match(tuple_0, object_0)


def test_case_5209():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5210():
    int_0 = -842
    module_0.get_new_command(int_0, int_0)


def test_case_5211():
    pass


def test_case_5212():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5213():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    float_0 = 705.2013
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


def test_case_5216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5217():
    str_0 = "+Xd@V`Sl0$|7D|UOzhD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    bool_0 = True
    int_0 = 3674
    module_0.match(bool_0, int_0)


def test_case_5219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5220():
    float_0 = 1510.23
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    bytes_0 = b"\xd1\xde\xbe\x19Q\x18\xc8\xf5\x86"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    int_0 = -2963
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    int_0 = -234
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    bytes_0 = b"\xbb\x9b_\xd3\xfa!9e\xf8G_\x16Gr\xd9"
    module_0.match(bytes_0, bytes_0)


def test_case_5226():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5227():
    none_type_0 = None
    bytes_0 = b"\x0e^l\xd8{\x08\xc7\xe1\xe0\nB\x8b'\xfe"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    int_0 = 43
    tuple_0 = (int_0,)
    dict_0 = {}
    tuple_1 = (tuple_0, dict_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    bool_0 = False
    str_0 = ","
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    int_0 = 1045
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    complex_0 = -946.58269 + 1369.75j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    bool_0 = True
    bytes_0 = b"\x8b6\xe0\xf2\t\xffZ\x1f\xc9"
    tuple_0 = (bool_0, bool_0, bytes_0)
    object_0 = module_1.object()
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    bytes_0 = b"\xac\xa28WA\xeec\x8b\x10\x04HS@\xc1}#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    bytes_0 = b"\xb7\x8d\xdb^\xd1\n\x94\xdf/IR\x9f|E\xf1"
    str_0 = '-EXCjR"lPS\nU:d.rc^'
    tuple_0 = (bytes_0, bytes_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    bytes_0 = b"\x1aE\x03\x83\xb6\xe8V\xb6"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    bytes_0 = b"?dJ\x9cd"
    bool_0 = True
    set_0 = {bytes_0, bool_0, bool_0, bytes_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    bytes_0 = b"\x17\xdeBr1\x04i\xab\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    bytes_0 = b"RJ\xb6ZE\xa8\x83\x99P\x8b]pi*\xdf"
    list_0 = [bytes_0]
    list_1 = [list_0, bytes_0, bytes_0, list_0]
    list_2 = [list_1]
    none_type_0 = None
    module_0.get_new_command(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    float_0 = 1545.922824
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    float_0 = 1020.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    int_0 = 1908
    str_0 = " sTZN\x0c,\n3x+|+x^gHu"
    tuple_0 = (int_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    complex_0 = -3383.02 + 1259.43j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    str_0 = "yq\r%iDiO\r\\ f5P$C#-Mo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    float_0 = -1912.2
    bool_0 = True
    dict_0 = {float_0: bool_0, bool_0: float_0, bool_0: bool_0}
    tuple_0 = (float_0, bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    str_0 = "~A\n/Ve!"
    set_0 = {str_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    str_0 = "\x0bh!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    bytes_0 = b"\x03\xeb\xf3\x17\xba\xbez\xef\xc2\xa5\xb4\xbc\xeba=\xfebS"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    bool_0 = True
    int_0 = 1112
    tuple_0 = (bool_0, bool_0, int_0)
    dict_0 = {tuple_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    bytes_0 = b"7\xc9\x92]A\xef\x8a\x18,,l\xe05D.\x1dE["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    int_0 = -1313
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    str_0 = "I1$+;WgVwx=<A\r%"
    module_0.get_new_command(str_0, str_0)


def test_case_5259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5260():
    bytes_0 = b"\xa7\xdb\x19\x8b\x01\xde"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    str_0 = "o':\n5:}pD=vo(%2"
    module_0.get_new_command(str_0, str_0)


def test_case_5262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5263():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    str_0 = ""
    none_type_0 = None
    str_1 = "[i{] /(K$\t"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    float_0 = 1418.61
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    int_0 = -643
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    str_0 = ".I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    int_0 = -2284
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    bool_0 = False
    str_0 = ""
    dict_0 = {bool_0: bool_0, str_0: str_0}
    tuple_0 = (bool_0, dict_0, bool_0)
    tuple_1 = (bool_0, tuple_0)
    bool_1 = False
    tuple_2 = (bool_0, tuple_1, bool_1)
    module_1.object(*tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    bytes_0 = b"\xd2MA\xec\xb7\xec\xd0\xcc\xf0\x13*\xf6\xcfK\x05\xa5_"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    object_0 = module_1.object()
    int_0 = 2596
    float_0 = -3427.44
    tuple_0 = (int_0, float_0, int_0)
    str_0 = "E"
    tuple_1 = (object_0, tuple_0, str_0)
    bool_0 = False
    dict_0 = {tuple_1: tuple_0, float_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    complex_0 = 3370.84 + 1490.387j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_5273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5274():
    str_0 = " vX\x0ct{\n\x0b$e:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    bytes_0 = b"\x051"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    str_0 = "<I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    int_0 = 726
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [dict_0, dict_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    str_0 = "tD@d'C+dQ7uu&`m}8$8;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    int_0 = 3304
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    str_0 = "xgo\t;%>n:.n#cb9M<E>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    str_0 = "I~P@9#%j+(hOl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    int_0 = -1226
    bytes_0 = b"\xae\x9a*"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    complex_0 = -1106 + 190.52j
    list_0 = [complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    int_0 = -1827
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    float_0 = -2415.405
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    str_0 = "]x\nR8oK\x0bm8"
    module_0.get_new_command(str_0, str_0)


def test_case_5291():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5292():
    int_0 = -1697
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    list_0 = []
    float_0 = -532.85743
    list_1 = [list_0, float_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    float_0 = -841.167765
    module_0.get_new_command(float_0, float_0)


def test_case_5295():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5296():
    str_0 = "4<ewr`^"
    module_0.match(str_0, str_0)


def test_case_5297():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5298():
    int_0 = 1112
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    int_0 = 1387
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    str_0 = "4@%'\n\x0cr"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    int_0 = -839
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    complex_0 = -2310.7 - 768j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    float_0 = -1460.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    bytes_0 = b"\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    int_0 = 967
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    bytes_0 = b"E\xf8Ii"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    str_0 = "eAFf-@!#(xO\x0b_@&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    str_0 = 'G~"b'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    bytes_0 = b"\x11\x97\xc4\x9d\x9a\x1a#\xc4M'C\xf5\xc1#\x942\xa8\xcc\xb6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    none_type_0 = None
    str_0 = "CFA++x"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = "B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    bytes_0 = b""
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    str_0 = "WId&\t>BmQF~)G"
    str_1 = ">:>uL-D#6"
    str_2 = "~"
    str_3 = "\x0b"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    int_0 = -4619
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    bytes_0 = b"\xa5\x01\xfe\xac\x16"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    bytes_0 = b"\xa7\xe7\x83\xa7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    complex_0 = -2558.8964 + 2239.47j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    bytes_0 = b"\xbe\x88\xe3v!z\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    int_0 = 1257
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    float_0 = 1995.344
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (list_0,)
    tuple_1 = (float_0, float_0, list_0, tuple_0)
    module_1.object(**tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    str_0 = "krU\\z\x0b ?Yvsg 4hP|,i("
    tuple_0 = (str_0,)
    str_1 = "[3a\x0b~O|HM,(]'\"ovU"
    list_0 = [tuple_0, str_0, str_1]
    module_0.match(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    str_0 = " x:a#!T@{Z2d=JeT2\r`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    float_0 = -2887.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    int_0 = 17
    module_0.get_new_command(int_0, int_0)


def test_case_5328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5329():
    bytes_0 = b"\xbe\xab^\xe3\xb0\xb6\xe0\x9d\x08y!\x016\xaf(\x13e5"
    module_0.match(bytes_0, bytes_0)


def test_case_5330():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5331():
    str_0 = "7z`\nP yT:TKtO!"
    int_0 = -1511
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    float_0 = -1454.33451
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    complex_0 = -1583 - 2493.969j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    bool_0 = True
    str_0 = "jB\r]"
    tuple_0 = (bool_0, str_0)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    bytes_0 = b"\x06\xbb\xbd\xc9\xccyG\xb9<\x10"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bool_0 = True
    bytes_0 = b"\xd3'\xfe\xe5\xc3\x7f/\xd6\x92Ei\x993\x10\xce\x16r0"
    set_0 = {bytes_0, bytes_0, bytes_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    bytes_0 = b" a$\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    bytes_0 = b"\x8b\x8ew\xeeR\xbc)\xccMc\xcc\xe9\x9bj\xc4#"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    int_0 = 1170
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    bytes_0 = b"\xa7\xbb\xa6\n8\x80\x91\xb6\xc0\xbf&\x9a\xa8(\xe0\xcff\xab\xd4"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    list_1 = [tuple_0]
    bool_0 = True
    list_2 = [list_1, bool_0, tuple_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_2, none_type_0)


def test_case_5343():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5344():
    int_0 = -2408
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    str_0 = 'oHx8#"\x0b'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    str_0 = "@Jqj,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    int_0 = 2289
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    str_0 = "BAS OaVB]`g\nP*JS"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    int_0 = 2082
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    str_0 = "~$xVQME"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    int_0 = -12
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    str_0 = "\\a]pq)jz7EMf<M&95,"
    bytes_0 = b"P\x00\xff\xc8\xd0X"
    tuple_0 = (str_0, bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    int_0 = 2075
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    int_0 = 2428
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    int_0 = 1415
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    str_0 = ">q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    str_0 = "r+PR)@~DrGF"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_5359():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5360():
    bytes_0 = b"-\x94\xcd\x1d\xa8\xd4\xfc\xf2\xf9DY\x91\xddu\xe6ae%"
    set_0 = {bytes_0, bytes_0, bytes_0}
    float_0 = -2206.4958
    tuple_0 = (set_0, float_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    complex_0 = 5107 + 1453.93246j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    float_0 = 2724.00602
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    bool_0 = False
    bool_1 = False
    list_0 = []
    tuple_0 = (bool_1, bool_1, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    int_0 = -291
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    str_0 = "J0\x0c7,r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    float_0 = -2661.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    tuple_0 = ()
    int_0 = -908
    set_0 = {int_0, tuple_0, tuple_0}
    tuple_1 = (tuple_0, int_0, int_0, set_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    bytes_0 = b"\xedU\xd7!\xefO\x8d\xb2\xc4"
    module_0.match(bytes_0, bytes_0)


def test_case_5369():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5370():
    str_0 = "p^9w^8qG8dz9\\pB72"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    str_0 = "U}&L!Ct^Ke7`On)"
    set_0 = {str_0}
    list_0 = [set_0, str_0, set_0]
    module_0.match(list_0, set_0)


def test_case_5373():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5374():
    str_0 = 'D%,q";vi('
    str_1 = "\x0c/"
    dict_0 = {str_0: str_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    bytes_0 = b"\x93\xc5(\x06Bdfk\xbf\xbf\x1b\xb6\x16\x85\xfb\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    bytes_0 = b"\x0e\xdf7\xe3-\x96X\xe4\xb7\xac\xb3!G\xe9\x85\xeb?\x15'"
    list_0 = [bytes_0]
    list_1 = [list_0, list_0, bytes_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    list_0 = []
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    float_0 = -505.9
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = -179
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    str_0 = "U}&7x'H"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    str_0 = "{Gu/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    str_0 = "GJ\nX{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    bytes_0 = b"Lp\xd5$\xd8\x9cDE\xafW\x8c\xa5\xc5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    float_0 = -14.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bool_0 = False
    complex_0 = -1768.2 + 71.192682j
    set_0 = {bool_0, complex_0, bool_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    complex_0 = -1931.878 - 1238.025j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    float_0 = 2456.21645
    module_0.match(float_0, float_0)


def test_case_5392():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5393():
    bytes_0 = b"j\xce\xa9Y\xf4\x17"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    str_0 = "x@(=I&_h+IRZV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    int_0 = -757
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bytes_0 = b"\xf6\x97*\xa9?%z/a\xb9\xfaLBR\xb9;\x15j"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    str_0 = "r&E\\ bfoL)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    int_0 = -3762
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    float_0 = -308.075
    bytes_0 = b"\x12Q\xb0"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    bytes_0 = b"\x18H\xa03\xa4\xa5^\xd5\xf9e\x11\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5402():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    int_0 = 1671
    list_1 = [list_0, list_0, list_0, int_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    str_0 = "x0RXe\\\x0b=q[Gba|F%7pK("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    dict_1 = {}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    int_0 = 644
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    bytes_0 = b"*\x1bB\x98\x01\xc8\x13f-\xd2\xb9\nn"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    bytes_0 = b"\xe39\xbc\xf2-\x06f\xdb\xda\xad\x84\xfba t\x91-\x00"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    int_0 = 3670
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    bytes_0 = b"E\xab|\xec\xa7\x8d\xdc;\x12\xfa\x8f\xb2\xeb\x93\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    bytes_0 = b'\x1e"V\xc2\x1cZ\x93\xc5H\x81\xcf\x18\xc1$L'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    bytes_0 = b"}2\xff"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    bytes_0 = b"\xa6\xd5\x1e\x1f\x1c\xc9\x89\x17W\x90\x92\xb9\x0cs"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_5416():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5417():
    bytes_0 = b"s$\xbe\xde\xe6]\x16\x06\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    str_0 = ".U6*Z;0Ju:5\rXh:wl\nnv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    bytes_0 = b"!37\x00\xc8\x80>"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    str_0 = "? "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    complex_0 = 3127.097579 + 1501.9876j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    int_0 = -457
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    int_0 = -1422
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    int_0 = -2224
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    str_0 = "\tW5*0%.^mCh2)yzp\r"
    int_0 = -482
    bytes_0 = b"d\xf0}\xbd\x89\x9c\x1f\xe3\xcc\x1f.MdYh\xde\x08WI"
    tuple_0 = (str_0, int_0, bytes_0, bytes_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    float_0 = 1596.0
    module_0.match(float_0, float_0)


def test_case_5428():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5429():
    float_0 = -2671.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    set_0 = set()
    bool_0 = True
    bool_1 = True
    tuple_0 = (set_0, set_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    int_0 = -2392
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    float_0 = -51.751
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    bool_0 = True
    bytes_0 = b"\xa3\x90\xef"
    tuple_0 = (bool_0, bytes_0)
    float_0 = 389.637
    tuple_1 = (tuple_0, float_0, float_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    bytes_0 = b"\xc6\x9c\xadHX/\r\x07\xbd\x98"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    int_0 = 1928
    int_1 = 2460
    list_0 = [int_0, int_0]
    tuple_0 = (int_0, int_1, list_0)
    list_1 = [tuple_0, int_1]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    str_0 = "y[1]]!w\x0bB;<\rjG%f@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    bytes_0 = b"b;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    int_0 = 1758
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    int_0 = 3238
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    str_0 = "\\!QBg\npas~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_5444():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5445():
    bytes_0 = b"\xbb\xb3\n0\xd9\x909nAl'\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    float_0 = 1127.1
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    set_0 = set()
    list_0 = [set_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    float_0 = -2615.3477
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    int_0 = -196
    module_0.get_new_command(int_0, int_0)


def test_case_5451():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5452():
    str_0 = "#RG5nAI!!ce"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    bytes_0 = b"\xfe#\xc3+TC\x96n\x86_\xe0L\xadhg\xae\xb1\xc4K"
    str_0 = "sY8!z(0RPYt"
    none_type_0 = None
    str_1 = "H4nD+T\\vG\t>A"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    str_0 = "TMU|NLzs="
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    float_0 = 1306.684
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    set_0 = set()
    list_0 = [set_0, set_0]
    str_0 = "\n.R#q9\tk{4kC (:gi~LJ"
    str_1 = "uad@r;\\dG[|\t wzi4]'q"
    dict_0 = {str_0: set_0, str_0: str_0, str_1: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    str_0 = "7p\n5="
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    str_0 = "sAp\n#XH\tST\\"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5460():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5461():
    str_0 = 'Zc;A/"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    int_0 = -3035
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    str_0 = "4-zC\x0bgL_a'/"
    bytes_0 = b"\x9a\x1e*\xac\xd9\xff-\x13@\x8d\\\xaeUl\x18\x06\xdf~R"
    list_0 = [str_0, bytes_0, bytes_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    str_0 = "GtkN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    str_0 = "\n=~^H6|YeFU"
    module_0.match(str_0, str_0)


def test_case_5466():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5467():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0]
    tuple_0 = (list_0, set_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    none_type_0 = None
    int_0 = -1257
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    int_0 = 763
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    bytes_0 = b"r\xd7\xe8\x8eD\xfaa\xc5\xb2t"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_5472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5473():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    str_0 = "X>cV8#Rhk4\x0cK!'\"4O1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    float_0 = -88.716226
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    str_0 = ":Z(7|6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    str_0 = "WLy<tJN6&Y^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    str_0 = "UC?5#M3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    int_0 = -3056
    module_0.get_new_command(int_0, int_0)


def test_case_5482():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5483():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    float_0 = 2151.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    bool_0 = True
    float_0 = -4166.7
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    int_0 = -697
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    int_0 = -1150
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    float_0 = -162.799614
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    int_0 = -4271
    float_0 = 1573.704
    list_0 = [float_0, float_0, float_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    int_0 = -1065
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    str_0 = "0*p'/s_Z_\tMJa|{KpT"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    bool_0 = True
    bytes_0 = b"\xf2\xc1"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    bytes_0 = b"*\x9f"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    bytes_0 = b"\x0f\xa370\xfc\xf2Sc\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    list_0 = [dict_0]
    module_0.match(dict_0, list_0)


def test_case_5496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5497():
    int_0 = -1263
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    bool_0 = True
    bytes_0 = b"\xe0\xeay\xf2\xcd\xf3\x81\x01"
    module_0.get_new_command(bool_0, bytes_0)


def test_case_5499():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5500():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    bytes_0 = b"\xbf\x8ac\xc8"
    module_0.match(bytes_0, bytes_0)


def test_case_5502():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5503():
    bytes_0 = b"WA\x82y\xf8B\xb6\xf3\xa7\xcd\xc7\x96\xd9\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    float_0 = 4599.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    str_0 = ">I+Sv@w\r`&C7TW@6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    bool_0 = False
    dict_0 = {}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    bytes_0 = b"\xb85\xc6fH\xf6:"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    str_0 = "'4:v.LXOD)(iF\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    bytes_0 = b"\xbe\xa4\xd4\xf7\x98I\x98S\xda\xe5\x10\x19"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "Z1TI4#\x0c"
    tuple_0 = (bool_0, bool_0, dict_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    tuple_0 = ()
    str_0 = "m4,\rEr;RA[2o\nK{"
    str_1 = "x|qHs*`VQ@.a\n\\l3"
    tuple_1 = (tuple_0, str_0, str_1)
    set_0 = set()
    tuple_2 = (set_0, str_1)
    module_0.get_new_command(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    int_0 = 1042
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    float_0 = 1851.88
    list_0 = [float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.match(tuple_0, tuple_0)


def test_case_5516():
    pass


def test_case_5517():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5518():
    list_0 = []
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    str_0 = "wpmO9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    bytes_0 = b"\x94\x9cQskW\xe7\x98\xcb\x8d\xbf\r\xae\x96y\xed;p"
    str_0 = "Bsc[I"
    bytes_1 = b"\\j\x9d"
    list_0 = [str_0, bytes_1, str_0, bytes_1]
    tuple_0 = (bytes_0, bytes_0, str_0, list_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    int_0 = 442
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    int_0 = -458
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    int_0 = 3074
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    int_0 = 1513
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    int_0 = 323
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0, int_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    int_0 = 2702
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    float_0 = -1300.224
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    str_0 = "78|\x0c]}`KKp#HK5W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    str_0 = "g(`1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    bytes_0 = b"\xc9\x0c\xa84\xc0\xeb:\xea\x12)1\x0c\x86\x0e\x96\xd8("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    bool_0 = False
    float_0 = 824.5586
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    float_0 = 336.17841
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    str_0 = '6IYif)ZiRn"ccTxI'
    complex_0 = 1113.7318 - 2114.4721j
    dict_0 = {str_0: str_0, str_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    bool_0 = False
    str_0 = "H95^/~{jVy/"
    tuple_0 = (bool_0, bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    str_0 = ";$X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    bytes_0 = b'8"\x9ctK\x08'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    str_0 = "\x0cl*w\t,wB"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    bytes_0 = b"\xf9b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    int_0 = -2485
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, int_0, int_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    int_0 = -1387
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    float_0 = 3045.867
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    dict_0 = {}
    float_0 = -2752.0
    tuple_0 = (dict_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    int_0 = 3256
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    int_0 = -598
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    int_0 = -1438
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    float_0 = 1407.88
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    dict_0 = {}
    float_0 = -762.0
    tuple_0 = (dict_0, dict_0, dict_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    int_0 = 173
    module_0.get_new_command(int_0, int_0)


def test_case_5553():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5554():
    float_0 = -1393.75
    int_0 = -2717
    tuple_0 = (float_0, int_0)
    module_0.get_new_command(tuple_0, float_0)


def test_case_5555():
    pass


def test_case_5556():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5557():
    bytes_0 = b"\x0c"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    str_0 = "\r8!p\nB[L*$:XTO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    complex_0 = -2108 + 874.32259j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    bool_0 = False
    str_0 = "d&}5G"
    dict_0 = {str_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, str_0, dict_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    str_0 = "gr4Izj).!8t*q&\x0bkf5H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    int_0 = -323
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    bytes_0 = b"\x9eG\xd9\x18\x9a\x14\xe6\xfb}P\xeb%\x0e\x0cx"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    bytes_0 = b"\xd7\xc8\x8bD\x95\xe9\xb39\xd5-\xc7\x13V8oW"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    int_0 = 920
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    int_0 = 365
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    float_0 = 286.728
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    str_0 = "bmB7}1Q7ir<cCe"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    str_0 = "uZKVp57\x0b%o$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    int_0 = 5097
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    int_0 = 1060
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    bytes_0 = b"\x01co\x0e\xc0\xfdUj\xfb\xdc\xaf\x07V4I"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    float_0 = 3300.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_5574():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5575():
    bytes_0 = b")h\x81\xaeZ\x7f\xe1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    complex_0 = -1894.07025 - 623.7j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    float_0 = -733.3
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    bytes_0 = b"\xbe\xf5\xb97\xf6\xb00/hoX\xf2\x07\xc1\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    int_0 = 207
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    str_0 = "tk^RoHNbI\\ KV*j>-t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    int_0 = 104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    int_0 = -496
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    complex_0 = 184.9 - 949.116j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    str_0 = "'4ZIsntWe;n(C-"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    str_0 = 'TLns1w-i"JBQ`Wdg'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    int_0 = -282
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    float_0 = -2282.8216
    set_0 = {float_0, float_0}
    float_1 = -1844.353577
    module_0.match(set_0, float_1)


def test_case_5590():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5591():
    complex_0 = -1797.001557 - 4596.9343j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_5592():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5593():
    str_0 = "BiHpe1qiu_LC\nif8Hh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    bytes_0 = b"\x0c\xfer.L\xe1\x8f\x1b"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    int_0 = -1743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    bytes_0 = b"\xd6\xd5\xee\xa8\xad\xc7\xa8S@Y\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    none_type_0 = None
    int_0 = 1339
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    int_0 = -18
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    int_0 = -6606
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    int_0 = -1334
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    int_0 = 2902
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    str_0 = "' - 6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    int_0 = -3562
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    bytes_0 = b"\xb8\xff\xa37\xbf\xc7\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    bytes_0 = b"N\xb0\x8eJgI:q\xc34k\x04\x12\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    str_0 = "c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    str_0 = "\t&xyV+p,}Uji>%="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    str_0 = "iK"
    list_0 = [str_0]
    list_1 = [list_0, str_0, list_0, str_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    complex_0 = -480.4492 + 719.9205j
    list_0 = [complex_0, complex_0, complex_0]
    str_0 = "Tl,{gNGtr\x0b+{Cg"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    float_0 = -3406.1
    list_0 = [float_0, float_0, float_0, float_0]
    str_0 = "\t3L%Ra\n?"
    none_type_0 = None
    str_1 = "U_[NhX"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    str_0 = "]g]PN?aYHy~\x0ch\x0c(Gz"
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0, list_0)
    list_1 = [str_0, str_0, tuple_0, bool_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    set_0 = set()
    bool_0 = True
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    bytes_0 = b"\x94\x19\xe4\xaf\x01\xe8\x83\xa1\x90'\x80\x92\xb9\\=\x85\x93a)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    bytes_0 = b"o\xf3\xd9\x04\xb1\x93\x9bpX|A\xc0\xad\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    str_0 = "A14U"
    tuple_0 = (str_0,)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    float_0 = -653.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    str_0 = "E>>^D-_YMS!fMOG3=$6"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    int_0 = 2364
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    str_0 = "CE!+j#2L^FdA;)jNEAg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    complex_0 = -834.1 + 4026.789489j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    bytes_0 = b"-m\x17\x967\xe6"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    complex_0 = -2452.187646 + 2310.81j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5631():
    int_0 = -585
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    str_0 = "/wkF7rLmmo9Vv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    float_0 = -149.674
    bytes_0 = b"\xc9\x02Y\xff\x89\xb1h"
    tuple_0 = (float_0, bytes_0)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    int_0 = -2548
    set_0 = {int_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5635():
    object_0 = module_1.object()
    complex_0 = -1552 - 1467.82j
    dict_0 = {
        object_0: object_0,
        object_0: complex_0,
        object_0: complex_0,
        object_0: complex_0,
    }
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5636():
    int_0 = 424
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    complex_0 = 254.1 + 1462.501j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    float_0 = 2918.0
    list_0 = []
    bool_0 = True
    dict_0 = {bool_0: float_0}
    tuple_0 = (list_0, list_0, list_0, dict_0)
    bool_1 = False
    tuple_1 = (tuple_0, bool_0, float_0, bool_1)
    tuple_2 = (float_0, tuple_1)
    complex_0 = -1260 - 265.3j
    module_0.match(tuple_2, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    int_0 = -2824
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    int_0 = -620
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    bytes_0 = b"%>V\x1f\xe6\xb6\x1eL\x1b"
    list_0 = [bytes_0]
    module_1.object(*list_0)
