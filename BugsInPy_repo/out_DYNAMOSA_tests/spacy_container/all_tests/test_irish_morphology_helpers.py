# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import irish_morphology_helpers as module_0


def test_case_0():
    str_0 = "\tX\tiNa"
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_1():
    str_0 = "B]XXIPJbs(@ybvu3uz"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "B]XXIPJbs(@ybvu3uz"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b")\x8d"
    var_0 = module_0.devoice(bytes_0)
    assert var_0 == b")\x8d"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False
    module_0.ends_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b")\x8d"
    var_0 = module_0.ends_dentals(bytes_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(bytes_0)
    assert var_1 is False
    module_0.ends_with_vowel(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -1320
    module_0.starts_with_vowel(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = ""
    var_0 = module_0.devoice(str_0)
    assert var_0 == ""
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(str_0)
    assert var_1 == ""
    var_2 = module_0.starts_with_vowel(var_1)
    assert var_2 is False
    var_3 = module_0.devoice(var_1)
    assert var_3 == ""
    module_0.devoice(var_2)


def test_case_6():
    str_0 = "B]XXIPJbs(@ybvu3uz"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "B]XXIPJbs(@ybvu3uz"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    int_0 = -327
    tuple_0 = module_0.deduplicate(dict_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    module_0.starts_with_vowel(int_0)


def test_case_8():
    bytes_0 = b"\xc7@\xf5\x02d\xbb\xb9s\x83\x0eE"
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_0.deduplicate(list_0)
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


def test_case_9():
    str_0 = "z.JcbL?|wrbgg"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "z.JcbL?|wrbg"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.starts_with_vowel(var_0)
    assert var_1 is False
    var_2 = module_0.devoice(str_0)
    assert var_2 == "z.JcbL?|wrbgg"
    var_3 = module_0.deduplicate(str_0)
    assert var_3 == "z.JcbL?|wrbg"


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "B]XXIPJbs(@ybvu3un"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "B]XXIPJbs(@ybvu3un"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.ends_dentals(var_0)
    assert var_1 is True
    var_2 = module_0.starts_with_vowel(str_0)
    assert var_2 is False
    str_1 = "\tX\tiNa"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    set_0 = {var_2, var_3}
    var_4 = module_0.deduplicate(set_0)
    var_5 = module_0.devoice(var_4)
    module_0.starts_with_vowel(var_1)


def test_case_11():
    str_0 = "B]XXIPJbs(@ybvu3uz"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "B]XXIPJbs(@ybvu3uz"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "B]XXIPJbs(@ybvu3uz"
    var_2 = module_0.devoice(var_0)
    assert var_2 == "B]XXIPJbs(@ybvu3uz"
    str_1 = "\ti"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.deduplicate(var_0)
    assert var_4 == "B]XXIPJbs(@ybvu3uz"
    var_5 = module_0.devoice(var_4)
    assert var_5 == "B]XXIPJbs(@ybvu3uz"
    var_6 = module_0.starts_with_vowel(str_1)
    assert var_6 is False
    var_7 = module_0.devoice(str_0)
    assert var_7 == "B]XXIPJbs(@ybvu3uz"
    var_8 = module_0.ends_dentals(var_2)
    assert var_8 is False
    var_9 = module_0.devoice(var_1)
    assert var_9 == "B]XXIPJbs(@ybvu3uz"
    var_10 = module_0.ends_dentals(str_0)
    assert var_10 is False
    str_2 = ""
    var_11 = module_0.ends_with_vowel(str_2)
    assert var_11 is False


def test_case_12():
    str_0 = ""
    var_0 = module_0.ends_dentals(str_0)
    assert var_0 is False
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    str_1 = "r^Y_nk!(\nV6\x0csF"
    var_1 = module_0.devoice(str_1)
    assert var_1 == "r^Y_nk!(\nV6\x0csF"


def test_case_13():
    str_0 = "r^Y_!(&\nV6\x0csF"
    var_0 = module_0.devoice(str_0)
    assert var_0 == "r^Y_!(&\nV6\x0csF"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "BXXIPJbs(@ybvu3uz"
    var_0 = module_0.deduplicate(str_0)
    assert var_0 == "BXXIPJbs(@ybvu3uz"
    assert module_0.consonants == [
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    ]
    assert module_0.broad_vowels == ["a", "á", "o", "ó", "u", "ú"]
    assert module_0.slender_vowels == ["e", "é", "i", "í"]
    assert module_0.vowels == ["a", "á", "o", "ó", "u", "ú", "e", "é", "i", "í"]
    var_1 = module_0.devoice(var_0)
    assert var_1 == "BXXIPJbs(@ybvu3uz"
    var_2 = module_0.devoice(var_0)
    assert var_2 == "BXXIPJbs(@ybvu3uz"
    str_1 = "\t"
    var_3 = module_0.ends_dentals(str_1)
    assert var_3 is False
    var_4 = module_0.ends_with_vowel(str_1)
    assert var_4 is False
    var_5 = module_0.deduplicate(str_0)
    assert var_5 == "BXXIPJbs(@ybvu3uz"
    var_6 = module_0.ends_with_vowel(var_2)
    assert var_6 is False
    var_7 = module_0.starts_with_vowel(str_1)
    assert var_7 is False
    var_8 = module_0.devoice(str_0)
    assert var_8 == "BXXIPJbs(@ybvu3uz"
    str_2 = "r^qnk!(]V6\x0csd"
    var_9 = module_0.deduplicate(str_0)
    assert var_9 == "BXXIPJbs(@ybvu3uz"
    var_10 = module_0.devoice(str_2)
    assert var_10 == "r^qnk!(]V6\x0cst"
    module_0.ends_with_vowel(var_6)
