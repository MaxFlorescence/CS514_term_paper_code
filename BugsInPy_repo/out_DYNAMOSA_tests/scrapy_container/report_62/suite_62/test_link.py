# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import link as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xd9\xe9\xcf\xca\x9b\xdb\xb0\x82Gy\x80#\xb9Z"
    str_0 = "7K13]DO"
    none_type_0 = None
    link_0 = module_0.Link(none_type_0, fragment=none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    tuple_0 = (link_0,)
    link_1 = module_0.Link(bytes_0, none_type_0, tuple_0)
    none_type_1 = None
    link_2 = module_0.Link(str_0, nofollow=none_type_1)
    assert f"{type(link_2).__module__}.{type(link_2).__qualname__}" == "link.Link"
    link_2.__eq__(bytes_0)


def test_case_1():
    none_type_0 = None
    link_0 = module_0.Link(none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__hash__()
    assert var_0 == 477042


def test_case_2():
    none_type_0 = None
    link_0 = module_0.Link(none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__eq__(link_0)
    assert var_0 is True


def test_case_3():
    dict_0 = {}
    none_type_0 = None
    link_0 = module_0.Link(none_type_0, none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    link_1 = module_0.Link(dict_0)
    var_0 = link_1.__repr__()
    assert var_0 == "Link(url={}, text='', fragment='', nofollow=False)"
    var_1 = var_0.__eq__(var_0)
    link_2 = module_0.Link(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 0.0
    none_type_0 = None
    link_0 = module_0.Link(none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__hash__()
    assert var_0 == 477042
    var_1 = var_0.__repr__()
    assert var_1 == "477042"
    var_2 = module_0.Link(var_0)
    var_3 = link_0.__eq__(link_0)
    assert var_3 is True
    var_4 = var_0.__repr__()
    assert var_4 == "477042"
    link_1 = module_0.Link(float_0, var_4)
    var_5 = link_1.__hash__()
    assert var_5 == 8474147104644719677
    var_6 = var_5.__repr__()
    assert var_6 == "8474147104644719677"
    var_7 = module_1.object()
    link_2 = module_0.Link(var_3)
    link_3 = module_0.Link(var_3, fragment=var_3, nofollow=var_0)
    var_8 = var_6.__hash__()
    assert var_8 == -4212267002253866046
    var_9 = var_0.__repr__()
    assert var_9 == "477042"
    var_10 = var_2.__eq__(link_2)
    assert var_10 is False
    var_11 = var_3.__hash__()
    assert var_11 == 1
    link_4 = module_0.Link(var_7, fragment=float_0)
    var_12 = link_4.__repr__()
    assert (
        var_12
        == "Link(url=<object object at 0x7f8d26f07380>, text='', fragment=0.0, nofollow=False)"
    )
    var_13 = var_6.__repr__()
    assert var_13 == "'8474147104644719677'"
    var_14 = var_10.__repr__()
    assert var_14 == "False"
    var_15 = link_3.__repr__()
    assert var_15 == "Link(url=True, text='', fragment=True, nofollow=477042)"
    var_16 = var_14.__repr__()
    assert var_16 == "'False'"
    link_5 = module_0.Link(link_0, fragment=var_1)
    var_17 = link_2.__repr__()
    assert var_17 == "Link(url=True, text='', fragment='', nofollow=False)"
    link_5.__eq__(var_0)


def test_case_5():
    float_0 = 0.0
    none_type_0 = None
    link_0 = module_0.Link(none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__hash__()
    assert var_0 == 477042
    var_1 = var_0.__repr__()
    assert var_1 == "477042"
    var_2 = link_0.__hash__()
    assert var_2 == 477042
    var_3 = var_1.__eq__(float_0)
    var_4 = var_3.__hash__()
    var_5 = link_0.__eq__(link_0)
    assert var_5 is True
    var_6 = var_4.__hash__()
    var_7 = var_6.__repr__()
    var_8 = var_1.__repr__()
    assert var_8 == "'477042'"
    link_1 = module_0.Link(float_0, fragment=float_0)
    var_9 = var_8.__hash__()
    assert var_9 == -7855276584257576038
    bool_0 = False
    link_2 = module_0.Link(bool_0)
    complex_0 = -429.416027 + 1678.6194j
    var_10 = link_2.__hash__()
    assert var_10 == 0
    var_11 = link_1.__repr__()
    assert var_11 == "Link(url=0.0, text='', fragment=0.0, nofollow=False)"
    var_12 = var_10.__eq__(link_2)
    var_13 = link_1.__hash__()
    assert var_13 == 0
    link_3 = module_0.Link(float_0, fragment=complex_0)
    var_14 = link_3.__repr__()
    assert (
        var_14
        == "Link(url=0.0, text='', fragment=(-429.416027+1678.6194j), nofollow=False)"
    )
    var_15 = link_1.__repr__()
    assert var_15 == "Link(url=0.0, text='', fragment=0.0, nofollow=False)"
    var_16 = var_12.__repr__()
    var_17 = link_3.__repr__()
    assert (
        var_17
        == "Link(url=0.0, text='', fragment=(-429.416027+1678.6194j), nofollow=False)"
    )
    var_18 = var_17.__repr__()
    assert (
        var_18
        == "\"Link(url=0.0, text='', fragment=(-429.416027+1678.6194j), nofollow=False)\""
    )
    link_4 = module_0.Link(var_17)
    assert f"{type(link_4).__module__}.{type(link_4).__qualname__}" == "link.Link"
    var_19 = var_13.__repr__()
    assert var_19 == "0"
    var_20 = var_14.__eq__(bool_0)
    var_21 = link_1.__hash__()
    assert var_21 == 0
    var_22 = link_2.__repr__()
    assert var_22 == "Link(url=False, text='', fragment='', nofollow=False)"
    link_5 = module_0.Link(var_20)
    var_23 = var_20.__repr__()
    var_24 = var_22.__repr__()
    assert var_24 == "\"Link(url=False, text='', fragment='', nofollow=False)\""
    var_25 = var_21.__repr__()
    assert var_25 == "0"
    var_26 = link_3.__eq__(link_1)
    assert var_26 is False
    var_27 = var_26.__eq__(var_10)
    assert var_27 is True
    link_6 = module_0.Link(float_0, var_20)


def test_case_6():
    float_0 = 0.0
    none_type_0 = None
    link_0 = module_0.Link(none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__hash__()
    assert var_0 == 477042
    var_1 = var_0.__repr__()
    assert var_1 == "477042"
    var_2 = link_0.__hash__()
    assert var_2 == 477042
    var_3 = var_1.__eq__(float_0)
    var_4 = var_3.__hash__()
    var_5 = link_0.__eq__(link_0)
    assert var_5 is True
    var_6 = var_4.__hash__()
    var_7 = var_6.__repr__()
    var_8 = var_1.__repr__()
    assert var_8 == "'477042'"
    link_1 = module_0.Link(float_0, var_8, var_2)
    var_9 = var_8.__hash__()
    assert var_9 == -7855276584257576038
    bool_0 = False
    link_2 = module_0.Link(bool_0)
    complex_0 = -429.416027 + 1678.6194j
    var_10 = link_2.__hash__()
    assert var_10 == 0
    var_11 = link_1.__repr__()
    assert var_11 == "Link(url=0.0, text=\"'477042'\", fragment=477042, nofollow=False)"
    var_12 = var_10.__eq__(link_2)
    var_13 = link_1.__hash__()
    assert var_13 == -7855276584257362712
    link_3 = module_0.Link(float_0, fragment=complex_0)
    var_14 = link_3.__repr__()
    assert (
        var_14
        == "Link(url=0.0, text='', fragment=(-429.416027+1678.6194j), nofollow=False)"
    )
    var_15 = link_1.__repr__()
    assert var_15 == "Link(url=0.0, text=\"'477042'\", fragment=477042, nofollow=False)"
    var_16 = var_12.__repr__()
    var_17 = link_3.__repr__()
    assert (
        var_17
        == "Link(url=0.0, text='', fragment=(-429.416027+1678.6194j), nofollow=False)"
    )
    var_18 = var_17.__repr__()
    assert (
        var_18
        == "\"Link(url=0.0, text='', fragment=(-429.416027+1678.6194j), nofollow=False)\""
    )
    link_4 = module_0.Link(var_17)
    assert f"{type(link_4).__module__}.{type(link_4).__qualname__}" == "link.Link"
    var_19 = var_13.__repr__()
    assert var_19 == "-7855276584257362712"
    var_20 = var_14.__eq__(bool_0)
    var_21 = link_1.__hash__()
    assert var_21 == -7855276584257362712
    var_22 = link_2.__repr__()
    assert var_22 == "Link(url=False, text='', fragment='', nofollow=False)"
    link_5 = module_0.Link(var_20)
    var_23 = var_20.__repr__()
    var_24 = var_22.__repr__()
    assert var_24 == "\"Link(url=False, text='', fragment='', nofollow=False)\""
    var_25 = var_21.__repr__()
    assert var_25 == "-7855276584257362712"
    var_26 = link_3.__eq__(link_1)
    assert var_26 is False
    var_27 = var_26.__eq__(var_10)
    assert var_27 is True
    link_6 = module_0.Link(float_0, var_20)
