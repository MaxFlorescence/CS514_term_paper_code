# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import format as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"M\xd2B\xa73"
    module_0.InputPipeProcessWrapper(bytes_0)


def test_case_1():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b""
    module_0.InputPipeProcessWrapper(bytes_0)


def test_case_3():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.__exit__(var_0, gzip_wrapper_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_0.__exit__(none_type_0, none_type_0, bzip2_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_0.InputPipeProcessWrapper(none_type_0)


def test_case_6():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = gzip_wrapper_0.pipe_reader(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    gzip_wrapper_1 = module_0.GzipWrapper()
    assert gzip_wrapper_1.compression_level is None


@pytest.mark.xfail(strict=True)
def test_case_7():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_0.create_subprocess(var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    set_0 = {bzip2_wrapper_0, bzip2_wrapper_0, bzip2_wrapper_0, bzip2_wrapper_0}
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_0.writeLine(set_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.__exit__(none_type_0, bzip2_wrapper_0, bzip2_wrapper_0)
    assert var_0.closed is True
    var_2 = var_0.__enter__()
    var_3 = var_0.abort()
    var_3.pipe_writer(bzip2_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    gzip_wrapper_0.pipe_writer(gzip_wrapper_0)


def test_case_11():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.__exit__(var_0, var_0, none_type_0)
    assert var_0.closed is True


@pytest.mark.xfail(strict=True)
def test_case_12():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = gzip_wrapper_0.pipe_writer(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_1.closed is False
    var_2 = var_1.close()
    assert var_0.closed is True
    assert var_1.closed is True
    var_2.__exit__()


def test_case_13():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.close()
    assert var_0.closed is True


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    module_0.OutputPipeProcessWrapper(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_0.create_subprocess(none_type_0)


def test_case_16():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    list_0 = [gzip_wrapper_0, gzip_wrapper_0, gzip_wrapper_0]
    chain_0 = module_0.Chain(*list_0)
    assert f"{type(chain_0).__module__}.{type(chain_0).__qualname__}" == "format.Chain"
    assert (
        f"{type(chain_0.args).__module__}.{type(chain_0.args).__qualname__}"
        == "builtins.tuple"
    )
    assert len(chain_0.args) == 3
    var_0 = chain_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.seekable()
    assert var_1 is False


def test_case_17():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    var_0 = chain_0.pipe_reader(chain_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "format.Chain"
    assert var_0.args == ()


@pytest.mark.xfail(strict=True)
def test_case_18():
    bytes_0 = b"\xdfa[ee\x11\x042\xad\xa2\x8a\xcbw\xc0]\\t\x06\xa2"
    chain_0 = module_0.Chain(*bytes_0)
    assert f"{type(chain_0).__module__}.{type(chain_0).__qualname__}" == "format.Chain"
    assert chain_0.args == (
        223,
        97,
        91,
        101,
        101,
        17,
        4,
        50,
        173,
        162,
        138,
        203,
        119,
        192,
        93,
        92,
        116,
        6,
        162,
    )
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    chain_0.pipe_writer(bytes_0)


def test_case_19():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    var_0 = chain_0.pipe_writer(chain_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "format.Chain"
    assert var_0.args == ()


@pytest.mark.xfail(strict=True)
def test_case_20():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    gzip_wrapper_0 = module_0.GzipWrapper(chain_0)
    assert (
        f"{type(gzip_wrapper_0).__module__}.{type(gzip_wrapper_0).__qualname__}"
        == "format.GzipWrapper"
    )
    assert (
        f"{type(gzip_wrapper_0.compression_level).__module__}.{type(gzip_wrapper_0.compression_level).__qualname__}"
        == "format.Chain"
    )
    bool_0 = False
    gzip_wrapper_0.pipe_writer(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    gzip_wrapper_0.pipe_writer(gzip_wrapper_0)


def test_case_22():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None


def test_case_23():
    chain_0 = module_0.Chain()
    assert chain_0.args == ()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    file_wrapper_0 = module_0.FileWrapper(chain_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    file_wrapper_0 = module_0.FileWrapper(gzip_wrapper_0)
    file_wrapper_0.close()


def test_case_25():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    file_wrapper_0 = module_0.FileWrapper(gzip_wrapper_0)
    var_0 = file_wrapper_0.__enter__()


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    file_wrapper_0 = module_0.FileWrapper(none_type_0)
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    file_wrapper_0.__exit__()


@pytest.mark.xfail(strict=True)
def test_case_27():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    file_wrapper_0 = module_0.FileWrapper(gzip_wrapper_0)
    file_wrapper_0.__iter__()


def test_case_28():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    with pytest.raises(RuntimeError):
        var_0.close()


def test_case_29():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None


def test_case_30():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.__enter__()


def test_case_31():
    format_0 = module_0.Format()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    assert (
        f"{type(module_0.Format.hdfs_reader).__module__}.{type(module_0.Format.hdfs_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_reader).__module__}.{type(module_0.Format.pipe_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.hdfs_writer).__module__}.{type(module_0.Format.hdfs_writer).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_writer).__module__}.{type(module_0.Format.pipe_writer).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    gzip_wrapper_0 = module_0.GzipWrapper(format_0)
    assert (
        f"{type(gzip_wrapper_0).__module__}.{type(gzip_wrapper_0).__qualname__}"
        == "format.GzipWrapper"
    )
    assert (
        f"{type(gzip_wrapper_0.compression_level).__module__}.{type(gzip_wrapper_0.compression_level).__qualname__}"
        == "format.Format"
    )
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.readable()


def test_case_32():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    gzip_wrapper_1 = module_0.GzipWrapper()
    assert gzip_wrapper_1.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_1.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.writable()


def test_case_33():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_reader(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.InputPipeProcessWrapper"
    )
    var_1 = var_0.seekable()


def test_case_34():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.__enter__()


def test_case_35():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = gzip_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.readable()


def test_case_36():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.writable()


def test_case_37():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    none_type_0 = None
    var_0 = bzip2_wrapper_0.pipe_writer(none_type_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "format.OutputPipeProcessWrapper"
    )
    assert var_0.closed is False
    assert module_0.OutputPipeProcessWrapper.WRITES_BEFORE_FLUSH == 10000
    var_1 = var_0.seekable()


@pytest.mark.xfail(strict=True)
def test_case_38():
    format_0 = module_0.Format()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    assert (
        f"{type(module_0.Format.hdfs_reader).__module__}.{type(module_0.Format.hdfs_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_reader).__module__}.{type(module_0.Format.pipe_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.hdfs_writer).__module__}.{type(module_0.Format.hdfs_writer).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_writer).__module__}.{type(module_0.Format.pipe_writer).__qualname__}"
        == "builtins.method"
    )
    format_0.pipe_reader(format_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    format_0 = module_0.Format()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    assert (
        f"{type(module_0.Format.hdfs_reader).__module__}.{type(module_0.Format.hdfs_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_reader).__module__}.{type(module_0.Format.pipe_reader).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.hdfs_writer).__module__}.{type(module_0.Format.hdfs_writer).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.Format.pipe_writer).__module__}.{type(module_0.Format.pipe_writer).__qualname__}"
        == "builtins.method"
    )
    format_0.pipe_writer(format_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    text_wrapper_0 = module_0.TextWrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    text_wrapper_0.pipe_reader(text_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    text_wrapper_0 = module_0.TextWrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    text_wrapper_0.pipe_writer(text_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    gzip_wrapper_0 = module_0.GzipWrapper()
    assert gzip_wrapper_0.compression_level is None
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    gzip_wrapper_0.pipe_reader(gzip_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    bzip2_wrapper_0.pipe_reader(bzip2_wrapper_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bzip2_wrapper_0 = module_0.Bzip2Wrapper()
    assert module_0.UTF8.kwargs == {"encoding": "utf8"}
    assert module_0.Gzip.compression_level is None
    bzip2_wrapper_0.pipe_writer(bzip2_wrapper_0)
