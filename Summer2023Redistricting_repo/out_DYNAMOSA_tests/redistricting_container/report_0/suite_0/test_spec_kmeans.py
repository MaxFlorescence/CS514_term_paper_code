# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import numpy.polynomial.hermite as module_0
import spec_kmeans as module_1
import networkx.generators.small as module_2
import platform as module_3
import numpy.lib._function_base_impl as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    var_0 = module_0.hermroots(none_type_0)
    module_1.repartition(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_1.weight(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = -97
    module_1.repartition(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    bool_0 = False
    list_0 = []
    module_1.Radial_Decomposition(none_type_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    list_0 = []
    module_1.Radial_Decomposition(bool_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    bool_0 = True
    list_0 = [none_type_0, none_type_0, bool_0, none_type_0]
    module_1.Radial_Decomposition(none_type_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    var_0 = module_2.dodecahedral_graph()
    bool_0 = False
    module_1.repartition(var_0, var_0, bool_0, var_0)


def test_case_7():
    none_type_0 = None
    set_0 = set()
    int_0 = module_1.weight(set_0, none_type_0)
    assert int_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_3.python_implementation()
    module_1.weight(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    set_0 = set()
    list_0 = [set_0, set_0]
    var_0 = module_4.disp(set_0)
    module_1.Construct_Partition(list_0, var_0, list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    var_0 = module_2.dodecahedral_graph()
    bool_0 = True
    module_1.repartition(var_0, var_0, bool_0, var_0)
