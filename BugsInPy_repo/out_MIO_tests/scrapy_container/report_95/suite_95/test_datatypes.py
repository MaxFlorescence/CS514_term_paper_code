# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import datatypes as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.__deepcopy__(multi_value_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.get(multi_value_dict_0)


def test_case_2():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.setlistdefault(none_type_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.setdefault(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.setlist(none_type_0, none_type_0)
    assert len(multi_value_dict_0) == 1
    multi_value_dict_0.items()


def test_case_4():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_0) == 0


def test_case_5():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.__setitem__(none_type_0, none_type_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(none_type_0)


def test_case_6():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.getlist(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.getlist(multi_value_dict_0)


def test_case_8():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    merge_dict_0 = module_0.MergeDict()
    var_0 = multi_value_dict_0.setdefault(merge_dict_0, merge_dict_0)
    assert len(multi_value_dict_0) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "datatypes.MergeDict"
    )
    assert var_0.dicts == ()


def test_case_9():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.__repr__()
    assert var_0 == "<MultiValueDict: {}>"
    var_1 = multi_value_dict_0.setlistdefault(var_0)
    assert len(multi_value_dict_0) == 1


@pytest.mark.xfail(strict=True)
def test_case_10():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    int_0 = -1544
    var_0 = multi_value_dict_0.setlistdefault(none_type_0)
    assert len(multi_value_dict_0) == 1
    multi_value_dict_0.appendlist(none_type_0, int_0)


def test_case_11():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.setdefault(none_type_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.items()


def test_case_12():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.items()


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    site_node_0 = module_0.SiteNode(none_type_0)
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.setlist(none_type_0, none_type_0)
    assert len(multi_value_dict_0) == 1
    multi_value_dict_0.values()


def test_case_14():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.values()


def test_case_15():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    list_0 = [
        multi_value_dict_0,
        multi_value_dict_0,
        multi_value_dict_0,
        multi_value_dict_0,
    ]
    with pytest.raises(TypeError):
        multi_value_dict_0.update(*list_0, **multi_value_dict_0)


def test_case_16():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.update()


def test_case_17():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    str_0 = "{#5>_BmJ-<f/!E91"
    str_1 = "bv 2(Pw6ts5BT6x;"
    float_0 = 977.92349
    dict_0 = {str_0: str_0, str_0: str_0, str_1: float_0, str_0: str_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 2


def test_case_18():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.update(multi_value_dict_0)


def test_case_19():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_0 = multi_value_dict_0.update(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.items()
    multi_value_dict_0.update(var_0)


def test_case_21():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.appendlist(none_type_0, multi_value_dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.copy()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_1) == 1
    var_2 = var_1.update(var_1)


@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = -1631
    site_node_0 = module_0.SiteNode(int_0)
    var_0 = site_node_0.add_child(site_node_0)
    site_node_0.to_string()


def test_case_23():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    site_node_0 = module_0.SiteNode(caseless_dict_0)
    var_0 = site_node_0.to_string()
    assert var_0 == "{}\n"


@pytest.mark.xfail(strict=True)
def test_case_24():
    merge_dict_0 = module_0.MergeDict()
    module_0.CaselessDict(merge_dict_0)


def test_case_25():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )


def test_case_26():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_0 = caseless_dict_0.update(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "G"
    module_0.CaselessDict(str_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    merge_dict_1 = module_0.MergeDict(*list_0)
    merge_dict_1.__getitem__(merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    merge_dict_0.__getitem__(list_0)


def test_case_30():
    merge_dict_0 = module_0.MergeDict()
    with pytest.raises(KeyError):
        merge_dict_0.__getitem__(merge_dict_0)


def test_case_31():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.get(merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    local_cache_0 = module_0.LocalCache()
    list_0 = [local_cache_0, local_cache_0, local_cache_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    merge_dict_0.get(local_cache_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    local_cache_0 = module_0.LocalCache()
    list_0 = [local_cache_0, local_cache_0, local_cache_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    merge_dict_0.getlist(local_cache_0)


def test_case_34():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.getlist(merge_dict_0)


def test_case_35():
    local_cache_0 = module_0.LocalCache()
    list_0 = [local_cache_0, local_cache_0, local_cache_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError(*list_0)
    var_0 = merge_dict_0.items()
    var_1 = merge_dict_0.items()
    var_2 = var_1.copy()


def test_case_36():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.items()


@pytest.mark.xfail(strict=True)
def test_case_37():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    merge_dict_0.has_key(none_type_0)


def test_case_38():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.has_key(merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    bool_0 = True
    local_cache_0 = module_0.LocalCache(bool_0)
    assert (
        f"{type(local_cache_0).__module__}.{type(local_cache_0).__qualname__}"
        == "datatypes.LocalCache"
    )
    assert len(local_cache_0) == 0
    var_0 = local_cache_0.__setitem__(bool_0, local_cache_0)
    assert len(local_cache_0) == 1
    local_cache_0.__setitem__(local_cache_0, local_cache_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    bool_0 = False
    local_cache_0 = module_0.LocalCache(bool_0)
    assert (
        f"{type(local_cache_0).__module__}.{type(local_cache_0).__qualname__}"
        == "datatypes.LocalCache"
    )
    assert len(local_cache_0) == 0
    local_cache_0.__setitem__(bool_0, local_cache_0)


def test_case_41():
    bool_0 = True
    local_cache_0 = module_0.LocalCache(bool_0)
    assert (
        f"{type(local_cache_0).__module__}.{type(local_cache_0).__qualname__}"
        == "datatypes.LocalCache"
    )
    assert len(local_cache_0) == 0
    var_0 = local_cache_0.__setitem__(bool_0, local_cache_0)
    assert len(local_cache_0) == 1


def test_case_42():
    merge_dict_0 = module_0.MergeDict()


def test_case_43():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_44():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.__setitem__(multi_value_dict_0, multi_value_dict_0)


def test_case_45():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.__copy__()
    assert len(var_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_46():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.setlist(multi_value_dict_0, multi_value_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.appendlist(multi_value_dict_0, multi_value_dict_0)


def test_case_48():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.lists()


def test_case_49():
    merge_dict_0 = module_0.MergeDict()
    site_node_0 = module_0.SiteNode(merge_dict_0)


def test_case_50():
    int_0 = 1467
    site_node_0 = module_0.SiteNode(int_0)
    var_0 = site_node_0.add_child(site_node_0)
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError()


@pytest.mark.xfail(strict=True)
def test_case_51():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.__getitem__(caseless_dict_0)


def test_case_52():
    str_0 = "s5-itIv'\\#)PswM_("
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_0 = caseless_dict_0.__setitem__(str_0, str_0)
    assert len(caseless_dict_0) == 1
    merge_dict_0 = module_0.MergeDict()


@pytest.mark.xfail(strict=True)
def test_case_53():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.__delitem__(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.__contains__(caseless_dict_0)


def test_case_55():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_0 = caseless_dict_0.__copy__()


def test_case_56():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_0 = caseless_dict_0.normvalue(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.get(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.setdefault(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.pop(caseless_dict_0, *caseless_dict_0)


def test_case_60():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.__copy__()


def test_case_61():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.copy()


def test_case_62():
    local_cache_0 = module_0.LocalCache()
