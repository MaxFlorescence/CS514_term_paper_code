# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import re as module_0
import pip_unknown_command as module_1
import enum as module_2
import builtins as module_3
import locale as module_4


@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 7
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    none_type_0 = None
    module_0.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -1021
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\n\xe9LP?\xe0\x9dxu#,\x15\x9fu\xa8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 574
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    complex_0 = 1415.564242 + 2927.966603j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 1340
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b"G5M\xef\x14\xd0(@\xdc\x17\x04\x95\x7fLE\x93?\x9c\xb2i"
    int_0 = 1057
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: int_0, bytes_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    str_0 = "QwQC:g4{\x0c:"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b"\tV\xfe\x1e\xb0\xc1n\xb4\xc4\xd9\xe9%#\x17_\xfc[@l"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    str_0 = "Cv|9 Zx5_L"
    module_1.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    str_0 = ""
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b"\xa3\x88\xd7\xb7-\xfe\x82\xcf\xe3Qo\xeb\x1c\xc7u=i]"
    bytes_1 = b"\x9anQ\xe9\xe6wPKj@\x1e\xb9"
    str_0 = ",2lK,thwU89#FwcOF"
    tuple_0 = (bytes_0, bytes_1, str_0)
    module_0.split(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    complex_0 = 1291 - 981.30819j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    bool_0 = True
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bytes_0 = b"pi-\xe2\xf5\xab\x96sC\xbe\x90z\x1e]"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    int_0 = -983
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0)
    dict_0 = {}
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    enum_dict_0 = module_2._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0, enum_dict_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    int_0 = -508
    var_0 = module_0.purge()
    set_0 = {int_0, int_0, var_0}
    module_0.subn(set_0, var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    base_exception_0 = module_3.BaseException()
    module_1.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    int_0 = 1970
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = "01gk)u6"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    int_0 = 648
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b"\x0f~r\xda\xd2\xd9\xf8"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    dict_0 = {var_0: bytes_0, var_0: bytes_0, bytes_0: var_0, var_0: bytes_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    float_0 = -49.33099
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = ",lYgO{"
    float_0 = 629.0
    module_1.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    tuple_0 = ()
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    float_0 = 1611.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    int_0 = -1436
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    complex_0 = -507.055 - 3244j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    float_0 = 401.9867
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_54():
    str_0 = "yi'1A\tkZF-4\x0b$lPS,"
    none_type_0 = None
    module_0.finditer(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    list_0 = []
    base_exception_0 = module_3.BaseException(*list_0)
    none_type_0 = None
    module_1.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.fullmatch(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bool_0 = True
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_61():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    none_type_0 = None
    module_1.match(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    bytes_0 = b"\x00Q\xfb\xea\xb4\xff"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.__contains__(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    complex_0 = -1527.4667 - 4536.384j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    str_0 = "/!)VB3pq_'\\"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    list_0 = []
    str_0 = "H)O\x0cY&"
    str_1 = "5kr(}0\x0bSX.]'D*T\n!"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_0.Pattern(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    float_0 = -2799.23
    module_0.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    str_0 = "O)_x["
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__iter__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_0.compile(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    exception_0 = module_3.Exception()
    module_1.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bytes_0 = b"\x8b\xc6\x92\x88"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    list_0 = []
    str_0 = "k@\r_8f:\r=9===Em}"
    dict_0 = {str_0: str_0}
    module_3.BaseException(*list_0, **dict_0)


def test_case_78():
    enum_dict_0 = module_2._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_79():
    str_0 = "gw\x0c8><"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    float_0 = -1409.303289
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    bytes_0 = b"\xfa\xc1\xdeC\x1bQ]<\t\xa5\xce\x13\x85\xf6\xfd\xfa!\xa3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    str_0 = "=D,A\x0baOp aznc6|#="
    var_0 = module_0.escape(str_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    bytes_0 = b"\xd8x\x10\xe4i\xb8\x92\x10\xbc\xb1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_3.Exception(*list_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    bytes_0 = b"*c\xaa>\xbb\xbe\xf0,v:\xca\xf9\x11\xe4`+"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    bytes_0 = b"\x12\x01\xa4Hs"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    bytes_0 = b"`M\x9c\xc8\x87,\x96\xfc\xfc]\xbei"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    enum_dict_0 = module_2._EnumDict()
    module_1.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    float_0 = 857.64
    list_0 = [float_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    str_0 = "{o.\t"
    module_0.error(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    int_0 = 2152
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    int_0 = 970
    complex_0 = -1351 - 3773.387j
    dict_0 = {int_0: complex_0, complex_0: int_0, int_0: int_0, complex_0: complex_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    error_0 = module_4.Error()
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    str_0 = "d>K+AZ9}AtRb7"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.search(set_0, str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    none_type_0 = None
    int_0 = -3384
    module_1.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    bytes_0 = b"\xf4\x9c"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    float_0 = 2141.0
    none_type_0 = None
    module_0.compile(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    int_0 = 91
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    int_0 = 2168
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_108():
    str_0 = "q\n>>6rusno\\TXd!M<;I"
    str_1 = "'+}TWD"
    module_1.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_109():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    module_0.search(list_1, list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    int_0 = 1543
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    int_0 = -206
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    str_0 = "K1F_iSX{)}~((du"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    int_0 = 1870
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    dict_0 = {}
    module_2.EnumMeta(*list_0, **dict_0)


def test_case_118():
    str_0 = "%"
    var_0 = module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    enum_dict_0 = module_2._EnumDict()
    str_0 = "\twpU2 <?~~9\\'7\x0c"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    error_0 = module_4.Error()
    list_0 = [error_0, error_0, error_0, error_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    int_0 = -4717
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    complex_0 = 466.1 - 3667.177j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    bool_0 = True
    str_0 = "aa=}"
    dict_0 = {bool_0: bool_0, bool_0: str_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    float_0 = -375.8
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    str_0 = "&x#4A#QmIJq(]D:Cg`KL"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    str_0 = "E8_oIp~sS)Rv\x0cD"
    error_0 = module_0.error(str_0)
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    int_0 = 3230
    float_0 = 140.59
    module_0.findall(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    var_0 = module_0.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    auto_0 = module_2.auto()
    module_0.compile(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_137():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    int_0 = -723
    none_type_0 = None
    module_0.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    int_0 = -248
    none_type_0 = None
    module_0.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    bytes_0 = b"\x88p\xc6\xdf\x16\xd3"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    int_0 = -2960
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    float_0 = -848.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = -488
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    str_0 = ",2\tt4Ki~KBo)"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    error_0 = module_4.Error()
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    bytes_0 = b"4\xbe;\xa6"
    str_0 = "en1"
    list_0 = [bytes_0, str_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    bytes_0 = b"\xe0?="
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    str_0 = "{#t}"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_158():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    none_type_0 = None
    module_3.Exception(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_1.get_new_command(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    float_0 = -644.13891
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    int_0 = -208
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    list_0 = []
    int_0 = 3201
    module_0.sub(list_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    float_0 = -2571.0
    set_0 = {float_0}
    none_type_0 = None
    module_0.sub(set_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    base_exception_0 = module_3.BaseException()
    module_0.split(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    str_0 = "\x0bt56oE-w"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    base_exception_0 = module_3.BaseException(*list_1)
    module_1.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    str_0 = "1?|alN/ogZorJ"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    bytes_0 = b""
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    str_0 = ".Hyn(Ts["
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    str_0 = '=)^RD/Ng+`~"f`'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    str_0 = "Ubs0\"M~dytV'%QmxU\t"
    tuple_0 = (str_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    str_0 = "D"
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    var_1.scan(str_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    float_0 = -619.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_1.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    str_0 = "=S6N\rjpab)*\r[Q"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    complex_0 = 716 - 2230.5j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.sub(complex_0, complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0]
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    str_0 = '&$"UeLI('
    str_1 = "{[h8eUG\n[u\"If:WN'm1"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    bytes_0 = b"/M\xb2\xf4U\xce\x0fy"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    str_0 = ")%\x0bWg2qow4<'"
    str_1 = "w+^\r.pDM?"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    tuple_0 = (bool_0, dict_0, bool_1)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    int_0 = 906
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    str_0 = "\t2M\x0cv\r&\rSz]}#vNJg"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_1.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_197():
    tuple_0 = ()
    none_type_0 = None
    module_0.finditer(tuple_0, none_type_0)


def test_case_198():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    with pytest.raises(TypeError):
        var_1.__new__(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    bytes_0 = b"\xacI\xf8G9g!*J\xb3F\xdc\xfe\x87\x0f"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    str_0 = "0+N1O;Zo2E`P|9+d"
    module_0.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    float_0 = -2499.12869
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    bytes_0 = b"\xdb_\xa7fy\xbeZ\x0e\xe1\xac\x00QL\x08\xc2"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    bytes_0 = b"1\xc3>\xdf;*4\x01\x04\xf4\xaf\xa0\x1ee\x1cA"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    int_0 = 4500
    set_0 = {int_0, int_0, int_0}
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    int_0 = 829
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    float_0 = -3994.65961
    none_type_0 = None
    module_0.split(float_0, float_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


def test_case_211():
    pass


@pytest.mark.xfail(strict=True)
def test_case_212():
    str_0 = ""
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    bool_0 = True
    set_0 = {bool_0}
    bool_1 = False
    module_0.search(set_0, bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_214():
    dict_0 = {}
    module_0.match(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    int_0 = 3322
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    tuple_0 = ()
    module_0.search(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    bytes_0 = b"2b\x9bq\x7f"
    var_0 = module_0.purge()
    module_1.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    bytes_0 = b"\xabc\x8f\xefL\x08\x8a\xdbj\xfe{\xb3\xfc{\xf4\x9a"
    var_0 = module_0.template(bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    str_0 = "<\t0q@]t1aY vU"
    bytes_0 = b">|\x984\x97\xfc\xd6\x90QbP\x01\xad\x16\xe2S"
    tuple_0 = (str_0, bytes_0)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    bytes_0 = b"\x1aB\xe5/x$("
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    str_0 = "VSfG$#>"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    int_0 = -613
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    int_0 = 1468
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    int_0 = 1929
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    str_0 = "B!6XnZ"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    enum_dict_0 = module_2._EnumDict()
    module_1.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    bytes_0 = b"\xc9\xbb\xcd!Hm\xbbw\x1a"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    int_0 = -238
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    str_0 = 'M]Scr"'
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    float_0 = 855.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    complex_0 = 3264.4584 + 510j
    list_0 = [complex_0]
    module_1.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    bytes_0 = b"\xd0\xc6\x86\xca"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    none_type_0 = None
    exception_0 = module_3.Exception()
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    int_0 = -2951
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    complex_0 = -187.86133 + 2269.8184j
    module_0.sub(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    exception_0 = module_3.Exception()
    module_2.EnumMeta()


def test_case_243():
    none_type_0 = None
    str_0 = "D9,Qk\x0c?c5;2X"
    var_0 = module_0.escape(str_0)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    int_0 = 1344
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    none_type_0 = None
    bool_0 = False
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    list_0 = []
    module_0.compile(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    int_0 = -1331
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    complex_0 = -957.871 - 62j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_1.get_new_command(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    str_0 = "ZzI/;'qq"
    var_0 = module_0.finditer(str_0, str_0)
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    bytes_0 = b"\xf7E\xc0fwb\xc4\xaa"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    bytes_0 = b"\xf8\xc5Ug\xa31Y"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    var_0 = module_0.purge()
    str_0 = "}y"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    float_0 = 1245.6
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    str_0 = "OsL"
    var_0 = module_0.template(str_0)
    str_1 = "XSQg{\rMC#dQ$*a6Yy+i\x0b"
    module_0.compile(str_1)


@pytest.mark.xfail(strict=True)
def test_case_258():
    str_0 = ")+b_"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    bytes_0 = b"\xf1\x023"
    none_type_0 = None
    module_0.sub(bytes_0, bytes_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    float_0 = -1484.261
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    float_0 = -384.3666
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    bool_0 = False
    list_0 = [bool_0]
    error_0 = module_4.Error(*list_0)
    module_1.match(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    bytes_0 = b"\x9a\xb1/"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.split(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    int_0 = 1152
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    auto_0 = module_2.auto()
    module_1.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    int_0 = -843
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    int_0 = 337
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    tuple_0 = ()
    module_0.sub(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_1.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    list_0 = []
    dict_0 = {}
    exception_0 = module_3.Exception(*list_0, **dict_0)
    module_1.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    set_0 = set()
    none_type_0 = None
    module_0.subn(set_0, none_type_0, none_type_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bytes_0 = b"\xa2 \xc0t"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_278():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    bytes_0 = b'\xed\x97#\xcaa\xfb\x01\xc8\x88\x144Hs\xf9\xdf("'
    none_type_0 = None
    module_0.finditer(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_281():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    str_0 = "pCO2NO2I1.J=>-u$XI"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    str_0 = "q*Fh%TG'_T\\-*t"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    bytes_0 = b"=;]\xaa"
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    str_0 = "MeTgT(!JI"
    set_0 = {str_0}
    module_0.findall(str_0, str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    bytes_0 = b"A)\x0b\xc2\xc1\x18\x8c~ \x92"
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    error_0 = module_4.Error()
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    bytes_0 = b"\xc2@\xe1O\x84\x9f\xd7\t\x1e\xf6FV\x82\xaeQ"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    str_0 = "FRk\\k:$QAt"
    dict_0 = {str_0: str_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    int_0 = -1423
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    str_0 = "H\ny\r"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    str_0 = "$B98"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    int_0 = 145
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    bool_0 = False
    list_0 = [bool_0]
    module_0.sub(list_0, list_0, bool_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    dict_0 = {}
    module_0.compile(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    str_0 = "elCkm]^T]Y\x0bqJiJ1"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_307():
    int_0 = -651
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    str_0 = ":T|1"
    none_type_0 = None
    str_1 = "YsNZDAs714sG{b\n"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_3.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = "-_SfZ{A\n`NA>R;\x0cET"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    bytes_0 = b"\x97\xb8<\x8b\xbc{\xf3\x9e;\xba\x1ai"
    module_0.split(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    str_0 = "\x0cT/U 4$@akWlKIg\ni"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    int_0 = -3344
    none_type_0 = None
    module_0.sub(int_0, int_0, int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    int_0 = -3560
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_317():
    complex_0 = -1996.729115 - 1728.1j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    bytes_0 = b"~\x9a\xa4\xf8\xe1.\xedt"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    int_0 = 1696
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    str_0 = "4\x0c{msSeiMd-"
    var_0 = module_0.finditer(str_0, str_0)
    float_0 = 973.2415
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    int_0 = -1710
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    set_0 = set()
    module_0.Scanner(set_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    bytes_0 = b"\xc9\x80)\xbdw\x8b\xd7"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.findall(tuple_0, bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    int_0 = 1281
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    str_0 = "\t1\r"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    tuple_0 = ()
    module_0.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    bytes_0 = b"\xf9\xde9"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    int_0 = 2688
    none_type_0 = None
    module_0.sub(int_0, none_type_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    int_0 = 690
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    int_0 = 1340
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    none_type_0 = None
    bytes_0 = b"\x03\x17\xa5\x9a\x07!\x8c\x8d\xe9\x83\xd3l\xe7\xc5\xf4\xb1s\x1a\xc0\xe5"
    var_0 = module_0.match(bytes_0, bytes_0)
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    float_0 = -256.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.sub(none_type_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    tuple_0 = ()
    module_0.subn(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    float_0 = 3537.0
    none_type_0 = None
    module_0.findall(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    int_0 = -2282
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    float_0 = -4640.11194
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    bytes_0 = b'U\x92\x1d\xee\xa1\x8e\xad\n"$7\x91\xe1nD'
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    module_1.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    str_0 = "?JY\t4<S697"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [str_0, dict_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    bytes_0 = b"\xa6[f\x81N\x94\xf5\x12\x98c"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    str_0 = 'b/IPqnhssD-E"I~b'
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    bool_0 = False
    set_0 = {bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    bytes_0 = b"\x9c\x80\xb7-e\x1bN\xbf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    str_0 = "(W@9U-w@W?f+g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    str_0 = "EKY"
    list_0 = [str_0, str_0, str_0]
    module_0.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    none_type_0 = None
    var_0 = module_0.purge()
    module_0.template(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    complex_0 = -29.69 - 406.05562j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    int_0 = -632
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    str_0 = "{LXO;8+WdlDNJg"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.purge()
    module_1.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    str_0 = "nf\x0bt!z'jA2][i_2J.zR#"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    float_0 = -1875.86
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    str_0 = "I=K.kEHu"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    int_0 = 2899
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    int_0 = -2332
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_379():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    complex_0 = -3736.984 - 1232.69j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    str_0 = "@;@I9S}pnG3xm"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    complex_0 = -576.054 - 413j
    module_0.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    auto_0 = module_2.auto()
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.split(bool_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    str_0 = "S[>Rl"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    int_0 = 1487
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    str_0 = "UR`vH_nij!B6>\x0b+Q2(@"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    bool_0 = True
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    complex_0 = -1391.415988 + 1949.980605j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    bytes_0 = b"\x1a\xe5 z4\x80\xean"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    int_0 = 2161
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    complex_0 = 1658.621 + 3028.00677j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    str_0 = 'XG)_2\x0c$,9VQ"8"sK'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_0.findall(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    int_0 = 1097
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    str_0 = "u_Lg|hg\x0cd*1OOY0KS"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    bool_0 = False
    error_0 = module_0.error(bool_0)
    module_2.unique(error_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    bytes_0 = b"Z\xb1\xa7\x9cx\x84G\xb2"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    bytes_0 = b"\xfdf\x05\xf9\x98"
    module_0.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bytes_0 = b"y"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    float_0 = -343.0
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.fullmatch(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    int_0 = -1255
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bytes_0 = b"?\x16\x9e\xfczI\xa8\xa0]R\x8f\x1d\xc4\xf6=\xc8\xd8\x1c\xf1\xf5"
    set_0 = {bytes_0}
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bytes_0 = b"\xa1a\xfd\x1b\x03MY"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    bytes_0 = b"\xb4\x89\x97\xa2"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    str_0 = "eQ"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    str_0 = '?0E|,dcA\x0bZkyP"Ggry'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    float_0 = 5127.707
    str_0 = ";G*oj!Z&/:"
    tuple_0 = (float_0, str_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    bytes_0 = b"\x853\x9fyk$\xb9\xcf\xe2\x9c\xb7\xbd\xa82#2"
    set_0 = {bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    bytes_0 = b"\xbd&\xad\xcc>\x03!1"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    bytes_0 = b"\xa4"
    var_0 = module_0.escape(bytes_0)
    module_0.fullmatch(bytes_0, bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    float_0 = -1359.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    str_0 = "=x"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    float_0 = 1868.893
    module_0.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    str_0 = "ZQ"
    var_0 = module_0.escape(str_0)
    none_type_0 = None
    module_1.match(none_type_0, str_0)


def test_case_428():
    bytes_0 = b"R\x97\xfb\xae#^\xc51M\x15\xf8kZ\xf5\x8a`n\\\xd6"
    var_0 = module_0.match(bytes_0, bytes_0)
    var_1 = var_0.__bool__()
    with pytest.raises(AttributeError):
        var_1.__getattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    bytes_0 = b"\xf6NG\x81\xf2d\x8b\xdd\xaa\xd9;I\x8b\xb3]"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    exception_0 = module_3.Exception()
    module_0.escape(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    str_0 = " "
    none_type_0 = None
    module_0.findall(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    none_type_0 = None
    module_2.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_434():
    int_0 = 18
    int_1 = 1444
    module_0.fullmatch(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_435():
    int_0 = -3333
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    str_0 = "(Ep=c$"
    var_0 = module_0.purge()
    str_1 = "?@9pF(wjvk\tfw4t{"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: var_0, str_1: str_1}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    str_0 = "g%P\\;{)$iWf`r/R7_?'"
    var_0 = module_0.purge()
    var_0.__getitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    int_0 = -1290
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bytes_0 = b"\x02\x95z\x0ch\xb6W"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    int_0 = -1255
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    str_0 = "e="
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bytes_0 = b"\xe8\x97\x83x\x83\xa1\xc0\xa8D\xea\xf9\xaa\x80\xa2\xe7;\xb8\xa4\xeb\x1a"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    float_0 = -3161.40549
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    complex_0 = -699.5 - 253.0949j
    var_0 = module_0.purge()
    var_0.__delattr__(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    error_0 = module_4.Error()
    module_0.split(error_0, error_0, flags=error_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    bytes_0 = b"x\x12"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    int_0 = 2212
    module_2.unique(int_0)


def test_case_456():
    bool_0 = True
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_0.subn(base_exception_0, none_type_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    str_0 = '[\\\tpN0I@j"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    int_0 = 3063
    module_3.Exception(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    bytes_0 = b"T\xc1Z\x82\x03$"
    var_0 = module_0.escape(bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_461():
    bytes_0 = b"-\xd2\x897\x06rkL\xa2\xf7\xe0\xa4T|7zKn\x05\xdc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    str_0 = "fZQ=8|YIX\x0bb"
    var_0 = module_0.finditer(str_0, str_0)
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    str_0 = "5V$K*."
    none_type_0 = None
    module_0.findall(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    bytes_0 = b">\x11\x89\x96\xfd\x8bm\xf9\x8b\x86"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    float_0 = 319.5995
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    float_0 = 1716.3853
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    str_0 = "ZbnWS*$~"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    enum_dict_0 = module_2._EnumDict()
    module_1.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    bytes_0 = b"\xa8J\x9cG\x06\xcdB\xf5\x95p\xe5*~\xf4\xdb"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    str_0 = "qIL?\nM0Z\\o7g]u\r jGP["
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    float_0 = 1770.0
    bytes_0 = b"z\xdf{ \x1a%"
    int_0 = -757
    tuple_0 = (float_0, bytes_0, int_0)
    module_1.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    str_0 = "ajSLfykA@Zj5gui1"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    complex_0 = 3130.79 + 928.914006j
    module_0.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    bytes_0 = b"\xb1a\x7f\xc4o4f\n\xcb\xd1u}\r\x10\xfa'\r\x0c"
    var_0 = module_0.match(bytes_0, bytes_0)
    list_0 = [var_0, var_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    int_0 = -474
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_1.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    str_0 = "]\rb8)E`C"
    module_0.compile(str_0)


def test_case_485():
    pass


@pytest.mark.xfail(strict=True)
def test_case_486():
    int_0 = 712
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_488():
    bytes_0 = b"\x8a\xe9\xae-\xb7\xf6)\xebN\x9c^q\x89f"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    tuple_0 = ()
    module_0.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    bytes_0 = b"\x8f\x15\xda"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    str_0 = "&|S6\n459]dc}<"
    list_0 = [str_0]
    dict_0 = {}
    module_2.EnumMeta(*list_0, **dict_0)


def test_case_494():
    pass


@pytest.mark.xfail(strict=True)
def test_case_495():
    complex_0 = -3288.58103 + 637.31j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    bytes_0 = b"Q\xe6"
    error_0 = module_0.error(bytes_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    bool_0 = True
    regex_flag_0 = module_0.RegexFlag.DOTALL
    dict_0 = {
        bool_0: bool_0,
        bool_0: regex_flag_0,
        bool_0: regex_flag_0,
        bool_0: bool_0,
    }
    module_1.get_new_command(dict_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    int_0 = 3028
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    int_0 = -1051
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    bytes_0 = b"g\x1ce\x011H\xa2u\xc1\xe7\xab\x9a\xf8|\xb4\x13"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    int_0 = 1686
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    complex_0 = -1284.5161 - 2068.49j
    module_0.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    int_0 = -443
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    float_0 = 3512.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    bytes_0 = b"\x95\x94\xb5D\xa4s"
    list_0 = [bytes_0, bytes_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    int_0 = 705
    none_type_0 = None
    module_0.sub(int_0, int_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    base_exception_0 = module_3.BaseException()
    module_0.split(base_exception_0, base_exception_0, flags=base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_0.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    int_0 = -2419
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    var_0 = module_0.purge()
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_520():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    bytes_0 = b"\x9f\x16R\xd2c\xf1\x82u\xad3&\xf5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    float_0 = 3617.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    str_0 = "L};Q"
    var_0 = module_0.split(str_0, str_0)
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    float_0 = -2039.97393
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    str_0 = ")Y2s<5~h\x0b6+SRb> nSvI"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    int_0 = 2869
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    str_0 = "Tw|4SPrpy1o~"
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    bytes_0 = b"i\x93\x8d\x82\xc9\xcff@\x1aM\x0e?km"
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    complex_0 = 19 - 253.39243j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    list_0 = []
    exception_0 = module_3.Exception(*list_0)
    set_0 = {exception_0}
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    float_0 = 1776.4735
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = ()
    module_1.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    str_0 = "<2)cj<W"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    float_0 = -723.468
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    module_0.search(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    int_0 = 129
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


def test_case_543():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    dict_0 = {}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    complex_0 = -575 - 855j
    none_type_0 = None
    module_0.finditer(complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    str_0 = "b"
    dict_0 = {str_0: str_0}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    set_0 = set()
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    bytes_0 = b"\xd3\xf3d\x87{\x15yu)X'\x9d4\x92\xb5\x95K"
    module_0.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    bytes_0 = b"\xfb\xa9\xd3$\x99\xfe^w\xd8\x1c\x9b\xef\x87{\xb7\x9f"
    bool_0 = False
    module_0.subn(bytes_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    error_0 = module_4.Error()
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    str_0 = "CXvIbB8Qoy4S`\n+k@QF"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    int_0 = 342
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    int_0 = -1142
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    bytes_0 = b"\x9d\xf7"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    none_type_0 = None
    module_1.match(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    bytes_0 = b"\xb6\xdaH\xa4\x84\xce\xb8\x1fL"
    var_0 = module_0.finditer(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    str_0 = "SDAoJ"
    int_0 = -3081
    module_1.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    str_0 = "h+%sy[1)"
    module_0.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    int_0 = 3325
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    complex_0 = -1958.4 - 1000.47j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    none_type_0 = None
    float_0 = 1176.6
    module_1.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    int_0 = 1111
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    bytes_0 = b"\xcf\xc3\xb8\xa9\xafAa"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    int_0 = 203
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    exception_0 = module_3.Exception()
    module_0.escape(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    int_0 = -947
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    str_0 = "8v~l\n(-]^I)N"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


def test_case_575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_576():
    str_0 = "3ro*\x0b`TfI7z"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    bytes_0 = b"v\xaa\xc0\xc8"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


def test_case_581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_582():
    str_0 = "0"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    bool_0 = False
    regex_flag_0 = module_0.RegexFlag.DEBUG
    module_1.get_new_command(bool_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    float_0 = -3118.44487
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    str_0 = "S"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    int_0 = -825
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    float_0 = 2473.543
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    float_0 = -2779.803507
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    float_0 = -6.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    int_0 = 1420
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    str_0 = 'zJm;T!-5z"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    int_0 = 1044
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_601():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    none_type_0 = None
    bytes_0 = b"\xf5z"
    bool_0 = True
    tuple_0 = (bytes_0, none_type_0, bool_0)
    module_1.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    complex_0 = 1705.336 + 960.06907j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    var_0 = module_0.purge()
    bool_0 = False
    tuple_0 = (var_0, var_0, bool_0)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    int_0 = 3746
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    bytes_0 = b"\xfc\x8e\xc8\x8a\xdb\xe4\xdb$Z\xee\xe5\xd2b\x94\xe5\x8c}"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    float_0 = -2565.4649
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    str_0 = "\r[r5P;xvaW9d$XD\x0cai.F"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    str_0 = "2^ZVII.\x0c8:cMKL\r$Nfo"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    float_0 = 1294.0
    bool_0 = False
    module_0.fullmatch(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    bytes_0 = b"4\x05s"
    module_0.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    bytes_0 = b"(\xafg\t\x8f{\xae'\x0b\xedGl\x9d\xa0\x83:\xa7L\xdeL"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    bool_0 = False
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    int_0 = 291
    none_type_0 = None
    module_0.sub(int_0, int_0, none_type_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    str_0 = "1*{K,89UlOBx&`X}Fb"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    set_0 = set()
    none_type_0 = None
    module_0.search(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bool_0 = False
    module_0.Scanner(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    int_0 = 1953
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    bytes_0 = b".\xa9^\x1a9\x0f\x16N,\xd2n22"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    float_0 = -989.626
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    float_0 = 2117.306
    bool_0 = True
    dict_0 = {var_1: float_0, bool_0: float_0, var_0: bool_0, bool_0: bool_0}
    module_0.findall(dict_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_627():
    int_0 = -585
    bool_0 = False
    list_0 = [int_0, int_0, int_0, bool_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    str_0 = "DG[8\x0byQZ"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    str_0 = "m!ak%\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


def test_case_632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_633():
    str_0 = "LjA3#TbB\t.3,{q@"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    str_0 = "M@u)(Rl|C&d\x0ba3:Zo,+"
    module_0.Scanner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    none_type_0 = None
    bool_0 = False
    module_1.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    str_0 = "K+aTEhq|X:V"
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    complex_0 = -356.682 + 3613.42j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    str_0 = "n]6?YMR"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_0.compile(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    int_0 = 434
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    enum_dict_0 = module_2._EnumDict()
    module_0.split(enum_dict_0, enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    base_exception_0 = module_3.BaseException()
    module_0.escape(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    bytes_0 = b"\x9c^\x18\xdd[\x85\xf0U\xfa2k\t]"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    bytes_0 = b"\xf7KZ\xaffVM\x19\xe0\xf5.\xa3^+B\xc3b~"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    str_0 = "7[Kn2lpj<G7<,+Re~"
    var_0 = module_0.escape(str_0)
    var_1 = var_0.__dir__()
    module_0.escape(var_1)


@pytest.mark.xfail(strict=True)
def test_case_650():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    var_0 = module_0.purge()
    bool_0 = False
    module_1.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    int_0 = 18
    var_0 = module_0.purge()
    var_0.__reversed__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    complex_0 = -492.433 + 1895.79j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    str_0 = "\\"
    str_1 = "\x0cg^"
    list_0 = [str_1]
    dict_0 = {str_0: str_0, str_1: list_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.error(set_0, bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    bytes_0 = b"\x12\xb4\x00~,m\xe1\x0c\xbe\xb1\x07TH\xb6haE\xc7\xaa("
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    float_0 = -493.212
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, list_0, bool_0]
    module_2.EnumMeta(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_663():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    complex_0 = 1178.29063 - 2269.82j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    int_0 = -2184
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    str_0 = "&gn5J{2q7{&sS\x0b,)K"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    float_0 = -2299.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    float_0 = -137.776087
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    str_0 = ""
    module_0.Scanner(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    int_0 = -1649
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    float_0 = -926.9775
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    tuple_0 = ()
    dict_0 = {}
    module_0.fullmatch(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    str_0 = 'z"\nJk"3z@y1G'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    int_0 = -903
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    bytes_0 = b"\x95'\x92~ha+\xba\xb2\xb1q\x87M"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    bytes_0 = b"\t\x9a\xb0=.C\xa1\x003\x1a\x00\xaa\xdf#;>\xcf,{"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    bool_0 = False
    list_0 = [bool_0]
    module_0.fullmatch(list_0, list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    str_0 = "{ i)3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    str_0 = "1O{}[J"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    int_0 = -844
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    set_0 = set()
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    int_0 = 1671
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    int_0 = -2401
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    float_0 = -778.849
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    str_0 = "~8~"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    bool_0 = True
    none_type_0 = None
    module_0.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    bool_0 = True
    list_0 = [bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    int_0 = -669
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    var_0 = module_0.purge()
    set_0 = set()
    module_1.get_new_command(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    exception_0 = module_3.Exception(*list_0)
    bool_0 = True
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bool_0 = True
    str_0 = "1z2\\)<N+B"
    var_0 = module_0.match(str_0, str_0)
    var_0.__len__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    str_0 = "4\\J\x0cqQK>#R\t6GJx!"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    bytes_0 = b"\x11/H2\xf2\xb4\xd5\xc5\xdf\xe4t\x8b\r\xeew\x9e\xceY'\xe3"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    none_type_0 = None
    bytes_0 = b"\x98\x0f"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    tuple_0 = ()
    none_type_0 = None
    module_0.subn(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    var_0 = module_0.purge()
    float_0 = 316.952494
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    str_0 = "7b/UkhDTIp<F"
    none_type_0 = None
    module_0.template(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    str_0 = "cT(Aj;:\x0b_w"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    complex_0 = 1990.499 + 1154.008j
    module_0.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    set_0 = set()
    module_0.fullmatch(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    bool_0 = True
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    str_0 = "\x0c(&l!"
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    float_0 = -1025.478451
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    bytes_0 = b"\xe9\xda"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.subn(set_0, set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    complex_0 = 1120.842 - 3209j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    int_0 = -3531
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    str_0 = "6"
    module_0.sub(str_0, str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    enum_dict_0 = module_2._EnumDict()
    module_1.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    set_0 = set()
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    auto_0 = module_2.auto()
    module_1.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    float_0 = 144.044
    list_0 = [float_0, float_0, float_0]
    module_0.subn(list_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    int_0 = 793
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    int_0 = -1212
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    bytes_0 = b"\x97"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_744():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    set_0 = set()
    module_0.findall(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    int_0 = 372
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    bool_0 = False
    int_0 = -1714
    dict_0 = {bool_0: int_0}
    list_0 = [dict_0, bool_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_1.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    bytes_0 = b"\x12\x95Ns\xe7\x9a\xb6%\x00\x00\x9e\r\x1dco4S=\xd8\xdc"
    var_0 = module_0.match(bytes_0, bytes_0)
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    int_0 = -649
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    complex_0 = 524.627 - 1971j
    module_0.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    bool_0 = True
    error_0 = module_0.error(bool_0, bool_0)
    dict_0 = {error_0: error_0}
    module_0.compile(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    str_0 = "y2<6#"
    list_0 = [str_0]
    bool_0 = False
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    str_0 = "h=4dh0"
    var_0 = module_0.sub(str_0, str_0, str_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    str_0 = '"^aX.)@z-dFl0<{,'
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    str_0 = "Bf)"
    module_0.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_761():
    set_0 = set()
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    float_0 = -2717.0
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    enum_dict_0 = module_2._EnumDict()
    module_0.compile(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    bool_0 = True
    module_0.template(bool_0)


def test_case_768():
    pass


@pytest.mark.xfail(strict=True)
def test_case_769():
    complex_0 = 1755 - 1519.882j
    module_0.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    none_type_0 = None
    float_0 = -2532.1397
    module_0.subn(none_type_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    bytes_0 = b"\x87\x010\x8d}v\xe4\xba\xeb E`ge\xa4"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    int_0 = -975
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    str_0 = 'u0\nZ"k_I}W-)I'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    bytes_0 = b"\x17\xae\x13x\x92\x02k\xa1\xdb\xaf\xbf)\xcf\x84\xcb/"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_779():
    int_0 = 525
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0, var_0]
    module_1.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    float_0 = 846.0
    module_2.EnumMeta(**float_0)


def test_case_791():
    str_0 = "{ s\n@fHn"
    var_0 = module_0.escape(str_0)
    var_1 = var_0.__dir__()


@pytest.mark.xfail(strict=True)
def test_case_792():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_793():
    complex_0 = 1083.202 - 671.456j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


def test_case_795():
    str_0 = 'tl~RiH"`O=>Rb,L~T\x0c'
    var_0 = module_0.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    bool_0 = True
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    complex_0 = 2443.4 + 1012.461j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    str_0 = "^04GhK-[g[*U"
    str_1 = "\x0cL6AT\n^t\x0ba|s\t\\fYd"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    float_0 = -2401.38234
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.subn(list_0, list_0, list_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    float_0 = 2610.0
    module_0.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    int_0 = 272
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    str_0 = "N9Iq\t_PokUNw"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    str_0 = "f|:"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    base_exception_0 = module_3.BaseException()
    module_0.split(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    bytes_0 = b"\x8c\x0c\xe9\xdf\x85\x0c\x9d\xc7"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    bytes_0 = b"\xdc\xb4\xa9cL\xa3N\xd6Xz\x7f\xb5O\xcb\x80\xdb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    complex_0 = -1800.438 - 1152.45925j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    complex_0 = -951 + 2055.024736j
    module_0.split(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    str_0 = "yxNs6#OD#c\tb"
    module_1.match(str_0, str_0)


def test_case_815():
    pass


@pytest.mark.xfail(strict=True)
def test_case_816():
    int_0 = 370
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    var_0 = module_0.purge()
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    bool_0 = True
    none_type_0 = None
    module_0.findall(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    str_0 = "19Vs]9"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__reversed__(none_type_0)


def test_case_822():
    bytes_0 = b"tl\xd1\xe9\xd6\xac\x06\xf7\ro\xd2\xea"
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    int_0 = -1311
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    set_0 = set()
    module_0.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    auto_0 = module_2.auto()
    set_0 = {auto_0, auto_0, auto_0}
    module_0.match(set_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.match(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_827():
    str_0 = ""
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    dict_0 = {}
    bool_0 = True
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    float_0 = -1003.3
    dict_0 = {float_0: float_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    str_0 = "&z=5sL2e;dMp2WYkEN:I"
    bool_0 = True
    module_1.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    none_type_0 = None
    bytes_0 = b"\xfc\xbf\xac\xab"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    bytes_0 = b"w\xa9\xacv\xf6uW\xf1g\x87\xbf0n8\xd4\xc3S"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    int_0 = -2176
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.get_new_command(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    float_0 = 2932.228
    set_0 = {float_0, float_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    error_0 = module_4.Error()
    set_0 = {error_0, error_0}
    module_1.match(set_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = 180
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    complex_0 = 450.5668 - 1912.883612j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    complex_0 = -1876.54166 - 1886.26051j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    int_0 = 4781
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bytes_0 = b"\xea\xa2\xbe"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    bool_0 = True
    list_0 = [bool_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    complex_0 = -1821.264 + 3044.25514j
    module_0.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    var_0 = module_0.purge()
    tuple_0 = (var_0,)
    module_0.split(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    float_0 = -1471.02
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    int_0 = 94
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    bytes_0 = b"\xe3\x9d\x83\x19\xc5p\x1a4\x80G\xb3]\x14  "
    var_0 = module_0.purge()
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    str_0 = "t5hQT\\iU`!Ig"
    str_1 = "YMg,qx|\x0cw\\Ok`T>_1"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    str_0 = "FcnOYUm%St8Iyt"
    var_0 = module_0.template(str_0)
    tuple_0 = (str_0, var_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    str_0 = "r?hVv&gN"
    bytes_0 = b"\xc7\xc2^\x04\xe8\xf1\xe2\xa5Ht\xaf\x98z\xb4\x93#\x8a\x8d"
    set_0 = {str_0}
    tuple_0 = (str_0, bytes_0, set_0)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    str_0 = 'En$qH\n\x0c<4,"'
    none_type_0 = None
    module_0.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    str_0 = "\tg5sw~RK%"
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    set_0 = set()
    module_0.template(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    bytes_0 = b'\n3;\xb4\xae9\xa8\x922=\xbc\t0\x81"\xdd\xfby\xf8\x13'
    module_0.split(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    float_0 = -840.19622
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    int_0 = 1068
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    str_0 = "XvzWX4n4p"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    int_0 = -3008
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    complex_0 = 2780 - 423j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    int_0 = 956
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_870():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    str_0 = "&ah.K\x0b~`6`Zf"
    none_type_0 = None
    module_0.sub(str_0, str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    str_0 = "<GQB#\x0c'0{gs\x0c^gF"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    str_0 = "6|ij&K#_!dv"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_2.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    var_0 = module_0.purge()
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = -707
    module_1.get_new_command(int_0, int_0)


def test_case_883():
    pass


@pytest.mark.xfail(strict=True)
def test_case_884():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    int_0 = -530
    bytes_0 = b"\xec\x18\xe0"
    module_1.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    str_0 = "b5(X>0wS$"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    int_0 = 3476
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    str_0 = "i~CDAOK"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    float_0 = 109.0906
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    int_0 = 427
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bytes_0 = b"$\xe5\x90\x18\x81\x8e7`"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    int_0 = -3426
    bool_0 = True
    module_1.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    bytes_0 = b"\x1b@\xd8\xed\xb9"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    int_0 = -1451
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    str_0 = "q:1Z<X17n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    none_type_0 = None
    bytes_0 = b">\xda?\x08[/"
    module_0.split(none_type_0, bytes_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    var_0 = module_0.purge()
    var_0.__getitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"\x19Z\xcbZ\x9eU"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    var_0 = module_0.purge()
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_912():
    str_0 = ">a)\\F"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    bool_0 = True
    module_0.split(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    int_0 = -1790
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    bytes_0 = b"\x19\x83\xc3"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    bytes_0 = b"\xa0\xb6\xcd\x98\xdd\xa1\xb1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    str_0 = "`JW9JME\t3K>"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.sub(bool_0, set_0, set_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    str_0 = "J^GH!x@\n^T@Tk'Rq\\ve\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    int_0 = 1506
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    bytes_0 = b""
    var_0 = module_0.purge()
    var_0.__len__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    str_0 = "o)NX7[W,%o;m"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    float_0 = 1808.4373
    none_type_0 = None
    module_0.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    bytes_0 = b"\x03\xff\x04\xb9/\x0b\xa7\x1a8\x99A"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    set_0 = set()
    module_0.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    str_0 = "!5"
    var_0 = module_0.search(str_0, str_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    str_0 = "\r`&m$bXh2"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    str_0 = ""
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    float_0 = -2671.61
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    bool_0 = True
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    float_0 = -2770.0
    error_0 = module_0.error(float_0)
    none_type_0 = None
    list_0 = [error_0, none_type_0]
    module_4.Error(*list_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    str_0 = "T4p4Lb*-oC}"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    bool_0 = False
    set_0 = {bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    tuple_0 = (dict_0, var_0, var_0, var_0)
    module_1.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    int_0 = -1408
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    float_0 = -90.1406
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    float_0 = 73.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    bytes_0 = b"\xa4\x14;Sd\xe22Ia@\xcb\xe6\xb5~"
    module_0.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    int_0 = 2531
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    set_0 = set()
    module_2.EnumMeta(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    bytes_0 = b"4\xafo(\xbcd[f\xa6"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    str_0 = "YD-"
    var_0 = module_0.escape(str_0)
    var_1 = var_0.__dir__()
    none_type_0 = None
    int_0 = 3553
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    bytes_0 = b"&]"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    complex_0 = -517.488 + 1837.83724j
    module_0.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    str_0 = "\tfL\n"
    none_type_0 = None
    module_0.search(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    complex_0 = 3339.51776 - 2078j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    int_0 = -3199
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    int_0 = -237
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    float_0 = 2750.91
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    float_0 = -3611.936419
    set_0 = {float_0, float_0}
    module_1.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    float_0 = 3670.4
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_972():
    complex_0 = -1795.2 + 4141.4326j
    module_0.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    int_0 = 186
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    int_0 = 365
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    str_0 = "5Zr1p2*EO)8A\x0bM#B "
    tuple_0 = ()
    module_1.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    var_0 = module_0.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    bytes_0 = b"\xdc\xb2\x9c \xbd7?7'?5[\xa2Z\xa6\x03"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    str_0 = "nYg&U8ny,BY#*sFuFL"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_1.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    bool_0 = True
    str_0 = "_,T%V('3O9$I2[T7/Z"
    float_0 = 3903.323
    tuple_0 = (str_0, float_0)
    module_1.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    str_0 = 'VtGRN5^3S`EV"Jx'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    tuple_0 = ()
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    str_0 = ""
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    str_0 = "\n+l~xr\r;_w"
    str_1 = "1etjrv6RWtI}r\r2PZ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    bool_0 = True
    int_0 = 1772
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    set_0 = set()
    none_type_0 = None
    module_0.fullmatch(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    str_0 = '~k"LOm{?-r|VIr|'
    set_0 = {str_0, str_0, str_0}
    module_0.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    float_0 = 16.2
    none_type_0 = None
    module_0.subn(float_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    bytes_0 = b"\xe1D\xcb\xe4"
    none_type_0 = None
    module_0.subn(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    var_0 = module_0.purge()
    module_0.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    int_0 = -595
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    float_0 = 3892.209
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    set_0 = set()
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    bytes_0 = b"\xf7\xfbg\xf1\x8b[_RR\xe1Z\xb4\xea\xb5\xac"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    float_0 = -91.41
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    str_0 = "1\\FTGt?"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    str_0 = 'uOM"6<xB/+3~'
    none_type_0 = None
    module_0.template(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    bytes_0 = b"=\xccT09~\x10A\x14\xb7"
    var_0 = module_0.match(bytes_0, bytes_0)
    regex_flag_0 = module_0.RegexFlag.DEBUG
    module_0.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    var_0 = module_0.purge()
    list_0 = [var_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    bytes_0 = b""
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    bytes_0 = b"\xcf+\x0bp\r\x8a\xfc\x87\xca|\xc1d."
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1015():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bytes_0 = b"\xcc\x136\x06\x9a\x16\xf4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bytes_0 = b"\xcd\x80\xe8\xfc*\xf8\\\x00\xb9m\x12\xec;b~\xe8|\x0f7"
    str_0 = "_2K\ni(;#"
    var_0 = module_0.escape(str_0)
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    bytes_0 = b'"\ny\xc45Q'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    bytes_0 = b"Z\x07\x13\xc8\x81i \r\x19\xef\xdd\x88"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bytes_0 = b"9\xa6x\x1a\xcd \x0cF\xd2\xf7w \xc6"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_1022():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1023():
    complex_0 = -4077.6 + 2448.979j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    str_0 = "%)H}I"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    none_type_0 = None
    tuple_0 = ()
    module_0.search(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    str_0 = "H( Df w"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    complex_0 = 2290.63 + 1914.1006j
    module_0.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    bytes_0 = b"2\xc3\xc9\x9a)s\xea\x89j"
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    bytes_0 = b"\xdb\x99\xc0\x15\xe9\xb9\xa2 \xf2\xb0\xaa*\x05|\xe4~w"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1041():
    str_0 = 'u"?+[-QZ`C8_\t&^!\x0cp.'
    module_0.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    auto_0 = module_2.auto()
    module_1.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    base_exception_0 = module_3.BaseException()
    module_1.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    exception_0 = module_3.Exception()
    module_0.escape(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    bytes_0 = b"\xb9(\xbc\x8b\xeb+\xd8o\xb6\xdd\x11\x8fq\x138\xf39\xcd\xf7X"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    complex_0 = -3965.1 - 1687.462j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    str_0 = ',j8s!"U\x0c'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    str_0 = "ge/\r3jFA8"
    module_0.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    str_0 = "baT@S"
    none_type_0 = None
    module_0.match(none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    int_0 = -2925
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    bytes_0 = b"\xd3)\xaeE\xb9s\xba\xf2\xc6\xdb\x9c\xffB"
    module_0.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bool_0 = False
    list_0 = [bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    int_0 = 3567
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    int_0 = 1706
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bytes_0 = b"\xd1\x97"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    int_0 = 2592
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    bool_0 = False
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bytes_0 = b"\xb1\x84\xb9\x87\xf0\xea\xfe\x85\xcc\xa3rx0"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    str_0 = "m9l1Hu`.BD"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    bytes_0 = b"|\xcdy\xd8\xa9V\xe9\x96\xc1\xdd\xc4\xba"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    complex_0 = -1254.931136 - 901.2j
    module_0.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    str_0 = "vo5"
    str_1 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    float_0 = -3642.99857
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    bytes_0 = b"\x99\x94\xd7%\xa1\xc9\xae2Lm\x03t\xbf\xaa]\xb7)\xe1\x1a\xab"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1075():
    bool_0 = False
    module_0.split(bool_0, bool_0)


def test_case_1076():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1077():
    set_0 = set()
    tuple_0 = (set_0,)
    module_1.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    int_0 = -513
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    bytes_0 = b"\x96\x03\xf5\xb3|pB\xe4\xa4`[~\x89\x8c"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    str_0 = "fBeeP,uIc#C;"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1083():
    bytes_0 = b"\x87)\xbe\x1a\x15|v\xec\x16\x0f\xd1\xa4K\x12\xfa1.\xb5;"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    list_0 = []
    bytes_0 = b"\x80-u\xc8\xafG\xd5\x8c\xd6!\xf2\xe2"
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    complex_0 = -220.5799 + 28.49228j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    str_0 = "QINr\\d[G0\r+A6W|9q"
    module_0.subn(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    float_0 = -3068.14
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    float_0 = -321.3593
    tuple_0 = (bool_0, set_0, float_0, float_0)
    module_1.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1091():
    dict_0 = {}
    module_0.match(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    int_0 = -1392
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    none_type_0 = None
    module_0.Pattern(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bytes_0 = b"\xd7\x9eX"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    set_0 = set()
    module_0.fullmatch(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    error_0 = module_4.Error()
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1097():
    str_0 = "@+w"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    bytes_0 = b"\x9fd"
    var_0 = module_0.template(bytes_0)
    module_1.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    bytes_0 = b"\xb1K\xd8q"
    module_0.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    float_0 = -1384.320042
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bytes_0 = b"\x83\xe8\x93\x8d,"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    str_0 = '"oU->\\H0H<'
    str_1 = "{!VZ"
    str_2 = "7=]EaHq\\Vq"
    str_3 = "r5"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_3: str_2}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    str_0 = "pJZkr*"
    bytes_0 = b"\xe0]\xbf\xd3\xfd\x05\x7f("
    tuple_0 = (str_0, bytes_0)
    module_1.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    int_0 = -1423
    module_0.split(int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    list_0 = []
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    str_0 = "3/ "
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    int_0 = 1436
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    str_0 = "KX"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    int_0 = 97
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    error_0 = module_0.error(dict_0, tuple_0)
    tuple_1 = (error_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    dict_0 = {}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    dict_0 = {}
    module_0.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    float_0 = 1946.257961
    none_type_0 = None
    module_0.compile(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_0.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    str_0 = "/SKB9a'nur##\n[S&x\rM"
    module_0.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    int_0 = -916
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    str_0 = "@\n!I?PgX3k@\x0b*3PQ"
    list_0 = [str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    bool_0 = False
    set_0 = {bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    str_0 = ""
    none_type_0 = None
    module_0.sub(str_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    bool_0 = False
    str_0 = '/FR.Y"Ub(,'
    module_0.subn(bool_0, bool_0, str_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    int_0 = 443
    set_0 = {int_0}
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    bytes_0 = b"\xf7\xe1\x98\xff\xe4\x1e\x048\xf5jq\xceN\x88\x18\xc6\xa0\xfaa\x91"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    none_type_0 = None
    int_0 = 783
    set_0 = {int_0}
    module_0.sub(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    float_0 = 238.838861
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    int_0 = -1289
    none_type_0 = None
    module_0.template(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = 907
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    bytes_0 = b"}\xf7cFh\x96\xd5\xe9V\xca\x02\x90t:\x1f\xc4\xc5\x8e\xd9"
    tuple_0 = (bytes_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    float_0 = 2018.8953
    list_0 = [float_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    exception_0 = module_3.Exception()
    dict_0 = {
        exception_0: exception_0,
        exception_0: exception_0,
        exception_0: exception_0,
    }
    none_type_0 = None
    module_0.search(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    int_0 = 801
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    bytes_0 = b"\xea\x81\x9b\x12\x81"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    bytes_0 = b"a\xa8L\x1d\xcc#(L\xca\xecG;\xc6>g?ZR"
    complex_0 = 1528.708892 + 1415.08807j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.template(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    int_0 = -693
    none_type_0 = None
    module_0.match(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    complex_0 = -1513.5 + 1619.78709j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    bytes_0 = b"\x96\x11\x9f,\xba]\xcc4\x94\x9f\r\xf3TW"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


def test_case_1155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1156():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1157():
    var_0 = module_0.purge()
    set_0 = {var_0}
    error_0 = module_0.error(set_0, pos=var_0)
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    int_0 = 1140
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    bytes_0 = b"\x1b\xe4X\xcd8\x9a9\xabe\x95g)+\xf8"
    none_type_0 = None
    module_0.subn(bytes_0, bytes_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    int_0 = -1408
    module_0.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    error_0 = module_4.Error()
    module_0.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    exception_0 = module_3.Exception()
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    enum_dict_0 = module_2._EnumDict()
    var_0 = module_0.purge()
    var_0.__setitem__(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    str_0 = "\\/r1:comm;~>]q.zwL<"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    int_0 = -921
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    set_0 = set()
    error_0 = module_0.error(set_0)
    none_type_0 = None
    module_0.subn(set_0, error_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    bytes_0 = b"\xd9\x90h\xdb\xe5\xbd\xf5\xa0\xe4\x9c\xe9\x06\xfcC"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


def test_case_1172():
    bytes_0 = b"j+\xdb\xdc\xe7\x17x\x85\xa4Nnd\xf6g\xf0\x0c"
    none_type_0 = None
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    with pytest.raises(TypeError):
        var_1.__new__(bytes_0, none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    float_0 = -1042.4
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1175():
    float_0 = -1995.9885
    module_0.split(float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.fullmatch(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    auto_0 = module_2.auto()
    module_0.findall(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    int_0 = 2558
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    str_0 = "v;@E"
    var_0 = module_0.compile(str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    bool_0 = False
    tuple_0 = ()
    module_0.sub(bool_0, bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    bytes_0 = b"\x90J\r\x9f\xa4\xddM\x0f7Qk\xb9#"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    int_0 = 1617
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.findall(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    tuple_0 = ()
    int_0 = 2381
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    int_0 = -1164
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    bool_0 = False
    bytes_0 = b"e4\xb0\x81Q|\xcbs\xda"
    module_1.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    float_0 = 10.4071
    dict_0 = {float_0: float_0}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bool_0 = True
    str_0 = "/"
    tuple_0 = (bool_0, str_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    bytes_0 = b"N\x8a#%\xd9\xf0-\xa8!\xd0}\xfe\x9c\x7f"
    list_0 = [bytes_0]
    module_1.match(list_0, list_0)


def test_case_1196():
    str_0 = "i'\r?mIR;l00 4?drax2\r"
    bytes_0 = b"\xc24A\x9fyJ2\x15d\xb3R\\\xa7\xaa\x0b\xf1\xe7T\xb5\x96"
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(str_0, str_0, str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    bytes_0 = b"\xa5\x96w\xdb\x824R=\x1b\xd7\x11\x9b\\\x04"
    module_0.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_1.match(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    bytes_0 = b"<\xc7\xb3"
    none_type_0 = None
    module_0.finditer(none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    str_0 = "GGVd%gig@TB"
    var_0 = module_0.fullmatch(str_0, str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    enum_dict_0 = module_2._EnumDict()
    tuple_0 = (enum_dict_0,)
    list_0 = [tuple_0, enum_dict_0, tuple_0, enum_dict_0]
    module_1.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1204():
    str_0 = "IJl#8\x0c"
    set_0 = {str_0, str_0, str_0}
    module_0.sub(set_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "W,^Wly\t70j0@]90"
    dict_0 = {str_0: none_type_0}
    module_4.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1210():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    int_0 = -2318
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    bytes_0 = b"\x1fQ\xd0\x92\xfd5s?9w\x02\x9a\xfe\xff"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    str_0 = "tm8L[["
    str_1 = "$# '\rdjWf\ny1r!"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    tuple_0 = ()
    module_2.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    str_0 = "h"
    bytes_0 = b"\x99/eb\x1at)\xa1\xb8\x92\x7f"
    module_0.sub(str_0, str_0, str_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    bytes_0 = b":\xe2\xf4\x05B\xe4/A.\xd3\xc8\xb5\x02\t\xda\xc8\xc5\x02W"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    int_0 = 1876
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    int_0 = 1447
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    bytes_0 = b"\xae+\xe8\xc0\xed\x06"
    bool_0 = False
    module_0.subn(bytes_0, bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bool_0 = False
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    int_0 = -1092
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    float_0 = 1419.250985
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    str_0 = "iC\x0b])\t["
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    int_0 = -1740
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.subn(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    module_1.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    int_0 = 1773
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bytes_0 = b"$\x00\xedo\n"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    float_0 = -1173.6
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    float_0 = -1335.2
    module_1.match(float_0, float_0)


def test_case_1246():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1247():
    int_0 = 3272
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    var_0 = module_0.purge()
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    int_0 = 3625
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    list_0 = []
    base_exception_0 = module_3.BaseException(*list_0)
    bool_0 = True
    module_1.match(base_exception_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    bytes_0 = b"\x1e\xeba\x9a\x99\x01\x14;\x82-\x00"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    float_0 = -2159.68
    none_type_0 = None
    module_0.sub(float_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    int_0 = 2533
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    complex_0 = -5375.2126 - 969.61j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    str_0 = "?v5D'\rI5"
    none_type_0 = None
    str_1 = "R6^ouA^#5xT*2vMm4"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    int_0 = -2120
    object_0 = module_3.object()
    module_0.finditer(int_0, int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    float_0 = -2177.63555
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    none_type_0 = None
    bool_0 = True
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    str_0 = "BQfH$+3{P"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    int_0 = -1614
    module_0.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    int_0 = 1365
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    str_0 = "::%"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    str_0 = "H`Uy>;z_\n_;{656C"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    float_0 = -1003.634058
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    bool_0 = False
    module_0.search(bool_0, bool_0)


def test_case_1272():
    pass


def test_case_1273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1274():
    float_0 = -1689.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    str_0 = "/FE!:g"
    set_0 = {str_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1278():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1279():
    int_0 = -509
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.fullmatch(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1282():
    bytes_0 = b"1\xbe\x92\xff\x9f\x0c(\xc6)\x91/\x02"
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    bytes_0 = b"\xb5\xef>\x82a\xf4\xcb\x8c\x8c\t\x02"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    str_0 = "Q |/\x0c(Qf*\r\rE@r#\x0cJUsa"
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    str_0 = "%\x0bzUlL~}$Hl\tX9oF"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    int_0 = 325
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    int_0 = 569
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    var_0 = module_0.purge()
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_1292():
    none_type_0 = None
    str_0 = "s\r0\x0cUq zH=*bdW\t"
    var_0 = module_0.search(str_0, str_0)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    int_0 = 1730
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    str_0 = "MaMc"
    module_0.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    list_0 = []
    module_0.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    float_0 = -1936.3525
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    int_0 = -496
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    str_0 = "dRr\n{"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    error_0 = module_4.Error()
    none_type_0 = None
    module_0.sub(error_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    int_0 = -1580
    none_type_0 = None
    module_0.subn(int_0, int_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    float_0 = 1246.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    dict_0 = {}
    module_0.Scanner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    str_0 = "icvmt\x0b$Ii"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1312():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    complex_0 = 187.55 + 3183j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    bytes_0 = b"\xfc\x1c\xdc\xde\xd0\xaa\xcfn)g\xd1"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    str_0 = "BWj>Z/Mf;'\\j`XQa"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    dict_0 = {}
    module_0.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    str_0 = "at~I-"
    var_0 = module_0.finditer(str_0, str_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    int_0 = -2365
    none_type_0 = None
    module_0.findall(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    set_0 = set()
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    bytes_0 = b"\x90\x9c/nXk\xb8\xa9"
    set_0 = {bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    var_0 = module_0.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    bytes_0 = b"\x0f\x94z\x11dY\xd7\xba9,]<\xd5aN\x11s\xa9\x1d"
    tuple_0 = (bytes_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    int_0 = -152
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    str_0 = "NiRS,-|<T/V\x0bbg"
    dict_0 = {str_0: str_0}
    module_1.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    tuple_0 = ()
    module_0.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    int_0 = -597
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    complex_0 = -1362.445 + 604.4432j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    var_0 = module_0.purge()
    none_type_0 = None
    complex_0 = 93.81 - 170.7413j
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=complex_0)


def test_case_1340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1341():
    int_0 = -1406
    module_1.get_new_command(int_0, int_0)


def test_case_1342():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    bytes_0 = b">\xa5\xe3!\x0f\x86\xbe\xd7\xd3svQ\xc1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    str_0 = "i#AHy_D'I@\x0c F\tHR(q?"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    str_0 = "Z;[\\<np5Pi"
    module_1.match(str_0, str_0)


def test_case_1347():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bytes_0 = b"`8\xbf\rT\xc5\xa7\xea"
    var_0 = module_0.compile(bytes_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    float_0 = -3634.9329
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    complex_0 = 1124.41144 - 741.45j
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    complex_0 = -173.2048 + 303.29595j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.search(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    float_0 = -520.33
    none_type_0 = None
    module_0.sub(float_0, float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    none_type_0 = None
    int_0 = 769
    module_0.search(none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    complex_0 = 84.715039 + 927.63955j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    float_0 = 1284.0
    module_2.EnumMeta(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    str_0 = ":_2w{ 6E3 "
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    int_0 = 1632
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    str_0 = "SC\"Z3c'0\n"
    none_type_0 = None
    module_0.fullmatch(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    int_0 = 2265
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1363():
    bytes_0 = b"G\xe1\xe5G\xd6\xd0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bytes_0 = b"\xce\x9b"
    module_0.split(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    str_0 = "qk"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    var_0 = module_0.purge()
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bytes_0 = b"\xaa\xf1z\xfdw\xd6\xbeZ \xd6\xcc\xab\x17\x19q\xedsVq"
    var_0 = module_0.template(bytes_0)
    module_1.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    error_0 = module_4.Error()
    module_0.sub(error_0, error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    str_0 = "Kk^h]Pf#**Wd(^z$E"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    bytes_0 = b"eE\xa7\x0c"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    bytes_0 = b"?q\x9c,\x9a\xa5\xc0\x1e\xd2S}\xf3\x9a\x02"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    bytes_0 = b"Fw\xfc\x15\x18\xd7\xb7_\xa3@"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    bytes_0 = b"\xe1{"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    int_0 = -252
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    bytes_0 = b"x\xb8\xa8\x98"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    module_1.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    int_0 = -868
    set_0 = {int_0, int_0, int_0}
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1382():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1383():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    complex_0 = -3346 + 1622j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    str_0 = "$A(_\nvz{sR"
    dict_0 = {str_0: str_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bool_0 = False
    list_0 = [bool_0]
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    str_0 = "-sk#a?I@q|p\npK(\\JB4"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    int_0 = 1139
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    complex_0 = 57.4 - 5.658j
    list_0 = [complex_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    float_0 = -86.877
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    int_0 = -1073
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    bytes_0 = b"*\xe6L\xcdM\x8e"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    str_0 = "*p[cR\x0cW2R:B<zZQI!4"
    module_0.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    bytes_0 = b"\xcdu\x14=\xce]8\x07\x88\x1f\t\xba\xc3\x1b\xf2\x0e.\xa0l"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    bool_0 = False
    list_0 = [bool_0]
    set_0 = {bool_0}
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bytes_0 = b"Da\xb9\xfb\xc8\x80\x07X"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    float_0 = -3231.0
    none_type_0 = None
    module_0.fullmatch(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    float_0 = 2030.0
    str_0 = "'+EMY@=r{;rJ1!Dg9"
    module_1.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    bool_0 = False
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    float_0 = -217.2034
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    str_0 = ">Jy4EFRGMf"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    dict_0 = {}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


def test_case_1420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    int_0 = -39
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    int_0 = 1284
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    float_0 = -67.1
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    str_0 = "vJ\n!\x0bz:W22rT@"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    float_0 = -1040.69769
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    bytes_0 = b"\x0f\xfd\xf9\xef\xfd\x92HC\xbf\x18\xacWQ\x9eky+!"
    var_0 = module_0.escape(bytes_0)
    complex_0 = 2134.514 - 1364.4287j
    module_0.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    int_0 = 581
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    list_0 = []
    module_0.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    complex_0 = 611.044 - 959.38j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_1.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    bool_0 = True
    bool_1 = True
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    bytes_0 = b"\x14\x88"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    none_type_0 = None
    bool_0 = False
    module_0.subn(none_type_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    int_0 = 1012
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.fullmatch(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    dict_0 = {}
    bool_0 = False
    list_0 = [dict_0, dict_0, dict_0, bool_0]
    none_type_0 = None
    module_0.sub(list_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "uG=pz\tFjB0<q"
    list_1 = [none_type_0, none_type_0, str_0, none_type_0]
    str_1 = ""
    dict_0 = {str_0: list_1, str_1: list_0}
    module_3.BaseException(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    str_0 = "i\r#]Z"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = "?E/fe4\rasP\r"
    var_0 = module_0.escape(str_0)
    var_1 = module_0.finditer(var_0, var_0)
    module_1.get_new_command(var_1, var_0)


def test_case_1445():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1446():
    int_0 = -1933
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    str_0 = "reUCQ639!(G)J{D0r&5"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bytes_0 = b"/\x0c\x0f-\xe0\x82"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    str_0 = ""
    var_0 = module_0.findall(str_0, str_0)
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1451():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    bytes_0 = b"\xc7\x12"
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    str_0 = 'iXnls|>n&Z"x%P'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    complex_0 = -1513.1 + 2682.21149j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    int_0 = 816
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    float_0 = -1126.8
    bytes_0 = b"\xe3\x89{\x8dB\r\xdd\xd90\x95\xd4\xf8"
    module_1.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    bytes_0 = b"\x8d1\x82\xbd\xa5\xf4\xbbbp\x91\x01\xf0\xb2\x89\rX\x99"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    exception_0 = module_3.Exception()
    module_1.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bytes_0 = b"\xa9\xd0X\x9a9\x0030\x99"
    int_0 = 1786
    dict_0 = {bytes_0: int_0, bytes_0: int_0}
    tuple_0 = (bytes_0, int_0, bytes_0, dict_0)
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    float_0 = -377.63678
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bytes_0 = b"\xa7\n\r\xfb\xe3\xfaE\x0e\x89\xb9\xea\xe1\xc9\xe4\xbb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    tuple_0 = ()
    module_0.sub(tuple_0, tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    float_0 = 2417.838
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    bytes_0 = b"(\xa9A\xf3\xff\x87\x94"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    bytes_0 = b"\x10\xca\xf1"
    module_0.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    str_0 = "q#MyH/0/ CDFQjv`\np}:"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    bytes_0 = b"\xe85{\x10\x92Z \xc1T\r\xd2I"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    bytes_0 = b"\x96\xcf\x9a\x8df\x13usF"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    str_0 = "=%1A%q~>uIbhv"
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    str_0 = "m:B,`g\rD"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bool_0 = False
    float_0 = -256.4774
    list_0 = [bool_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    int_0 = 1263
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    bool_0 = True
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    int_0 = -1930
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    float_0 = -1331.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    complex_0 = -2838 + 798.51j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    str_0 = ".`BZ&Z-8R%$=/"
    module_0.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    float_0 = -819.022196
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    dict_0 = {}
    none_type_0 = None
    module_0.sub(dict_0, dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    str_0 = "Aw)z}Hm[Q]RnfY_E1FD"
    module_0.Scanner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    str_0 = "#dsFPD7yXNTfM3!%#"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    float_0 = 896.04
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    int_0 = 418
    error_0 = module_0.error(int_0)
    none_type_0 = None
    module_1.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    set_0 = set()
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    bytes_0 = b"\xd4\xb8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bytes_0 = b"3)\x05\x1aK\x81\xb2.v?\xa4\xaf9\xf7\xad\x1e"
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    float_0 = -4164.94931
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1504():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    int_0 = -4787
    module_2.auto(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    str_0 = "|IdP[{JN!3"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    float_0 = 3495.93
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    list_0 = []
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    str_0 = "_}bxrt8P9"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    auto_0 = module_2.auto()
    module_0.findall(auto_0, auto_0)


def test_case_1515():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1516():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bytes_0 = b"\xfb\xb8+"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    bytes_0 = b"\xb1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = '"AA~vS9@O!n\r2@]T :\x0c7'
    tuple_0 = (set_0, str_0)
    module_0.findall(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    float_0 = -190.6
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    none_type_0 = None
    bytes_0 = b"\x04\xb3w\xc6\xfaP"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    float_0 = -1464.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    var_0 = module_0.purge()
    module_0.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    str_0 = "&d<G^-qH:GBbQAaq4 VU"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    int_0 = -2814
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    int_0 = -1244
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    str_0 = "j}h_8[\x0c}byb?"
    list_0 = [str_0, str_0, str_0, str_0]
    module_3.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    float_0 = 2085.23803
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    str_0 = "|d:]TgLqLR}n-q*1V"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    int_0 = -1490
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    float_0 = 1672.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    str_0 = "xhL=6S]6sD+"
    var_0 = module_0.purge()
    var_0.__iter__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    bytes_0 = b"\xacp\xeeL\x10\x03\xee\x81C\xb6i\xd8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    list_0 = []
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    dict_0 = {}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    none_type_0 = None
    module_0.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    bytes_0 = b"\xf3\xdf\x90\x05\x8b\xcf\x10\xf9c\xc6\xcc[\r\x93|"
    none_type_0 = None
    module_0.fullmatch(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    bool_0 = True
    none_type_0 = None
    module_0.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    bytes_0 = b"M\xa8\xad\x8a\xc1m$\xcb4j@3"
    none_type_0 = None
    module_0.finditer(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    float_0 = -772.7
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    bytes_0 = b"\xee\xb8\xe8\xf9q\xd3h\x06\xaf\x89e\xf0&4i"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    list_0 = []
    dict_0 = {}
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    float_0 = 3813.3
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    float_0 = 1376.69
    module_0.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    var_0 = module_0.purge()
    bytes_0 = b"c\xf7+\x1c\xd8\x91\x8a~-z\xfbu~\x9fn*\x07\xa1N\xc6"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    int_0 = 3041
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    bytes_0 = b"\xe5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    bool_0 = False
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    none_type_0 = None
    bytes_0 = b"\xadi\xe0\xcaM\xb1\x83\xcc\x83\xdd3\x81\x0b\x84\xe1_\x82w\xdf\x81"
    module_0.findall(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bytes_0 = b"\x86/\x8e\x98;\xc2\xd1eD\x85\xdd"
    enum_dict_0 = module_2._EnumDict()
    module_0.split(bytes_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    module_0.split(error_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    int_0 = -1053
    tuple_0 = (int_0,)
    set_0 = {tuple_0, int_0, tuple_0, int_0}
    module_1.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    str_0 = "`)<jJm`pL{.\rI_Vc"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    var_0 = module_0.purge()
    enum_dict_0 = module_2._EnumDict()
    module_1.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    float_0 = -2066.7269
    none_type_0 = None
    module_0.finditer(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bytes_0 = b")\x96S\xc1\xc1\xb1\xa6\xe7\xdb\xc2[+\xa3\x14\x9c"
    dict_0 = {bytes_0: bytes_0}
    module_1.get_new_command(dict_0, dict_0)


def test_case_1579():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1580():
    str_0 = "?2R`=HgC?9\r:Oko.;\\"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    set_0 = set()
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    str_0 = "9vjc I0Q4=KF_|R"
    var_0 = module_0.finditer(str_0, str_0)
    module_1.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    complex_0 = -946.565801 + 564.1658j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"\x81tI\xc9\x1fq"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    bytes_0 = b"J\x81IP0A\xd0\x02\xd4\x92-\xe8\xba\xe3xi\xf5\x88^\xd6"
    list_0 = [bytes_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    none_type_0 = None
    int_0 = 64
    var_0 = module_0.purge()
    var_0.__call__(none_type_0, int_0, type=int_0, start=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    float_0 = -160.522388
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    str_0 = ".vY.k<t"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    float_0 = -531.959003
    module_0.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    bytes_0 = b"\xd3\x16\xa0\xba_\x19?\xe5w\x96\xbf"
    var_0 = module_0.compile(bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    bytes_0 = b"Wcl\xcf\x84\t\x02O\xcf4\x86"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    float_0 = -742.3897
    module_0.split(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    bytes_0 = b"\xa5Sk\xb1\xfb\x05i\xa9D\xa8k\x03\x1c\xf7bN"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    str_0 = "\rew\x0bx2"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    str_0 = 'beADn"o`D5V'
    var_0 = module_0.purge()
    var_0.__getitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    dict_0 = {}
    module_0.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    bytes_0 = b"\x91\x93f\xe1\x9d\n\x95\xfb\x9e\xb1\x10\xfevb\x01\x96"
    none_type_0 = None
    module_0.finditer(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    float_0 = 1130.531284
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    float_0 = 767.1008
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = -2651
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bytes_0 = b"\xbe\r"
    module_1.match(bytes_0, bytes_0)


def test_case_1606():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1607():
    tuple_0 = ()
    module_0.compile(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    set_0 = set()
    module_0.compile(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    bytes_0 = b"\xda\xcb5O\x07\xdb\tDt\xeb\x83(\xbe\xc0U\xcb"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    int_0 = 1150
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    str_0 = "ceTN$KYD3?rJF"
    var_0 = module_0.finditer(str_0, str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    none_type_0 = None
    str_0 = "!~x_"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: str_0}
    module_2.EnumMeta(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    bytes_0 = b"/>s`"
    module_1.match(bytes_0, bytes_0)


def test_case_1619():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1620():
    complex_0 = -1166 - 1028.717j
    int_0 = 560
    module_1.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0}
    module_1.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    str_0 = "\x0cd(HQJc}#I)TJ"
    module_0.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    int_0 = -1101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    bytes_0 = b"x\\\x108B8\x9f\xbd7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    str_0 = "~\x0c5kmrFw\\D"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bytes_0 = b"\x0f"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    module_1.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    str_0 = "a$\nL\ras.T"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1630():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    base_exception_0 = module_3.BaseException()
    float_0 = 3079.77186
    module_1.get_new_command(base_exception_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    enum_dict_0 = module_2._EnumDict()
    module_1.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    int_0 = -2688
    module_0.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    str_0 = "M"
    var_0 = module_0.match(str_0, str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bytes_0 = b"\xb0F\xc6\x892\x0cR\xbd%\x12@\xb5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    float_0 = 345.33727
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    int_0 = -4004
    set_0 = {int_0, int_0, int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    bytes_0 = b"\xbf]F\x15\x97\xb6\xd1\x9d\xff\xa3\xd1/\x89"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    str_0 = "[rlo'~}Ri"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    bytes_0 = b"\x96\xec\x83ZJ\xc1\xc7a\x0e\xd6\x12\xba)\xa9\x95\xb9"
    module_2.EnumMeta(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    str_0 = "ic+,uM[xZU"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    enum_dict_0 = module_2._EnumDict()
    tuple_0 = (enum_dict_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    int_0 = 3112
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    var_0 = module_0.purge()
    bytes_0 = b"\xa05\x1a\xbd\xee"
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    str_0 = "@he"
    module_0.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    bytes_0 = b"\xae\xd3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    str_0 = "leyzEF/)^A!cr!$\r"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    bytes_0 = b"\xdc9/\xeb\x0f\xeb\xe6bF[\xbd\xcd\xf0\xcf\xb6"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    bytes_0 = b"\n{\xef~\xfd(\x1eH/66(\r\xc6\xc8\xbf>N\xce"
    none_type_0 = None
    module_0.subn(bytes_0, bytes_0, bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    int_0 = -161
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    enum_dict_0 = module_2._EnumDict()
    module_0.subn(enum_dict_0, enum_dict_0, enum_dict_0, flags=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    set_0 = set()
    module_0.sub(set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    var_0 = module_0.purge()
    var_0.__setattr__(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    bytes_0 = b"\t"
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    int_0 = -3043
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    int_0 = 5971
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    bytes_0 = b"\xb2\x15\x8fZh\xaf\xfb\xe8\xe5\xe3\x9fa\xaa\x19\xb9\x0e"
    module_4.Error(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    bytes_0 = b"\x86f\\\xc0Y\xaai\xdc\xbf\xed\x8bw)\xb5\xbd\xa7t"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    float_0 = 3071.282136
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    tuple_0 = ()
    module_0.compile(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    float_0 = -1037.357476
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    int_0 = 2335
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    str_0 = "F\tc\n.ai)"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    str_0 = "I"
    str_1 = '16V sMZ?.FjL}D;5Q"'
    str_2 = "v3c2\n\tLQ"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_0: str_2}
    module_2.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    float_0 = 1991.43
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    bytes_0 = b"\xbb\xb6|\x03\x1c\xc2\xf6#?\xd9\xe8\xf9"
    var_0 = module_0.escape(bytes_0)
    set_0 = {var_0, var_0}
    module_0.split(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    str_0 = ">An:M,oKra"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    dict_0 = {}
    error_0 = module_4.Error(**dict_0)
    module_0.fullmatch(error_0, dict_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    float_0 = -2475.614
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    str_0 = "_@dV.md\x0b%\x0cBucq[}S"
    module_0.Scanner(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    complex_0 = -2571.69 + 871.212j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    bytes_0 = b'\xa4"\x93\xb0\x83\xcd9D/\n\n[@\x16[?9\xc2:'
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    int_0 = -3735
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    str_0 = "L~q\\tset\x0beDDJ&\ndLQR"
    dict_0 = {str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    object_0 = module_3.object()
    none_type_0 = None
    module_1.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    str_0 = "zoE\x0bHxzaijL_#H\tv"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1696():
    auto_0 = module_2.auto()
    dict_0 = {auto_0: auto_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    bytes_0 = b"\xd1\x00 o\x9f~\x83.n\xe3rEh"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    int_0 = -353
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    bytes_0 = b"\xf1Z\x89\x81\xb7\xb3\xa9i"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    base_exception_0 = module_3.BaseException()
    module_0.template(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    dict_0 = {}
    none_type_0 = None
    module_0.split(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    float_0 = -1298.333
    list_0 = [float_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    dict_0 = {}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    str_0 = "5\x0bSVy"
    var_0 = module_0.findall(str_0, str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    complex_0 = -2843.205 + 1187j
    module_0.search(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    str_0 = ",8!mD)>26NW0|Q;G\n\x0cUA"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    str_0 = "d06A1e`TVC=3E10l"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    complex_0 = -579.380665 - 5984.77375j
    none_type_0 = None
    module_0.finditer(complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    int_0 = -624
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    error_0 = module_4.Error()
    module_0.findall(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    none_type_0 = None
    int_0 = -578
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_1.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    error_0 = module_4.Error(*list_0)
    str_0 = "+OG9{kuY"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    int_0 = 965
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    tuple_0 = ()
    module_0.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    int_0 = 2797
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0, tuple_0, tuple_0]
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    bool_0 = True
    tuple_0 = ()
    module_0.subn(bool_0, bool_0, bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    float_0 = -1482.97
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0, var_0, var_0}
    module_1.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    str_0 = "X"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bytes_0 = b"\x8a\xfa`\xf5\xadqb\xc5\xd9\t"
    complex_0 = -1870 + 2828.758j
    module_1.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    bytes_0 = b""
    var_0 = module_0.compile(bytes_0)
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.split(exception_0, exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    float_0 = -2195.0
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bytes_0 = b"Q\xc8\x96"
    none_type_0 = None
    var_0 = module_0.findall(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    var_1.__call__(
        bytes_0, bytes_0, bytes_0, qualname=bytes_0, type=none_type_0, start=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_1734():
    int_0 = -1787
    module_1.match(int_0, int_0)


def test_case_1735():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    int_0 = -3156
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    none_type_0 = None
    str_0 = ""
    module_1.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    str_0 = "A5?M[+8BhY.{}wSkxGi4"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    str_0 = "F%:f="
    var_0 = module_0.compile(str_0)
    set_0 = {var_0, var_0, var_0}
    tuple_0 = (set_0, var_0, var_0)
    module_1.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    str_0 = "u7KvCD&B$6y+Us6Vs,X"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    none_type_0 = None
    object_0 = module_3.object()
    module_1.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    str_0 = "\x0cZ9\x0c\"l7^U}X\x0b'~s"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    int_0 = -1080
    list_0 = [int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    str_0 = "Z;W $\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bytes_0 = b"\x8c\x12@R"
    list_0 = [bytes_0, bytes_0, bytes_0]
    error_0 = module_0.error(list_0)
    module_0.subn(error_0, list_0, list_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    bytes_0 = b"EOJ\xd3\xaf,Q\xabjV\xdb\x12\x04|\xeb\x187\xdf\x06D"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    str_0 = "U1H`}V\x0baPReZCLa(R"
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    float_0 = 1671.07
    set_0 = {float_0, float_0, float_0}
    module_1.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bytes_0 = b"\x00\xf3uv\xfb\xac\xb4Qz&"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    module_0.template(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    var_0 = module_0.purge()
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1760():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    str_0 = "`y}bj5 NwS"
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    int_0 = -687
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    float_0 = 2521.036
    var_0 = module_0.purge()
    var_0.__reversed__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    bytes_0 = b"\xbfIq\xbc\xf6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1767():
    int_0 = -353
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    bytes_0 = b"\xea\xf8\xc9\x1d[\xbfb"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    int_0 = 701
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    str_0 = "NZRw D[|\\}C*;P=^1Ds"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    bytes_0 = b"\xb9\xcd\x07\xb0\xb8\xa3\xa3*\xbexu\xc0\x0fj"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    error_0 = module_4.Error(*list_0)
    module_0.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1776():
    none_type_0 = None
    str_0 = "TTDFj"
    module_0.findall(none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    bytes_0 = b"V\xed\xc4\xac\xfc\x17[\x94\xebT}\xd1\x05L\x95\xc6\\"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    int_0 = 342
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    str_0 = "FWLAT1zq%>1VsP'IE"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    str_0 = "%6_M4EkEHsq"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    float_0 = -1475.0
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    bytes_0 = b":\xf9\xf8("
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    set_0 = {regex_flag_0, regex_flag_0, regex_flag_0, regex_flag_0}
    module_0.escape(set_0)


def test_case_1784():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1785():
    bytes_0 = b"\xd5i\xa9\xfaA\x9c\xb8O\rj\xe0\xe96\xac \xd4\xb4i\xc7"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    float_0 = 4097.59
    module_0.split(float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bytes_0 = b"v\x16a\x91dZ\xdft5%\x1d\x8d8\x0bF"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    set_0 = set()
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    error_0 = module_4.Error()
    int_0 = -2391
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    int_0 = 4810
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    str_0 = 'w68h"y\x0b0Mn`oEY{#kTh'
    var_0 = module_0.sub(str_0, str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    int_0 = -1529
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    str_0 = "Bh/9!/== Iv=c3G82:"
    var_0 = module_0.search(str_0, str_0)
    dict_0 = {var_0: str_0, var_0: var_0, var_0: str_0}
    module_2.unique(dict_0)


def test_case_1798():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1799():
    int_0 = 3499
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    bytes_0 = b"\xdd\x9c\x91\x0brN\xca\xc2]\xea\xa1k\x07o;\x8a\xb2"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    bool_0 = False
    bool_1 = True
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    bytes_0 = b"\xa4\x89\x83\xa4l3{"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    bytes_0 = b"-^"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    int_0 = -4006
    tuple_0 = ()
    module_1.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    str_0 = "*\x0b,@a)\x0b]"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    str_0 = "_M=QEgNL-L"
    var_0 = module_0.escape(str_0)
    dict_0 = {var_0: str_0}
    tuple_0 = (dict_0, var_0, var_0, var_0)
    module_1.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_1.match(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.split(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    bytes_0 = b"\xe1*\xbdO"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    str_0 = "= ^pt_ }Io"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    object_0 = module_3.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_1.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    tuple_0 = ()
    none_type_0 = None
    module_1.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    complex_0 = -1536 + 2197j
    module_0.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    str_0 = "A{!b->](;$D\n-ZQ#\\j=]"
    var_0 = module_0.escape(str_0)
    module_0.search(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    int_0 = 1564
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    regex_flag_0 = module_0.RegexFlag.MULTILINE
    none_type_0 = None
    module_0.sub(regex_flag_0, none_type_0, regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    var_0 = module_0.purge()
    int_0 = -229
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    float_0 = 921.580472
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    int_0 = -299
    module_0.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    int_0 = -962
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    float_0 = 1751.0
    int_0 = 1892
    module_1.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bytes_0 = b"\xf3\xb0\xceK\x8d\x16\xba0Q\x97I9\x82@\n\xefE"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    none_type_0 = None
    str_0 = ">_\\kE\x0b\\E{$"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    int_0 = 119
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    str_0 = "(C\x0b"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    bytes_0 = b"0\xec\xa8F\xa9\xe7\x1f\xb6\xef\xd3\x1f0\x7f)J\x1a"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    float_0 = 601.514305
    list_0 = [float_0, float_0]
    list_1 = [list_0, float_0, float_0, list_0]
    module_0.Pattern(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    bytes_0 = b"\xd9\x1e\xe4\xf6$\xe8\x90>i"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    float_0 = 3.238569
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    complex_0 = -125.39 + 980.889j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    bytes_0 = b"\xb6 \x8a\x90\xf0\x9eX\xc4~\x1cC\xed\xd8\x8f\xaa-"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    list_0 = []
    module_0.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    bytes_0 = b"`~"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bytes_0 = b"\x9f\xbdiIe`\x87\x1c\xdb^xw\xdc\x1f\xfb"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    int_0 = -4861
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    complex_0 = -1800.087 + 2690.95497j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    int_0 = 1212
    bool_0 = False
    module_1.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    str_0 = "|~@e\x0bf\\:_-G\x0b^vIz){j"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    bytes_0 = b"\xc3\xcc_fm1|\x88"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    int_0 = 81
    bytes_0 = b"?\xfa\xf8\xab\r\x94GC\x8co\x00"
    set_0 = {int_0, int_0, bytes_0}
    module_1.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    str_0 = "dcq"
    list_0 = [str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    int_0 = 4280
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    float_0 = -2695.049209
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    str_0 = "'f"
    module_1.match(str_0, str_0)


def test_case_1867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1868():
    int_0 = 27
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bytes_0 = b"r\xf5\x1af\xaf`\x0f"
    list_0 = [bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    float_0 = -270.883397
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    complex_0 = -740.7016 - 1795.995982j
    module_0.match(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    base_exception_0 = module_3.BaseException()
    module_0.escape(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    int_0 = 2419
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    float_0 = 1415.895
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1880():
    int_0 = 734
    none_type_0 = None
    module_0.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_1.get_new_command(regex_flag_0, regex_flag_0)


def test_case_1883():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1884():
    str_0 = "Q_w"
    error_0 = module_0.error(str_0)
    module_0.escape(error_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    int_0 = -1040
    none_type_0 = None
    module_0.finditer(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    int_0 = -988
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    int_0 = 4316
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    int_0 = -3098
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    str_0 = '-0&=tryYUq<pb"'
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    list_0 = []
    bool_0 = False
    list_1 = [list_0, list_0, bool_0, list_0]
    none_type_0 = None
    module_1.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    float_0 = -1897.8088
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    bool_0 = False
    float_0 = -2142.39
    module_1.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    int_0 = -1378
    str_0 = "0p\x0bpH<Lfc&qS%+1S!VK"
    module_0.finditer(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1901():
    int_0 = -366
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    bytes_0 = b"=ooX4\x93!T"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_1905():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1906():
    enum_dict_0 = module_2._EnumDict()
    module_1.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    float_0 = -3003.9
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    bytes_0 = b"\xdc\xea"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    list_0 = []
    none_type_0 = None
    module_0.subn(list_0, list_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    str_0 = "g4bYL6P*yC"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    int_0 = 1624
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    var_0 = module_0.purge()
    bool_0 = True
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    regex_flag_0 = module_0.RegexFlag.ASCII
    bool_0 = False
    dict_0 = {
        regex_flag_0: regex_flag_0,
        bool_0: regex_flag_0,
        bool_0: regex_flag_0,
        bool_0: bool_0,
    }
    module_1.get_new_command(regex_flag_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    str_0 = "|"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    bytes_0 = b"\xa9c\xf9~\xae"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    bytes_0 = b"\xc4\x9d\xceWN\xb4\x90)\xbc\xe6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1923():
    float_0 = -1390.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    str_0 = "?x$LPUV).\\\n^`=y"
    module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    str_0 = "bP\nEAWrJ"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1927():
    float_0 = -1714.8
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    int_0 = -252
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    str_0 = "0mL5t;G|\t"
    var_0 = module_0.search(str_0, str_0)
    tuple_0 = (str_0, var_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    bytes_0 = b"\xba\xaa\x92\xf3`V\xfa\x8a\x04\xcc:\r"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    int_0 = -835
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    int_0 = 998
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    enum_dict_0 = module_2._EnumDict()
    module_1.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    tuple_0 = ()
    module_0.Scanner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    str_0 = "O}Cb:2o&rEB:\tK;eh"
    var_0 = module_0.finditer(str_0, str_0)
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    bytes_0 = b"K\x8fkr\x8a"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    float_0 = -4928.49392
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    float_0 = -2369.9743
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    str_0 = "l{;w5p~O^d^}fk28 5"
    var_0 = module_0.purge()
    module_1.match(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    var_0 = module_0.purge()
    module_0.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    float_0 = 2591.53781
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bytes_0 = b"\t#\xba\xe8\x98\xbfaKV\x12\x91\x8e\x04|'o\x87"
    var_0 = module_0.escape(bytes_0)
    var_1 = module_0.fullmatch(var_0, var_0)
    module_1.get_new_command(var_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    complex_0 = -792.951757 + 3144.987j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bytes_0 = b"\xbfC\x8e\xb2\x9d\xfcK\x88\xb6\x14\xb7%\x8d"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    bool_0 = True
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    tuple_0 = ()
    module_0.finditer(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: dict_0}
    float_0 = -1781.5
    module_1.match(dict_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    str_0 = "Y"
    none_type_0 = None
    module_0.finditer(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    complex_0 = -1419.0682 + 1876.6j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    int_0 = 150
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    bytes_0 = b"t\x7f\xe8R~\x01\x897?\n\xa1{"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    int_0 = 765
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    complex_0 = -1127.111167 + 534j
    bool_0 = True
    module_1.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    bytes_0 = b"\x8e\xedi\xd9\x15\x8d\xa0O\xb8\x1fO\xe9"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    bytes_0 = b"*\xaf3\xcc\x9b)O\xa4P\x9d"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bool_0 = False
    none_type_0 = None
    module_0.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    none_type_0 = None
    module_0.sub(regex_flag_0, regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    int_0 = 1882
    bool_0 = True
    module_0.split(int_0, bool_0, int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    list_0 = []
    str_0 = "3:}\x0b4Jb\x0bhE'r\"02c N"
    str_1 = "7.i1%z<K)n'kwy5wVz\x0c}"
    str_2 = "@\"t\x0ck\t0*h\x0bl=m'9lx"
    dict_0 = {str_0: list_0, str_0: list_0, str_1: str_1, str_2: list_0}
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    tuple_0 = ()
    var_0 = module_0.purge()
    var_0.__delattr__(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    str_0 = "mzIlPc,m"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    str_0 = ":kS+Nq8'5[_\"or"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    int_0 = -1027
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    complex_0 = -1984.895043 + 2084.6j
    none_type_0 = None
    module_0.finditer(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    bool_0 = False
    tuple_0 = ()
    set_0 = {bool_0, tuple_0, bool_0, tuple_0}
    module_1.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_0.search(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    set_0 = set()
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    bytes_0 = b"\xd6\x9d\xc9\xca}\xd5`U\x07\xa7"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    str_0 = "\r\n' mUJrTY15Z"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    float_0 = -1047.87
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    complex_0 = 2171.22897 + 916.492j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    bytes_0 = b"\xdf\x1fY\xe31\x0e\xbe1\xfbj\r"
    var_0 = module_0.purge()
    var_0.__repr__(bytes_0)


def test_case_2009():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2010():
    int_0 = -2264
    module_4.Error(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    str_0 = "9*6*]\x0c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    bytes_0 = b"\x13\x99\x99\xdd\xbe\xc5L\x0f?\xc9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    int_0 = 312
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.subn(bool_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    int_0 = 207
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    bytes_0 = b"\xf0?\xc9_\x05[;\xca\x93\xef\x81:m\x16\xd0\xdb\x86"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    bytes_0 = b""
    dict_0 = {}
    auto_0 = module_2.auto(*bytes_0, **dict_0)
    none_type_0 = None
    bytes_1 = b"X@\xd2\x92\x05\xf2+\xf0\x002"
    var_0 = module_0.sub(bytes_1, bytes_1, bytes_1)
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.split(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    int_0 = -702
    none_type_0 = None
    module_0.sub(int_0, int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2023():
    float_0 = -2227.33874
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    int_0 = 2667
    module_0.split(int_0, int_0, int_0, int_0)


def test_case_2027():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2028():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    int_0 = -70
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    int_0 = 826
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    bytes_0 = b"\x99i\xd7>s\x95\x95\xbf\xd4\xf3\x7f\xb9\x9c\x12\xbb\x15"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    enum_dict_0 = module_2._EnumDict()
    str_0 = "\nPRvZ~"
    enum_dict_0.__setitem__(str_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    bytes_0 = b"\xd91m-ky\x87\x1e\xa3\xe0\xaf:\x10\xa6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2037():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    int_0 = -357
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    bool_0 = False
    str_0 = "b+b.8`'|ymX"
    var_0 = module_0.findall(str_0, str_0)
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bool_0 = True
    int_0 = 842
    module_1.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    list_0 = []
    module_0.fullmatch(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"W\xd6\xe8$\xa7\xc5\x11\xadX\xca\xc5eN"
    var_0 = module_0.search(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    str_0 = "hf:)(q49-h$\t-Pxz.u-R"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    bytes_0 = b"\xbb\xb3w\xd0w^8\x08\xaa\xaaO"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    int_0 = -2131
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    error_0 = module_4.Error()
    float_0 = 4946.0
    module_0.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    bytes_0 = b"a\xdb\xf3\xf8M\x7f\xc1+\xa6>\xaa"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    str_0 = "d0V}k</lB"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    none_type_0 = None
    var_0 = module_0.purge()
    module_1.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    str_0 = ":8j5vg.3$9`l!>ju"
    var_0 = module_0.template(str_0)
    module_1.match(var_0, var_0)


def test_case_2056():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2057():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    int_0 = 1266
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    str_0 = "(s.?U1O#}cwhpYig!"
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    str_0 = "0\\(\t\n8\rFpC:JN/"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    str_0 = "?\n3pSeD\n*plOYqf9"
    bool_0 = False
    set_0 = {str_0, bool_0, str_0}
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    bool_0 = True
    set_0 = {bool_0}
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    tuple_0 = ()
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    set_0 = set()
    module_0.subn(set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    str_0 = "Ul9c>+s S"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    list_0 = []
    module_1.match(list_0, list_0)


def test_case_2068():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2069():
    bytes_0 = b"\xd6\xd8"
    var_0 = module_0.escape(bytes_0)
    set_0 = {var_0, var_0, bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    float_0 = -3698.0
    set_0 = {float_0}
    module_1.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


def test_case_2072():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2073():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    int_0 = 3791
    none_type_0 = None
    module_0.split(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    int_0 = -1556
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    float_0 = -4524.4
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    none_type_0 = None
    module_2.EnumMeta(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    float_0 = -2449.4248
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bytes_0 = b"\x8c\xd1\xce\x0c\x137'\x07\xcc\xd9\xe6\x88\xad\xc2\xf88"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    bytes_0 = b"\xb5\xc4#F\x07\x93\xf2\xfb\xa32\xb2\xd9\xfb"
    var_0 = module_0.purge()
    var_0.__delattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    int_0 = -2886
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    bytes_0 = b"\x86\xa4"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    str_0 = "6+=,a\x0c"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    int_0 = -58
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    bytes_0 = b"\xa6\xfc!\x19+\x84\x9b\x90"
    module_0.sub(var_1, bytes_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    bytes_0 = b"u\xbf~\x958\t \x9eI\xda\x04\x81\x0b\x86\xcdF\xb4"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    base_exception_0 = module_3.BaseException(*list_0)
    module_0.finditer(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    set_0 = set()
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    bytes_0 = b"\xfe\xd7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    complex_0 = -84 + 1400.425j
    module_0.split(complex_0, complex_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    int_0 = -813
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    bool_0 = False
    bytes_0 = b"\xe5z\xc6\xbf5\x117\x0e\xf36\x17\x05\x10"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    set_0 = set()
    none_type_0 = None
    module_0.sub(set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bytes_0 = b"\xdc\xc1"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    none_type_0 = None
    str_0 = "+Wc)_"
    dict_0 = {
        none_type_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_1.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    int_0 = -2451
    bytes_0 = b"@\x07\\\xb2\x9d\x96["
    module_0.sub(int_0, int_0, bytes_0)


def test_case_2104():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2105():
    bytes_0 = b"\xa3j\x15\xe3\x1e\x8b\xff\xbe\xc3}>\xbfX.\xbb\x99\xa0\xa6>"
    var_0 = module_0.finditer(bytes_0, bytes_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bytes_0 = b"i\x8837s\xd8;T\xd0 ~\xf4"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    bytes_0 = b"'\xafN\xa6\x9bts"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    bytes_0 = b"|}\x91\xf0\xd0Bu\xe8\x853\xee\x85\xbb"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    base_exception_0 = module_3.BaseException()
    module_0.sub(
        base_exception_0, base_exception_0, base_exception_0, flags=base_exception_0
    )


@pytest.mark.xfail(strict=True)
def test_case_2110():
    str_0 = "(ByeY?I"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    int_0 = -911
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_1.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    bytes_0 = b"\x9fI\x10\xb2\x12 P\x06\x1f\xcc\\'"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    bytes_0 = b"Iz\x80E\xc4\x97\x05\xa5=\xd5\x15\xbb$F\x84^\xa8t"
    var_0 = module_0.match(bytes_0, bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    bytes_0 = b"\x14\x10\x04h\x81\x1e\xf6\xd3\xcf\x03\xe5\xa7\xbei\x1c"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    bytes_0 = b"\xac\xab*\xf5bM\xa8\xc6\xef\x9f\xc7\xcc\x18\x0be"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    str_0 = "1Pp'\t^^\t)"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2119():
    float_0 = -1672.26
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    float_0 = 129.01423
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    int_0 = -2098
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    str_0 = "\n"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    int_0 = 1211
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2127():
    int_0 = -166
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    bytes_0 = b"\xe7vw\x06"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    int_0 = -1195
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    float_0 = 4659.49
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    var_0 = module_0.purge()
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    int_0 = 600
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    str_0 = '"YNZJPaE#J`t@'
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    complex_0 = -1795.94 + 515.905269j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2138():
    str_0 = "HFm3768';*h9bt\t!"
    var_0 = module_0.fullmatch(str_0, str_0)
    module_0.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    bool_0 = False
    list_0 = [bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0, none_type_0)
    module_0.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bytes_0 = b"32~\xd9Z\xb7#\xca\xe2"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    complex_0 = 2138 - 463j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bytes_0 = b"\xfbh\r\x19\xc6\x90"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    int_0 = -122
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bytes_0 = b"\xd6\x9f\x07l\xeaM\xb3q\xc8k\x81"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    int_0 = -537
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    int_0 = 1469
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    int_0 = -2033
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_1.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    int_0 = -186
    complex_0 = -1226.2245 + 1943.653j
    module_1.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    bool_0 = False
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    int_0 = -1002
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.split(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    int_0 = -471
    enum_dict_0 = module_2._EnumDict()
    enum_dict_0.__setitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    float_0 = 1393.2
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    int_0 = -468
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    tuple_0 = ()
    module_0.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    float_0 = -2426.8235
    module_0.fullmatch(float_0, float_0)


def test_case_2163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2164():
    str_0 = "wK4S!f<"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    bytes_0 = b"RE\xc1\xfaC\x81"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    list_0 = [tuple_0, bool_0]
    none_type_0 = None
    module_0.findall(list_0, none_type_0, tuple_0)


def test_case_2166():
    str_0 = '(Wk"hDs+\r'
    dict_0 = {}
    var_0 = module_0.escape(str_0)
    with pytest.raises(TypeError):
        var_0.__new__(str_0, str_0, str_0, str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    var_0 = module_0.purge()
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    bool_0 = False
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    bool_0 = True
    error_0 = module_0.error(bool_0)
    module_1.get_new_command(error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2174():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    str_0 = "!Qb|s!col>\td[A25"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    int_0 = -961
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    exception_0 = module_3.Exception()
    module_0.sub(exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    object_0 = module_3.object()
    set_0 = {object_0, object_0, object_0}
    none_type_0 = None
    module_0.subn(set_0, set_0, object_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    var_0 = module_0.purge()
    var_0.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    bytes_0 = b"P\xc5\x8f\xab\x06\xc27\x99\xff\xd2"
    var_0 = module_0.escape(bytes_0)
    var_1 = module_0.match(var_0, var_0)
    module_1.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    float_0 = 2580.9
    dict_0 = {float_0: float_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    str_0 = 'hVG"'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    none_type_0 = None
    bytes_0 = b""
    module_0.subn(none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    int_0 = 2319
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    none_type_0 = None
    bytes_0 = b"\x1f$\xbb\x9f\x05T\xec\xd5\x03(N\xd7\xfe\xaf\t6,d"
    module_0.split(none_type_0, bytes_0, bytes_0)


def test_case_2194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2195():
    str_0 = "3ctz}xwRtXA\n%`zC,<z"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    str_0 = "V(*i0I/Fg`t\n\t\x0bM"
    dict_0 = {str_0: str_0}
    module_3.BaseException(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bool_0 = False
    module_3.BaseException(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    int_0 = -1225
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    str_0 = "6 >s5F%FvV5"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    float_0 = 713.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bytes_0 = b"F\xec5I\xe8n\x04|\x12Q\x91"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    str_0 = "wI\x0cMnQb_"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_3.Exception(*tuple_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    str_0 = "c-E1JUN\\A@ub2D.zB^o"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


def test_case_2208():
    var_0 = module_0.purge()


@pytest.mark.xfail(strict=True)
def test_case_2209():
    int_0 = 3604
    none_type_0 = None
    module_0.findall(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    float_0 = -2517.58071
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    str_0 = "ou)WSM\t<%j"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    int_0 = -732
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    int_0 = -162
    none_type_0 = None
    module_0.subn(int_0, none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    bytes_0 = b"\t\x8e"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    set_0 = set()
    list_0 = [set_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    int_0 = 1843
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    str_0 = "mLyaKW6XEH"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    str_0 = "nl,,>vnAz*1cqIS"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    int_0 = -2067
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    bytes_0 = b"kp\xe1\xb6\xc7l\x19\xa3\xda\xf8\xf0\x83n\x9fp_\xfcQ"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    str_0 = "eswR&e:Lk4'\")\x0cYUcH@"
    module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    tuple_0 = ()
    module_0.template(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    str_0 = "E=n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    int_0 = 1087
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = "/$R;"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    str_0 = "m(F/ :ZujE"
    none_type_0 = None
    module_0.sub(str_0, none_type_0, str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    list_0 = []
    module_0.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    str_0 = "LJXF"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    float_0 = -255.1
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    str_0 = "285{+1>Tg,\njAY~"
    var_0 = module_0.search(str_0, str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    int_0 = -1499
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    tuple_0 = ()
    module_0.split(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    error_0 = module_4.Error()
    bool_0 = True
    module_0.sub(error_0, error_0, bool_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    int_0 = -3002
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    str_0 = "87N9\x0ct_'V)7K"
    str_1 = "}ZZ/*>]:Oq#X"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    complex_0 = 918.3327 - 750.5j
    module_0.compile(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2246():
    str_0 = "y$AQZ8"
    var_0 = module_0.split(str_0, str_0)
    tuple_0 = (var_0, var_0)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    none_type_0 = None
    str_0 = "=tV5D8"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    str_0 = ";+:a5}sh|Rb/"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    int_0 = 639
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    bytes_0 = b"\x9c\xbd\x8dO~"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    list_0 = []
    module_0.subn(list_0, list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    bytes_0 = b"\xedm{(o\xc3\x01"
    list_0 = [bytes_0, bytes_0, bytes_0]
    error_0 = module_0.error(list_0)
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    bool_0 = False
    list_0 = [bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    float_0 = 3297.29808
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    error_0 = module_4.Error()
    int_0 = -62
    module_0.match(error_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    int_0 = 2675
    module_0.subn(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    int_0 = 2443
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    bytes_0 = b"\xa7\xc1=?\xb3c\\\xd89Xb+\xca\x15w\xa1e/"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    str_0 = "pA@e\\eOU@l{+"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    bytes_0 = b"\x96\x13zh\xdc\xc6\xae\xcd\x81U\xa3\xac\x85\x930"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    bytes_0 = b"\xc6J\xf384\x10\x99\x92|\x1a*\xcb-0"
    var_0 = module_0.match(bytes_0, bytes_0)
    var_0.__setitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    float_0 = -933.7
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    str_0 = "IWwE=FT<LQ\rx[1|"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    complex_0 = -1896.6 + 3133.40277j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    none_type_0 = None
    str_0 = "55ZkP[OZ /b%-4#"
    error_0 = module_0.error(none_type_0, str_0, none_type_0)
    module_0.findall(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    str_0 = "i\nrtcV"
    module_1.match(str_0, str_0)


def test_case_2281():
    bytes_0 = b"\xdc\xa1\x83R\x11\xd1\xe9\x1a;"
    none_type_0 = None
    bytes_1 = b"\x1b\xba{\x04p\xa0\xe2\xe0\x02\xfd"
    var_0 = module_0.escape(bytes_1)
    with pytest.raises(TypeError):
        var_0.__new__(bytes_0, none_type_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    int_0 = 125
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    str_0 = "z>q5ZM@]~S&nN8"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    int_0 = -96
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    int_0 = -104
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    bytes_0 = b"\xaeW$c\xf6[`\xb1\x04\xa0\xae"
    module_0.search(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    str_0 = "eR{zO\r3k*x{\\@"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    str_0 = "t"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    tuple_0 = ()
    module_0.subn(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    dict_0 = {}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    float_0 = 683.0
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0, var_0]
    list_1 = [var_0, list_0, var_0]
    module_1.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    bytes_0 = b"\x0fZ9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bytes_0 = b"\x80\xaa\x86\x16\x8c\xb0\x97\x12\xd1"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    complex_0 = 1649.8 - 3440.5208j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    int_0 = -1543
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    int_0 = 201
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    none_type_0 = None
    int_0 = 5758
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    bytes_0 = b"n\xe6\xbd2\xd0\x8f;\xa2\xbb\xa8U\x08\xce\x88i0\\"
    module_0.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    bytes_0 = b"K\xed\xd2\th2\xeb\xef\x11\xd7\x94\x03\xf3\xf4\xe4\xe7%\xf1"
    none_type_0 = None
    module_0.split(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    float_0 = -1488.13
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    str_0 = "F("
    var_0 = module_0.purge()
    var_0.__setattr__(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    int_0 = 2886
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    int_0 = 286
    list_0 = [int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    str_0 = "`pAXCDwH?aq"
    var_0 = module_0.escape(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    float_0 = 316.2
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    str_0 = "*\x0c*Vu:"
    module_1.match(str_0, str_0)


def test_case_2325():
    bool_0 = True
    none_type_0 = None
    bytes_0 = b"\xc2"
    var_0 = module_0.match(bytes_0, bytes_0)
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    str_0 = "G!U\\U[a"
    none_type_0 = None
    module_0.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    float_0 = -3279.018599
    none_type_0 = None
    module_0.compile(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    str_0 = "] [\nR>4tU'"
    module_0.sub(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    complex_0 = 691.56 - 463.138j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    int_0 = 204
    set_0 = {int_0, int_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    dict_0 = {}
    module_0.subn(dict_0, dict_0, dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    str_0 = 'K}`Lng4}xr-dN"3kyD'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    int_0 = -1303
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    bool_0 = True
    str_0 = "6Ckp\n-52rT;\x0c@"
    tuple_0 = (bool_0, str_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    str_0 = "G}v"
    bool_0 = True
    module_1.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    float_0 = 2736.686101
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    bytes_0 = b"0\xf9z[\x83"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    float_0 = 5478.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    float_0 = 3597.314412
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    int_0 = 2411
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    bytes_0 = b"\xc8\x8f~\x1c\xd4\x01o\xb4\xf0\x0bS\xb3\x983\x9e\xdd\xdb\xe4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    bytes_0 = b"\xf0E\xd2\xde\x03sA\x9b\xb6\xf4\xe7\xc4e"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    bytes_0 = b"\x1a\n\x06\xe4=\x80,\xc9\x08\x8bGk\xed\xf4T"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    dict_0 = {}
    bytes_0 = b"}\x17!\xfa+G\xe4"
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    bool_0 = True
    none_type_0 = None
    module_0.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    str_0 = "\t(@dmnJGqur'D"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    int_0 = 755
    none_type_0 = None
    module_0.sub(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    bytes_0 = b"i\xa1\xc6h\xcab\x84\xaf\xa0'\x0c2\xe2\xc2\xado\x0c\xd7"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    bytes_0 = b"Q\x87)(D\x17G]s+>"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    int_0 = -2527
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0}
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    var_0 = module_0.purge()
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    bytes_0 = b"':\xd0Af"
    float_0 = 682.0
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2363():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    bool_0 = True
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    str_0 = "pS?"
    str_1 = "%"
    str_2 = "4?%"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_2.EnumMeta(**dict_0)


def test_case_2367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2368():
    enum_dict_0 = module_2._EnumDict()
    module_0.escape(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    int_0 = 2705
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    complex_0 = -104.25111 + 540.3711j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    int_0 = 1084
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    list_0 = []
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2374():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    module_0.match(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    list_0 = []
    error_0 = module_4.Error(*list_0)
    bool_0 = False
    bytes_0 = b"\x8c\x1dT]"
    var_0 = module_0.compile(bytes_0)
    var_0.__len__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    int_0 = -379
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    complex_0 = 455.367727 + 1095.28j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    int_0 = 2794
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    float_0 = -565.40396
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    str_0 = 'wYt)Py"nN]3#\\9\t`G'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    none_type_0 = None
    bytes_0 = b"G\x8bA\x82\x05|x/\xa0\n\xf9\xc4 \x92\x89"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    dict_0 = {}
    none_type_0 = None
    module_0.sub(dict_0, dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    bytes_0 = b"\x94Z\xf7\xcb\xd5\x9a3\x899\x11\x0f~\xfe\xa3\x18\xf0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    bool_0 = True
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    int_0 = -1738
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    bool_0 = False
    bool_1 = True
    module_1.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    float_0 = 2510.3
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    int_0 = -479
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    int_0 = -550
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    int_0 = 695
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    bool_0 = True
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    none_type_0 = None
    int_0 = -753
    module_0.split(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0, var_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    int_0 = 988
    bytes_0 = b"\x04\xc5\xeaE\xf1N>\x86\xf3\xbd9T\xd3\xa8\x1e$"
    none_type_0 = None
    module_0.sub(int_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bytes_0 = b",\xc18\xca\xa3\x9b_\xd1\x90\xe0#?n \xce\xe0\xcd\xf4"
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    str_0 = "D2+:#[W#/P+>boC8"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    int_0 = 1776
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    dict_0 = {}
    module_0.compile(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    str_0 = "x"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    int_0 = -2788
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    str_0 = "\\yw<"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    int_0 = -1630
    none_type_0 = None
    module_0.sub(int_0, none_type_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    bool_0 = False
    error_0 = module_0.error(bool_0, bool_0)
    module_1.get_new_command(error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    str_0 = '`J3|:B+y+cb"%P'
    var_0 = module_0.escape(str_0)
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    str_0 = "ii[t&."
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    int_0 = -1236
    module_1.get_new_command(int_0, int_0)


def test_case_2425():
    var_0 = module_0.purge()
    list_0 = [var_0]
    with pytest.raises(TypeError):
        var_0.__new__(list_0, var_0, var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    var_0 = module_0.purge()
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    str_0 = "CqzH^p4tKOr_t|+o~"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    dict_0 = {}
    module_0.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    complex_0 = -2199.141 + 2768j
    module_0.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    int_0 = -587
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    dict_0 = {}
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__contains__(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    int_0 = -2636
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    float_0 = -5024.53
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    bool_0 = True
    none_type_0 = None
    module_0.split(bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    bytes_0 = b"k\xf1"
    var_0 = module_0.match(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_2441():
    int_0 = 1546
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    complex_0 = -661.9821 + 2193.74j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    bytes_0 = b"\xb8\xc7B\xa6l\x82i=+\xa5\xd8o\x9a3\xa3\ns\x02Q"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    int_0 = 2554
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    bool_0 = False
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    base_exception_0 = module_3.BaseException()
    module_0.escape(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    float_0 = 1403.57
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    int_0 = -4605
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_0.search(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    bytes_0 = b"\xee"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    bytes_0 = b"\xaa\xaa\x08\xab\x9a^\x93gt!\x16\xef,"
    var_0 = module_0.split(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_2455():
    str_0 = ')LI?W!K\t[1W"'
    set_0 = {str_0, str_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    str_0 = 'q4hH\r"M!'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


def test_case_2459():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2460():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    int_0 = 2169
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    complex_0 = -971.5 + 2298.441675j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    str_0 = "2D<ik*x1w?t]("
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    str_0 = "+\x0cTCL$QH+tcq}X"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    bytes_0 = b"'n`\x88\xd2b\x8c\xe5\xf6_F\xf2\x95r\xca\xef"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.search(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    int_0 = 2465
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.subn(none_type_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    float_0 = -1770.3
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.subn(float_0, float_0, float_0, flags=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    str_0 = "XVS"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    float_0 = 453.0
    error_0 = module_0.error(float_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    str_0 = "pW;"
    module_0.Match(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    str_0 = "`iH"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    str_0 = "]TK%\t:+M^F;%T}\x0cD+}W"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    float_0 = -1363.670656
    none_type_0 = None
    module_0.finditer(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    int_0 = -1131
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    float_0 = 530.87
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    bytes_0 = b"\xa5~\xff\xd6\x12\xe8\x8bq_\xba"
    list_0 = [bytes_0, bytes_0]
    module_0.compile(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_0.finditer(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    int_0 = 2282
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.compile(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    int_0 = -650
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    int_0 = -4185
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    float_0 = 377.352097
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2494():
    int_0 = -1386
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    bytes_0 = b"[@0z"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    str_0 = "G] *jCUKT;Ui,z4\x0b^|5"
    str_1 = "\x0c[\x0cqC"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_0: str_1}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    complex_0 = 1361.71 - 3367.503j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    str_0 = "zz/"
    none_type_0 = None
    module_0.sub(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    float_0 = -377.815
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    int_0 = -2673
    dict_0 = {int_0: int_0}
    module_2.EnumMeta(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    str_0 = "S('C1Fz_r>>#VTZhWR"
    bool_0 = False
    module_1.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b"\xa0M\xc2[\xd3\x0c\x00-\xce\xaf\xe2\xe0\xc8\xf0\x03H"
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    bytes_0 = b"\xcc\x18\xc8\xa6l\x89\x0bLf\xfa1"
    module_0.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    bytes_0 = b"\xd2\xd2\x16\xb6]b\x0c!\xb5i\x03\xb6\xfc6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    none_type_0 = None
    module_0.sub(regex_flag_0, none_type_0, none_type_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    int_0 = -1553
    var_0 = module_0.purge()
    var_0.__setitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    int_0 = -315
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    complex_0 = -1688.6 + 1267.7j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    float_0 = -1123.64491
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    bytes_0 = b"\x9f\x9cC\xa0\xf6A\xfe\xa7\xfd\xbe\x9a\xbd\xa2\xab\xd3\x0c\x80`"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    set_0 = set()
    none_type_0 = None
    module_0.subn(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    float_0 = -137.7542
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    int_0 = -1093
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    int_0 = 672
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    int_0 = 2013
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    bool_0 = True
    var_0 = module_0.purge()
    tuple_0 = (bool_0, var_0, var_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    dict_0 = {}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    str_0 = "aJuZA]Yp="
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    str_0 = "CpIw\\_ht>y%<&s\x0b}be"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    float_0 = -559.162847
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    float_0 = -2420.5
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    str_0 = 'E"uF\rhTV'
    var_0 = module_0.subn(str_0, str_0, str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    tuple_0 = ()
    none_type_0 = None
    module_0.fullmatch(tuple_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_1.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2544():
    int_0 = 1239
    dict_0 = {int_0: int_0}
    module_0.fullmatch(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    bool_0 = False
    module_3.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2547():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    list_0 = []
    bool_0 = False
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    enum_dict_0 = module_2._EnumDict()
    str_0 = ")"
    none_type_0 = None
    module_0.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    str_0 = "7%nC`-F{.uXj\x0byV0P\t/"
    none_type_0 = None
    module_0.subn(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    str_0 = "(\t@<&wZ/vT<B[w}qc%F"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    int_0 = 3244
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    int_0 = 1655
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bytes_0 = b"\x1d\xc7\x02\x15"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    float_0 = 1340.0
    none_type_0 = None
    module_0.fullmatch(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    bytes_0 = b"-\x91?"
    module_0.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    int_0 = -2356
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bool_0 = True
    module_0.split(bool_0, bool_0)


def test_case_2563():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2564():
    str_0 = "']/(grV&+"
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    int_0 = -366
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    int_0 = 1938
    set_0 = {int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    list_0 = []
    module_0.sub(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    float_0 = -1871.6553
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    int_0 = 450
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bytes_0 = b"\xe6\xb2\xb2\xf3Fb:\xd7\xb9y\xae\\q\x7f\xf9l"
    tuple_0 = (bytes_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    set_0 = set()
    none_type_0 = None
    module_0.compile(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    int_0 = -1438
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    int_0 = -143
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    bool_0 = False
    complex_0 = 1862.9759 - 2020.005302j
    module_0.split(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    var_0 = module_0.purge()
    error_0 = module_0.error(var_0, var_0)
    module_1.match(error_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    float_0 = -3309.82
    module_0.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    str_0 = ""
    bytes_0 = b"\x0c+W\xefa\x1ds\xfb^u\xe1:r\xd47\x99\x8c"
    var_0 = module_0.match(bytes_0, bytes_0)
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    complex_0 = 1871.484 - 1279.8105j
    module_0.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2591():
    int_0 = -2122
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    none_type_0 = None
    list_0 = [none_type_0]
    module_2.EnumMeta(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    error_0 = module_4.Error()
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    float_0 = 3881.812
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2597():
    list_0 = []
    module_0.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2600():
    str_0 = "z."
    set_0 = {str_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    bytes_0 = b""
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    bytes_0 = b"\xb9Aa&\x15"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    str_0 = 'Q T%Mk9u+\niF"^"Y#'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    int_0 = 2737
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    str_0 = "H'\x0cN\x0c\x0bh"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    error_0 = module_4.Error()
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    int_0 = -524
    none_type_0 = None
    module_0.fullmatch(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    bytes_0 = b"\x00\t:\xd9\x1b\x01\xef\xfe\xc7`kG?\xb0\x15"
    str_0 = "T"
    tuple_0 = (bytes_0, str_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    int_0 = 2684
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    int_0 = 1533
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    str_0 = 'h]j!AvF9Yf"7]#'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    enum_dict_0 = module_2._EnumDict()
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    int_0 = -1233
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    none_type_0 = None
    module_2.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    str_0 = "w6u~ Ld"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    set_0 = set()
    list_0 = [set_0]
    str_0 = "H="
    str_1 = "%W\rS>!4\x0cU?:nNi ~"
    dict_0 = {str_0: str_0, str_1: list_0}
    module_3.Exception(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    module_0.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    int_0 = 501
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bytes_0 = b"\x0b\xed\x0e\xce"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    str_0 = "ZXK],E+M[hpWjz_g"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    int_0 = 2275
    none_type_0 = None
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    float_0 = 62.48
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    str_0 = "?\\"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    str_0 = '[/\x0ba-"'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    dict_0 = {}
    none_type_0 = None
    module_0.sub(none_type_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    none_type_0 = None
    module_2.EnumMeta(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    bytes_0 = b"\xec\x8c^\xfc2\xc6Sg\x0f"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    int_0 = 1761
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    bytes_0 = b"\xca\xff\x89\x9a\xc0\x17\xc2"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    str_0 = "4H\rPT+"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    bytes_0 = b"X*\x01"
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2651():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    int_0 = 2616
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    float_0 = -2588.42
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    str_0 = "Pa-"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    list_0 = []
    module_0.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    int_0 = 1517
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bytes_0 = b"\r^\x08\xb5]\x9b\xbf\x05iWK\xa2yx\x8f"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    bytes_0 = b" \xb8\x9a\xa7vOw@=\x1bj;\xf7\xecD&E\x0b\x81R"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    bytes_0 = b"\xf3m\x9b\xc9\xcf\x84\xfe"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    int_0 = -2379
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    bytes_0 = b"\xcbez"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    error_0 = module_4.Error(*list_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    float_0 = -439.4767
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bytes_0 = b"\x9eSF\xab\x14\xccR"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    int_0 = -2526
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    tuple_0 = ()
    module_0.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    bool_0 = True
    float_0 = 4489.27
    module_1.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    bool_0 = False
    none_type_0 = None
    module_0.compile(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    int_0 = -707
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    dict_0 = {}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    complex_0 = 1183.06 + 1073.24j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    int_0 = 727
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    str_0 = "\r_wjTF\x0c!E u -0%EO"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    float_0 = 1770.296945
    list_0 = [float_0, float_0, float_0]
    var_0 = module_0.purge()
    var_0.__iter__(list_0)


def test_case_2690():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2691():
    int_0 = -2010
    list_0 = [int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    str_0 = "\tnS4#w-RoO!:K@L"
    none_type_0 = None
    module_0.sub(str_0, str_0, none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    str_0 = "`-\x0cu[lZ"
    str_1 = "_\x0bK"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    bytes_0 = b"\r\x85\x066\x81r\xcfI<\xcaj\x9dbs"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    none_type_0 = None
    module_0.Pattern(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    error_0 = module_0.error(set_0, bool_0, none_type_0)
    module_0.search(error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    dict_0 = {}
    module_2.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    none_type_0 = None
    bool_0 = False
    module_0.sub(none_type_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bytes_0 = b"\x89\xf0><\x91M9\x00Y/\xcd wA\x92\x01\xcf5\x16"
    str_0 = "i~4>$nyd"
    dict_0 = {bytes_0: str_0, str_0: str_0, bytes_0: bytes_0, str_0: bytes_0}
    int_0 = -1708
    var_0 = module_0.purge()
    var_0.__call__(int_0, int_0, type=int_0, start=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    set_0 = set()
    module_0.subn(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    complex_0 = 403.9 + 2113.80182j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    list_0 = []
    module_0.split(list_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    str_0 = "S}.!!&rW"
    none_type_0 = None
    module_0.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    bytes_0 = b"\xd0W\xb6\xeag\xc3!\xd7O\xf8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    complex_0 = 133.9498 + 885.87849j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    int_0 = 731
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    complex_0 = 60.828772 + 2013.2659j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    float_0 = -2124.740784
    module_0.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bytes_0 = b"\x8b\xc5\x86\x9b\x1e\x97\x9efH\x07\xb6\x1a1\x93"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    enum_dict_0 = module_2._EnumDict()
    float_0 = -518.2661
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    str_0 = "K<;"
    var_0 = module_0.match(str_0, str_0)
    module_0.finditer(var_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    float_0 = -1341.54743
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    int_0 = 1740
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    complex_0 = -271.8242 - 47j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    float_0 = -1373.377005
    none_type_0 = None
    module_0.split(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    var_0 = module_0.purge()
    module_0.Pattern(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    complex_0 = 766.968 + 4786j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    dict_0 = {}
    int_0 = -676
    module_0.sub(dict_0, int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    int_0 = -873
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    str_0 = "3/KO)I_J&az;'%udr"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    int_0 = -34
    list_0 = [int_0]
    error_0 = module_4.Error(*list_0)
    module_1.match(error_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    float_0 = 1979.0
    none_type_0 = None
    module_0.findall(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    str_0 = "!^rK4z?\tTL"
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setattr__(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    bytes_0 = b"\xe8K\x99\x9dr*\xef\x04=\n\xd5\xe6L\xe6d\xa5j"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_1.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    enum_dict_0 = module_2._EnumDict()
    var_0 = module_0.purge()
    var_0.__setitem__(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    bytes_0 = b"\xff\xb4q\xfb\t\x11\x84~\xc8\xd3\xed\xb0"
    bytes_1 = b"\xb4\x8a$a\x9f\xe5\x96\x8d\xbc\x9d/Tj\x9e\xad"
    var_0 = module_0.subn(bytes_0, bytes_1, bytes_0)
    module_1.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    int_0 = -738
    bytes_0 = b"\x1a\x87\x83\xd4f"
    tuple_0 = (int_0, bytes_0)
    bool_0 = False
    set_0 = {tuple_0, int_0, bool_0, bytes_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0]
    base_exception_0 = module_3.BaseException(*list_0)
    module_1.match(dict_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    int_0 = 1423
    tuple_0 = (int_0,)
    module_0.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    dict_0 = {}
    module_0.template(dict_0)


def test_case_2746():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()


@pytest.mark.xfail(strict=True)
def test_case_2747():
    none_type_0 = None
    int_0 = 2715
    module_1.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    float_0 = -2677.17847
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    int_0 = -2687
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    int_0 = -4179
    module_1.get_new_command(int_0, int_0)


def test_case_2751():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2752():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    bytes_0 = b"\xc2R\xbc\x14\x97a\xf6\x00W\xc9|\x10\x87\x05J\xc9G"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    error_0 = module_4.Error(*list_0)
    module_0.template(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    bytes_0 = b"\xa8rot\x93\xaa\xc8\xfa\x99\x12R\x0b\x8cb_;"
    none_type_0 = None
    module_0.search(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    str_0 = "-*x-7xLUC6yGFFkd.8DK"
    var_0 = module_0.search(str_0, str_0)
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    int_0 = -548
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    float_0 = 2740.334
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    str_0 = "pa=F?':)_9,%BBR;FY"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    str_0 = "g\nNAtsmSxs/U"
    str_1 = " 0oxVov_qlc5I4MJ.{"
    float_0 = -869.9628
    dict_0 = {str_1: str_1, str_0: str_1, str_0: str_1, str_1: float_0}
    module_3.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0, tuple_0: tuple_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    int_0 = -757
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    bytes_0 = b"\t\x10\xba\xb5\xfce%\x92m\xc2/\x1f\xfaT\xac\xb7\x89\xd8|"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, bool_0, none_type_0)


def test_case_2769():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2770():
    str_0 = "=O\x0c&m"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    int_0 = -2303
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    int_0 = -3140
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    base_exception_0 = module_3.BaseException()
    module_0.findall(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    str_0 = "\tQ+2Avbw\rgpY^>wm"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    var_0 = module_0.purge()
    module_0.Scanner(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    float_0 = -1575.96065
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    bytes_0 = b"\x06\xb4\x1a\x10pf\x06\x8eH8c\xdb\xb8h\xb2\x84\x90"
    dict_0 = {bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    str_0 = "1Wq-kjvPsnq}uU,o=%?b"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    float_0 = 1864.5
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    str_0 = "\rI4z6uy"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    str_0 = "xp*fd+C:\"g*]'NU%K.r2"
    var_0 = module_0.findall(str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    int_0 = 1910
    int_1 = -1272
    module_1.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    none_type_0 = None
    var_0 = module_0.purge()
    module_0.sub(none_type_0, none_type_0, var_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    var_0 = module_0.purge()
    float_0 = -3063.0
    module_1.get_new_command(var_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    bytes_0 = b"\xdd"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    complex_0 = -351.8811 - 1467j
    none_type_0 = None
    module_0.findall(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    int_0 = -860
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    int_0 = -3093
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    float_0 = -632.146
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    int_0 = -1512
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    bool_0 = False
    bool_1 = False
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bool_0 = False
    bytes_0 = b".[\xd0\xdf"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    bytes_0 = b"\xe1Qt'M\xdd\xbc\xd4\x13\x8a`\xeak\x94\x08\xce"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    float_0 = -1593.4023
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    none_type_0 = None
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.subn(none_type_0, none_type_0, tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    str_0 = "!Qo-&J\x0c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    str_0 = "z0U"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    bytes_0 = b"LF\x02\x96"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    complex_0 = 473.572277 + 177.8161j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    int_0 = -3607
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    int_0 = 3606
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    str_0 = "\taf`MmM~~kgh"
    module_1.match(str_0, str_0)


def test_case_2823():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    int_0 = 3795
    none_type_0 = None
    module_0.match(none_type_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    int_0 = 2011
    tuple_0 = ()
    module_1.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    error_0 = module_4.Error()
    module_0.Scanner(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    complex_0 = -566.11404 + 3535.5351j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    int_0 = 3593
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    float_0 = -2621.19
    module_0.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    var_0 = module_0.purge()
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bool_0 = False
    module_0.Scanner(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    str_0 = "E"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    dict_0 = {}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    dict_0 = {}
    auto_0 = module_2.auto(**dict_0)
    module_1.get_new_command(auto_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    complex_0 = -605.9 - 1346.48785j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    bytes_0 = b"/\xe2\xd3v3\xe3o\x00>\x10\xb9nN{w"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    bytes_0 = b"\xc4Rk\xe5\n\x8f\x7f*DA\x8a"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    bytes_0 = b"d\xd1\xd6\xa6\xfaOe2\xa1\xcb\x0eU\xbc\x1fJ[N2\xb2"
    var_0 = module_0.purge()
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bytes_0 = b"-\x19\xa9AC\x1f\xd5mo\x13\xbeE\xd51\xa0L"
    var_0 = module_0.search(bytes_0, bytes_0)
    none_type_0 = None
    tuple_0 = ()
    module_0.subn(none_type_0, none_type_0, none_type_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    str_0 = "1I{\rJgY:ie %"
    module_0.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    str_0 = ">"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    str_0 = "9cf<\x0bG8'_4$>$"
    var_0 = module_0.escape(str_0)
    list_0 = [var_0, str_0, var_0, var_0]
    module_1.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    bytes_0 = b"s\x82\xc9\xab\xcb\x115\xe2\\*\xdf\x97\xb9"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    object_0 = module_3.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    int_0 = 3386
    none_type_0 = None
    module_0.findall(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2860():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    bool_0 = True
    none_type_0 = None
    module_0.split(bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    float_0 = -5954.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    list_0 = []
    module_0.findall(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    str_0 = "K"
    bool_0 = False
    module_1.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bool_0 = False
    module_0.Scanner(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    none_type_0 = None
    list_0 = [none_type_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    int_0 = 550
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    int_0 = 2139
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    int_0 = 4148
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    int_0 = -3281
    list_0 = [int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    exception_0 = module_3.Exception()
    error_0 = module_0.error(exception_0, pos=exception_0)
    module_0.match(error_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    str_0 = ",@)"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2876():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    dict_0 = {
        error_0: error_0,
        error_0: error_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    str_0 = '"j%q$Hg'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    bytes_0 = b"\xb9}\xd6\xd7;~T\xda\xe1#mR\x05\xf8\x8b\x04\xe4\xbb\x05\xe9"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    str_0 = '"\r!*i[)C6\x0bzpn<gb$0L0'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    exception_0 = module_3.Exception()
    module_0.finditer(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    complex_0 = -1417 + 3138.61004j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_0.finditer(var_1, var_0)


def test_case_2888():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2889():
    none_type_0 = None
    int_0 = -4927
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    complex_0 = -729.654 - 4609j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    var_0 = module_0.purge()
    module_0.compile(var_0)


def test_case_2892():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2893():
    float_0 = -3232.309
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    int_0 = -1630
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    float_0 = -1285.2
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    error_0 = module_0.error(dict_0)
    module_0.match(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    int_0 = -4069
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    float_0 = -4357.6
    module_0.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    bytes_0 = b"n\xd7\xe8\x97&"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    int_0 = 2343
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    float_0 = 1279.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    bool_0 = True
    float_0 = -127.46731
    module_1.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    str_0 = "4\tUJLXP'ju3e>{[G`/Z"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    bytes_0 = b"\xda\xbd\ra\xabz\x1d;\xc1\xfc\xbd\xb4S\x96n"
    module_0.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    int_0 = 2135
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    str_0 = "<H`\x0cxpO3u7\\oHI"
    module_0.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    str_0 = "]T\n-d;4("
    str_1 = "0I<(OR n/p+R<X{7A0"
    str_2 = "Yr\x0cA[wX+q"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_2}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    float_0 = 378.665398
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    bytes_0 = b"M,\xac\xf9\xac\xbaTb\x8b2\xc9%jT\xce\xa5\xace\x16"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2923():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    float_0 = -194.82131
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.Scanner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    str_0 = "V#!*hFrBvn~IJ};,f8&#"
    var_0 = module_0.purge()
    var_0.__getitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "\\)\nI+"
    dict_0 = {str_0: str_0}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    bytes_0 = b"}\x84=Kyv\xf8-\x83\xce\x08pA"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_2931():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2932():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    base_exception_0 = module_3.BaseException(*list_0)
    module_1.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    bytes_0 = b"*\x13\xdd\x12\xec\xd5\x92\x92\x07\x88\xbc\x1f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    bytes_0 = b"\xbc\x80D\xdaS)\xe3\xd1\xb37\xf1_N"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    int_0 = -229
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    base_exception_0 = module_3.BaseException()
    bool_0 = False
    tuple_0 = (base_exception_0, bool_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_1.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    int_0 = 3100
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    float_0 = 487.598
    none_type_0 = None
    module_0.search(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    bytes_0 = b"0\xbe\xfc\xdf.\xeac`\x7f9\x99\xa7\x117bh"
    bool_0 = True
    module_1.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_2.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    str_0 = "j<Bb3_Vzd.'j\x0b'h=J\n"
    var_0 = module_0.template(str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_2952():
    str_0 = "n.\\K[cD=+,^]S;<"
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    var_0 = module_0.purge()
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    int_0 = -694
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    int_0 = -4441
    module_2.unique(int_0)


def test_case_2958():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2959():
    int_0 = 2303
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    int_0 = -1220
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    float_0 = -2266.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    int_0 = 1138
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    str_0 = "L} =TfN$ZHot'%\nqQ\":}"
    var_0 = module_0.finditer(str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    int_0 = -52
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    float_0 = -429.287
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    complex_0 = 1340 - 3562.4j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    int_0 = 856
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    bytes_0 = b"Db\x94\xc0\x05\x13\x13\xe2l\x18[\x07\xaaua\xbd\xf5["
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    var_0 = module_0.purge()
    str_0 = "F($>di, +_U+qwubfZ;w"
    module_0.finditer(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    int_0 = 227
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    float_0 = 3970.0
    none_type_0 = None
    module_0.subn(float_0, none_type_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    tuple_0 = ()
    module_2.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    bytes_0 = b"{*\x1f\t\xe6\x8d\xa8 \xf6\xed"
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    dict_0 = {}
    base_exception_0 = module_3.BaseException(**dict_0)
    module_0.escape(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    base_exception_0 = module_3.BaseException()
    module_0.finditer(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    float_0 = 619.614
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    tuple_0 = ()
    none_type_0 = None
    module_0.split(tuple_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    float_0 = 2618.24
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    str_0 = "p'SiBI4^\tv"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    complex_0 = -4008.219501 + 3038.736964j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    str_0 = "ad?`6aMP`"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    float_0 = -2168.83332
    module_0.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    int_0 = 3025
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    bytes_0 = b"\x15E\x11l\x04Cj'2"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    complex_0 = -750.492042 + 2074j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    int_0 = 555
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    float_0 = 171.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    int_0 = 3228
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    int_0 = -6155
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    bytes_0 = b'"\xa7>\x08\x17\x9aih\xff\xf6'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    str_0 = "E6E"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    int_0 = -3616
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    bytes_0 = b"\x01\x8c\xe1\r"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    int_0 = -157
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    none_type_0 = None
    int_0 = -1009
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    float_0 = 162.13
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    module_1.get_new_command(float_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    bool_0 = False
    float_0 = 997.99
    module_1.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    bool_0 = True
    bytes_0 = b'(~"\xb3&\xe7\xcf\xff\xd2\x17'
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    float_0 = 885.1315
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    str_0 = "--H`Kh/2](>3q?d63"
    none_type_0 = None
    module_0.finditer(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    complex_0 = -498.004684 - 213.674495j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    float_0 = -1330.33
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    tuple_0 = ()
    module_0.sub(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    error_0 = module_4.Error()
    module_0.subn(error_0, error_0, error_0, error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    float_0 = -3838.136573
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    float_0 = -663.3
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    set_0 = set()
    error_0 = module_0.error(set_0)
    module_0.template(error_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    bytes_0 = b"\x9a\x05\xa4\xe9\xc3L"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    list_0 = [var_1, var_0]
    dict_0 = {var_1: var_0, var_0: list_0, var_1: var_1, var_0: var_1}
    module_0.search(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    int_0 = -87
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    float_0 = -2897.0
    bool_0 = True
    tuple_0 = (list_1, float_0, list_0, bool_0)
    none_type_0 = None
    module_0.findall(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    set_0 = set()
    module_0.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    str_0 = "q<;$lr~"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    bytes_0 = b"\xedO\x8aD\xa7"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_3031():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3032():
    bytes_0 = b"\xaa\xa2_\xe8"
    set_0 = {bytes_0}
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setattr__(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bytes_0 = b"a\xd5\xd7I\xd1\x96\x02%\xc2\xce\x9b\xa7rI\x90m\x1c\xe9\x08M"
    module_2.unique(bytes_0)


def test_case_3035():
    enum_dict_0 = module_2._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_3036():
    none_type_0 = None
    module_2.unique(none_type_0)


def test_case_3037():
    bytes_0 = b'"!\xad62\xe4\xaa\x9fy\x84\x89|N\xda[\x1a\xf1b'
    none_type_0 = None
    bytes_1 = b"xWg\xa9\x1bW\x81/#a\r"
    var_0 = module_0.findall(bytes_1, bytes_1)
    with pytest.raises(TypeError):
        var_0.__new__(bytes_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    str_0 = 'O:MXL"5!ABX@#I'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    int_0 = -232
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    bool_0 = True
    list_0 = [bool_0]
    module_0.split(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    int_0 = 490
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    str_0 = "<\x0bt"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    str_0 = "<N!\\gb>*9jHF~8s"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    int_0 = 2609
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    str_0 = "~a=fM"
    tuple_0 = (str_0, str_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    none_type_0 = None
    bytes_0 = b"=\xd9\x8eC\x80\x81\x9dB\x0c\x87\xe9}\x1e\x96\xffX"
    module_0.finditer(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    float_0 = 3042.97036
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    float_0 = 3060.0
    list_0 = [float_0, float_0]
    module_0.search(list_0, float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    str_0 = "l"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    bytes_0 = b"Vc\xe5\xb5\xbe\xbe\xa5\xa2"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_1.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3061():
    bytes_0 = b"K\xe2\xdc\xd7\xf8\x14\xa3\xd1\xdc\xcd@@\xb5\x86\x9b\xaf\x04\xf5\xe6"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    module_1.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    float_0 = -1160.5
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    int_0 = 1957
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    int_0 = 525
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    float_0 = -3207.86
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    str_0 = "p%5 v2[hW"
    tuple_0 = ()
    module_0.fullmatch(str_0, str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    bool_0 = False
    dict_0 = {}
    list_0 = [bool_0, dict_0, bool_0, bool_0]
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    str_0 = "r*\"JS7%.Zh`Ff2}'"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    int_0 = -179
    set_0 = {int_0, int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    float_0 = -660.04789
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    str_0 = "8;"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    int_0 = 3104
    bool_0 = False
    module_0.search(int_0, int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    bytes_0 = b"\xaa/\x07"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    bytes_0 = b"\x97\xe8e\xf52H\n\x80"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    float_0 = -163.681
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    str_0 = "OdMlxk"
    var_0 = module_0.compile(str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    complex_0 = -771.2372 - 711.839j
    module_0.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0, var_0)


def test_case_3093():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3094():
    str_0 = "uZMWd,V:MTD$U@3h)"
    dict_0 = {str_0: str_0}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    bytes_0 = b"\xa1\xe3\xf3\x7f"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    bytes_0 = b"E\x96G\xd0j\x8e\xfa\x1e\x161\x83"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    str_0 = 'zk1"\x0b!o\\GirVxj'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    none_type_0 = None
    int_0 = 1391
    module_0.split(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    int_0 = 656
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    int_0 = -2742
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    str_0 = "tznA6\x0c@;AJ\t67X3'+>>5"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    set_0 = set()
    bytes_0 = b"iO\x85\n\xf4"
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    float_0 = -821.0
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    error_0 = module_0.error(list_0)
    module_1.get_new_command(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    list_0 = []
    module_0.findall(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    error_0 = module_0.error(var_1, var_1)
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    bool_0 = False
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    int_0 = -1105
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    float_0 = -754.10608
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bool_0 = True
    bool_1 = False
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    bytes_0 = b"\x14w\x8dlEC\xa9\x9c^~\xe7\x1e\xbf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    int_0 = 1634
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    str_0 = "}ZZE?`= ~"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    set_0 = set()
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    str_0 = "?3?."
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    float_0 = -2837.6858
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bytes_0 = b'\\"\n\\zr\\\x96\xebS\n\xd7\x02\xf6Sb'
    module_0.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    float_0 = -788.136399
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    float_0 = -3436.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    str_0 = "JeNzWuz`2"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bytes_0 = b"\xef\xc5\xb4\xc0\x9b\xe6RZ\xd5\tN\xc2\xd1\xdb~ "
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    str_0 = "s=QkiOX\n.WHTFuiDIShR"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    none_type_0 = None
    str_0 = "S/\r]LozUJ\x0czq^gz5/MW"
    var_0 = module_0.template(str_0)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    complex_0 = 3672.03 + 79.477j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    tuple_0 = ()
    str_0 = "/Z'GZWPySwntlX"
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    int_0 = -1431
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    str_0 = "G\rS@C%.\nh\x0c?_HH"
    var_0 = module_0.match(str_0, str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    bytes_0 = b"\xf1\xb5\\\xa5\xa3\xe8^\x1d\xb7H\x08"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    int_0 = -1641
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    bytes_0 = b"\xb4\xf1|\x05\xcf\x8c\x04\xec\xedw\xabUY"
    int_0 = -980
    module_1.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    int_0 = -484
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    error_0 = module_4.Error()
    base_exception_0 = module_3.BaseException()
    module_2.unique(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    enum_dict_0 = module_2._EnumDict()
    module_0.search(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    int_0 = -2086
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    bytes_0 = b"\xd8\xf1Xv'\x9b\xd0W\xf7\x18\xd7\xfa\x94\xb6\xe9\xc9\xf3\x1a\xbb\x80"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    exception_0 = module_3.Exception()
    module_2.unique(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    float_0 = 551.82755
    tuple_0 = (float_0,)
    module_0.split(tuple_0, tuple_0, flags=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    error_0 = module_4.Error()
    bytes_0 = b"pF\x1f\x18\xe5\xf4g&n\xaf\xd4\xdb}\xb9\x15\x9b"
    var_0 = module_0.compile(bytes_0)
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    str_0 = "vVXuE;vzTpF[x"
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    dict_0 = {}
    module_0.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    int_0 = 1669
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    none_type_0 = None
    str_0 = "CcbR6hT~&"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    none_type_0 = None
    dict_0 = {}
    module_1.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    bytes_0 = b"\x07\xad\x19f\xe4Q\xf5Yn5Y\x81\xf8\x8b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    bytes_0 = b"Z\x1b\xd5D\xb0\xeb\xf3:\xe1\xb2\x13q\xf1"
    dict_0 = {}
    list_0 = [bytes_0, dict_0]
    module_1.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    var_0 = module_0.purge()
    var_0.__iter__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    float_0 = 1114.24
    dict_0 = {}
    module_0.split(dict_0, float_0, flags=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    bytes_0 = b"\xff\xe6\x02"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    bytes_0 = b"\x8e\xb8\xd3{\xc4\x02,\x98\xad\x01\xa0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    bytes_0 = b"\xebq"
    var_0 = module_0.findall(bytes_0, bytes_0)
    var_0.__repr__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    bytes_0 = b"\xc5\xbe\x11\xcb\xac\x8c.a\x83\xe9\xb8%\xaf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    bytes_0 = b'k|\xba\xef5\x8a\xde\x10\x1d\xad"'
    var_0 = module_0.findall(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    module_1.match(var_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    auto_0 = module_2.auto()
    module_0.fullmatch(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    set_0 = set()
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    int_0 = -1847
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    bytes_0 = b"\xcc\xa1\x12{\xa8q\x9c\x99P"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    list_0 = []
    module_0.search(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    bool_0 = False
    module_3.Exception(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    bytes_0 = b"\x10R\xc4\x06\x86\x8b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    complex_0 = -1299 - 1562.81j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    float_0 = 239.117
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    bytes_0 = b"\xc21"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    dict_0 = {}
    module_0.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    str_0 = "x'\r7IQX\rFa#R8.`\r"
    module_0.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    int_0 = -1549
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    int_0 = -1296
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    float_0 = 2.69578
    module_0.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    base_exception_0 = module_3.BaseException()
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3209():
    int_0 = -3624
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    bytes_0 = b"\x07\xbd.-\x08\xf8\x15\xfd\xcd(e"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    int_0 = -1712
    none_type_0 = None
    module_0.split(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    var_0 = module_0.purge()
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    bytes_0 = b"\xe2\x9e\xb6\xb2\xf8\x9a\x85"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    none_type_0 = None
    module_0.Match(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3222():
    float_0 = 2338.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    float_0 = -1190.26897
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    str_0 = "]ekOE$mh`"
    float_0 = 398.88
    tuple_0 = (str_0, float_0)
    module_1.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    var_0 = module_0.purge()
    list_0 = [var_0]
    module_1.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    int_0 = 224
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    int_0 = 1009
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    auto_0 = module_2.auto()
    module_1.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    bytes_0 = b"\x90\x92\xa0\x1c\x05\xc5\x0c\xfc "
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    float_0 = -87.4
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    bytes_0 = b'?\x01"X\xa8\xa3'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    int_0 = -1316
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    int_0 = -3509
    none_type_0 = None
    module_0.split(int_0, none_type_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    int_0 = 845
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    float_0 = 1096.0
    bool_0 = False
    bool_1 = True
    module_0.subn(float_0, bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    bytes_0 = b"y\xf3\xd04"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    none_type_0 = None
    module_2.EnumMeta(*none_type_0)


def test_case_3242():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3243():
    bytes_0 = b"\xf8\xcdv\xb2{\xe1f\x8b\xeb\xbf\xf6"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_1.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    float_0 = 1218.88
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    str_0 = "F9*"
    none_type_0 = None
    module_0.sub(str_0, none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    bytes_0 = b"i\x95\xdb&sJ\x0f\xecl\x96\x82\xb1\xd9\xb6\x1c"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    float_0 = -267.4048
    set_0 = {float_0, float_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    var_0 = module_0.purge()
    base_exception_0 = module_3.BaseException()
    module_2.unique(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    str_0 = "|e@0}c$M~YhqnL\\$mP"
    str_1 = "7&V\x0cST4y!"
    module_1.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    int_0 = 816
    set_0 = {int_0}
    module_1.match(set_0, int_0)


def test_case_3252():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()


@pytest.mark.xfail(strict=True)
def test_case_3253():
    bytes_0 = b"\xfc\xa2\xeb\xbf\xa4\xa2v\xb6\x857`\xf78\xdb\xe3G>L*"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    complex_0 = -381 - 1201j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    int_0 = -2063
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    dict_0 = {}
    exception_0 = module_3.Exception(**dict_0)
    none_type_0 = None
    module_1.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    float_0 = -1230.154
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    list_0 = []
    var_0 = module_0.purge()
    var_0.scan(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    bytes_0 = b"x>h\xca}\xda\x81\xb9\xa3\xf4"
    str_0 = "\\AT$]vOKH= ?"
    bool_0 = True
    dict_0 = {bytes_0: str_0, bytes_0: bool_0, bool_0: bytes_0, bytes_0: bool_0}
    module_0.fullmatch(bytes_0, bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    auto_0 = module_2.auto()
    none_type_0 = None
    module_0.findall(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    bool_0 = True
    none_type_0 = None
    module_0.split(bool_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    str_0 = "L~Uo%Bo)z6c\r`5&/"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    bytes_0 = b"\x91\xf2\xd6\rx\x00\xf3H\xcb>\x04]Z\xde\xd1Zt\xea"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    complex_0 = -3112.8223 - 1336.00781j
    module_0.Scanner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    float_0 = 683.4734
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    int_0 = 1348
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    bytes_0 = b"\xf2O\t:!^\xb1\x1f\xde\x96h\xd3p,\x02\xd8\xeb%\xb8\xa6"
    list_0 = [bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    list_0 = []
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    bytes_0 = b"\x97\xd1Q"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_0.subn(var_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    int_0 = -1624
    dict_0 = {}
    module_0.finditer(int_0, int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bytes_0 = b"\xcf\x87\xbf\xd9\xa9\x7f\xdc\xf9\x00"
    module_0.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    complex_0 = -1564.19 - 610j
    none_type_0 = None
    module_0.finditer(complex_0, none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = 971
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    error_0 = module_4.Error()
    int_0 = -1461
    list_0 = [int_0, int_0, int_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    list_0 = []
    module_0.findall(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    bytes_0 = b"\xbdA\xe8\xb3\xba\x12#Nbs\xe1\xd2\xf4\x00\xab\x1f"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    bytes_0 = b"\xacB\xa6\x1a\x9c\xf2\xec\x15l\xe4"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_1.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    none_type_0 = None
    list_0 = []
    module_1.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    none_type_0 = None
    set_0 = {none_type_0}
    module_1.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    int_0 = 1360
    list_0 = [int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3293():
    bytes_0 = b"\x9c\x05\xafQ\xbe\x89"
    float_0 = -462.037763
    module_0.subn(bytes_0, bytes_0, bytes_0, bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    bytes_0 = b"\xee"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    str_0 = '"LqgB5j'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    var_0 = module_0.purge()
    str_0 = "mXX"
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    complex_0 = -1612 - 144.9889j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3299():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    tuple_0 = (list_0,)
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    int_0 = 2175
    bool_0 = True
    list_0 = [bool_0]
    module_1.match(int_0, list_0)


def test_case_3304():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3305():
    str_0 = "]"
    set_0 = {str_0}
    module_1.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    str_0 = "0?\t"
    none_type_0 = None
    module_0.findall(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    str_0 = "V|S\\uBdz_/'TTitb"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    enum_dict_0 = module_2._EnumDict()
    module_0.fullmatch(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    complex_0 = 1746.71 - 834.2169j
    dict_0 = {complex_0: complex_0}
    module_1.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    float_0 = 1501.2727
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    bytes_0 = b"\xd3\xc2\x03\xd4\xc6\xc4\xdf"
    var_0 = module_0.finditer(bytes_0, bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    str_0 = "5v8vSB\\6g\t_fM]zt)OyC"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    none_type_0 = None
    bytes_0 = b"np\xe0=\xbc\x1a\xe4\xd3\x80"
    var_0 = module_0.template(bytes_0)
    var_0.__contains__(none_type_0, none_type_0)


def test_case_3316():
    enum_dict_0 = module_2._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_3317():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    int_0 = 1484
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    complex_0 = -2646.945 - 74.55j
    none_type_0 = None
    module_0.fullmatch(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.subn(dict_0, bool_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    str_0 = "B|gOdb}"
    str_1 = "\n8ia6\x0c}SmvGyR^qeie"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_1: str_0}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bytes_0 = b"\xd4\xb5\xd7\x0e\x16|\x19\x8d;xJz\x18\x9e>"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    int_0 = 123
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    str_0 = "x:K2nrZ"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3327():
    int_0 = -1123
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bytes_0 = b"\x98\x93\xc5\x99"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0, bytes_0]
    module_1.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    complex_0 = 4005.7 - 378.97j
    module_0.findall(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    none_type_0 = None
    int_0 = -783
    module_1.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    int_0 = -1305
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    bool_0 = False
    int_0 = -2715
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bytes_0 = b"\x04"
    var_0 = module_0.compile(bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    bool_0 = True
    none_type_0 = None
    module_0.finditer(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    bytes_0 = b"\x0e\xb8'b "
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    str_0 = "-b|\x0c&_*_Z;s&brHW5"
    list_0 = [str_0, str_0, str_0, str_0]
    str_1 = "k"
    dict_0 = {str_0: list_0, str_1: str_0, str_0: list_0}
    module_0.Pattern(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    str_0 = "e\x0b+^+CC"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.findall(tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    dict_1 = {var_0: dict_0}
    module_1.match(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    complex_0 = -436.6 - 828.021907j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    int_0 = 1453
    set_0 = {int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    bytes_0 = b"\xc1\xfaZ\x10\x10\x10\xb7\x80\xde\xe8\xb1\xe6\x99\x1e\xf6\xb2\xc3sl$"
    int_0 = 1702
    module_1.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    float_0 = -1086.886434
    module_0.findall(float_0, float_0, float_0)


def test_case_3345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3346():
    float_0 = -381.8718
    dict_0 = {float_0: float_0}
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    str_0 = ")jP6B:=1bp"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    float_0 = 1286.126
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.split(set_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    str_0 = "`z`"
    set_0 = {str_0, str_0, str_0}
    module_0.findall(set_0, str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    bytes_0 = b'\xdf\x84"\x93\x8d\xae\xaaK\x7f\x8df\xf0x\xf3\x07\xfcw\x85J'
    error_0 = module_0.error(bytes_0, bytes_0)
    module_0.findall(bytes_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    str_0 = "juZ>* "
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    bytes_0 = b"\\\xd0\x0bW8\xdc\xcf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    str_0 = "?{Q$+)5e\t%"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    bytes_0 = b"\xa9\xd0\xdb[T\x13\xe9\xe5\x0e\x9d\x15\xc9q\x9b\x9d\x85"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    int_0 = -392
    none_type_0 = None
    module_0.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    bool_0 = False
    module_0.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    bool_0 = True
    var_0 = module_0.purge()
    tuple_0 = (bool_0, var_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    none_type_0 = None
    bool_0 = False
    module_0.findall(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    bytes_0 = b"\xe5\xbf\x0e\xb8\xd2\xd0G"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    complex_0 = -219 - 289.12j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    complex_0 = 823.13 + 455.4j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    str_0 = "F;p\\]"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    str_0 = "\rz+Kg&jlM4Z<\rO|*"
    none_type_0 = None
    module_0.finditer(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    str_0 = "fzkW#v\x0c0AA`wmI=ED%q"
    module_0.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    str_0 = "C(\x0b\x0cIe0  lh"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    str_0 = "F0_~5j1"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    bytes_0 = b"\xce\x01\xe2\x82\xebXX\x80!"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    bytes_0 = b"\xea\xa2\x84\xd4%\x1a\xfd2u\x82\x15\r\x9d\xf9KJL\x07\xa0\xb9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    bytes_0 = b"\xea\x0e/\xc4\x069\xed\xa5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    int_0 = -2878
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    bytes_0 = b"\x0f\xeb\xf0[\x83\x8c_;M\x94\x9d\xef\xda\xd4d"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    complex_0 = 2198.89867 + 1013.96499j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    auto_0 = module_2.auto()
    error_0 = module_0.error(auto_0)
    module_1.match(error_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    str_0 = "M"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    error_0 = module_4.Error()
    bool_0 = True
    module_1.get_new_command(error_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    set_0 = set()
    var_0 = module_0.purge()
    var_0.__iter__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    bytes_0 = b"w|\xb2)\xba\xb7"
    module_0.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    float_0 = -186.9
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    str_0 = "H@n5\n9WM%9xfJ<+]l V"
    none_type_0 = None
    module_0.fullmatch(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    bytes_0 = b"\xee\xf9Vn\xf9H\xder\xeeQ\xdbR"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    int_0 = 2133
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    float_0 = -774.92
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    error_0 = module_4.Error()
    module_0.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    str_0 = "\x0cEZOX(<g%"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    bytes_0 = b"$\xe6\xc1ua\xbb1\xbc\xe6o\x02L"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    str_0 = "cC+LBOo'W(?/"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    int_0 = 2838
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    float_0 = 3166.883
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bytes_0 = b"\xfc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    int_0 = 726
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    int_0 = -78
    none_type_0 = None
    module_0.sub(int_0, int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    dict_0 = {}
    bytes_0 = b"\x963Y\xe3\xf1\x809\xe4N"
    tuple_0 = (dict_0, dict_0, bytes_0, bytes_0)
    module_0.fullmatch(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = "p9Y\nl<ab9=|s&"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    float_0 = 4209.707
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    bytes_0 = b"7\xb1\x9f\x91-\x19\xda\x9f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    int_0 = 3745
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    int_0 = 2539
    str_0 = "IUDS.Pgj1"
    module_1.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    str_0 = "jm.;"
    list_0 = [str_0]
    module_0.sub(list_0, list_0, list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    int_0 = -1243
    set_0 = set()
    module_1.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    int_0 = 232
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    str_0 = ">"
    list_0 = [str_0]
    module_1.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    bytes_0 = b"\xf4\x04\xce\xca\xb02X\x1f(\xd7\x992\xc33"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    list_0 = []
    base_exception_0 = module_3.BaseException(*list_0)
    module_0.compile(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    int_0 = -580
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    float_0 = -3101.66527
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    int_0 = 1054
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    str_0 = "6'ej"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    bytes_0 = b"@p\x98C\xb0\xdc\x02\x08tjK\x17\x81J\x11\xa7\xf0\x8b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    float_0 = -3276.5
    module_0.subn(float_0, float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    float_0 = -104.987
    module_0.Match(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    dict_0 = {}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    str_0 = "ErmA6'qRaVu"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bytes_0 = b""
    var_0 = module_0.purge()
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    int_0 = 1494
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3452():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    int_0 = 1623
    tuple_0 = (int_0,)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    bytes_0 = b"3\xe70;\x95\xd7n\xa3\xa7\xf5\xc1\xff\xbcj"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    int_0 = -2385
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    int_0 = -420
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    dict_0 = {}
    module_0.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3462():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3463():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3464():
    bytes_0 = b"\xab"
    module_3.Exception(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    str_0 = " G:['\x0c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    bytes_0 = b"'\xc1"
    module_0.fullmatch(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bytes_0 = b"K\x02\xcemP)\xb1\xc5\x95\x81"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    str_0 = ")\n!"
    int_0 = 1669
    module_0.template(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    object_0 = module_3.object()
    module_0.search(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    complex_0 = 188.3377 - 1333.25j
    module_0.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    var_0 = module_0.purge()
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    int_0 = -926
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    float_0 = 97.8
    list_0 = [float_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3476():
    enum_dict_0 = module_2._EnumDict()
    module_0.sub(enum_dict_0, enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    float_0 = -159.5366
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    int_0 = 1420
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    bytes_0 = b"s"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    float_0 = 1154.1
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    complex_0 = 1100.026 + 509.805024j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    bytes_0 = b"C\xbaJ\x12\x98!{{\x06t\xbf\xf6E"
    var_0 = module_0.split(bytes_0, bytes_0)
    dict_0 = {}
    module_1.match(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    float_0 = -66.71661
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    bytes_0 = b"\xdc"
    var_0 = module_0.findall(bytes_0, bytes_0)
    var_1 = module_0.purge()
    set_0 = {var_1}
    module_0.subn(set_0, set_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    int_0 = -805
    int_1 = -679
    module_1.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    auto_0 = module_2.auto()
    list_0 = [auto_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    str_0 = "K{"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    str_0 = "QX/p"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    str_0 = '3&i? m0~"7,'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    list_0 = []
    module_0.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    set_0 = set()
    module_0.sub(set_0, set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    complex_0 = -3588.383 - 122.339j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    bytes_0 = b"\xc0<\xe3\xcf\xe6\xa1k"
    module_1.match(bytes_0, bytes_0)


def test_case_3503():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3504():
    float_0 = -1152.17
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_2.auto(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    int_0 = -1130
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    none_type_0 = None
    module_4.Error(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    none_type_0 = None
    module_0.finditer(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    bytes_0 = b"\x1e\x80\xee\xbf\x95:\x02V/K\xd1\xba\xba*}"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    int_0 = 43
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    int_0 = -4377
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    float_0 = 1891.16
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    float_0 = -665.91
    dict_0 = {float_0: float_0, float_0: float_0}
    bool_0 = True
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    list_0 = []
    str_0 = "XF$qRl_!X'd"
    str_1 = ")o: EK<Ol=3(#f"
    dict_0 = {str_0: str_0, str_1: list_0}
    module_3.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    str_0 = "p^9R"
    var_0 = module_0.search(str_0, str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3526():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_1.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    complex_0 = 411.292788 - 5318.57004j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    bytes_0 = b""
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    bool_0 = False
    list_0 = [bool_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    list_0 = []
    str_0 = "1g"
    var_0 = module_0.purge()
    var_0.__getitem__(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    bytes_0 = b"u\x17\x94$\x1a \x8a\xa3\xf4+\xed\x17\x11[l\xd8"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    bool_0 = True
    bool_1 = False
    module_0.template(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    int_0 = -5090
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    set_0 = set()
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    bool_0 = True
    list_0 = [bool_0]
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    int_0 = 2476
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    exception_0 = module_3.Exception()
    list_0 = [exception_0, exception_0]
    module_0.finditer(list_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3548():
    int_0 = -1872
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    int_0 = -390
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    int_0 = -140
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = -1501
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    int_0 = 251
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    dict_0 = {}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    int_0 = 564
    module_0.sub(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    dict_0 = {}
    object_0 = module_3.object(**dict_0)
    module_0.compile(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    int_0 = 382
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    int_0 = 160
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    dict_0 = {}
    tuple_0 = (dict_0,)
    str_0 = ""
    var_0 = module_0.finditer(str_0, str_0)
    var_0.scan(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3567():
    var_0 = module_0.purge()
    list_0 = []
    none_type_0 = None
    module_0.fullmatch(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    float_0 = -2483.247018
    none_type_0 = None
    module_0.subn(float_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    int_0 = 58
    none_type_0 = None
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    none_type_0 = None
    dict_0 = {}
    module_0.fullmatch(none_type_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    bytes_0 = b"+\xf3\xe6\x17\xd5`~eq\xf7\xe9\xe8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    int_0 = 1023
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    list_0 = []
    auto_0 = module_2.auto(*list_0)
    module_1.match(auto_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    bytes_0 = b"\x1c\x85\xf4\xb9\r\x03H"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    float_0 = -1245.6
    module_0.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    exception_0 = module_3.Exception(*list_0)
    module_1.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    int_0 = 1071
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    bytes_0 = b"\x07\xf0\xac\x89\xc4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    float_0 = 1920.838
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    str_0 = "C3uzr&u[\\`_"
    str_1 = "WTs\x0c"
    str_2 = "pbK)n6[~"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    str_0 = "5*gvXk8y7y"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    int_0 = -1069
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.get_new_command(int_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    str_0 = "qz<{u-|XxQA\x0b^Z"
    module_1.get_new_command(str_0, str_0)


def test_case_3595():
    none_type_0 = None
    bytes_0 = b"\x08\xa3U\x8b\x18g\xfd+A\xfft\xc5E\x96\x9f"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    str_0 = "\rb|2w_8\x0ba,wQfg5M"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    none_type_0 = None
    str_0 = '\\l`9C~O]\nUB++^\tV*o_"'
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    str_0 = "`"
    var_0 = module_0.split(str_0, str_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    str_0 = " %a]mkZ1"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    bool_0 = True
    dict_0 = {}
    error_0 = module_4.Error(**dict_0)
    module_0.finditer(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_1,)
    tuple_1 = (bool_0, tuple_0)
    module_1.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    int_0 = -2990
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    float_0 = 3353.97379
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    none_type_0 = None
    module_1.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    none_type_0 = None
    list_0 = [none_type_0]
    module_2.auto(*list_0)


def test_case_3611():
    bytes_0 = b"#\x9b\x8br2B6\x14G\x15"
    var_0 = module_0.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    str_0 = "m\r\x0c@d38}t^3D@bP4K"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    str_0 = "qfU=Nn"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    str_0 = "UJ~~}. v U\x0c8{G]V0#L"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    int_0 = 1456
    tuple_0 = (int_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    none_type_0 = None
    var_0 = module_0.purge()
    module_1.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    int_0 = 3602
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    bytes_0 = b"\x90\x04=5j\xb6~\xeag\xf3{C"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    bytes_0 = b"\xablF\xb4\x15"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    bytes_0 = b"\xa8:(;F!\x8f\xe9^\x14\xa3\xa1\xcc"
    bytes_1 = b"Om]ZG\x0f>\xcf\x8c\xac\t\xc0\x12\xb19"
    module_1.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    list_0 = []
    list_1 = [list_0, list_0]
    module_2.auto(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    float_0 = 2178.388
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    bytes_0 = b"\x8fC\x85\xd4\x05\xaad\xd4\x98\x96"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.sub(set_0, set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    str_0 = "0\x0b1Yy,C-mVg8b]I"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    str_0 = "#eK\t!.'\t"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.Pattern(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    bool_0 = True
    none_type_0 = None
    float_0 = -709.7
    var_0 = module_0.purge()
    var_0.__call__(bool_0, none_type_0, module=float_0, qualname=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    bytes_0 = b"mF%m_\xccRW\xb8\xe4\xb0G"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    int_0 = 1988
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3636():
    bytes_0 = b'\xd0\xd2)2\xc0\xca\xe1j\x9f\xfb\xdf"\xb2\xc3\n\x88'
    none_type_0 = None
    module_0.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    var_0 = module_0.purge()
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    int_0 = 1005
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    str_0 = "34Lkf X:RUG_|i\tY"
    module_0.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    int_0 = 1625
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    none_type_0 = None
    auto_0 = module_2.auto()
    module_1.get_new_command(none_type_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    str_0 = "2\rWS"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bytes_0 = b"R\t\xcd\x8f~\xb8)\xd3n\xe1\x0eiv\x9b7\x02\xe9\x08\x98\x01"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    str_0 = "riqNLEVo"
    bool_0 = True
    var_0 = module_0.subn(str_0, str_0, str_0, flags=bool_0)
    list_0 = []
    module_0.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    str_0 = "^+7V<:G_~z*Hq&;"
    var_0 = module_0.escape(str_0)
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    str_0 = "JxD"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    module_0.finditer(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    complex_0 = -719.832726 + 1123.4j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    float_0 = -1708.104
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    var_0 = module_0.purge()
    set_0 = {var_0}
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    str_0 = "vef0@b>NO"
    var_0 = module_0.finditer(str_0, str_0)
    tuple_0 = (str_0, var_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    set_0 = set()
    module_0.sub(set_0, set_0, set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    bytes_0 = b"\x9a\xb3\x07\xee\xd2\x0e\xb5Y\x1a\x9d\\\x82\xd8\x11\\"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    enum_dict_0 = module_2._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    int_0 = -2257
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    str_0 = "\x0b!q0uV&b%8[Jr)R?=Gn5"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    int_0 = 331
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    int_0 = 439
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.fullmatch(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    bool_0 = True
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3668():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    float_0 = -2250.9
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_0.fullmatch(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    int_0 = 3301
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    float_0 = -1600.0
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    complex_0 = 229 - 5310.56983j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_3.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    float_0 = -3237.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    str_0 = "z."
    dict_0 = {str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    str_0 = "av`xT_P>Q`5"
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    var_1.__delattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    str_0 = "ITk"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    object_0 = module_3.object()
    module_2.unique(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    float_0 = 2061.74578
    set_0 = {float_0, float_0, float_0}
    list_0 = [set_0, set_0, set_0, float_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    int_0 = 1530
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    complex_0 = 2379.56 + 1039.26531j
    set_0 = set()
    module_1.get_new_command(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    enum_dict_0 = module_2._EnumDict()
    module_0.template(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    bytes_0 = b"\x0b\xeb\x02\x1a"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    int_0 = 3276
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    str_0 = "QgBJ'32j^X+#`"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    bytes_0 = b"\xe3\x83^g\xa6\x11\xb7\xfe6\xd8-%\xe7\xd4\x98\xed\xb7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    none_type_0 = None
    float_0 = -1192.9
    module_0.sub(none_type_0, none_type_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    int_0 = 1617
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    int_0 = -1223
    none_type_0 = None
    module_0.findall(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    str_0 = "=S(}V8\x0c\\v{ !!"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    int_0 = -1117
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    str_0 = "|9k~N:^t~Qx"
    none_type_0 = None
    module_0.sub(str_0, str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    bool_0 = False
    float_0 = -2413.6895
    module_0.fullmatch(bool_0, float_0)


def test_case_3708():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3709():
    dict_0 = {}
    list_0 = [dict_0]
    module_1.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    int_0 = 690
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    tuple_0 = ()
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    int_0 = -1186
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    float_0 = 3239.74375
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    int_0 = -1084
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3717():
    float_0 = -813.8137
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    str_0 = "+"
    var_0 = module_0.escape(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    int_0 = -298
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    float_0 = 4717.30014
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    bytes_0 = b"Q\xe0@\x08j\xdf7\x85\x12\\\x10l\x96\x88"
    module_0.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    str_0 = "\x0c%iL{5\"0:9J\tTK'"
    dict_0 = {str_0: str_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    bytes_0 = b"\xd2"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    none_type_0 = None
    bytes_0 = b"\xe7+r \xeaHQ\x95Jit\x9cu\x12\x1c!P\xd2\xf5"
    module_0.match(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    str_0 = "Q\r8#\ncLvRoB:kYW}[fBh"
    module_0.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    bytes_0 = b"\n\x15\x9cg\x9b\xd1:Wq \xe0\xb1\x92O"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    int_0 = -3886
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    bytes_0 = b"\xce\xc0\x13\xba\xa1\\.r\x83\x9b\xca\x19\x18"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    int_0 = 388
    module_0.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3735():
    float_0 = -3922.172
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    float_0 = 2759.0
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    int_0 = 847
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    bytes_0 = b"\x83\xd3%!F\tJ\xe7\xb7?\xb1?\xf7\xe9\xed\xe8K?\x90l"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    object_0 = module_3.object()
    module_3.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


def test_case_3742():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3743():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    tuple_0 = ()
    module_2.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    var_0 = module_0.purge()
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    int_0 = -1020
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    int_0 = -796
    module_0.split(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    float_0 = 1074.178
    none_type_0 = None
    module_0.sub(float_0, float_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    bytes_0 = b"\xe8\x0b\xa8\x01\xc2t{\xb9\xb1(\xfd\xb8@\x8a\xd2\xf9\xb3"
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, bool_0, bool_0)


def test_case_3755():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3756():
    set_0 = set()
    module_0.findall(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    int_0 = 1376
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    none_type_0 = None
    int_0 = 1081
    module_1.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    str_0 = "98"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    str_0 = "I\\\n{6\r:<5>\t[B8u]B"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    dict_0 = {}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    enum_dict_0 = module_2._EnumDict()
    bytes_0 = b"\xae\xd7V\x0b\x85E\xcd\xbek\xa5\xb6\xed\xe8\xdek\x17\x9c\xbex"
    set_0 = {bytes_0, bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    none_type_0 = None
    int_0 = -258
    module_1.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    list_0 = []
    none_type_0 = None
    module_0.finditer(list_0, none_type_0)


def test_case_3766():
    bool_0 = True
    none_type_0 = None
    str_0 = "8s?\ro[<O#$"
    var_0 = module_0.escape(str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    set_0 = set()
    tuple_0 = ()
    int_0 = 4367
    none_type_0 = None
    module_0.sub(set_0, tuple_0, set_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    bool_0 = False
    int_0 = 1015
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    int_0 = -503
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    set_0 = set()
    bytes_0 = b"B\xd6\x85[5\x95"
    module_0.match(set_0, set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    int_0 = -3
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    int_0 = 840
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    none_type_0 = None
    module_2.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    bool_0 = True
    bool_1 = False
    module_0.findall(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    int_0 = -1578
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    list_0 = []
    module_0.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    bytes_0 = b"\xc9&\xa1O"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    int_0 = -341
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    int_0 = -1344
    none_type_0 = None
    module_0.subn(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    none_type_0 = None
    int_0 = 537
    module_0.sub(none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    str_0 = "%j"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    bytes_0 = b"\x18\xef\xe2\xae$\xac\x1dD*\n\xae\x02\x17\x17\xffC\xbe"
    bytes_1 = b"\xd5:\xa2"
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    str_0 = "*83"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    str_0 = "\ry\x0c5Z&>(Y&r["
    module_1.match(str_0, str_0)


def test_case_3791():
    list_0 = []
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, list_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    bytes_0 = b"\x02>p\x07d\x93\xe7"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    int_0 = -2222
    list_0 = [int_0, int_0]
    module_0.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    set_0 = set()
    list_0 = [set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    str_0 = "enF`M2We`tga|,"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    list_0 = [regex_flag_0, regex_flag_0, regex_flag_0, regex_flag_0]
    module_0.Pattern(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    bytes_0 = b"\xb9\x84\xc6\xce]:\xc8\x9d"
    int_0 = -2774
    module_0.compile(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    exception_0 = module_3.Exception()
    module_1.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    int_0 = -96
    module_0.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    auto_0 = module_2.auto()
    int_0 = 1927
    module_1.get_new_command(auto_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_1.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    float_0 = -1209.4
    dict_0 = {float_0: float_0}
    module_3.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    float_0 = -3373.2
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (list_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    int_0 = -1254
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    str_0 = ""
    module_0.split(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    int_0 = 1258
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    str_0 = ";~YE;R64k"
    var_0 = module_0.fullmatch(str_0, str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    int_0 = 867
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    bytes_0 = b"\x1f\x9e\xaaT\x0f\x99:"
    module_0.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    int_0 = 1040
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    int_0 = 2059
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    float_0 = -289.4
    tuple_0 = (float_0,)
    module_1.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    str_0 = "iE[rGkv;btV=/i$qq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    str_0 = "nI.;Dp3'5f1i:!V"
    bool_0 = False
    module_1.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    str_0 = "G w0S4]g9~ET"
    int_0 = -124
    dict_0 = {int_0: str_0, int_0: str_0, str_0: str_0}
    tuple_0 = (str_0, int_0, dict_0, int_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    str_0 = "BA\r"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    int_0 = 251
    none_type_0 = None
    module_0.fullmatch(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    var_0 = module_0.purge()
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    bytes_0 = b"l\x1a{9\xe5nJ{\xae\xbcS\xffS "
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    str_0 = "\nx\x0b9k'J\n\rn^41WFYZ"
    none_type_0 = None
    module_0.split(str_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    str_0 = "$6c~-\x0c"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    object_0 = module_3.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    float_0 = 940.86
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    tuple_0 = ()
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    complex_0 = 318.8196 - 214.525503j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    str_0 = "Z]O+-P6HG;O"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    str_0 = "m\tDr^t`(U_\x0c"
    var_0 = module_0.escape(str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


def test_case_3846():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3847():
    dict_0 = {}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    str_0 = '"\\w\x0c5l%+y}<rO.g'
    set_0 = {str_0}
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    base_exception_0 = module_3.BaseException()
    bool_0 = False
    module_1.match(base_exception_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    bytes_0 = b"\x04\xbd\x15\xdc\x98\xcb\x04\xd9\x92\xee\x8a\xc6\xf2q"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    str_0 = "O\roMV X+\n)?I(Kz"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    bool_0 = True
    str_0 = "7YY,g"
    str_1 = "C\x0bIwN/@PF/P]ndH,hE"
    dict_0 = {str_0: bool_0, str_0: str_0, str_1: bool_0, str_1: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    float_0 = -276.982
    none_type_0 = None
    module_0.findall(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    int_0 = 924
    none_type_0 = None
    module_0.subn(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    str_0 = 'i\x0bGY9&@F&~uUIiw-"t'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    str_0 = "WPe2F\x0b]dYT2>:e{q("
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    int_0 = 689
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    dict_0 = {}
    module_0.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    float_0 = -1232.92
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    str_0 = "#J}Bm\\+pX}sAEp(P2#"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3863():
    str_0 = "MOJ"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    int_0 = -2619
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    bytes_0 = b'\x9d\xd9M4\xb1\x15\t6+\xf5n\xaf"g\x898'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    str_0 = "H(QZrsspx\\u%Zc\n "
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    complex_0 = -811.821196 + 817.2463j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    complex_0 = 2646.698 + 1114.5454j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    none_type_0 = None
    set_0 = set()
    int_0 = -3376
    module_0.sub(none_type_0, set_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    float_0 = 578.1
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    float_0 = 3455.3826
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    bytes_0 = b"e\x8a\xf4\x17\x13\x9c"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    int_0 = 1511
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    int_0 = 4609
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    bytes_0 = b"\xfd\x11\xb1\x91\xfb\xd2"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    str_0 = '+jJqCO1Y<"Rx+8qB\\'
    module_0.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    list_0 = []
    module_0.subn(list_0, list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    float_0 = -129.995043
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    int_0 = 1761
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    str_0 = "iEMX=,"
    str_1 = "y"
    str_2 = "<cvvo%1++lT~RT/\rb"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_2: str_2}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    enum_dict_0 = module_2._EnumDict()
    module_0.template(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.sub(set_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    bytes_0 = b'(U\x90>6\x83\x10\x17"\x93\xcd&\x1f\xech\xea`\x8e'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    int_0 = -898
    error_0 = module_0.error(int_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    bytes_0 = b"\xd2\x8c"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: bytes_0, bytes_0: tuple_0}
    module_0.findall(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    bool_0 = False
    none_type_0 = None
    module_0.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    bytes_0 = b"\xe5\xf8\xb0\x02\xe1\xaf\xda\x8d50\x17\xdf}\xc7mq\x8f"
    var_0 = module_0.split(bytes_0, bytes_0)
    list_0 = [var_0, bytes_0]
    module_0.findall(list_0, var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bytes_0 = b"\xa2A\xcf\x94\xa2nr\xef\xf6\x9f3\xd5\x8b\x93\x03\xbd\xdb\x1e"
    set_0 = {bytes_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3901():
    complex_0 = -1493.32 + 1555.421j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    bool_0 = True
    none_type_0 = None
    module_0.findall(bool_0, none_type_0, bool_0)


def test_case_3903():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3904():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0, var_0}
    module_1.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    bool_0 = False
    none_type_0 = None
    module_0.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    int_0 = -1836
    module_0.sub(int_0, int_0, int_0, int_0)


def test_case_3907():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3908():
    bool_0 = True
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    bytes_0 = b"\xc7\xc6\xcb\xdf\xac\xb8\xc3=F"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    tuple_0 = ()
    module_0.fullmatch(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    int_0 = 246
    var_0 = module_0.purge()
    var_0.__len__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    bytes_0 = b"\xa7\xf6-\x03h]\xf5"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    dict_0 = {var_0: var_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    bytes_0 = b"6\r\xde\x1evg\xf9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    int_0 = -4935
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    none_type_0 = None
    bool_0 = True
    module_0.split(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    exception_0 = module_3.Exception()
    module_2.unique(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    exception_0 = module_3.Exception()
    list_0 = []
    var_0 = module_0.purge()
    var_0.__delattr__(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    complex_0 = -1490.088 + 655.207j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    complex_0 = 4440.6041 - 1764.603j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    bytes_0 = b"\x17\x0c"
    var_0 = module_0.match(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    var_2 = module_0.purge()
    module_0.escape(var_2)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    int_0 = 2328
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    float_0 = 601.8
    module_1.match(float_0, float_0)


def test_case_3927():
    bytes_0 = b"\xb7\xdb\xbfC\xd0+?6"
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    none_type_0 = None
    str_0 = "F5qI~JJ5]MG\x0bD"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    bytes_0 = b"m\xd5\xd5:\xe1\xba9\xf0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    int_0 = -2466
    list_0 = [int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    dict_0 = {}
    error_0 = module_0.error(dict_0, dict_0)
    none_type_0 = None
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    str_0 = ""
    bool_0 = True
    set_0 = {str_0, bool_0}
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    bytes_0 = b"\xf3\xec\x8cg\x12\xacq-\x8c\xd9\\\xfd\xdc%\x80"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    module_0.compile(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    int_0 = 662
    module_0.sub(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    str_0 = "~e\x0bx$iw"
    list_0 = [str_0, str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    str_0 = '33T"f&H<O3*d[xy<N'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    bytes_0 = b"\xad\xf3\x15n"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    bytes_0 = b"\x1d\xe7l~H\xe1\xa0\xd6s\xb8\xc6=p\xae\xc5c"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    bytes_0 = b"\x1b"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3946():
    float_0 = -251.742
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    bytes_0 = b"\x0f\xd48J\xc7\xfc\x81~\xc0E\x8do\x86r"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    complex_0 = -5489.24277 - 4969j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0, var_0, var_0)
    module_0.findall(tuple_0, var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    int_0 = -2882
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    bytes_0 = b"\xf8"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    int_0 = -662
    float_0 = -137.65
    list_0 = [int_0, int_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    bytes_0 = b"\xe6C\xf6\x0e\xce"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    int_0 = 765
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    float_0 = 856.21503
    none_type_0 = None
    module_0.sub(float_0, float_0, float_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    none_type_0 = None
    bytes_0 = b"\xb8\x9a\xc0\xad\xe6\xaa\xdc\xe2\x1a\xeb"
    module_0.sub(none_type_0, none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    bool_0 = False
    bool_1 = False
    module_0.finditer(bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    str_0 = "QE] 'c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    str_0 = 'b1LHa^t-iic;".Cr.L'
    none_type_0 = None
    str_1 = "gTF7e&d#P>?x:~<W?]\\4"
    module_0.sub(none_type_0, none_type_0, str_1, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    int_0 = -1234
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    float_0 = 1505.9542
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    bytes_0 = b"\xbd\x83\x10+fH\xe3\xb2z\x8c\xb5Ut\xf8\x95"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    complex_0 = -143.23 + 3909.2j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    int_0 = 253
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    int_0 = -1789
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    bool_0 = True
    var_0 = module_0.purge()
    module_1.get_new_command(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    str_0 = " JnbX"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    str_0 = "Dk|w<f^@XM{J"
    var_0 = module_0.compile(str_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bytes_0 = b"\xab,d\x8e~S\xb8\x90\xf4\x8c\xe5G\xaf"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    bool_0 = False
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    base_exception_0 = module_3.BaseException()
    module_0.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    none_type_0 = None
    float_0 = -543.0312
    module_1.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    str_0 = "@\x0b0u-S'SB+-CC"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    str_0 = "[Vq!u4c<.vE+Qay'I"
    module_0.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_0.finditer(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.subn(tuple_0, bool_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    float_0 = -108.64
    set_0 = {float_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    str_0 = "0P"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    int_0 = -1144
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    str_0 = ""
    var_0 = module_0.template(str_0)
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    int_0 = 2765
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    bytes_0 = b"\xe2\x00\xc9\xd9\x95\x93\xfaX\xbep\xfa\xcb\x17\x85\x86p[A"
    bool_0 = True
    module_0.findall(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    str_0 = 'Xoqw>%jC}[I-Yi@0/_T"'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    bytes_0 = b"x\xbc"
    tuple_0 = (bytes_0,)
    module_0.compile(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    float_0 = -880.7
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    bytes_0 = b'dk5B\x08\xee"\x16\xe5K\x8d\xdeZ\x1d\xeb\x0f\x13'
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    complex_0 = 250.4587 - 1071.4j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    float_0 = 533.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    float_0 = -650.1587
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    float_0 = 1262.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    str_0 = "+#9K3"
    int_0 = 2832
    module_1.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    complex_0 = -422.41004 + 1585j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    int_0 = 266
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    float_0 = -3938.392081
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    str_0 = "%g.42\t-d\n\tQOm'^+Ri"
    set_0 = {str_0, str_0}
    module_2.EnumMeta(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    int_0 = 1507
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    bytes_0 = b"a\xe8\xa8("
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    float_0 = 39.8017
    none_type_0 = None
    module_0.match(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bytes_0 = b"S"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    str_0 = "&jVy\r[_6+="
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    str_0 = "B]C"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    int_0 = -3845
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    dict_0 = {var_1: var_1, var_0: var_1, var_1: var_0}
    module_0.fullmatch(dict_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    int_0 = -308
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    bytes_0 = b"|\xfa\xc2\x8e\xd0\xb3\xe9\xa4\xe1\x98\\\xa1"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


def test_case_4028():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4029():
    int_0 = 32
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    var_1.__call__(var_1, var_1, qualname=var_1, start=var_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    int_0 = 2783
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    base_exception_0 = module_3.BaseException()
    module_2.unique(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    str_0 = ""
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    var_0 = module_0.purge()
    bytes_0 = b"A\x01\x93\xdf\xa4=\x05\xec\xaf\x02K\x18/\xb7;]\xcd"
    var_1 = module_0.template(bytes_0)
    var_1.__getitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    int_0 = 2636
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    complex_0 = 3097.37 + 842j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    int_0 = -882
    none_type_0 = None
    complex_0 = 1641.2381 + 1294.8502j
    module_0.sub(int_0, none_type_0, none_type_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    bool_0 = False
    set_0 = {bool_0}
    module_0.finditer(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    int_0 = -1486
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    float_0 = -3450.42
    var_0 = module_0.purge()
    var_0.__reversed__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    regex_flag_0 = module_0.RegexFlag.ASCII
    bool_0 = True
    module_0.search(regex_flag_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    str_0 = "a 1B]Ow(A0x>G/s@"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    str_0 = "zxBH^'u}H*&"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    bytes_0 = b"#\x05P\xb3\xde\x7f\x01"
    none_type_0 = None
    module_0.finditer(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    str_0 = "zPxe_-)*7XD "
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    int_0 = 132
    list_0 = [int_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    float_0 = 1377.91
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    int_0 = 1710
    bytes_0 = b"\xe0:x\xa2U?r\x12it$"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: bytes_0}
    module_0.sub(dict_0, int_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_0.match(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    str_0 = "npn!lhzw\t9R F0B&A7:"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    str_0 = "w`W%Yw%6F33x9G{Xm"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    complex_0 = 518.35 + 1032.537103j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    str_0 = "3?>&8q),6tY~P"
    module_0.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    str_0 = "iU(C:\\ZC)7-\n\t Xw1"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    var_0 = module_0.purge()
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    str_0 = "U"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    int_0 = 321
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    complex_0 = -3548.48 + 525.306812j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.subn(none_type_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    complex_0 = -5316.3884 + 2449.9j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    var_0 = module_0.purge()
    module_3.BaseException(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    str_0 = "Qw%)TXSmp"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    bytes_0 = b"V@\xd9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bytes_0 = b"{\x0bbl=\xe8]M\x0e\xd2\x82\xed\xea\xc3\xfc^\x13\x89"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4077():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    str_0 = "(};q`G4?D]j"
    var_0 = module_0.purge()
    var_0.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4082():
    list_0 = []
    base_exception_0 = module_3.BaseException(*list_0)
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    error_0 = module_4.Error()
    set_0 = set()
    module_1.get_new_command(error_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    str_0 = 'v+"*}[;k0\nE$2hnd[<6"'
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    int_0 = 570
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    var_0 = module_0.purge()
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_1.get_new_command(var_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    bytes_0 = b"\xa2\xc3@\xab\x8f"
    none_type_0 = None
    module_0.template(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    int_0 = 584
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    none_type_0 = None
    bool_0 = True
    module_1.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    int_0 = 3287
    module_0.sub(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    bytes_0 = b"'"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    none_type_0 = None
    bytes_0 = b"$\xff\x0c*\xd1\xe1\x96\x83\xd2\x0fo\xe5!*\x0f\xff\x8f"
    var_0 = module_0.escape(bytes_0)
    var_0.__call__(none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    none_type_0 = None
    bytes_0 = b"PK\x95\x85gp\t\x9b\xcc4\x14J\x02\xab>+\xc7\xef\xee\xd8"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bool_0 = True
    bool_1 = True
    module_1.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    bytes_0 = b"\\it\x9cD\t \x0f%W\\s\xe7\xa5#j"
    tuple_0 = (bytes_0,)
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    none_type_0 = None
    object_0 = module_3.object()
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    int_0 = 685
    set_0 = {int_0, int_0, int_0}
    module_0.finditer(int_0, int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    int_0 = -333
    list_0 = [int_0, int_0, int_0]
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    float_0 = 2563.9736
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    int_0 = 3463
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    none_type_0 = None
    bool_0 = True
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    int_0 = 1408
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    int_0 = -737
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    str_0 = "T2\tuyV3v\n3\r}767WPhw"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    int_0 = 2002
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4117():
    str_0 = "\tEOn\\[sL/(D"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    str_0 = 'G[")^eZXt#'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    bool_0 = False
    module_0.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    bool_0 = False
    bytes_0 = b""
    tuple_0 = (bool_0, bool_0, bytes_0, bool_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bytes_0 = b"\x0c\xd0\xde\xcf\x87V\x84~\x94\x8f\xa7."
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    bytes_0 = b"\x85MO\x86\x9a\x84;\x1f\xf5\xfc\xe7\xbc"
    var_0 = module_0.purge()
    var_0.__setitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    exception_0 = module_3.Exception()
    var_0 = module_0.purge()
    list_0 = [var_0, var_0, var_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    str_0 = "%6Xi_V?"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    bool_0 = True
    module_2.EnumMeta(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    float_0 = -2033.181
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    str_0 = "r3G`gf1o"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    float_0 = -2752.71
    list_0 = [float_0, float_0, float_0]
    module_2.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.sub(dict_0, dict_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    str_0 = 'Y*s5+%Kq~p",-2Fra('
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.subn(bool_0, tuple_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    str_0 = "8lF{bTnEqPaN"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    complex_0 = 674.6889 + 4384.294j
    error_0 = module_0.error(complex_0)
    complex_1 = -828.63785 + 990.3j
    module_0.search(complex_1, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_1.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    int_0 = 1716
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    bytes_0 = b""
    module_0.subn(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    str_0 = "B7Mc+!]@HJf0qe]"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bytes_0 = b"\xf4\xf2\x1c\r\\\xf9\x8bR\x9b"
    none_type_0 = None
    module_0.sub(bytes_0, bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bytes_0 = b"\xe5\x9fsU4H\x8c\xf25O1H\xc0\xc5O$:\t"
    none_type_0 = None
    module_0.findall(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    int_0 = -1136
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_1.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    float_0 = 881.447488
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    str_0 = "d`+^\r!'p"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    int_0 = 605
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    bytes_0 = b"\xe7-\xe4\xb5=G\x82"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    str_0 = 'c:ZnS=ziT+Nk8\\_im"/'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    str_0 = "-j2nop,@8Fz"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    str_0 = "RJt*]\x0baB]i"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    bytes_0 = b"H\xc9\x06lL"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    bytes_0 = b"q5\xeeL\xa5"
    var_0 = module_0.compile(bytes_0)
    none_type_0 = None
    module_1.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    int_0 = 780
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bool_0 = False
    module_3.BaseException(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    complex_0 = -3183.9 - 2126.38j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4171():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    int_0 = -66
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    bytes_0 = b""
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.sub(tuple_0, bool_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    int_0 = -843
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    bytes_0 = b"7F\xbb\xdfM\x99\xfa\x14\x0c\xbd\xb7/"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    float_0 = -201.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    int_0 = -882
    error_0 = module_0.error(int_0)
    none_type_0 = None
    module_0.search(error_0, none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bytes_0 = b"A\x10\x18;\x0f\x1cU~Z"
    bytes_1 = b"R\x9d=\x10M\xd6\x81u\xb1\xba\xcd\x98"
    module_1.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    none_type_0 = None
    float_0 = -2406.6
    int_0 = -1059
    module_0.finditer(none_type_0, float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    complex_0 = 826.635883 + 3989.4074j
    module_0.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    int_0 = 1818
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    bytes_0 = b"\x92\x81\xca\xf9\xea\xe6S\xe2Hdi"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    int_0 = 285
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    int_0 = -464
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    bytes_0 = b""
    set_0 = {bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    bytes_0 = b"P\xbb5\x0e\x0c\xc5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    int_0 = -3412
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    none_type_0 = None
    dict_0 = {}
    module_1.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    list_0 = []
    module_0.search(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    bytes_0 = b"\x91\x1fHA;(\x08\x1d"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    complex_0 = 3811 + 561.1045j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    float_0 = -2869.21
    module_0.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    var_0 = module_0.purge()
    list_0 = [var_0]
    base_exception_0 = module_3.BaseException(*list_0)
    module_0.Scanner(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    none_type_0 = None
    float_0 = -2174.082129
    module_0.subn(none_type_0, none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    str_0 = "3\nda$!Nq`\rA0:"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    bytes_0 = b"+U\x86\x82\x1e\x81\x92s\xae7\x13\xe4\xe4a\x97\x1b\xb2\x96"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    error_0 = module_4.Error()
    none_type_0 = None
    module_0.match(none_type_0, error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    bool_0 = True
    error_0 = module_0.error(bool_0)
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    float_0 = -4709.8653
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    float_0 = 1253.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bool_0 = True
    module_2.auto(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    int_0 = 3730
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    set_0 = {regex_flag_0, regex_flag_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


def test_case_4216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4217():
    list_0 = []
    none_type_0 = None
    module_0.fullmatch(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    tuple_0 = ()
    module_0.template(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    none_type_0 = None
    var_0 = module_0.purge()
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    str_0 = "YaY*/T|z \\g;"
    module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    str_0 = "BRWgVd}"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    str_0 = 'GJ"\r:flRf#]Dw'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    bytes_0 = b"\xf8\x12)&\x9e\x95\x18"
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    str_0 = "_p68m"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    bytes_0 = b'F\x80D"_\x82'
    tuple_0 = (bytes_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    int_0 = 3324
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    float_0 = -693.657404
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    int_0 = -1566
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    int_0 = -510
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    bytes_0 = b"\x0f\xc9\x02"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_1.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    bytes_0 = b"\r\xc3},r\n\x88"
    var_0 = module_0.purge()
    module_0.search(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    bytes_0 = b"'\xdb\xd7\x10\x85\x0f\x9d"
    int_0 = -1261
    module_1.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    int_0 = -273
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    str_0 = '?*s>|="k3T\r5v03'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    str_0 = "kxMDq_PWC"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    int_0 = -644
    complex_0 = -4043.0572 - 193.3413j
    set_0 = {int_0, int_0, int_0, complex_0}
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    bytes_0 = b"\xea"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    int_0 = -1838
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    bytes_0 = b"\xaf\xa99\x0c\x8a\x01+\xd2\xc0G4j\xad"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    int_0 = 3033
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    bool_0 = True
    dict_0 = {}
    module_1.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    str_0 = "s{?)jN"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    complex_0 = -1978 + 2168.8978j
    module_0.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    bytes_0 = b"(\xb1]\x8b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    none_type_0 = None
    module_2.auto(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    bytes_0 = b"Uf\xa2\xf8\xa5\x16\xcd"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = "&Q$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    none_type_0 = None
    str_0 = "'f"
    module_0.fullmatch(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    complex_0 = -2039.44 - 3307j
    none_type_0 = None
    module_0.sub(complex_0, none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = ""
    dict_0 = {str_0: list_0}
    module_2.EnumMeta(*list_0, **dict_0)


def test_case_4264():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4265():
    int_0 = -455
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    bytes_0 = b")\xaa\xef\xc7\x8f\xaa"
    module_0.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    str_0 = "5$iab"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    float_0 = -1544.5
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    bool_0 = False
    bool_1 = False
    module_0.subn(bool_0, bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    float_0 = -2121.57276
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    error_0 = module_4.Error(*list_0)
    bytes_0 = b"`\x03|i\xaf\x86\xb6\x8b"
    module_1.get_new_command(error_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    int_0 = 290
    list_0 = []
    module_1.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    bytes_0 = b"\x9a\xe8<\x9fc\x1c\xd8F^\xff\x08\x1b\x9f"
    none_type_0 = None
    module_0.sub(bytes_0, bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    str_0 = "ubk"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    str_0 = "\ra._tK}=CF+}7a@]"
    module_0.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    int_0 = -2426
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    bytes_0 = b"\xc7\x10\x04\xf1p)x\xf9IF\xc6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    float_0 = 4335.69
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    str_0 = "u\ny$LQRc]^ict#Ne"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    int_0 = 1279
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    bytes_0 = b"\x83\x81\x0c{\xb0\xaaNf\xa4\xee\xae\xaf\xf0\xf8\x0c\x1a\xfet"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    int_0 = -5198
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    enum_dict_0 = module_2._EnumDict()
    float_0 = 1180.98165
    module_0.subn(float_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0, var_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_2.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    bytes_0 = b"\xe8\xf9"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    none_type_0 = None
    bool_0 = False
    module_0.compile(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    bytes_0 = b"\xb4\xe5\x7f!i\xcf\xb7U\xff"
    module_0.Scanner(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    float_0 = 1635.33
    module_0.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_1.get_new_command(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    auto_0 = module_2.auto()
    float_0 = 1357.78289
    module_2.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    int_0 = 400
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    int_0 = 1571
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    int_0 = 37
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    bytes_0 = b"\xb7\x8a6\x90\x7f\xfda2\x1b\xf7cR6\n\xa8D5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    float_0 = 587.81
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    none_type_0 = None
    int_0 = -2588
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    str_0 = "MW"
    var_0 = module_0.match(str_0, str_0)
    module_0.subn(var_0, str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    str_0 = "j\x0b"
    var_0 = module_0.escape(str_0)
    tuple_0 = (str_0, var_0, var_0, var_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    error_0 = module_4.Error()
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    int_0 = -1870
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    str_0 = "~ JCG?ubod\\ "
    var_0 = module_0.findall(str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    int_0 = 1467
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4313():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    none_type_0 = None
    str_0 = "DC"
    str_1 = "caI~=I'3Wn\nbg{X$"
    module_0.sub(str_1, none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    bytes_0 = b"\xc3\xb8\x8e\x16\x18\xa5D\x85\xda+\xdb\xb8#7\xf9\xa3V\x010\x00"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    str_0 = "D7"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    int_0 = -3176
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_1.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    bytes_0 = b"7t\xfa\xa44\x16{\xb4\xfe#3\x00\xa5\x1e#O`\xcb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bool_0 = True
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    int_0 = 400
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    int_0 = -1096
    module_0.split(int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    bytes_0 = b"\xe7\xc9\\\xfd\x97r\x16"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    bytes_0 = b"\xce(\xa1b\xd1\xfaW_|\xd3\xed"
    module_0.compile(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    auto_0 = module_2.auto()
    module_2.unique(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4331():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    float_0 = -545.35112
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    enum_dict_0 = module_2._EnumDict()
    module_0.subn(enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    int_0 = -1021
    none_type_0 = None
    module_0.search(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    int_0 = -1410
    set_0 = {int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    int_0 = 4153
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    float_0 = 718.0326
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    int_0 = 1599
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    bool_0 = True
    set_0 = {bool_0}
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_0.search(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, list_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    str_0 = "b"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    str_0 = "qu]+\rtiB\x0b#4Y=0E=H\x0c!"
    set_0 = set()
    module_1.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    int_0 = 2058
    module_0.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bytes_0 = b"\x07m\xbaTR\xe9"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    bytes_0 = b"\xb3\xf9S[\xc9\xb8#:\xeb"
    bool_0 = True
    module_0.fullmatch(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    float_0 = 129.06685
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4358():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    bool_0 = True
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    float_0 = -924.84
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    bytes_0 = b"\xe3#\xedy-\xbf\xb3\x7fm\x01x\xa2*\xba\xa5\x13MS"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    str_0 = "Dlot%%,R4+&cy/E\x0cI:5"
    var_0 = module_0.compile(str_0)
    module_1.match(var_0, str_0)


def test_case_4363():
    auto_0 = module_2.auto()


@pytest.mark.xfail(strict=True)
def test_case_4364():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    bytes_0 = b"\xe9\x1d\x00'Ns\xd6\x0cfG\xf4\x9d\xdbwqU\xc6\x9aX"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    object_0 = module_3.object()
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bytes_0 = b"\x9ck\xf4;\t\xab\xe9\x98\x1d`9zB\x90"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    float_0 = 3143.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    float_0 = 2393.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    str_0 = "!g;q"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    float_0 = -2453.3493
    str_0 = "ZU`#"
    module_1.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    int_0 = -1124
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    list_0 = []
    list_1 = []
    list_2 = [list_0, list_1, list_0]
    module_1.get_new_command(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    int_0 = 2940
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    str_0 = "@?&"
    none_type_0 = None
    module_0.subn(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    int_0 = 2028
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    int_0 = -3329
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    float_0 = 3179.526014
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    str_0 = "8*g|g$hv&|?}H1K"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    int_0 = 1831
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    module_2.EnumMeta()


def test_case_4389():
    none_type_0 = None
    str_0 = "XR/v#"
    var_0 = module_0.compile(str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    dict_0 = {}
    base_exception_0 = module_3.BaseException(**dict_0)
    module_1.match(base_exception_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    var_0 = module_0.purge()
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    bytes_0 = b"\x84\xb8\xe2_/\xa7\r\x8c"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    str_0 = "q cEFpA0s+"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    str_0 = "mx1"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    str_0 = "Rgq!Q|Z%Ic\n "
    var_0 = module_0.fullmatch(str_0, str_0)
    bool_0 = True
    module_0.sub(var_0, str_0, str_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    str_0 = "SI1!~Qww{"
    var_0 = module_0.findall(str_0, str_0)
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    bool_0 = False
    bool_1 = False
    module_0.fullmatch(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    int_0 = -1856
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    bool_0 = False
    module_0.Pattern(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    bytes_0 = b"SuI\x95^\xdb%\xe4\x9d\xe9a\xedp\xfc\x0f\x18\x99\xe6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    str_0 = "[F-a&Y-9ElQ]m 63mVj"
    module_0.split(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    str_0 = "(X9WtxnwzY"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    str_0 = "m~_GPV)?''E`"
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    dict_0 = {}
    base_exception_0 = module_3.BaseException(**dict_0)
    none_type_0 = None
    module_1.get_new_command(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    list_0 = []
    none_type_0 = None
    module_0.findall(list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__call__(none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    exception_0 = module_3.Exception()
    module_1.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    int_0 = -1794
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    int_0 = -5465
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    bytes_0 = b""
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    bytes_0 = b""
    none_type_0 = None
    module_0.sub(none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    str_0 = "F0sl7FJ\x0c>dbI4"
    module_0.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    str_0 = "]bC"
    list_0 = [str_0, str_0]
    list_1 = [list_0, list_0]
    module_1.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    int_0 = 1976
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4422():
    int_0 = -2744
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    var_0 = module_0.purge()
    module_0.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    list_0 = []
    module_0.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    none_type_0 = None
    str_0 = "Q"
    var_0 = module_0.escape(str_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    list_0 = []
    module_0.split(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    str_0 = "!B\x0bRY\x0bj*Jw"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0, none_type_0)
    module_1.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    int_0 = 3105
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    str_0 = "ii9a?x"
    var_0 = module_0.finditer(str_0, str_0)
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    float_0 = -1127.68952
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    int_0 = -3089
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    float_0 = 2613.5873
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    int_0 = 1282
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    int_0 = -3522
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    int_0 = -591
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    str_0 = "1Ay?4S_"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    bytes_0 = b"\x18"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    str_0 = "'#)(m_b1Hp+\rmq@f#u/f"
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    float_0 = 2225.284025
    module_0.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = -763
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    bool_0 = False
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    str_0 = "\\$ "
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4452():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    str_0 = "6Z\r"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    int_0 = 419
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    str_0 = "8\r<"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    none_type_0 = None
    bytes_0 = b"U\xcd\x1e\xb3\xd5\xf9"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    none_type_0 = None
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_1, bool_0, none_type_0}
    module_0.fullmatch(none_type_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    int_0 = 1063
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    int_0 = 2778
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.finditer(list_0, int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bytes_0 = b"$\xe2?\x1f\xa0Q1\x19Ew\xf2\xae\x1d"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    float_0 = -2537.789
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    bytes_0 = b"\x1b\x07op\x04\x85"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    bytes_0 = b"\\\xe0\xfbY"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    int_0 = 404
    int_1 = 4511
    module_1.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    int_0 = 418
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    var_0 = module_0.purge()
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    str_0 = "qC@67):"
    module_0.fullmatch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    str_0 = "BY@z"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    float_0 = -288.5094
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    bytes_0 = b"\xa1\xf3\xfd\x9ch\xb2W\xbaT@\xf6\xae~\x1c\x04\xca\xb3Z\x81z"
    none_type_0 = None
    module_0.split(bytes_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    set_0 = set()
    module_2.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    str_0 = "Rz5k@rTM:X*TQ>P3"
    dict_0 = {str_0: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    str_0 = " Pr65h#-&x$DM*#0`.^5"
    none_type_0 = None
    module_0.split(str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    bytes_0 = b":!\xa9\x1d\xf3<xk5\xfc\xcb3OB"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bytes_0 = b"\xc3dQI\xde"
    set_0 = {bytes_0, bytes_0}
    module_1.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    int_0 = -2811
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    int_0 = -1668
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    int_0 = 3513
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    int_0 = -608
    module_0.sub(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    int_0 = -4014
    list_0 = [int_0, int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    str_0 = "97Wh>R(\x0c--(_aov@/;"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bytes_0 = b"\x9b\x80\xe4[\xcc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    int_0 = -764
    list_0 = [int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    bytes_0 = b"R\xe4\xb1t\x9b\xd8\xef\xa5~\xbf"
    none_type_0 = None
    module_0.sub(bytes_0, bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    str_0 = ":\n"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bool_0 = False
    set_0 = {bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


def test_case_4506():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4507():
    dict_0 = {}
    base_exception_0 = module_3.BaseException(**dict_0)
    none_type_0 = None
    module_0.sub(base_exception_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    str_0 = "Ar$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bool_0 = True
    bool_1 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, bool_1, bool_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    str_0 = "\\y?zV),\\T8v"
    var_0 = module_0.purge()
    var_0.__setitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    str_0 = "uD#2\r{I"
    none_type_0 = None
    module_0.finditer(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    float_0 = -1499.94
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    float_0 = -3461.6
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    str_0 = "O\x0cT :C:y\t/lN!.?aR5s"
    str_1 = "nYc}:H\x0b;=nH"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4521():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    str_0 = '"9h<1YrLw'
    var_0 = module_0.findall(str_0, str_0)
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    str_0 = "3elb6w`[?(#fCur"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4526():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_3.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    bytes_0 = b"\xfb2\xa9HD"
    none_type_0 = None
    module_0.subn(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    base_exception_0 = module_3.BaseException()
    module_0.search(base_exception_0, base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    bool_0 = False
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    int_0 = -2795
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4533():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    int_0 = -3792
    bytes_0 = b'\t\xd2\x1f<[e\xa6-\xc2\x90}"9='
    module_1.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    bytes_0 = b"\xe3\x91\x82\x89\xf1\xa9\x9c\x96D!\x84\xd3\xb7O\x81\xc0\xa4V\xd0\xec"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    float_0 = 2752.03
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    str_0 = "/$}\x0c!"
    module_1.get_new_command(str_0, str_0)


def test_case_4539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4540():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4542():
    int_0 = -1014
    var_0 = module_0.purge()
    module_0.findall(int_0, int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    float_0 = -1919.494284
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    bytes_0 = b"\xf2\x0e\xeeJ\xea\xa1wAJzV~\xdb\x05\n\xb7\r"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    str_0 = ""
    none_type_0 = None
    module_0.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4547():
    bytes_0 = b"\x0fr\x11"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    float_0 = 32.99
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    int_0 = 380
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.subn(list_0, list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    str_0 = "dju @'O)\x0b4!D"
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    bool_0 = False
    base_exception_0 = module_3.BaseException()
    module_1.get_new_command(bool_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    float_0 = -3506.826
    list_0 = [float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    bytes_0 = b"\x10\xfe`\xbd"
    set_0 = {bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    int_0 = -2476
    set_0 = {int_0, int_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    bytes_0 = b"\xb1\x89\xdb\x1b\x1d\x86\xc7Q\x02\xebj2\x9f\x03{\xbc-\tN"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.search(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    bytes_0 = b":\xd7G|F\x18N\x84\xec"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    str_0 = "}#BD~6WVUEN#KK.S"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    set_0 = set()
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    int_0 = -752
    module_0.subn(int_0, int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    complex_0 = -1034.75 - 922j
    float_0 = 1730.3
    tuple_0 = (complex_0, float_0, float_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_1.get_new_command(list_1, none_type_0)


def test_case_4568():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4569():
    float_0 = 157.6
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    error_0 = module_4.Error()
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    error_0 = module_4.Error()
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    str_0 = ";.Ou"
    str_1 = "*h0 sK%%jB"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_3.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bool_0 = False
    int_0 = -846
    error_0 = module_0.error(bool_0, pos=int_0)
    list_0 = [error_0, int_0, error_0, int_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    float_0 = 2428.3025
    module_0.subn(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    set_0 = set()
    error_0 = module_0.error(set_0, pos=set_0)
    error_1 = module_0.error(error_0)
    module_1.match(error_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    list_0 = []
    none_type_0 = None
    module_0.search(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    var_0 = module_0.purge()
    int_0 = -432
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    str_0 = '&]"H\x0c{='
    var_0 = module_0.finditer(str_0, str_0)
    list_0 = [var_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    bytes_0 = b"\xda=D\xbc\x19B{*\xad"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    float_0 = -2788.0
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0, float_0, list_0]
    module_1.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    bytes_0 = b"K'P"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0)
    module_1.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    complex_0 = 3458.409 - 876.975998j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    float_0 = -272.5
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    dict_0 = {}
    float_0 = -2617.0
    module_1.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    bytes_0 = b"\xfb\x06\x80\xbb\x83q\xf9\xf6"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    int_0 = 396
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = 806
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    bytes_0 = b"\x10\xcd\xf1\xc3Nj\xe7\x81+s\x84\x9f\x03\xf2d\xaex\xccg"
    var_0 = module_0.compile(bytes_0)
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    dict_0 = {}
    base_exception_0 = module_3.BaseException(**dict_0)
    object_0 = module_3.object()
    dict_1 = {object_0: object_0, object_0: object_0}
    module_0.template(dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    bytes_0 = b"\xdc\x842"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    bytes_0 = b"\xaes\xba\x15\x93\xaa\xd3\xdb\\\xbd\xc8\x8c\xd0&U\x92\xa5W\xd4\xff"
    var_0 = module_0.purge()
    var_0.__repr__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    int_0 = 1538
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bool_0 = True
    exception_0 = module_3.Exception()
    module_1.get_new_command(bool_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    str_0 = '@dCI?U;cZ9"C}5Bq4+'
    var_0 = module_0.sub(str_0, str_0, str_0)
    var_1 = module_0.purge()
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    str_0 = "A7nqw(xuW,zHX|j\n&"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    complex_0 = 1173 + 1304.157j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    float_0 = 3560.18513
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    str_0 = "VF]%suVZz'{?~\\}"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    bytes_0 = b"\xcfcz7\x1e\x98"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    str_0 = "K6e|ufw#t\x0by"
    str_1 = "!VCdMgze{ByP#5%m"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    base_exception_0 = module_3.BaseException(*list_0)
    module_1.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    bytes_0 = b"\x00;\xc8\x88CV\xec\xf2UQ\x9f\xff\xd2\xd7\x85"
    bytes_1 = b"\xa8\x13\xa4\xbf\x86I\xbf\x87\x8bP\r\xab\xbd+Z"
    module_1.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    bool_0 = True
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    float_0 = 174.93
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, bool_0, dict_0]
    module_0.template(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    enum_dict_0 = module_2._EnumDict()
    module_2.unique(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    str_0 = "'>j!#:\x0c}\n-"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    module_1.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    str_0 = "y[o"
    set_0 = {str_0}
    module_1.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.finditer(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    bytes_0 = b"\x95bfm\xee\x06\xb4\x9a\x84Q\xff\xd4\xd1\x10z\xec\x16,"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    set_0 = set()
    set_1 = set()
    module_1.get_new_command(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    bytes_0 = b"\x07b(\xbe\xcc\x94\xff\x7f\x87\xfd[\x9a"
    set_0 = {bytes_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    none_type_0 = None
    bytes_0 = b"O\xf0\xa4\x19w3\xbd\xc5\xc1\xa2"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bytes_0 = b"x\x14\xf3"
    module_0.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    complex_0 = -863.3743 + 3000.04j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    float_0 = 3281.193
    none_type_0 = None
    module_0.sub(float_0, none_type_0, none_type_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    float_0 = 492.526
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    bytes_0 = b"cE\x10[\xb3x\xde\x12"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    none_type_0 = None
    tuple_0 = ()
    module_1.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    int_0 = 2751
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    str_0 = "h"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    int_0 = -3949
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    str_0 = "#RCT\x0b37V$+P-rx`M"
    none_type_0 = None
    module_0.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    str_0 = "Xk09mnG"
    none_type_0 = None
    module_0.split(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    int_0 = -3019
    tuple_0 = (int_0,)
    module_2.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    none_type_0 = None
    bool_0 = False
    module_0.template(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    str_0 = "?wYz vUWH.b"
    module_0.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    bytes_0 = b"\xb3\xf4\xff\x94\xf1\xe02\xae\x18\xe0\xdd\x94F"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    float_0 = -1440.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bytes_0 = b"\x8b\x8f\xee\xabZ\xbe\x14\xed\xd7\xbdUZc\xeaf\xe5G"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    bytes_0 = b"!t\xd8&-$\xb9a\xd4\xb4t\xbb\x00"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    int_0 = 2390
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    bytes_0 = b"K\x11\x8b\x96\xdd\x05\x90R\x0f\x0e\x07\x16\x84"
    none_type_0 = None
    module_0.sub(bytes_0, bytes_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    str_0 = '8@#tn^aw"\x0bU?E#-'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    str_0 = "og"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    str_0 = 'jk,tg8[A\\Ro"-D'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    bytes_0 = b"un\x0b"
    var_0 = module_0.escape(bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_4658():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    int_0 = 1111
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    var_0 = module_0.purge()
    module_2.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    bool_0 = False
    module_1.match(regex_flag_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    bytes_0 = b"f\xe7\x85Lb\xdf.\xc9\x81\xf5\x92"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    complex_0 = -193.9 - 603.3831j
    module_1.get_new_command(complex_0, complex_0)


def test_case_4665():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4666():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    bytes_0 = b""
    module_0.error(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    bytes_0 = b"-\xe6\n\x1b\x1b\xb9(\xe4\x11\xf4v^\xd3\x0c\x8b\xc8\xa3?\xbf}"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    set_0 = set()
    module_0.compile(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    str_0 = "^:3`OG{&{\\Qv\r*"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bytes_0 = b"\xb8V\xed"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    int_0 = 3900
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    none_type_0 = None
    module_2.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    str_0 = "O}59\t0s]a}*zxF"
    error_0 = module_4.Error()
    list_0 = [str_0, error_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    complex_0 = 6451.1 + 937.682j
    set_0 = {complex_0, complex_0, complex_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    float_0 = 559.926
    list_0 = [float_0, float_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    base_exception_0 = module_3.BaseException()
    module_0.findall(base_exception_0, base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    complex_0 = -3217.9 - 2421.09471j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    str_0 = "!2~\x0bW"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    int_0 = -1222
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    var_0 = module_0.purge()
    module_0.Scanner(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    complex_0 = -2123.53 - 5282.330238j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4694():
    str_0 = "vv"
    var_0 = module_0.match(str_0, str_0)
    var_0.__getitem__(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    str_0 = "U\x0b?0lUm=u/|Go@q\nq"
    set_0 = {str_0}
    module_1.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    int_0 = 657
    module_0.fullmatch(int_0, int_0)


def test_case_4697():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4698():
    str_0 = "2u6^D\x0cJ8NOt"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    int_0 = -4982
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    str_0 = "s(p?< 8ueCT`zZ+,"
    module_0.finditer(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    int_0 = 3652
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    int_0 = -1272
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    str_0 = "-PDi\x0b}6"
    var_0 = module_0.template(str_0)
    var_1 = var_0.__dir__()
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    str_0 = "uZ0H9d\r"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.subn(dict_0, dict_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    bool_0 = False
    complex_0 = -2672.6663 + 1552.888411j
    dict_0 = {bool_0: complex_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    float_0 = 4729.198541
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    base_exception_0 = module_3.BaseException()
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    bytes_0 = b"F\x12"
    var_0 = module_0.search(bytes_0, bytes_0)
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4710():
    str_0 = "U*sk\n!K|%"
    var_0 = module_0.findall(str_0, str_0)
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    int_0 = -386
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4713():
    int_0 = 1835
    list_0 = [int_0, int_0, int_0]
    module_0.findall(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    str_0 = "P5oB7k/"
    var_0 = module_0.subn(str_0, str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    str_0 = ";${+!Tz[4`u*P<LS"
    module_0.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    float_0 = 961.30329
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    int_0 = -1623
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    int_0 = 2492
    none_type_0 = None
    module_0.fullmatch(int_0, int_0, none_type_0)


def test_case_4723():
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    str_0 = "n:vx5;7&"
    module_0.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    int_0 = -2509
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    str_0 = "h[ulJQ8"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    int_0 = -1899
    list_0 = [int_0, int_0, int_0]
    bool_0 = False
    module_0.sub(list_0, bool_0, list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    int_0 = 835
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    int_0 = 3364
    tuple_0 = (int_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    str_0 = 'S"\x0b<5O{$,%=8'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    enum_dict_0 = module_2._EnumDict()
    module_0.split(enum_dict_0, enum_dict_0, flags=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    complex_0 = 2165.6355 + 3351.5488j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bytes_0 = b"I\xb8\xa9EH\xd9\x90\xd9\xb6w\xef\x9e\x883"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    str_0 = "J*U\r6&C0z="
    str_1 = "W'\tw<%4M-xi4oPl\x0c\x0b{"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    int_0 = 4364
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    bytes_0 = b"\x89\xeb\xad4\x1bD&\xad\x00\xa6\xbdX\x11];\xc7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    bytes_0 = b"\xb3\xa2"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.findall(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    int_0 = 1712
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    str_0 = ""
    set_0 = set()
    module_0.sub(str_0, str_0, str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_2.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    float_0 = -349.03085
    module_0.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    int_0 = -3916
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    str_0 = "S"
    none_type_0 = None
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    bytes_0 = b'TGj":\xd4'
    tuple_0 = (bytes_0, bytes_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    int_0 = 416
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    float_0 = 602.06487
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    bool_0 = True
    bytes_0 = b"g\x80\x85\xa6\x9c-\xe5\x9a\x08"
    module_0.subn(bool_0, bool_0, bool_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    bytes_0 = b"sc.\xdcM\x8at\x05O\xfc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    str_0 = "2[7tkCn1aRo3L}#R\x0bVBV"
    none_type_0 = None
    module_0.subn(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    bool_1 = True
    module_1.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    float_0 = 4043.13557
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    int_0 = -1012
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    list_0 = []
    str_0 = "*"
    tuple_0 = (list_0, str_0)
    int_0 = -463
    module_0.sub(tuple_0, int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    bytes_0 = b"\xfe\x1e7\x92\xbd\xf4w"
    none_type_0 = None
    module_0.split(bytes_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4770():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    bytes_0 = b"\xe2\x91\xd9\xadq\xc1{7}\x9a\xfd\xaaN\xa6q\xb1\xff"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    none_type_0 = None
    float_0 = 1812.7
    int_0 = 2049
    module_0.subn(float_0, none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    int_0 = -1430
    none_type_0 = None
    module_0.match(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    bytes_0 = b"d\x9d\x975"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    str_0 = "IYol%iwJ294\t^{)Ur"
    module_0.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bytes_0 = b"\x14\x9f$\x92\xdeVJ\xb6\xc6.\xd3'\xf6g"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bytes_0 = b"(\xe0\xc81\x8b6b>\xdd\xcd\x17\x96/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    bytes_0 = b"7r\x19#\\<\x0c{\xfb\x85\xed\x14dP\x0c\x10e\r\xd5\xa0"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    dict_0 = {}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    str_0 = "8Hz"
    none_type_0 = None
    module_0.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4793():
    int_0 = -3433
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    int_0 = -2693
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    str_0 = "($7=W|=fu,"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    set_0 = set()
    int_0 = -1140
    module_0.findall(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    str_0 = "l;${"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    int_0 = 662
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4800():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_2.unique(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    str_0 = "$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    int_0 = 1399
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    error_0 = module_4.Error()
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    error_0 = module_4.Error()
    none_type_0 = None
    int_0 = 95
    module_0.subn(none_type_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    complex_0 = -759.069 + 2046.3j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    str_0 = "mvM?OP>"
    list_0 = [str_0, str_0, str_0]
    bool_0 = True
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4811():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.fullmatch(list_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    complex_0 = 358.41927 + 1033.854326j
    module_0.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    int_0 = 1193
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    str_0 = "<&TR"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    none_type_0 = None
    str_0 = "@m6X?>:{Mb&\\jo"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    none_type_0 = None
    dict_0 = {}
    module_4.Error(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    int_0 = 4079
    module_0.findall(int_0, int_0)


def test_case_4824():
    complex_0 = 389.132 + 709.95j
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bool_0 = False
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    bytes_0 = b"q\xc1mz\xdb\xae\xe6"
    var_0 = module_0.compile(bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    bytes_0 = b"\xd0\x85\x95<h\xe8\xcf\x9a"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    int_0 = 2110
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    float_0 = 1461.84912
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    int_0 = 1302
    module_0.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    int_0 = 412
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    float_0 = 3493.7
    module_0.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    complex_0 = -3981.1678 + 2669.137j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    str_0 = "(L\\_P&C'8FvbS"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    bytes_0 = b"(1\xf4}*\xde\xfe"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    bool_0 = True
    enum_dict_0 = module_2._EnumDict()
    module_0.split(bool_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4848():
    none_type_0 = None
    tuple_0 = ()
    module_0.fullmatch(none_type_0, tuple_0, tuple_0)


def test_case_4849():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4850():
    bool_0 = False
    int_0 = 1679
    tuple_0 = (bool_0, int_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    float_0 = 22.6877
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    bool_0 = True
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    int_0 = -237
    set_0 = {int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    bytes_0 = b"\x00\x8b\xe2\x9e\xb7"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    none_type_0 = None
    complex_0 = -3198.633 + 942.26424j
    module_1.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    str_0 = "I"
    var_0 = module_0.compile(str_0)
    none_type_0 = None
    enum_dict_0 = module_2._EnumDict()
    enum_dict_0.__setitem__(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    str_0 = "y[Tb5h`?\r"
    module_0.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bytes_0 = b").a\xc2q\xfaMAy\x1b"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4861():
    float_0 = -2798.4097
    int_0 = -1414
    module_1.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    var_0 = module_0.purge()
    var_0.__getitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    float_0 = 1304.1
    none_type_0 = None
    module_0.sub(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    int_0 = -1023
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    int_0 = -35
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    float_0 = 1930.78
    none_type_0 = None
    module_0.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    bytes_0 = b"\x08o\x0eU\xfb\xc7do\x88\x1c\xdf\x07r\xa9\xc4e\xfb\x85"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    bytes_0 = b"\xb0)\xaa\xdcP-fkZ\xb0\xf5O\xbf\xbc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    dict_0 = {}
    auto_0 = module_2.auto(**dict_0)
    str_0 = ""
    module_1.get_new_command(auto_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    str_0 = 'RecyNSFA"7THR\n'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    int_0 = 190
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    str_0 = 'T9"m|.;?w0|'
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    int_0 = 2011
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    var_0 = module_0.purge()
    module_2.EnumMeta()


def test_case_4877():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4878():
    none_type_0 = None
    module_2.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    str_0 = 'I71q"0<>}vnsY_'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    bytes_0 = b"\x89^\x87\xe7\x83\x9b\x1b\x9f\xa0\x96\xcf'\"\xb2\x1fl\x19u"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    str_0 = 'p"LR\ry\t'
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    str_0 = "LCp]@1 n\x0bo>M'TR\x0b.\\ZB"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    int_0 = -436
    module_0.fullmatch(int_0, int_0)


def test_case_4887():
    pass


def test_case_4888():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4889():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


def test_case_4890():
    bytes_0 = b"\xa5\xf8oi\xbf|RNH\xf4"
    var_0 = module_0.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    set_0 = set()
    none_type_0 = None
    module_0.search(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    str_0 = ";#QxwlF\x0c,A\t4G\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    enum_dict_0 = module_2._EnumDict()
    var_0 = module_0.purge()
    var_0.__repr__(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    bytes_0 = b"\xc0T,\x0fV\x8d(\xe0O\x95\xa6\x98\x7f\xd4>"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    complex_0 = 429.7535 - 1001.707775j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.findall(dict_0, dict_0, bool_0)


def test_case_4899():
    var_0 = module_0.purge()


@pytest.mark.xfail(strict=True)
def test_case_4900():
    int_0 = 2272
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    bytes_0 = b"Lf\xfb\xadU\xbe\xaao\x98\xadM\x98]e\x83\xe0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    str_0 = "mi."
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    int_0 = 1901
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    set_0 = set()
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    dict_0 = {}
    module_0.sub(dict_0, dict_0, dict_0, flags=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    int_0 = 1183
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    str_0 = "]BOiQX*zTV,P7*w@iMC"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    int_0 = -973
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    int_0 = 343
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    bytes_0 = b"\xe5Bs'\x1c\x92"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    str_0 = "1oFnl%2"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    int_0 = -2033
    var_0 = module_0.purge()
    var_0.__len__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    dict_0 = {}
    module_0.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setitem__(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    bool_0 = True
    set_0 = {bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4921():
    bytes_0 = b"\xde\x86N\x8f\xe3\x93\x05x\x0eB "
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4924():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    int_0 = 338
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    enum_dict_0 = module_2._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    list_0 = []
    str_0 = "*@l"
    dict_0 = {str_0: str_0}
    module_4.Error(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    int_0 = 345
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    none_type_0 = None
    enum_dict_0 = module_2._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    int_0 = 147
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    float_0 = 1433.166
    dict_0 = {float_0: float_0}
    module_1.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    str_0 = "\nxu\r"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    float_0 = 857.2
    module_0.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    bytes_0 = b"\xff\xdf\x0fi\xb2\x9c\x19\xa2\x01\xddi\xc7\xd8\nH\r\xf0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    bool_0 = False
    module_0.compile(bool_0)


def test_case_4938():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4939():
    none_type_0 = None
    enum_dict_0 = module_2._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    bytes_0 = b'T\xf0Y8\xb6F\x01Q%"\x07\xa9\xc6\xd0E'
    var_0 = module_0.template(bytes_0)
    str_0 = "#A4T&"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    str_0 = "u\r{A4u+\n}5gIC"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_3.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    str_0 = "P]tI[JPEPBx"
    module_0.sub(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    int_0 = 3319
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    bytes_0 = b"\x06D"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bool_0 = False
    module_3.Exception(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    object_0 = module_3.object()
    module_2.unique(object_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    int_0 = -2188
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_1.match(regex_flag_0, regex_flag_0)


def test_case_4956():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4957():
    int_0 = -56
    none_type_0 = None
    module_0.sub(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_1.get_new_command(set_0, set_0)


def test_case_4959():
    none_type_0 = None
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    with pytest.raises(AttributeError):
        var_1.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    str_0 = "^>"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    int_0 = 932
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    str_0 = "V/KM{quoRl)3TVA\x0c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    bytes_0 = b"{\xa1\xdf\x8f}?\x04\xaa@\xc4\xd9@\x06\xde\x8f-\xd4\xa3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    int_0 = -1018
    str_0 = "mu87'v"
    module_0.match(int_0, int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    str_0 = "66CN*(78/"
    module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    set_0 = set()
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    float_0 = 2404.273778
    list_0 = [float_0, float_0]
    str_0 = "iGB?a=k[.w}\x0c:xQ|kl*%"
    module_0.sub(list_0, float_0, list_0, str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bool_0 = True
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    int_0 = -831
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    float_0 = -450.251
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    none_type_0 = None
    bool_0 = False
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    float_0 = 3958.702
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bytes_0 = b"d\xbc"
    module_2.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    none_type_0 = None
    bool_0 = False
    module_0.fullmatch(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    bytes_0 = b"\xa66J@l\x1c\x83["
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    str_0 = "x>9l-"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    bytes_0 = b"\xa8\xea\t"
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    bool_0 = False
    bytes_0 = b"\x88r\x0b\x0e\xdb|\xef\xb6\xcc\xa5?\x08\xa7"
    module_0.split(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    bytes_0 = b"|\x03t"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    int_0 = 2657
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    bytes_0 = b"\xa4Q\x9bL\x11o+\xa6\xe8>.e\xce\xc0\xba\xd3\xb0"
    module_0.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    bytes_0 = b"uf'>W\xed\xd7\xa0\xc7\xd7@\xfc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    bytes_0 = b"\xa0\xf6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    str_0 = "WC-ya\rN auwoB0-Z8a\\h"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    bytes_0 = b"\xd4\xf2\xa1\xdcl\xdd\xdd\xc5\x01\xd1u\x1b"
    float_0 = 3382.03
    module_1.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    error_0 = module_4.Error()
    none_type_0 = None
    module_1.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    str_0 = "^`o"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    str_0 = "%DzF=R\nA!*V* rP_K#"
    module_0.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    int_0 = -1729
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    int_0 = -1600
    error_0 = module_0.error(int_0, pos=int_0)
    set_0 = {error_0, int_0, int_0, error_0}
    list_0 = [set_0, int_0, error_0]
    module_0.sub(list_0, error_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    str_0 = "$F};^\n!9[shV;<EFg"
    var_0 = module_0.purge()
    var_0.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    bytes_0 = b"c4\x06"
    var_0 = module_0.purge()
    var_0.__setattr__(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    bytes_0 = b"\xad\x9f\xdf\xf8d(\xc9P9\xce\xd3r\xcfa\xd1\x84\xcc\xfc5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    int_0 = -3710
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    int_0 = 168
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.subn(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    int_0 = -789
    none_type_0 = None
    module_0.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    float_0 = 3515.4
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    str_0 = "']LDhtn"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    error_0 = module_4.Error()
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    str_0 = "x7tI\rO=|-*;"
    str_1 = "|vPAV\n@f\n<\n\nWKIRU"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    str_0 = 'X~T*VjwB"5$^r9-h'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    bytes_0 = b"\xbdD\xc0"
    tuple_0 = (bytes_0,)
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_1.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    none_type_0 = None
    module_2.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    bytes_0 = b"I\xb4\xc7-C\x8d_\xd1"
    none_type_0 = None
    module_0.sub(bytes_0, bytes_0, bytes_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    list_0 = []
    none_type_0 = None
    module_0.search(list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    str_0 = "\\0#JU\no~M_=q\x0c"
    str_1 = "X>`vvl+"
    module_1.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    int_0 = -1184
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    int_0 = 4551
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5038():
    bytes_0 = b"FD\x10\xfd;K:\xe8\xa8:IP\x05\x18\xc2\x08\rl9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.finditer(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


def test_case_5040():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5041():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__getitem__(none_type_0, none_type_0)


def test_case_5042():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5043():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    int_0 = 99
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    str_0 = ",$E#bf!{eONsj"
    var_0 = module_0.match(str_0, str_0)
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    float_0 = -211.023
    bytes_0 = b"\xd4\xb8\x9d\x8e\n\x0cQ\x88e\xd0\xb5\x02\xdc!J\xef\x97\xf34"
    module_1.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    var_0 = module_0.purge()
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    bytes_0 = b"\xea\x8f\xc0<\xd2\xb9P__\xe6\x03P\xc9"
    none_type_0 = None
    module_0.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    dict_0 = {}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    complex_0 = 904.6 - 522.6j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    int_0 = 1398
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    bytes_0 = b"\xce\xa0[*=Z\xee\xd4\xec\xe3\xc2W\xb8\xa4\x85b\xfe"
    str_0 = "Il9N9[6'$D"
    module_1.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    str_0 = "7#^b&n"
    module_0.compile(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    float_0 = 548.0461
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    str_0 = 'FRFp{o"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    str_0 = "\x0b>"
    list_0 = [str_0]
    module_1.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    bytes_0 = b"n\r\xbe"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    var_1.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5067():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    complex_0 = -2828.72365 - 1347.2433j
    dict_0 = {}
    str_0 = "h\n'it$_<]4f"
    list_0 = [complex_0, dict_0, str_0, dict_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    str_0 = "(>\rjPSTfPg[b "
    module_1.get_new_command(str_0, str_0)


def test_case_5070():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    var_0 = module_0.purge()
    var_0.__delattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    complex_0 = -1712.292 - 1326.95207j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    bytes_0 = b"9\xcd\xd6aZ\x13\xbb%~\x05'\"\xed\xb8\x9em\x87"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    float_0 = -2611.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.subn(list_0, dict_0, dict_0)


def test_case_5077():
    enum_dict_0 = module_2._EnumDict()
    bytes_0 = b"F\xfd\x1e\x08O\x87\x17\xa2F!\x194\x12\xaa"
    var_0 = module_0.split(bytes_0, bytes_0)
    with pytest.raises(TypeError):
        var_0.__new__(enum_dict_0, enum_dict_0, enum_dict_0, enum_dict_0, **enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    complex_0 = 1117.6365 - 1976j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    bool_0 = True
    set_0 = {bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    bytes_0 = b"\xb2F`5D\xfc\xceK"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    bool_0 = False
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bytes_0 = b"\xea\xdb\x8f\xa0\xba\x01\xd5\xf4\xe2"
    set_0 = {bytes_0}
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    str_0 = "RgPhF'}3-\"5|]-YkygT"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    int_0 = 2014
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    bytes_0 = b"-\xfa\xa6q\xf3"
    module_1.match(bytes_0, bytes_0)


def test_case_5090():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5091():
    str_0 = "!\x0c#eEhK]gFAE^"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bytes_0 = b"o\xf1q\xb9\x87\xd6\xaa\x01\xc4Q\x17\x1c\xbd\xbe\xce\x9e\xdcl"
    var_0 = module_0.escape(bytes_0)
    var_0.__delattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    float_0 = 1555.701
    module_0.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    int_0 = 116
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    float_0 = 1633.0
    module_0.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    float_0 = -2383.68
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    float_0 = 668.971
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    set_0 = set()
    none_type_0 = None
    module_0.compile(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    bytes_0 = b"\xe3*G\x95\xdc\x9e\xda6Y\xe3\xb3(\xa5\x89\xaf\xc5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    bytes_0 = b"\xac\xca=\xb3\xd6\xad\xa8;\xd3\xcf\xcdJ"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    bytes_0 = b"\xb4"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    str_0 = "&E\t=mIm_\nNug"
    list_0 = [str_0, str_0]
    int_0 = 1863
    var_0 = module_0.findall(str_0, str_0)
    tuple_0 = (int_0, var_0)
    tuple_1 = (list_0, tuple_0)
    module_1.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    module_2.EnumMeta()


def test_case_5108():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    bytes_0 = b'\x9f7L\x13\x1b"9\x07\x02'
    var_0 = module_0.split(bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    tuple_0 = ()
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5112():
    float_0 = -1204.7636
    module_0.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    str_0 = "1bI71Uwn$n$"
    none_type_0 = None
    error_0 = module_0.error(str_0, none_type_0)
    module_1.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    float_0 = -479.978403
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    int_0 = -1036
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    int_0 = 434
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    int_0 = 597
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    bytes_0 = b'\x9a\xc3\xf4_\xbd2"\xb5\xfdoc'
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    int_0 = 1503
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    bool_0 = True
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    bytes_0 = b"\x93( \x0e\xbe\x8eJ\xd9\xf0N\xefP$\xecr\xbb\xb0\x7f\xf7S"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    bytes_0 = b"g\x96\x11%]\xa5O\xa1\xb3\x18y\x89\x031\xe0"
    list_0 = [bytes_0, bytes_0]
    module_1.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    int_0 = 2795
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    int_0 = 1143
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    str_0 = ">~JEKjYDf(KqI8?"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    int_0 = 1308
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    float_0 = -386.14
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    int_0 = -1187
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    str_0 = '"f|'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    bytes_0 = b"\x81\xfc\xd2\x83\r\xd9a\xd6\x91\xae\x0c\xd4g"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    float_0 = 2070.8527
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    str_0 = ")5FLZ98Z\n\\"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    var_0 = module_0.purge()
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5143():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    var_0 = module_0.purge()
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    str_0 = "a5rb2hl8 fc8fLF+2"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    int_0 = 4073
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    str_0 = '-\n2/m3Rp;V_5v4 ~r"c'
    var_0 = module_0.escape(str_0)
    set_0 = {var_0, str_0}
    module_1.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    bytes_0 = b"\x8d\xfd\x02Q\xd1\x83\x02m"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    str_0 = ".Hg@95P1j>-"
    var_0 = module_0.compile(str_0)
    set_0 = {var_0, var_0, var_0}
    module_0.subn(set_0, var_0, str_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    int_0 = 2789
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    complex_0 = -1207.92447 + 4056.71952j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    bool_0 = False
    none_type_0 = None
    module_0.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    var_0 = module_0.purge()
    var_0.__setattr__(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    none_type_0 = None
    str_0 = "y5Ip%@\rqh9+"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_0}
    module_0.Match(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_0.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    float_0 = 2060.476
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    int_0 = -1737
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    none_type_0 = None
    set_0 = set()
    module_0.split(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    int_0 = -2668
    module_4.Error(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    int_0 = 2081
    tuple_0 = (int_0, int_0)
    module_0.split(tuple_0, int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    int_0 = 1842
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    complex_0 = 894.9888 + 1332.50388j
    module_1.get_new_command(complex_0, complex_0)


def test_case_5170():
    bool_0 = False
    dict_0 = {}
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(bool_0, bool_0, bool_0, bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    int_0 = 893
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    bytes_0 = b"\xb2\x8e\xa1\xc2\xa4\x11\xd2na\x9f\x94j\xfeF\xde\xc1"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    str_0 = "SDqo@l+|$8+m"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    bytes_0 = b"\xf3{LK\xa4\x1c0\xa8W"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    str_0 = ".xO1%"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    bytes_0 = b"\x0fT\x9c\x8f$Y#.\x85\xd2"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    complex_0 = 1194 + 1195.198j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    int_0 = -560
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    str_0 = "S8RS<#CF/z6~$"
    var_0 = module_0.purge()
    module_1.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    str_0 = 'UK%aiw$W\\h-}e"k'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    enum_dict_0 = module_2._EnumDict()
    none_type_0 = None
    module_0.template(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
    module_1.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    bytes_0 = b"\x91E7\x04\xb5\x06\x8d\x94Xe>;\x88(%\xd1\r"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bytes_0 = b"(\xb1>\xf9\x06\xfe"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    int_0 = -841
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    str_0 = "w]R"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.split(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    module_2.EnumMeta()


def test_case_5196():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5197():
    float_0 = -4252.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    str_0 = "k4kU1$`<&S\x0b?}lJ"
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    set_0 = set()
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    float_0 = 2258.4
    module_0.fullmatch(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.finditer(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    dict_0 = {}
    error_0 = module_4.Error(**dict_0)
    module_0.compile(error_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    bytes_0 = b"|\xd6\xdc\x8a\xf5Ho\x9c\xab\xb8}\x95W\xde\x06\x9a}"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    dict_0 = {}
    bool_0 = False
    module_0.findall(dict_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    bytes_0 = b"o\xbe"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    int_0 = -1307
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_5210():
    int_0 = 1405
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    list_0 = []
    exception_0 = module_3.Exception(*list_0)
    module_1.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    str_0 = "05W%&AR-*8"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    tuple_0 = ()
    module_0.fullmatch(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    int_0 = -2967
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    float_0 = -3322.3211
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    int_0 = -3318
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    str_0 = "gZ2|[f"
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    enum_dict_0 = module_2._EnumDict()
    int_0 = -2084
    bytes_0 = b"#\x16\x16U\nE"
    module_0.match(int_0, int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


def test_case_5224():
    str_0 = "#"
    none_type_0 = None
    var_0 = module_0.fullmatch(str_0, str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    complex_0 = 3800 + 1660.1015j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    str_0 = "f5MF+a\nW@tzk+VC"
    var_0 = module_0.escape(str_0)
    module_0.subn(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    str_0 = "%p<}3io-/@/\n)o/\t`<C"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    bytes_0 = b"b\xb1\xa8n8\xf1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    bool_0 = True
    none_type_0 = None
    module_0.template(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    bool_0 = True
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    regex_flag_0 = module_0.RegexFlag.MULTILINE
    module_0.Scanner(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    str_0 = "Mh;{u"
    none_type_0 = None
    module_0.sub(str_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    bytes_0 = b"6+\x01\xcf\xbfY"
    list_0 = [bytes_0, bytes_0]
    module_0.subn(list_0, list_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    str_0 = "hD Uw)M5t \x0b|o<\r&"
    module_0.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


def test_case_5240():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5241():
    str_0 = "&7Xg\t?+O25T9z/(c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    bytes_0 = b"X\x17\x87\xf6f~P\x0c\xf9_\x7f\xc4\x17\xf2'\xaa"
    var_0 = module_0.split(bytes_0, bytes_0)
    str_0 = "C/=7_"
    str_1 = ""
    dict_0 = {str_0: str_0, str_1: str_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    float_0 = 1114.261
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    bytes_0 = b"\xf5\xd4C)QB\xe1"
    module_0.findall(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    none_type_0 = None
    module_3.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    int_0 = -1972
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    bytes_0 = b"R\x85t"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    str_0 = "P.&V%b]+oVV)"
    module_1.match(str_0, str_0)


def test_case_5253():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5254():
    float_0 = -467.7
    module_0.template(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    str_0 = "TiE3\x0b6y5s#lHqBJy"
    str_1 = '"rz}Zn?iPw-Qm>-N@\r%|'
    str_2 = " 1{-C/<|5gN+\x0b"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    float_0 = -153.99
    module_0.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    int_0 = -304
    module_0.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    float_0 = -2763.4
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    float_0 = -2699.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    str_0 = "S:-z_!)|CrGKIH&w-"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    bytes_0 = b""
    float_0 = -4441.889382
    module_1.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    int_0 = -290
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    str_0 = "KCZp\x0bF=XYnTuS'+"
    var_0 = module_0.match(str_0, str_0)
    module_1.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    none_type_0 = None
    bytes_0 = b"Dm\xfb\xf9\x06\xf5\xf9\xfd\x03"
    module_0.fullmatch(none_type_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    bytes_0 = b"=f\xa4A[\xfao\xdb\x8e\x81L\xdd "
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0]
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    int_0 = 1321
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    none_type_0 = None
    list_0 = [none_type_0]
    module_3.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    float_0 = -3975.6
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    dict_0 = {}
    module_0.search(dict_0, dict_0)


def test_case_5281():
    list_0 = []
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(list_0, list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    auto_0 = module_2.auto()
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    str_0 = "1^\x0c\x0bs\r{hJ.%A,("
    str_1 = '\tT#q"=Ub?\t=y\\'
    bytes_0 = b"\xf8\xc0"
    list_0 = []
    tuple_0 = (str_0, str_1, bytes_0, list_0)
    module_1.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    float_0 = -2373.0386
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    int_0 = -2125
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    bytes_0 = b"\xdb\x95\x03N{\x8e@\x04\x9a"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bytes_0 = b"\x9f\x8d\x103\xa6\x10"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    int_0 = -1941
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    none_type_0 = None
    str_0 = "&dp&n$\r#S0}(>:.{Q5L%"
    dict_0 = {str_0: none_type_0}
    module_4.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    bytes_0 = b"\x1d\xd4L\xce"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    bool_0 = True
    none_type_0 = None
    module_0.findall(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    int_0 = -423
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bytes_0 = b"Ui0\xd8y\xea\xbb>\x05\xbe\xa6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    bytes_0 = b"\x89\xc4#/\x9b&\x13\xecy\x9d"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    int_0 = 3807
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    str_0 = "\x0b\nhaK_(\nh\x0czo:kZLYC"
    module_0.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    int_0 = -1519
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    none_type_0 = None
    bytes_0 = b"\xbbY2\x85"
    module_0.split(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    int_0 = -180
    none_type_0 = None
    module_0.subn(int_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    bytes_0 = b"\x7f\xbbO\xa8\x97\x1c\xff\x08\xaf\xda\xf0c\x8e,\xb2"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    str_0 = "\"@-v~[l2R'0"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    int_0 = 681
    bool_0 = True
    module_1.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    bool_0 = True
    module_2.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = ":2l\x0c-e{P:"
    none_type_0 = None
    module_0.sub(str_0, str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    float_0 = -1024.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    str_0 = "[7vA<_J\tVR#"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    bytes_0 = b"d"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    none_type_0 = None
    module_1.match(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    int_0 = -1070
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    bytes_0 = b"-\x11\xe9-\xd4Y\xa6\x0f\xb7\xb7\r"
    var_0 = module_0.findall(bytes_0, bytes_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    bytes_0 = b"\x95\xe9\xea\xf8I"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    complex_0 = 787.8336 - 528.1j
    module_1.match(complex_0, complex_0)


def test_case_5323():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5324():
    float_0 = 25.76
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    bytes_0 = b"\x0c\xd6\x8e\xd0\xb2T\x8f\x19\x9a\xa3l\xbb \x8d s\x80"
    list_0 = [bytes_0]
    bool_0 = False
    module_0.template(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    int_0 = -4024
    none_type_0 = None
    module_0.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    complex_0 = 75.9203 + 977.1606j
    module_0.template(complex_0, complex_0)


def test_case_5337():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()


@pytest.mark.xfail(strict=True)
def test_case_5338():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    int_0 = 1722
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    bytes_0 = b"\x8d\xbf \xb2p\nA\x8eY\xefw\xe4e3$\xe98\xd8_"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    list_0 = []
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    str_0 = "1RDJ4J3hT$N0|Pjk8&\x0b"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5345():
    int_0 = 2138
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    bytes_0 = b""
    module_0.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    str_0 = "'L'$Xl"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    int_0 = -1261
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    exception_0 = module_3.Exception()
    none_type_0 = None
    module_0.subn(exception_0, exception_0, exception_0, none_type_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    none_type_0 = None
    module_2.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    str_0 = '+"|ykke,'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    object_0 = module_3.object()
    module_0.fullmatch(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    str_0 = "k_tK\nl\x0bv:G'&"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    int_0 = 12
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    int_0 = -1292
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    int_0 = 1759
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.fullmatch(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    float_0 = -609.198
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    str_0 = 's!p.]>"r\x0bE{I\x0b'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    bool_0 = True
    bytes_0 = b"\x01U\xa0\x1c"
    set_0 = {bytes_0}
    tuple_0 = (bool_0, bytes_0, set_0)
    list_0 = [tuple_0, bytes_0, set_0, tuple_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    tuple_0 = (regex_flag_0,)
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    int_0 = -1834
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    float_0 = -2640.81
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    set_0 = set()
    none_type_0 = None
    module_0.compile(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    bytes_0 = b"\x1a\xc1D(\x84\xda\xac\x918\xdf\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    float_0 = -2024.0505
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    bytes_0 = b"\x03\xa5X\x8eY\xbe\xb4\xce|\xa9\xfc\xce&>z\xb4~,"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    dict_0 = {}
    module_0.sub(dict_0, dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    bytes_0 = b"\xb3Q\x1b\xfb\xf5\xf3\xae\x1b\x15\xc7O\x19:"
    none_type_0 = None
    module_0.subn(bytes_0, bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    str_0 = "[?FQ[eHk\x0b\t:p{5nRj5"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    var_0 = module_0.purge()
    module_0.Scanner(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5384():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    int_0 = -935
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    complex_0 = -6361.267 + 4170.061j
    int_0 = -1074
    module_0.split(int_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    bytes_0 = b"\xdc\xec\xe7\x9c?U"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bytes_0 = b"\xd3\x01!\xe9\xf5\x15\xc3\xe8m"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    float_0 = -356.65
    var_0 = module_0.purge()
    var_0.__len__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    complex_0 = 1816.053 - 3557j
    module_0.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    float_0 = 349.365
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    int_0 = 250
    tuple_0 = (int_0, int_0)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    str_0 = "<V}"
    int_0 = 435
    list_0 = [str_0, str_0, int_0, int_0]
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    bool_0 = True
    int_0 = 2633
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    int_0 = -497
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    object_0 = module_3.object()
    module_0.fullmatch(object_0, object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    str_0 = "*1n|v5A-8zv3jhe"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    bytes_0 = b"h\x92\x1b\xccV7\xf7iI$]\x95"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    bytes_0 = b'\xe6\xfbpK\xd8\x12"\xd0\xe4\xfaX\xa9\x84h\x0e}'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    int_0 = 1062
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    str_0 = "sx\tiA\\/e4Cz0&Y:"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_2.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    int_0 = -1562
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    object_0 = module_3.object()
    module_0.findall(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    bytes_0 = b"N\xc8\xd1\x1b\xbe"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    int_0 = -620
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    dict_0 = {}
    auto_0 = module_2.auto(**dict_0)
    module_1.match(auto_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    bytes_0 = b"\x834\xaa`=^\xfd\xe7\xb2\xf3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    complex_0 = -819 - 4095.130038j
    set_0 = {complex_0, complex_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    complex_0 = 962.06 + 2037.3304j
    none_type_0 = None
    module_0.finditer(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    base_exception_0 = module_3.BaseException()
    module_0.search(base_exception_0, base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


def test_case_5425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5426():
    error_0 = module_4.Error()
    none_type_0 = None
    module_0.subn(error_0, error_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    int_0 = 1478
    none_type_0 = None
    module_0.sub(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    dict_0 = {}
    module_0.Scanner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    int_0 = -604
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_5431():
    str_0 = "mi{vAqjAN1K~"
    module_0.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    str_0 = "J\\gX7W;<"
    none_type_0 = None
    module_0.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    str_0 = "K4m\\Z ]j'kjKc~"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    int_0 = 2816
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    int_0 = -1419
    module_1.get_new_command(int_0, int_0)


def test_case_5436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5437():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5438():
    bytes_0 = b"\xcevQ\x97\xa8\xbb\xe0\xd2\xcd\x14\xbd\xce&\x8cg\x1bl\x1b\xef"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    str_0 = "DZzM3+!<\\9cQxJU/7AK|"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    bytes_0 = b"K\xc9\xe3\x80J\x80\xe5a\x0eA\x98)'\x18\x86\xdf"
    set_0 = set()
    var_0 = module_0.purge()
    var_0.__delattr__(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    float_0 = -108.13
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    float_0 = -534.819246
    module_0.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    regex_flag_0 = module_0.RegexFlag.ASCII
    none_type_0 = None
    module_1.match(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    int_0 = -1455
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    str_0 = "|+[\x0bS$z"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    int_0 = -633
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    float_0 = 2774.482
    module_1.get_new_command(float_0, float_0)


def test_case_5449():
    none_type_0 = None
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    int_0 = 3828
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    str_0 = "]t%m:6IuZ=1j|U#Ax~'"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    str_0 = ']i"w,K'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    var_1.__reversed__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    int_0 = 178
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    float_0 = -2858.5
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    int_0 = 3219
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    module_1.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    int_0 = -1578
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    bytes_0 = b"\xa9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    bytes_0 = b"MW\xc2/E*\xe1\x81\xea\xd7;\xec\xaab\xb8\xf4"
    none_type_0 = None
    module_0.search(none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    int_0 = -576
    module_2.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    complex_0 = 246.882 + 1390.205j
    module_0.template(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    str_0 = ">IU?\t\nq.Cq'"
    none_type_0 = None
    var_0 = module_0.subn(str_0, str_0, str_0)
    var_0.__call__(str_0, none_type_0, none_type_0, module=str_0, start=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    bool_0 = False
    bytes_0 = b"xj\x1b\xef\xb4"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.sub(str_0, dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    none_type_0 = None
    bytes_0 = b"a=d\x9a\x9c_\x8f\xd1\xb5\xc0\x97\x18.6"
    var_0 = module_0.compile(bytes_0)
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    bytes_0 = b"\xea\xd4D`w\xbdt\xeb\x8f\xab\xbb\x95\xf2"
    module_0.Match(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    complex_0 = -1026.76381 + 1134.1j
    set_0 = {complex_0}
    module_1.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    float_0 = -381.402
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    str_0 = ")e?-<H "
    module_2.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    bytes_0 = b"\xa0#\x83\xed$"
    module_0.finditer(error_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    none_type_0 = None
    base_exception_0 = module_3.BaseException()
    module_1.get_new_command(none_type_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    float_0 = -1956.684723
    module_0.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    none_type_0 = None
    list_0 = []
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    int_0 = 276
    module_1.get_new_command(int_0, int_0)


def test_case_5486():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5487():
    int_0 = -1617
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    dict_0 = {}
    error_0 = module_4.Error(**dict_0)
    module_0.findall(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    str_0 = ""
    bool_0 = True
    module_0.finditer(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    list_0 = []
    module_0.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    none_type_0 = None
    int_0 = 374
    module_0.match(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    module_2.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5493():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_3.Exception(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    bool_0 = False
    none_type_0 = None
    module_0.search(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    tuple_0 = ()
    none_type_0 = None
    module_0.fullmatch(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    str_0 = "89S9bJ3HScX~.qX*m\\"
    none_type_0 = None
    str_1 = "0Qw"
    str_2 = "F\\WeeddYC^5<"
    str_3 = "t!iaCA#"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_3.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.compile(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    bytes_0 = b"\xba\xa4Q,-\xe4\xe2"
    list_0 = [bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    int_0 = -734
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    int_0 = 3638
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    int_0 = -2884
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    int_0 = 2132
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [int_0, set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    str_0 = "M-%\t]EB%3p"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    int_0 = 2285
    module_0.findall(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    tuple_0 = ()
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    bytes_0 = b"\xc0\xe3A\x07\xc87\x95\x17\x9a\x10?\xf96"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    str_0 = "Cf~Rf8Kux(C{ 2"
    module_0.findall(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    bytes_0 = b"\xc6\xb3\x8a\x1d(\x05\xdb\xec\xf8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    float_0 = 1330.6
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    bytes_0 = b";'\x9fP\xc7\x17{\x01\x13\x7fsg&F`\xe3\xfd"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    str_0 = "!>'w<9"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    enum_dict_0 = module_2._EnumDict()
    bool_0 = False
    module_1.get_new_command(enum_dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bytes_0 = b"\xfb\xdd\x7f\x8f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    none_type_0 = None
    module_1.match(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    bytes_0 = b"WI\xbd`\xc4\\"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    bytes_0 = b"\x86]\xdc"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    complex_0 = -3423.5693 + 5760j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    float_0 = -655.34
    dict_0 = {}
    tuple_0 = (float_0, dict_0)
    module_1.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    str_0 = 'r.q.P/?&)h"`E'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    float_0 = -1387.862
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    enum_dict_0 = module_2._EnumDict()
    module_0.finditer(enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    complex_0 = 846.6 - 110.71195j
    module_2.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    bytes_0 = b"\xdb\xcb$^CATE\xb0ZI\x17\xa3\xdf\xeb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    int_0 = -2504
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    complex_0 = 968.225692 + 2931.0111j
    module_0.Scanner(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    error_0 = module_4.Error()
    list_0 = [error_0, error_0, error_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    int_0 = 518
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    str_0 = "2I\rP"
    str_1 = "H~/M*$]<b%\x0bGn^UG+,f"
    module_1.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    str_0 = "kQ]D\\#qlqZI/"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    bool_0 = True
    str_0 = "'q}tb'H+aju\x0cM{ouXn?4"
    var_0 = module_0.sub(str_0, str_0, str_0)
    var_0.__delattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    bool_0 = True
    error_0 = module_0.error(bool_0)
    none_type_0 = None
    module_1.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    float_0 = 888.995055
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    none_type_0 = None
    bool_0 = True
    module_0.subn(none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    int_0 = -754
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    str_0 = "yExk(%o;^"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)
