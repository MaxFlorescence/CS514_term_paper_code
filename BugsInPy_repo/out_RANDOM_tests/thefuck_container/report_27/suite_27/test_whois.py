# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import whois as module_1
import urllib.parse as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 1152
    module_0.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "\x0cIqC/\n%"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = 115.30372 + 1013.62455j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ' nh[MKSTG1"G\rS~'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


def test_case_6():
    pass


@pytest.mark.xfail(strict=True)
def test_case_7():
    float_0 = -1253.69696
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "q[=fuI!@f&99hD>_In#@"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "A+\\t#-(l%Ryua]y3ge[t"
    module_1.match(str_0, str_0)


def test_case_13():
    pass


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = -1195
    int_1 = -225
    module_1.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = -1735
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -233
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    float_0 = -959.2679
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    set_0 = set()
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = -2570
    module_1.get_new_command(int_0, int_0)


def test_case_21():
    pass


@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    list_0 = [var_0, var_0]
    tuple_0 = (list_0, var_0)
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    int_0 = 360
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b"\x14\xa5&n\x01\xfe\xa1\xe3"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b"\x1b\xc9\x86\x8d3('@k\xbb\xb5\xb5FKm\x85\xe9X"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b"\x02\x17Z\x9a\x01"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    float_0 = -3355.9
    list_0 = [float_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    bytes_0 = b"j\x96\x1dq\x03\xb7\xa6\x08r=I"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = 185
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = '"Ez`T'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bytes_0 = b"\x0b\x11;\xbbK\xf7\x1a)\x87=*\xfd.\xf1\x7fR"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    bool_0 = True
    bytes_0 = b"\x99"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    int_0 = -981
    module_2.urlparse(int_0)


def test_case_40():
    pass


@pytest.mark.xfail(strict=True)
def test_case_41():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    int_0 = 4396
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bytes_0 = b"\xaf\x1a\x1cPd"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    int_0 = 2732
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = "7\t\x0c#Xn&ZnZ"
    module_1.match(str_0, str_0)


def test_case_47():
    pass


@pytest.mark.xfail(strict=True)
def test_case_48():
    int_0 = 3162
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    str_0 = "k?9)/P6H\n\x0bYZP4 K\r"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bytes_0 = b"\x9b\x99\x12\x9f\x7fl\xc9\xa0^+e\x04\x97\x03"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    float_0 = -649.658
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    int_0 = 1809
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    object_0 = module_0.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    bytes_0 = b"A\xc3\xba`5\xdd\x8d\xd10q\x99\x91D"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    bytes_0 = b"\xba\x87\xa13E"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    int_0 = 3480
    tuple_0 = (int_0,)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    list_0 = []
    var_0 = module_2.urlparse(list_0)
    module_1.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    int_0 = 3147
    tuple_0 = (int_0, int_0)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0, bool_0, bool_0)
    module_1.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    complex_0 = 799.8576 - 1176.6293j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    bytes_0 = b"\xfd\xd5~T\xb5\x82\x13\xd5\xa9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    bytes_0 = b"\x83"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    str_0 = "N.fO3"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bool_0 = False
    str_0 = "\\fe,+\nTF};c"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    list_0 = []
    module_1.match(list_0, list_0)


def test_case_69():
    object_0 = module_0.object()


def test_case_70():
    pass


@pytest.mark.xfail(strict=True)
def test_case_71():
    bytes_0 = b"4\x9d\xf9{\x88"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    bool_0 = True
    list_0 = [bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    int_0 = 2059
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    bool_0 = True
    str_0 = "+sFt/l%+#Z1"
    module_1.get_new_command(bool_0, str_0)


def test_case_75():
    pass


@pytest.mark.xfail(strict=True)
def test_case_76():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    bytes_0 = b""
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    float_0 = 815.6277
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    complex_0 = 2382.060205 - 3370.654086j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = "H@\x0c\x0b$8\\H+"
    module_0.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    bool_0 = False
    set_0 = {bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    str_0 = "RXh"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    int_0 = -3159
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    int_0 = -2047
    bytes_0 = b"B\xc4\x8aM\xde/\xdb\xa3\x83\xf0\x05Y\x1bH"
    module_1.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    str_0 = "XVd:9+1<#N&wgjSO@s'"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    str_0 = "7[*(J\x0c"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    int_0 = 4715
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    str_0 = "weta#\x0c4Y\\VD,s] d"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    int_0 = -7832
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    float_0 = -386.639
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    bool_0 = True
    object_0 = module_0.object()
    module_1.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    str_0 = "\n}\x0c.ke9_61[0[K#}`"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    none_type_0 = None
    bool_0 = False
    module_1.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    complex_0 = -656.131 + 485.4758j
    module_1.get_new_command(complex_0, complex_0)


def test_case_101():
    str_0 = "\x0c3$\to3FX\t.eSHFt"
    var_0 = module_2.urlparse(str_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    int_0 = 2265
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    bytes_0 = b"L\x16\xa0\x883\x18\x010\xdb\x9d\x15\xb5\x1f\xcaf\n"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    complex_0 = 194.32391 - 2198.3809j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    object_0 = module_0.object()
    list_0 = [object_0]
    module_1.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    bytes_0 = b"\xdb\\"
    set_0 = {bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    float_0 = -2048.326855
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    int_0 = -1966
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    str_0 = "ke_|Se\\=T8d"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_2.urlparse(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    int_0 = -2425
    module_1.match(int_0, int_0)


def test_case_112():
    pass


@pytest.mark.xfail(strict=True)
def test_case_113():
    bytes_0 = b" \x94b\x1f\xec\xd3\xca\x7fx\xcb\t\xd5w-^"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    float_0 = 674.619
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bool_0 = False
    str_0 = "~>B_o*x8)Qh/;~\x0c\r"
    module_1.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    set_0 = {var_0}
    module_1.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    list_0 = []
    object_0 = module_0.object(*list_0)
    none_type_0 = None
    module_1.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    str_0 = "2En,,U.o3qE3"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    float_0 = -355.38
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    int_0 = -742
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    int_0 = 422
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    complex_0 = 1627.2 - 102.920147j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    bytes_0 = b"i\x18\xef\xc8A\x9a\xbf\xfa"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    int_0 = -999
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    bytes_0 = b"\xee\xa6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = False
    module_1.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_129():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    str_0 = "}]Tx_"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    str_0 = "s=7\x0b\x0b#eg"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    str_0 = "[F\x0cv9|DS"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    float_0 = -1119.164555
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    bytes_0 = b"\x82\xb4\xe0J"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    float_0 = 469.0445
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    str_0 = "g"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    bool_0 = False
    module_0.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    bytes_0 = b"`\xaf\x91\xbbR\xfe\x92\xb7FH"
    module_0.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    str_0 = "xD/TM7d"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    str_0 = "/n-2?VXY_w45"
    set_0 = {str_0, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    str_0 = "n<\r*vqoLca?W"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    bool_0 = False
    int_0 = 2832
    str_0 = ")K+"
    tuple_0 = (bool_0, int_0, str_0)
    module_1.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    bool_0 = True
    tuple_0 = ()
    set_0 = {bool_0, tuple_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    int_0 = 565
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (list_0,)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    module_1.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = -5947
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    bytes_0 = b"a{\xaf\xa8(\xac4/d\xb6S\x05:\xc6|\x1d\xc7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    dict_0 = {}
    object_0 = module_0.object()
    tuple_0 = (dict_0, object_0)
    bytes_0 = b"\x92\xfar\xed\x96g\xee"
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    bool_0 = True
    bytes_0 = b"$\xd6\x11\x1e\xca\xea.\x17"
    tuple_0 = (bool_0, bytes_0)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    complex_0 = -1364.98003 + 3026.8j
    tuple_0 = (complex_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    float_0 = 956.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    bool_0 = True
    list_0 = []
    module_1.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    int_0 = 9
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    int_0 = -728
    list_0 = [int_0, int_0, int_0]
    int_1 = 3263
    module_1.get_new_command(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_158():
    str_0 = "Zj6#-=t03%Pa^g"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    bytes_0 = b"\x8cu,UL\x19\x9d$1)\xfd\xd3\xfa\xe1\xc0\xed"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    list_0 = [var_0, var_0, bool_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    str_0 = "H\x0c?x!AW3~ ZvOU\\D([zp"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    int_0 = -2084
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    bytes_0 = b"=t\x8e\xda\xc4f3cy\xa9\xa5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    str_0 = 'lC)S"zO~X]C:Eqa:'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    str_0 = "i>;iNA:\r<\x0cMh#=Eh\x0b"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    int_0 = -18
    list_0 = [int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    bool_0 = False
    float_0 = -469.59
    module_1.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    str_0 = "khw#="
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0, bool_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    complex_0 = -5315.5663 - 438.282j
    list_0 = [complex_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


def test_case_172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_173():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    tuple_0 = ()
    bool_0 = False
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    none_type_0 = None
    int_0 = 2131
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bool_0 = False
    bytes_0 = b"c\xfe\x07\xb2d\xe7#\xc1o\xa4\xbea{X\x9a\x13\xd8"
    tuple_0 = (bool_0, bool_0, bytes_0)
    list_0 = [tuple_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    bytes_0 = b"=tM\x05\x04gY\x94\xb1mc\xa6\xd7\xdeC\xceX"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    bytes_0 = b"\xe7\xb9JD\xf2\x19m\xa6$l\x9f\x18@\xd5\xc2"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    int_0 = 1519
    int_1 = -3018
    module_1.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_182():
    bytes_0 = b"qq\xce>\x8b\xe4"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    str_0 = "[!))uKd!0"
    module_1.get_new_command(str_0, str_0)


def test_case_184():
    pass


@pytest.mark.xfail(strict=True)
def test_case_185():
    str_0 = "]7\nP4J]w6hdmQ"
    int_0 = 1014
    tuple_0 = (str_0, int_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    int_0 = -4922
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    float_0 = 2333.80706
    module_0.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    bytes_0 = b"\xd3\xba\xd5\xae\xd5\x96\xff \xdf\xbe\xc0\x8d9\xb9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    int_0 = 2361
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    int_0 = 274
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    int_0 = 2755
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    float_0 = -4313.14967
    set_0 = {float_0, float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    float_0 = -598.08592
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    int_0 = 926
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    int_0 = 2368
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    float_0 = 265.946
    module_1.get_new_command(float_0, float_0)


def test_case_197():
    pass


@pytest.mark.xfail(strict=True)
def test_case_198():
    float_0 = 3307.22229
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    list_0 = []
    bytes_0 = b"\x85\xb2\xce\x00+\xbe\xabc\xe1\x03\xd8\xecUW\xa0"
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    str_0 = "gwb}1;H:+]oQy(/E{"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    int_0 = 190
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    complex_0 = 2631.236 + 2071j
    list_0 = []
    bool_0 = False
    tuple_0 = (complex_0, list_0, complex_0, bool_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    bytes_0 = b" \xe9"
    set_0 = {bytes_0, bytes_0}
    module_1.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    int_0 = 2637
    tuple_0 = ()
    list_0 = [int_0, tuple_0]
    module_1.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    none_type_0 = None
    bool_0 = False
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    bool_0 = True
    bool_1 = True
    module_1.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_210():
    float_0 = 1020.1
    bool_0 = False
    module_1.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    float_0 = 1299.09255
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    bytes_0 = b"\xd6P\x05e\x97\xbf\x9dC"
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bytes_0, bool_0, dict_0)
    module_1.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    bytes_0 = b"\xa7B\xc0"
    bool_0 = True
    bytes_1 = b"*3\x12\xdc\xb3\x1e\x97\x88@\xd4\xd7_*e"
    tuple_0 = (bytes_0, bool_0, bytes_1, bool_0)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bool_0 = False
    bool_1 = False
    float_0 = -310.9
    list_0 = []
    tuple_0 = (bool_1, float_0, bool_1, list_0)
    module_1.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    int_0 = 1940
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    tuple_1 = (tuple_0, dict_0)
    none_type_0 = None
    module_1.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    int_0 = 1187
    bytes_0 = b"$\xd0\x86_\xa50j6\xf9Ex"
    module_1.get_new_command(int_0, bytes_0)


def test_case_218():
    pass


@pytest.mark.xfail(strict=True)
def test_case_219():
    int_0 = 2481
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    str_0 = "EeP_#q#5\x0bm;Mda"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_2.urlparse(tuple_0, allow_fragments=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    float_0 = -815.928506
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bytes_0 = b"\x95\xf0)\\"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_224():
    pass


@pytest.mark.xfail(strict=True)
def test_case_225():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bytes_0 = b"\x9c\xb98\xe0>y\n\x9d\xa9\xf1\xbc"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    bytes_0 = b"\xbd\x90\xb5\x88\xb4\xee\xe6\xf9\xb2\xa5c\xf9\xd0\x12\xff\x88`a"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    float_0 = 1408.95551
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    bytes_0 = b"\x01\x8br\x13M,\xab\x9e\xd3\x15\xa4\x9fN\xce\x08"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    bool_0 = True
    dict_0 = {bytes_0: tuple_0, bool_0: list_0}
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    none_type_0 = None
    bool_0 = True
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    str_0 = "\r)>^[kRD,~qW+:Aw\n8"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    int_0 = 3069
    int_1 = 4405
    module_1.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_234():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    bytes_0 = b"{\xde\xfa\xde\xde\xaf\xb7\x1d\xad\x84\xad\x01sB\xa8>a"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    bytes_0 = b"a\xf0g])q\x9a"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    str_0 = "W^[4-~Wh~7\x0b%F$*"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    int_0 = -1994
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


def test_case_241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_242():
    float_0 = 1584.590731
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    float_0 = 1113.60895
    module_0.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    complex_0 = 119.93 - 786.6j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


def test_case_245():
    pass


@pytest.mark.xfail(strict=True)
def test_case_246():
    float_0 = -1742.14195
    complex_0 = 2088 + 2454.4848j
    module_1.match(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    int_0 = -848
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    list_0 = []
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    none_type_0 = None
    bool_0 = True
    module_1.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    int_0 = -504
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    tuple_1 = (bool_0, int_0, tuple_0)
    tuple_2 = (tuple_0, tuple_1, int_0)
    module_2.urlparse(tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_253():
    bytes_0 = b"ys\xc0\x11\rGEGW\xfc"
    float_0 = 912.8
    module_1.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    bytes_0 = b"\x07\xc7\x043\x1a\xaa\x9dn\xd0\xf4\xd8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    str_0 = "Iq|CSN<(cz*fs"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_1.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    bytes_0 = b"{\x80\xdd:"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    str_0 = ""
    var_0 = module_2.urlparse(str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    bool_0 = True
    module_2.urlparse(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    float_0 = 2099.3378
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    str_0 = "(tODU$\x0b?@%Fb}ss"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    int_0 = -2223
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (int_0, int_0, list_0, list_0)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    str_0 = "FvT\x0ck#Ydb#oxL+iz8MoK"
    bool_0 = True
    bytes_0 = b"&\xc1\x80+$\x16\xe9Se\t\x07~s\xb4\xe9\x02\xef#J"
    tuple_0 = (str_0, bool_0, bytes_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    bool_0 = True
    bool_1 = True
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_264():
    int_0 = -610
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    str_0 = "y@n!_*L#qE"
    dict_0 = {}
    module_1.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0, dict_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    bytes_0 = b"\xf6\x0f<\xa1\xa5<OT\xfa"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(bool_0, set_0)


def test_case_269():
    pass


@pytest.mark.xfail(strict=True)
def test_case_270():
    bytes_0 = b"\xed\xc0\xda\xa8\x18x\x1f\xe5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    str_0 = "W;f^02p!"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    bytes_0 = b"\xf0S\\\x04-\x80\xd2\xaeD\x1f\xeb8\x87\x08"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    int_0 = -481
    module_1.match(int_0, int_0)


def test_case_274():
    pass


@pytest.mark.xfail(strict=True)
def test_case_275():
    str_0 = "J+Gv('B\t|[5Eu]r"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    tuple_0 = ()
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    float_0 = 893.38219
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    str_0 = "az*E"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    bytes_0 = b"g\x0cc\x93\xb8\xf6\x8d\x95L\x01ZG&\xa9\xd3\xac\xdb\x10\x0bk"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    float_0 = -1442.74703
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    float_0 = -1685.1757
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    int_0 = -1777
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    str_0 = "8&9:MX"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [str_0, set_0, str_0]
    module_1.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    int_0 = 306
    str_0 = "7R#\re_+4IG;Q^!%7An["
    module_2.urlparse(int_0, int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    bytes_0 = b"!\xa1\xc4\x9c"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    str_0 = "W6<mx4u#*{%zN(w"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    str_0 = "43CJ`\nYl\n?vGy5y\r"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


def test_case_291():
    pass


def test_case_292():
    pass


@pytest.mark.xfail(strict=True)
def test_case_293():
    list_0 = []
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    str_0 = "9,v 6O|KyR4I"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_1.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_296():
    bytes_0 = b"\x0b\x92W\x80\xbc\x88L\xf1\xb6\xf95\x01\xb4\xf1C"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


def test_case_297():
    pass


@pytest.mark.xfail(strict=True)
def test_case_298():
    int_0 = -109
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    bytes_0 = b'\xd3\xcb\n\xa58\x0f\xf3\xf3\rG\xdb"p\xcd\x07H'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    int_0 = 1067
    module_1.get_new_command(int_0, int_0)


def test_case_301():
    pass


@pytest.mark.xfail(strict=True)
def test_case_302():
    str_0 = ";ap\nY8+xoay7"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    bytes_0 = b"M\xd9-\xf4|\xfe\xc2\x90\x0e\x0f\xe8\x11 \xa7\xc0\x80\x84"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    int_0 = 485
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


def test_case_306():
    pass


@pytest.mark.xfail(strict=True)
def test_case_307():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    bytes_0 = b"\x11r\xd5\x90L\xfe\x93D"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    bytes_0 = b"\x04SN\xd4\x89{E"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_312():
    int_0 = 5163
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    float_0 = 1131.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    int_0 = -641
    set_0 = set()
    tuple_0 = (int_0, set_0, int_0)
    module_1.match(tuple_0, int_0)


def test_case_316():
    pass


@pytest.mark.xfail(strict=True)
def test_case_317():
    str_0 = "\\5u\x0bAhP"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    str_0 = "6#%XCofFcT,^0o]g[RlS"
    bytes_0 = b"\x89\xad\xe1`M%"
    tuple_0 = (str_0, bytes_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    complex_0 = 4781.618 + 2075.98182j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    str_0 = ")"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    set_0 = set()
    list_0 = [set_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    int_0 = -1736
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    bytes_0 = b"\x98J\xc1G\xa6"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    int_0 = -1298
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    float_0 = 2304.91
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    float_0 = 3742.73279
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    int_0 = 1133
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    bytes_0 = b"\x851q\xfcrr\xbf\x17"
    float_0 = 1281.0
    dict_0 = {bytes_0: float_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    bytes_0 = b";\xc0\x8a\x90\xda\xe6\xba\xa9\xb3\x08\t"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_2.urlparse(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    bytes_0 = b"!CV\xefO"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    int_0 = 1949
    int_1 = 1845
    module_1.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_336():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    set_0 = {var_0, var_0, bool_0, var_0}
    list_0 = [set_0, bool_0, set_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    str_0 = "4#+ \rii_M+h"
    list_0 = [str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    float_0 = 657.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    dict_0 = {}
    var_0 = module_2.urlparse(dict_0, dict_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    float_0 = -542.3
    module_1.get_new_command(float_0, float_0)


def test_case_344():
    pass


@pytest.mark.xfail(strict=True)
def test_case_345():
    int_0 = 1074
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    int_0 = 2227
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    str_0 = "Hk"
    bool_0 = False
    list_0 = [bool_0, str_0]
    module_1.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    bytes_0 = b"D"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    complex_0 = 719.6505 - 1531.3737j
    module_0.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    bytes_0 = b"Q 4\x1fA\xf2\xafoW%\xc2\xc3\xe6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    float_0 = 1850.22
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_1.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    int_0 = -1013
    set_0 = {int_0, int_0, int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    tuple_0 = ()
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    set_0 = set()
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    int_0 = -126
    set_0 = {int_0}
    complex_0 = 821.955 + 2046.515294j
    module_1.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    float_0 = 1812.212
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"\xe9\x81\xd19B\xf9\xc7\xcd6\x15\xc5\x85\x9d\x8bo_\x1a\x15"
    list_0 = [dict_0, dict_0, bool_0, bytes_0]
    module_0.object(*list_0)


def test_case_359():
    pass


@pytest.mark.xfail(strict=True)
def test_case_360():
    float_0 = -1901.8395
    module_1.get_new_command(float_0, float_0)


def test_case_361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_362():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    complex_0 = -432.32 + 1576.63j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0, bool_0)
    module_1.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    int_0 = 1425
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    str_0 = "k0Jl5\\/&,v@8"
    tuple_0 = (str_0,)
    set_0 = {tuple_0}
    tuple_1 = (set_0,)
    module_1.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    float_0 = 21.6
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    bytes_0 = b"zM\xf0f\x08"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, tuple_0, bytes_0, tuple_0]
    str_0 = "{"
    str_1 = "b^VRaeR=`6YM<n ,~\n"
    dict_0 = {str_0: list_0, str_1: str_1}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    bool_1 = False
    set_0 = {tuple_0, tuple_0, bool_1}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    str_0 = ",c+EETfYU]BVCeaP"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    bytes_0 = b"~\xc1\xebY\x91]\xd6L\xd8\x02\x85\x84\x14x\xb3\x12\xda"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_373():
    pass


@pytest.mark.xfail(strict=True)
def test_case_374():
    bytes_0 = b"\xe73\n\xb0\xfeq"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b"\xcc\x1c\xbcK{\xda7\xa2D\xf7\xb1H\xefv{\xbc"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    int_0 = -1332
    tuple_0 = (int_0,)
    list_0 = [tuple_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    str_0 = ""
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    float_0 = 3432.2
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    str_0 = "QkgvNCptn(~v\\"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    float_0 = 1114.08345
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    float_0 = -729.68888
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    bytes_0 = b"\x98\xa7\x078~i\xf9E\x8d\xec)"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    none_type_0 = None
    int_0 = -616
    module_1.match(none_type_0, int_0)


def test_case_385():
    pass


@pytest.mark.xfail(strict=True)
def test_case_386():
    str_0 = " .0j1kR"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    complex_0 = 3812.62955 + 1923.60641j
    module_1.get_new_command(complex_0, complex_0)


def test_case_388():
    pass


@pytest.mark.xfail(strict=True)
def test_case_389():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    bool_0 = False
    int_0 = -2639
    tuple_0 = (bool_0, int_0)
    set_0 = {tuple_0, int_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    int_0 = -183
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    bytes_0 = b"\xeeU\x9fS1\x95\xbd\xcczi\xb6\xc1M\xd6\x0f\xd0\x0eF\xe4"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_393():
    pass


def test_case_394():
    pass


@pytest.mark.xfail(strict=True)
def test_case_395():
    str_0 = "#G/XS-W"
    set_0 = {str_0, str_0, str_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    bool_0 = False
    list_0 = [bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    bytes_0 = b"\x94\x13\xf6X\x98\x03\xb4r\xceZ\x1c\xcck\x99\xb0\x1fr"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = 75
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, none_type_0)
    list_0 = [var_0, none_type_0, var_0]
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    bytes_0 = b"\x81A\xc6\xae\xef\xe9k\xaa"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    bytes_0 = b"\xd6\\b\x8c\xbc\xd3\xd2t\xf7"
    none_type_0 = None
    module_2.urlparse(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    int_0 = 3865
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    float_0 = -1260.278501
    module_1.get_new_command(float_0, float_0)


def test_case_404():
    pass


@pytest.mark.xfail(strict=True)
def test_case_405():
    bytes_0 = b"\xa1_"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    float_0 = 465.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    str_0 = "/<Yq}&ZL\x0c BC"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    dict_0 = {}
    float_0 = 1941.71
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bytes_0 = b"O\xaf \x086P"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    object_0 = module_0.object()
    module_1.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    complex_0 = 405 + 2061.6j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    str_0 = "qs~V:UQF\x0c"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    int_0 = 384
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    int_0 = 602
    float_0 = 1030.341
    dict_0 = {int_0: int_0, int_0: float_0, float_0: float_0, float_0: float_0}
    module_1.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    float_0 = 681.094
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_1.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    bool_0 = True
    module_2.urlparse(bool_0, allow_fragments=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    str_0 = "6X\"!)8;OhA1+H9D?'t"
    module_1.match(str_0, str_0)


def test_case_422():
    pass


@pytest.mark.xfail(strict=True)
def test_case_423():
    bytes_0 = b"\xa0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = ()
    tuple_1 = (dict_0, tuple_0)
    module_2.urlparse(tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_424():
    str_0 = "\ngj_'nOx7T\".vznbFA"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    set_0 = {str_0, str_0, tuple_1}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    bool_0 = True
    float_0 = -2117.0
    module_1.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0, bool_0)
    set_0 = {var_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    float_0 = -1802.777
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    str_0 = "Aq<FjC0kWG4Kdj-Ro"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    int_0 = 636
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    str_0 = "!GY c:5$@za"
    set_0 = {str_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    float_0 = -2594.2
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    int_0 = -1880
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    int_0 = 1660
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


def test_case_434():
    pass


@pytest.mark.xfail(strict=True)
def test_case_435():
    object_0 = module_0.object()
    set_0 = {object_0}
    module_1.get_new_command(set_0, object_0)


def test_case_436():
    pass


@pytest.mark.xfail(strict=True)
def test_case_437():
    str_0 = "J2%sd@{~~v2{Yz"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    bytes_0 = b"\xbe+\x03IW\xa6\x080\xd40B\xe4,\xc6\xd8"
    set_0 = {bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    str_0 = "Z+^ii:\x0bNuht!^a-O.jJ("
    var_0 = module_2.urlparse(str_0)
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bytes_0 = b"\xca\xd8\xe8\xe7a\x05:o\x1f\xff$\x98\xc6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    float_0 = -692.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    int_0 = -447
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    bytes_0 = b"\xb5\xca\xe3M\x1e\xc5\xcc\x80Q\xeb\xcd`}"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    object_0 = module_0.object()
    none_type_0 = None
    module_2.urlparse(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    str_0 = "uh'UG="
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    bytes_0 = b"\x18\xc3\xc0`\x114\r;\xa9pN\xc0\xe6\x82\xcd"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    str_0 = "w'\\WMjG"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    float_0 = 4246.4
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    float_0 = 236.89793
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    bool_0 = False
    bool_1 = True
    object_0 = module_0.object()
    dict_0 = {bool_1: object_0, bool_1: bool_1}
    module_1.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    float_0 = -1373.75
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    object_0 = module_0.object()
    set_0 = {object_0, object_0, object_0}
    module_1.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    bytes_0 = b""
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = (tuple_0,)
    module_1.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    str_0 = "K"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    bytes_0 = b"0f5\xf8\xe3K\xf6*\xe4x\xb1\xc4\xae/\x15\xd4"
    object_0 = module_0.object()
    module_1.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    complex_0 = 4119.98 + 2605.6j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    str_0 = "|f('{|UheO"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    str_0 = "tqZYL4>\t>{].Ov@"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    complex_0 = 1370.516765 - 1620.8456j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "-15qST"
    tuple_0 = (list_0, str_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    float_0 = -1518.982005
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    int_0 = 650
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    bytes_0 = b"\x1a\x0c"
    list_0 = [bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    bool_0 = True
    bool_1 = False
    module_1.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_468():
    float_0 = 403.012
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    int_0 = -153
    module_1.get_new_command(int_0, int_0)


def test_case_471():
    pass


def test_case_472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_473():
    bytes_0 = b"\t\xd8\x82\xfe\xd8gq\xff"
    list_0 = [bytes_0]
    module_1.match(list_0, bytes_0)


def test_case_474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_475():
    int_0 = -2541
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    int_0 = -949
    complex_0 = 1924.55 + 348.155598j
    dict_0 = {int_0: int_0, complex_0: complex_0, complex_0: int_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    float_0 = -1091.366177
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    bytes_0 = b"\xb3\xb8w"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    bytes_0 = b"\xee\xbf5Y\xc4'wo\x98\xd1\xfa\xa1a\xe2\x809k\x95\x9bK"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    bytes_0 = b"\\\x89Q\xd4xY\xbbO%\xc7H\xf2\x8b\xb7\xdc\x82"
    str_0 = "k@d6\nAjd!u'pY\t"
    module_1.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = 2382
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    float_0 = 1755.190472
    set_0 = {float_0, float_0, float_0}
    list_0 = [float_0, set_0, float_0, set_0]
    list_1 = [list_0, list_0]
    module_2.urlparse(list_1, list_1, list_0)


def test_case_483():
    pass


@pytest.mark.xfail(strict=True)
def test_case_484():
    str_0 = "UqVVe'Cv|a\rr/e e"
    bool_0 = True
    bytes_0 = b"\x93"
    tuple_0 = (str_0, bool_0, bool_0, bytes_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    int_0 = -488
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    bytes_0 = b"[)\x94\xad"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    str_0 = "k\x0bt 2"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bytes_0 = b"O\xec\xc6\xf3\xc3\x1f\xd1\xa5\xeeR\xe2\xd2\xca\xc5\xd65z\xc8\xdb"
    set_0 = {bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    bytes_0 = b"OG\x99HZZ\x04\x80\x07\xbf\x82"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    float_0 = -900.97
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    float_0 = -314.5125
    tuple_0 = (float_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    bytes_0 = b"u\x9d3\xdfi}-\x87vm\x86.\x00\xa1\xef\x88\x06\xa4@\x9e"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    float_0 = 2647.06751
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    bool_0 = True
    float_0 = 3668.658186
    dict_0 = {bool_0: float_0, float_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    int_0 = 2886
    module_2.urlparse(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    set_0 = {var_0}
    int_0 = -689
    list_0 = [set_0, int_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    float_0 = -3242.9
    module_2.urlparse(float_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    str_0 = "f~TD"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    complex_0 = -1145.464 - 4788.1565j
    float_0 = 3910.4
    list_0 = [complex_0, float_0, complex_0, float_0]
    module_1.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    str_0 = "{{Q4ArF7$H)\x0c$GD6a\x0b[/"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    str_0 = '4>&h"x$R<jVKRkmcM/Dn'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    bytes_0 = b"\x93 \x8c"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    int_0 = 4353
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    none_type_0 = None
    set_0 = {none_type_0}
    module_1.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    bytes_0 = b"\x84\xf5"
    none_type_0 = None
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    int_0 = -2236
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    str_0 = "K-`A?%)&fVu`PryHuVP"
    bool_0 = True
    module_1.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    none_type_0 = None
    str_0 = "((hQKz.Xl}%K8H$y("
    str_1 = "k]Q"
    dict_0 = {str_0: none_type_0, str_1: str_0}
    module_0.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    bytes_0 = b"wc\xf2\xef\xed\xc8\xde\xf9U\xa5\xc9\xed\x8d+\xae>"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    complex_0 = -698.389531 + 469.5j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


def test_case_513():
    pass


@pytest.mark.xfail(strict=True)
def test_case_514():
    str_0 = "!)=Cs"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


def test_case_515():
    pass


@pytest.mark.xfail(strict=True)
def test_case_516():
    str_0 = "x@d\x0bKfD8+A8$[+b"
    var_0 = module_2.urlparse(str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    float_0 = 5563.368011
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    str_0 = "W5>}"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    bytes_0 = b'B\x13\x170\xbf\xff\xb09\x14s\xb8K\xfe\xdcd5\x17"'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    bytes_0 = b"!\xa0xZ\xa6\x83\xc3\xab\t\xff\x12(7\xfe\xba\xc1T\x97"
    module_1.match(bytes_0, bytes_0)


def test_case_521():
    pass


@pytest.mark.xfail(strict=True)
def test_case_522():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = 'L;7"w\x0b{3\x0b\r'
    str_1 = "\r\x0b:HVc"
    dict_0 = {str_0: list_0, str_0: bool_0, str_1: str_0}
    module_0.object(*list_0, **dict_0)


def test_case_523():
    pass


@pytest.mark.xfail(strict=True)
def test_case_524():
    str_0 = "~e(x0ZQ2ac$\x0c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    bytes_0 = b"\xd5\xba\x02f\xf91\x8b'G \xda,?\xc8\x8f/\xb5\x11j"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    bytes_0 = b"d\xb6PX^O\xe8\x12\xe2\xb3\xd8?\x04\x01\xbe};70"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    str_0 = '{[d\x0bV"V/'
    module_1.get_new_command(str_0, str_0)


def test_case_529():
    pass


@pytest.mark.xfail(strict=True)
def test_case_530():
    str_0 = "Q\t"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    str_0 = "qh3@<NA5bc6i;A\r12="
    str_1 = '_$uVhQ"e/"#'
    tuple_0 = (str_0, str_1)
    module_1.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_532():
    bytes_0 = b"\x02\xac \xd3\xcd\x11\xf6a2UbE\xab\xe1\xa2\xa1]5\xa8\xa7"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    str_0 = "uv3\x0c,H-H#sIeQj+.\te8\\"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    int_0 = -452
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    str_0 = 'P."w,"`Dd\''
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    dict_0 = {}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    int_0 = 827
    set_0 = {int_0, int_0, int_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    list_0 = []
    int_0 = -1836
    module_1.match(list_0, int_0)


def test_case_539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_540():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    str_0 = "*~0Z;v]\x0bZ"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    bool_0 = True
    set_0 = {bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    bool_0 = False
    tuple_0 = ()
    bool_1 = False
    tuple_1 = (bool_0, tuple_0, bool_0, bool_1)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    int_0 = 1537
    module_1.get_new_command(int_0, int_0)


def test_case_545():
    pass


@pytest.mark.xfail(strict=True)
def test_case_546():
    float_0 = 2311.506203
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    bool_0 = True
    int_0 = -299
    bool_1 = False
    tuple_0 = (bool_0, int_0, bool_1)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bytes_0 = b'\x83\xe7x\xf3u\x1e\xd0\xcd2!\x0f"3\xe6\x9f\xa2\x97\xa4G'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    int_0 = 74
    module_1.get_new_command(int_0, int_0)


def test_case_550():
    pass


@pytest.mark.xfail(strict=True)
def test_case_551():
    complex_0 = 2271.79117 + 1816.4j
    set_0 = {complex_0, complex_0}
    int_0 = 2176
    list_0 = [set_0, int_0, set_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    bool_0 = True
    str_0 = ""
    tuple_0 = (str_0,)
    tuple_1 = (bool_0, str_0, tuple_0)
    set_0 = {tuple_1, bool_0, tuple_1, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    bytes_0 = b"\x0bV\xae|JG\xb4M\xaaox\x0by%\xa0\xc9\xd9["
    int_0 = -373
    set_0 = {int_0}
    list_0 = [bytes_0, set_0, bytes_0, int_0]
    tuple_0 = (bytes_0, int_0, list_0)
    module_1.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    int_0 = -3682
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(set_0, int_0)


def test_case_555():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_556():
    str_0 = "A.yq:bB,Iz\rKN"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    str_0 = "C#gv{f!WRF6n&qY{y`b"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    str_0 = 'Kc)]pN"CtUj\rPw!Pp'
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    tuple_0 = ()
    list_0 = [tuple_0]
    tuple_1 = (list_0,)
    module_1.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_560():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    float_0 = 1135.343172
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    dict_0 = {}
    tuple_0 = ()
    module_1.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    bytes_0 = b"\x19\x9c\x14"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    int_0 = -1378
    module_1.match(int_0, int_0)


def test_case_565():
    pass


@pytest.mark.xfail(strict=True)
def test_case_566():
    str_0 = "q3{Gqsz'73U=6=U`"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    complex_0 = -3053 - 1220.246329j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    float_0 = -1295.727
    module_1.match(float_0, float_0)


def test_case_569():
    pass


@pytest.mark.xfail(strict=True)
def test_case_570():
    bytes_0 = b"m"
    float_0 = -2321.848
    module_1.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    complex_0 = -2089.854 - 4021j
    set_0 = {complex_0, complex_0, complex_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    int_0 = -1882
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_1.match(tuple_0, tuple_0)


def test_case_574():
    pass


@pytest.mark.xfail(strict=True)
def test_case_575():
    str_0 = "Io"
    float_0 = -594.0
    dict_0 = {str_0: float_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    none_type_0 = None
    module_0.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    int_0 = 239
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    complex_0 = -412.8393 - 1852.7j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    float_0 = -326.4
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    float_0 = 305.9
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    bytes_0 = b"\x844E\x01\xfd\x10/\xa6\xf3!]\xca\xbd\x9f\x90)\xee"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    int_0 = -1843
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    bytes_0 = b"C\xa6\x87\xc2\xeb\xab\x06K\xb4Y-JW\xb2\xd9G\xf3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    int_0 = -569
    tuple_0 = (int_0, int_0, int_0)
    bool_0 = False
    dict_0 = {int_0: bool_0}
    int_1 = 802
    dict_1 = {tuple_0: dict_0, bool_0: int_1}
    dict_2 = {}
    module_1.get_new_command(dict_1, dict_2)


@pytest.mark.xfail(strict=True)
def test_case_586():
    float_0 = -2464.227
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    complex_0 = -421.7057 - 2996.58698j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    int_0 = -1807
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    float_0 = 1447.688792
    module_1.get_new_command(float_0, float_0)


def test_case_591():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_592():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    int_0 = -3122
    tuple_0 = (int_0,)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    bytes_0 = b" "
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    str_0 = "2dR!eVg1-*7c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    bytes_0 = b"\x82\x85"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, dict_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    int_0 = 785
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    bytes_0 = b"\xa1e\xb2\x1d\x19v?\x80"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    bytes_0 = b"{\xc8ixz}\xe5|!\x83$\xb5\x00*<"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    int_0 = 1480
    list_0 = []
    object_0 = module_0.object(*list_0)
    module_1.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    bytes_0 = b"\xd2PI\xbcF"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    int_0 = 2931
    none_type_0 = None
    module_2.urlparse(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    bytes_0 = b"\xaf\xc6}\xb9\x05\xce|\xe2\x84?"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    float_0 = 2073.3
    module_1.get_new_command(float_0, float_0)


def test_case_607():
    pass


@pytest.mark.xfail(strict=True)
def test_case_608():
    int_0 = 1284
    module_2.urlparse(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    bool_0 = True
    module_2.urlparse(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    bytes_0 = b"\xcf@w\x03X\xc3I\xbb\xbdM)\xfc\xb1x\xea\xa0#\xb4\xaa\x01"
    int_0 = -1289
    bool_0 = True
    bool_1 = True
    tuple_0 = (bytes_0, int_0, bool_0, bool_1)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    str_0 = "R6#)7"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    float_0 = 3443.589159
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


def test_case_615():
    pass


@pytest.mark.xfail(strict=True)
def test_case_616():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    float_0 = -623.2
    tuple_0 = (dict_0, float_0)
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    str_0 = "b{\x0bx`NOkL{N\\].z\x0b"
    bool_0 = False
    list_0 = [str_0, bool_0, str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    bytes_0 = b"{n\xccq\xd5\xf1+\x13\xcb\xd4\x04"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    complex_0 = 1933 - 687.9175j
    module_1.match(complex_0, complex_0)


def test_case_621():
    pass


@pytest.mark.xfail(strict=True)
def test_case_622():
    str_0 = 'zQv"?SV$D}WFBr_j:`1'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    none_type_0 = None
    list_0 = []
    module_1.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    str_0 = "]{\r 8gYR$Tp$=*"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    bytes_0 = b"}\x14Z\xc9\x9f\x19\xe9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    str_0 = ":xS,2%\\fX\nZ>iAP4\x0b\re"
    bool_0 = True
    module_1.match(str_0, bool_0)


def test_case_628():
    pass


@pytest.mark.xfail(strict=True)
def test_case_629():
    int_0 = -1655
    bool_0 = True
    module_1.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    bytes_0 = b"%\xe5\xe6]?\xa1\x9f]\n1"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    float_0 = 2308.9
    tuple_0 = ()
    list_0 = [tuple_0, float_0, tuple_0]
    dict_0 = {float_0: list_0, tuple_0: list_0, float_0: tuple_0}
    tuple_1 = (float_0, tuple_0, dict_0)
    module_1.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.object(*list_0)


def test_case_633():
    pass


@pytest.mark.xfail(strict=True)
def test_case_634():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    set_1 = set()
    list_0 = [set_0, bool_0, set_1, set_1]
    module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    str_0 = "N#Gi9)3;Lc8?h$j'IDU"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    int_0 = 467
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bytes_0 = b"H\xaa\xd7]f\x92s\x81\xe3a\x02\x98\xcd\xfc\xe6"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    float_0 = 380.37
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    str_0 = ";PD.Im2/FN\t9"
    int_0 = -88
    tuple_0 = (str_0, int_0)
    module_2.urlparse(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    module_1.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    str_0 = "W|LMY1oty7J"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    complex_0 = -469.10061 - 258.9j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    bytes_0 = b"o\xdaf\xaaLk\xe1\xc8{\xe2\x0b\xa1mP"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    complex_0 = 40.8 - 408j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    module_1.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    complex_0 = -131 - 2566.9119j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    int_0 = -1656
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    int_0 = 2357
    object_0 = module_0.object()
    module_1.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    float_0 = -1310.23566
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    int_0 = 4726
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    str_0 = "t"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    bytes_0 = b'@\xb9m,\xef\xfc"$\xd1'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    module_1.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    str_0 = ":@[uRi-Lz@uP1Jmf>sw$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_1.get_new_command(tuple_0, bool_0)


def test_case_660():
    pass


@pytest.mark.xfail(strict=True)
def test_case_661():
    int_0 = 5913
    list_0 = [int_0]
    tuple_0 = (int_0, list_0)
    module_1.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    str_0 = "bx3j@>?o["
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    str_0 = "Ql5O)&V#queXT`oLOd"
    list_0 = [str_0, str_0, str_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    int_0 = -1859
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    str_0 = "@uN@Je&70/\x0cn|\\dae;"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    str_0 = ":+AQ[c(KN:Xf"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


def test_case_667():
    pass


@pytest.mark.xfail(strict=True)
def test_case_668():
    none_type_0 = None
    float_0 = 2581.02362
    tuple_0 = (float_0, float_0, float_0)
    module_1.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    bytes_0 = b"\x0f{\xd8\xe0&\xdbF\x8a4\x16\xa9\x95{\xf9\x1a\xd7\xfb\x8a\xef\xee"
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    dict_0 = {}
    dict_1 = {bytes_0: set_0, bytes_0: bytes_0, bytes_0: bool_0, bool_0: dict_0}
    module_1.get_new_command(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    int_0 = 359
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    bool_0 = True
    bytes_0 = b"[\x15"
    dict_0 = {bool_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bool_0)


def test_case_672():
    pass


@pytest.mark.xfail(strict=True)
def test_case_673():
    object_0 = module_0.object()
    dict_0 = {}
    module_1.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bytes_0 = b"\x7f\r\xf3"
    bool_0 = False
    module_1.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    bytes_0 = b"\xe1\xc8s\x02\x08\xb5\x8f_@yX"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    bytes_0 = b"\xb6w\xa0(\xf8\x1f0\x1a[\xdaX\xd5"
    set_0 = {bytes_0}
    module_1.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    str_0 = "JQIF>A"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    object_0 = module_0.object()
    int_0 = -894
    module_1.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    float_0 = -2131.244
    list_0 = [float_0, float_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    str_0 = "=[\nbp0R{[s"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    list_0 = []
    object_0 = module_0.object(*list_0)
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bytes_0 = b"\xad\x93"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    tuple_0 = ()
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    bytes_0 = b"\xab\xaej\xdd;\xff\xc8\x1c"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    bytes_0 = b"uu\xaf\xe3\xfa\xad\xfa\x1b^J*"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    str_0 = "ZPjYS+O$F`LJD"
    bool_0 = True
    dict_0 = {str_0: str_0, bool_0: str_0}
    list_0 = [dict_0, dict_0, dict_0, bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    int_0 = -160
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    str_0 = "I$^/E,'*"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_1.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    complex_0 = 450.599 - 900.381584j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    int_0 = -843
    module_1.get_new_command(int_0, int_0)


def test_case_695():
    pass


@pytest.mark.xfail(strict=True)
def test_case_696():
    float_0 = 1889.52
    module_1.get_new_command(float_0, float_0)


def test_case_697():
    pass


@pytest.mark.xfail(strict=True)
def test_case_698():
    str_0 = "''3@,G!#T9"
    list_0 = [str_0]
    module_1.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    bytes_0 = b"y\xa0\x94\xbf\x8f\xb4Ws\x81\xf5T\xf3\xba"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    float_0 = 3509.46621
    tuple_0 = (float_0, float_0)
    module_1.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    float_0 = -2038.0
    list_0 = [float_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    list_0 = []
    object_0 = module_0.object(*list_0)
    module_1.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    int_0 = 3251
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    bytes_0 = b"\xeb:\xb8\xb7a\x8c\xb3"
    module_1.match(bytes_0, bytes_0)


def test_case_707():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_708():
    int_0 = -4921
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    bytes_0 = b""
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_710():
    pass


@pytest.mark.xfail(strict=True)
def test_case_711():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    none_type_0 = None
    list_0 = []
    str_0 = "qnZ]'+(&2a]"
    tuple_0 = (list_0, str_0, str_0, list_0)
    module_1.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    float_0 = 1475.2
    bytes_0 = b"\xc5"
    module_1.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    bytes_0 = b"\x9a\xaa\x1f\x9a\x10X\xbeC\xe1\xb4\x04f\x08\x12\xdcvT\xdf\xeb\x95"
    module_1.match(bytes_0, bytes_0)


def test_case_715():
    pass


@pytest.mark.xfail(strict=True)
def test_case_716():
    int_0 = -1167
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    bool_0 = False
    str_0 = ""
    tuple_0 = (bool_0, str_0)
    module_2.urlparse(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    float_0 = 125.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bytes_0 = b"j\x8a[\x8f\x01\x1b\xae\xb3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    int_0 = -1478
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    bool_0 = True
    complex_0 = -349.52 - 1426.76j
    module_1.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    int_0 = 2942
    module_1.get_new_command(int_0, int_0)


def test_case_723():
    pass


@pytest.mark.xfail(strict=True)
def test_case_724():
    int_0 = 957
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    float_0 = 137.155
    module_1.get_new_command(float_0, float_0)


def test_case_726():
    pass


@pytest.mark.xfail(strict=True)
def test_case_727():
    bytes_0 = b"\xdb\x9dv-\x0f\xc8#"
    tuple_0 = (bytes_0,)
    module_1.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    int_0 = 158
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    bytes_0 = b"\xa7\xb8\x19{-9\x8c\xcb\xa4V\x12\x13\x05\x90u\xd6\x18\xe4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    list_0 = [var_0, none_type_0, var_0, var_0]
    module_1.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    bool_0 = False
    float_0 = 1812.7
    module_1.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    set_0 = set()
    tuple_0 = (set_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    bytes_0 = b"@/c\xed^\x87\xdb\xc2/\x0b_\x90(*\xa4\x11\xf0\xf5\xb5"
    set_0 = {bytes_0}
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    dict_0 = {}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    str_0 = "j7QC6]p@S\x0c]Uih2xek2\\"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, str_0)


def test_case_739():
    pass


@pytest.mark.xfail(strict=True)
def test_case_740():
    str_0 = "z836^<\nI#|uG=Uek\x0c\nv"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    bytes_0 = b"\x97X\t7\xa6"
    tuple_0 = (bytes_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    str_0 = "QOz"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    bytes_0 = b"\xaa\x812\x95He"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    bytes_0 = b"%\xba\x9b\x14\x1e\xc5\x9f~"
    list_0 = [bytes_0, bytes_0]
    module_1.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    int_0 = -1186
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    int_0 = -3435
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    bytes_0 = b"r\xa9\x0bv\xa3\xb8=\x8d\x14\x01\xb0\x99\x80aWO\xe2"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    list_0 = []
    object_0 = module_0.object(*list_0)
    object_1 = module_0.object(*list_0)
    module_1.get_new_command(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_1.match(tuple_0, tuple_0)


def test_case_753():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bytes_0 = b"\x1c\x99\xaf:G\n\x82\x19}t\x0f\xea\xd5\x0f\nP\xd7"
    set_0 = {bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    float_0 = -1350.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    int_0 = -965
    complex_0 = -4935.3 + 2592.6696j
    module_1.match(int_0, complex_0)


def test_case_757():
    pass


@pytest.mark.xfail(strict=True)
def test_case_758():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_1.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0]
    tuple_0 = (list_0, set_0, list_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    int_0 = -1657
    float_0 = 1712.7
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, float_0, float_0, dict_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    str_0 = ""
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    complex_0 = -363 - 1268.5j
    module_2.urlparse(complex_0)


def test_case_763():
    pass


@pytest.mark.xfail(strict=True)
def test_case_764():
    bytes_0 = b"\xb5*\x17\x07\xbe8T@d)\xf3\xbb\xcd\t64\xea\xf0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    float_0 = -947.386805
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


def test_case_768():
    pass


@pytest.mark.xfail(strict=True)
def test_case_769():
    int_0 = -4401
    dict_0 = {int_0: int_0}
    module_1.match(dict_0, dict_0)


def test_case_770():
    pass


@pytest.mark.xfail(strict=True)
def test_case_771():
    int_0 = 2292
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    complex_0 = -1265 - 305.573267j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    bytes_0 = b"\xf6\t{\x04\x16\x1cF|\x01t\xc1n"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    float_0 = 2143.62987
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    str_0 = "kD\t6_GiaVD'I2\t\t"
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    complex_0 = -2471.439 - 4391.293j
    list_0 = [complex_0, complex_0]
    module_1.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    int_0 = 3012
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    module_1.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_779():
    str_0 = 'C$@raX)Ku{dCrApd"r0i'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    str_0 = ".H5T')x;z(0b=V\x0bi"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    str_0 = "$K}C"
    bytes_0 = b"\x0c"
    module_1.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    bytes_0 = b"\xedM"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    float_0 = -67.046
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    int_0 = 2513
    list_0 = [int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    object_0 = module_0.object()
    list_0 = [object_0, object_0]
    module_1.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    int_0 = -850
    list_0 = [int_0, int_0]
    tuple_0 = (list_0, list_0)
    str_0 = "-.zjnCU\rQAMfNi"
    tuple_1 = (int_0, tuple_0, str_0)
    module_1.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    str_0 = "U[^G^Wg:"
    module_1.match(str_0, str_0)


def test_case_791():
    pass


@pytest.mark.xfail(strict=True)
def test_case_792():
    bytes_0 = b"\xa6\xd2BI\x9eAA,9\xd3\x91\x99\x81e=p\xad\x81"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    complex_0 = 3582 + 2135.1286j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    bytes_0 = b"V\xca\xaf\xb22+\xe0\x07\xac\xb6\x9d*"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    int_0 = 1638
    module_1.get_new_command(int_0, int_0)


def test_case_796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_797():
    int_0 = -650
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    float_0 = 1510.8203
    dict_0 = {float_0: float_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    str_0 = "z\n\reLr"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    bytes_0 = b"b\x9e\xe0\x103"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    dict_0 = {}
    int_0 = -1339
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    str_0 = "xM.V\rY"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    bool_0 = False
    int_0 = 2178
    module_1.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    float_0 = 2859.627656
    int_0 = -1607
    tuple_0 = (float_0, int_0)
    dict_0 = {}
    str_0 = 'z@D(%DblO"0x\t('
    list_0 = [str_0, str_0, int_0]
    str_1 = "1LI5K["
    tuple_1 = (tuple_0, dict_0, list_0, str_1)
    module_1.match(tuple_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_805():
    str_0 = "L)SRoM"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


def test_case_806():
    pass


@pytest.mark.xfail(strict=True)
def test_case_807():
    str_0 = "o\x0bA>O0P{|cpuO"
    str_1 = "~k/'lI^(]k+_YVa/O"
    str_2 = "f!"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_1: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    str_0 = "'8hjMv\tUD~3n5"
    module_1.get_new_command(str_0, str_0)


def test_case_809():
    pass


@pytest.mark.xfail(strict=True)
def test_case_810():
    int_0 = 2924
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    int_0 = 112
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    float_0 = 1440.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    str_0 = "E`T"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    int_0 = 1498
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    str_0 = "c\x0c%X"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    float_0 = -3449.044
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    str_0 = "V10\\|"
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    list_0 = []
    float_0 = 5105.12
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    bool_0 = True
    str_0 = "In"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    float_0 = 269.87142
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    float_0 = -2027.0938
    set_0 = {float_0, float_0, float_0, float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    str_0 = "w6~)Cu"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    str_0 = 'e&G"t^P"Xi4 OkAZ:'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


def test_case_826():
    pass


@pytest.mark.xfail(strict=True)
def test_case_827():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [str_0, str_0, dict_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    bool_0 = False
    float_0 = -2389.2
    dict_0 = {float_0: bool_0}
    list_0 = [float_0, dict_0]
    module_1.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    complex_0 = -1542 + 567j
    bool_0 = False
    module_1.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    float_0 = -548.9529
    dict_0 = {float_0: float_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    str_0 = "|IGFdZ[fd.LIU>Y"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    bytes_0 = b'^$\xd7\x9fM\xc4\x9f\xddE\xec\x06"MI\x84'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    bytes_0 = b"\x0b"
    list_0 = [bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    int_0 = 2879
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    str_0 = '"R p7u]Wx#4iu\x0b5h/+H '
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    bool_0 = True
    module_2.urlparse(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    str_0 = "~<So*"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    float_0 = 1529.53
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bytes_0 = b"\xf2\x82/\xb2\x05\x87\xcbFP!%\xc0\xcfC\x95\xa3\xd3\xda"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    bytes_0 = b"H\x04\xbe:\xe3I$O\x90|\x81\xe1\xad\x1e"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    float_0 = -154.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    str_0 = "q\x0c2xX;8cq[JY<`:t6Dr"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    str_0 = "Yh`2iH;PIKENl"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    float_0 = 875.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    float_0 = -353.238598
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    int_0 = -26
    tuple_0 = (int_0, int_0)
    str_0 = "`_I"
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    bytes_0 = b""
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    int_0 = -2350
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    int_1 = 2969
    list_0 = [int_0, int_0, int_1, int_0]
    list_1 = [dict_0, list_0, dict_0, int_0]
    module_1.match(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    complex_0 = -1211.8 - 2906.196j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    str_0 = "( R.3;Q?,"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    int_0 = -529
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    str_0 = "O8kc+&"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    none_type_0 = None
    bytes_0 = b'\x84\xc2"(\xb3zN:\xed\xb0}\xfc8\xb1\xfa\xc2-]w'
    module_1.match(none_type_0, bytes_0)


def test_case_856():
    pass


@pytest.mark.xfail(strict=True)
def test_case_857():
    str_0 = "1p"
    list_0 = [str_0, str_0, str_0]
    bool_0 = True
    tuple_0 = (str_0, list_0, list_0, bool_0)
    module_1.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    object_0 = module_0.object()
    module_2.urlparse(object_0, allow_fragments=object_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    int_0 = 1856
    list_0 = [int_0]
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    bool_0 = False
    list_0 = [bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    float_0 = -3364.4
    bool_0 = True
    set_0 = {float_0, float_0, bool_0, float_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    int_0 = 85
    int_1 = -891
    float_0 = -1178.505761
    set_0 = {int_0, int_0, int_1, float_0}
    module_2.urlparse(set_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    int_0 = -794
    list_0 = [int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    tuple_0 = ()
    var_0 = module_2.urlparse(tuple_0)
    module_1.get_new_command(var_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    int_0 = -510
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    str_0 = "e6hp=\x0bvf\\T"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    int_0 = -827
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    int_0 = -2687
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    int_0 = 3049
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    none_type_0 = None
    bytes_0 = b"v\x89U\x93\xa5\xb3\x96\x04\xc5~"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    float_0 = -1196.2
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    int_0 = -2595
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    str_0 = "2C\\#Lw+L..]7k^Ji\\XQN"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    none_type_0 = None
    str_0 = "f"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    bool_0 = True
    str_0 = "v%+y"
    tuple_0 = (str_0,)
    tuple_1 = (bool_0, tuple_0)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    int_0 = 561
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    complex_0 = -3073.5 + 573.853848j
    module_2.urlparse(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = 3868
    dict_0 = {}
    module_1.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0, allow_fragments=bool_0)
    set_0 = {var_0, bool_0, bool_0, var_0}
    module_1.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    module_2.urlparse(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    str_0 = "\n<-!u5\t-QSWFNTFv9in"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    int_0 = -335
    set_0 = {int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    bytes_0 = b"\x96\xbaxO:\xb3\x06\xda\x85\xf2\xe7\xf6"
    complex_0 = 298.47 - 4032.44j
    tuple_0 = (bytes_0, bytes_0, bytes_0, complex_0)
    str_0 = "R30+JcLiDd75i&_O{"
    bool_0 = False
    tuple_1 = (str_0, str_0, bool_0)
    module_1.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_890():
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, set_0)
    module_1.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    int_0 = -2565
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    float_0 = 694.9193
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    int_0 = -1416
    list_0 = [int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    str_0 = "\\/M"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    float_0 = -883.184
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    bytes_0 = b"\xb3Ja\xc2"
    list_0 = [bytes_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    str_0 = "L05`\x0b[-r"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    str_0 = "3U(QIwu]yC`:B"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    bytes_0 = b"Gp\x1e;\xe2\x80\xa7\xde\xd0\xaas\x19eo\x83|%"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    str_0 = "Y+"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    str_0 = 'yjx2\tMnd\x0c%"R'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    float_0 = 3747.78
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    int_0 = -907
    module_2.urlparse(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    dict_0 = {}
    object_0 = module_0.object(*dict_0)
    bool_0 = True
    dict_1 = {object_0: object_0, object_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    bytes_0 = b"j<\xc9\x8d\x0e\xc8\xa0\xbf\xe4\x14:"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    bool_0 = False
    float_0 = -2164.64
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: float_0, bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    float_0 = 4294.77
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


def test_case_909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_910():
    int_0 = 3459
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (int_0, list_0)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    str_0 = "1"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    float_0 = 4545.587694
    tuple_0 = (float_0,)
    bool_0 = True
    str_0 = "!3GmJw9KTGCe;)p"
    bool_1 = True
    tuple_1 = (tuple_0, bool_0, str_0, bool_1)
    module_1.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    int_0 = 1938
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    str_0 = "h%"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    bytes_0 = b"\xcbD\xa2\na\x1ey\xc6\xc1k\xea"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    bytes_0 = b"\xac\x13}\xd7\x99\xc3Lf\x11\x8f\xce"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_2.urlparse(dict_0, allow_fragments=bytes_0)


def test_case_917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_918():
    int_0 = 2411
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    int_0 = 1400
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    int_0 = 1473
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    float_0 = 114.04
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    float_0 = -1546.195605
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    str_0 = "n(b"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    float_0 = -1433.3
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    tuple_0 = ()
    int_0 = -1676
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    str_0 = "0b\r\\[8"
    float_0 = -1154.8253
    module_1.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    str_0 = "XBN^I\x0cz}^O:3&QP:N/"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    float_0 = 1567.7
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    str_0 = "3"
    dict_0 = {str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    bytes_0 = b"\xc5O\x02~\xb2\xe2\x1f1\x1a\xa6F"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    bytes_0 = b"~m7\xcc\xe1O\xcd\xcb\xcd\x8a\x02/"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    int_0 = 1962
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bytes_0 = b"\xa3_\x1d^z\xc63\xd7\x91"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    int_0 = -1107
    float_0 = 628.29897
    module_1.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    float_0 = -348.7053
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    float_0 = -2963.0
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    bytes_0 = b"\xc7\xd3\xdf\xfb\xdf%\xd5\xac@q\xfe\x80\xaf<\xb5n\x1e"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    bytes_0 = b"\x9cI\xaf\xcc\x8a\t\x0b6}-|j\xea$\xb1\x88\xc1\xf5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    bytes_0 = b""
    bool_0 = True
    str_0 = "DVW)r!+\tn%\x0bve3g+"
    dict_0 = {bytes_0: bool_0, bool_0: bool_0, bool_0: str_0, str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    str_0 = '\\"yxDu3?L<s[e*|\n'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    str_0 = "&'QtY"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    int_0 = 456
    bool_0 = False
    set_0 = set()
    tuple_0 = (int_0, bool_0, set_0, bool_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    str_0 = "?ql3tO`}Il-[puT"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    int_0 = 2456
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    str_0 = "qx`N]A2\x0c3km1"
    dict_0 = {tuple_1: tuple_1, tuple_1: str_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    bool_0 = True
    list_0 = []
    module_1.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    str_0 = "]\x0b7xL.LXG{W>"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    str_0 = "7$eX01WhN"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    int_0 = 372
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    int_0 = -409
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    bytes_0 = b"\xba}\xca#c\x90(la\x07\xda\x1cAp"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    int_0 = 297
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    bool_0 = True
    bytes_0 = b"u\xb2_\xe5m"
    tuple_0 = (bool_0, bool_0, bytes_0, bool_0)
    module_1.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    int_0 = 3838
    tuple_0 = (int_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    float_0 = 1926.01502
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    str_0 = "M{#V>\x0b?8mG,"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, tuple_0: str_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    complex_0 = 686.9565 - 1489j
    list_0 = [complex_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    str_0 = ""
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    str_0 = " ^Ni9U#e>?hoZo3<]"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    bytes_0 = b"C\x1d\xf9\xb0ur\xd2i2\xbe"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    module_1.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    float_0 = 4389.7
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0, float_0]
    module_1.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    float_0 = -60.27
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    str_0 = "\\2tztX9*.'bFtbR/F"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    bytes_0 = b"\x8e"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0]
    dict_0 = {}
    bytes_1 = b"\xae\xd1\x94\xa8D"
    int_0 = -847
    tuple_0 = (list_1, dict_0, bytes_1, int_0)
    module_1.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_967():
    bytes_0 = b"\xeb\xc9R\x95\xae\xff\t\x05\xd1c\x83YF"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    object_0 = module_0.object()
    none_type_0 = None
    module_1.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    int_0 = -2077
    module_1.match(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    int_0 = 3262
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    float_0 = 1345.67479
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    float_0 = 1326.47542
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    bytes_0 = b"\xe4\xaa:\xb8\xdd\xd2;\xd1\x85\xa6\x95\xc0\x07\xd5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    bytes_0 = b"Z\x14y\x18\xb9\xfd\x9c\x94"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    list_0 = []
    module_0.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    object_0 = module_0.object()
    none_type_0 = None
    module_1.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    float_0 = -1463.797
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    int_0 = 950
    module_2.urlparse(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    none_type_0 = None
    module_0.object(*none_type_0)


def test_case_980():
    pass


def test_case_981():
    none_type_0 = None
    int_0 = 1564
    var_0 = module_2.urlparse(none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    str_0 = "M5*\x0cMV\\u"
    var_0 = module_2.urlparse(str_0, str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    int_0 = 472
    module_1.match(int_0, int_0)


def test_case_984():
    pass


@pytest.mark.xfail(strict=True)
def test_case_985():
    bytes_0 = b"\xf3\xf1"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    str_0 = "x*Lc.ebJ<k0"
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    str_0 = "=:U2fG0_.7"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    object_0 = module_0.object()
    str_0 = "Yz"
    list_0 = [object_0, str_0]
    module_1.match(list_0, list_0)


def test_case_989():
    pass


@pytest.mark.xfail(strict=True)
def test_case_990():
    float_0 = -1528.67238
    module_2.urlparse(float_0, allow_fragments=float_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    bytes_0 = b"\x81\xfc\xe9\x16\x15$M\xd1@8\x98\xf2"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    none_type_0 = None
    int_0 = -2070
    module_1.match(none_type_0, int_0)


def test_case_993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_994():
    int_0 = 50
    module_0.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    str_0 = "&F(*?s`H}*+c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    float_0 = -807.558
    module_1.match(float_0, float_0)


def test_case_998():
    pass


@pytest.mark.xfail(strict=True)
def test_case_999():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    bytes_0 = b"O\xb9\xc2\x8e\x15H\x0b"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    str_0 = "=1z"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    str_0 = 'B`q9<@O"w(lD5W_tp'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    int_0 = 1309
    module_1.get_new_command(int_0, int_0)


def test_case_1004():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1005():
    int_0 = -756
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    str_0 = "qs\rc(>C|"
    tuple_0 = (str_0,)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    str_0 = "$zT<|<el"
    none_type_0 = None
    var_0 = module_2.urlparse(str_0, allow_fragments=none_type_0)
    list_0 = [var_0, none_type_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, list_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    bytes_0 = b"\xc9G\x9a4g\xac\xf5+\xd2S\x13m\x16\xf8T\x9c"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    float_0 = 1323.8
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    str_0 = "Qr"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    int_0 = -1232
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    bytes_0 = b"\x02\xae\x9d\x1b"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    str_0 = "I&)OpT!&Eii\tQgCs \x0b"
    set_0 = {str_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    float_0 = -605.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    bytes_0 = b":-\x06\x11\x16r\x9cg\xc6r\x8c\x9c\xe04)AC\x0b"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bytes_0 = b"z\xb2\xeb\xe0\xb2\x7f^\t\xb54\xb3\xf2S\xa2\x039l\xae\xeb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    bytes_0 = b"Z\xef\x99\x9a\t\xda\xd85r\x1aZ\x1e\x1d\xfd\xe7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    tuple_0 = (bytes_0, dict_0, bool_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    int_0 = -78
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    str_0 = "iELA:d"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    bytes_0 = b"\x80T\xa3]\x86\x13\xbeu9\x0f,"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


def test_case_1023():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bytes_0 = b"\xcfRE"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    none_type_0 = None
    bytes_0 = b"\xb5`l\\6\xca\xc1\xf8/"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    int_0 = -399
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    str_0 = "h`N(VEw"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    str_0 = "d#3"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    int_0 = 953
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    float_0 = 994.0
    tuple_0 = (dict_0, dict_0, float_0)
    module_1.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    dict_1 = {tuple_0: dict_0, tuple_0: dict_0}
    module_1.get_new_command(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    bytes_0 = b"3\xbc\xd3s\tCR\xef\xdf\xcdw\x8a\x9c\xb2\x82<"
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    bool_0 = False
    str_0 = "yK`BoYj}KF3x<R"
    list_0 = [bool_0, bool_0, str_0, str_0]
    list_1 = [list_0]
    module_1.get_new_command(list_1, str_0)


def test_case_1034():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1035():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    int_0 = -784
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    float_0 = -53.0142
    tuple_0 = (float_0,)
    bool_0 = True
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    int_0 = 1885
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    str_0 = "F|{LGd,A-\n?CDks$E"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    bytes_0 = b"m%c$"
    int_0 = 425
    str_0 = "#"
    bool_0 = True
    set_0 = {int_0, str_0, bool_0}
    tuple_0 = (bytes_0, int_0, str_0, set_0)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    str_0 = "kMC+G\x0b; [+B~<_\\AlE^D"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    bytes_0 = b"\xa6\xb5\\1\xdf\xa9B\xc1\xb7\xd1\xb3\xa47\xf9\xbd\xc0:"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    int_0 = 1639
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    int_0 = 425
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    bytes_0 = b",\xd9\xb9\x84\xe9T\xc3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = False
    tuple_0 = (bytes_0, list_0, bool_0)
    module_1.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    str_0 = "CERhFs"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bytes_0 = b"\xaa\xb3o#{"
    list_0 = [bytes_0, bytes_0]
    bool_0 = False
    bool_1 = False
    tuple_0 = (list_0, bytes_0, bool_0, bool_1)
    module_1.get_new_command(tuple_0, bool_1)


def test_case_1050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1051():
    bytes_0 = b"\x95\x1c\xd8U\xae`\x93\x15o"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    bytes_0 = b"\xebl\x1dR\x9b*\x08\xe4\xfb\xfb\x85\xfd6{\xee\x010=\xf90"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    str_0 = "x\x0cgA+l"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    int_0 = 4327
    set_0 = set()
    module_1.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    bytes_0 = b"\x1a$\x9d\x94\x84\xbf"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    int_0 = 2836
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    int_0 = -1274
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    float_0 = 1738.84
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    str_0 = "H$@Mj(\r9T1ABj(H"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bool_0 = False
    str_0 = "lj;OgyD?\x0b$M={Y_d'mF"
    tuple_0 = (bool_0, str_0, bool_0)
    tuple_1 = (bool_0, tuple_0, str_0)
    module_1.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    bytes_0 = b"\xd0\x0b\xcc\x92\xe0K\xc8'\xed\xa6\xab#\xc1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    float_0 = -4699.268
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    bool_0 = True
    bytes_0 = b"A^\x189$#\xa0Y"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    int_0 = 2255
    module_1.match(int_0, int_0)


def test_case_1065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1066():
    int_0 = -1336
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    float_0 = -2749.0
    module_1.match(float_0, float_0)


def test_case_1068():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1069():
    int_0 = -2687
    str_0 = "Rwccpq$;'gE"
    module_1.get_new_command(int_0, str_0)


def test_case_1070():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1071():
    bytes_0 = b"a\xed\t\xee\xbd\x8f\xce\xd56\xcb/WD"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    int_0 = -815
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    bytes_0 = b"/\x82\x958v[\xfe\x9e\xc8]"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_1074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1075():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    int_0 = -734
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    str_0 = "\\QqzY\x0c:W:vTmHp@V"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bytes_0 = b"\x0f@\xb9\xce/\xb1Y\xb4\x85"
    module_2.urlparse(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_2.urlparse(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    int_0 = 175
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    float_0 = -3073.326237
    list_0 = []
    list_1 = [float_0, list_0, float_0, list_0]
    str_0 = "d,i?:'<f(H\"j%\n"
    str_1 = ""
    dict_0 = {str_0: list_1, str_1: list_0}
    module_0.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    bool_0 = True
    module_2.urlparse(bool_0, allow_fragments=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    str_0 = "r>G"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    str_0 = "rfJLmlegg$\nC>NS"
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    int_0 = -446
    tuple_0 = (int_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


def test_case_1087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1088():
    str_0 = "4y\nD~H[Kg"
    set_0 = {str_0, str_0}
    module_2.urlparse(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    str_0 = "?|[lnfl0A # Zm)WQj"
    bytes_0 = b"S\xb4e\xc6P4e\x1er\xf0"
    int_0 = -6947
    list_0 = [str_0, bytes_0, int_0, int_0]
    tuple_0 = (bytes_0, bytes_0, list_0)
    list_1 = [str_0, tuple_0, bytes_0, list_0]
    module_1.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    str_0 = "J/>"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    str_0 = "UEBjM"
    list_0 = [str_0, str_0]
    module_0.object(*list_0)


def test_case_1093():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_2.urlparse(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    bytes_0 = b"\x16\x97\x9e\xc1"
    module_0.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    list_0 = []
    set_0 = set()
    tuple_0 = (list_0, set_0)
    str_0 = 'U=37MrU\trlKv2\tb"C]'
    tuple_1 = (tuple_0, str_0, set_0)
    module_1.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


def test_case_1098():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1099():
    bytes_0 = b"\xdd=9\x06n\xb6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_1.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bytes_0 = b"M\xcf \xbc\xc7\xe9"
    module_1.match(bytes_0, bytes_0)


def test_case_1102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1103():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    float_0 = 259.1
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    bytes_0 = b"a\xf0\x05\xc4M\xa7&\xe8P\xc4\xb58\xff"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    int_0 = -1625
    str_0 = "Supt<'{\x0cF5.ia;\tg"
    module_1.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    float_0 = -358.567
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    none_type_0 = None
    float_0 = -1555.84
    module_1.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    none_type_0 = None
    int_0 = -2821
    set_0 = set()
    list_0 = [none_type_0, int_0, set_0, none_type_0]
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    float_0 = 1874.017
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    str_0 = "[.U/I*\\(u\t^v+"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    float_0 = -3373.0
    set_0 = {float_0}
    str_0 = "\x0c<-"
    tuple_0 = (set_0, str_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    str_0 = "GsklY )"
    dict_0 = {str_0: str_0}
    module_1.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    float_0 = -615.1144
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    int_0 = 2598
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    bytes_0 = b"\x9aW\xb6\xfe\xed\xb4\x15\r\xa5\x04\xf7{\x07\x8bX\xb3>Xo"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    int_0 = -1023
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    complex_0 = 167 + 4300.27j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    str_0 = "=R'goPSUGRGd/u"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    int_0 = -1580
    str_0 = "p"
    module_1.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    list_0 = []
    var_0 = module_2.urlparse(list_0)
    module_1.get_new_command(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    bytes_0 = b"\x17\xdac\xc1\x99"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    int_0 = 1579
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    int_0 = 443
    module_2.urlparse(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    int_0 = 1914
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    int_0 = 818
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(bool_0, list_0)


def test_case_1130():
    pass


def test_case_1131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1132():
    list_0 = []
    list_1 = [list_0]
    module_2.urlparse(list_1)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    float_0 = 255.8494
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    int_0 = -2468
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    str_0 = '@?"v\n[:['
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    bool_0 = True
    str_0 = 'w8\r$2q" <oM$gg\x0c_rW'
    set_0 = {bool_0, str_0, bool_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    dict_0 = {}
    str_0 = "F\\NhPe+'Z#8u"
    module_1.get_new_command(dict_0, str_0)


def test_case_1139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1140():
    complex_0 = 2814.02749 - 2174.016948j
    bool_0 = False
    bool_1 = False
    set_0 = {complex_0, bool_0, bool_1, bool_0}
    module_2.urlparse(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    int_0 = -449
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    int_0 = -3161
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    float_0 = 1878.84
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    bool_0 = False
    module_1.match(bool_0, bool_0)


def test_case_1145():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1146():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    int_0 = -173
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    str_0 = "DZ]@W:lRM@I"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    str_0 = "]$FV"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    int_0 = 3468
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    bool_0 = True
    bool_1 = True
    bytes_0 = b"\x80\xab\xcaD"
    tuple_0 = (bool_0, bool_1, bytes_0, bytes_0)
    bytes_1 = b"/\xea\xb3\x06\x18v1\xce\xda\xc0\xabf\xd3\tN"
    module_1.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    str_0 = "W9^J?"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    int_0 = 1586
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


def test_case_1154():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1155():
    str_0 = "6\nL!.I4yV{}P"
    set_0 = {str_0, str_0, str_0}
    module_1.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    list_0 = []
    object_0 = module_0.object(*list_0)
    dict_0 = {object_0: list_0}
    int_0 = 460
    tuple_0 = (dict_0, list_0, list_0, int_0)
    module_1.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    int_0 = -1135
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    tuple_1 = (tuple_0,)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    str_0 = "3g\n~z3p;"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    bytes_0 = b"(\xb3\xa0\xd2\xa26\x9e\x0b\x0e\x80_\xf8x\x10\xa7y{)"
    int_0 = -2167
    module_1.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    float_0 = -1158.4273
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    str_0 = "LtG"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    list_0 = []
    object_0 = module_0.object(*list_0)
    set_0 = {object_0, object_0}
    module_1.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    object_0 = module_0.object()
    list_0 = [object_0, object_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    str_0 = "k\x0b_!2U}"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    complex_0 = -933.493297 + 1078j
    module_2.urlparse(complex_0, allow_fragments=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    bytes_0 = b"d\x14"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    dict_0 = {}
    var_0 = module_2.urlparse(dict_0)
    str_0 = "FE'##($"
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    int_0 = 1169
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    float_0 = -730.71839
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    list_0 = []
    bool_0 = False
    list_1 = [list_0, list_0, bool_0]
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, dict_0)
    tuple_1 = (list_1, bool_0, bool_0, tuple_0)
    module_1.match(tuple_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    dict_0 = {}
    module_1.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    float_0 = -808.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    str_0 = "\\'+\n@SMW&)UOs1\x0bW:W*"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    list_0 = []
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_1.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    complex_0 = 2027.65943 + 2266.3j
    tuple_0 = ()
    dict_0 = {complex_0: complex_0, tuple_0: complex_0, complex_0: complex_0}
    int_0 = -1188
    bool_0 = False
    bool_1 = True
    tuple_1 = (dict_0, int_0, bool_0, bool_1)
    bytes_0 = b'\x9e\x87\x82u\xf1M\xb0\x99\xd7\xc1\x03"z\xfeR'
    module_1.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    int_0 = 543
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    bytes_0 = b"2d\xd6\x937\xb8\x99K.\xa7\x9b\xf3\xbf\x9c*\xf9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    str_0 = 'kO6(l1"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0, dict_0, str_0, str_0)
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    str_0 = "8\r;41V\tY[JoJ]"
    module_1.get_new_command(str_0, str_0)


def test_case_1185():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1186():
    int_0 = -1845
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    str_0 = "l4JF3v-bwj5"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    float_0 = -95.4784
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    str_0 = "YX"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    int_0 = -4106
    tuple_0 = (int_0, int_0)
    tuple_1 = (tuple_0,)
    module_1.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    str_0 = "\x0bg4rD^nA^7}L?E0>o& "
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    bytes_0 = b"\x83\xdf"
    list_0 = [bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    bytes_0 = b"jdV\xc5~/\xb3\xe5\x16c>32\x95\xcf\xba\xad\xea"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bytes_0 = b"*(\t\x01\x81\xff\xfb\x19\xb2\xd8\xd2CoE\xca\xf7\\"
    module_0.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    bytes_0 = b"\x05Ytzd\x15\xd7B\xf9l\xba\x01p"
    set_0 = {bytes_0, bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    int_0 = 1440
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, int_0]
    module_1.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    int_0 = -1519
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


def test_case_1198():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1199():
    dict_0 = {}
    list_0 = [dict_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    str_0 = "7\\\x0c))hu<Z"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    int_0 = -1222
    list_0 = [int_0]
    tuple_0 = (list_0,)
    module_2.urlparse(tuple_0, allow_fragments=int_0)


def test_case_1202():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1203():
    str_0 = "=\ta_OuC#%~CZ\t750gFW"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    float_0 = -374.5
    list_0 = [float_0, float_0, float_0]
    complex_0 = -1605.2828 - 1448.3396j
    list_1 = [list_0, list_0, complex_0]
    module_1.get_new_command(list_1, float_0)


def test_case_1205():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1206():
    float_0 = 1955.0
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    int_0 = 2353
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    float_0 = 2012.366
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    int_0 = 877
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    int_0 = -3474
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    str_0 = " |y."
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_1.get_new_command(list_0, bool_0)


def test_case_1214():
    pass


def test_case_1215():
    pass


def test_case_1216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1217():
    str_0 = "9~U`)hHO}Jj"
    float_0 = -33.4
    module_1.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0, bool_0, bool_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    int_0 = -1873
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    str_0 = "1t1TN;Z"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    object_0 = module_0.object()
    module_2.urlparse(object_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bytes_0 = b"\xd8\xb7\x00\xd2\xe3\xa4\xff\x9dc\xba%\xff\xad\xee\xc1\x0f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    bytes_0 = b"(\x1e_\x85\x1aM\x99\xf1S\x19b\x91\xb55}"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0]
    bytes_1 = b"\xed\xe4\xc9w\xf4\xd7j\xb8\xba\xd5\xb0\x80\x8d\xca"
    float_0 = 1490.9
    tuple_0 = (list_0, bytes_1, float_0)
    list_1 = [tuple_0]
    module_1.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    none_type_0 = None
    bytes_0 = b"S\xe3\x9a\x9c\xcf\x024C\x10s\x1ff)QU\xc0c\x04"
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    bytes_0 = b"\xa9\xf9:q\x17q\xbc"
    list_0 = [bytes_0]
    module_1.match(list_0, bytes_0)


def test_case_1226():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1227():
    float_0 = -2262.0
    module_1.get_new_command(float_0, float_0)


def test_case_1228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1229():
    bool_0 = False
    float_0 = 3822.07
    set_0 = set()
    tuple_0 = (bool_0, float_0, set_0)
    module_1.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    bytes_0 = b"\x08\xf4_\xe1\xf7\xd4\xb4\x96\xf0"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bytes_0 = b"sG\xf7\x1c\x01\x8a\xa8\xb7,\x8cMQ\xb7\x7f\x8c\xdc\x9e"
    int_0 = -1915
    module_1.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    float_0 = -1486.54
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    bytes_0 = b"\xb0*\xcb\xe2?"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    float_0 = -3265.9
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bool_0 = False
    list_0 = [bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    bytes_0 = b"\x1eo"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0]
    module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    float_0 = 1549.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    int_0 = -646
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b"\xaa\xba\xc9\x7f\x86\x9f\xe9O}\x9b\x9a"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    bytes_0 = b"\xb7Y\xc7\xb3"
    bytes_1 = b"\xdd}f\x8b<;\x04\xa8\x19\xb4#\x8b\x86\xaa;\x83x"
    module_1.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    int_0 = 3683
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    str_0 = "gtkIlYUhp %Hk"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    str_0 = "ncv!2\nF\n/"
    str_1 = "ah"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_0: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    int_0 = 1568
    list_0 = [int_0]
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"<h\x93O\xa0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    bytes_0 = b"\x83\x18i\x9dt\x98\xbf\xa1\xaaUKa\x9f\xee\xbe\x005\xb6|\x13"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    int_0 = 1450
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    str_0 = "\x0bA="
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    str_0 = "V\n=\t=C=u*"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    bytes_0 = b"\xd81\xab"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bytes_0 = b"h\x95\xf3\xcfC\x96\x96\xd5\xc9!\xc2\xd6\xdb\xa4\x9a\xf3&"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    bool_0 = True
    bytes_0 = b"U\xff\xc5\xdbF\xfc\x80\t\x8d!\xc2"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    bytes_0 = b"Z_M\xf0\xe4\x04\x1f\x00\x1f\xc5E"
    set_0 = {bytes_0}
    list_0 = [set_0, set_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_2.urlparse(tuple_0, allow_fragments=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bytes_0 = b"\xf7r\xb5\xcf\xcfr;\x84\xb5\xe8"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    int_0 = -503
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    str_0 = "~$Spj3qU?q"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = False
    bytes_0 = b"u\xe7'\xdf\xe0u3"
    tuple_0 = (bool_0, set_0, bool_1, bytes_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    str_0 = "hun2\\5.aS!7Y\r08vJ#h"
    var_0 = module_2.urlparse(str_0)
    dict_0 = {var_0: var_0, str_0: var_0, str_0: var_0, var_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    complex_0 = 1700 + 186.7697j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    int_0 = -372
    module_1.match(int_0, int_0)


def test_case_1264():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1265():
    object_0 = module_0.object()
    set_0 = {object_0, object_0, object_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    str_0 = "5L?fGQ3e|lWYy"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    int_0 = -1586
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bytes_0 = b"\x06\xa5\xd9\x94\x0f=\xd4\xa3\x84\x82\x86\x05\x90Z"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    float_0 = 2000.05
    list_0 = [float_0, float_0, float_0]
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    bytes_0 = b"\xd9\xb2#-\xf5n\xb8?\xf9\x07"
    list_0 = []
    int_0 = 1422
    bool_0 = False
    str_0 = 'L"C;BdoO`BN'
    bool_1 = False
    tuple_0 = (int_0, bool_0, str_0, bool_1)
    tuple_1 = (bytes_0, list_0, tuple_0)
    module_1.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    bytes_0 = b"\xf3\x87\xdb\x9e \xd6'\x95\x1aA7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    int_0 = 1456
    module_2.urlparse(int_0)


def test_case_1277():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1278():
    complex_0 = 1455.416 + 251.716j
    int_0 = -1098
    tuple_0 = (complex_0, int_0)
    module_1.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    complex_0 = -181.24364 - 1155.3j
    int_0 = 2332
    complex_1 = 2482.05698 - 710.073j
    tuple_0 = (complex_1,)
    tuple_1 = (complex_0, int_0, tuple_0)
    module_1.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    object_0 = module_0.object()
    module_0.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    int_0 = 911
    set_0 = {int_0, int_0}
    module_1.get_new_command(set_0, int_0)


def test_case_1282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1283():
    object_0 = module_0.object()
    module_1.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    float_0 = 1259.5933
    list_0 = [float_0]
    list_1 = [float_0, float_0, list_0]
    bytes_0 = b"\xb7\x0e\x0b\xe5L\x1b\xc4\xef0\x82\xa0\xf4\xa2\xcc"
    module_1.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    int_0 = -708
    tuple_0 = (int_0,)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    int_0 = 1036
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    bytes_0 = b""
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    int_0 = -250
    bytes_0 = b"\xc7\xae\xf7\x18:r\x05Q5`ES\x82"
    module_1.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    int_0 = 5186
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    str_0 = '\x0b\t@7rGq")LtK'
    module_1.match(str_0, str_0)


def test_case_1292():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1293():
    float_0 = -3770.939046
    module_1.get_new_command(float_0, float_0)


def test_case_1294():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1295():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bytes_0 = b"='\x18\x0cw6/K\xa2\\.\xc8\x01=_\x860\xb2"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    int_0 = 1800
    str_0 = "D"
    list_0 = [int_0]
    dict_0 = {int_0: int_0, str_0: list_0, str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bool_0 = True
    bytes_0 = b"\xbd\xcb\x9d\x0b\x04\xdaI:]u\\\x93\x0e\\\xea"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    float_0 = -1927.278085
    module_0.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    str_0 = "T4l+I v"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    str_0 = "eP~"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    bytes_0 = b"\xc8\xfb\xe5W\x14\x9a+\xfd\xd70\xa4\xb9\x00"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    str_0 = "?d#.N=7og^D-"
    list_0 = [str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    int_0 = 2054
    module_1.get_new_command(int_0, int_0)


def test_case_1306():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bool_0 = True
    int_0 = -104
    bool_1 = True
    tuple_0 = (bool_0, bool_0, int_0, bool_1)
    list_0 = [tuple_0, int_0, bool_1]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    int_0 = 1187
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    float_0 = 1716.9691
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    float_0 = -3202.72
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    float_0 = 3249.13809
    list_0 = [float_0, float_0, float_0]
    module_1.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    str_0 = "TQj\nN5Q"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    bytes_0 = b"3\xba\x0c"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    str_0 = "+M*\n_"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    int_0 = 1350
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    int_0 = 1530
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    float_0 = -1302.62
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    complex_0 = -1584.45 + 670.59593j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    int_0 = -285
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    float_0 = 1924.0
    int_0 = 853
    module_1.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    str_0 = "2WD3GZ={f0do_xo"
    set_0 = {str_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    bytes_0 = b"\xd2+\xa1K\xe2\xad\xd4+"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    int_0 = 1119
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    str_0 = 'E2!\rS"dJ&'
    list_0 = [str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    str_0 = ",{'L4L\x0cP!jokpQ"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    int_0 = -209
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    str_0 = "W0~1w*"
    none_type_0 = None
    module_2.urlparse(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    int_0 = -345
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    str_0 = "-*E4|"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    str_0 = "#r=@\nYc88@"
    list_0 = [str_0, str_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    float_0 = 2294.7889
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_1.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    bytes_0 = b"\xd8\xdc29"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    list_0 = []
    tuple_0 = (list_0, list_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0]
    module_1.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    complex_0 = 2563.2 - 1701.3j
    set_0 = {complex_0}
    list_0 = [set_0, set_0, set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    int_0 = -131
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    int_0 = -2050
    list_0 = [int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    int_0 = -1344
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bytes_0 = b"\x1d\xbe4\x06"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    float_0 = -250.469
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    set_0 = set()
    list_0 = [set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bool_0 = True
    module_2.urlparse(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    bytes_0 = b"|\x89H\xc8\xe1\xe9\xbb\xd8\xa5\x1c.\x88\xfb4\x1e\xc5\x93\xc5"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    str_0 = "_a`3"
    module_1.match(str_0, str_0)


def test_case_1348():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1349():
    bool_0 = False
    str_0 = "NOo0!KtvBJ\x0b1o-\nz-YC6"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = '&="rq1w]TJ\x0cm3@TNaN@5'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    int_0 = -3431
    list_0 = [int_0, int_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    str_0 = "J=(V*Y4vvQ"
    str_1 = "$E[*\x0cI"
    dict_0 = {str_1: str_1, str_0: str_0}
    str_2 = "_r_x8\r8;"
    dict_1 = {str_0: str_0, str_1: dict_0, str_2: str_0}
    module_0.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bool_1 = False
    bytes_0 = b"4*\x98\x8f\xda\x1dg\xa3S\xd8<"
    list_0 = [bytes_0, bool_1]
    tuple_0 = (bool_0, dict_0, bool_1, list_0)
    module_1.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    str_0 = "Nj\t\x0b"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    str_0 = '8T\x0b"1(}:c$\n\x0b'
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    int_0 = -214
    module_1.get_new_command(int_0, int_0)


def test_case_1357():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bytes_0 = b"\xb2\xef\x97\x9eH\xf2\xd4\x01>\xa4\xdb\x9b\xb8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    str_0 = "a;#x!L!#k"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    int_0 = -205
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    bool_0 = False
    none_type_0 = None
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    tuple_0 = (list_0, dict_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    float_0 = -779.777
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    str_0 = "yeHUTjE,O"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    int_0 = 1476
    module_1.get_new_command(int_0, int_0)


def test_case_1366():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1367():
    list_0 = []
    bytes_0 = b"\xbc2"
    module_2.urlparse(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bytes_0 = b"\xa0X\x89\xcaL\x92"
    set_0 = {bytes_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    str_0 = "Z\x0b/pA#r;2ox<vU"
    set_0 = {str_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    complex_0 = 24.72618 + 87.83326j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    str_0 = "'R"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bytes_0 = b"\xb7PI"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    bytes_0 = b"\xd9\xd1\x06<~"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    bytes_0 = b"\x7f\x06\x08m\xe1y\xdc\xa7mi\x9d\x11\x94A\xad\x9c\xde\xe5\x02\x19"
    bytes_1 = b"\x17\xc2\x97\xa4u\x88\xe1\x8c\xbf\xbd\xa4"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_1, bool_0)
    list_0 = [tuple_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    str_0 = "H*hD\r7%l){dR1|o"
    tuple_0 = (str_0,)
    list_0 = []
    tuple_1 = (tuple_0, list_0)
    module_1.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (list_0,)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    str_0 = "u{X"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    bytes_0 = b"\x05\xeeV\xa4\xf1\xa8~0\x97e\x06"
    list_0 = [bytes_0]
    dict_0 = {bytes_0: list_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    none_type_0 = None
    module_0.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    int_0 = 207
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    int_0 = -2417
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    int_0 = -471
    module_1.get_new_command(int_0, int_0)


def test_case_1383():
    complex_0 = 101.08292 + 926.768j
    float_0 = -142.074352
    bool_0 = False
    bool_1 = False
    tuple_0 = (complex_0, float_0, bool_0, bool_1)
    list_0 = [tuple_0, bool_1, bool_1]
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, list_0)


def test_case_1384():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1385():
    int_0 = 625
    tuple_0 = (int_0, int_0)
    bool_0 = False
    list_0 = [tuple_0, int_0, bool_0, int_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    complex_0 = -658.3 + 863.647485j
    set_0 = {complex_0, complex_0, complex_0}
    bytes_0 = b"\x13\x1cb\xec\xb0\xa7"
    list_0 = [set_0, set_0, bytes_0, set_0]
    int_0 = -4858
    tuple_0 = (complex_0, set_0, list_0, int_0)
    none_type_0 = None
    module_1.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    float_0 = 5113.733
    dict_0 = {}
    tuple_0 = (float_0, dict_0)
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    str_0 = "hxh{!nQ\x0c4ZCZ<0q"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    int_0 = 2157
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    str_0 = "$/wVS5"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    object_0 = module_0.object()
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    float_0 = 1444.301915
    none_type_0 = None
    module_2.urlparse(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    int_0 = -2776
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    int_0 = -2181
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    complex_0 = 1033.306177 + 387j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    complex_0 = -2677.3 + 2379j
    module_2.urlparse(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    bytes_0 = b";\xdb\xa9A"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    str_0 = "x)PqKVYLY]"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    str_0 = "'J /~(\t"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    str_0 = "M\\\x0c\n-$)pXm&J^J"
    none_type_0 = None
    str_1 = ""
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    bytes_0 = b'j8\xd7\x8c7\xa1"\xfc\x85\x88\xd63\xe6'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    bool_0 = True
    bytes_0 = b"t\xab\xdf\xf6\x08@\xca\xc9v\xa9\xe8\xf7\xccZ\x8ec\x93Bt"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    module_1.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    float_0 = 9.25478
    tuple_0 = (float_0,)
    str_0 = "*IQ~mo]+YTmZ"
    tuple_1 = (tuple_0, str_0, float_0)
    module_1.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    str_0 = 'p~\x0cj}FI1FSz) @w"f'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    none_type_0 = None
    module_0.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    bytes_0 = b"\xd1\xf0k\x97\xb2\x97\xcekd\xd6\xb8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    float_0 = 2958.208044
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    int_0 = -1470
    module_1.get_new_command(int_0, int_0)


def test_case_1412():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1413():
    object_0 = module_0.object()
    bytes_0 = b"c/Fg\x00\xb1"
    list_0 = [object_0, bytes_0]
    module_1.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    int_0 = 411
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    complex_0 = 1619.14 - 197.44j
    bool_0 = False
    set_0 = set()
    tuple_0 = (complex_0, bool_0, set_0)
    bool_1 = False
    list_0 = [tuple_0, bool_1, set_0, set_0]
    module_1.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    complex_0 = 3698.216 - 2404.973j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    int_0 = -1184
    module_1.get_new_command(int_0, int_0)


def test_case_1418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1419():
    str_0 = "QuXz"
    list_0 = [str_0, str_0]
    str_1 = "!4y"
    bool_0 = True
    dict_0 = {str_1: bool_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bytes_0 = b"\x10'\x16\xa2\xb86Wd\xfd1\xd6\xd4L\x16hf"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_1422():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_1423():
    str_0 = "\t*.R#"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0, allow_fragments=bool_0)
    list_0 = [var_0, bool_0, var_0]
    tuple_0 = (list_0, bool_0, var_0)
    bool_1 = True
    module_1.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    complex_0 = 265.53691 - 205.4357j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    bytes_0 = b"GT@n\x1e\x8e0\xfe\x8f\x94\x02\x01m\xaf\x93\xd7\x83"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    complex_0 = 312.000176 - 1240.9604j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    bytes_0 = b"\xc3\x10\xc1\x9e|\xf2"
    str_0 = "msH=#"
    dict_0 = {bytes_0: bytes_0, str_0: str_0, str_0: str_0, bytes_0: bytes_0}
    tuple_0 = (str_0, dict_0, bytes_0)
    float_0 = 105.77
    tuple_1 = (bytes_0, tuple_0, float_0)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    int_0 = -504
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    str_0 = "<C}\x0bM"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    bytes_0 = b"\xf3\x13\xeaV\x18@\x8c\x8dxi\x92\x02\x81\xea\xd5\x1cU\xac"
    int_0 = -2350
    module_1.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bytes_0 = b"\xbe|\x89~j\xdey!\xf6"
    list_0 = [bytes_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    float_0 = -2530.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    bytes_0 = b"\x1eG\x8b\x89\x13\x81\xef\xa6\xebT[\xd3\x1a\xc7"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    int_0 = 1757
    int_1 = 3562
    str_0 = "\nVh5OyXzue`?=at6e`Z"
    tuple_0 = (int_0, int_1, str_0, str_0)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    str_0 = "_6(AHVCG`\nk"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    str_0 = "\n|i9^\x0cP$Mkk"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    bytes_0 = b"W\xa8\xc88\xa7\x86\xe4\xe7"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    complex_0 = 4363.349 - 1055.37721j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bytes_0 = b"\x9d\xcf)u\x84\xa9\xc9\xce\xe3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    int_0 = 481
    list_0 = [int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    str_0 = ">J[uS\\"
    var_0 = module_2.urlparse(str_0)
    list_0 = [var_0, str_0, str_0, var_0]
    module_1.get_new_command(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    int_0 = 1147
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    int_0 = -2603
    module_2.urlparse(int_0, allow_fragments=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    int_0 = 3397
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_1.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    bytes_0 = b";x7\xf7r\t\xb6\xe9f0\xb4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    str_0 = "\tLsy`N"
    module_1.get_new_command(str_0, str_0)


def test_case_1454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1455():
    int_0 = -1342
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    int_0 = -1954
    bool_0 = False
    module_1.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, bool_0, tuple_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    int_0 = 751
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_2.urlparse(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    int_0 = 1576
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    int_0 = 560
    bool_0 = False
    module_1.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    bool_0 = False
    list_0 = [bool_0]
    float_0 = 1570.18622
    module_1.match(list_0, float_0)


def test_case_1463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1464():
    int_0 = 4472
    bytes_0 = b"\xa1c\xa7A"
    bytes_1 = b"\xd8\xef\xf8\xf7^\xaa\x10\xe6U\xc8\x9d\x9d"
    tuple_0 = (int_0, int_0, bytes_0, bytes_1)
    module_0.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    float_0 = 2880.8
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    str_0 = "\tabgvm8.{-*\t)Kv"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    str_0 = "(`LS'`+c*gOO"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bytes_0 = b"}\xd0c\xf4\xde\x04\xe9\xc8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    bytes_0 = b"\x0b\x9eG\x1d2\xb7\xdd\xd2\x94\x16\xf4\xcc"
    str_0 = "7'X\\n1"
    tuple_0 = (bytes_0, bytes_0, bytes_0, str_0)
    dict_0 = {tuple_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    int_0 = -2594
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    int_0 = 1846
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    int_0 = -14
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    str_0 = 'r"[wF?,yoh|F'
    bool_0 = True
    module_1.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    int_0 = 328
    dict_0 = {}
    int_1 = -80
    tuple_0 = (int_0, int_0, dict_0, int_1)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    bytes_0 = b"d\xcc\x81+\xf9"
    module_1.match(bytes_0, bytes_0)


def test_case_1476():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1477():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    module_1.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    list_0 = []
    bool_0 = False
    int_0 = -125
    tuple_0 = (bool_0, int_0, int_0, int_0)
    list_1 = [list_0, list_0, tuple_0, bool_0]
    module_1.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    int_0 = -2934
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    int_0 = -1001
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    bool_0 = False
    set_0 = {bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    int_0 = -2208
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    int_0 = -137
    tuple_0 = (bool_0, dict_0, int_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    int_0 = 2147
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    bytes_0 = b"\x13\x96\xbf"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    float_0 = 1495.388066
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    float_0 = 2342.5
    set_0 = {float_0}
    module_1.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    bool_0 = True
    str_0 = "mRJs"
    tuple_0 = (bool_0, str_0, str_0)
    bool_1 = True
    module_1.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    none_type_0 = None
    bytes_0 = b"&/\xefT\x8e\x02\xb0\xc8\x0f\xbb"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    str_0 = "JI"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    tuple_0 = ()
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    dict_0 = {}
    str_0 = "T`RU q~F4yCZ3sLv!8"
    tuple_0 = (dict_0, str_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    int_0 = 2198
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (list_0, list_0, bool_0)
    module_1.match(tuple_0, bool_0)


def test_case_1495():
    pass


def test_case_1496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1497():
    bytes_0 = b"\x0b/\x11\xc6\x03\x1d\xb6\xd0~\x8e\xea\xef\x8fg\xda\x9a\xb7\x08\x0b"
    set_0 = {bytes_0, bytes_0}
    int_0 = -2534
    tuple_0 = (set_0, int_0)
    bytes_1 = b"?"
    list_0 = [tuple_0, bytes_1, tuple_0, bytes_1]
    bool_0 = False
    tuple_1 = (list_0, tuple_0, bool_0, set_0)
    list_1 = [tuple_1, bool_0, bytes_0, bytes_1]
    module_1.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    int_0 = -1613
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    str_0 = "(\r\x0cpi|w*.e,oO"
    bytes_0 = b"\xe0\x1b\xa5\x94\xca\xb4\x17l\xe8\xf1\xbe\xb8Y"
    list_0 = [str_0, str_0, bytes_0, bytes_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    bytes_0 = b"n\xbbr"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    none_type_0 = None
    list_0 = []
    list_1 = [none_type_0, none_type_0, list_0, none_type_0]
    module_1.get_new_command(none_type_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    float_0 = 2634.946
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    int_0 = -129
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    float_0 = -1903.0
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0}
    module_2.urlparse(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    bool_0 = False
    set_0 = {bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    object_0 = module_0.object()
    module_2.urlparse(object_0, allow_fragments=object_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    int_0 = 3857
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    float_0 = 370.0
    set_0 = {float_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    int_0 = -1430
    module_1.match(int_0, int_0)


def test_case_1512():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1513():
    float_0 = -2396.2659
    dict_0 = {float_0: float_0, float_0: float_0}
    dict_1 = {float_0: float_0, float_0: float_0, float_0: dict_0, float_0: float_0}
    int_0 = -1413
    module_1.get_new_command(dict_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    str_0 = "\x0b2Ur(a`fX$YHYqnG"
    str_1 = "mY4^Cl\\\rd#:L?"
    tuple_0 = (str_0, str_1)
    set_0 = {tuple_0, str_1}
    module_1.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    bool_0 = False
    float_0 = 2697.8122
    module_1.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    str_0 = "Y\\' 0c~hl;\\"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    complex_0 = -2573.720326 + 549.917694j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    int_0 = -2238
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    int_0 = 79
    list_0 = [int_0, int_0, int_0]
    module_1.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    float_0 = 1972.755742
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    str_0 = "G:$\t9D?gY `rh"
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {bool_0}
    tuple_1 = (tuple_0, tuple_0, set_0, tuple_0)
    module_1.get_new_command(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    int_0 = -657
    module_1.get_new_command(int_0, int_0)


def test_case_1525():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bytes_0 = b"\xe6.\xee\x00h4\x7f\x90\xe7\x8c\x0e"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    complex_0 = -950.9 + 535.97647j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    float_0 = 1249.3
    tuple_0 = (float_0, float_0)
    module_1.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    float_0 = -1224.925584
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    bytes_0 = b"\xe1H\xa1\x05"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    int_0 = 2863
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    int_0 = 3380
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    str_0 = "TbFzlOwm>dRhqE"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bool_0 = False
    str_0 = "+M"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: str_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    none_type_0 = None
    bytes_0 = b"\x12W\xf9^m\x9aa\xe3z\x8f(\x97"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    complex_0 = -1621 - 1048.455428j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    str_0 = "4N#p2D\t:\r%A$\x0b:(RW"
    str_1 = "w6P8{0vrhC("
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    int_0 = 1191
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    bytes_0 = b"s\x1e\xd9]"
    list_0 = [bytes_0]
    module_2.urlparse(bytes_0, allow_fragments=list_0)


def test_case_1544():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1545():
    int_0 = -99
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    int_0 = -1050
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    str_0 = "eP"
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    str_0 = '[RX>1Oqq" \\F\t9n/qPo'
    tuple_0 = (str_0,)
    bool_0 = True
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    bool_0 = False
    float_0 = -1784.5
    list_0 = [bool_0, bool_0, float_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    float_0 = 3095.53433
    bool_0 = True
    bytes_0 = b""
    list_0 = [float_0, float_0, bool_0, bytes_0]
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    none_type_0 = None
    str_0 = "&WPWS"
    module_1.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    complex_0 = -3761.52 - 4392.30424j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_1.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    str_0 = "t@\"l/8AK|'XG:2A2\r"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    bytes_0 = b"\x1c"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    str_0 = "9l$QCwEOM<"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    float_0 = 1916.4
    none_type_0 = None
    module_1.match(float_0, none_type_0)


def test_case_1559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1560():
    str_0 = "rnj7pD{SmEt"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    float_0 = 1123.363836
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    bytes_0 = b"\x85n\x1c`i\xe9V\x06\xc4\x1d\xb6\x90\xb2\x88w"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    bytes_0 = b"_\xd8\xbc\xf2\x85+n\xe3\xc0h\xe1\xf2\xcf,\x8d0\xf8s"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    bytes_0 = b"\xd1\xa6c\xb4\xf4Hmq"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    bytes_0 = b"\xdc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    int_0 = -3208
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    bytes_0 = b"\xb3,\xdf\x98)\xe41\x9dT^SSR\xc6&\xb4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    str_0 = "Vt`Y9\x0b5/"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    complex_0 = 1177.8 - 189.884246j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    bytes_0 = b"\x1c\xc5a\xa0\x03\xc2\xf1\xf9_\xdf\x15\xa1\xd6\x1b)v~"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    bytes_0 = b"!.i\xcdH\xa9d\xe2\xd6"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    bytes_0 = b'\xf0\xf7\x88Iu"c\xf7\x1c\x99\xf0\x86}X\x1bco\x92T'
    set_0 = {bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    int_0 = 755
    tuple_0 = (int_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    str_0 = "ph"
    list_0 = [str_0, str_0, str_0, str_0]
    module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    float_0 = -1782.8595
    bool_0 = True
    list_0 = [float_0, float_0, float_0, bool_0]
    module_2.urlparse(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bytes_0 = b'\x98\xe7\xbc(E\x13\x9a\xe0]2\xf1\x18r~6\xbc\x8b%"6'
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    int_0 = 2712
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    str_0 = "$)as`d6)xT/"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    int_0 = 1948
    module_1.get_new_command(int_0, int_0)


def test_case_1582():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1583():
    complex_0 = -394.2965 + 3597.2094j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    str_0 = 'Xh\tehHr)+YS"3yBV\nU'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    complex_0 = 3702.932074 + 2325.966j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    int_0 = 1479
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    str_0 = " xr~@|:NF2\r_*!\\R"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    int_0 = 2052
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    bytes_0 = b"\x15\x80\xb3\x11o\x82\xc6p\x9d\x96\x1f\x91\xe6\x92\xc4x!\xe5"
    int_0 = 1705
    module_1.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bytes_0 = b"\x95\xd6\xa8\xd5\xb4W\xa9i\xb1l\xb1\xf1\x85\xa4kw\xee\xfcZ"
    complex_0 = -1953.853473 + 311.1j
    module_1.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    str_0 = "Z!/[h@}]y*[s"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    int_0 = 2499
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    bytes_0 = b"\xf8Wh\xba\x11\x1f"
    str_0 = "ifm_~Y3WX>[&/MS9"
    tuple_0 = (bytes_0, bytes_0, str_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    str_0 = "[W6rZ1;3QJA0SxpTde"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    bytes_0 = b"\xber\xf5a\xc6\xbe7\x8au\xd5\x9aj\xcc\xf3"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    str_0 = "FG9\r"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    bool_0 = True
    set_0 = {bool_0}
    module_2.urlparse(set_0, bool_0)


def test_case_1598():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1599():
    int_0 = 3960
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    int_0 = -969
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    bytes_0 = b"\x1f\xc0K\x95\x16\xaf\xe1\x02\x1eh\xbd"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bytes_0 = b"l-+\x13\xda\xe9a\xdc\tc#Xs\xa4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    complex_0 = -269.6 - 3639.680659j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    int_0 = -3785
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    float_0 = -477.11438
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    str_0 = "kjNl7)}G|<"
    var_0 = module_2.urlparse(str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    int_0 = 383
    set_0 = {int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    float_0 = -707.618
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    bytes_0 = b"\xab\x08\x82\xb7 "
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    complex_0 = 2491.9628 + 4567.6j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    int_0 = 2266
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    int_0 = -1527
    float_0 = 552.2
    tuple_0 = (int_0, float_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_1.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    bool_0 = True
    bool_1 = False
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    float_0 = 4838.566
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    str_0 = ":"
    tuple_0 = (str_0, str_0)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    bytes_0 = b"0c\xb1\x1a}v\x94\xb2\xe2p\x05:\xd7\xb8U"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    float_0 = -766.3653
    list_0 = [float_0]
    tuple_0 = (list_0,)
    module_1.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    str_0 = "\t(<3So3"
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.get_new_command(set_0, str_0)


def test_case_1622():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1623():
    bytes_0 = b"Z\x16\x0f\x80+"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0]
    tuple_0 = (bytes_0, set_0, list_0, list_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    str_0 = "xXlXum:pbs@\x0cM"
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0, bool_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    float_0 = -917.1971
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    str_0 = "u-9<co{s=Nr45m(#v`"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    str_0 = "S_EQ6"
    module_0.object(*str_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_2.urlparse(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    str_0 = "5e+\"Vz'uuX_mdjpU,W"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    bool_0 = False
    set_0 = {bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    int_0 = -3009
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    str_0 = "?'/i\""
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.get_new_command(list_0, list_0)


def test_case_1635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1636():
    int_0 = -2701
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    object_0 = module_0.object()
    str_0 = "my,lpQ]"
    list_0 = [object_0, object_0, str_0]
    module_2.urlparse(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    set_0 = set()
    var_0 = module_2.urlparse(set_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bytes_0 = b")\xe0}8\xe2&\xa0\xae"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    int_0 = 2583
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bytes_0 = b'\xfa\xa6nq\xde\xe0\xfb\x12\xf6"\xff#\xb1\x96\xb0'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    bytes_0 = b""
    float_0 = 788.37634
    list_0 = [bytes_0, float_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    float_0 = -251.54535
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    str_0 = '"v]Gy,)Q=*'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    float_0 = -1337.53
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    str_0 = "0IQ=?#ba1lRq&tWBUn"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    list_0 = []
    str_0 = "Fwm?+"
    str_1 = "\tB}4"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    bytes_0 = b"\xe2\x98"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = False
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    float_0 = -1903.5
    set_0 = {float_0, float_0, float_0}
    bytes_0 = b"]M\x1dp"
    tuple_0 = (set_0, float_0, bytes_0)
    tuple_1 = (float_0, set_0, tuple_0)
    module_1.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    float_0 = 155.4751
    bytes_0 = b""
    bool_0 = False
    tuple_0 = (float_0, bytes_0, bool_0, float_0)
    module_1.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    str_0 = "U!,\rP2|^a"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bytes_0 = b"q%\x8c\x89/Q"
    list_0 = [bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    str_0 = "GcuREFu\x0b[$mC\n"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    bool_0 = False
    str_0 = "tU[E>)d/'s\ttf&_zw"
    module_1.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    int_0 = -3040
    module_2.urlparse(int_0, allow_fragments=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    float_0 = 1029.16
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    float_0 = 1722.6
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    str_0 = ""
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    complex_0 = -3173 + 259.67071j
    set_0 = {complex_0}
    int_0 = 2288
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    str_0 = "%/ks9(y1fBky4^v"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    complex_0 = 840.8 - 1661.45j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    str_0 = "}|c\\)O:EaRDVC4n,8"
    tuple_0 = (str_0, str_0)
    bool_0 = False
    bytes_0 = b""
    tuple_1 = (tuple_0, bool_0, bool_0, bytes_0)
    none_type_0 = None
    module_1.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    float_0 = 818.320703
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    str_0 = "3D,i\x0c=QO0\t[ZJ"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    str_0 = "|X@W"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    bool_0 = False
    dict_0 = {}
    dict_1 = {bool_0: dict_0, bool_0: dict_0, bool_0: bool_0}
    module_1.get_new_command(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    str_0 = "A555[h[q9\t.\x0b<Inp|"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    float_0 = -47.340587
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    int_0 = 126
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    float_0 = 245.446
    bool_0 = True
    module_1.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    bytes_0 = b"I\xaaT\xc1\x81F\x1a\xa8Q\x11\x1eP1>:\xde"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    str_0 = "tN%/\t%"
    set_0 = {str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    int_0 = 539
    module_1.match(int_0, int_0)


def test_case_1674():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1675():
    int_0 = -2775
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    str_0 = "<\rv&vy\n<0;Bgis<HB"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bytes_0 = b"\x9c\xfe\xf71\xe0\xa6C\x84\x13\xb3\x93\xf0\xd1#`y3\xaa\xcd"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    int_0 = -1460
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    int_0 = -1055
    float_0 = 2518.143
    dict_0 = {int_0: float_0, int_0: int_0}
    list_0 = [dict_0]
    module_1.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    float_0 = 4719.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    bytes_0 = b"\x08#b\xd3\x14pe\x16\x85\x90q\xfc\xe4\xe7x\x88"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    int_0 = 2712
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    int_0 = 639
    module_1.get_new_command(int_0, int_0)


def test_case_1684():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1685():
    str_0 = "no%8[t9q"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    bytes_0 = b"n2\x0ef\x0b\xa8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    bool_0 = False
    list_0 = [bool_0]
    bytes_0 = b">\xe8..\xa3\x00;"
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    str_0 = "-EZpD`OK=~tbQH._{eA"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    bytes_0 = b"S\xce"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    float_0 = -37.463
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    str_0 = "6z|9XP!5{`!g(KpqEb)\t"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    bytes_0 = b"\x96\xd0\x1b("
    module_2.urlparse(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    bool_0 = False
    str_0 = ""
    str_1 = "Z7bF"
    dict_0 = {str_0: bool_0, str_0: bool_0, str_1: str_1, str_1: bool_0}
    module_0.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    int_0 = 695
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    int_0 = 2414
    bytes_0 = b"\xd5\xfc\x17\x06q\xfd\x95"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_1.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    float_0 = -2904.99913
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    int_0 = -1703
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    int_0 = 797
    dict_0 = {int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    int_0 = -970
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    str_0 = "Pe`X_"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    bytes_0 = b"YT\xf1\xbc\xe25e\xea"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    bool_0 = True
    module_2.urlparse(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bytes_0 = b"\xb4g\xba\xf3\xc9m\x9e\xa3\xeb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    str_0 = "{m>5~Fkb7DTA\rZ"
    dict_0 = {str_0: str_0}
    str_1 = "\x0cq\tv"
    module_1.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    int_0 = 4025
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    complex_0 = -4024.75431 + 2753.2357j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    str_0 = "\r"
    tuple_0 = (str_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bytes_0 = b"\xb0\xac"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    str_0 = "q"
    bool_0 = True
    module_1.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0]
    module_1.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    complex_0 = -2609.0442 - 2458.08j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    none_type_0 = None
    set_0 = {none_type_0}
    module_1.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    str_0 = "\x0c&\x0c%Vk"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    bytes_0 = b"\xf0Mf\x96'k\xc3\xb9\xd59\xcc\xae\xfd"
    complex_0 = 1618.110614 + 1803.99709j
    list_0 = [bytes_0, bytes_0, complex_0, complex_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    object_0 = module_0.object()
    list_0 = [none_type_0, none_type_0, object_0]
    module_1.match(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    float_0 = -962.63
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [dict_0]
    module_1.get_new_command(list_0, list_0)


def test_case_1719():
    pass


def test_case_1720():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1721():
    str_0 = ">ui"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    int_0 = -1348
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    bool_0 = False
    object_0 = module_0.object()
    module_1.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    float_0 = -295.532
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    str_0 = "3XfK3V?eflw2*3i\r(;"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    bytes_0 = b"\x91\xef"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    complex_0 = 1302.6 + 103.759j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    bytes_0 = b""
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    bytes_0 = b"^Rb\xd4\xbb\xb1-\xc4\xc1}\xdb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    tuple_1 = (bytes_0, bytes_0, bytes_0, tuple_0)
    int_0 = -632
    module_1.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bool_0 = True
    module_1.match(bool_0, bool_0)


def test_case_1733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1734():
    int_0 = -578
    tuple_0 = (int_0,)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bytes_0 = b"\xfa\xbf\x05i\x8d\x98\xfc\x92\x93"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, bytes_0, dict_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    str_0 = "k@6tu#}iHuj\nQ'5"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    bytes_0 = b'\x96"\x82\xa6\xed\xca\x89\xb3L'
    list_0 = [bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    bytes_0 = b"\xb1\xe6$"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_2.urlparse(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    none_type_0 = None
    int_0 = -314
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    int_0 = 2532
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    bytes_0 = b"Se\x9a\xec\x93\xf98"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0, bytes_0)
    bool_1 = False
    bytes_1 = b""
    bytes_2 = b"f=\xf2\xce\xa7\xbc\xa63\xf03`\x87"
    tuple_1 = (bool_1, bytes_1, bytes_2, bytes_2)
    module_1.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    str_0 = "&-KoN"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    str_0 = 'Re%%V5TN"Z~&YO5x\t'
    module_0.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    bytes_0 = b"bB58\x90\x17CB\xe1"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    bytes_0 = b"a\xe0\x9c"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    int_0 = 2999
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bytes_0 = b"\x06:N:8\x96\xaf]H\xfa"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = True
    list_1 = [list_0, bool_0]
    module_1.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    str_0 = "+;Ok}Dy|`7HV1\\["
    module_1.match(str_0, str_0)


def test_case_1751():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1752():
    str_0 = "1^W<penn"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, list_0]
    list_2 = [list_1]
    module_1.get_new_command(list_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    int_0 = -2764
    set_0 = {int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bytes_0 = b"\xb8\xd3\xf4\x86\xb9\xa2"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    str_0 = ")Ff8<)pc3"
    module_1.match(str_0, str_0)


def test_case_1757():
    pass


def test_case_1758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1759():
    bool_0 = True
    str_0 = "?"
    tuple_0 = (bool_0, str_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    bytes_0 = b"\x7f\xfc\x97I\xbd]\xcb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    str_0 = "O@"
    dict_0 = {str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    float_0 = 2480.0
    object_0 = module_0.object()
    dict_0 = {float_0: object_0}
    module_1.get_new_command(dict_0, float_0)


def test_case_1763():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1764():
    bytes_0 = b"\xcc\xc5x\x810o\xd6>\xbf"
    int_0 = -933
    dict_0 = {bytes_0: int_0, int_0: int_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    float_0 = -772.652
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    str_0 = "\x0c"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    int_0 = -898
    tuple_0 = (int_0,)
    int_1 = 74
    module_1.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    float_0 = 1697.5007
    bytes_0 = b"\x96:\x93\xce\xd11\x171,\xf3u\x83x\x08\x9f5B\t\xf8"
    list_0 = [float_0, bytes_0, bytes_0, float_0]
    dict_0 = {float_0: list_0, float_0: float_0, bytes_0: float_0, float_0: bytes_0}
    module_1.match(dict_0, bytes_0)


def test_case_1769():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1770():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, none_type_0)
    module_1.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    int_0 = -1113
    list_0 = [int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    bytes_0 = b"c\xe7j8\x84\xf7E\xf2\x9c\xfc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    complex_0 = -967.78682 - 1044.8505j
    module_1.get_new_command(complex_0, complex_0)


def test_case_1775():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1776():
    str_0 = ""
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    str_0 = "<m\t7$WE>#]f2\tr'o'E\r"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bytes_0 = b"N\xe1\xb6\x00\x10\xd3Jg>\x04\x88\xe1\x94\x18J+\xce"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    float_0 = 466.68
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bytes_0 = b"E"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    int_0 = -1449
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    complex_0 = 90.9 + 1129.865j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    str_0 = "y,[(5>vCR#7"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    none_type_0 = None
    bool_0 = True
    list_0 = [bool_0, none_type_0]
    module_1.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    int_0 = -1089
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    float_0 = 813.6
    module_2.urlparse(float_0, allow_fragments=float_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    str_0 = 'Z\x0cx}Dm>:{~\\\x0cy"L'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    object_0 = module_0.object()
    tuple_0 = (object_0,)
    module_2.urlparse(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    float_0 = -3096.9417
    module_1.get_new_command(float_0, float_0)


def test_case_1791():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1792():
    float_0 = 3901.0401
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    str_0 = "G~7P1Mlh/YhmVf5"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    bytes_0 = b"\x93o\x8f/e"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    str_0 = ")W=Wr"
    int_0 = 1419
    module_1.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    str_0 = "s*C8Dqh/1dk5YF "
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bytes_0 = b"\xaa\xe0>\x9bJ\xa6W\xc5o\xecn\xcf<d^\x1f*\xbeOQ"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    set_0 = {bytes_0, bytes_0}
    int_0 = 468
    tuple_0 = (list_0, set_0, int_0)
    module_2.urlparse(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    str_0 = "!75,-[DM8c$@RU?P"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    int_0 = 1883
    module_1.get_new_command(int_0, int_0)


def test_case_1800():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1801():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    float_0 = -1231.86
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    str_0 = "F"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    int_0 = -1503
    list_0 = [int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    str_0 = "$q1(l"
    var_0 = module_2.urlparse(str_0)
    list_0 = [var_0, var_0, str_0, str_0]
    module_1.match(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    complex_0 = 285.08972 - 959.9j
    bytes_0 = b"T-\xaf\xc5"
    str_0 = "%X?O[ZZ.?y\\\nknDO^2"
    tuple_0 = (complex_0, bytes_0, str_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    list_0 = []
    object_0 = module_0.object(*list_0)
    dict_0 = {object_0: object_0}
    bool_0 = True
    object_1 = module_0.object()
    list_1 = [bool_0, object_1]
    tuple_0 = (dict_0, bool_0, list_1, object_1)
    tuple_1 = (tuple_0,)
    module_1.match(tuple_1, object_1)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    int_0 = 3127
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    int_0 = 357
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    float_0 = 472.089213
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    int_0 = -1125
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    bool_0 = True
    module_1.match(bool_0, bool_0)


def test_case_1815():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1816():
    bytes_0 = b"\xd8\x03\xdb\xd4o\xb9\xce\x86{\x94]\x80f"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    float_0 = -2019.61365
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    float_0 = 2206.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    float_0 = -1785.3076
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    str_0 = "aOz"
    module_1.match(str_0, str_0)


def test_case_1821():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1822():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_2.urlparse(var_0, allow_fragments=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bytes_0 = b"%\x91&G\xc2\xc0\x9c\xda\x84L\xc6\x06\xafs\xa0\x90[\xdb?"
    module_1.match(bytes_0, bytes_0)


def test_case_1824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1825():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    str_0 = "rcq;'8}//"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    dict_0 = {}
    set_0 = set()
    module_1.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    int_0 = -2252
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    bytes_0 = b"\xc1\xe7k!l\xb3#\xb6\xe0E\xde\xb3\x9e/\xeb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    str_0 = "5qnPa]I"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    int_0 = 259
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    str_0 = ")3K*_>mb+)(NL,s"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, set_0, str_0, str_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    float_0 = -951.05
    list_0 = [float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    bytes_0 = b"|J\xf1\xa8LlS"
    bool_0 = True
    module_1.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    str_0 = "Ps"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    int_0 = 1745
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    int_0 = 1945
    module_1.get_new_command(int_0, int_0)


def test_case_1838():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1839():
    float_0 = 516.70351
    module_2.urlparse(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    int_0 = 465
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    str_0 = 'G+"'
    str_1 = "^q}x%8mN"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    int_0 = 2556
    set_0 = {int_0}
    module_2.urlparse(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    str_0 = ".73*) o"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    float_0 = 3702.153
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    float_0 = -1739.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    str_0 = "EhTp}h7{2D}[c>hlNe"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    int_0 = 871
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    float_0 = -406.843
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {float_0: float_0, float_0: tuple_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bytes_0 = b"\xb3\xe7\xc6\x84\xe4(\x87\t"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    str_0 = "=]K3w D-?\tn58,6IuG^\x0b"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    bytes_0 = b"\xcb\xbem\x97\xdd\xca\xc5U](\x81\x88\xec\xa6\x80\xfb\x93I\xb8\x15"
    float_0 = 2133.677431
    tuple_0 = (bytes_0, float_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    bytes_0 = b"S@\xfc\xbeNl\x9f{\x1f\xb0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    str_0 = "KP^_nW{l_5p%Ke\r:"
    bool_0 = False
    module_1.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    float_0 = -1875.649
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    complex_0 = -3746.32696 - 1509j
    set_0 = {complex_0, complex_0, complex_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bool_0 = True
    module_2.urlparse(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    str_0 = "Qxs\rO!J,H\n@"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    str_0 = "7P]|S07NvmWxJKSq{"
    var_0 = module_2.urlparse(str_0, allow_fragments=str_0)
    list_0 = [var_0, str_0, str_0]
    list_1 = [list_0, list_0]
    tuple_0 = (list_1, var_0, var_0)
    module_1.get_new_command(tuple_0, list_0)


def test_case_1863():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1864():
    complex_0 = 3443.09 - 204.3387j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    bool_0 = True
    module_2.urlparse(bool_0)


def test_case_1866():
    pass


def test_case_1867():
    pass


def test_case_1868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1869():
    str_0 = ":"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    bytes_0 = b"Rq\x1an\xe9"
    list_0 = [bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    bool_0 = True
    module_2.urlparse(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    float_0 = -2573.482731
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    complex_0 = 3197.4633 - 119.5j
    bool_0 = True
    int_0 = 1147
    tuple_0 = (complex_0, bool_0, int_0, bool_0)
    module_1.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bytes_0 = b"0\xe0\xbd\xe2Y\xb3"
    module_0.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    str_0 = "LJ&kn"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    bool_0 = True
    int_0 = 292
    set_0 = {bool_0, int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    int_0 = 1000
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    str_0 = '"@<KjN<4'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    float_0 = -73.4
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    int_0 = 1498
    str_0 = 'J}_q$\\L,Bu6"gikH'
    int_1 = -408
    tuple_0 = (int_0, str_0, int_1)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    bytes_0 = b"\xf40\xcesE\x8d(\xb1\xc4\x11"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    complex_0 = -900.75336 - 3445.184j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


def test_case_1884():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1885():
    float_0 = -1189.7055
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    int_0 = -1038
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    float_0 = 1108.827
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    none_type_0 = None
    bytes_0 = b"N\xcb\xbc\xcaqhI"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    int_0 = 1716
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    int_0 = -925
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    int_0 = 4222
    module_1.match(int_0, int_0)


def test_case_1892():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1893():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    bytes_0 = b"v"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    float_0 = 2283.1797
    module_1.get_new_command(float_0, float_0)


def test_case_1896():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1897():
    str_0 = "}"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    bool_0 = True
    bool_1 = False
    str_0 = ""
    list_0 = [bool_0, bool_0, bool_1, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    bytes_0 = b"\x05\x03\x85k\x1a|"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    bytes_0 = b"\xcdn\x91=w\xd1"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    dict_0 = {var_0: bool_0, var_0: var_0}
    module_1.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    int_0 = -3573
    module_1.get_new_command(int_0, int_0)


def test_case_1903():
    list_0 = []
    var_0 = module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    bool_0 = True
    float_0 = -2921.2624
    int_0 = 2623
    list_0 = [float_0, int_0]
    bool_1 = False
    tuple_0 = (bool_0, float_0, list_0, bool_1)
    list_1 = [tuple_0]
    module_1.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    set_0 = set()
    int_0 = 146
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    bytes_0 = b"\x92\xc6\xf1\x1e7\xff"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    bytes_0 = b"\x8d7\xa4"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    int_0 = 1539
    set_0 = {int_0}
    float_0 = -400.0
    tuple_0 = (set_0, set_0, set_0, float_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = 93
    float_0 = 1018.5485
    set_0 = {int_0, float_0}
    list_0 = [set_0, set_0, int_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    int_0 = -3065
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    str_0 = ':[Ei8Lr\\&%Pl")!to'
    set_0 = {str_0}
    list_0 = [set_0]
    str_1 = ":(/pKAI"
    module_1.get_new_command(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    float_0 = -1677.5
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    float_0 = -962.323
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    complex_0 = -1372.280952 - 2180j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    dict_0 = {}
    var_0 = module_2.urlparse(dict_0)
    bool_0 = True
    tuple_0 = (var_0, bool_0, var_0, var_0)
    object_0 = module_0.object()
    module_1.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    bytes_0 = b"m\xf7Q\xfb\xc7\xd0hz\xc9"
    str_0 = "%ww<+V\t(Jw"
    bool_0 = True
    tuple_0 = (bytes_0, str_0, bool_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    bytes_0 = b"\x82\xed\x01hw\xf9\xb4\xb1op,\x1c\xf60\t\xe8\x97\x89"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    int_0 = 2142
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    object_0 = module_0.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    list_0 = []
    var_0 = module_2.urlparse(list_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    bool_0 = True
    set_0 = set()
    bool_1 = False
    bool_2 = False
    bytes_0 = b"}\xd4\xf5\xde"
    list_0 = [bool_0, bool_0, bool_1, bool_1]
    tuple_0 = (bool_1, bool_2, bytes_0, list_0)
    tuple_1 = (bool_0, set_0, tuple_0, list_0)
    module_1.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    int_0 = 1891
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    bool_0 = False
    str_0 = "K"
    list_0 = [bool_0, str_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    set_0 = set()
    var_0 = module_2.urlparse(set_0)
    module_0.object(*var_0, **var_0)


def test_case_1926():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1927():
    bytes_0 = b"\xb5x\x9fW\x05\x14\xd5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    str_0 = "w89\rSIy@*I]_"
    var_0 = module_2.urlparse(str_0)
    dict_0 = {var_0: var_0}
    module_1.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    object_0 = module_0.object()
    list_0 = [object_0]
    module_1.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    bytes_0 = b""
    var_0 = module_2.urlparse(bytes_0, bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    bytes_0 = b"7\x85k\xa5}\x1d\xb6\x0e\xc0-G\r\xe8\xc0-O"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    object_0 = module_0.object()
    float_0 = 617.1
    module_1.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    str_0 = "8`6Y\x0c.7%r})"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bool_0 = False
    int_0 = 2104
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    int_0 = -1221
    module_1.get_new_command(int_0, int_0)


def test_case_1936():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1937():
    str_0 = "|["
    none_type_0 = None
    str_1 = "b\n>#>YHA"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    bytes_0 = b"\xb8\x9c\xf7\x1f\x10bb\x18\xb8\x0b\x9a\xd8,\xf5\x8f"
    int_0 = 2043
    module_1.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    str_0 = "A!&2S\n +Cp6hTy"
    list_0 = [str_0, str_0]
    module_1.get_new_command(list_0, list_0)


def test_case_1941():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1942():
    int_0 = 2115
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    tuple_0 = ()
    set_0 = set()
    module_1.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    int_0 = -2323
    module_1.get_new_command(int_0, int_0)


def test_case_1945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1946():
    str_0 = "agny\x0c\nf\x0c8_RR3`v8"
    list_0 = [str_0, str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    bytes_0 = b"H\xf7J\x9b\xc9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    float_0 = 496.511
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    bytes_0 = b"I\x93/"
    module_2.urlparse(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    int_0 = 102
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    bytes_0 = b""
    float_0 = -781.7
    list_0 = [bytes_0, float_0, bytes_0]
    list_1 = [float_0, bytes_0, list_0, list_0]
    module_1.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    complex_0 = -2706.95 + 2163.3503j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    none_type_0 = None
    bool_0 = False
    list_0 = [bool_0, bool_0, none_type_0]
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    bytes_0 = b"!N"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    int_0 = 1436
    bool_0 = False
    module_1.get_new_command(int_0, bool_0)


def test_case_1957():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1958():
    int_0 = -1067
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    int_0 = 2667
    list_0 = [int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bytes_0 = b"\xd4o\x11\x11\x88b"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    bytes_0 = b"\xfe\x93\x08w\xfd\xb0\xc3\x14"
    dict_0 = {bytes_0: bytes_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    int_0 = -3015
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    str_0 = "A)Oq'IQ+\r9PJ\n<C."
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    int_0 = 5106
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    bytes_0 = b"8\x1f\xa0\xee\xd3OA\x8f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    bytes_0 = b"%\xfc\x95\xd1\xeci1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    complex_0 = -343.65636 - 2441.1001j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    int_0 = 1043
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    set_0 = {tuple_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    str_0 = "B-Yc6t<q[np"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    int_0 = 1513
    int_1 = 149
    set_0 = {int_0, int_1}
    int_2 = -595
    module_1.match(set_0, int_2)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    str_0 = "@hjAL?L"
    module_1.get_new_command(str_0, str_0)


def test_case_1972():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1973():
    object_0 = module_0.object()
    int_0 = -401
    module_1.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    str_0 = "gr,uA"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    int_0 = -589
    int_1 = 1480
    module_1.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    bytes_0 = b"Qs\x94\x03\x0b"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    bytes_0 = b"\x0f\x1c\xda}t\xf4=\xdbj8\x06"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    int_0 = -1407
    module_2.urlparse(int_0, allow_fragments=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    str_0 = "U,S"
    set_0 = {str_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    str_0 = ""
    tuple_0 = (str_0, str_0, str_0)
    set_0 = {tuple_0, str_0, str_0, tuple_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    str_0 = "9\t|U4EBumRyPl#kpw"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    int_0 = 1197
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    object_0 = module_0.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0, list_0, list_0, object_0]
    module_1.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    complex_0 = 3814.9 - 2073.602634j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    dict_1 = {complex_0: dict_0}
    list_0 = [complex_0, complex_0, complex_0, dict_1]
    set_0 = {complex_0}
    tuple_0 = (list_0,)
    tuple_1 = (complex_0, list_0, set_0, tuple_0)
    bytes_0 = b"JI;\x9db D\xc1dv\xad\xc5k"
    tuple_2 = (bytes_0,)
    module_1.get_new_command(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_2.urlparse(tuple_0, allow_fragments=none_type_0)
    module_2.urlparse(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    str_0 = 'Lj+p\t1"xT^#\n&rA}4'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    bytes_0 = b"Dh\xc6\xd4r/rO\xcc\x9c/\x89\xda\xf4a7\xc9#"
    list_0 = [bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    int_0 = -349
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    float_0 = 3351.5203
    int_0 = 938
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    str_0 = "I"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    str_0 = "guJfNSO8`"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    bytes_0 = b"\x18b\xb9\x0f"
    set_0 = {bytes_0}
    float_0 = -921.00848
    tuple_0 = (bytes_0, set_0, float_0)
    tuple_1 = (tuple_0, set_0)
    module_1.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    float_0 = 5759.29
    module_1.get_new_command(float_0, float_0)


def test_case_1999():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2000():
    int_0 = 469
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    bytes_0 = b"sM\xadBT\xaa\x13G\xe8H\xbax\xf7b\xab\x16"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    int_0 = 1118
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


def test_case_2004():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bytes_0 = b"9\x90\x0c\xa3\xd5\xa3\x86\xd0\x02{\xbe.["
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bool_0 = False
    bytes_0 = b"P<d\x12l\xfe"
    bool_1 = False
    tuple_0 = (bytes_0, bool_1)
    tuple_1 = (bool_0, bytes_0, tuple_0)
    module_1.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bytes_0 = b"\x82"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    bool_0 = False
    str_0 = '\nm?j17d/^(mf"%g'
    module_1.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    object_0 = module_0.object()
    dict_0 = {object_0: object_0}
    int_0 = 1843
    str_0 = "hM9/# wU#"
    list_0 = [dict_0, int_0, str_0]
    bool_0 = True
    tuple_0 = (list_0, list_0, bool_0)
    module_1.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    bytes_0 = b"<x*\xb9"
    set_0 = {bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    bool_0 = True
    set_0 = {bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    float_0 = 3530.0
    bool_0 = True
    module_1.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    int_0 = 2438
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0]
    bool_1 = True
    module_1.match(list_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    int_0 = 2178
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    str_0 = "z=,Zi*DoI<r{;ITl\nP "
    str_1 = "coW$/>=6"
    str_2 = "C>tAL0\x0c\\^>A2{<\x0cI["
    dict_0 = {str_0: str_0, str_1: str_2, str_2: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    object_0 = module_0.object()
    bool_0 = True
    dict_0 = {object_0: object_0, object_0: object_0, bool_0: object_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    int_0 = -2743
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    set_0 = {var_0}
    module_2.urlparse(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    bool_0 = False
    bool_1 = False
    bool_2 = False
    tuple_0 = (bool_0, bool_1, bool_2)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    str_0 = "OCYN?~5L$0x)*\r;BD"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    int_0 = -1116
    list_0 = []
    module_1.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    bytes_0 = b"\x89s"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    complex_0 = 192.1422 - 223j
    str_0 = "S8^J\x0bRz_\n\x0c=fr,i<"
    module_1.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    str_0 = "\nTN\x0b1brk0,nDS<O#P"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    object_0 = module_0.object()
    none_type_0 = None
    module_1.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    int_0 = -640
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    complex_0 = 382.271 - 1656.8j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    bytes_0 = b"8\xdf\x01\xab\x94\x02\xf7\xb0_?\x99\x12"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    str_0 = "/-/VGi7~0:\\Sr!D*\x0c\x0c\tC"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    str_0 = "Z4"
    list_0 = [str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    bytes_0 = b"\xea\xf7\xf6\xa0\xa4\x85\x82"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    float_0 = 1307.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    str_0 = "U^3|KsgeS(+"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    int_0 = -549
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bool_0 = True
    bytes_0 = b"\x8bq\xfa=K*p\xbe\x97\x9f"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    str_0 = "*8arE)1A\r4}g"
    list_0 = [str_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    int_0 = 1883
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"L'\xe93\xa3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    bytes_0 = b"\x80P\xec\xe4"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    float_0 = 1838.34469
    set_0 = {float_0, float_0}
    module_1.get_new_command(set_0, float_0)


def test_case_2047():
    list_0 = []
    var_0 = module_2.urlparse(list_0, allow_fragments=list_0)


def test_case_2048():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2049():
    bytes_0 = b"\xe3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    complex_0 = -822.708 - 239j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    bytes_0 = b"D3\xb0*6T\x8f\xb6\x97<h"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, none_type_0)
    module_1.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    int_0 = 1624
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    int_0 = 1020
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    int_0 = 768
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    set_0 = set()
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\x89r,v6%\x9f@\xfc"
    tuple_0 = (list_0, bytes_0)
    tuple_1 = (set_0, bool_0, tuple_0)
    module_1.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    module_1.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    float_0 = 3150.7
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    int_0 = -1742
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    str_0 = "[L`pG"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    str_0 = "w4d"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    int_0 = 953
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    float_0 = 328.293081
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    float_0 = -1260.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    list_0 = []
    object_0 = module_0.object()
    module_1.get_new_command(list_0, object_0)


def test_case_2069():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2070():
    bool_0 = True
    none_type_0 = None
    module_2.urlparse(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    str_0 = 'guHj"j?9\'\x0c"THT'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    int_0 = -4959
    float_0 = 1064.08
    module_1.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_2.urlparse(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    bool_0 = False
    float_0 = 1514.5
    bool_1 = True
    list_0 = []
    tuple_0 = (float_0, bool_0, bool_1, list_0)
    tuple_1 = (float_0, tuple_0, tuple_0)
    set_0 = {bool_0}
    tuple_2 = (tuple_1, set_0, bool_0)
    tuple_3 = (bool_0, tuple_2, list_0)
    module_1.match(tuple_3, tuple_3)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    int_0 = -1008
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    bool_0 = False
    bool_1 = False
    module_1.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    int_0 = -1815
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_2.urlparse(list_0, allow_fragments=none_type_0)


def test_case_2078():
    pass


def test_case_2079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2080():
    int_0 = -2846
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    int_0 = -1373
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    none_type_0 = None
    bool_0 = False
    int_0 = -392
    tuple_0 = (none_type_0, bool_0, int_0, bool_0)
    tuple_1 = (tuple_0,)
    module_1.get_new_command(none_type_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    bytes_0 = b"L-\\\x10=E\xae^"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    int_0 = -3355
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    bytes_0 = b"\xa7\x10\xac\xc0\x88"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    str_0 = "~{ugfLp\x0c W(J++\x0bC'"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    object_0 = module_0.object()
    module_1.match(object_0, object_0)


def test_case_2088():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_2089():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    int_0 = -2066
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    float_0 = 1682.438175
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    int_0 = 3127
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    bytes_0 = b"\xb0\x08\xa7+ \x1d\x8cOH\xbf\xb0\x98\xd9"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_2095():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2096():
    float_0 = -4325.945
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    str_0 = '!=<fvt"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    str_0 = "{$JQ/#)"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    str_0 = "[=y8.\x0b"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    float_0 = 2862.188
    str_0 = "LYaZ)!sVo_S"
    module_1.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    float_0 = 725.92318
    int_0 = 1648
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: bool_0}
    tuple_0 = (float_0, int_0, dict_0, dict_0)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    bytes_0 = b"\xab\xa5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    int_0 = 210
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    int_0 = 495
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    int_0 = -861
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    int_0 = -842
    list_0 = [int_0]
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    none_type_0 = None
    str_0 = "8-;#):>"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    bytes_0 = b'\xdf\xbe"'
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


def test_case_2113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2114():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_1.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    str_0 = "94t_j"
    set_0 = {str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    float_0 = -2744.91
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


def test_case_2118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2119():
    bytes_0 = b"\xe1o\xb9\xb5\xad\xde\x92\xf9e\x90\xb7\xd1"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    int_0 = 423
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    str_0 = ""
    list_0 = [str_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    int_0 = 1061
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    bytes_0 = b"H\xd7\xbb\xf7b\xdb\xc7\x8dg\xa0HX\xfe\xd6a\x1f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    str_0 = "6ftNg}$~:\x0b~\x0cGd.Do&"
    list_0 = [str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    str_0 = " MsuY\\.8/NYS~dF43]P"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    str_0 = "V"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    bool_0 = True
    bytes_0 = b"\n\xb3\x86W;\x90\x04\xef\xb2\x930c\xe5w\xb0b\xc6\x188"
    tuple_0 = (bool_0, bool_0, bytes_0)
    dict_0 = {}
    tuple_1 = (tuple_0, dict_0)
    str_0 = "bde0:+?)2t&D1s8"
    tuple_2 = (tuple_1, tuple_1, str_0)
    module_1.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    str_0 = "JW~"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bytes_0 = b"\x07\xd3\xc0s\xf2"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    int_0 = 211
    bytes_0 = b"\xd8\xb4{"
    tuple_0 = (int_0, int_0, bytes_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    complex_0 = -2914.188 + 1763.95655j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    str_0 = "=P;A!E"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    complex_0 = -2662.27474 + 870.43j
    int_0 = 2659
    module_1.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "50f&#*J3"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    float_0 = -3164.60619
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    complex_0 = 2589.6033 + 324.216j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    str_0 = "}<]"
    str_1 = "`vV.RJ*O6a)a&-1{F"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    str_0 = "!6z;{n#\\]"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    int_0 = -3751
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    int_0 = -403
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    bytes_0 = b"4\x02\x9d\xbd\xc93XB"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    str_0 = "]?s"
    str_1 = 'x:h1d+g<"|^`auA'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bytes_0 = b"\x08\x0f\xa4E"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    float_0 = -281.03
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    list_0 = []
    bool_0 = True
    tuple_0 = (list_0, bool_0, bool_0, list_0)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    int_0 = -1277
    module_1.get_new_command(int_0, int_0)


def test_case_2152():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2153():
    bytes_0 = b"\x8f\xc1\xe5\xaf;\xb5\xc04\xbd6\x97\xf7P\xa3"
    str_0 = ",q;"
    bool_0 = False
    set_0 = {str_0, bool_0}
    tuple_0 = (bytes_0,)
    bool_1 = False
    dict_0 = {bool_1: tuple_0}
    tuple_1 = (set_0, tuple_0, dict_0)
    tuple_2 = (bool_0, set_0, tuple_1)
    tuple_3 = (bytes_0, str_0, tuple_2)
    none_type_0 = None
    module_1.get_new_command(tuple_3, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    bytes_0 = b"/k\xb5\xb7Q\xc7B\x1b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    float_0 = 1061.315088
    set_0 = {float_0, float_0, float_0}
    module_1.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    int_0 = -619
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    str_0 = "l"
    set_0 = {str_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


def test_case_2159():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2160():
    str_0 = "H\r\tCJ*>vi6q)b2;`-"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    int_0 = 2742
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    bytes_0 = b"\xa5"
    list_0 = [bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


def test_case_2163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2164():
    str_0 = "G-0E[M!`%PGhq+:"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    float_0 = 1147.889922
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    int_0 = -1353
    str_0 = " K_F6N{t\x0bP"
    module_1.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    bytes_0 = b"\xb27\x0c\xee\xb0\x83"
    list_0 = [bytes_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_2.urlparse(set_0, bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    str_0 = ",EgJx"
    module_1.match(str_0, str_0)


def test_case_2170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2171():
    bytes_0 = b"\x12%\x85~\xc1\x90\xb8\xd7\xe9\x9f\xd1\xb1\xd7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    object_0 = module_0.object()
    str_0 = ""
    module_1.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    float_0 = 2869.5
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    str_0 = "5aatD$Zzpl> ?C"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    str_0 = "Zu'=r!$%!%qf9t60"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    complex_0 = 1586.081585 - 3670.7j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    bytes_0 = b"i\x94+:\x83\x84\xa2\x8a\xdfHcf\xa8-\x03\xe4."
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    int_0 = 121
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    bytes_0 = b'\xa2"fo\xb0\x00\xbf\x83\x8f\xf3'
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    int_0 = -2215
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    bool_0 = False
    int_0 = -1725
    dict_0 = {bool_0: bool_0, int_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    int_0 = -1709
    dict_0 = {}
    module_1.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    str_0 = "hLa^1\\\tuU)dT"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    complex_0 = 3109.12885 - 1446.6488j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    float_0 = 2387.311
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    str_0 = "X)e+8C\x0cZ.O)R"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    bytes_0 = b"\xe3\xd6\xef"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    bytes_0 = b"%\xb6{:\x9c\x071\x9e'^iW\xae\xfe\xbb"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    float_0 = -1216.2
    module_1.match(float_0, float_0)


def test_case_2190():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2191():
    object_0 = module_0.object()
    set_0 = {object_0, object_0, object_0}
    module_1.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    complex_0 = -2888.37354 + 2005.44j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    str_0 = "V~s0l>A3\tyBp/Vq!~<\x0b\t"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    str_0 = '"jZp'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    str_0 = "JrAZ"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    bytes_0 = b"\x17?\xfa\xe1<[\xb4\x96A\x83"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    int_0 = -1360
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    str_0 = "Ox"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    int_0 = 3259
    set_0 = {int_0, int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    float_0 = 2314.59
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bool_0 = True
    int_0 = -1526
    tuple_0 = (bool_0, bool_0, int_0)
    set_0 = {tuple_0, tuple_0, int_0, bool_0}
    module_1.match(set_0, int_0)


def test_case_2203():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2204():
    str_0 = "cX"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    str_0 = "\x0c/Tv366]`!)"
    dict_0 = {str_0: str_0}
    float_0 = -1517.8949
    tuple_0 = (str_0, dict_0, float_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    bytes_0 = b"\xc9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    int_0 = 2347
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    bool_0 = False
    str_0 = "n5`y\x0bL6WyA9[%XI"
    module_2.urlparse(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    int_0 = -296
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    bytes_0 = b"\xb7\xf3\xb3\xe4\x12\x89[0\xb90\x94\xd3qYW?e\x0f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    object_0 = module_0.object()
    list_0 = [object_0, object_0, object_0, object_0]
    bytes_0 = b"\xf9\xc7\xd1D\x17\xda\x97S\x0f"
    str_0 = "-YEzGy>o$+"
    tuple_0 = (list_0, bytes_0, str_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


def test_case_2214():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2215():
    complex_0 = -1282.5 + 657.8j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    str_0 = '\n*\\rA1DsJy\\N"e!*\x0c!'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    str_0 = "Lj\x0bk\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    bytes_0 = b"\xf5\x94\xdb\x81w{\t\x0b\xdd\xdd\x0cf\xc1"
    tuple_0 = (bytes_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    int_0 = -815
    tuple_0 = (int_0,)
    dict_0 = {int_0: tuple_0}
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    bytes_0 = b"\x7f\x0fO2Y\x14\xa8\x97@\xfb\xb2\xc9\xca"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    bytes_0 = b"\xe2p\x14"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    dict_0 = {}
    int_0 = 754
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    bytes_0 = b"-\xd1i\x08\xeaz"
    module_2.urlparse(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    str_0 = "DJMxJos^JSmD~"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    none_type_0 = None
    module_1.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    int_0 = -3076
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    none_type_0 = None
    bytes_0 = b"z\x99("
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    int_0 = -1982
    list_0 = [int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    str_0 = "';)r"
    none_type_0 = None
    str_1 = "eLWnY%sx$Y1\\_L&hb*TR"
    str_2 = "Tjn??\n^eYTy["
    str_3 = "`'~D"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    float_0 = 1722.64
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_1.get_new_command(tuple_0, bool_0)


def test_case_2235():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2236():
    float_0 = 397.44
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    complex_0 = -118.614 - 1736.98j
    bool_0 = True
    float_0 = 117.0
    dict_0 = {
        complex_0: complex_0,
        bool_0: bool_0,
        complex_0: complex_0,
        float_0: bool_0,
    }
    module_1.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    int_0 = -447
    tuple_0 = (int_0,)
    set_0 = {tuple_0}
    module_1.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    complex_0 = 3910.02375 - 1229.947j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, list_0]
    list_2 = [list_1]
    none_type_0 = None
    module_1.match(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bytes_0 = b"6\xf99\x1b\x06R"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


def test_case_2242():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2243():
    float_0 = 1592.102
    list_0 = [float_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bytes_0 = b"~^\xf9\xd9\xa6x\xa1"
    list_0 = [bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    bytes_0 = b"\xde\xad0\xab(,\xbb\xfb\xb0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    list_0 = []
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    dict_0 = {}
    list_0 = [dict_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    str_0 = "GIN"
    float_0 = -1740.15
    bytes_0 = b"4\x01\xf3C;\xaf\xe1\xb8*\xdb\xb4  K&\xcc\xcc\xce"
    tuple_0 = (str_0, float_0, bytes_0, bytes_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bytes_0 = b"\xb4\x16*\xd8d\xb9;u"
    dict_0 = {bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    bytes_0 = b"\xa8\xe4\xf5&\x1f"
    module_0.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    complex_0 = -3532 - 656.5j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bytes_0 = b"\xca@dq\xc7=\x16\x982\x8ci9\xd3\xaf\xa9q\x16R"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    object_0 = module_0.object()
    none_type_0 = None
    module_1.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    str_0 = "B"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    float_0 = 2987.1
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    int_0 = -4547
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    str_0 = "#"
    set_0 = {str_0, str_0, str_0}
    list_0 = []
    module_1.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    list_0 = []
    tuple_0 = (list_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    none_type_0 = None
    int_0 = 656
    module_1.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    complex_0 = -63.5 - 767.113j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    int_0 = -3531
    module_1.get_new_command(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    float_0 = -427.40763
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [bool_0]
    tuple_0 = (set_0, bool_0, bool_0, list_0)
    module_1.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    int_0 = -2134
    list_0 = [int_0, int_0]
    bytes_0 = b"\xffj\x82\xba\xdd\xe4\t\x8b_\x8e\xfaX\xe6\\\xaa"
    str_0 = "nwZn y(mX|QxdT"
    tuple_0 = (int_0, list_0, bytes_0, str_0)
    module_1.get_new_command(tuple_0, tuple_0)


def test_case_2265():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2266():
    str_0 = "g6[UyZ6"
    object_0 = module_0.object()
    module_1.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    tuple_0 = ()
    bytes_0 = b""
    module_1.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    str_0 = "Hg0"
    var_0 = module_2.urlparse(str_0, str_0, str_0)
    int_0 = 1947
    dict_0 = {str_0: var_0, str_0: int_0, int_0: var_0, var_0: str_0}
    module_1.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    int_0 = 2979
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    bytes_0 = b"\xcb\xa7N\x00%\x05"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    bool_0 = True
    bytes_0 = b"\xb3jW\x85EKs\x8fMX/"
    tuple_0 = (bytes_0,)
    module_1.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bool_0 = True
    module_2.urlparse(bool_0, bool_0)


def test_case_2273():
    pass


def test_case_2274():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2275():
    str_0 = "j\x0b\r"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    bytes_0 = b"\xd8\x99\x88Am\xf7\xac\xafd\xc1\x1fOW\x0c\xa14^\xbc\xc5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    str_0 = "G3:#BZQ2l|!"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0]
    module_1.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    str_0 = "\\xAZnld|G\x0cej5[!9vO"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    float_0 = 540.86
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    str_0 = "8L!`q)p7d7uV|&=${z"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    bytes_0 = b"\xe5\x95"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bytes_0 = b"8\xdb\xbe\xa4\xd0,`"
    module_1.match(bytes_0, bytes_0)


def test_case_2284():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2285():
    str_0 = "D @F!&[6/!"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    bytes_0 = b"\xca\xe0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, none_type_0)
    module_1.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    bool_0 = True
    str_0 = "@H6"
    module_1.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    int_0 = 4846
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_1.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    bytes_0 = b"-\x04\xb9\xc9\x90"
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bytes_0, bool_0, set_0)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    str_0 = "([saRwC0fQ\tau5JdB3"
    str_1 = "YwI$')>[[m/Eqr_("
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: str_1, str_1: bool_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    bytes_0 = b"\xe1\rM\xcd\xf7\xe5\xca=\xfe\x7fk\xc0H f"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    float_0 = -864.8
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [list_0, float_0, float_0, list_0]
    bool_0 = False
    str_0 = "j4B]MhP/\x0b}"
    tuple_0 = (list_1, bool_0, str_0)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    bytes_0 = b"\xea\x03>z2}\xd9"
    list_0 = [bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    str_0 = "VUq#9@OwRjz,\x0bLBSB"
    str_1 = "z3FKAV\\L\r3"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    str_0 = "?]TaD+\rjw]'W&X"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    bytes_0 = b"\xee\xf4\xe9E\xfbQBv\x99\xc8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bytes_0 = b"\xcd\xd5\xc9\x1bd$rK\xaf\xdf\xe0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    bytes_0 = b"\xfbf\xc1qZO\xafg"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    float_0 = 1026.1761
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    list_0 = [bool_1, bool_1]
    bool_2 = True
    tuple_0 = (bool_0, set_0, list_0, bool_2)
    module_1.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bytes_0 = b"0"
    bool_0 = True
    float_0 = 1920.06
    tuple_0 = (bytes_0, bool_0, float_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    str_0 = "h?\x0cn:0\x0b34-\n1pmc<66\x0b"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    bytes_0 = b"2\xe5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    complex_0 = 3817.884 + 1330.0447j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    int_0 = -2125
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    int_0 = 2222
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    int_0 = -2329
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bytes_0 = b"y@\x18"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    float_0 = 716.729
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    bytes_0 = b"\xe2[\xe8-X7\xc1P\xa0+iQ\x16/\x7fS\xe8\xe9"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    object_0 = module_0.object()
    float_0 = 857.4649
    dict_0 = {
        float_0: object_0,
        object_0: float_0,
        float_0: float_0,
        object_0: object_0,
    }
    list_0 = [object_0, object_0, object_0, dict_0]
    complex_0 = 762.14 + 1337.814063j
    bool_0 = False
    tuple_0 = (complex_0, bool_0)
    list_1 = [list_0, complex_0, tuple_0]
    module_1.match(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    complex_0 = 2456.06 - 2724.7545j
    bool_0 = True
    module_1.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    bytes_0 = b"\x13\xcc?\x16W\xb9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    int_0 = -1716
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    int_0 = -1643
    bytes_0 = b"\x1f\x0e\xb96\x96bgta\x9f \x84z\xf5\x07\x9aF\x9d\xd2"
    complex_0 = 20.72 + 965.33884j
    dict_0 = {}
    tuple_0 = (bytes_0, complex_0, dict_0, int_0)
    module_1.match(int_0, tuple_0)


def test_case_2321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2322():
    object_0 = module_0.object()
    module_2.urlparse(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    int_0 = -2029
    int_1 = 2590
    set_0 = {int_1, int_1}
    tuple_0 = (int_0, set_0, int_1)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    int_0 = 1981
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    int_0 = 2485
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    int_0 = 1281
    bool_0 = True
    tuple_0 = (int_0, bool_0, int_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    int_0 = 2248
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    int_0 = 360
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    str_0 = "i\nOx%;--2/\n9=l/D 0"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bytes_0 = b"\xafP\xe8D\x02X"
    str_0 = "3\t"
    int_0 = 1237
    tuple_0 = (bytes_0, str_0, int_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    int_0 = 3696
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    str_0 = "b#lx\\<D)M\r]+_~,QE=Ft"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    tuple_0 = ()
    var_0 = module_2.urlparse(tuple_0, allow_fragments=tuple_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    str_0 = "{<d4:+gGm}=7xJP5"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    bytes_0 = b"S\x1fXM;qk\xe4Y\x0b2\xe1\x99"
    dict_0 = {bytes_0: bytes_0}
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    str_0 = "UBrQaF3|b[-S^W|T+"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    bytes_0 = b"\xe5\xcb\xf3"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_2339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2340():
    str_0 = "w:!]Mg"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    float_0 = 1572.6636
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    int_0 = 2116
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    float_0 = 2327.7
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    str_0 = "$e-(dS_O&v|=o0+SGZ1"
    module_1.match(str_0, str_0)


def test_case_2345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2346():
    float_0 = 2183.855
    module_1.match(float_0, float_0)


def test_case_2347():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2348():
    object_0 = module_0.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    str_0 = "#eIuGs%wlEJIf"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    int_0 = 1125
    set_0 = {int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    int_0 = 196
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [int_0, int_0, set_0, int_0]
    module_1.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    str_0 = "\n%ns%pgEhYhg#K>b"
    object_0 = module_0.object()
    module_1.match(str_0, object_0)


def test_case_2353():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2354():
    str_0 = "fQ@|\x0c)y hU<_\nM7w([\x0c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    set_0 = set()
    var_0 = module_2.urlparse(set_0)
    list_0 = [var_0, set_0, var_0, set_0]
    tuple_0 = (list_0,)
    module_1.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    bytes_0 = b"p2"
    set_0 = {bytes_0, bytes_0, bytes_0}
    bool_0 = False
    str_0 = '__hc@Mz{Ktd0E"'
    tuple_0 = (set_0, bytes_0, bool_0, str_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    int_0 = -1085
    str_0 = "zs'weFexI\tz"
    tuple_0 = (int_0, str_0, int_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    bool_0 = True
    int_0 = -1364
    dict_0 = {int_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, int_0, dict_0)
    list_0 = [tuple_0, bool_0, int_0]
    module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    float_0 = 2309.53224
    set_0 = {float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    float_0 = 3568.6
    set_0 = {float_0}
    module_1.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    int_0 = -54
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    int_0 = -4880
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, dict_0, dict_0]
    module_1.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    bytes_0 = b"h\xedK\xa2<\xdb\xda\x1do\xb7\xd7{\xe8"
    tuple_0 = ()
    tuple_1 = (bytes_0, tuple_0)
    tuple_2 = (tuple_1, bytes_0)
    module_1.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    complex_0 = -258.12553 + 120.757j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    int_0 = 1794
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    none_type_0 = None
    module_0.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    str_0 = "bjACX!"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    bytes_0 = b"h\xd3\x07\x9b*\xa0PN"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_2371():
    list_0 = []
    var_0 = module_2.urlparse(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    str_0 = "8P32xefBR}[\nQ9_"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    int_0 = -265
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    int_0 = 899
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_1.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    float_0 = -3050.1794
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    str_0 = "Q~T<_f_'aW4I9a41`\tW"
    int_0 = 692
    module_1.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    int_0 = 281
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bool_0 = False
    bool_1 = False
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    str_0 = "\"<\n<% x%e0Yl|7:'X"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    str_0 = "4;\n\r!\np6CB5j%>g\x0c'"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    int_0 = -799
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    str_0 = "x*Qvk2(<;]K\\xEk"
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    bytes_0 = b"\xa2\xa4\xa5A"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    float_0 = 1128.241
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    int_0 = -206
    str_0 = '[O[@j+(\nskQ"`c@1'
    module_1.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    int_0 = -728
    module_2.urlparse(int_0, allow_fragments=int_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    str_0 = "V+QPb'5<G_\ra-rn"
    set_0 = {str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    complex_0 = -1502.398 - 372.64j
    module_1.get_new_command(complex_0, complex_0)


def test_case_2392():
    pass


def test_case_2393():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2394():
    float_0 = -5419.797
    set_0 = {float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    int_0 = -815
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    str_0 = "*h<kJsIf`3\n/>T3Ii4'9"
    set_0 = {str_0}
    bool_0 = True
    list_0 = [set_0, bool_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    none_type_0 = None
    object_0 = module_0.object()
    module_1.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    tuple_0 = ()
    var_0 = module_2.urlparse(tuple_0)
    tuple_1 = (var_0,)
    int_0 = 153
    dict_0 = {tuple_1: tuple_0, tuple_0: tuple_0, int_0: tuple_1}
    module_1.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    tuple_0 = ()
    int_0 = 2186
    tuple_1 = (tuple_0, int_0)
    module_1.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    float_0 = 1312.838
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    int_0 = -104
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    tuple_0 = ()
    var_0 = module_2.urlparse(tuple_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    bytes_0 = b"\xf5\x91P+P"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    str_0 = "pD"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


def test_case_2406():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_2407():
    int_0 = 885
    tuple_0 = (int_0, int_0)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    complex_0 = 621.1665 - 896.52296j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    tuple_0 = (set_0,)
    tuple_1 = (tuple_0,)
    module_1.get_new_command(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    int_0 = 598
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    str_0 = "Y]9"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    int_0 = 3373
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    int_0 = 3758
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    bool_0 = False
    int_0 = 1789
    dict_0 = {bool_0: int_0, bool_0: bool_0}
    module_1.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    str_0 = "!?f1QN6"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    str_0 = "8"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    int_0 = -1473
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    str_0 = "$eGaQ ]mw!c@}HZ\rZ"
    module_0.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    float_0 = -401.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    bool_0 = False
    float_0 = -322.1
    module_1.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    float_0 = 971.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bytes_0 = b"\x06\xed.\x1b\x14\x05\xf8\xa3\x9d"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    str_0 = "FP-"
    str_1 = ' [(UC1%7=a: CooH"'
    int_0 = -4025
    list_0 = [int_0]
    bool_0 = True
    tuple_0 = (str_0, str_1, list_0, bool_0)
    list_1 = [tuple_0]
    module_1.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    str_0 = "{enJpb(iv5"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    dict_1 = {object_0: object_0}
    module_1.get_new_command(dict_1, dict_0)


def test_case_2427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"b\x12\xf7-\x95`\xa5\xc2\xa7\x9f\xf4\xff\x86[\xee\x19"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    int_0 = -2590
    module_1.match(int_0, int_0)


def test_case_2430():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bytes_0 = b"\x1b\xe9\xd4\xd0BbXg"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    str_0 = "cr+c#V/Bm \\58So]k"
    module_0.object(**str_0)


def test_case_2434():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2435():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    str_0 = 'o"EW3UF8`Aw!\x0c#'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    str_0 = "[' +HK\t9=g\n+:;-"
    tuple_0 = ()
    dict_0 = {str_0: tuple_0, str_0: str_0}
    module_1.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    int_0 = -2855
    module_1.match(int_0, int_0)


def test_case_2440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2441():
    bytes_0 = b"\xd2\xfc\xa1\x01\xd3\x02g\x86"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    int_0 = 1243
    set_0 = {int_0, int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_1.match(list_1, list_0)


def test_case_2444():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2445():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0]
    module_1.get_new_command(list_0, set_0)


def test_case_2446():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2447():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, set_0, set_0]
    str_0 = '@}~W(~"TxI~]}L.!'
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    str_0 = "l2_nxBwaBt(|v\x0bh."
    bytes_0 = b"p\xfc\xbd\xbf\xd7\x05\x0b-"
    module_1.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    str_0 = "(\tM.,[QW2;SVU;"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    int_0 = 1613
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    str_0 = "4rGuXU4|fs^G\nM]{\x0b"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    module_1.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    bytes_0 = b"XnTe'ZC\x9b\xe5u\xc2_"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    str_0 = "8\rZbj8[}C?\x0c j;V"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    complex_0 = -300.68788 - 1777.651001j
    module_2.urlparse(complex_0, allow_fragments=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    float_0 = 244.588448
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    bytes_0 = b'\xda+qW\x82"\xa4?qW\xa9|y\xd2}\xfcA\xfb'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    float_0 = -3289.28406
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    bytes_0 = b"M&R"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    int_0 = -3001
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    int_0 = -2652
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    bytes_0 = b"\x8f\xae\x05t$@Uc\xcd\x0f"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(bytes_0, list_0)


def test_case_2464():
    pass


def test_case_2465():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2466():
    str_0 = "\\HXTalv\nebX@a"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


def test_case_2467():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2468():
    str_0 = "E*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    bytes_0 = b"\x82\xef\xd6\x17N\n\xa3\x95\xb4h\xb5So\\\xc4\x9e"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    bytes_0 = b'\x05\xd4\x96\x0f\x0e"'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    dict_0 = {}
    var_0 = module_2.urlparse(dict_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    str_0 = "x?-Dt|\nD@[S!2Fk^w\x0c"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0]
    list_1 = [list_0, str_0]
    none_type_0 = None
    module_1.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    bytes_0 = b"\x0b\xb7\xb9\x8a C\xbdT\x1a\x97\x10 khW\x10"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    str_0 = "dik.V~C"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    complex_0 = 1172.618298 - 7453.84549j
    dict_0 = {complex_0: complex_0}
    module_1.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    int_0 = 2834
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    complex_0 = -1777.53611 - 1117.1j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    int_0 = -2614
    module_1.get_new_command(int_0, int_0)


def test_case_2479():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2480():
    str_0 = "48>"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    str_0 = "'|\tp\\*QRsEn-v4!JcL!!"
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    int_0 = -713
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    bytes_0 = b"\x1b\xaa\xee\xfc\x8e\x80\xf06\x13=\x83?"
    tuple_0 = ()
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: tuple_0, bytes_0: bytes_0}
    set_0 = {tuple_0}
    module_1.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    dict_0 = {}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    bytes_0 = b"\x96ja\xd5\x1e'\xd0"
    set_0 = {bytes_0}
    module_2.urlparse(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    bool_0 = False
    float_0 = -2692.566
    module_1.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    float_0 = -1724.445
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    int_0 = -194
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    str_0 = "tq"
    str_1 = "5"
    tuple_0 = (str_0, str_1)
    set_0 = {tuple_0, str_1, tuple_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    bytes_0 = b"\x16:\x0e\xe9\x12\xa9\x02\xbb\x99\x81X\xd9'\xd5\x93\xfc\x86o\xa8\xd5"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    bool_0 = True
    str_0 = "mFBJ;Kl'd"
    str_1 = ""
    str_2 = "/\r"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    module_0.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    complex_0 = -766.7 - 31.1j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    bytes_0 = b"6\x8d\xa3D>\xc33\xb3*\x05"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    object_0 = module_0.object()
    bool_0 = True
    str_0 = "5jJ)l]gF,XKo."
    tuple_0 = (object_0, bool_0, str_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    str_0 = ";<rv,"
    module_1.get_new_command(str_0, str_0)


def test_case_2497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2498():
    int_0 = -2076
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    str_0 = "\x0cU?UrTyR"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    int_0 = 1018
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    bytes_0 = b"\xddY$\n\xa0\x13\x05"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    int_0 = 1270
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    float_0 = 1263.69966
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    int_0 = -1114
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    none_type_0 = None
    module_0.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    float_0 = -439.38196
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    bytes_0 = b"\x92\xb3\xd3c\x04\x1fv\r\xe6\x9d<\xd0\x88\xb0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    int_0 = 3207
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    str_0 = "LUxplU>Ju"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    str_0 = "o3"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    int_0 = 3650
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    bool_0 = True
    float_0 = 613.35812
    bytes_0 = b"\xa2\xfa\xf4sY\xe2Ce\x99\x89n\xa9\xb1{"
    tuple_0 = (bool_0, float_0, bytes_0)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    bytes_0 = b"<\xf7`\x11\xdf\xa2/O"
    set_0 = {bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    set_0 = set()
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    bytes_0 = b"\xdc\xe9\x9aM\x82j\xfe\xb2\xba\xe4{\x89\x93"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    float_0 = -4502.11
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    str_0 = "t\x0bYo$#\n%s"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    float_0 = 2181.95
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    int_0 = -1337
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    int_0 = -3942
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


def test_case_2524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2525():
    bytes_0 = b"6\xdd"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    complex_0 = 584.04 + 3216.3992j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    complex_0 = 2172.209 + 81.656596j
    bytes_0 = b"\xc5\xa3\xca\xf6\xbd\x13\x1aO\xe9\x1a"
    module_1.get_new_command(complex_0, bytes_0)


def test_case_2528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2529():
    bytes_0 = b"\x825\xb6\x13d(\xa4$"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    int_0 = 486
    list_0 = [int_0, int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    complex_0 = -1171.66 - 318.4422j
    tuple_0 = (complex_0,)
    dict_0 = {tuple_0: complex_0}
    module_1.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    none_type_0 = None
    module_1.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    set_0 = set()
    object_0 = module_0.object()
    module_1.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    int_0 = -1252
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    bytes_0 = b""
    var_0 = module_2.urlparse(bytes_0)
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    int_0 = 1860
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    str_0 = "#\x0b\\8Jc*|-r8 2{"
    str_1 = ""
    dict_0 = {str_0: str_1, str_1: str_0, str_0: str_0, str_0: str_1}
    tuple_0 = (str_0, dict_0)
    bool_0 = False
    bool_1 = False
    tuple_1 = (str_0, tuple_0, bool_0, bool_1)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    float_0 = 713.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    int_0 = -187
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    str_0 = "\x0c7B.I8(;\nZIqO|$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    complex_0 = 3193.8 + 775.7j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    bool_0 = False
    int_0 = 2359
    module_1.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    int_0 = 2428
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    int_0 = -950
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bytes_0 = b"\xf1\x00\x96\x81\xc5\xf74\xc6"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    list_0 = []
    bytes_0 = b"\xb0e\xd4\t\x8f#L\xe2\x0f/nz\x92\xd9\xac\xf4"
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    bytes_0 = b"\xef\x83A\x16%\x0fa\xd4\xd2\x99\xaf\x9d\x9d\xc3p6&\xf4\x85\xe6"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_2549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2550():
    int_0 = -221
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    bytes_0 = b"\x1d&\x826x\xdfh\x8d"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    bool_0 = True
    bytes_0 = b"$HT\xb2_"
    module_1.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    bool_0 = False
    float_0 = 679.0
    module_1.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    bool_0 = True
    list_0 = []
    dict_0 = {bool_0: list_0, bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bytes_0 = b"\x1d\xd7\x92Q)\xe2\xce\xbc\xf5\xf3LR"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    none_type_0 = None
    set_0 = set()
    module_1.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    complex_0 = 3713 - 541.163258j
    module_0.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    bytes_0 = b"\x02\x9a\x88\x11\x8f+\x14\x1b.H\xd3\x00c\x0e\xdf\x16`"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


def test_case_2559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2560():
    str_0 = "c#'OcBoZ^:{\r`\t<m\nGG8"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    tuple_1 = (set_0,)
    module_2.urlparse(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    str_0 = "&c\rRx"
    module_1.get_new_command(str_0, str_0)


def test_case_2563():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_2564():
    bytes_0 = b"\xd4\x12%<\xa8\x1a\x02R\xf5\x1d\xf1\x96>\x04\xb7r"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    none_type_0 = None
    module_0.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    bytes_0 = b"\x88\x85s\t\xec\xb4\xee\xeb\xb3\xea"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    float_0 = -2331.18
    tuple_0 = (float_0,)
    list_0 = [tuple_0, float_0, float_0]
    bytes_0 = b"\xa1\xb6\xddU\xce\xa7\xd7\xb6\x05~\xbc\x1e\xb4\xaa\x95\xa1k\xf0'\xa6"
    tuple_1 = (list_0, bytes_0)
    module_1.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    dict_0 = {bool_0: bool_0, bool_0: tuple_0, tuple_0: tuple_0}
    module_1.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    object_0 = module_0.object()
    module_2.urlparse(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    int_0 = 2271
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    float_0 = 1431.43
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    float_0 = -3333.5
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    bytes_0 = b"\xd1\x1e2\xe3\xfb\xa9\xe6\t,"
    list_0 = []
    dict_0 = {}
    object_0 = module_0.object(*list_0, **dict_0)
    list_1 = [bytes_0, bytes_0, bytes_0, object_0]
    module_1.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    bytes_0 = b"Z\xc1\x9b\x0e\xa5\xfa=m\xe2\x06\xd07\xa3vc\xa7r\xdf\xa8\xa8"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    tuple_0 = (list_1, list_1, list_1)
    list_2 = [tuple_0, list_0, list_0]
    bool_0 = False
    module_1.match(list_2, bool_0)


def test_case_2577():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2578():
    bytes_0 = b"\xee:k\xf7*Oa\xd34p\xde\x16\xc8\x17"
    dict_0 = {bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    int_0 = 2150
    int_1 = 2208
    module_1.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    float_0 = 333.932135
    tuple_0 = (float_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    set_0 = set()
    var_0 = module_2.urlparse(set_0, allow_fragments=set_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    int_0 = -596
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    int_0 = 1254
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    float_0 = 783.4733
    module_1.get_new_command(float_0, float_0)


def test_case_2585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2586():
    str_0 = "uAzPZ!N1MFDvPHRaBp$&"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    str_0 = ""
    set_0 = {str_0, str_0, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    int_0 = -2065
    set_0 = {int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    float_0 = 1285.97
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    float_0 = -1786.804718
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bytes_0 = b"\xa7B\x1d\xa7ns!\xe7\x1e\xa9\xde\xbc\xa8\x0f\xbb9\xfc"
    module_0.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    bool_0 = True
    object_0 = module_0.object()
    module_1.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bytes_0 = b"\xd3k\x86"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    int_0 = -3389
    bytes_0 = b"\xec]|\xd6\x1d\xff6j"
    bool_0 = True
    dict_0 = {}
    dict_1 = {int_0: int_0, bytes_0: bool_0, bool_0: dict_0}
    module_1.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    bool_0 = False
    bool_1 = True
    bytes_0 = b"'\x89G/\x01\xa6q\xe2<\x85|\xe1\xfa"
    str_0 = "yW6kK4/Q<<>"
    list_0 = [str_0, str_0]
    tuple_0 = (bool_0, bool_1, bytes_0, list_0)
    none_type_0 = None
    module_2.urlparse(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    float_0 = 1899.32519
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    str_0 = "vycQ+\td3+ z>\r<7qQ:}I"
    module_1.get_new_command(str_0, str_0)


def test_case_2602():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2603():
    complex_0 = -822.718103 + 899.56j
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (complex_0, complex_0, bool_0, dict_0)
    module_1.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    bool_0 = True
    str_0 = ",\x0cih?n^w*"
    tuple_0 = (bool_0, str_0)
    bool_1 = True
    dict_0 = {}
    tuple_1 = (bool_0, dict_0)
    tuple_2 = (tuple_0, bool_1, str_0, tuple_1)
    list_0 = [tuple_2, tuple_1, bool_0, tuple_1]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


def test_case_2605():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bytes_0 = b"\xf6\x98Rr\x9e\x9fR8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    float_0 = 991.0
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    int_0 = 1258
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    float_0 = 1707.7132
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=float_0)
    module_1.get_new_command(float_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    bytes_0 = b"\x10\x06\x06\xfb\xdeo\x87+\xb4B\xed3\xd6\xbbQW\x0f&\xbe\xc8"
    set_0 = {bytes_0, bytes_0}
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    str_0 = "tRS4\t[X$a2\\yww\t1U"
    bytes_0 = b"\xf1\x15\x94'q+m"
    module_1.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    str_0 = 'TY@o@:6"!'
    list_0 = [str_0, str_0, str_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0, list_0)
    module_1.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    int_0 = 1072
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    bytes_0 = b"C\xb1\xbaj\xef1\x1e"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    int_0 = -1422
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    bytes_0 = b"\xba\x9e\xf0\xe6\x7fS\x16\xae\xd2\xce\x87\x02\xa5\x13\x9e\xc2\xa2\xbb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    float_0 = -2745.39
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    str_0 = " <HxMGi2ws[( -H,2_|<"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    int_0 = -629
    bool_0 = True
    module_1.get_new_command(int_0, bool_0)


def test_case_2621():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2622():
    float_0 = -2755.6
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    bytes_0 = b"\x14\x17Q\xac\xe9"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_2624():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2625():
    str_0 = "od3Z6{xN;Q"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    int_0 = 1437
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    str_0 = "z5KomiO[O"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    str_0 = "u&P"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    str_0 = "u*"
    str_1 = "v !_|~%uu=~bg\tvP\x0c6z"
    module_1.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    none_type_0 = None
    int_0 = -1495
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    int_0 = 2747
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    int_0 = -1785
    module_1.match(int_0, int_0)


def test_case_2633():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2634():
    str_0 = "e{aS%S@|b&_&q2A"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    str_0 = '[)&@5r?pv(F;*y"m'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    complex_0 = 1686.940107 - 497.668j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    str_0 = "aUvM.\rE\r_{.Y7|&-?h#"
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    int_0 = 1867
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    str_0 = "V(%Lp GOO4Zif"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    int_0 = -2857
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    str_0 = "r4<l@WP/|n5[PwJ"
    var_0 = module_2.urlparse(str_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    complex_0 = 4610 - 1081.706j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    str_0 = "{3m!_A<W@"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, str_0)


def test_case_2644():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2645():
    int_0 = -2136
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    bytes_0 = b"\x1d\x84\xbf*%Q\xb9\x97\xa3\xab\xb1\xe4\x99e\xd8\x87\xf7\xc4\xf2\xfc"
    bool_0 = True
    complex_0 = 1006.66 + 1139.901j
    int_0 = -1530
    tuple_0 = (bytes_0, bool_0, complex_0, int_0)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    complex_0 = 2594.382 + 226.705j
    set_0 = {complex_0, complex_0}
    module_1.get_new_command(set_0, set_0)


def test_case_2648():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2649():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    float_0 = 3582.52
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    int_0 = 1531
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    bytes_0 = b"\x80j\xf6y\x0b\r<\x16\xe5\x91h\xf1\x99-B\xb9\x1e\xcaX"
    tuple_0 = (list_0, bool_0, list_0, bytes_0)
    module_1.get_new_command(tuple_0, bytes_0)


def test_case_2653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2654():
    str_0 = "#&KkBO[0%H`Q@#2"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    bytes_0 = b"\x96\xb8\xac\xfa\x0bs\xeff\xd6\n|\xcc\x99je8O#\xdf"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    bool_0 = False
    bytes_0 = b"\xb9\x18\xf5\xe0\xcfq\xb3x-J\x80\xb0}"
    list_0 = [bool_0, bytes_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_1.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    str_0 = "K/6eNy1lJ)\ru\x0b'ebn"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    bytes_0 = b"\xe1+\xb0\x1e\xeai"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    int_0 = 495
    list_0 = [int_0]
    module_1.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    bytes_0 = b"\x0b\x08e \xb1l\xd7p\xa84\xf5\x01\xec`\x814[]h\x81"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    bytes_0 = b"BWp"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    bytes_0 = b"D|\xef?e\xc7\xc2\xc32\xcc \xd4+4f\xa8w\x0b\xa7"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    float_0 = -602.720462
    tuple_0 = (float_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bytes_0 = b"\x1b\x16?\xca\xb6\x10\xac\xfb\x9d\xa6\x9a\xeb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    bytes_0 = b"0\xe2F\xda\xf2\xdb\xf5\x86B"
    int_0 = 266
    module_1.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    int_0 = 3278
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    bytes_0 = b"\xa3\x81|&\x8ff2\xa1\xc4\x8bE\xd6M\x9a\xa9P\xb8.\x10z"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = 'tC=bnQ7\x0b]OBH[?Q:*="E'
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    int_0 = -1927
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    str_0 = "cO^t-#\tP3"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    int_0 = 1576
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    str_0 = "gFELn-"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bytes_0 = b"\x14\x04\x87\xe4\x13\xc9\x01\xad"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    str_0 = "=Z,.s[U(tICj-r"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    float_0 = -1358.0
    str_0 = "u@3Y`N1H&-=v`xh>$"
    list_0 = [float_0, float_0]
    dict_0 = {str_0: list_0, str_0: str_0, str_0: str_0}
    module_0.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    int_0 = -1187
    set_0 = {int_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


def test_case_2679():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2680():
    bool_0 = False
    str_0 = "]nD<"
    module_1.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    bytes_0 = b"P\x07\t\xbe4\x00\xdd8\xc6\xec\xca\xdbz"
    module_1.match(bytes_0, bytes_0)


def test_case_2682():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_2683():
    str_0 = "k/tS)"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bytes_0 = b"\xc1\xd4\xe1\x05"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    int_0 = 2635
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


def test_case_2686():
    pass


def test_case_2687():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2688():
    float_0 = -2636.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    bool_0 = False
    module_1.match(bool_0, bool_0)


def test_case_2690():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2691():
    int_0 = 4748
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    str_0 = '<v*EdTkoP"f2Sp-JS'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    str_0 = '"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    float_0 = 1853.93
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    bool_0 = False
    str_0 = "-KK'Up.(9bH1'AH33#b"
    dict_0 = {bool_0: str_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    complex_0 = -2338.528 - 3072j
    module_1.get_new_command(complex_0, complex_0)


def test_case_2698():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2699():
    bool_0 = False
    bytes_0 = b""
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    list_0 = [dict_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    str_0 = "=;MrVdq[OOKu@/ZB2~CM"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    none_type_0 = None
    bytes_0 = b"\x07\xae\x19]\xe2S\x80\x1b\x87\xab\x1ea\xe1'\xbc\xec"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    int_0 = 76
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    float_0 = -1454.928805
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    str_0 = " K8"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    float_0 = 1426.3
    int_0 = 557
    module_1.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    bytes_0 = b"\x87\x81$\xd3\x92"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    complex_0 = 1077.74 - 1273.346j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    bytes_0 = b"\xd4\xe3>\xf6\xc4g,=<\xa7!\xe5\x1b\xe2\xe8\xdeD\xde;"
    none_type_0 = None
    module_2.urlparse(bytes_0, allow_fragments=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bool_0 = True
    int_0 = -2232
    dict_0 = {bool_0: int_0, bool_0: bool_0, int_0: int_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    int_0 = 142
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    complex_0 = 2049 - 625.8j
    list_0 = [complex_0, complex_0]
    list_1 = [list_0, list_0]
    str_0 = "K_G"
    tuple_0 = (list_1, list_0, str_0, str_0)
    module_1.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    str_0 = "g,xnPH` K?WMTZ1]"
    module_1.match(str_0, str_0)


def test_case_2714():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2715():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bytes_0 = b"\x84\xc0En"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    int_0 = 4876
    bool_0 = False
    module_1.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    complex_0 = -196.553376 + 4536.71j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    float_0 = 751.6
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bool_0 = False
    bool_1 = False
    set_0 = set()
    tuple_0 = (bool_0, bool_1, set_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    tuple_0 = ()
    bool_0 = True
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bytes_0 = b"\x03L"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    str_0 = 's>2;zPpR*{<m;"'
    none_type_0 = None
    str_1 = "tT\\i;L`pt"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bytes_0 = b'\xbe\x04E\xe0\x1c}\xf9"Xk\xf8\x02\xf8'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bool_0 = True
    list_0 = []
    module_0.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    str_0 = "k4?=P\t26V=.5Vd\x0ccC"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    int_0 = 134
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    str_0 = ":6b4.W"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    str_0 = "a<"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    none_type_0 = None
    module_0.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    str_0 = 'M"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    int_0 = -2091
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    bytes_0 = b"\x95\xec\xc2#\xeb\x99h5\t\x99U?\xd7Ry\xf3N"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    bytes_0 = b"\x00"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    str_0 = "y34>99Gyg\x0c00<5?"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    str_0 = "eq+r"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    int_0 = 3042
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    set_0 = set()
    int_0 = -4654
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    int_0 = 908
    module_1.get_new_command(int_0, int_0)


def test_case_2741():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2742():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    object_0 = module_0.object()
    module_1.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_1.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    str_0 = "hTF>;*1Q"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    float_0 = -478.35
    str_0 = "RgD"
    set_0 = {float_0, float_0, float_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    int_0 = -116
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    int_0 = -362
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    str_0 = "u9W\x0cN)p$1dYq(\n~Fk"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    int_0 = -3483
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    bytes_0 = b"\xd1\x11P;uE\xd0\xcch\x95\xeb3\x99\xb1\xdf\xfd=K"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    float_0 = -209.26
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    bool_0 = True
    int_0 = -477
    module_2.urlparse(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    bytes_0 = b'\x85\x85}\xa46"\xce8\x9d!\xc3\xe2\xff\xbb\x7f\xac\xc7'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    bytes_0 = b"\x07\x01B\xbd\xefK)\xe7d\x90jb9\xbe^\x15'"
    set_0 = {bytes_0}
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = True
    tuple_0 = (set_0, list_0, bool_0, set_0)
    module_1.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    complex_0 = 698.631 + 404.470626j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    str_0 = "*CG<p^a"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    bytes_0 = b"\x83P\x8a"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    str_0 = "E-JW(s+Tn"
    int_0 = 799
    list_0 = [str_0, int_0, str_0]
    tuple_0 = (str_0, int_0, list_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    bool_0 = True
    int_0 = 1294
    bool_1 = False
    tuple_0 = (bool_0, int_0, bool_1)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    int_0 = 1099
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, none_type_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    bytes_0 = b"\xd8\xaa\xfd\x9a\xea"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    object_0 = module_0.object()
    set_0 = {object_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    list_0 = []
    str_0 = "_:.TqS8>GU7%Ft4<`-y"
    none_type_0 = None
    str_1 = "yS$^qg`Fl{"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = 3774
    set_0 = {int_0}
    list_0 = [set_0, int_0, set_0, int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    int_0 = 289
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    str_0 = '\rWF\x0cgied6B"G&lw\th(-'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    str_0 = "yo,\r4,Os\r[.6-\ru|/e\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    int_0 = -412
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = False
    module_1.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    str_0 = "kViFN.B\t: 'av6&t?"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "(3K$h]lxYF5K"
    str_1 = "Z4q;dxp}R,-w=:@"
    dict_0 = {str_0: none_type_0, str_0: list_0, str_1: none_type_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    int_0 = 2319
    list_0 = [int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    bytes_0 = b"\x7f~\x13\x15\xbb\xf6\xe6\xb2\x11\x9e"
    object_0 = module_0.object()
    list_0 = [bytes_0, object_0]
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, list_0, bool_0, bool_0)
    tuple_1 = (list_0, tuple_0)
    module_1.get_new_command(tuple_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    int_0 = -1554
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    float_0 = -2733.103291
    set_0 = {float_0, float_0, float_0}
    list_0 = [float_0]
    tuple_0 = (float_0, set_0, list_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bytes_0 = b"\x03"
    module_1.match(bytes_0, bytes_0)


def test_case_2780():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2781():
    float_0 = 939.649668
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_0: bool_0, bool_1: bool_1}
    module_2.urlparse(dict_0, allow_fragments=bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    str_0 = "${v>mw;TH)zMg\x0be'K"
    bool_0 = False
    dict_0 = {str_0: str_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    bytes_0 = b"\xd7\xc5\xba\x1f\x0c{\x00\x06w\x92\xe2S\x7f"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    str_0 = "M"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    int_0 = 790
    int_1 = -3442
    dict_0 = {int_0: int_0, int_0: int_0, int_1: int_1}
    module_1.match(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    str_0 = "xt0|0(b%W|sl+o;)*}S"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0]
    list_1 = [list_0, list_0]
    module_1.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bool_0 = False
    int_0 = -120
    bool_1 = True
    dict_0 = {bool_0: bool_0, int_0: bool_1}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    float_0 = 1853.0
    list_0 = [float_0, float_0, float_0]
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    str_0 = "W`X3~@H,J9U"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    str_0 = "f\t{iwmu4++yFP<"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    int_0 = -616
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    str_0 = "|ZF@O6fO"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    complex_0 = 1265.29358 - 3130j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    str_0 = "R"
    dict_0 = {str_0: str_0}
    dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: dict_0}
    bool_0 = True
    tuple_0 = (dict_1, bool_0, bool_0, dict_0)
    module_2.urlparse(tuple_0)


def test_case_2798():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2799():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bytes_0 = b"\xc3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    str_0 = "MZ^H\x0bS"
    dict_0 = {str_0: str_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    none_type_0 = None
    str_0 = "32fa9IO$\tZBmh{xjO\r"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    int_0 = -690
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    float_0 = -3933.1524
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    str_0 = "y-*I%Bm]\n2BRf\"B\nSy/'"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    list_0 = []
    dict_0 = {}
    object_0 = module_0.object(*list_0, **dict_0)
    none_type_0 = None
    module_1.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    str_0 = "N%g"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    bytes_0 = b"\x1b\x91`\x8c\x7f\xdf\xaf\xd7\xfa\xda@\xf3W\xa38\xe4\xc4io\xde"
    module_2.urlparse(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    bytes_0 = b"@\x9c\x17q)"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_1.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    float_0 = 1884.2
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    str_0 = "@^^J3H3"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    bytes_0 = b"\x0f6\xde\xfa\r\xdc\xea"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    int_0 = 503
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    str_0 = "h'R"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    bool_0 = False
    none_type_0 = None
    var_0 = module_2.urlparse(bool_0, none_type_0)
    module_1.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    float_0 = 2715.644
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    bytes_0 = b"\x14>h\xea\xf4\xa4\xd2\r[\xd7"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_1: bool_1, bool_1: bool_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    complex_0 = 1551.376 + 1000.79j
    none_type_0 = None
    module_2.urlparse(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    complex_0 = -2157 - 2691.224j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    str_0 = "m-e\x0b`4"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    bytes_0 = b"\xdb\xb8\x87\xd8\xe4hW\xd0\xe9\xac\xf9\x00\xccc\x1b\xd0\x8f\xb9\xa8"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    int_0 = 1842
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    bool_0 = True
    bytes_0 = b"\xd6\xab[\xa5"
    int_0 = -1415
    tuple_0 = (bytes_0, bytes_0, int_0)
    str_0 = "GMm\t&)]\x0bG7~"
    bytes_1 = b"\xf4\xe7XF<a\x87\x06\xd6h"
    tuple_1 = (tuple_0, str_0, bytes_1, bytes_0)
    list_0 = [bool_0, bool_0, tuple_1]
    module_2.urlparse(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    set_0 = set()
    list_0 = [set_0]
    list_1 = [list_0, list_0, set_0, set_0]
    module_1.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    complex_0 = 793.2984 - 2681.7j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    none_type_0 = None
    float_0 = 1696.78
    module_1.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    float_0 = 4309.468604
    dict_0 = {float_0: float_0}
    module_1.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    int_0 = -466
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    int_0 = 14
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    bytes_0 = b"7\x07|\xf4o\x97\x97\xfbc\xed.c}\xf3"
    list_0 = [bytes_0, bytes_0, bytes_0]
    str_0 = "Kt)["
    none_type_0 = None
    str_1 = "O;b.0r_KfcJb+\t"
    str_2 = "PPu87Z4\tj4-[cV\\"
    str_3 = "~L/:Lq$znr"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bool_0 = False
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, tuple_0: tuple_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    int_0 = -575
    dict_0 = {}
    module_1.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    list_0 = []
    str_0 = "}733v,G6CcIQO;&pd"
    str_1 = ""
    float_0 = -2036.4
    str_2 = "24GwmfV-M"
    dict_0 = {str_0: str_0, str_1: float_0, str_2: list_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    complex_0 = 4283.7 - 916j
    bool_0 = True
    module_1.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    bytes_0 = b"bF\x98\xc1\x08\x13Wc7\xeai\x1bH"
    int_0 = 1392
    bytes_1 = b"C9\x16\x99\x16\xf5"
    tuple_0 = (bytes_0, int_0, bytes_1, bytes_0)
    set_0 = {tuple_0, tuple_0, bytes_1}
    list_0 = [set_0]
    tuple_1 = (set_0, tuple_0, list_0, bytes_0)
    none_type_0 = None
    module_1.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    int_0 = 748
    tuple_0 = (int_0,)
    bytes_0 = b"\xd9jA\xf3\xb9"
    set_0 = {tuple_0, bytes_0}
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    bytes_0 = b"\xa20\x83!\x1a\x98_w\x85\xb9\xfb\xb0\xe6\x92N>\xach"
    int_0 = -2197
    module_1.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    bytes_0 = b"\xae\xfd\x86P\xc5IL\x92dz~\xf3Pd"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    set_0 = set()
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    float_0 = -56.26
    list_0 = []
    module_1.match(float_0, list_0)


def test_case_2848():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2849():
    float_0 = 6908.0034
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bytes_0 = b"TG4T\x92"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    int_0 = 368
    module_1.match(int_0, int_0)


def test_case_2852():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bytes_0 = b"F\x14'\xee\x8d\x8e\xb2f\xf3\xae\x16R\x1b\xc3\x9c\x8e\xd0\xea\xb3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    str_0 = "`fKOu3T\r6\x0c:4;&"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0, set_0)
    module_1.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    int_0 = 19
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    float_0 = 390.0
    str_0 = "w n X\x0czeAJs:"
    set_0 = {float_0, str_0, str_0, float_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    float_0 = -4715.0868
    bool_0 = False
    list_0 = [float_0, float_0, bool_0, bool_0]
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    set_0 = set()
    list_0 = [set_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = 'rK{("#be'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    str_0 = "^8<52"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    int_0 = -3277
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    float_0 = -1667.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    str_0 = "`\\(\r?\rz}Ymz"
    module_1.get_new_command(str_0, str_0)


def test_case_2865():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_2866():
    float_0 = -617.637601
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    bytes_0 = b"i\x9c<P\xadpd\\d\x15\xd3\xb4\xb4\xaf5\x90\xe5i\xe4\xf0"
    int_0 = 58
    int_1 = 424
    tuple_0 = (bytes_0, int_0, int_0, int_1)
    set_0 = {tuple_0, bytes_0, bytes_0, bytes_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    float_0 = 1130.921
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    set_0 = set()
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    float_0 = 186.165
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    str_0 = "jvY^X4-G*$07(Km^5.Pr"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    bytes_0 = b"^\xfb\xf6Q,~\xa7\xc5I\x9e\xb5\x1aBH]"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    str_0 = "'3\x0bs\x0b5\x0c'\x0cWdK<es$\x0cT"
    dict_0 = {str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    bytes_0 = b"\xe4\xda\xa0p\xb1\x16$\x03\x0c\x96\xac\xa1tj\xf4\xb0\xaf"
    set_0 = {bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    int_0 = 3337
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    str_0 = "6a3l.\\qeZe\x0bp^.E="
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    bytes_0 = b"\xc2\x04M-\xe1\xf5"
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [bytes_0, list_0, list_0]
    module_1.get_new_command(bytes_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    str_0 = "-Q\x0c}=9~"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    object_0 = module_0.object()
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    bool_0 = False
    set_0 = {object_0, var_0, bool_0}
    module_1.match(set_0, set_0)


def test_case_2880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2881():
    bytes_0 = b"R\xf9\xf6Tu\x14D.\xcf\x9fK\xf3\xa3\xe0<\xd5\xfb\x9a\x0b\x8e"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, bytes_0, list_0, list_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    bytes_0 = b""
    str_0 = "+fA}C?pr6,"
    module_1.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    int_0 = 368
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    str_0 = "nQ"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    object_0 = module_0.object()
    module_1.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    complex_0 = 909.99235 + 28.311j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    int_0 = 291
    list_0 = [int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    str_0 = "ulm@\x0b"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    object_0 = module_0.object()
    tuple_0 = (object_0,)
    module_1.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    bytes_0 = b"@\nX\x0b\xb0z-\x1f:\x8fa\xa5:je\x0f"
    module_1.match(bytes_0, bytes_0)


def test_case_2893():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2894():
    bytes_0 = b"gA\t\x9eN\xfe\xb7\x05)\xfb\x19\xcc"
    dict_0 = {bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    str_0 = "0ga"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    bytes_0 = b"\xfd"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    int_0 = 1018
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    bool_0 = False
    str_0 = "1SQT/;&0k:M8\n"
    set_0 = {bool_0, bool_0, str_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    int_0 = -355
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    bytes_0 = b"\xd3,d[;\xe7\xcd"
    module_1.match(bytes_0, bytes_0)


def test_case_2903():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_2904():
    bytes_0 = b"p\xe1"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    list_0 = []
    complex_0 = -1981.2 - 2349.6319j
    list_1 = [list_0, list_0, complex_0]
    float_0 = 372.570457
    module_1.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    str_0 = ",w#,AN"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    float_0 = 2482.42734
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    complex_0 = 1595 + 502.666j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    bool_0 = False
    bool_1 = True
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    int_0 = -291
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bytes_0 = b'Wie@\x80"\xc9\xce\xbd_\xb5\xd8!'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    int_0 = -1867
    module_2.urlparse(int_0)


def test_case_2914():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_2915():
    str_0 = "Aso\x0bs"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    int_0 = -2985
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


def test_case_2917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2918():
    complex_0 = -621 - 276.639j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


def test_case_2919():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2920():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_1.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    str_0 = "8`K~Q"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    bytes_0 = b"\xc6.s\xed\x03\x92\x1c\x13\xe1\xba\xea"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "&JQH,aQTi7W'}XS'"
    bool_0 = True
    bool_1 = True
    set_0 = {str_0, bool_1}
    tuple_0 = (dict_0, str_0, bool_0, set_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    float_0 = 2782.5898
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    float_0 = 3380.62608
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    bool_0 = True
    bytes_0 = b"\xe4"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    bytes_0 = b"u\xc0rX\x87\x90\x11"
    set_0 = {bytes_0}
    module_1.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    bytes_0 = b"\xfbt\xb9IT\x17?\x99\x9f"
    set_0 = {bytes_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    int_0 = 166
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    bytes_0 = b",\x855\x86\xfe\x17\x11\xf6k\x83\xa7\xcbio"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    float_0 = 4689.85471
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    complex_0 = 2632.9561 + 3631j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    bytes_0 = b"{\x02\x19\xf7\xaa\xd4`!\xe8\xfb\xd1L"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    bytes_0 = b")1\xbe\x97F\x1e\x13\xfd\xaa\xc4~\xfe\xc3\x1f\x89\xe0\x1a\xc4\xd0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    bytes_0 = b"\xc1\xb1\x8f3\x89MYg\xb3\x8b/\xbe\xd0\x8b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    bytes_0 = b"-\xbe\xdc\xda\n\xcc\x88\x0e(\xe1\xfdU\xb2\xe9Qf\x8c\xe9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    str_0 = "2cM)@"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bytes_0 = b"\xf7\x83\xd9\x90\tN\xeb\xc4\xc8\x00\x07\x91\x1e\xa2\xbb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    float_0 = 1111.004848
    dict_0 = {float_0: float_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = -2713
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    int_0 = -556
    bytes_0 = b"-\xda^\x90"
    dict_0 = {int_0: bytes_0, bytes_0: int_0}
    module_2.urlparse(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    int_0 = -1286
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    bool_0 = False
    set_0 = {bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    int_0 = 3726
    list_0 = [int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    complex_0 = -1655.91 - 773.36j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    int_0 = -1105
    set_0 = {int_0}
    tuple_0 = (int_0, int_0, int_0, set_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


def test_case_2950():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2951():
    int_0 = -2027
    module_0.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    float_0 = -2288.1374
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    str_0 = "`lD{f"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bool_0 = False
    bytes_0 = b"/\xb2^\xfa,"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    str_0 = ']NMZ\\J\t/IoY4o-"\noM'
    dict_0 = {}
    list_0 = [dict_0, str_0, dict_0, dict_0]
    list_1 = [str_0, str_0, dict_0, list_0]
    module_2.urlparse(list_1)


def test_case_2956():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2957():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    bool_1 = True
    module_1.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0]
    none_type_0 = None
    module_1.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    int_0 = -590
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    set_0 = set()
    module_1.match(set_0, set_0)


def test_case_2961():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_2962():
    str_0 = "+k]U."
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    float_0 = 2986.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0]
    module_0.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    bytes_0 = b"\xa6\xfc\xcby"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    str_0 = "qxDmbQ/=N"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    int_0 = 1260
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    float_0 = 3036.7
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    tuple_0 = ()
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    tuple_0 = ()
    object_0 = module_0.object()
    module_1.get_new_command(tuple_0, object_0)


def test_case_2972():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2973():
    int_0 = -798
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    bytes_0 = b"\xfcS\xd6-,\x83"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    complex_0 = 497 + 1143.883998j
    list_0 = [complex_0]
    module_1.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    int_0 = 1609
    dict_0 = {int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    int_1 = -476
    list_0 = [tuple_0, int_1, dict_0, tuple_0]
    module_1.get_new_command(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    str_0 = "H\n4h\n|"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    str_0 = "L=t#\x0c\\$\t"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    int_0 = 1700
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    int_0 = 3432
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = -5029
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    list_0 = []
    bytes_0 = b'\x8e\xa0\x08\xfcr\x82\xdc?A6\x0c\x11\xce\x1f\x12\x07\x0b"N'
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    bytes_0 = b"\xb8#{\xfa\xae\x90^\x15\xd4\xb3\xb5\xbfe\xb1\xc7\xad\xd3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    complex_0 = 1787.443485 + 3921.35525j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    float_0 = -3487.92
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    int_0 = 975
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    str_0 = '"\x0ck'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    bytes_0 = b"\xf1\xa0(D\x88W!\xc9\x8ba"
    bool_0 = True
    module_1.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    float_0 = 285.368
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    str_0 = "EgT6!b\x0b?;<BY>F"
    str_1 = "@kK@ba_"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_1: str_1}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    bytes_0 = b"i]H#"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_2992():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_2993():
    bytes_0 = b"\xfeH\xc4\x1d\xdfY\xa8\xbb;\x85\xc0\x93=\x9f#"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_1.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    complex_0 = 197.23496 - 1560j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    bytes_0 = b"|KV\xfc\xd1\xd7+[a\x90d\xb3\xef5\xfc|B\x8b"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    complex_0 = -2810.8316 - 336.6j
    set_0 = {complex_0, complex_0, complex_0}
    module_1.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    int_0 = 1507
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    int_0 = 149
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    bytes_0 = b"k\x93\x98\x84\xc6\xa8WR"
    set_0 = {bytes_0}
    bytes_1 = b'l9"p\xe9\xa3\xe2\xa4\x12\x1fs\xcdg\xa2'
    tuple_0 = (bytes_0, set_0, bytes_1)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


def test_case_3002():
    list_0 = []
    object_0 = module_0.object(*list_0)


def test_case_3003():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3004():
    str_0 = "G;"
    set_0 = {str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    str_0 = "tp@ZRILq>I]4\t"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    int_0 = -4050
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = []
    tuple_0 = (dict_0, bool_0, list_0)
    module_1.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    float_0 = -3886.4697
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    bytes_0 = b"\x9e1Wh\x8b\xfb\xf7N\xe0\xea\n\x9c"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    bytes_0 = b"i\x12N}\r\t\xef\xbeq\xcb\xf9\xe9I "
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    int_0 = 3466
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = 'q0wF$S:`+v!h-"\\m)'
    none_type_0 = None
    str_1 = "F"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    none_type_0 = None
    int_0 = -1057
    module_0.object(*none_type_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    int_0 = 591
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    bytes_0 = b"\xdem\xac5j\x8d!\xa5\xe8\x9c\xf7\x83\x8b7\xa5\xd4\xb9\xd0"
    bytes_1 = b"\x9eK"
    module_1.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    int_0 = 2055
    object_0 = module_0.object()
    bool_0 = True
    tuple_0 = (object_0, bool_0)
    dict_0 = {int_0: tuple_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bool_0 = False
    bool_1 = True
    module_1.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    int_0 = -1939
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0, tuple_0, int_0]
    tuple_1 = (tuple_0, list_0)
    module_1.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    bytes_0 = b"\xa5\xfa\xe0\xb7G\xda\xcd\xe1\xc8\t\xce]\xb0\xf0R;d"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    complex_0 = 1313.43739 + 2865.171452j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    float_0 = 2777.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    dict_1 = {float_0: float_0, float_0: dict_0}
    bool_0 = True
    module_1.get_new_command(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    int_0 = 1025
    set_0 = {int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    bytes_0 = b"y\xdb\xc2#\x8a\xc4@\xfe\x1cR'\xcf?\xa7"
    none_type_0 = None
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    float_0 = -742.065196
    module_2.urlparse(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    none_type_0 = None
    bytes_0 = b"T\x0eO^\xa6"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    int_0 = 574
    module_0.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    str_0 = "2=\x0bjDmx(he~vA<"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_1.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    int_0 = -2414
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    int_0 = 2301
    bool_0 = False
    module_1.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    str_0 = "7R[nWT%h"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(bool_0, dict_0)


def test_case_3036():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3037():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    float_0 = -1067.29997
    set_0 = {float_0, float_0, float_0}
    module_1.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    str_0 = 'udKlNUK%en\x0c"ZI'
    set_0 = {str_0, str_0}
    module_1.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    bytes_0 = b"$\xff]\x86\xf7\xb2\xe2\x15&\xf8\x9as@W\xb3\x93fP"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    bytes_0 = b"\xcc\x91c\xceu\x90\x9e\xfa%\xcf"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    float_0 = 569.01
    list_0 = [float_0, float_0]
    module_1.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    bytes_0 = b'\x84t\x10\r"\xc0\x8d\x08O'
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    set_0 = set()
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    str_0 = "|A3DeO-O*J:"
    module_1.get_new_command(str_0, str_0)


def test_case_3047():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3048():
    bytes_0 = b"\xad\xbdj\xe3\xbar"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bytes_0 = b"}P\x83\xe8I\xa3^\x8a\xc6\x8e#\xa0|\x14>2"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    str_0 = "!e.nD},O9^6#?8"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    str_0 = ""
    var_0 = module_2.urlparse(str_0)
    module_1.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    float_0 = 2420.88
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    object_0 = module_0.object()
    bool_0 = True
    bool_1 = False
    tuple_0 = (object_0, bool_0, bool_1)
    bool_2 = True
    tuple_1 = (tuple_0, bool_2)
    none_type_0 = None
    module_1.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    str_0 = "eF"
    bytes_0 = b"\xd6\xf0c?C\xdd\x8d\x16&\x98\x95t"
    tuple_0 = (str_0, str_0, bytes_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    float_0 = 1945.1354
    module_1.match(float_0, float_0)


def test_case_3056():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3057():
    int_0 = -160
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    bool_0 = True
    module_0.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    int_0 = 2013
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    object_0 = module_0.object()
    none_type_0 = None
    module_1.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    int_0 = -219
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    bytes_0 = b"\xa2\x90\x82\xcc\xdcu>)t\x866\xf1\xfc\xd2\x05\xfe\xd9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    int_0 = 1580
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    bytes_0 = b"x\xb8\x15\xc6\xff3\xd0iy"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    int_0 = -2219
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    complex_0 = -2214.09981 + 3212.39j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    complex_0 = -1387.77191 + 3040.53j
    int_0 = 1836
    tuple_0 = (complex_0, int_0)
    bool_0 = False
    tuple_1 = (complex_0, tuple_0, int_0, bool_0)
    set_0 = {tuple_0}
    module_1.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bool_0 = True
    list_0 = [bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    str_0 = "G\x0b<Zx"
    set_0 = {str_0, str_0}
    dict_0 = {}
    tuple_0 = (set_0, str_0, dict_0, str_0)
    list_0 = [tuple_0, set_0, str_0]
    int_0 = 643
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    bool_0 = True
    int_0 = -366
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    float_0 = -602.9263
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    int_0 = -3149
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    str_0 = "wl\x0c;"
    complex_0 = 50.77 - 320.444827j
    set_0 = {str_0, str_0, complex_0, str_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    int_0 = -2329
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_1.match(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    int_0 = 4235
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    int_0 = -1724
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    float_0 = -3470.508
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    str_0 = "LW"
    str_1 = "\"!~g6QirD2W6Qt}0bN'"
    str_2 = "PIlfco7 Zx qYTm"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    int_0 = 1681
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    bytes_0 = b"\xe0F\x98<\x13\x82\xe3\xaa\x865\x11T\x01\xa0\xe7"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


def test_case_3082():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3083():
    float_0 = 443.88
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    float_0 = 427.02
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    bytes_0 = b"\x04\x95\x14\xa1,\x08\xbe\xc6\x13"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    float_0 = 1154.71239
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"\x18\xd4G\x1c\xa7\x84o)g\xec4\xcan\xd5\xe4\xfd\xb7{\xfa\xd0"
    bool_0 = False
    list_0 = [bytes_0, bytes_0, bytes_0, bool_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    float_0 = 3447.42355
    object_0 = module_0.object()
    dict_0 = {float_0: float_0, object_0: float_0}
    str_0 = "7Xp1\r$9\r"
    tuple_0 = (str_0,)
    list_0 = [float_0, dict_0, dict_0]
    tuple_1 = (dict_0, tuple_0, list_0)
    module_1.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    bytes_0 = b"\xda7\xa6x\x1f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    str_0 = "E80(G\x0bU\x0cgA{IM"
    int_0 = -1522
    module_1.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    int_0 = 1988
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, set_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    bytes_0 = b"r\xb9\xb7\xe7\x18\xd3w\x17r\xcd\xd5\xac\xbd\xfe"
    list_0 = [bytes_0]
    tuple_0 = (list_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    bytes_0 = b"\xc9\xf4`\x16\xfc"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    float_0 = -1352.21
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    bytes_0 = b"\x95\xb2\x7f\x7f(\x97q\x90\x8b\xb8q B\xb0\xcd\xd8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xe6\x95i\x0eJv\xad\x1bu\x02"
    int_0 = 273
    tuple_0 = (bool_0, set_0, bytes_0, int_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    int_0 = 2522
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, int_0, dict_0)
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    str_0 = "b7"
    set_0 = {str_0}
    module_1.get_new_command(set_0, set_0)


def test_case_3100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3101():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    int_0 = 2922
    module_2.urlparse(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    bytes_0 = b"\n\xd9saA"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    str_0 = '@"|RS=VD1vSf'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    str_0 = "6Z"
    bytes_0 = b"i\xf9\x82\xc72\xf9"
    list_0 = [str_0, str_0, bytes_0, str_0]
    module_1.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1, bool_1)
    float_0 = 3687.2
    module_1.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    str_0 = "=%_"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    float_0 = 504.37
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = -1036
    set_0 = {bool_0}
    tuple_0 = (list_0, int_0, set_0, bool_0)
    list_1 = [list_0, bool_0, tuple_0, tuple_0]
    module_1.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    int_0 = 1065
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    str_0 = "<?"
    tuple_0 = (str_0, str_0)
    bytes_0 = b"\r\xbb\xc8\n\xff\x9dK>l\xae\xc9\xcf"
    dict_0 = {tuple_0: tuple_0, bytes_0: bytes_0}
    module_1.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    str_0 = "9bphwE!A^iZc.\x0cg-\x0b"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    int_0 = -3884
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    bytes_0 = b" \x91\x80\x15\xa1\xd0B\x91\xa1\xc0"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    str_0 = "]P\\"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    bytes_0 = b"\x99\xf1nK\xd2\xd5\xddwC\xe2\xbf\xf1aSW\x04(\x95"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    str_0 = "'?72S}\rio"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    int_0 = 1550
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    int_0 = -1855
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    bytes_0 = b"r3\xba\xed}V3\xc3\x11\xab"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    str_0 = "Ob7$o$FRJ\x0c;T"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    float_0 = 1599.9
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    bytes_0 = b"\x7f2\xf4\x18"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    float_0 = -2016.4048
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    bool_0 = False
    str_0 = "#g\x0cW}5?*N/>\x0c\\7ed5."
    module_1.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    none_type_0 = None
    bool_0 = True
    bytes_0 = b"X\x99A"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_1.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    float_0 = -332.54
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    str_0 = "h+/A\x0bvv_coo G%kd!"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    int_0 = -4198
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    str_0 = "/s?$O1|t;lQWS2?\n\x0c\r"
    set_0 = {str_0, str_0, str_0}
    str_1 = "*&I~'>V.\""
    module_1.match(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    none_type_0 = None
    bytes_0 = b"\xe0"
    list_0 = [none_type_0, none_type_0, bytes_0]
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    bytes_0 = b"s#\x81b\x95W\x91\x1a"
    bytes_1 = b"\x80m\xde\xfe"
    module_1.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    float_0 = 537.98
    bool_0 = True
    module_1.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    float_0 = 1747.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    object_0 = module_0.object()
    module_2.urlparse(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    int_0 = -3400
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    bytes_0 = b"j~\x17F\x84H\xc8ne\xeb\x11"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    str_0 = "@\\CbjJSW2\tr]41:-~~yo"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3140():
    int_0 = 582
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    float_0 = -2880.32
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    bytes_0 = b"\x0e#\xef\x17m\xfd\xa6eZ\x9c\x1c"
    tuple_0 = (bytes_0,)
    module_1.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    bytes_0 = b"\xe6\x84cA\xc4(\x89\xcb\x9f]\xc0M"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    bytes_0 = b"\xf0 \x99\\H\x92\x13\xf7\x9f3\xa1"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    float_0 = -1000.7643
    set_0 = {float_0}
    bool_0 = True
    tuple_0 = (float_0, set_0, bool_0)
    module_1.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    str_0 = "\x0b);]G_YBzbRL8C!"
    var_0 = module_2.urlparse(str_0, str_0)
    bool_0 = False
    dict_0 = {var_0: bool_0, bool_0: bool_0, var_0: str_0, bool_0: bool_0}
    module_1.match(dict_0, var_0)


def test_case_3147():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3148():
    int_0 = -222
    set_0 = {int_0, int_0}
    int_1 = -535
    list_0 = [set_0, int_1]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    bytes_0 = b"gdz"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    float_0 = 1498.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    int_0 = 516
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    int_0 = -1443
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    bytes_0 = b"\x11\x98\x03\x12"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    int_0 = 2206
    set_0 = {int_0}
    module_1.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    str_0 = '"jxC/Dn%<m]6;'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    int_0 = -212
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = -192
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    int_0 = -3505
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    bytes_0 = b"r\xdb\xc2"
    bytes_1 = b'\xd7\xd1"8zt\xcd\xa7\xb30\xa2\xa36ko\xe2\xcf"U'
    module_1.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    int_0 = -5058
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    int_0 = -1546
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    complex_0 = 2605.23 + 843.129j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    tuple_0 = (complex_0, complex_0, complex_0, dict_0)
    module_1.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    int_0 = -2357
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    int_0 = 2082
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    int_0 = 1423
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    str_0 = "25I"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0]
    module_1.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    int_0 = 4854
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    bytes_0 = b"J\x19+\xd6\xb5\xbb\xbd\xbck{\x08\x9d\x84od=y"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    str_0 = "MT_@` zl"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    float_0 = -410.2
    module_1.get_new_command(float_0, float_0)


def test_case_3175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3176():
    int_0 = -4853
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    int_0 = 1659
    list_0 = []
    tuple_0 = (int_0, list_0)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    bytes_0 = b"?\x89g\xa67\xbf\x87\xd7\xd4\x8bH\x16\xbcGH"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    float_0 = 345.24574
    module_2.urlparse(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    str_0 = ";osNzh!uOQ}&Y<e)AN\t"
    bool_0 = False
    dict_0 = {str_0: str_0, bool_0: bool_0, str_0: bool_0}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    complex_0 = 4462.788484 - 2159.07583j
    module_2.urlparse(complex_0, allow_fragments=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    bytes_0 = b"\x9c\xdfGF\xf9Z\r\xcc\xb2"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    bool_0 = True
    float_0 = -2504.61779
    module_1.match(bool_0, float_0)


def test_case_3185():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3186():
    float_0 = 902.4207
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    bytes_0 = b"\xe8\xa3[\xb0\xa4`\x05"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    bytes_0 = b"/H\xcd\xe9\x9aA\xd4\x16"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    str_0 = "jf,q\rp?4lTC!t?"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    str_0 = "\x0bo[Qm+NdqTZkM"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    bytes_0 = b"\x98^\x9b\x8b\x14\xe9\xe3\x122\xb9\x14\xac: \xfe\xb0\x87\x90\x80\x9b"
    module_1.match(bytes_0, bytes_0)


def test_case_3193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3194():
    int_0 = -2076
    none_type_0 = None
    module_2.urlparse(int_0, allow_fragments=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    bytes_0 = b"2z"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    bool_0 = True
    bytes_0 = b"\x84\x0et\xf1\xbb?\x88=\x800\xb6\x86\x93\xe0\x95\x1c"
    tuple_1 = (dict_0, bool_0, dict_0, bytes_0)
    tuple_2 = (tuple_1, bool_0)
    module_1.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    object_0 = module_0.object()
    set_0 = {object_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    str_0 = "tpMyoj36"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    bytes_0 = b"\x96\x97"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    float_0 = 1215.53556
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    int_0 = -166
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    bool_0 = False
    bool_1 = True
    module_1.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    int_0 = 672
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    bytes_0 = b"{\xe4\xb3j9+\x8b\xc2\xd9{\xb2"
    set_0 = {bytes_0}
    module_1.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    bytes_0 = b""
    str_0 = ""
    bool_0 = True
    dict_0 = {bytes_0: bool_0, str_0: str_0}
    dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, str_0: bytes_0, bool_0: dict_0}
    module_1.get_new_command(dict_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    complex_0 = 3443.21045 - 3878.54j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    int_0 = -2674
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    float_0 = -1610.0
    module_2.urlparse(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    int_0 = 1574
    str_0 = "5 4 D6:fh|~Y!\n"
    tuple_1 = (tuple_0, int_0, str_0)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    int_0 = 3299
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    bool_0 = False
    complex_0 = 2501.069 - 184.8073j
    module_1.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    bytes_0 = b"\x0eY\xf7\xd7FO) \xf8\xb5p2\xdf\x11\xee\xf0T\xbcp5"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bytes_0 = b"E\x1c\x9cDq\xb1"
    module_2.urlparse(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    str_0 = "v\x0c4}RB"
    module_1.match(str_0, str_0)


def test_case_3215():
    set_0 = set()
    var_0 = module_2.urlparse(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    str_0 = "X>i\t'a YS\tpo%"
    float_0 = 1327.0
    tuple_0 = (str_0, float_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    str_0 = ""
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    bytes_0 = b"\xcc\xff\xea\xca!n\xef\xb3~H\xd2U\x9a%O\x1bY/q"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    int_0 = 773
    bool_0 = False
    bool_1 = False
    tuple_0 = (int_0, bool_0, bool_1)
    str_0 = "0"
    tuple_1 = (tuple_0, str_0, tuple_0)
    module_1.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    float_0 = -911.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    str_0 = "hEas%-1$)UTv\t"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    float_0 = 1174.75134
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    int_0 = 362
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    str_0 = "-,z[xPf"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    bytes_0 = b"S\x83\x1ar)"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    float_0 = -1629.1314
    module_1.get_new_command(float_0, float_0)


def test_case_3227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3228():
    float_0 = -3020.56
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    bytes_0 = b"\xb0{eF"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    complex_0 = -4343.7 - 421.6j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    float_0 = 1155.4
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    bytes_0 = b"`\x82L\xc6\xd3\x98\xd0\xd4\x952\x85\x02"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    bytes_0 = b")4`%\xe2\x8f\x82\xd2\xee\xa8\xeb\xbe$\xa1\xe5\xa7\xb9\xb3"
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0)
    tuple_1 = (dict_0, tuple_0)
    int_0 = 882
    tuple_2 = (bytes_0, tuple_1, int_0, tuple_1)
    module_1.match(tuple_2, tuple_1)


def test_case_3234():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3235():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    bool_1 = False
    module_1.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    int_0 = 2647
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=int_0)
    dict_0 = {int_0: int_0, int_0: int_0, int_0: var_0}
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    bytes_0 = b"\xd9a?nAt5\x9aE\xba"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    bytes_0 = b"\xda\x07\x13\xcdpfb\x8c\x9d\xa71\x19\xfe\x8c\x90Ep\x18\xcb\x83"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    int_0 = -52
    list_0 = [int_0, int_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    float_0 = -348.4208
    set_0 = {float_0, float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    bytes_0 = b"Hr:!\x86\xe996{bE\xa4\xd7YQ"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    str_0 = "UG(0A*LP'&i[8 V"
    module_1.get_new_command(str_0, str_0)


def test_case_3245():
    pass


def test_case_3246():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3247():
    none_type_0 = None
    module_0.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    str_0 = '1L"my2 q%,Wd|h%'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0, list_0)
    bool_1 = True
    module_1.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    str_0 = "w"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    float_0 = -2193.13469
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bytes_0 = b"\xd3\xe6%\xb9\xcd"
    module_1.match(bytes_0, bytes_0)


def test_case_3253():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3254():
    str_0 = "iaYJa"
    bytes_0 = b"\x04"
    module_1.get_new_command(str_0, bytes_0)


def test_case_3255():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_3256():
    float_0 = 586.8
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    str_0 = "yQ0hr-4$uR3"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


def test_case_3259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3260():
    float_0 = -1757.6
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    int_0 = -829
    set_0 = {int_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    str_0 = "-zkC#VT>wAL~ q"
    module_1.match(str_0, str_0)


def test_case_3263():
    pass


def test_case_3264():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3265():
    bytes_0 = b"\x8a\x89\xe6.\xeb\x0f)\x00\xeb\x1d\x8e\xc3\x18'\xec"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    bool_0 = False
    object_0 = module_0.object()
    module_1.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    bytes_0 = b"\xe1|1\xb1\xc9\x99)"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    bytes_0 = b"\xea\xc5\x15 \x03/\x1d\x03\xa2\x0e\xe4\xd5A\n\xf8\x08\xb9Y\x19\xad"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_3269():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3270():
    bytes_0 = b"\x9fR\xa1\xc5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    bytes_0 = b"9\x8b0O\xbfL\xb9\xd9\xe2\xb4N\xea\x80o \xa5\x02C\xbb\xbc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    bytes_0 = b" \xbft\xb1\tC]\xc2"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    float_0 = 1741.11
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    float_0 = 1819.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    str_0 = "]B;1M\r\x0bXc"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    int_0 = -598
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    int_0 = 1421
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    complex_0 = -635.164 - 1925.14862j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = False
    tuple_0 = (list_0, bool_1)
    float_0 = -2929.0
    list_1 = [tuple_0, list_0, float_0]
    module_1.match(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    float_0 = 856.956
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    bool_0 = True
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_0, bool_1}
    tuple_0 = (var_0, bool_0, set_0)
    tuple_1 = (tuple_0,)
    module_1.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    int_0 = -1379
    none_type_0 = None
    module_1.match(int_0, none_type_0)


def test_case_3284():
    set_0 = set()
    var_0 = module_2.urlparse(set_0, allow_fragments=set_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    bytes_0 = b"\xb3\x07x\xcb\xe5B\xc9\xb8\x11\x1a^\xae\xc5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    complex_0 = -2052.2156 - 2218j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    float_0 = 2559.03
    module_1.get_new_command(float_0, float_0)


def test_case_3288():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3289():
    bytes_0 = b"\xa0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    float_0 = -2513.12
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    str_0 = "bE/k:5"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    bytes_0 = b"\xf3"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    complex_0 = -3305.57162 + 150j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    bytes_0 = b"\x83\x9e\xde"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    complex_0 = -272 + 1140j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    str_0 = "Op\ns"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    bytes_0 = b"\xba4\xc1!e\xb75\xbe"
    module_0.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    int_0 = -1098
    tuple_0 = (int_0, int_0, int_0)
    bool_0 = True
    tuple_1 = (tuple_0, int_0, bool_0, int_0)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    bool_0 = True
    none_type_0 = None
    module_2.urlparse(bool_0, allow_fragments=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    float_0 = -174.181
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    bytes_0 = b"\xf0\xce\xccS\x98h\x89\xc6\x17\xfe"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    bytes_0 = b"\r\x99w\xb9\xde\\"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    float_0 = -1035.44
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    str_0 = "}5!J[|x}~E"
    bytes_0 = b"\x0e\x97\x04_\x98r*\x1f\x19$Y\xf2\xdc/\xdc\x9d5\x93"
    module_1.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    none_type_0 = None
    bytes_0 = b'\x04(\x84"\xe9\xc4\x98O7\xacc'
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    complex_0 = 572.478789 + 735.35338j
    module_1.get_new_command(complex_0, complex_0)


def test_case_3308():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3309():
    str_0 = '"P5<\x0bc\t[k:uV\x0b^!RH3o'
    tuple_0 = (str_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    complex_0 = -2234 + 916.89j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    int_0 = 2129
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    bool_0 = True
    set_0 = {bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    int_0 = 764
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    str_0 = "{=TuU&yXus?v#a2(<\rP8"
    module_1.get_new_command(str_0, str_0)


def test_case_3317():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3318():
    int_0 = 1316
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bool_0 = True
    object_0 = module_0.object()
    set_0 = {bool_0, bool_0, object_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    int_0 = -2473
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bytes_0 = b""
    bytes_1 = b"\xec\x90\x84r\x80e\xf3\xa9\xe0\xcc\x9d\x0eg\xe9(\xcf\r"
    set_0 = {bytes_0, bytes_1}
    tuple_0 = (set_0,)
    module_1.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    int_0 = -1584
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    complex_0 = 1781.81509 - 1523j
    tuple_0 = (complex_0, complex_0, complex_0)
    module_1.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    float_0 = -2273.1043
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    str_0 = 'Uf&t9&"('
    module_1.get_new_command(str_0, str_0)


def test_case_3327():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3328():
    str_0 = '\n}JBl"E@ \rUq0+7%~gH'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    str_0 = "1]fb"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    bytes_0 = b"vF\x84\xae\xc5\xfd"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    int_0 = 221
    dict_0 = {}
    dict_1 = {int_0: int_0, int_0: dict_0}
    module_1.match(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    bytes_0 = b"\xa7\xe0l\xfa\xa1\xf0n7\xf3V"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    float_0 = -614.7
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    int_0 = 3094
    tuple_0 = (int_0,)
    list_0 = [tuple_0, int_0, int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    int_0 = -296
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    str_0 = "4l"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    str_0 = "R0:?"
    module_1.match(str_0, str_0)


def test_case_3340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3341():
    str_0 = "CG50DU0bjM.@"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    bytes_0 = b"\xd3\n~\x9a\xfb[\xa2U\xd2x\xa3\xe8x#"
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    str_0 = "j(4B}3M\r[dB"
    list_0 = [str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_0.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    complex_0 = 503.4247 + 2832.14j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    set_0 = {var_0, var_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    bytes_0 = b"\x9a\xd0?\xb5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    str_0 = "T/j?%\rN}/\nfC%ER+\n_q"
    bytes_0 = b"\xfc\xb4\xe4r\x9b\xb7\x03"
    bool_0 = False
    set_0 = {str_0, bytes_0, bool_0, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    bytes_0 = b"\xbf\t\xd4?5\xfa\xe5R9aQ\xb7\xe2\xa1"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    complex_0 = 1438.1998 + 1803j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    str_0 = "@3c,5*J[_hz"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    str_0 = 'Hn6-P"1}P\n7lv'
    module_0.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    complex_0 = -684.21639 - 1451j
    dict_0 = {complex_0: complex_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_2.urlparse(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    int_0 = -4578
    complex_0 = -1632.7 - 2417.09118j
    tuple_0 = (int_0, int_0, complex_0, complex_0)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    str_0 = "Me0%!@N\n"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    int_0 = -30
    list_0 = [int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    bytes_0 = b"+*\x88@\xbe\xb2\x8d\xe9\xa8\x93"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0, bytes_0, list_0)
    tuple_1 = (bytes_0, bytes_0, tuple_0, list_0)
    none_type_0 = None
    module_1.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    float_0 = 2295.4727
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bytes_0 = b"\x83\x07j\xfc\x9eX"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    int_0 = 222
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    int_0 = -657
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    str_0 = "z"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    bytes_0 = b"\x96B"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    bytes_0 = b"\x89\x8e\xc2\xce%\xcf:\x0b\x02\xef"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    float_0 = -604.56
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    float_0 = 58.2884
    dict_0 = {float_0: float_0, float_0: float_0}
    module_1.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    str_0 = "(f"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    str_0 = "9"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    str_0 = "7X^"
    int_0 = -799
    module_1.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    float_0 = 2081.169672
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    bytes_0 = b'\xca\x98\xb7\xccV\xb1\x91\xc4"\xfa\x92\xb1\xc2q'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    bytes_0 = b"\xb8i\\b\x14f\x17C?~#\xd6Bx\x1d"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    bytes_0 = b"\xd8\x1c,S\xc2"
    float_0 = 669.83929
    module_1.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    int_0 = 370
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, bool_0: int_0, bool_0: int_0}
    module_1.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    str_0 = "uFV0gPjJ0o1\x0b0Z"
    module_1.match(str_0, str_0)


def test_case_3379():
    pass


def test_case_3380():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3381():
    str_0 = ",]6k`"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    str_0 = "roC[L"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    str_0 = "ADS;[[yxt"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    str_0 = 'XyAy*1_m@"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    bytes_0 = b"\x97\xa2\xcc\xa1\x8cX\x9e\xd54\xca\x0c\x93n\x11"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    bytes_0 = b"En\x83$\x17\xbb<\xd2\xccl\xafw"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    bytes_0 = b"\xd5\xa2\x87(q\xdcu\xa3h\xa85\x9c\xbe`\x1f{\x9f\n\xf4\x00"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    int_0 = 1063
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    bytes_0 = b"\x03\xab\xf3\xd7\xbe"
    bool_0 = False
    module_1.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bytes_0 = b"#&\xe7\xf5\x07~\xa7Mve\x01\xde&"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    int_0 = 6049
    bytes_0 = b"~\x8a\x1e\x1d\x9c)\xcf\xedT\xfd\xe0o\x0c\xc1\xc1b"
    module_1.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    int_0 = 2423
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    float_0 = -3109.06787
    set_0 = {float_0}
    module_1.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    bytes_0 = b"\x8eq\x82\xbe\x11\x84\x12/n\x16\xae\r\x97\xdc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    bytes_0 = b"u\xd5\xba\xb9P\x1dNq\x7f\x1c\xb9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    float_0 = -330.57
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    str_0 = "{)QcMQ@.SJ[)_~6"
    str_1 = "dQ&/\\L3~^;$%^cxy62Y("
    bytes_0 = b"\x05\x9a\xff\xdf\x13K\xbd\xd9\x8d\x8c\xb3\xa6Z\xfa"
    str_2 = "-RdDR"
    dict_0 = {str_0: str_0, str_1: bytes_0, str_2: str_1, str_1: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    complex_0 = -718.75 - 871.225j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    str_0 = "L:]~"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    int_0 = -933
    tuple_0 = (int_0,)
    bool_0 = True
    set_0 = set()
    tuple_1 = (tuple_0, bool_0, set_0)
    module_1.match(tuple_1, tuple_0)


def test_case_3401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3402():
    int_0 = -1680
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    tuple_1 = (int_0, tuple_0)
    module_1.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    float_0 = -1277.3
    set_0 = {float_0, float_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    str_0 = "do\n4-&%rDX"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    str_0 = "1F,:n>|=Lq6W\x0cMZub"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    float_0 = 3064.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_1.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    int_0 = -3966
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    str_0 = "G:[|,hyQ"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    str_1 = "#RWbCI<RP@@[=l"
    module_1.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    float_0 = 1163.529
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    str_0 = "KI,hd~"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    complex_0 = -742.94 - 2377.7j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    int_0 = 2250
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    str_0 = "0_\rkWj+}PUO+eXW|-9"
    set_0 = {str_0}
    list_0 = [set_0]
    module_1.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    bytes_0 = b"-\xfa\nqL\x92\x10\xba\x0b\xde\xa5x\xb6\xcf\x17\xef\xad\xecm"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    bool_1 = False
    set_0 = {tuple_0, tuple_0, bool_1, tuple_0}
    module_1.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bytes_0 = b"(\xec\x1eN\x9d7\xc9\xa5\xf8,Fs"
    module_2.urlparse(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    int_0 = 2768
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    bytes_0 = b"\xbc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    str_0 = ""
    list_0 = [str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    complex_0 = -2793.8072 - 2077.595j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    int_0 = -3106
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    str_0 = "=G"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0, str_0: bool_0}
    list_0 = [dict_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    bytes_0 = b"\xb3O"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    set_0 = set()
    var_0 = module_2.urlparse(set_0)
    dict_0 = {var_0: var_0, var_0: var_0}
    module_1.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    str_0 = "e\\t:!\t'M!\\u\x0cGm\tt%h{"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    bytes_0 = b"U\xc7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    int_0 = -781
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    bytes_0 = b"\xb2co\xfd\x06\x144\xf3k\t\x87\x00\xe9\xf4\x89\xb1%:"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    int_0 = 2149
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    str_0 = "6aBR."
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    bytes_0 = b" y\x0b"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    int_0 = -2135
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    int_0 = 7
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    int_0 = -389
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    none_type_0 = None
    tuple_0 = ()
    module_1.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    str_0 = '?T<tHk>b*{M~Rh"'
    list_0 = [str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    bytes_0 = b"\xa7\x05\t\xef\xa1jh\xef\xdf\x7fU"
    bool_0 = True
    module_1.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    bytes_0 = b"\x1aZ:\t\xf0\x0c\xcf\xb8X\x0e\xe5a\x91\x14T\xcfo"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    complex_0 = 578.0855 + 1249.401j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    str_0 = "TI~f*l6Kg9\x0b%\nt"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    float_0 = -3795.768
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    none_type_0 = None
    complex_0 = -1910.830271 + 1667.3j
    module_1.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    bool_0 = True
    module_2.urlparse(bool_0, allow_fragments=bool_0)


def test_case_3447():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3448():
    float_0 = -1917.3
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    str_0 = "}>DA &7{j"
    bool_0 = True
    int_0 = -382
    tuple_0 = (bool_0, int_0)
    dict_0 = {str_0: bool_0, tuple_0: bool_0, bool_0: bool_0, tuple_0: int_0}
    list_0 = [dict_0]
    tuple_1 = (dict_0, list_0)
    none_type_0 = None
    module_1.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    int_0 = -526
    int_1 = -2971
    set_0 = {int_0, int_0, int_1, int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    int_0 = 477
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    str_0 = '}PgNe{ewOZr"lMH+\\-G'
    tuple_0 = (str_0,)
    list_0 = [tuple_0, tuple_0, str_0, tuple_0]
    str_1 = "X&*l"
    module_2.urlparse(list_0, str_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    bytes_0 = b"{\x06\x84\xe4\xc7\xac\xbeq\xca"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    str_0 = '"!lp{^s_9XqDl%7^/*H'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    str_0 = 'VlSUc^%r^}S%\t"S5_gw'
    none_type_0 = None
    str_1 = "\n`GVw~7Q-gomJ*|9u\tN"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    float_0 = -2606.0
    set_0 = {float_0, float_0}
    module_1.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    int_0 = -3196
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    str_0 = '5R)UgC"k,IC.ESuQi,'
    module_1.match(str_0, str_0)


def test_case_3464():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3465():
    float_0 = -1976.5
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    float_0 = -301.4358
    module_2.urlparse(float_0, allow_fragments=float_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bytes_0 = b"\xb5Q\xae\xe6\xac1\xed"
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    int_0 = -2982
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    int_0 = 4249
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    complex_0 = -1983.419 - 814.59487j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bytes_0 = b"t\x83\x88\xac\xe7"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    float_0 = -2550.654
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    int_0 = -3915
    set_0 = {int_0, int_0, int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    complex_0 = -629 - 1235.110267j
    tuple_0 = (complex_0,)
    bytes_0 = b"\xc1N\xe4|J\x86@e\x87\xa4\xf4"
    module_1.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    int_0 = 25
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    str_0 = "p!Pn=3>e"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    float_0 = -699.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    list_0 = []
    none_type_0 = None
    var_0 = module_2.urlparse(list_0, none_type_0)
    module_1.match(var_0, none_type_0)


def test_case_3479():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3480():
    int_0 = -266
    int_1 = -1546
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_1}
    list_0 = [dict_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    complex_0 = -5109.8 + 1504.1586j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    str_0 = "]=T`6TZEIqm%iMF=|"
    set_0 = {str_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    float_0 = -1107.3338
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    complex_0 = 2228.03 - 606.4831j
    dict_0 = {complex_0: complex_0}
    module_1.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bool_0 = True
    list_0 = []
    tuple_0 = (bool_0, list_0, bool_0)
    int_0 = 1312
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    bytes_0 = b"\x94Q\x06\xd9q\x8f\x1a\x07\x15`"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    complex_0 = 1926.669824 - 39.930183j
    module_1.match(complex_0, complex_0)


def test_case_3488():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    bool_0 = True
    bytes_0 = b'\xa4l"\x14'
    dict_0 = {bytes_0: bool_0}
    tuple_0 = (bool_0, bytes_0, dict_0)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    int_0 = 2968
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    module_2.urlparse(var_0)


def test_case_3492():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3493():
    bool_0 = True
    bytes_0 = b"\xee\xcc\xe8e\x10"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    str_0 = "\x0b,E='\x0cmlx"
    int_0 = 1175
    list_0 = [int_0]
    str_1 = "O>;@(:nNKx"
    tuple_0 = (str_0, int_0, list_0, str_1)
    list_1 = [tuple_0]
    none_type_0 = None
    module_1.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    float_0 = 40.743
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    bytes_0 = b"\x04\x1ew<\x80)\xfb\x18\x0cLg\xeb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    object_0 = module_0.object()
    set_0 = {object_0, object_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    int_0 = -2235
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, int_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    str_0 = "e`j4$q>\n\x0b;zyN{"
    module_1.get_new_command(str_0, str_0)


def test_case_3504():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3505():
    tuple_0 = ()
    float_0 = -3118.6008
    module_1.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    float_0 = 334.58
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    str_0 = "4|d.d.\x0c/6;.OAJ(LH"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


def test_case_3508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3509():
    float_0 = -2608.75
    tuple_0 = (float_0,)
    module_2.urlparse(tuple_0, allow_fragments=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    str_0 = "\nf5u%Rw7C\x0b%UfppW"
    module_1.match(str_0, str_0)


def test_case_3511():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3512():
    int_0 = -4063
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    bytes_0 = b"P\x9a\xfa\x100\xcf\x8b?\xc5\xe2\xbd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    int_0 = -2072
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bool_0 = True
    int_0 = 710
    module_1.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    str_0 = "9>2eT,"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    str_0 = "v1`mi<\t<gknf4f|9=M"
    list_0 = [str_0]
    bool_0 = False
    dict_0 = {bool_0: list_0}
    tuple_0 = (list_0, bool_0, dict_0)
    list_1 = [tuple_0, str_0, dict_0, bool_0]
    list_2 = [bool_0, list_0, tuple_0]
    module_1.match(list_1, list_2)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    int_0 = 1347
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    bytes_0 = b"\xb4=\xcc\xb8,$\xa9H\xf2\xde\x86rF\xaa\xec\xae"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    bytes_0 = b"D\x9cL>\x06\xaf2\xae\xaa["
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    complex_0 = 341.1 + 1046.01615j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    none_type_0 = None
    object_0 = module_0.object()
    module_1.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    dict_0 = {}
    complex_0 = 783.048327 + 518.9j
    module_1.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    none_type_0 = None
    complex_0 = 5257.21 - 185.931093j
    module_1.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    bytes_0 = b"\xcd\\T\x82\xdc\x1a\xdc\xe2\x88\xc5\x94)0\x94\xd8v\x128\x85z"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    int_0 = 1660
    str_0 = "1Wf,\x0b0shT]7D"
    bool_0 = True
    str_1 = '"e9pijEfn1'
    bool_1 = False
    dict_0 = {str_0: int_0, str_1: bool_0, str_1: str_1, bool_1: bool_1}
    tuple_0 = (int_0, str_0, bool_0, dict_0)
    module_1.match(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    float_0 = 926.36101
    str_0 = "="
    module_1.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    object_0 = module_0.object()
    bool_0 = True
    set_0 = {object_0, object_0, bool_0, object_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    int_0 = 3374
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    str_0 = ";\x0c1xAV4-us37'44|FK"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    float_0 = -1226.51289
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


def test_case_3533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3534():
    bytes_0 = b"D\xf7#\xf6\x1aA\xce6\xf2@t\xce"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_3535():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3536():
    bytes_0 = b"\xdf^\xdb\x7f1\xcd'Tk"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    int_0 = 2494
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    int_0 = 1861
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    int_0 = 2746
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    bytes_0 = b"\x8eY\x8f\xe6K\xdb\xce5o\x1e\xf2\xbd\xb9\x95\xa9\x8cS\xa5\xd3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    int_0 = 1075
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    int_0 = 870
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    str_0 = "A,H`D3>gs>v;"
    none_type_0 = None
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    float_0 = -456.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    bytes_0 = b"G7\x83\xe0\xa5\xc6\x0c\xf4\xbd(~"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = "g\tPDYYvL|i"
    str_1 = "nZl"
    dict_0 = {str_0: bytes_0, str_0: str_0, str_0: bytes_0, str_1: str_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    float_0 = -1339.58155
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bytes_0 = b"\x08K\xe8,2\x94\x0f\xdcC4\x13\n5\xd4G"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    int_0 = -1269
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    str_0 = "*Uo.-@m#ZDjCy,Dh%\x0c\r2"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    float_0 = 2490.333
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    int_0 = -1490
    set_0 = {int_0, int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    str_0 = "93u"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    int_0 = -1545
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    int_0 = 1412
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    bool_0 = True
    bytes_0 = b"\xfb!I,\xe01y\r`I\xdf\xfa\xb9"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    str_0 = "cpkHW7r8v!bn)\nPNI"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    none_type_0 = None
    complex_0 = 896.4784 + 5313.438188j
    module_1.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    bytes_0 = b"\x19\xac\xd5\x88$\xac"
    int_0 = -1957
    tuple_0 = (bytes_0, int_0, int_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "0`EO!WRs6^Q"
    str_1 = ""
    dict_0 = {str_0: list_0, str_1: str_1, str_0: none_type_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    set_0 = set()
    set_1 = set()
    module_1.get_new_command(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    list_0 = []
    tuple_0 = (list_0,)
    module_1.get_new_command(list_0, tuple_0)


def test_case_3564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3565():
    dict_0 = {}
    module_1.match(dict_0, dict_0)


def test_case_3566():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3567():
    complex_0 = -1262 + 1854j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    int_0 = 719
    list_0 = [int_0, int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    complex_0 = 611.4556 - 2530.253662j
    tuple_0 = (var_0, var_0, complex_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bytes_0 = b"\xc1\x0e\x9b\xf5Y\xff\x94\x0e_B\xfc\x01\x7fN"
    dict_0 = {}
    module_1.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    bytes_0 = b"\xcd\x9d\x03"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    int_0 = 995
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
    module_1.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    object_0 = module_0.object()
    tuple_0 = ()
    set_0 = {object_0, tuple_0, tuple_0, tuple_0}
    dict_0 = {}
    tuple_1 = (object_0, tuple_0, set_0, dict_0)
    module_1.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    str_0 = "}r1"
    set_0 = {str_0, str_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bytes_0 = b"h\x90Pl5\x80\xbe\x16\x98\xbe\x9b\x18"
    set_0 = set()
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: set_0, bytes_0: set_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    int_0 = -106
    int_1 = -1755
    list_0 = [int_0, int_1]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_1}
    none_type_0 = None
    module_2.urlparse(dict_0, allow_fragments=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    int_0 = 1489
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    float_0 = 1793.496
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    str_0 = "\nffD|"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    int_0 = -1009
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    int_0 = 2775
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    int_0 = -1871
    int_1 = -2012
    module_1.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    bool_0 = False
    float_0 = -2225.459
    module_1.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    none_type_0 = None
    set_0 = set()
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    bytes_0 = b"\xe3\x1a\x1c\xfe6\xd3\xdd2\xae\xaa1\xf3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bytes_0 = b"\xc1\x14\xc5\x8f\xa8\xc6\xd7\xd5\xc3\xd0$\xff[\xa6r\xc4\x80\x1e\x03\xe9"
    module_2.urlparse(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    bytes_0 = b"\xdd\x80\x89\x8cS\xbd\xc2\xdb2\xcb\x1e\x03\xd9f"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    str_0 = "J$% m;B%5U=;-"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    none_type_0 = None
    bytes_0 = b"\xc2\xb1X\xb6\xbeF\xba\x04i|\x1et\xf7"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    str_0 = "\tdO[>%<(["
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    int_0 = -1664
    tuple_1 = (set_0, int_0)
    str_0 = "9i)?2*=K"
    tuple_2 = (tuple_1, str_0)
    none_type_0 = None
    module_1.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    str_0 = "EYPS_\\K4J@'FA!fl"
    list_0 = [str_0, str_0]
    str_1 = "l}HKUFI$YvI#Z[ V"
    dict_0 = {str_0: list_0, str_1: list_0, str_0: str_1}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\xbbq#\x81B\xbb"
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    complex_0 = -1041.28 - 2188.9j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    str_0 = "\x0b<j<y-ok,rFC\x0c7jq9uM|"
    list_0 = [str_0]
    module_2.urlparse(list_0, str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    str_0 = "),\\ZDs,r,I%u"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    int_0 = 3223
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    object_0 = module_0.object()
    module_1.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    bytes_0 = b"\xbd\xe9(\x12~me\x80S#m"
    str_0 = "j\nRO\r{L"
    module_1.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    int_0 = -1627
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    bytes_0 = b"\x99\x9a\xf7\x8e8\xf6\x96\xf0\xaf\xd0\xe9v+\xa2 \xab\x14"
    module_2.urlparse(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    int_0 = 383
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0,)
    tuple_1 = (dict_0, tuple_0, int_0, int_0)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    str_0 = "e=V;`1\tpw$!"
    set_0 = {str_0, str_0}
    list_0 = [set_0, set_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    str_0 = "LpD1t1W)"
    module_1.match(str_0, str_0)


def test_case_3611():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3612():
    str_0 = "\rg\t\\{oxd\rf&"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    float_0 = -599.289002
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    str_0 = "fO3a+|.tnRw`9bjn3Cj"
    module_1.get_new_command(str_0, str_0)


def test_case_3615():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3616():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_1.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    complex_0 = 125 + 2749.6j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    float_0 = -1425.5
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    int_0 = -112
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    str_0 = ""
    tuple_0 = (str_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    bytes_0 = b"<\xcaj]ASc\x83=Yr\x89\xdbL\xcb3cw\xa2"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    int_0 = 3409
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0, tuple_0: int_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bytes_0 = b"`\x8e8S\x05\xc5\x02\nF\xa0\xd1\xcb\xee>\xa7\xfc\x0b\xb6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    bytes_0 = b"6"
    int_0 = -1896
    bool_0 = True
    float_0 = -891.0
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, bool_0, float_0, tuple_0)
    module_1.get_new_command(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    bytes_0 = b"0\xf6\x87a("
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    str_0 = "\x0bh,!5"
    int_0 = 107
    module_1.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    complex_0 = 2787.853 - 673.27j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    bytes_0 = b"\xdf\xec\xcd\xc9;Z\xc4\xce\xe1\x06"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    bytes_0 = b'\xdf"\xca\xb7\x1c{.\xc0\xc91'
    module_2.urlparse(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    bytes_0 = b":5"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    float_0 = 545.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    dict_0 = {var_0: var_0}
    module_1.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    bytes_0 = b")&k\x85\xbc\x8e\xad\xeee\xed\xd9\xb0-\xaf"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    int_0 = -1267
    set_0 = {int_0}
    module_2.urlparse(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    float_0 = 395.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    object_0 = module_0.object()
    module_2.urlparse(object_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    int_0 = -69
    list_0 = [int_0, int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    int_0 = 396
    int_1 = -705
    dict_0 = {int_0: int_0, int_0: int_0, int_1: int_0}
    tuple_0 = (int_0, int_0, dict_0, int_0)
    tuple_1 = (tuple_0,)
    bool_0 = True
    tuple_2 = (int_0, tuple_1, dict_0, bool_0)
    module_1.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    bool_0 = True
    bytes_0 = b"\x07\xd7\x1a\x16\xf7\x1dR\x1f\x8bI._\x98\x9e\xf3&Q+3\x92"
    set_0 = {bool_0, bytes_0, bytes_0, bytes_0}
    bool_1 = True
    tuple_0 = (bytes_0, bytes_0, set_0, bool_1)
    list_0 = []
    tuple_1 = (bool_0, tuple_0, set_0, list_0)
    module_1.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    bytes_0 = b"W'"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    float_0 = 152.1
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    str_0 = "Yn7*$'f_+-WM"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    bytes_0 = b"a?\xb12\xfe\x89\xfd>\xff\x95"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    bytes_0 = b""
    float_0 = 1215.734
    bytes_1 = b"\xa0\xf6\x82^\xdf"
    tuple_0 = (bytes_0, bytes_0, float_0, bytes_1)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    float_0 = -1913.086
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    bytes_0 = b"\xb2T\xe9"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    str_0 = "_ozZ8\rRH]u."
    set_0 = {str_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    bytes_0 = b"\xd9\xd7"
    dict_0 = {bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    bytes_0 = b"W\xdf\x9b\x83\xcdTn\xdf"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    int_0 = -624
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    bool_0 = False
    str_0 = "dqm\n`?Ntc"
    module_1.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    int_0 = -957
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    int_0 = 3874
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    float_0 = -2850.2007
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    float_0 = 1474.0
    int_0 = -1857
    module_1.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    float_0 = -4138.5
    module_0.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    bool_0 = False
    int_0 = 1144
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    int_0 = 3295
    dict_0 = {int_0: int_0, int_0: int_0}
    bytes_0 = b"Ad\x8c\x1f"
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    int_0 = 299
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    str_0 = 'bLe)Js"_BLtDoFq('
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    int_0 = 43
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    float_0 = 1060.93476
    set_0 = {float_0, float_0}
    module_1.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    list_0 = [var_0, bool_0, bool_0]
    module_1.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    float_0 = 2311.951
    set_0 = {float_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    module_1.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    str_0 = "o`"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_1.match(none_type_0, set_0)


def test_case_3677():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3678():
    bytes_0 = b"\x18\xe7jc\x88\xfb\xeb\xdf\xe0\x8b\xc9\x8f\x87\xbb\xfa\xd8\t5\xa5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    int_0 = -4076
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    str_0 = "] &N5%T"
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    int_0 = 1934
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    str_0 = "-qTd(#6N1y"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    float_0 = 2311.1
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    int_0 = 1684
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    str_0 = "Bh"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    float_0 = 4320.631
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    int_0 = 192
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    str_0 = "$=ASq3r\t%"
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = False
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    float_0 = -3497.5
    set_0 = {float_0, float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    str_0 = "\x0b\tFMN);\x0c,awKGv}/r:"
    str_1 = "1=]rMcr&5slj'dw,US"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    int_0 = -402
    list_0 = [int_0, int_0]
    tuple_0 = ()
    module_1.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    float_0 = -2415.3005
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    float_0 = 299.6
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    str_0 = "ue^vK#"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    bytes_0 = b"6r\x9fG?\xa7,\x86Pm\xd5-<\xcd\x89b"
    module_2.urlparse(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    tuple_0 = ()
    int_0 = -1818
    dict_0 = {tuple_0: tuple_0, int_0: int_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    float_0 = -6465.515
    tuple_0 = ()
    tuple_1 = (float_0, tuple_0, float_0)
    module_1.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    bytes_0 = b'~\xe0\xb6z\x8f>c\xa6\xe9"\xb1\x14=`\t\xe2\xc9'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    int_0 = 4211
    module_1.match(int_0, int_0)


def test_case_3701():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3702():
    bool_0 = True
    int_0 = -1029
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: int_0, bool_0: bool_1}
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    str_0 = "ydmdM"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    float_0 = 622.299734
    list_0 = [float_0, float_0]
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    str_0 = "Wj)Bx\x0c0\x0bV?cNG:c;"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    bytes_0 = b"\xaa\x031*NL2"
    tuple_0 = (bytes_0,)
    module_1.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    bytes_0 = b"\x9d\xb7\x8a\xbe/\x86[\x08\x0c"
    int_0 = -1768
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (bytes_0, int_0, tuple_0, bool_0)
    module_1.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    int_0 = 594
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    bytes_0 = b"b@(\x15e\xc1\xffb\xfc,3\x83\x89N"
    module_1.match(bytes_0, bytes_0)


def test_case_3710():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3711():
    bytes_0 = b"\x92\x9f"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    int_0 = -3687
    set_0 = {int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    bytes_0 = b"\x87\xd5\xfa\x1a"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    str_0 = "(x 'a0\x0b&/Hhh"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    int_0 = -1563
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    float_0 = 143.467
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    int_0 = 1518
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    list_0 = []
    tuple_0 = (list_0,)
    module_1.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    int_0 = -941
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    str_0 = "0$Wn*?JWq])>"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    int_0 = 2925
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    bytes_0 = b"\xc5s\x04"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    complex_0 = -791.44 + 1618.8j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    none_type_0 = None
    bool_0 = False
    module_1.get_new_command(none_type_0, bool_0)


def test_case_3727():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3728():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = []
    tuple_0 = (bool_0, set_0, list_0, set_0)
    module_2.urlparse(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    bytes_0 = b"Tx(\x91\xe4jMHC\xa6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    int_0 = -3416
    bool_0 = True
    dict_0 = {int_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    dict_0 = {}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    int_0 = -1278
    list_0 = [int_0, int_0]
    module_1.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    int_0 = 1267
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bytes_0 = b"E\x84\xc2+L&\xaa\xb9\xaeq:"
    tuple_0 = ()
    dict_0 = {bytes_0: tuple_0, bytes_0: tuple_0, bytes_0: tuple_0}
    tuple_1 = (bytes_0, tuple_0, bytes_0, dict_0)
    module_1.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    complex_0 = -334 + 1116.700531j
    dict_0 = {}
    int_0 = 3198
    tuple_0 = (complex_0, dict_0, int_0)
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    int_0 = 2209
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    int_0 = 2209
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    bytes_0 = b'(\xf1\xa4"\x87\x05'
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    str_0 = "Fb!NYk18+ 382_n"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    int_0 = -2403
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    bytes_0 = b"\xbd\x19"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    list_0 = []
    var_0 = module_2.urlparse(list_0, list_0)
    float_0 = -1532.0
    module_1.match(var_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    float_0 = -1974.361108
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    object_0 = module_0.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    bytes_0 = b"\xe7"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    bytes_0 = b"\xcc\x0e\xbey\x8f\x9c\xf8\xf2(m"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, none_type_0)
    dict_0 = {var_0: var_0}
    module_2.urlparse(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    bytes_0 = b"EK\x1e\x91\xe29j"
    str_0 = "~&zvjVWG\x0c\x0c:"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    dict_0 = {}
    bytes_0 = b"\x81\x80`\xb8C\xe6H\x0f\xf4"
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    float_0 = 1135.3
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    bool_0 = True
    str_0 = "lXpYE5\r\nou\x0cqEs KUBU\\"
    dict_0 = {bool_0: str_0}
    tuple_0 = (bool_0, str_0, bool_0, dict_0)
    complex_0 = 937.202 - 2245.109129j
    module_1.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    none_type_0 = None
    int_0 = 1265
    module_1.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    int_0 = 1057
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bytes_0 = b"\xad\x0b_\x80\x0c\xda\xf8\x9a"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    int_0 = 1442
    float_0 = 2401.0
    module_1.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    int_0 = 1299
    module_1.get_new_command(int_0, int_0)


def test_case_3758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3759():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    dict_0 = {}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    int_0 = 616
    list_0 = [int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    str_0 = "ctcW.\rk#!"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    int_0 = -1915
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    int_0 = -1181
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = True
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    bytes_0 = b"\xd2K,\x98a\xee"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    float_0 = -1045.84646
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    int_0 = -849
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    int_0 = -944
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    complex_0 = 66.8117 + 2382.7j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    str_0 = "hzl3r6\x0cc*{`E"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    bytes_0 = b"h\xdb\xbe\xc9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    bool_0 = True
    float_0 = -1388.0
    tuple_0 = (bool_0, float_0)
    module_2.urlparse(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    bytes_0 = b"k\x0e\x01Ya\xbf\x98\x85\xc8n\x11@\xdd\x9ex\x89`\n2"
    float_0 = -2983.0
    list_0 = [bytes_0, bytes_0, bytes_0, float_0]
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    str_0 = "8 ?p[$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    str_0 = '",ugptfdNlO+9P5`'
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    str_0 = ",3U"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    str_0 = "('+\rW!_N"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    complex_0 = 433.74056 - 2688j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    float_0 = 3678.114728
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    none_type_0 = None
    str_0 = "m\\Vh`'Xg=81}A"
    dict_0 = {str_0: none_type_0}
    module_0.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    float_0 = 908.024
    module_1.get_new_command(float_0, float_0)


def test_case_3786():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3787():
    int_0 = -2279
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    str_0 = "U\x0br._Sk!Q*m&Rj_"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    str_0 = "by\rQFwYtR"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    bytes_0 = b"x~\x16\x99\xf5o}MD\xb9_"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    str_0 = "6<eOZ"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    module_1.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    bytes_0 = b"\x10\xbe\xca\xa6S\x94'\xa4\xf0\xbdu\x8d\x90A\xadV\x9c?\xe6"
    list_0 = [bytes_0]
    module_1.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    str_0 = "mn\t]zKr\n"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


def test_case_3796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3797():
    int_0 = 1357
    module_2.urlparse(int_0, allow_fragments=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    dict_0 = {}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    bytes_0 = b"u^\xb2"
    module_1.match(bytes_0, bytes_0)


def test_case_3800():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3801():
    str_0 = "'p\\1\rx"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    int_0 = 478
    bytes_0 = b"\x89v\x12\xfb\xa4~t\xae(\xccC\xfb\x1a\x85\x87i\x12"
    str_0 = "w@|QGFv8j/?\r@bm"
    int_1 = 899
    tuple_0 = (int_0, bytes_0, str_0, int_1)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    complex_0 = -4527 + 117.0426j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    int_0 = -2157
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    str_0 = "Fz5.k(o1h(j~vq"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    str_0 = '(bu"G-=d'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    int_0 = -2683
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, dict_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_2.urlparse(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    int_0 = -3082
    module_0.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    str_0 = "GS?G_~S',+\t<yU"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    bytes_0 = b"C"
    float_0 = -2479.190886
    tuple_0 = (bytes_0, float_0)
    set_0 = {tuple_0, float_0, float_0}
    module_1.match(tuple_0, set_0)


def test_case_3814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3815():
    str_0 = "pjT\r4YSpx]fI_<H}\nC"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    bytes_0 = b"\xd6[\x8c\xf7%).}vzy\x96\x15"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    str_0 = "["
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    str_0 = "{fR<vb[&O"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    str_0 = "fA "
    module_1.get_new_command(str_0, str_0)


def test_case_3820():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3821():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    bytes_0 = b"\x16\xa9\x83\xda\x04\x0c^\x0e\xe5)3Iq\xf1\x8f}^"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    str_0 = "$9_f9\rNJX'KQLhR"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    str_0 = "ISU3Z]#J*H\ry"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    bytes_0 = b"r#w\xfb\xf48\x18)\x05\x13"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    str_0 = '-wk,3+8"b.xQF.\\x(5_'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    str_0 = "GkR'>YG80??ZYPg\rKX;"
    tuple_0 = (str_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    int_0 = -1866
    none_type_0 = None
    module_1.match(int_0, none_type_0)


def test_case_3829():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3830():
    int_0 = 1170
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    bytes_0 = b"r\xa8=ShT\x9c)N\x00c\xec=\xa8\x98\xfc\xac\x80D"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = 193.8
    tuple_0 = (bytes_0, dict_0, float_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    int_0 = 980
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    int_0 = 2503
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    str_0 = 'wh9.uLtm\x0b4n"q2H]i'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    bytes_0 = b"\xc1\x06\xd8"
    module_2.urlparse(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    str_0 = ",3BbAs}H&YxDBqH*!."
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    bool_0 = False
    set_0 = set()
    module_1.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_2.urlparse(dict_0, allow_fragments=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, tuple_0)


def test_case_3840():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3841():
    bytes_0 = b"^#=?1."
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bool_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_2.urlparse(set_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    str_0 = "2VP8MaN*r0SwLk(':OS+"
    module_1.match(str_0, str_0)


def test_case_3844():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3845():
    str_0 = "\tF'wd+8\n=\x0bu\n %'X"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    bytes_0 = b"_\xcbc\xc7H\xa8-\x8c\xa3\x84\xb9\xa4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    object_0 = module_0.object()
    set_0 = {object_0, object_0, object_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    int_0 = -1975
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    int_0 = -974
    module_1.get_new_command(int_0, int_0)


def test_case_3850():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bool_0 = False
    list_0 = [bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    int_0 = 1340
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    float_0 = 606.649
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    str_0 = "dQJsU.C?/|."
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    complex_0 = -2351.49923 + 1256j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    complex_0 = -779.143 - 1517.746271j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    bool_0 = True
    list_0 = [dict_0, bool_0, dict_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    bool_0 = True
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    str_0 = "U_VY[w]>> i9p"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    int_0 = -1590
    dict_0 = {int_0: int_0, int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bytes_0 = b"\xe9\x02\xbe\xfe\xb2}\xe8\xf1X\xfe\xe81\xb8\xa4\x9b\x89'y"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    str_0 = "b0o(;_@EW\\,N"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    str_0 = ";uL\n!,e=j\x0cO[B%|P9`wI"
    list_0 = [str_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    int_0 = 1955
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    float_0 = -150.83787
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    int_0 = -1990
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    bytes_0 = b"QzD\xa7\x86\xce\xda\x87\xcf\xdeE\x1b\xb1Y<\x11\x8d"
    dict_0 = {bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    str_0 = "\tln(U:/O>k%e4P]]<"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0, dict_0)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    float_0 = 3899.055
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    bytes_0 = b"\xd0\x13\xcd\xe4Up"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    set_0 = set()
    tuple_0 = (set_0,)
    module_1.get_new_command(tuple_0, set_0)


def test_case_3873():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_3874():
    float_0 = -2910.91
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    object_0 = module_0.object()
    dict_0 = {object_0: object_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    str_0 = "d"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    float_0 = 2572.0
    module_0.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    bool_0 = True
    int_0 = 988
    tuple_0 = (bool_0, int_0)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    int_0 = 1284
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    str_0 = "52@I7:NXLYI5\x0c{"
    float_0 = 155.351
    dict_0 = {str_0: str_0, str_0: float_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    str_0 = ":[f\x0bUBVSu}"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    float_0 = 1366.77594
    set_0 = {float_0, float_0, float_0, float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    float_0 = 344.82473
    list_0 = [float_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    str_0 = "~$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    str_0 = "baT\x0c4G?kM-"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    module_1.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    bool_0 = True
    dict_0 = {}
    module_1.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    str_0 = "`|\x0c5H%u^"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    complex_0 = -578.62 - 2954.2j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    bool_0 = False
    str_0 = "2+f\rpUc{?mW"
    tuple_0 = (bool_0, bool_0, bool_0, str_0)
    module_0.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, bool_0, bool_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    str_0 = "S\x0bRMQ,d2=Ic"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


def test_case_3896():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3897():
    int_0 = -2618
    str_0 = "M4<0v\ts#j5|"
    dict_0 = {int_0: str_0, str_0: int_0, int_0: str_0, int_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    object_0 = module_0.object()
    set_0 = {object_0, object_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    str_0 = "agy|wp"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    str_0 = '57OJPcoz"fe` ``'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    float_0 = -1852.23
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    str_0 = ""
    float_0 = 15.455
    bool_0 = False
    tuple_0 = (str_0, bool_0, dict_0, float_0)
    tuple_1 = (object_0, str_0, float_0, tuple_0)
    module_1.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    bytes_0 = b"\xbd\xc6\x90x#U[U"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    str_0 = 'A,O"g'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    str_0 = 'ol":n}\rN8\x0c0k"{Fn'
    module_0.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    str_0 = "NU)J`|>wftz@"
    list_0 = [str_0, str_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    int_0 = 320
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    float_0 = -3377.64192
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    bytes_0 = b"\x06\xaf\x00o<1\x8b\xb3\xfe|\xa5\x98"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    complex_0 = 3457.6 - 4394j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


def test_case_3913():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = -3966
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, bool_0: tuple_0, tuple_0: bool_0}
    list_0 = [bool_0, set_0, set_0, dict_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    str_0 = "OO\rH\x0bo}\n\x0c\x0c0B"
    module_1.get_new_command(str_0, str_0)


def test_case_3917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3918():
    str_0 = "L"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    int_0 = 85
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    str_0 = "`"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    bytes_0 = b'\xe2\xa6\x1dW\xf0S\x1a\xfd]\x10\x90\x7f"\xc8\xa2\xb7\xac'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    bytes_0 = b""
    set_0 = set()
    module_1.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    int_0 = 915
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    str_0 = "b9fSBCI1h"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    str_0 = "\n|gZ\x0bo0Q0U,[=zM3oo"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    bytes_0 = b"\xceB"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    float_0 = 62.689566
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    none_type_0 = None
    bytes_0 = b";]2\x98\xff\x987`"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    str_0 = "Hc'%L\\f?fY`FgzU7N(T"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    str_0 = "VE:wdR(6Xoxxwn7h+"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    int_0 = 989
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    bytes_0 = b"\x8a\xc8\xe4\xf7OG\x88c\xdb4\x98\xe9\xd0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    bytes_0 = b"\xa2\xdb.\xf6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    bytes_0 = b"_\xd3\xc5\x11\x16;\x1eQ"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    float_0 = 2018.276
    set_0 = {float_0, float_0}
    module_2.urlparse(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    int_0 = -43
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    float_0 = 1411.357056
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    bytes_0 = b"\xe71)e\xd3\xafS*\xda9\x9a7_#\xe1\xe1y"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    object_0 = module_0.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    float_0 = -1776.7355
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    int_0 = -3796
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    bytes_0 = b"\xfe\xe9\xa4\xfeB\x13\x05\xba \xde"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    int_0 = 1318
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    int_0 = -681
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, none_type_0)
    bytes_0 = b"r(y\xc6\xab3\x18\xf0\xe4\x8b"
    module_1.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    str_0 = "mD`?*Fa!VaMr&`m"
    int_0 = 184
    list_0 = [str_0]
    list_1 = [int_0, int_0, str_0, list_0]
    tuple_0 = (str_0, int_0, list_1)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    none_type_0 = None
    dict_0 = {}
    module_0.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    int_0 = -1529
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bytes_0 = b"\x11\xe4C\xa7\x8b\x90\xbeA\xd4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(bool_0, dict_0)


def test_case_3951():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3952():
    bool_0 = False
    int_0 = 2331
    module_1.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    str_0 = "fW0h\nGZ{"
    tuple_0 = (str_0,)
    complex_0 = 567.033396 - 1045j
    list_0 = [tuple_0, complex_0, tuple_0, complex_0]
    tuple_1 = (tuple_0, complex_0, list_0)
    none_type_0 = None
    module_1.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    str_0 = "cnqU~"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    float_0 = 1729.58789
    set_0 = {float_0}
    object_0 = module_0.object()
    module_1.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    float_0 = 274.45
    set_0 = {float_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    bytes_0 = b"\xdb\xf3\x8c\xba\xfe\x85\xe6\x95\x83\x9e\xcb\x13J\x87"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    bytes_0 = b"$\x04\xab\x0b\x86D\xac\xc1\xf4\x84\xb2nxz"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0]
    module_1.get_new_command(list_0, bytes_0)


def test_case_3960():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_1.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    str_0 = "\nwZSS<~J"
    int_0 = 2361
    module_1.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    bytes_0 = b""
    float_0 = 3461.0
    bool_0 = False
    tuple_0 = (bytes_0, float_0, bool_0, bool_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    module_1.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    float_0 = -1686.9487
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    bytes_0 = b"0"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    bytes_0 = b"\xc6e\xfdN\x13\xae\\\x96\xb4E"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bytes_0 = b"<\x88"
    tuple_0 = ()
    module_1.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, bool_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    none_type_0 = None
    module_1.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    bytes_0 = b"\x8c\xca\xc9\x0frIq\x1e\x00R"
    bytes_1 = b"\n\xf2\x0eO\xcc\xa0!\xc4s"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_1]
    complex_0 = -2958.1 + 1781.91j
    module_1.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    module_1.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    int_0 = 756
    str_0 = "I9@"
    dict_0 = {int_0: str_0, str_0: str_0, int_0: str_0}
    set_0 = set()
    tuple_0 = (dict_0, set_0, set_0)
    tuple_1 = (int_0, str_0, tuple_0)
    module_1.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    complex_0 = 1320.9861 + 506.813j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    int_0 = 2599
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    int_0 = 837
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    str_0 = "S+T:),d0^\\g"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    str_0 = "$`*'q#P|66u"
    bool_0 = False
    module_1.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    str_0 = "A.(mL}`ddB"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    dict_0 = {}
    bool_0 = False
    module_1.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_2.urlparse(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    int_0 = -704
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    int_0 = 3411
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    int_0 = 2641
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0]
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    float_0 = 4021.462
    set_0 = {float_0, float_0}
    module_1.get_new_command(set_0, set_0)


def test_case_3991():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3992():
    int_0 = -3808
    tuple_0 = (int_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (list_0, bool_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    str_0 = ":zlZ)M,_n]Z"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    str_0 = 'F"=1p\x0b\\v*nwoB'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    str_0 = "?<rC;0paaUD5%L'F{"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    str_0 = "U]*YvFc@u"
    bool_0 = False
    int_0 = -1084
    dict_0 = {str_0: bool_0, int_0: str_0}
    list_0 = [dict_0, int_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    complex_0 = -3932.351 - 1411j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    str_0 = "ZD\x0cr;.k 0\x0b\x0b"
    tuple_0 = (dict_0, complex_0, str_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    bytes_0 = b"\xba\x0f+\xcb\xf9!\x19\xd3$Quk\xa2t\xb6\x97"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    int_0 = -1079
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    int_0 = -888
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    int_0 = -923
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    float_0 = -3428.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    set_0 = set()
    list_0 = []
    module_1.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    str_0 = "l8$!P [THQ '27#Rob"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_0)
    str_0 = "m98y9\t73\\Yq1\rtO$"
    dict_0 = {tuple_0: tuple_0, bool_0: str_0, bool_1: tuple_0, str_0: tuple_0}
    module_1.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    float_0 = 875.62
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    int_0 = 767
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    complex_0 = -1416 + 1713.016075j
    int_0 = 202
    bool_0 = True
    tuple_0 = (complex_0, int_0, bool_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    bytes_0 = b"\x03\xb6\xa3S\xb4\x85wI\xe2\xea\x07"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_4013():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4014():
    int_0 = 657
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    bytes_0 = b"S<\x92\xa91\xa2>'v"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    bytes_0 = b"A\\\x04\xacN\x15\x8e~\xb6\xb8\x99"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, list_0)


def test_case_4018():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4019():
    str_0 = "/80"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    none_type_0 = None
    str_0 = " 8da\\X=\x0c5j"
    str_1 = "16pm~)"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: none_type_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    complex_0 = -31.3 - 1212j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    int_0 = -332
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    int_0 = 721
    bool_0 = True
    module_1.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    int_0 = 2402
    none_type_0 = None
    module_2.urlparse(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    object_0 = module_0.object()
    module_2.urlparse(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    bytes_0 = b"\x03Z\xb8\xdf-+\xe5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    bytes_0 = b"\x00\xc2\x8d@W\x1d\x8f3k\xbf\x07"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    int_0 = -1093
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0, dict_0, dict_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    str_0 = "Y"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    float_0 = -1962.07
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    list_0 = []
    object_0 = module_0.object(*list_0)
    module_1.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    str_0 = "?OG~e_dW (<"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    bytes_0 = b"\x8aI6\xa7\x13"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    bytes_0 = b"\xedQ}W\x9b^$\x13K\x19\x8bI\xeet\xbd"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_4035():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4036():
    str_0 = "]i/)\x0cF!  )\x0bIJJ"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    float_0 = 2281.646257
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    str_0 = "MHl"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    float_0 = 2407.249425
    list_0 = [float_0, float_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bytes_0 = b"\x8a\xac\x00\x11\xc4\x13\xf5\t\xcf\xd1\xa0C"
    list_0 = [bytes_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    int_0 = -1902
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    str_0 = "\nfdtS/!8m+PW|"
    module_1.match(str_0, str_0)


def test_case_4043():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4044():
    int_0 = 1039
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    set_0 = {var_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    str_0 = "Jwfi&cDt6\nw7$K%~F;"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    float_0 = -2824.949
    int_0 = -2940
    dict_0 = {float_0: int_0, int_0: float_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    bytes_0 = b"\xaf\x92\xa5g\x1d\xe1\xd4\xee\x98\xff\xa9="
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    str_0 = "s7"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    bytes_0 = b"\r\x82bh\xc5R\xe5\xd0b\x98\xf4\xfdL\xddh\x916W#"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    int_0 = 1158
    tuple_0 = (int_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    bool_0 = True
    bytes_0 = b"\xd2n7uF\xda\xf6\x9e.\xdd\x8e\xf9\x00\xe3\x8c>\x83\xd5\x17"
    set_0 = set()
    list_0 = [bool_0, bool_0, set_0]
    tuple_0 = (bool_0, bytes_0, bool_0, list_0)
    module_0.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    int_0 = 3249
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    bool_0 = True
    dict_0 = {}
    module_1.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    int_0 = 2585
    tuple_0 = (int_0,)
    str_0 = "=\x0c&gjm5nVPqml?=@\rc"
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    bytes_0 = b"\xe4\xfe\xbf\x1d\x9a\xcc\xe5\x83\xad\xe1\xd4\x9c0cY"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    object_0 = module_0.object()
    set_0 = {object_0}
    list_0 = [set_0]
    module_1.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    str_0 = "d%gkp&"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    float_0 = -2409.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    int_0 = -1789
    tuple_0 = (int_0,)
    module_2.urlparse(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    list_0 = []
    object_0 = module_0.object(*list_0)
    none_type_0 = None
    module_1.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    str_0 = 'H=_Q(C)jj;d/+Bh"'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    int_0 = -1217
    bool_0 = True
    tuple_0 = (int_0, bool_0, int_0)
    module_1.match(tuple_0, bool_0)


def test_case_4067():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4068():
    complex_0 = 62 + 32.1288j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0, bool_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, bool_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    float_0 = -1406.23
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    bytes_0 = b"\xb8-{\xf0\x84\x9c\xa3\xad\x0e\x02|<oi\xaa\xcdSJ"
    tuple_0 = (bytes_0,)
    module_1.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    bytes_0 = b"\x91\xab\xf7\xda*\xa9`\xac\x15h"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bytes_0 = b"\x13jT\xbc&\xccE\xc2ru&\x95)\xc7\xffY\xe2Z"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    complex_0 = -1325.942 - 1354.32j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    int_0 = 1966
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    bytes_0 = b"\xd3(\x9d^-/\xc30B\xc6\xc2\xeb7\xd1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    int_0 = 1394
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0, tuple_0: tuple_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    bytes_0 = b"~v"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    int_0 = -948
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    bytes_0 = b"\xe4\x10"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    bytes_0 = b"%`-^\xd4\xc0V\x1e[\x05\xc2=>/j\xda"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    float_0 = -1413.26418
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    float_0 = -2918.1
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    bytes_0 = b"\xe1\xefD\x18\x1a\xe5?5\xd6\xe9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    float_0 = -4282.3175
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    float_0 = 175.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    complex_0 = 1078 + 594.24j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    int_0 = 106
    tuple_0 = (int_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    int_0 = 93
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    str_0 = "3"
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {str_0: str_0, str_0: list_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    str_0 = "iE'L*L_\x0b}_D&.HmT"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    int_0 = 3493
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    float_0 = -976.0
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    object_0 = module_0.object()
    module_1.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    str_0 = "4`2kj\ro8\\_N&?y%>1("
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    complex_0 = -1448.3105 + 1582.568j
    module_2.urlparse(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    bytes_0 = b"|G\xfa\xfc\x0b(\xcb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    bytes_0 = b"\x015\x815O\xd6\x16"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    float_0 = -1987.9
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    int_0 = -487
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    str_0 = "GAz3mX(]."
    list_0 = [str_0, str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    str_0 = "0\n)(,u4"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    float_0 = -2667.87
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = "@Vu\x0bpQ^S-5MT:7g\\y!3"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    str_0 = "?D&[N4:"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    int_0 = 4336
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_1.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    bool_0 = True
    int_0 = 912
    list_0 = [int_0, int_0, int_0, bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    object_0 = module_0.object()
    set_0 = {object_0}
    bool_0 = True
    tuple_0 = (set_0, set_0, bool_0)
    module_1.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    int_0 = -5273
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bytes_0 = b"\x83\xc8\xffSr\x91zv?\xdb\x90\xe6sE\x0e\x8b\x95"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    float_0 = 1660.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    none_type_0 = None
    dict_0 = {}
    module_1.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    complex_0 = 3179.909 + 2119.8764j
    tuple_0 = (complex_0,)
    int_0 = -1014
    dict_0 = {tuple_0: tuple_0, int_0: complex_0, complex_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_2.urlparse(set_0)


def test_case_4119():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4120():
    str_0 = ")zU\x0c"
    set_0 = {str_0, str_0, str_0, str_0}
    bytes_0 = b"\xb8\x81\x90\xdb\xad9\x05\xab\xbf$"
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    bool_0 = True
    none_type_0 = None
    module_2.urlparse(bool_0, allow_fragments=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    int_0 = 1969
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    list_0 = []
    bool_0 = True
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    str_0 = "4k\x0c8\n8|x!\nD\\lYA,xsp"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    str_0 = "xdp&g![{{Vj1x<3"
    set_0 = {str_0, str_0, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bytes_0 = b'\xb2k"'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    int_0 = -441
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    complex_0 = -1342 - 591.63458j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    complex_0 = 1787.8 - 2009.47359j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    int_0 = -4274
    list_0 = [int_0]
    module_0.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    bool_0 = True
    str_0 = "eN1u\x0bKHO`"
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (str_0, list_0, list_0)
    tuple_1 = (bool_0, str_0, tuple_0, list_0)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [bool_0, bool_0, bool_0, list_0]
    module_1.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    int_0 = -770
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    list_0 = []
    bytes_0 = b"b"
    complex_0 = 1699.689 - 2884j
    tuple_0 = (list_0, bytes_0, complex_0)
    module_1.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    set_0 = set()
    bytes_0 = b"\xb7q\x93\t\x90\xbe\xfa\xe4\x06\xe5\xe8\xfd"
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    int_0 = -200
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bytes_0 = b"\xa9\x80L\x89 \x15p~\xe1E\xd8V"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bytes_0 = b"\x04K\x01)\x9c\x9c\x13d\x1cE."
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    str_0 = "`0+*3Bum^,(to+xu|"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    bytes_0 = b"\x17\x11\xbe\xc4M\x8f\x94\xfa.eU&_X"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    bytes_0 = b"B\x02\xc9P\x0f\x9f\xcd\xe7Q\x85\xb3\x14\x15\x1a\xcc\xef\xe5|z\x87"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    bytes_0 = b"\xd6&V\x028\x9fjCq"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    bytes_0 = b"gC\x81P\xb1\xca\xe6\xae\xf0\x1c"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    str_0 = ""
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    int_0 = -1389
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    str_0 = "9cd\x0c+|$$i!Wvj5p&IN*"
    module_1.match(str_0, str_0)


def test_case_4149():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    bytes_0 = b"\xf6\xbd\x13\xa0,"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    complex_0 = -1285.67 - 1084.8j
    bytes_0 = b"\xa1\\\xb1\xde\xcf\xf8u\xef|`\x01L,"
    dict_0 = {complex_0: complex_0, bytes_0: complex_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    float_0 = 588.1
    module_1.match(float_0, float_0)


def test_case_4155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4156():
    bool_0 = False
    set_0 = {bool_0}
    module_1.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    bool_0 = False
    str_0 = "~\n,C}"
    tuple_0 = (bool_0, str_0)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    str_0 = "!1J@2DLBAS"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    str_0 = "wK;t5;\x0b(bdv?Gj"
    float_0 = 208.0
    module_1.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    float_0 = -585.253469
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    list_0 = []
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    int_0 = 3125
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    list_0 = []
    str_0 = ".@H?7(H/0kh\tyq"
    str_1 = "em(.{Q5HY+#-="
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    complex_0 = -2770.4625 + 682.3j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    none_type_0 = None
    bool_0 = True
    tuple_0 = (bool_0,)
    module_1.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    float_0 = 5024.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    float_0 = 2399.028525
    set_0 = {float_0, float_0, float_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    float_0 = -261.161486
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0, set_0)
    module_1.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    bytes_0 = b"\x13\xaeGW>x\x19\xb8\xc7\x0e\x8a'J\xf2\x16\xe8\xefk"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    bytes_0 = b"9"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    bytes_0 = b"9\x95\x03x\x84j-\x88X\xd3+\x12\xe2\x87\xfd\xff\xc90p"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    str_0 = "&~AG'SkA\t61p\nX+O(23"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    int_0 = 1991
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    float_0 = 546.2
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    int_0 = -33
    module_1.get_new_command(int_0, int_0)


def test_case_4178():
    pass


def test_case_4179():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4180():
    int_0 = 958
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = True
    module_1.match(dict_0, bool_0)


def test_case_4181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    dict_0 = {bool_0: bool_0, bool_0: var_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    str_0 = "_rA_n>*IAY"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    int_0 = -1259
    tuple_0 = (int_0,)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    int_0 = -244
    set_0 = {int_0, int_0}
    bool_0 = False
    tuple_0 = (int_0, int_0, set_0, bool_0)
    module_2.urlparse(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    bytes_0 = b"\x8e\xee\x8aPV\x0fe\x06\x120 %"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    int_0 = 1059
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = -911
    list_0 = [int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    str_0 = "P2s\x0b(CV)X"
    module_1.get_new_command(str_0, str_0)


def test_case_4190():
    pass


def test_case_4191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4192():
    float_0 = -1116.436
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    str_0 = "n"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    str_0 = "(V|"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    str_0 = "FC7\x0c\x0bIe.y^jdv"
    dict_0 = {str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    int_0 = -674
    tuple_0 = (int_0,)
    list_0 = [tuple_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    str_0 = "~0-8\t6gGD.\x0b6"
    module_1.match(str_0, str_0)


def test_case_4198():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4199():
    str_0 = '3AV]"V4}W2ek'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    float_0 = 2126.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    bytes_0 = b"bi\x1a\x9e\xda#\xcf\xa4\xeb\x8e|\xea\xf6\xf0G\xb1"
    tuple_0 = (bytes_0,)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    int_0 = -1464
    set_0 = {int_0, int_0}
    bool_0 = False
    tuple_0 = (int_0, set_0, bool_0)
    list_0 = [tuple_0, set_0]
    float_0 = -248.412
    module_1.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    str_0 = "n&Mu+$?^4V#`(mdSZP\r"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    int_0 = -3399
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    dict_0 = {}
    list_0 = [dict_0]
    float_0 = 4489.9
    module_1.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    float_0 = -97.3897
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    float_0 = -5056.75197
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [list_0]
    list_2 = [list_1, float_0]
    module_1.get_new_command(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    str_0 = "\x0cp#[,"
    int_0 = 1966
    list_0 = [str_0, int_0]
    module_1.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    complex_0 = 2509.45765 + 2550.648j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = -2438
    module_1.match(int_0, int_0)


def test_case_4211():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4212():
    int_0 = 4510
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    bytes_0 = b"\x91\x89\x8d"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    bool_0 = False
    bytes_0 = b"#\x1b\xfc\xa9\x13\x85\xea1\x1a\x15\x04(g\xbd\xb3\x8ao\xe9\x16"
    str_0 = "Fttl^]b^J,4~^5\t>jSy9"
    float_0 = 1208.76397
    tuple_0 = (bool_0, bytes_0, str_0, float_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    complex_0 = -2830.03266 + 1385.3j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    str_0 = "]~"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    str_0 = "1@_'"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    int_0 = 2394
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    int_0 = -1361
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    bytes_0 = b"\xf8\xd7\x8d~\x8b\x98\xa7\xf9\xe3u\x90\xac\x8c\xb7\x02\x02\xdf\x9f\x9e"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    bytes_0 = b"Id0Q\xfd\x84\x1b\xa4\xf3\xb0\x10\x04l\x19h\xac\xae>n"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_4223():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4224():
    float_0 = 2104.08024
    set_0 = {float_0, float_0, float_0, float_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    str_0 = "2b$\\Fl>IS\x0c\\[=1|_"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    str_0 = "G}\t"
    set_0 = {str_0, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    int_0 = -2265
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    int_0 = 1637
    tuple_0 = (int_0, int_0)
    module_1.get_new_command(tuple_0, tuple_0)


def test_case_4229():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4230():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    str_0 = "|(%*|L"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    bytes_0 = b"\xdb\xa5"
    str_0 = ";\x0c"
    tuple_0 = (bytes_0, bytes_0, str_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    int_0 = 3325
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    object_0 = module_0.object()
    list_0 = [object_0, object_0]
    list_1 = []
    list_2 = [object_0, list_0, list_1, object_0]
    module_1.get_new_command(object_0, list_2)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    float_0 = -871.41196
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    bytes_0 = b"\n\xba+<\x0b\x9c_&\xa6\x9c\x19\x0f(\x10\xca\xa5\x98\x7f\xaf\x0c"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    str_0 = "1SQ\x0b<7*{(*8(5/cl"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    float_0 = 698.0
    module_1.match(float_0, float_0)


def test_case_4239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4240():
    none_type_0 = None
    str_0 = '4Im\x0b"<x|'
    module_2.urlparse(none_type_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    str_0 = "P(Lr )p"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    int_0 = 483
    str_0 = "\\!/@uVGb"
    module_1.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_1.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    int_0 = 181
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    float_0 = -1329.0
    bool_0 = True
    module_1.match(float_0, bool_0)


def test_case_4246():
    str_0 = "18,b^XN"
    list_0 = [str_0, str_0, str_0]
    var_0 = module_2.urlparse(str_0, str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    int_0 = -1534
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "8wq#2HE8\x0baM(z"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_1.match(set_0, set_0)


def test_case_4250():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4251():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    int_0 = -4193
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    object_0 = module_0.object()
    module_0.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    float_0 = 3495.067
    bytes_0 = b"\xcb\x89\xe3y\x88\xd2u\x02\xf1\x98\x0c"
    module_1.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    complex_0 = 517.36 + 811.799j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = "}W+I>HF|idfQh<G"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    int_0 = 2661
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    str_0 = "\rYBH92("
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    int_0 = -1035
    tuple_0 = (int_0, int_0)
    set_0 = {int_0, int_0, tuple_0, tuple_0}
    list_0 = [int_0, set_0, int_0, set_0]
    list_1 = [list_0]
    module_1.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    str_0 = "q)\\,Ra\\.\n"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    bytes_0 = b"Z\xad\x16\x1c\xac\x7f%\xc4\x81q\xea$\x80j&\x8e."
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


def test_case_4262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4263():
    float_0 = -358.847
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    str_0 = "*"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    int_0 = 2088
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    int_0 = -1812
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    str_0 = "[;G?!-.\nG, VQD'>"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    int_0 = 1031
    dict_0 = {}
    str_0 = "(D*}~,q9P'\">_1"
    int_1 = -3045
    tuple_0 = (str_0, int_0, int_0, int_1)
    tuple_1 = (int_0, dict_0, tuple_0)
    module_2.urlparse(tuple_1, allow_fragments=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    complex_0 = -1753.891 - 1455.955926j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_1.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    int_0 = 585
    none_type_0 = None
    module_1.match(int_0, none_type_0)


def test_case_4271():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4272():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    float_0 = 367.72
    module_0.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    bytes_0 = b"\xfb\xc1_\xf9J\x02\x91\xa5\x87\x8a\x94\x06"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    str_0 = "\\qTT%DD^?j"
    list_0 = [str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    str_0 = "M{sg}{cP\x0c\rUwa~BWm(uS"
    bool_0 = True
    dict_0 = {bool_0: bool_0, str_0: bool_0, str_0: bool_0}
    tuple_0 = (str_0, bool_0, dict_0, bool_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    str_0 = "E"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    bytes_0 = b"\xfe=\x90-"
    module_1.match(bytes_0, bytes_0)


def test_case_4280():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4281():
    complex_0 = -2894.363213 + 450.54j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0]
    module_1.get_new_command(list_0, tuple_0)


def test_case_4283():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    float_0 = -1004.79495
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    int_0 = 10
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1, bool_1)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    int_0 = -1302
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    int_0 = 686
    module_2.urlparse(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    int_0 = 2517
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    module_1.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    bytes_0 = b"="
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    bool_0 = True
    module_2.urlparse(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    module_2.urlparse(dict_0, object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    float_0 = -936.93
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0]
    none_type_0 = None
    module_1.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    bytes_0 = b"R\xc8<\x9d"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    int_0 = 1273
    dict_0 = {int_0: int_0}
    module_1.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    int_0 = -1474
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    str_0 = "V=v}$edGDk(ap3"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    float_0 = 1641.832124
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    bytes_0 = b'AC\xbe\xfc\x14"[\xb5VARRv\x17\x81'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0)
    set_0 = {bool_0, bool_0, var_0, var_0}
    module_1.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    complex_0 = 2009.7 + 1660.1j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_1.match(dict_0, complex_0)


def test_case_4308():
    pass


def test_case_4309():
    pass


def test_case_4310():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4311():
    none_type_0 = None
    module_0.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    str_0 = 'I\r9Y\x0cDd!:=)&[S"\tyQ<'
    tuple_0 = ()
    module_1.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    bytes_0 = b"4\x8b\x80JD\x8d\xedBK\xe1\xf6bD\x05\x94\x8c\x90O"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    str_0 = "f`Ucp\x0cH>`=!R5\r\x0bcO."
    dict_0 = {str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    str_0 = "\x0b=.mn"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    int_0 = 317
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    bytes_0 = b"\xd5\xfe"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    bool_0 = False
    tuple_0 = ()
    module_1.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    str_0 = "^75l^*\x0c"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    bytes_0 = b'\x95\xf5]\x7f\x13\xc7\x8dr%\xfb\xdd"\xbaM\xe1c'
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    float_0 = -1192.44091
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    str_0 = "Xe_9tai{<"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


def test_case_4324():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4325():
    object_0 = module_0.object()
    tuple_0 = ()
    module_1.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    int_0 = 1239
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    str_0 = "/"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    str_0 = "[$1jpPqEA:"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    float_0 = -5.1879
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    float_0 = -2261.8165
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    int_0 = 556
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    bytes_0 = b"\xdf\xb2\x11"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    bytes_0 = b"\xde\x81M\x8c\xe2\x9fQ\xfc\x08&g\xff\xd5\xfa\x94w"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    float_0 = -2013.07096
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    int_0 = -677
    none_type_0 = None
    module_1.match(int_0, none_type_0)


def test_case_4337():
    pass


def test_case_4338():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4339():
    int_0 = 3971
    set_0 = {int_0, int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    int_0 = 819
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    str_0 = "C#9~Tnt3:(#+mXJqVs"
    var_0 = module_2.urlparse(str_0)
    module_1.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    float_0 = 333.39567
    list_0 = [float_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    str_0 = "9,7?vH6{"
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    float_0 = -896.65687
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    bytes_0 = b"\xcaEm\xd8\xed6\xc6?\xce"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    int_0 = -959
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


def test_case_4349():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4350():
    int_0 = 1041
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    complex_0 = -4153.396704 + 797j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    int_0 = 1510
    tuple_0 = (var_0, var_0, var_0, int_0)
    module_1.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    str_0 = "Yd1$Ef\x0crn^<"
    bytes_0 = b"z2\xfb\\\xbb!\x13\xb3\xb3\xb5\r0_!"
    module_1.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    int_0 = -774
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    complex_0 = -1219.2477 - 2631.363665j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    none_type_0 = None
    float_0 = -152.4
    module_1.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    int_0 = 1457
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    str_0 = "{0E*rrbc"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    str_0 = "'Arp7["
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    object_0 = module_0.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    str_0 = "V i/j<z4&^9*\\P,"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    int_0 = 2221
    set_0 = set()
    module_1.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    int_0 = 933
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    bytes_0 = b"\xc0\xdb\x11\xb6\xb0\xd5\xbbP\xa1.\xf4\xba6&\x02x\x8a\xac\x14\xd9"
    set_0 = {bytes_0}
    module_1.match(set_0, bytes_0)


def test_case_4366():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4367():
    float_0 = -1740.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    int_0 = 18
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    float_0 = 718.21
    list_0 = [float_0, float_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    bytes_0 = b"\x95\x9a\x0c\xec"
    complex_0 = -1874.728256 - 243.6566j
    list_0 = [bytes_0, complex_0]
    module_1.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    bytes_0 = b"\x97\xb4g\x9b\\\xd122\x16\x15\x16%\xc3AP\xd2$S"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    str_0 = "M7S"
    set_0 = {str_0, str_0, str_0}
    module_2.urlparse(set_0, allow_fragments=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    bytes_0 = b"\xd0\xeb\xe6w1\xaa \x83\xd3\x0e\xc0\x18.>1\x1c"
    set_0 = {bytes_0, bytes_0}
    int_0 = 578
    tuple_0 = (set_0, int_0)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    float_0 = -1708.71806
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    bytes_0 = b"z\x8c\xd2\xe8\xdd\xae8>g\xc7\xafG 6$\xde"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.get_new_command(list_0, list_0)


def test_case_4377():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4378():
    str_0 = "*n\"] Lp86@0'|\x0c+$FW"
    list_0 = [str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    bytes_0 = b"e\xc5\x06\xbf\x1f"
    list_0 = [bytes_0, bytes_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    int_0 = 1704
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    complex_0 = 836.99554 - 2028j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    float_0 = -3393.81366
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    float_0 = 1014.279667
    module_2.urlparse(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    complex_0 = -3053.30061 + 2080j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    int_0 = 2205
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    complex_0 = -778.360087 + 4234.2383j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    bytes_0 = b"I\x9f\x92\x12\x88l"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    bytes_0 = b"m\xf8\x8f\x00\xd5\x93\xf7\xeb\x9e6"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bytes_0 = b"\x18N\x1b\xd2\x8e\x9a"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    object_0 = module_0.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    int_0 = 4162
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    str_0 = "\\cBFfQQRl2/"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    bytes_0 = b"\xddfd]bh"
    set_0 = {bytes_0, bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    none_type_0 = None
    bytes_0 = b"\xa1#\x19"
    module_1.get_new_command(none_type_0, bytes_0)


def test_case_4396():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4397():
    int_0 = 392
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    str_0 = "dO%S[j,'=)rM1}3"
    module_1.get_new_command(str_0, str_0)


def test_case_4399():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4400():
    bytes_0 = b"\xe9\x0c"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    bytes_0 = b'n"\xe2\xf7\xdc&\xd3\x8b_\x19\x00\x85\x1e\x83\x8a'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    bytes_0 = b"\xce"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    str_0 = "uhAX"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    float_0 = -1431.0
    bytes_0 = b"j\xab>rC\n"
    tuple_0 = (float_0, bytes_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    bytes_0 = b"\x83"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    int_0 = -2582
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    bytes_0 = b"\xe5\x96\x1a-\xf2\xbf\xa4\xff\xe0\x9a"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    float_0 = -3084.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    bytes_0 = b"\x1el\xa75Y\xa6\xd5\xd1\x0b\x90\x8d\xf4\xf9]\xe8B\xb4\xca\xc7l"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    bool_0 = False
    complex_0 = 689 + 2413.18183j
    set_0 = {bool_0, bool_0, complex_0, complex_0}
    list_0 = [bool_0, bool_0, complex_0, set_0]
    module_1.match(list_0, set_0)


def test_case_4411():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4412():
    tuple_0 = ()
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    bytes_0 = b"-\x91"
    bool_0 = False
    module_1.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    int_0 = 1395
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    str_0 = "_%1Svvd't-@+xRG9$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    set_0 = set()
    tuple_0 = (set_0,)
    list_0 = [tuple_0, tuple_0]
    float_0 = -3403.24
    tuple_1 = (tuple_0, list_0, list_0, float_0)
    module_1.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    float_0 = 5252.086755
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    bool_0 = True
    dict_0 = {var_0: none_type_0, bool_0: var_0, var_0: var_0, none_type_0: bool_0}
    int_0 = -1800
    list_0 = [dict_0, none_type_0, int_0]
    list_1 = []
    module_1.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    float_0 = 145.48818
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    float_0 = 110.317443
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    bytes_0 = b"\x12I\xcc\xf8\xf6\xad%\x08\xae\xc8Gv\x0b\xde\xdaY\xa4"
    int_0 = -1537
    tuple_0 = (bytes_0, int_0)
    set_0 = {tuple_0, bytes_0, tuple_0, int_0}
    module_1.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    float_0 = -756.683198
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    bytes_0 = b"\xa6\x1d\xab\xae\xe5\xfb\x82`\x95\xab\xd2\xdaT\xffP\x04\xf0"
    bytes_1 = b"\x9d\x84^.\x88\x7f\xea[\xcb\xa0"
    dict_0 = {bytes_1: bytes_0, bytes_1: bytes_1}
    tuple_0 = (bytes_0, dict_0, dict_0)
    module_1.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    float_0 = -6.72
    list_0 = [float_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    object_0 = module_0.object()
    module_0.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    int_0 = -4531
    set_0 = {int_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    bytes_0 = b"\x0bc"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    bytes_0 = b"a"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    str_0 = "o/A!8"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    none_type_0 = None
    bytes_0 = b"\xc79/\xc3\x1ar\xc5e\x03\xf6\x84@\x1a\x7f\xea\x83"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    none_type_0 = None
    int_0 = 483
    module_1.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bytes_0 = b"(\xaf\xef*|F"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = -560.027
    int_0 = 1235
    tuple_0 = (float_0, float_0, int_0)
    list_0 = [dict_0, tuple_0, bytes_0]
    int_1 = -224
    module_1.match(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_1.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    str_0 = 'dFPn="c[^270'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    float_0 = -4071.99781
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    int_0 = 1988
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    bytes_0 = b"\x90\xf6T\xa3S8\xf2\x03\r*\x82.\xae\xc8\x8e\x14"
    module_1.match(bytes_0, bytes_0)


def test_case_4438():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bool_0, dict_0)
    bool_1 = True
    set_0 = set()
    tuple_1 = (tuple_0, bool_1, set_0)
    module_1.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    int_0 = -1354
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    str_0 = "V.!tx>9\\0\x0cra2?D\rK"
    set_0 = set()
    module_1.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    str_0 = "7l1krM-sz[U+ppU"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    float_0 = -7.083
    int_0 = -4854
    tuple_0 = (float_0, int_0)
    module_1.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    bytes_0 = b"t\x9f\x05\x1b\xe0\x17\xfaT\xc9U\xa7L\x9c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = -183
    tuple_0 = (dict_0, int_0, int_0)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    int_0 = 1767
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    str_0 = "Q#}/"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    set_0 = set()
    dict_0 = {}
    tuple_0 = (set_0, dict_0)
    list_0 = [tuple_0, set_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    float_0 = 2140.6
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    bool_0 = True
    bytes_0 = b"v\x15\xd0\xf3\xd0\xadL\xfe"
    set_0 = {bool_0}
    tuple_0 = (bool_0, bytes_0, bool_0, set_0)
    module_1.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    bool_0 = True
    str_0 = "aINDj~5HLZ,X5)L<Yc|0"
    set_0 = {bool_0, bool_0, bool_0, str_0}
    module_2.urlparse(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    str_0 = "JWg*"
    list_0 = [str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    bytes_0 = b"0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    str_0 = "Wdx[&A<F1KVrT"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    complex_0 = -2700.09 - 2024.0761j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    object_0 = module_0.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    bool_0 = False
    str_0 = "l-?+xE06In)CmuIY"
    module_1.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, dict_0, bool_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_2.urlparse(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    float_0 = 2239.6
    list_0 = [float_0]
    tuple_0 = (float_0, list_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    int_0 = 3427
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    str_0 = ")`rq|"
    set_0 = {str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    complex_0 = -238.6029 - 115.254684j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    complex_0 = -2921.832 + 2377.747j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    none_type_0 = None
    str_0 = "E"
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    str_0 = "gHt\x0c7+\x0boG\r_2"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    int_0 = 526
    bool_0 = False
    module_1.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    float_0 = -3833.7
    list_0 = [float_0, float_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    bytes_0 = b"\xed\xfb7\xc6s\x07\xd7R\xdd"
    set_0 = {bytes_0}
    bool_0 = True
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    float_0 = -1008.219
    module_1.get_new_command(float_0, float_0)


def test_case_4470():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4471():
    str_0 = "8{zh|pQ|2/8L"
    str_1 = "*T\r"
    bytes_0 = b"\xa4"
    str_2 = "{renDPkW+~YzDI'!"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: bytes_0, str_2: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    bytes_0 = b";\xfd\xa5P^\xa8\xf0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    bytes_0 = b"\xc8\x8ca\x90"
    module_2.urlparse(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_1.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    bytes_0 = b",t"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    float_0 = -147.1
    module_2.urlparse(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    complex_0 = -1451.4 + 800.248736j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    float_0 = -2697.171
    tuple_0 = (float_0,)
    tuple_1 = ()
    module_2.urlparse(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    bytes_0 = b""
    var_0 = module_2.urlparse(bytes_0, bytes_0)
    dict_0 = {var_0: bytes_0, var_0: var_0, var_0: bytes_0, bytes_0: var_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    int_0 = 1
    module_1.get_new_command(int_0, int_0)


def test_case_4483():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4484():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    float_0 = -2034.9091
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    dict_0 = {bool_0: list_0}
    tuple_0 = (list_0, bool_0, dict_0)
    module_1.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    float_0 = -652.33
    set_0 = {float_0, float_0}
    int_0 = 3266
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    str_0 = "CP|\"'"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    int_0 = -1230
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    list_0 = []
    var_0 = module_2.urlparse(list_0, allow_fragments=list_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    str_0 = "zvB(<92gd:04]"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    str_0 = "ZeXlmXq?b$jaApu4%rzl"
    list_0 = [str_0, str_0]
    list_1 = [str_0, str_0, list_0]
    list_2 = [list_1, list_0, list_0]
    module_1.match(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    str_0 = "GBCt+H1|w+1EP.H"
    int_0 = 1719
    float_0 = -3669.132135
    tuple_0 = (str_0, int_0, float_0, int_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    int_0 = -1593
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    str_0 = "<M]wI[Yix>^_2/W(V=k"
    set_0 = {str_0, str_0, str_0, str_0}
    module_2.urlparse(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    bytes_0 = b"\xccs^+\xbd\x19r\xbe\xa7M\x80\x08|x\x04@\x12\xb1\x92"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    float_0 = 5568.9919
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    bytes_0 = b"\xbb\xf4\xd8K\x91\x0bx\x17"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    str_0 = "#dC&;YT"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    bytes_0 = b"\x06N\xac\xb06.\x00\x92\xa8'\xe4.\xbcx\xcc\x1e\xe7"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    int_0 = 370
    module_1.get_new_command(int_0, int_0)


def test_case_4502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4503():
    complex_0 = 1000.438394 - 898.9j
    complex_1 = 196.746 + 691.2601j
    dict_0 = {complex_0: complex_0, complex_0: complex_1, complex_0: complex_1}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    str_0 = "?\tg3\\G'wd+}"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bytes_0 = b"8w\x16\n/P\x00uy\xd3g\xa9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    int_0 = 1889
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    int_0 = 1996
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    bytes_0 = b"\x8e\xad\x0fK\x96)\xf7\xc9\xc1\x03"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    int_0 = 666
    bool_0 = False
    module_2.urlparse(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    float_0 = 602.33
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    list_0 = []
    list_1 = [list_0, list_0]
    module_1.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    float_0 = 380.83
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    bytes_0 = b"\x85D\xb0\\\x1dV$\x97|\xd5\xb4\xa1"
    list_0 = [bytes_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


def test_case_4515():
    pass


def test_case_4516():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4517():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_1.match(set_0, tuple_0)


def test_case_4518():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bytes_0 = b"e"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    str_0 = "2l\\>bx"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    complex_0 = -3466.545867 - 6780.017411j
    list_0 = [complex_0]
    bool_0 = False
    bytes_0 = b"\xd8\xd0\x82iq\xa1"
    tuple_0 = (bytes_0,)
    dict_0 = {bytes_0: list_0, bytes_0: bool_0, tuple_0: tuple_0}
    tuple_1 = (bool_0, tuple_0, list_0, dict_0)
    tuple_2 = (tuple_1,)
    module_1.match(list_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    str_0 = "(U{1B"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    float_0 = 2752.69367
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    int_0 = 454
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    float_0 = 558.15
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    bytes_0 = b"\x113:\x98\xa4n8\x1a\xbf\n\xa0\xe2f\xec"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    str_0 = "eiS5.Ct{v]0%Drfr="
    set_0 = {str_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    str_0 = "E"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    bytes_0 = b"\x02\x99\xdfm\x15\x83"
    set_0 = {bytes_0, bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    bytes_0 = b"\x12\x9f\xe5\xbb\xe5{\x99\x82"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    int_0 = 910
    module_1.get_new_command(int_0, int_0)


def test_case_4532():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4533():
    int_0 = -533
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    int_0 = 1994
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    int_0 = 1371
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    str_0 = "2X7Wd(\nKwWF]%"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    int_0 = -36
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    complex_0 = 257.61478 + 1089j
    int_0 = -3915
    list_0 = [complex_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    complex_0 = 1524.850519 + 2418.91061j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    str_0 = "\t"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    object_0 = module_0.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_1.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    str_0 = ",:!HOUM.(u,a\\"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    str_0 = "IejtyC\x0b^seo1?V"
    int_0 = -3039
    dict_0 = {str_0: int_0, str_0: int_0, str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    float_0 = -426.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    bool_0 = True
    set_0 = {bool_0}
    module_1.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    list_0 = []
    list_1 = [list_0]
    module_1.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "QaI"
    tuple_0 = (bool_0, list_0, str_0, str_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    int_0 = -3226
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    set_0 = set()
    list_0 = [set_0, set_0]
    list_1 = [list_0, set_0, list_0, set_0]
    module_1.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    str_0 = "_1xV)3#1PjD\t9J>\r"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    int_0 = 644
    bytes_0 = b"\x89f"
    list_0 = [int_0, int_0, int_0, bytes_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    str_0 = "ooFo#OSS"
    none_type_0 = None
    str_1 = "mnS+N<B~a sU\x0bF_LS<7@"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    bool_0 = False
    str_0 = "7&3]"
    module_1.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    bytes_0 = b"7^\xd2\xb6\xa4\x06\xe4\xb4<\xdf"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    int_0 = -2449
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = True
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    str_0 = '@H"\t6_B8w;'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    bytes_0 = b"&\x936\xe1\xb6fj"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    str_0 = "WdnDm`3$1:e^"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    float_0 = 520.906819
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    bytes_0 = b"\xac\xee\xe2{\x14"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    str_0 = "qL3*S\x0c1"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    bytes_0 = b"\x91M\x89\x81\x92\xab?k\x1e"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    bool_0 = False
    int_0 = 1509
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    int_0 = 1050
    list_0 = [int_0, int_0]
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    str_0 = "7b\\\x0c%Y-~N "
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    bytes_0 = b"\xaco\xd3\xc1\x89~\xa0?\xe5\xf7"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    bool_0 = True
    float_0 = -1490.96882
    module_1.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    bytes_0 = b"\xfaNN>\xca\x8fN\xbb\xc1W\x8c\xa2@#P\xcc\xc2T\x91F"
    module_2.urlparse(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    float_0 = -1469.9
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    float_0 = -978.98083
    module_2.urlparse(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    int_0 = 2626
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    int_0 = -1321
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    float_0 = 119.2471
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    int_0 = 257
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    float_0 = 1957.968
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    int_0 = 285
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    str_0 = 'KOm6_^"y/o/[fY&6=Wt'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    str_0 = "p4U\x0cnFCQ}"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    str_0 = "_thK&\x0chKh;]:J\nO6"
    var_0 = module_2.urlparse(str_0)
    module_2.urlparse(var_0, var_0)


def test_case_4585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4586():
    str_0 = "bq+&RD>'_sp"
    list_0 = []
    tuple_0 = (str_0, list_0)
    module_1.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    int_0 = -1039
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    bytes_0 = b"Q\xabg\xf3X\x07hEYU"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    str_0 = "\\\\e$4)i|1"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bytes_0 = b"uzR"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    str_0 = 'daRb |\nY;Scq"!\x0b\\\x0bp'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    bytes_0 = b"\x85\x9e\"\xba\xf4\xf9\x85\xc4'\x88\xedo:"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    str_0 = " *]kY3Y(f..YO\x0b<+="
    list_0 = [str_0, str_0, str_0, str_0]
    bytes_0 = b""
    tuple_0 = (list_0, list_0, bytes_0)
    module_1.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    float_0 = -692.6
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = 2515
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    bytes_0 = b"\xa0\\"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_4598():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4599():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bytes_0 = b"\x81\xb4\x83t\x88\xddO[D"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    object_0 = module_0.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    complex_0 = 1211.6169 - 2109.44573j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    int_0 = 3831
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    int_0 = 2765
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xa1g\x91)\n\xcc\x05\xe4\xa2\xaa%\xd5:\x88\xfa\xeb\x07"
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    str_0 = "\tT9cM(<DItB[gS<"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


def test_case_4607():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_4608():
    complex_0 = 261.9751 - 1123.888586j
    float_0 = 72.0
    list_0 = [float_0, complex_0]
    module_1.get_new_command(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    int_0 = -2631
    module_2.urlparse(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    object_0 = module_0.object()
    bool_0 = False
    module_1.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bytes_0 = b"V[|"
    module_1.match(bytes_0, bytes_0)


def test_case_4612():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4613():
    int_0 = -2350
    list_0 = [int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    none_type_0 = None
    list_0 = []
    module_1.match(none_type_0, list_0)


def test_case_4615():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4616():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    bytes_0 = b"<k\xe3\x14|'\xfa\x0f\xc9\xee\xf0"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    bytes_0 = b"\xbfQ\x12\xad\xe0m,\xf2~\x80y\xcd\xc8\xf5\xb0\xdanX\xcb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    str_0 = "<+I>ez\r%G$\tyf"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    float_0 = 3137.85792
    module_1.get_new_command(float_0, float_0)


def test_case_4622():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4623():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    bytes_0 = b'dr\xbc<\x1e2"'
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    bool_0 = False
    str_0 = ","
    module_1.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    str_0 = "Ak.q[3EF}d|r"
    var_0 = module_2.urlparse(str_0, str_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    bool_0 = False
    int_0 = -2197
    module_1.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    bytes_0 = b"\x1a\xbd2\xfcI*\xddh\xdf"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    float_0 = 1399.14
    module_1.match(float_0, float_0)


def test_case_4629():
    pass


def test_case_4630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4631():
    int_0 = -798
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    complex_0 = 665.974 - 2940.7j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    bool_0 = False
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    complex_0 = 1850.27 - 1457.129j
    tuple_0 = ()
    set_0 = {complex_0, complex_0, complex_0, tuple_0}
    module_2.urlparse(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    int_0 = -2203
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    int_0 = 905
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    float_0 = -793.0
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    bool_0 = True
    bytes_0 = b"\xc0\n"
    list_0 = [bytes_0, bool_0, bytes_0, bytes_0]
    tuple_0 = (bool_0, bytes_0, list_0, bool_0)
    module_2.urlparse(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    int_0 = 485
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    int_0 = -836
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    str_0 = "NRj>"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    str_0 = "~><1.$A"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    str_0 = "!-,48E5"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (dict_0, bool_0, tuple_0, tuple_0)
    module_1.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    bytes_0 = b"\xba\xfaem\xae\xa6\xf8\xa4\xf3\xfb\xf8\xd1\xbf[e\xc3"
    tuple_0 = ()
    module_1.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    int_0 = -846
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: bool_0}
    tuple_0 = (int_0, bool_0, dict_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    float_0 = -761.0
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    float_0 = 1499.063
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    bytes_0 = b"\xca\xdb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    int_0 = -1724
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


def test_case_4650():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4651():
    bool_0 = False
    none_type_0 = None
    var_0 = module_2.urlparse(bool_0, allow_fragments=none_type_0)
    module_1.get_new_command(var_0, none_type_0)


def test_case_4652():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4653():
    int_0 = -3078
    bool_0 = False
    module_2.urlparse(int_0, int_0, bool_0)


def test_case_4654():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4655():
    int_0 = -1634
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    int_0 = -2763
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    bytes_0 = b"\xca\x8d\x17\xb2\x16\xb9+\xdbH&\xea"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    bytes_0 = b"\xbc\x1f*\x86\r(-\x06x\x1a\x05j\xc2\xfc\x1a:\xf7\xff"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    float_0 = -3313.2066
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    complex_0 = -16.064793 - 263.6j
    dict_0 = {complex_0: complex_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    object_0 = module_0.object()
    int_0 = -1628
    list_0 = [object_0, object_0, int_0]
    module_1.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0, bool_0, bool_0)
    tuple_0 = (var_0, var_0)
    module_1.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    str_0 = ";&5a!;$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    int_0 = -761
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    int_0 = -2066
    tuple_0 = (int_0,)
    bytes_0 = b"\xde\x16f\xb0\x98\xf1+Ic\xc8os;qw\x8d\x86\xbb\x83S"
    bool_0 = True
    tuple_1 = (tuple_0, bytes_0, bool_0)
    module_1.get_new_command(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    bool_0 = True
    module_2.urlparse(bool_0, allow_fragments=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    str_0 = "?\r!vK"
    list_0 = [str_0, str_0, str_0]
    bool_0 = False
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    str_0 = ">tV\t;gPv@Chre"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    int_0 = 323
    str_0 = "1(ww\t|^MG7Nw'2Nt@e"
    list_0 = [int_0, int_0, str_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    str_0 = "l"
    var_0 = module_2.urlparse(str_0)
    module_1.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    int_0 = -1979
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    bytes_0 = b"\xc9!\x19c\x1a\xcfg\x12\xd8\xa0\x1d0\xa3\xc0\x01#\x9c\x17"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    float_0 = 4583.155
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    bytes_0 = b"\x1e\xec8/\xdeq"
    float_0 = 732.0
    bool_0 = True
    tuple_0 = (float_0, bytes_0, bool_0)
    module_1.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    float_0 = 1886.31838
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    str_0 = "Vc@97XP{E10^]l"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    bytes_0 = b"\x85\xb5>\xb5\xd5\xdc\xbe*\x92"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    str_0 = "&IY_t<[ yg!J'^]"
    module_1.match(str_0, str_0)


def test_case_4682():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4683():
    str_0 = "EM,l"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    int_0 = -2848
    str_0 = "r&Fgu6{\x0c:\x0b6s<=qP{K"
    tuple_0 = (int_0, int_0)
    str_1 = "xm9*"
    tuple_1 = (tuple_0, str_1)
    tuple_2 = (int_0, str_0, tuple_1)
    module_1.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    bool_0 = True
    set_0 = {bool_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    str_0 = "6;T(wrBstQF]"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "ajrj:59dc6%9>j"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    object_0 = module_0.object()
    none_type_0 = None
    module_1.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    bytes_0 = b"\xf8\x82~"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0]
    module_1.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    str_0 = '{_jp@40~"'
    list_0 = [str_0]
    int_0 = -1092
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    str_0 = 'h"l@?$LF'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0)
    module_1.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    int_0 = 1953
    float_0 = -1011.0
    module_1.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    bytes_0 = b"g@\xd7\xdb\xdf\x02\xfaNV\xb5"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    none_type_0 = None
    str_0 = '$6"'
    module_1.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    bytes_0 = b"\x02B8\x02\xf5\x15\x13\xbe\xef\xc0C\x90"
    module_0.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    float_0 = 783.76963
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    str_0 = "CPXUqP"
    tuple_0 = (str_0,)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    bytes_0 = b"\xcap\xca\xac\xf6W"
    module_1.match(bytes_0, bytes_0)


def test_case_4701():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4702():
    str_0 = "'T x;*mx0dcxvVev+J=\""
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    none_type_0 = None
    bytes_0 = b"^\xaa#"
    module_1.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    int_0 = -301
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    complex_0 = 2876.244847 - 2842.7112j
    complex_1 = -1877.4 - 1141.1j
    module_1.get_new_command(complex_0, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    complex_0 = 173.7267 - 1220.7j
    str_0 = "iWl95BiXS~ah4*8"
    tuple_0 = (str_0, complex_0)
    set_0 = {complex_0, complex_0, tuple_0}
    tuple_1 = (complex_0, set_0, set_0)
    list_0 = [tuple_1]
    tuple_2 = (tuple_1, list_0)
    float_0 = -750.12
    bool_0 = True
    tuple_3 = (tuple_2, float_0, bool_0)
    none_type_0 = None
    module_1.get_new_command(tuple_3, none_type_0)


def test_case_4707():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4708():
    int_0 = 1147
    tuple_0 = (int_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    str_0 = "CL$dPQ:@3Ii\rFf+`.R"
    int_0 = -852
    bytes_0 = b'\x9a\xa1\xa8KF]%\xec\x1a\x18"'
    tuple_0 = (bytes_0, int_0, int_0)
    tuple_1 = (str_0, int_0, tuple_0)
    none_type_0 = None
    module_1.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1}
    module_1.get_new_command(set_0, bool_1)


def test_case_4711():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4712():
    bytes_0 = b"\x93\xa9\xae\x1d=\x1bn:\xfd\xef\xdb\xcd\x03\x13;\xc8\xb9\x1a(\x9e"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    int_0 = -1473
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    float_0 = 1039.559
    bool_0 = True
    module_1.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    bytes_0 = b"&s\x0et\xa07\xee\xbf\xd4\xf27\xe6\x03FI\r\xe8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bytes_0 = b"\xca\xa3\t\xfeO\x0b\x08\x9eTJxn\xbd"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    none_type_0 = None
    int_0 = -2424
    module_1.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    float_0 = 1254.3
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    float_0 = -3076.4
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bytes_0 = b"\xdb\x07C{\xb8o\xf1\xe0\xef\xf3t"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    str_0 = "3g1.{QaZJP"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    int_0 = -967
    bool_0 = True
    tuple_0 = (int_0, int_0, bool_0)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    float_0 = 2842.800097
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    str_0 = "LSWg)0ouoJdmv)"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    int_0 = 530
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    str_0 = "g>O_Fm"
    list_0 = [str_0, str_0, str_0, str_0]
    bytes_0 = b"{"
    tuple_0 = (list_0, bytes_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    bytes_0 = b"\x1e_\xa4\x05"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_4729():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4730():
    int_0 = 1194
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    bytes_0 = b"*\x02\x16\x93\x10\x81"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    str_0 = "hD"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    bytes_0 = b"\x16\x98\x8a\xf7\xa8\xe7#}7\xd1K\xf8\x18\x91\x94W\x00_"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    bytes_0 = b"ed\xa3\x18\xb9\xf0y\xcf\xcc\x8fd\xfb\x93\x9d\x1a"
    module_2.urlparse(bytes_0)


def test_case_4735():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4736():
    int_0 = -3550
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    bytes_0 = b"C"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bytes_0 = b"Q\xa2m\x91\x08\x02\xef\xec\xebX"
    module_0.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    bool_0 = False
    list_0 = []
    module_1.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    list_0 = []
    object_0 = module_0.object(*list_0)
    float_0 = -3115.337209
    module_1.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    int_0 = -1393
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    float_0 = 100.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    bytes_0 = b"`\x165\x8e\x1fB\xd5\xf4\x8d+\xa9\xdc\x8fR\xc3S\x03\x0b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    bytes_0 = b"\xe5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    bytes_0 = b"C\xe9\x81\xdb\xa00\xc8\x88\xdc9\xe3\x861\x93\x02\x7fz\x0b"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    str_0 = '+^"A B^d'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    bytes_0 = b"\xe1\xf3\x13G1\x8ef\xef\x1c\xb5>"
    list_0 = [bytes_0, bytes_0, bytes_0]
    float_0 = -3248.891924
    tuple_0 = (list_0, bytes_0, float_0)
    list_1 = [tuple_0]
    module_1.match(list_1, list_1)


def test_case_4748():
    pass


def test_case_4749():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bytes_0 = b"\x87\xb3\x88H_"
    list_0 = [bytes_0]
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    float_0 = 510.0
    list_0 = [float_0]
    list_1 = [list_0, list_0]
    complex_0 = 1474.204863 + 382j
    module_1.match(list_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    str_0 = 'Zu\x0cB\x0b\n^W/"~c+\rvkz3F'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    str_0 = "U-hF\rh ]wiU:."
    list_0 = [str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    int_0 = -317
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    float_0 = -2690.3
    tuple_0 = (float_0,)
    module_1.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    bytes_0 = b"~\x0c\xe5\xc2\x1f\xef)e\xca"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    str_0 = "-.&3-B<n+"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    none_type_0 = None
    str_0 = "]KMUe|/"
    set_0 = {none_type_0, none_type_0, str_0, str_0}
    module_1.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    bytes_0 = b""
    list_0 = [bytes_0]
    bool_0 = False
    module_1.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bytes_0 = b"\xfb\xedY\xc2Jo\xfcg/DG\xdb\xea\xe0"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    bytes_0 = b"\xd38R4\xa8\xe7y7\xaf\x83\xb8\x05U#\xa0\x1a\xf4\x08\xef|"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    bytes_0 = b"e\xa0."
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    str_0 = "Fv}a:mp\x0b-D)5"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    int_0 = -2006
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    int_0 = -2783
    float_0 = 3218.263
    module_1.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    str_0 = ";"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    float_0 = 2010.924
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    float_0 = 2717.23761
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    int_0 = 523
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    str_0 = "Jh"
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: var_0, str_0: var_0}
    module_1.match(dict_0, none_type_0)


def test_case_4772():
    pass


def test_case_4773():
    pass


def test_case_4774():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4775():
    bytes_0 = b"\xf7S\x11\xa5^"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    bytes_0 = b"\x97\xa1 \xef\xb6\xd8\x12\xc0\x99\x12~\xbep\x80]\x13g"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    int_0 = -1149
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    bool_0 = True
    module_2.urlparse(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    int_0 = -1903
    set_0 = {int_0, int_0, int_0}
    module_1.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    str_0 = '\x0cJL`}E"'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    bytes_0 = b""
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    str_0 = "ZxrOxCKsuV#&g5]"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


def test_case_4784():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4785():
    int_0 = 646
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    int_0 = 1026
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    bytes_0 = b"L\x9d\xaf\x85"
    set_0 = {bytes_0, bytes_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bytes_0 = b"\xf9Uo\xa2\x8a"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    str_0 = "QU{={#8OXX"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    int_0 = 1111
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    complex_0 = -365.803 - 1849.3494j
    module_1.get_new_command(complex_0, complex_0)


def test_case_4792():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4793():
    str_0 = "^e[:|Ut(&\nQ"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    str_0 = "Frq\x0bp\r_14nA&"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.object(*list_0, **list_0)


def test_case_4796():
    pass


def test_case_4797():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4798():
    str_0 = "buD."
    dict_0 = {str_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    bytes_0 = b"\x0b\x99`\xc6R\x11\xafA\x92\xa8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    bytes_0 = b"\r\xd0\x7fwL\x11\xc1\x04"
    list_0 = [bytes_0, bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    float_0 = -1945.94239
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    complex_0 = 1951.234 + 1311.29j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    bool_0 = True
    float_0 = -1059.64617
    tuple_0 = (bool_0, float_0)
    module_1.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    complex_0 = 745.477959 + 1435.886j
    complex_1 = 466.026264 - 2802.19286j
    dict_0 = {complex_0: complex_1, complex_0: complex_1, complex_0: complex_1}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    int_0 = 1707
    tuple_0 = (int_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_1.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    int_0 = 2812
    set_0 = {int_0, int_0, int_0}
    list_0 = [int_0, set_0, set_0, set_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    int_0 = 1730
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bytes_0 = b"\xf9bB\xc5\xdcM\x0f\xc9'e\xc8\x00,\xc2\xa9\xa2c\xb1"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    str_0 = "+_mQ9Y\r1=p>("
    set_0 = {str_0, str_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    str_0 = "j<"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    bytes_0 = b"_\r*v\xe5r*"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    bytes_0 = b"\x10\xa0x\xbf\xd4\x8d\xcd\x13\xb5\xfb"
    str_0 = "^A"
    module_1.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    bytes_0 = b"\x17|\xc1w\x1d\xe1\xf5\xcf"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    str_0 = "No&|lic|o56S,q 'h."
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    float_0 = 2244.9998
    list_0 = [float_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    int_0 = -3744
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    bytes_0 = b"5!\x15\xb5v\x1c_\xbfD\x1e\x02g\xd0:QT\x9b\xb6\n\xc3"
    none_type_0 = None
    module_2.urlparse(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    int_0 = 903
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    str_0 = "A}"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    str_0 = "9,D+b@1vhJ*UUS3B$Hc"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    str_0 = "n)lS+iiS}y"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    int_0 = -3862
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bytes_0 = b"+\xb6\xfd\x97\xf4p\x84~M\x9ei\xcf\xae\xd0\x83"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    str_0 = "$@Shf?'C0.n@i^5q{b\x0c"
    str_1 = "-GW%L&ZiIF\x0bl1K/(?d"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    tuple_0 = (bool_0, bool_1, bool_2, bool_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    none_type_0 = None
    set_0 = {none_type_0}
    list_0 = [none_type_0, set_0, none_type_0, none_type_0]
    module_1.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    bool_0 = True
    list_0 = [bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    bytes_0 = b":"
    int_0 = -1411
    tuple_0 = (bytes_0, int_0)
    module_1.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    str_0 = "ranP}e"
    module_0.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.match(list_0, bool_0)


def test_case_4833():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4834():
    bytes_0 = b"\xd0\x851O"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    str_0 = "e\"tAj\rFzaXFEd='>0"
    list_0 = [str_0, str_0, str_0, str_0]
    set_0 = {str_0}
    tuple_0 = (list_0, set_0, set_0)
    module_1.get_new_command(tuple_0, tuple_0)


def test_case_4836():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4837():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, none_type_0)
    dict_0 = {var_0: none_type_0, var_0: var_0}
    module_1.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    str_0 = "AkA!wW\n6:;[@Pu"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    complex_0 = 2396.1 - 3044.611j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    int_0 = -1304
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = True
    tuple_0 = (dict_0, bool_0, bool_0)
    module_1.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    bytes_0 = b"\x0cD2!U"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    bytes_0 = b"\xbf;\x81'C\xab\x0c\xaf\xe8\x04L"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    int_0 = 1149
    module_1.get_new_command(int_0, int_0)


def test_case_4845():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4846():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    bool_0 = True
    int_0 = 351
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    str_0 = "~e=PI+3WLpA"
    list_0 = [str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    bytes_0 = b"\x87\xfa\xacP\x92"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    bytes_0 = b"\xd9tU>7\xf5\xf1\xb9\xa3\xd9\x1cw\xf3D\xa8\x96\xbf\xe64"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    bytes_0 = b"\xa5}l\x9cd\xdb\x9b~%\xa8\xf8m\x0e\xf3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    str_0 = "08w6h!"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    bytes_0 = b"\x04\xe6\xdd\x8c\x90\xb3>\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    bytes_0 = b"\xcd(\xf7q\xe00\xa7\xcck\x83;\xe7\xe3\xbaJ\xc9"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    bytes_0 = b"\xa5[\x93"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    bool_0 = True
    str_0 = "B\nX~\r!M]vIa\n]}X\r2`"
    module_1.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    float_0 = -264.693
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bytes_0 = b"\xf9\x9djB\xb4\xfe\x81\xe2\xdac"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    float_0 = 2073.606079
    none_type_0 = None
    module_2.urlparse(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    str_0 = ";Od5m-X\x0bU:.{Z"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    bytes_0 = b"\xf7\x15(\xc3\xd2k\x00CIJ\x0b\xd3\x8fee\xda\x0c\x01"
    module_1.match(bytes_0, bytes_0)


def test_case_4863():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4864():
    str_0 = "x&qs"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    str_0 = "VMY`"
    bytes_0 = b"\xe6\xa6o\xb1|'"
    module_1.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    int_0 = 54
    module_0.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    float_0 = -485.3
    list_0 = [float_0, float_0]
    module_1.match(list_0, float_0)


def test_case_4868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4869():
    int_0 = 857
    list_0 = [int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    str_0 = "{\x0bJd'>bF\x0bKF6e$\njY*oC"
    bool_0 = True
    str_1 = "+W\x0bgx5Q>/6\tox("
    tuple_0 = (str_0, bool_0, str_1)
    bool_1 = True
    tuple_1 = (tuple_0, bool_0, tuple_0, bool_1)
    module_2.urlparse(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    float_0 = 584.53585
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    tuple_0 = ()
    bytes_0 = b"`\xec\xb2\xa7@]"
    set_0 = {tuple_0, tuple_0, tuple_0}
    tuple_1 = (tuple_0, bytes_0, set_0)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    bytes_0 = b"b\x8f\xff3\xe6\xea\xf0\xa6\xd9\xc8\xf6\x17"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    str_0 = "#Rs\n`]=\t%"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    int_0 = 2742
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


def test_case_4876():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4877():
    str_0 = "<5>%;I"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    bytes_0 = b"\xa5\x9c \xb5L_\x96\n\x16\xe5\x0e\xa5\x8e"
    set_0 = {bytes_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    bool_0 = True
    str_0 = "At~PIY"
    tuple_0 = (bool_0, str_0, bool_0, bool_0)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    str_0 = "d\x0bh_^>&Y^baEM1T_"
    var_0 = module_2.urlparse(str_0, str_0)
    module_1.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    int_0 = 87
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    bytes_0 = b"d"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    str_0 = "u5s/y5eVb\x0c^6-l/yW^V)"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    int_0 = -819
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bytes_0 = b"}F\x89\xce."
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    bytes_0 = b"\xdck\x92\xdd\xe5gs\xe2\xa6\n\xd1\x86\xd26"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    none_type_0 = None
    bytes_0 = b"\x85\xc6\x9cs\xc7\xaa4\xa0"
    module_1.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    int_0 = 2884
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


def test_case_4891():
    object_0 = module_0.object()


@pytest.mark.xfail(strict=True)
def test_case_4892():
    int_0 = -2228
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    float_0 = 2094.0
    str_0 = "D->E"
    dict_0 = {str_0: float_0, str_0: str_0}
    module_0.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    float_0 = 2081.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    list_0 = []
    list_1 = [list_0]
    str_0 = ""
    tuple_0 = (list_1, str_0, list_1)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    complex_0 = -851.25285 + 1396.75166j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    int_0 = -298
    module_1.match(int_0, int_0)


def test_case_4898():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4899():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0]
    module_2.urlparse(list_0, allow_fragments=set_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    bool_0 = True
    list_0 = [bool_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    bool_0 = True
    int_0 = 1513
    list_0 = [bool_0, int_0]
    bool_1 = True
    tuple_0 = (bool_0, int_0, list_0, bool_1)
    list_1 = [tuple_0, list_0, bool_1]
    str_0 = "*,dPWco!b_>k"
    dict_0 = {str_0: bool_0, str_0: str_0}
    module_0.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    bytes_0 = b"\x0e\xa40#Jk\xb8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    module_1.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    str_0 = "B\r\\i`2\re:,x@b)]|"
    bytes_0 = b"\xce;?\xf0\xc5\xd7\x15\x92\xd1\xb1rX\xf1\x97\xd1\xba"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: bytes_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    bytes_0 = b"F\xf1\xf4\x8bF)0T\xa1\x9d,\xaemhI\x9f\x17U"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    set_0 = set()
    var_0 = module_2.urlparse(set_0)
    module_1.get_new_command(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    str_0 = "eYx/RJ4/f4U8P*#\\"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    bytes_0 = b"\xdc\xce'\xc8\x17\xbdu\x1e"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    bytes_0 = b"=\xb7\xb5\x1e\xa0\xf1\xd1y("
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    bytes_0 = b"\xdb\xd5!\xa2T<\xec\xb2\xf4a\x95\xec\x8d "
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    str_0 = "(ND?\x0cy=5aJ3~|%=kM6"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    int_0 = 2041
    module_1.match(int_0, int_0)


def test_case_4915():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4916():
    bytes_0 = b"\x18Z(){7[\x00\xfeK\x80s\x1d_"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


def test_case_4917():
    pass


def test_case_4918():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4919():
    int_0 = -975
    module_1.get_new_command(int_0, int_0)


def test_case_4920():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4921():
    complex_0 = 896.6 - 1458.4j
    dict_0 = {complex_0: complex_0}
    module_1.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    int_0 = -940
    set_0 = {int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    complex_0 = -1484.57694 + 1417.536j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    int_0 = 2808
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    bytes_0 = b"\x1e\\\x11\x161\xe2]8\x0e6"
    str_0 = "0-\x0bjV D^dqf\rRr@u;>"
    tuple_0 = (bytes_0, str_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    bytes_0 = b"\x8bo\x9f\xee}\xf7\xf9\x82\x11\xeb\xb1\x8bz(\xa8>\xa3"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    int_0 = 5552
    module_1.match(int_0, int_0)


def test_case_4929():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4930():
    float_0 = -3185.258459
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    int_0 = 295
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    float_0 = 793.8
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    float_0 = 437.446
    none_type_0 = None
    module_1.match(float_0, none_type_0)


def test_case_4934():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4935():
    bytes_0 = b"n\x0c7p\xbf\xe9\xf3s\xaaq\x81\xfe\x18[\tV"
    set_0 = {bytes_0}
    module_1.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    bytes_0 = b"l\xf9X&\x8d\xbb'@\x0c8\xed"
    list_0 = [bytes_0, bytes_0]
    module_2.urlparse(list_0, allow_fragments=list_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    bool_0 = True
    str_0 = "kJ>3\rza!=t/:\x0b'eFN.E "
    module_1.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    int_0 = 2427
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


def test_case_4939():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4940():
    float_0 = -1299.0
    tuple_0 = (float_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    float_0 = -19.3083
    set_0 = {float_0, float_0, float_0, float_0}
    module_1.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    int_0 = 1476
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    float_0 = 2013.121009
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0)
    module_1.get_new_command(float_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    float_0 = -1794.46254
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_2.urlparse(tuple_0, allow_fragments=tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    bytes_0 = b"8\xa4\xa0\x1e\xf9\xed\xd6\xff"
    str_0 = "Q[\t>:EI\n6{Y0\rsVp"
    str_1 = "KZ"
    list_0 = [str_0, bytes_0, bytes_0, str_1]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    str_0 = "rA"
    module_1.get_new_command(str_0, str_0)


def test_case_4949():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4950():
    int_0 = 3061
    module_1.get_new_command(int_0, int_0)


def test_case_4951():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4952():
    str_0 = ";h@"
    str_1 = 'GJ,\x0b"k6m'
    str_2 = "O,@WQ}"
    str_3 = "\\{\r"
    dict_0 = {str_0: str_1, str_2: str_1, str_3: str_0, str_2: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    str_0 = "$e.~"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = "p)\x0cS{r\\lAz&sG)bdwXH"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    int_0 = 551
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    float_0 = -204.78033
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    int_0 = 2723
    list_0 = [dict_0, int_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    bytes_0 = b"\xf8\xa8\x86Y\xe2N\x17N\x01"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    complex_0 = 2605.5 + 318j
    int_0 = 1294
    tuple_0 = (complex_0, int_0, int_0)
    module_1.match(tuple_0, int_0)


def test_case_4961():
    dict_0 = {}
    var_0 = module_2.urlparse(dict_0)


def test_case_4962():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4963():
    none_type_0 = None
    bytes_0 = b"\xb5Z!\xee\x93\xeb\x1c\x14"
    set_0 = {bytes_0, none_type_0}
    module_1.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    complex_0 = -783 + 214.8j
    dict_0 = {}
    module_1.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    bytes_0 = b"\xee\x93\xc4\xb8\x06\x1a\x90\x86\xa9\xf2'\xcb\xb7\xc0\x82"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    bytes_0 = b" ,\xbaU\xee\xcf\xf0\xdaZ\xe2\xf5\xbd\xb2-\xa6;o\xdbS"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    str_0 = "jztPSd"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    int_0 = -4761
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bytes_0 = b"\x87\x9e\x0b\n\xde\x83\xfa\x01"
    str_0 = "TPUKcly@"
    dict_0 = {bytes_0: bytes_0, bytes_0: str_0}
    list_0 = [dict_0, str_0, bytes_0]
    list_1 = []
    dict_1 = {str_0: list_0}
    list_2 = [list_0, list_1, dict_1, list_0]
    module_1.get_new_command(list_2, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bytes_0 = b"\x06p1\xcd\xff\xabD"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    int_0 = 2151
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    str_0 = "xtkRUS}@:fO-f"
    str_1 = "F'!c6`/&/=_"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    bool_0 = False
    bytes_0 = b"\xed\xd4\xd1K\xac\xca\x99\xac\x00b\x08\xfd\x11\x8e\xa4\x16\x8c"
    module_1.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    dict_0 = {}
    list_0 = []
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    bytes_0 = b"\x11\x08l\xcc\xbf\xf2\xa7\xb1\xd2\xc1\xef3\x0b\t\xc8\x11\xdd\x08\xa5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    float_0 = 64.236
    module_2.urlparse(float_0, float_0)


def test_case_4978():
    pass


def test_case_4979():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4980():
    bytes_0 = b"\x8a\x00\xa3\xa4a\x1c5-\xb7\x03\xd0\x84%\xa5\x0b\x1bo\xf9."
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    object_0 = module_0.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_1.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    float_0 = -365.0
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    module_1.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


def test_case_4984():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4985():
    bytes_0 = b"\xeb\xbbU\xc6\x07(\x05\x8eq\x8f\xb9@\xfe\xe9\xe1|"
    list_0 = [bytes_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    int_0 = -1905
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    int_0 = 1136
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    int_0 = -1305
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


def test_case_4990():
    pass


def test_case_4991():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4992():
    complex_0 = 1041.94463 + 2615.09481j
    list_0 = [complex_0]
    module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    float_0 = 2493.4989
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    float_0 = 3296.52
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    bytes_0 = b"'M\xb57\x0f\xfe\x92\xae\xec\xa3\xa9gf\x0e"
    module_0.object(*bytes_0)


def test_case_4996():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4997():
    bool_0 = False
    bytes_0 = b"\x03\xd10\x07\x96\xd2\xf7\x11C>C\t\xe7G\xd2z"
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_1.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    bytes_0 = b"&'3"
    module_1.match(bytes_0, bytes_0)


def test_case_5001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5002():
    str_0 = 'n~jeM.>*\rJva-[%,"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    int_0 = -6007
    set_0 = {int_0, int_0, int_0, int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    bytes_0 = b"\xafQj\xf57^;\x02\xb9{\xe4\xe4\x1dx"
    module_0.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    bool_0 = True
    module_1.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    complex_0 = -3750.49043 + 764.9613j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    int_0 = -1219
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    bytes_0 = b"\x1dD0\x99\xabl\xb6fj\x88\xc4\x93\xb8D|\xd0\xb1"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    bytes_0 = b"\x87zz"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    float_0 = -3307.1918
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    int_0 = 764
    set_0 = {int_0}
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (set_0, tuple_0)
    module_1.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    int_0 = -1255
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


def test_case_5014():
    pass


def test_case_5015():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5016():
    str_0 = "bhBbK<M~\x0b\n2qE:2Ep~J"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    float_0 = -2967.189
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    float_0 = -3636.0
    list_0 = [float_0, float_0, float_0]
    bytes_0 = b"v\xd7"
    module_1.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    float_0 = 1475.52
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    str_0 = "+\tUa(W4jl,7%u*"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    str_0 = "Gsc3_j"
    tuple_0 = (str_0,)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    str_0 = "%}!)HgF\x0c[z"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    bytes_0 = b"p\x17H\xcd\x9b\xc4'"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    list_0 = []
    tuple_0 = (list_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    bytes_0 = b""
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    bytes_0 = b"@g_1\t\x8c5\x04\x990\x89"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    bytes_0 = b"pM\x8f[\x9f\x0e\xd6T\xed\x91"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    int_0 = -258
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    bytes_0 = b"\x9e\x13\x11\xf3M\xde"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    bytes_0 = b"J%\xee\x0c\xe2\xc5="
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    int_0 = -792
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    str_0 = "O--)Iw-N2Xa$:!jb\x0c\x0br"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    bytes_0 = b"\x81f\x05\x86\xad*\x87\xb8\x80\xc8\x94\xe9\xf4"
    module_1.match(bytes_0, bytes_0)


def test_case_5035():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    float_0 = -3950.556
    bool_0 = True
    dict_0 = {float_0: float_0, bool_0: float_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    bytes_0 = b"\x93{G\xa4"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    str_0 = "\\qP&D@\x0c\x0ci"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    str_0 = "#VgfRas14pV"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    str_0 = "0L)\nBihC"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    str_0 = "eve\nV'=z0CHb"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


def test_case_5042():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5043():
    float_0 = 601.66405
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    int_0 = 993
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    tuple_0 = ()
    str_0 = ">`?%$[\x0c^#O"
    set_0 = {tuple_0, tuple_0, str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    int_0 = -3092
    set_0 = {int_0, int_0, int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    int_0 = 3467
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    str_0 = "0\tf\x0bF+5~:['U"
    module_1.get_new_command(str_0, str_0)


def test_case_5049():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5050():
    bool_0 = False
    bytes_0 = b"\x089\x9f\xb4-\xb6\x82,\x7fa\xdf\xf2\x90\x1b\x9c\xd4I\r"
    str_0 = "#@x\r{v)\\@$T|T`x_c@"
    set_0 = {bool_0, str_0, bytes_0}
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    tuple_0 = (bool_0, bytes_0, set_0, list_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    bytes_0 = b"sA6"
    list_0 = [bytes_0]
    module_1.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    int_0 = 1640
    set_0 = {int_0, int_0, int_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    str_0 = "k1vjK\n1} 21M5qQb0p"
    list_0 = [str_0, str_0]
    module_1.get_new_command(list_0, list_0)


def test_case_5054():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5055():
    int_0 = -3464
    float_0 = -1885.985
    module_1.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bytes_0 = b".\x9b\x96\x81\x88\xd3\xe6\x98\x13V\xb2%\xba\xb3\x97\xef"
    tuple_0 = ()
    list_0 = [bytes_0, bytes_0, tuple_0]
    module_2.urlparse(list_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    float_0 = -1238.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    str_0 = "oad$Kox"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bytes_0 = b"\xc1J$\xf9\xfbxp\x19"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    str_0 = "jD5RV'>X&CEr,,>APO/"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    int_0 = -725
    set_0 = {int_0, int_0, int_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    int_0 = 3443
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    bool_0 = False
    str_0 = "7(("
    bool_1 = True
    tuple_0 = (bool_0, bool_0, str_0, bool_1)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bytes_0 = b"o:"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_2.urlparse(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    complex_0 = -327.656 + 450j
    dict_0 = {complex_0: complex_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    bool_0 = True
    list_0 = [bool_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    int_0 = -1750
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    complex_0 = -387.223041 - 1566.6504j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    dict_0 = {}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    complex_0 = 1380.634 + 8.37j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    float_0 = 2908.15586
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    float_0 = -2438.3537
    list_0 = [float_0]
    module_1.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    float_0 = 1593.0
    module_1.get_new_command(float_0, float_0)


def test_case_5074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5075():
    str_0 = "8T)184\nmqJ%yAi^L"
    float_0 = -877.2
    module_1.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    complex_0 = 1849.790687 - 928.4j
    int_0 = 6739
    module_1.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    bool_0 = False
    float_0 = -2613.57218
    list_0 = [bool_0, bool_0, float_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    bytes_0 = b"\x01"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    str_0 = "6MSb:E|!WR"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    str_0 = "ob-:?&b9v"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    str_0 = "}-1F3'Mx?Hu_z9Li"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    str_0 = "~Np"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0, bool_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    str_0 = "<W3\n%LEYAFM\\"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bytes_0 = b"\xa2\xc4"
    str_0 = "!"
    list_0 = [bytes_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    float_0 = -629.861068
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    int_0 = -1470
    module_1.match(int_0, int_0)


def test_case_5087():
    pass


def test_case_5088():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5089():
    int_0 = 2938
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    str_0 = "I#a\x0c-t6]&jM6H#&V!"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    bytes_0 = b"\xc4\x00!\xf8w"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bytes_0 = b"N\x00\x17\xec\x10"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    set_0 = set()
    bytes_0 = b""
    int_0 = 2400
    tuple_0 = (set_0, bytes_0, int_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    str_0 = "WNR\t%dzRv!!%oD3o3"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    list_0 = []
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    int_0 = 691
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    float_0 = -2223.155
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    int_0 = -430
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    dict_0 = {}
    object_0 = module_0.object(**dict_0)
    module_1.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    int_0 = 1427
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    int_0 = -3708
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    str_0 = "2J\\Z"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    list_0 = [var_0]
    module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    int_0 = -84
    set_0 = {int_0, int_0}
    module_1.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    int_0 = -3954
    tuple_0 = ()
    module_1.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    complex_0 = 717 - 1498.16j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    bool_0 = False
    list_0 = [bool_0]
    int_0 = -2803
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    int_0 = -2442
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_1.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    bytes_0 = b"Z,\x87\x9b:\xb2\xa1d|\xd5<\xa2J"
    float_0 = -2076.114
    tuple_0 = (float_0, bytes_0)
    tuple_1 = (bytes_0, float_0, tuple_0)
    set_0 = {tuple_1, tuple_1, float_0, bytes_0}
    tuple_2 = ()
    module_1.match(set_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    str_0 = "up"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    none_type_0 = None
    dict_0 = {}
    module_1.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    int_0 = -1484
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    bytes_0 = b"m\xc3*{Y*]\xe8-\xf9a\xe1"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    float_0 = 1695.3
    bool_0 = True
    module_1.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    int_0 = 1770
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    bool_0 = True
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    float_0 = -2398.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    str_0 = "kTl )Lm.rK"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    str_0 = "4S2bLovcE"
    set_0 = {str_0}
    module_1.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    bytes_0 = b'\xb3\xcf\x0b\xcc\xe7\x98\x9b"'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    complex_0 = 1724.76508 - 2873.006j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    int_0 = -2355
    set_0 = {int_0}
    module_1.match(set_0, int_0)


def test_case_5124():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5125():
    str_0 = "{Z\r(C<o^3EB{`q"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    bytes_0 = b"{\x80\x14\x93%\xb6\xef\x928.\x00\x91\x16\xc2\xe1\x1bD\xd5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    float_0 = 1949.7815
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    float_0 = -1714.47673
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    int_0 = -1642
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    bytes_0 = b"\xe6!R\xc4\xad|\xdd\xeaS\xf3\xbd]\x9c\x08,"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    int_0 = -1275
    list_0 = [int_0, int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    float_0 = 1386.795118
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "KE`^a0#,<bA"
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_0.object(*list_0, **dict_0)


def test_case_5134():
    pass


def test_case_5135():
    pass


def test_case_5136():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5137():
    str_0 = " Z\x0c:eR2&>xn\ncl[N\t"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    str_0 = '"S6'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    bytes_0 = b"\xafY\x08\\w*\xe5\x9a\xa8\x1c?<("
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    int_0 = 1012
    set_0 = {int_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    float_0 = -26.661
    module_2.urlparse(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    complex_0 = -1966.4 - 236j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    str_0 = "LSJOa:Q$>CZ"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    float_0 = 229.21
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    bytes_0 = b"\x1d>\x15s\x05=+M\xad9\xd7m&\xb3w"
    tuple_0 = (bytes_0,)
    module_1.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    str_0 = "oi'Lzs}#^XyP"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    bytes_0 = b"R\xa6\xca\x15=\xa8\x0b^\xa7\xf5"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


def test_case_5148():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5149():
    bytes_0 = b"Q\x1f\xc3w&\xc9\xbb^\n\xd6G"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    float_0 = -4026.36558
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    int_0 = 1144
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    bool_0 = False
    var_0 = module_2.urlparse(bool_0, bool_0, bool_0)
    module_1.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    str_0 = "@D\tCp$OM9\ng48CxkY"
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (str_0, tuple_0, bool_0)
    module_1.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    str_0 = "=w.@Yqk0EE QGr87[yn"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    bytes_0 = b"\x10:y8\xd1d\xc8M\xb2<t\xb8F,\x05\x8aL\x98\xc7\x1e"
    none_type_0 = None
    module_2.urlparse(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    float_0 = -2696.85
    bool_0 = False
    dict_0 = {float_0: bool_0, bool_0: float_0, bool_0: bool_0, bool_0: float_0}
    module_1.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    float_0 = -1918.357
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    int_0 = 1218
    str_0 = "%L5!glIG"
    dict_0 = {int_0: int_0, int_0: str_0, str_0: str_0, str_0: int_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0, dict_0)
    module_0.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    str_0 = "b\r,;1z4A}u%(y"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    str_0 = "T._]\x0ck]MC!XqFu"
    list_0 = [str_0, str_0, str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    float_0 = -3207.4127
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    str_0 = "vu}g#7LJWy,*TA\x0c$\tF\t\t"
    module_1.get_new_command(str_0, str_0)


def test_case_5163():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5164():
    int_0 = 2529
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    int_0 = 1004
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    float_0 = 3607.11729
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    bytes_0 = b"\x94*\x9b\x7f\xf5?_Z\xa2,\xe4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    str_0 = "W."
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    str_0 = "O"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    bool_0 = False
    int_0 = 565
    module_1.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    float_0 = 388.183926
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    bytes_0 = b"\xb4\xe9|\xeb\xa5P_\x102\xfb"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    str_0 = '\x0b8pi-7\tyh$\t("_v;c'
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    str_0 = "i'V2vB9]\x0cic5rX&"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    bytes_0 = b"\xa4\xdb\xc5J"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    int_0 = 646
    set_0 = {int_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    list_0 = []
    int_0 = 203
    module_1.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    complex_0 = 3135.5 + 2010.959991j
    list_0 = []
    tuple_0 = (complex_0, list_0, complex_0)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    bytes_0 = b"z"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    int_0 = 2345
    set_0 = {int_0}
    module_1.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    bytes_0 = b"\xe3b\xc2\xeb\x9e\x8c"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    str_0 = "WLl!O:+_W%`Txv,}q&h"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    str_0 = ',"Uj%1,iAYYE\nQz7J'
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0)
    module_1.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    bool_0 = False
    bytes_0 = b"f\x9bsK{\x0b\xa0\xf8-\xff\x9b\xd1\xfa\x9c'"
    module_1.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0, bool_0)
    module_1.get_new_command(tuple_0, tuple_0)


def test_case_5189():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bytes_0 = b"\x06s\xd7O\xf0\xfd\xa2\xeb\xea"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    str_0 = "\r$"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    bytes_0 = b"\xee\xfax\xee2\xa0KI"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.match(list_0, bytes_0)


def test_case_5193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5194():
    int_0 = 2798
    module_2.urlparse(int_0, allow_fragments=int_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    float_0 = -84.593
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: float_0, bool_0: float_0}
    module_2.urlparse(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    bytes_0 = b"u\xe1\xbcs\xab\x94\xbd\x03zN\xee\x0f\xdb\xc8AX@6\xe3Z"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    float_0 = -922.27955
    dict_0 = {float_0: float_0, float_0: float_0}
    module_1.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    complex_0 = -24.1 - 975j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    int_0 = -745
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    int_0 = 1188
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    str_0 = '!!/(K2}\\"&*GOrWwEN Y'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    bool_0 = True
    module_1.match(bool_0, bool_0)


def test_case_5204():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5205():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    bytes_0 = b"9\x01\xc4\xf6\x88O\x83{\xe2\n\x814"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    bytes_0 = b"\x12O<\x01+\x9a\x80\x9c]y\xb6\x07\xef\xab\xe5\x91"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    str_0 = "'\tznOhQH'ysS"
    float_0 = 2726.1924
    module_1.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    bool_0 = False
    str_0 = "~^,D7O]ZbqqQF"
    module_1.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    bool_0 = True
    bytes_0 = b"=\x87\xa4\x05\xb4\x92)\x9a\xc8\xccm\x82"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    float_0 = 2406.0
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    float_0 = 1582.1275
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    bool_0 = False
    none_type_0 = None
    module_1.get_new_command(bool_0, none_type_0)


def test_case_5214():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5215():
    complex_0 = 136.5563 + 3215.3j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    int_0 = -3016
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    int_0 = -2796
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    complex_0 = -1491.1646 - 1023.56j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    int_0 = -2546
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    float_0 = 3271.655
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    str_0 = "\x0c?<DWoJw(wJ2D"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    int_0 = 870
    module_0.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    str_0 = "$9"
    none_type_0 = None
    str_1 = "6,7hbR"
    str_2 = "8X>,"
    str_3 = "duRl"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    bytes_0 = b"\x96c~\xa4\xb5?,&#\x12K\xd7\x9a\xa3V\xdb"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    none_type_0 = None
    module_1.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    bytes_0 = b"Od\xf9\x05\xaa\xa1\x90\xe34\xf1\x91TtF\x04\xc20W9\xb6"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    complex_0 = 2360.3921 + 444.7j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    int_0 = -1458
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (set_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    int_0 = -909
    tuple_0 = (int_0, int_0)
    set_0 = {int_0, tuple_0, int_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    int_0 = -2622
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    str_0 = "!me"
    set_0 = {str_0, str_0}
    str_1 = "[:8?ZN2&[m>CXJ"
    list_0 = [set_0, str_0, str_1]
    module_1.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    bool_0 = True
    str_0 = "lm;xP?"
    tuple_0 = (bool_0, str_0, bool_0, bool_0)
    none_type_0 = None
    module_2.urlparse(tuple_0, none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    str_0 = "W"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    int_0 = -1348
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    str_0 = "n}l.NXR2"
    str_1 = "\n(^A2adxkL(jW"
    str_2 = "\x0bmyRG1gLG]u&3$Lwf"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_2: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    str_0 = "0Emxb`k]XSFn\x0c"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    bytes_0 = b"\x9fH\x16WJ\xff$\xce.\x7f2K#\xa9\xcc\x88\xfc\xc6U"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0]
    module_1.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    bytes_0 = b"9R.h\xa2\x1c\xccu\xd5\x16"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    bytes_0 = b"\x9fL"
    module_1.match(bytes_0, bytes_0)


def test_case_5242():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5243():
    bytes_0 = b"\xab\xea\x9d\xfe\x97&NA9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    int_0 = -47
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    bytes_0 = b"`a8\xa8"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    dict_0 = {}
    bytes_0 = b"N)\xca\xeb\xd6\xb3\x13\r"
    tuple_0 = (dict_0, bytes_0)
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    set_0 = set()
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, none_type_0, set_0)
    module_1.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    str_0 = "tH'"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_1.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    object_0 = module_0.object()
    list_0 = [object_0, object_0]
    module_2.urlparse(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    bytes_0 = b"\x85"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    str_0 = ":Wq"
    int_0 = -2381
    module_1.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    int_0 = 1601
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    float_0 = -2656.6115
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    int_0 = -4286
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    str_0 = "."
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    str_0 = "z%l\t"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    int_0 = 2574
    dict_0 = {int_0: int_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = "k"
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    float_0 = -482.4558
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    bytes_0 = b"\x0fY\xa6\x9af"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


def test_case_5262():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5263():
    float_0 = 689.165
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    int_0 = 3002
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    bytes_0 = b"\xa5LR&"
    float_0 = 1096.03525
    tuple_0 = (bytes_0, float_0)
    none_type_0 = None
    module_1.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    int_0 = 1081
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    bytes_0 = b"}\xf3"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    bytes_0 = b"m8\xe6\xfe\xe4\xd5\x1d\xd5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    int_0 = 747
    list_0 = [int_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    int_0 = -1999
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    float_0 = 736.6355
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_2.urlparse(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    str_0 = "'>MApX+X`"
    int_0 = -1171
    str_1 = '63\n1k"4~Ik-:M@?v'
    list_0 = [str_0, int_0, int_0, str_1]
    module_1.match(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    set_0 = set()
    str_0 = "]n4nmoIr"
    list_0 = [set_0, str_0, set_0, str_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    str_0 = "G1XfW+5N~Klp2}5;e@s"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    float_0 = 3487.9488
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    list_1 = [list_0]
    module_1.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    str_0 = "E"
    bool_0 = False
    module_1.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    complex_0 = -218.92571 - 2994.566j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_1.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    bytes_0 = b"\x14/\n'\xb4\xe1\x08\x8eE&\xf3\x92"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    int_0 = -778
    tuple_0 = (int_0, int_0)
    bool_0 = True
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    bytes_0 = b"[B\x10\r"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    float_0 = 1690.5
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    bool_0 = False
    bytes_0 = b"\x89\xf7KH\xa6@%\xfc\x87"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_1.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    str_0 = '-:id"!M'
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    int_0 = -4146
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    str_0 = "lh"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    int_0 = 1203
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    float_0 = 736.9
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    str_0 = "\x0c$[t]`1z_mh^"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bytes_0 = b"\x831^+xm\xe7\x08\x05\xe6\xbf\xcbL"
    set_0 = {bytes_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    bytes_0 = b"\xb7|`\x03M\xc0V!\xaa\xb7&!\x8a"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    str_0 = "CH'd\to\x0bI\"vD6]O\to\r'EV"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    float_0 = -845.0
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    int_0 = 754
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    complex_0 = -2684.3 - 1614.07j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    float_0 = -1508.8494
    module_2.urlparse(float_0, allow_fragments=float_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    bytes_0 = b"m\xf0\xa5\x82\x0f5\x93\xde\x1f\xbd\r`\xa4\xb4\xed"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


def test_case_5304():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5305():
    int_0 = 1972
    bytes_0 = b"28I\xbfdA\x98\xcc\xa1\xce\x80\xcb\xcb.\xf6\xd7?\xf1\xec"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    float_0 = 2468.3931
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    int_0 = -68
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    str_0 = "KvR #EoChJ\x0b$5"
    list_0 = [str_0, str_0]
    module_1.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    float_0 = 101.26801
    none_type_0 = None
    module_1.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    tuple_0 = ()
    var_0 = module_2.urlparse(tuple_0)
    module_1.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    int_0 = -721
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    int_0 = 1585
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    bool_0 = False
    module_0.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    str_0 = "37s9gwd88p\x0c"
    dict_0 = {str_0: str_0}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    str_0 = 'Mp5GXaXj4",)f'
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    bool_0 = True
    tuple_1 = (tuple_0, list_0, bool_0)
    module_1.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    str_0 = "~h)\niNZ"
    str_1 = '"\t9H\x0bRhSrE;U%rS}'
    tuple_0 = ()
    str_2 = ""
    dict_0 = {str_0: str_0, str_1: tuple_0, str_0: str_1, str_2: str_1}
    module_0.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    str_0 = "@FktZ\\\x0cG\n;d"
    list_0 = [str_0]
    none_type_0 = None
    module_1.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    bytes_0 = b"}\xea\xf1\x9au\xc1j\xc6/\xba\x03L"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    complex_0 = -2565 - 88.5j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    int_0 = -649
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    float_0 = -2089.9347
    set_0 = {float_0}
    module_1.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    object_0 = module_0.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    float_0 = -543.2
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    int_0 = -1999
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    float_0 = -1584.9
    bool_0 = False
    module_1.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    str_0 = "3W%y`+wJ!L"
    int_0 = 1656
    module_1.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    float_0 = -2810.0
    bytes_0 = b"\x8b\xb6\xb3\xf2=^$@cE"
    bool_0 = False
    tuple_0 = (float_0, bytes_0, bool_0, bytes_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (set_0, set_0, bool_0)
    bool_1 = True
    list_0 = [tuple_0, tuple_0, bool_1]
    module_1.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    int_0 = -711
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    bytes_0 = b"\x16&\xa2\x01\xaah\xab$P\xab\xf5"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0]
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    bytes_0 = b""
    bool_0 = True
    module_1.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    str_0 = "-#\\7"
    module_1.get_new_command(str_0, str_0)


def test_case_5336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5337():
    float_0 = 1972.67551
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_1.match(set_0, none_type_0)


def test_case_5339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5340():
    float_0 = 2188.038
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    str_0 = "t_+Lo>X]"
    list_0 = [str_0, str_0, str_0]
    module_1.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    complex_0 = -1073.0693 - 1546j
    module_1.match(complex_0, complex_0)


def test_case_5343():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5344():
    complex_0 = 2388 - 664.998j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    complex_0 = 1135.6855 + 2071.0665j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    bool_0 = False
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.match(list_0, list_0)


def test_case_5348():
    pass


def test_case_5349():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5350():
    complex_0 = -1724 - 1253.637j
    bool_0 = True
    str_0 = "K!Er2"
    tuple_0 = (complex_0, bool_0, str_0)
    object_0 = module_0.object()
    module_1.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    str_0 = ";'INnZKew4+n?F?(t"
    dict_0 = {str_0: str_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    float_0 = -1630.079068
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    bytes_0 = b"`\xa3\x9b\xe0\xa4\xc0\x11J\x86\x9a\xe4&\x0f\xd8\xe1\xd7\xbf\x95\xf7"
    list_0 = [bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    str_0 = '\x0b6(PxLSZ"'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    float_0 = -1815.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    str_0 = "?;b'+#\n'TK<2N"
    str_1 = "Luq8zmAOXfFR !"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_0.object(**dict_0)


def test_case_5357():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5358():
    float_0 = -288.09592
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    bytes_0 = b"\x7f\xa7\x03R\x9b\xc5z\x8d^"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    int_0 = -827
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    bytes_0 = b"NQ1\xb1<FMW\xb6\xf1\x15%\xcc"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    str_0 = ">~1`a\tH:>W\rRImtSr"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    complex_0 = -1391.639 + 2222.6j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    bytes_0 = b"!\xf2\nu"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    str_0 = "}&r,yNYp F,@~}\n&"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    int_0 = -374
    module_2.urlparse(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    str_0 = "$s"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    set_0 = set()
    var_0 = module_2.urlparse(set_0, set_0)
    module_1.get_new_command(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    float_0 = 848.949
    module_2.urlparse(float_0, allow_fragments=float_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    bool_0 = True
    str_0 = "|Sn/"
    tuple_0 = (bool_0, bool_0, str_0)
    tuple_1 = (tuple_0,)
    module_1.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    float_0 = 2757.96
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    none_type_0 = None
    module_0.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    complex_0 = 4126.1238 - 190j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_1.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    int_0 = 55
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "[$)$&\t\x0b+GCsW"
    str_1 = "X5B,jV3AL8_il'["
    tuple_0 = (list_0, str_0, bool_0, str_1)
    module_1.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    str_0 = "pIs&\x0bK:<\r,)$LryvwL<w"
    float_0 = -2512.7381
    list_0 = [str_0, str_0, float_0, float_0]
    list_1 = [list_0, float_0]
    module_1.get_new_command(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    int_0 = -4647
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    int_0 = -1330
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    int_0 = 1217
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    float_0 = -2993.8
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bytes_0 = b"\x94\x86&\xd9,\nw"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    str_0 = "s:\t}?"
    complex_0 = 568 - 722.15j
    tuple_0 = (str_0, complex_0, complex_0)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    list_0 = []
    set_0 = set()
    module_1.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    int_0 = 538
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    int_0 = -1044
    bytes_0 = b""
    module_1.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    complex_0 = 1460.288142 + 309.109012j
    bool_0 = True
    module_1.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    float_0 = 1989.20276
    complex_0 = 1725.28 - 2226.772j
    list_0 = [float_0, complex_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    bytes_0 = b"(\x17Rv/w\x94\xf2\xe2n\x8e:Z"
    module_1.match(bytes_0, bytes_0)


def test_case_5390():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5391():
    str_0 = "/=vB"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    int_0 = -93
    bytes_0 = b"\x1e8\x11\xd3\x8b5r\xa6\xc6\xcc=-aqFZ\x07"
    module_1.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    int_0 = 3685
    bool_0 = False
    module_1.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_1.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    bytes_0 = b"\xf7-Z+\xe3\x96\xb6<\xfd\xd7\x935\xb3\xfd\x0f"
    module_2.urlparse(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bytes_0 = b"\xf8?g\xc2\x95d"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    set_0 = set()
    tuple_0 = (set_0,)
    module_1.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    float_0 = 2544.668
    tuple_0 = (float_0, float_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    str_0 = "XaS\n\tcl7Ni|w~4MH [Et"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    list_0 = []
    tuple_0 = (list_0,)
    list_1 = [tuple_0]
    module_1.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    none_type_0 = None
    var_0 = module_2.urlparse(none_type_0, allow_fragments=none_type_0)
    dict_0 = {var_0: var_0, var_0: var_0, none_type_0: none_type_0, var_0: var_0}
    module_1.match(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    float_0 = -1028.67
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    bytes_0 = b"\x8ad\xa9"
    str_0 = "st3nfCy8~r)%\\XMDr't4"
    tuple_0 = (bytes_0, str_0)
    module_1.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    none_type_0 = None
    int_0 = 3350
    module_1.get_new_command(none_type_0, int_0)


def test_case_5405():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5406():
    float_0 = 1242.7
    int_0 = 1653
    tuple_0 = (float_0, int_0)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    float_0 = -1074.0
    module_1.match(float_0, float_0)


def test_case_5408():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5409():
    bytes_0 = b"\x81\x94C7\xd91O\xf0\xd1\xd4\x97\x15\xbc"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    float_0 = 684.117226
    tuple_0 = (float_0,)
    list_0 = [tuple_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    int_0 = -1303
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    bytes_0 = b"*\xbftC\xf46:"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


def test_case_5414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5415():
    str_0 = "o*O2'h(glEH"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    str_0 = "*t7id,drf~}cwFjq'i"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    bool_0 = False
    bytes_0 = b"\x8f8m6\x14Ow\x13\x99\xdbF+p\x94\xa4J"
    module_1.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    complex_0 = 2832.63245 + 3487.8j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    str_0 = "bXw5KW#g`lLa\rr0"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    bytes_0 = b"\xb9\xe6\x1a]\xa0!\x04\xdb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    bytes_0 = b"\\\xb6\x9b$\x13\x15"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    none_type_0 = None
    set_0 = {none_type_0}
    module_1.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    bytes_0 = b"\x9f\xc6"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    float_0 = 3615.89152
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    bytes_0 = b"\xba\xcf"
    complex_0 = 4013.9327 - 2812.1619j
    tuple_0 = (complex_0,)
    set_0 = {bytes_0, bytes_0, bytes_0, tuple_0}
    module_1.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    str_0 = "Du42z,6.y7X4u\x0c^{I"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    float_0 = 2907.3
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bytes_0 = b"\xb2\xb7\x8a\xa2h\xdc\x0f\x08\xf0\xf4\xc0\x91AR\xbcK"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    str_0 = "/"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    bytes_0 = b"#\xf1\xb0=\x0c\x8e\xed\xf7\xd0y\x0cm9\xed"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    bool_0 = False
    module_1.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    bytes_0 = b"*\xe9v&\x0c)\xd8\xfds\xcf\xf4\xecd"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_1.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    bool_0 = False
    int_0 = -1831
    dict_0 = {bool_0: bool_0, int_0: bool_0, int_0: bool_0, bool_0: int_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    complex_0 = -391 + 594.4j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    int_0 = 890
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    int_0 = 3012
    set_0 = {int_0}
    tuple_0 = (set_0,)
    module_1.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    int_0 = 152
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    str_0 = "t\nv\x0c"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    str_0 = "~H(5Tr"
    list_0 = [str_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    bytes_0 = b"&\x8bu\xf9\xd4\xaa!}\x18eg\xcf2\x88Lc\xa9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    object_0 = module_0.object()
    object_1 = module_0.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_1: object_0,
        object_0: object_1,
    }
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    complex_0 = -1808.9644 + 769.51j
    int_0 = 1593
    list_0 = [int_0]
    tuple_0 = (complex_0, int_0, complex_0, list_0)
    module_1.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_1: bool_1}
    tuple_0 = (bool_0, bool_1, dict_0)
    module_1.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    bytes_0 = b"\xe0vc\x7f\xdd\x1f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    bytes_0 = b'\x04 {\xc7\xc1\xe2\xcb\x93c\x96d\x9e9\x96\rj"6'
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    float_0 = -2455.5131
    module_1.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    complex_0 = -2001.824236 - 340j
    none_type_0 = None
    module_1.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    str_0 = "+E>hUC&D"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, tuple_0}
    module_1.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    int_0 = 2322
    bool_0 = False
    bool_1 = False
    tuple_0 = (int_0, bool_0, int_0, bool_1)
    module_1.match(tuple_0, bool_0)


def test_case_5453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5454():
    str_0 = " :\\O,aD]GnpniJUC+"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    set_0 = {tuple_1}
    module_1.get_new_command(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    float_0 = 673.644634
    none_type_0 = None
    module_1.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    float_0 = -1201.128
    str_0 = "AQE$N^Uu~Tiq\\`@kgD"
    module_1.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    bytes_0 = b"\xefx7-\x99%E\x17\xfe"
    module_2.urlparse(bytes_0, allow_fragments=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    int_0 = 4191
    module_1.match(int_0, int_0)


def test_case_5459():
    pass


def test_case_5460():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5461():
    set_0 = set()
    tuple_0 = (set_0,)
    module_1.get_new_command(tuple_0, tuple_0)


def test_case_5462():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5463():
    str_0 = "2d `"
    str_1 = "3fW`39Gh"
    list_0 = [str_0, str_1, str_1]
    list_1 = [list_0, str_1, list_0, str_1]
    module_1.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    complex_0 = -1941 + 1082.7643j
    module_1.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    bytes_0 = b"\xc2y"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    str_0 = "P5["
    set_0 = {str_0, str_0, str_0}
    module_1.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    bytes_0 = b"\x99\x9c\xf3"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    int_0 = 1768
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    float_0 = -1715.86
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    int_0 = -2429
    set_0 = {int_0, int_0, int_0}
    module_1.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    str_0 = ">{[R%EzJL<F?"
    set_0 = {str_0}
    module_1.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    str_0 = "2<;@ViUmN_!"
    dict_0 = {str_0: str_0}
    module_1.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    bytes_0 = b"\x80\x11\xb4s?\xce\x89\x0f"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    complex_0 = 1084.7125 + 181.9j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    int_0 = 1503
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    str_0 = "0|I6E&dy~=|f^Yc"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    str_0 = "yV?)&\t@nc}i"
    set_0 = set()
    module_1.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    bytes_0 = b"\xf0\xe6\x1eXB\xc9"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    bytes_0 = b"\xe1\xf1,\x02\xbbm"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    int_0 = 4763
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    none_type_0 = None
    module_0.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    object_0 = module_0.object()
    set_0 = {object_0, object_0}
    module_2.urlparse(set_0, allow_fragments=object_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    str_0 = "hlQj=jG5gi\\BOcQt"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


def test_case_5485():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5486():
    int_0 = 2542
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    float_0 = 310.655587
    int_0 = -1676
    module_1.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    int_0 = -746
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    str_0 = ""
    object_0 = module_0.object(*str_0)
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    bytes_0 = b"tH\xca`\x11b\xea\x01o\xc5O0/\xc5m"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    bytes_0 = b"\\\xcc\xdcdNr_\xbf"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bool_0, bytes_0)
    module_1.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    none_type_0 = None
    bool_0 = False
    module_1.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    int_0 = -36
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    complex_0 = 2595.9 - 132j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_1.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    str_0 = "Q\x0b:z8L?3v0yRl0 \tk"
    none_type_0 = None
    module_1.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    bool_0 = True
    none_type_0 = None
    module_1.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    str_0 = "ssR\\N,.Iy9*"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    bytes_0 = b"\x1e\xdc\xbb\xcb\x93\xda?W\xe1.T\xaaq\xad\xb8"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    bytes_0 = b"\xd0\x9f\xee\xa58"
    none_type_0 = None
    module_1.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    list_0 = []
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    bytes_0 = b"\xc4\xe4\x9c\xa1\xf4\x10"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    bytes_0 = b"\x84 \xcd\xa8\x11q\xca\xf7\xe1zL\xe9z\xec\x9f\x07"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_2.urlparse(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    int_0 = 1068
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    int_0 = 3222
    list_0 = [int_0]
    module_1.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    bytes_0 = b"\xd92z\xd5\xbc\x9d\xed)\x8b\x1a\x0c"
    module_1.match(bytes_0, bytes_0)


def test_case_5507():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5508():
    complex_0 = -2807.243 - 2627.83j
    module_1.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    bytes_0 = b"\xfd\xfdY"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    str_0 = 'uXu2|O;.5"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    module_1.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_1.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    float_0 = 267.0112
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    int_0 = 676
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    int_0 = -2664
    set_0 = {int_0, int_0, int_0}
    bytes_0 = b"3\x96\x9e@\xbe\xeb\xbb\x14\xf0\xf0="
    int_1 = 1396
    tuple_0 = (set_0, bytes_0, int_1)
    module_2.urlparse(tuple_0, allow_fragments=int_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    int_0 = -243
    none_type_0 = None
    module_2.urlparse(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    int_0 = -817
    list_0 = [int_0, int_0, int_0]
    module_1.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    int_0 = 2000
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    int_0 = 1413
    module_1.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    complex_0 = 728.807912 - 2901.854207j
    none_type_0 = None
    module_1.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    str_0 = "<"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bytes_0 = b"\xeaF\xdb\xb7\xb6>\xc1\xf9\xbd"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    str_0 = "g,6d!Xw8nDb"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    bytes_0 = b"\xc8/=Z\x0c"
    module_1.get_new_command(bytes_0, bytes_0)


def test_case_5524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5525():
    str_0 = "8o"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    list_0 = []
    str_0 = "slDw:0"
    dict_0 = {str_0: str_0}
    module_0.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    int_0 = 1652
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    str_0 = "Tdtf~"
    module_1.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    object_0 = module_0.object()
    module_1.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    int_0 = -1138
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: int_0, bool_0: bool_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    str_0 = "n>\nN"
    var_0 = module_2.urlparse(str_0, allow_fragments=str_0)
    dict_0 = {var_0: str_0, var_0: str_0}
    module_1.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    list_2 = [list_1]
    module_2.urlparse(list_2)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    int_0 = -878
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    int_0 = -45
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    bytes_0 = b"<\xcb\xc49\xces\x1f\r8\t"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    bytes_0 = b"\xd07@-L\xcaH\x94s\x8c"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    float_0 = -3966.04
    module_1.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    float_0 = -3256.326569
    int_0 = 2623
    module_1.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    str_0 = 'Xmkf",P'
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    bytes_0 = b"\xac\xa4/#k\xfe\xdd\xca\xa0\xaa*\x18\xc4*"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    none_type_0 = None
    module_1.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    float_0 = -2016.7767
    list_0 = [float_0]
    module_0.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    bytes_0 = b"\xcf\xf8\x90\xe5\x067C\xed"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_1.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    float_0 = 1312.940514
    none_type_0 = None
    module_1.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    bytes_0 = b"\x84\xfd\t\x0b\xe1\xcd\xea\x80i]\x99\x9d)\x05\x1e\xdd"
    none_type_0 = None
    module_1.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    bytes_0 = b"@0\xd5\xde\x11\xb3\xa8\x10\xa3\x01z\x840\xd3\xf1\xf5\xd5\x01\x19\xfb"
    module_1.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    str_0 = "$PPCXup3S=\n\rG\x0bjs>\x0c="
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, dict_0]
    module_2.urlparse(dict_0, dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    int_0 = 2373
    none_type_0 = None
    module_1.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    str_0 = "<mv\\X?`Bpdw"
    none_type_0 = None
    module_1.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    int_0 = 1509
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0, dict_0)
    module_1.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    none_type_0 = None
    module_1.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    int_0 = -1641
    module_1.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    bytes_0 = b"\xf3$\x92\x04\xb4\xfa\x0eS\x1cH_"
    module_1.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    int_0 = 242
    none_type_0 = None
    module_1.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    str_0 = "#"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    str_0 = "z-ssV.uNVy)2EM.@DE"
    module_1.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    bytes_0 = b"\xf9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_1.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    complex_0 = -790.78 + 1253.3j
    tuple_0 = (complex_0,)
    module_1.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    bytes_0 = b"\xf1;b_\x87\xac\x932\x027\x85O@|\x81\xbb\x02\xfc\x9e\xb7"
    list_0 = [bytes_0, bytes_0]
    module_0.object(*list_0, **bytes_0)
