# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import link as module_0


def test_case_0():
    str_0 = ""
    link_0 = module_0.Link(str_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__repr__()
    assert var_0 == "Link(url=b'', text='', fragment='', nofollow=False)"
    var_1 = var_0.__hash__()
    assert var_1 == 1419284122376829068
    var_2 = var_1.__repr__()
    assert var_2 == "1419284122376829068"
    var_3 = var_2.__hash__()
    assert var_3 == 6308021199058107758
    var_4 = var_3.__repr__()
    assert var_4 == "6308021199058107758"


def test_case_1():
    dict_0 = {}
    link_0 = module_0.Link(dict_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )


def test_case_2():
    dict_0 = {}
    link_0 = module_0.Link(dict_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__eq__(link_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    link_0 = module_0.Link(tuple_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    float_0 = -3634.0
    link_1 = module_0.Link(float_0, float_0, float_0)
    var_0 = link_1.__repr__()
    assert var_0 == "Link(url=-3634.0, text=-3634.0, fragment=-3634.0, nofollow=False)"
    var_1 = var_0.__eq__(float_0)
    var_2 = var_1.__hash__()
    var_3 = var_2.__eq__(float_0)
    complex_0 = 2348.6613 + 2045j
    link_2 = module_0.Link(complex_0, fragment=complex_0, nofollow=float_0)
    var_4 = link_2.__hash__()
    assert var_4 == -3634
    var_5 = link_2.__hash__()
    assert var_5 == -3634
    var_6 = var_0.__eq__(float_0)
    link_3 = module_0.Link(complex_0, nofollow=complex_0)
    var_7 = link_3.__hash__()
    assert var_7 == 0
    var_8 = var_7.__hash__()
    assert var_8 == 0
    var_9 = link_3.__hash__()
    assert var_9 == 0
    var_10 = var_9.__eq__(float_0)
    var_11 = var_10.__repr__()
    var_12 = var_11.__hash__()
    var_13 = var_11.__hash__()
    link_4 = module_0.Link(var_7)
    var_14 = link_3.__eq__(link_2)
    assert var_14 is False
    var_15 = link_1.__repr__()
    link_5 = module_0.Link(var_15)
    assert f"{type(link_5).__module__}.{type(link_5).__qualname__}" == "link.Link"
    list_1 = [var_9, float_0, var_11]
    link_4.__eq__(list_1)


def test_case_4():
    int_0 = 1627
    none_type_0 = None
    link_0 = module_0.Link(none_type_0, none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    none_type_1 = None
    link_1 = module_0.Link(none_type_1)
    var_0 = link_1.__eq__(link_0)
    assert var_0 is False
    var_1 = var_0.__eq__(int_0)
    var_2 = var_1.__repr__()
    var_3 = var_2.__repr__()
    var_4 = var_1.__hash__()
    var_5 = var_4.__repr__()
    var_6 = var_1.__hash__()
    link_2 = module_0.Link(var_6)
    link_3 = module_0.Link(link_2, fragment=link_2)
    bool_0 = False
    link_4 = module_0.Link(bool_0, nofollow=bool_0)
    var_7 = link_4.__hash__()
    assert var_7 == 0


def test_case_5():
    bytes_0 = b"%A\x07"
    bytes_1 = b"\x01\xc1\xd5"
    tuple_0 = (bytes_1,)
    none_type_0 = None
    link_0 = module_0.Link(none_type_0, none_type_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    int_0 = -802
    list_0 = [int_0, int_0]
    tuple_1 = (list_0,)
    link_1 = module_0.Link(tuple_1, nofollow=int_0)
    var_0 = link_1.__eq__(link_0)
    assert var_0 is False
    var_1 = var_0.__eq__(tuple_0)
    var_2 = var_1.__eq__(bytes_0)
    var_3 = var_2.__hash__()
    var_4 = var_3.__hash__()
    var_5 = var_4.__repr__()
    var_6 = var_5.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_6():
    dict_0 = {}
    link_0 = module_0.Link(dict_0, dict_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    link_0.__hash__()


def test_case_7():
    dict_0 = {}
    link_0 = module_0.Link(dict_0)
    assert f"{type(link_0).__module__}.{type(link_0).__qualname__}" == "link.Link"
    assert (
        f"{type(module_0.Link.fragment).__module__}.{type(module_0.Link.fragment).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.nofollow).__module__}.{type(module_0.Link.nofollow).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.text).__module__}.{type(module_0.Link.text).__qualname__}"
        == "builtins.member_descriptor"
    )
    assert (
        f"{type(module_0.Link.url).__module__}.{type(module_0.Link.url).__qualname__}"
        == "builtins.member_descriptor"
    )
    var_0 = link_0.__repr__()
    assert var_0 == "Link(url={}, text='', fragment='', nofollow=False)"
