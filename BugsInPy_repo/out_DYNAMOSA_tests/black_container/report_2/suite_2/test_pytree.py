# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import pytree as module_0
import builtins as module_1
import _io as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    wildcard_pattern_0.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_1():
    module_0.BasePattern()


def test_case_2():
    bool_0 = False
    wildcard_pattern_0 = module_0.WildcardPattern(min=bool_0, max=bool_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min is False
    assert wildcard_pattern_0.max is False
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    with pytest.raises(AssertionError):
        module_0.Node(bool_0, wildcard_pattern_0, fixers_applied=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.Base()


def test_case_4():
    str_0 = ""
    float_0 = 1442.5135
    wildcard_pattern_0 = module_0.WildcardPattern(name=float_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == pytest.approx(1442.5135, abs=0.01, rel=0.01)
    assert module_0.HUGE == 2147483647
    var_0 = module_0.Node(float_0, str_0, wildcard_pattern_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pytree.Node"
    assert var_0.type == pytest.approx(1442.5135, abs=0.01, rel=0.01)
    assert var_0.children == []
    assert var_0.fixers_applied is None
    assert (
        f"{type(module_0.Node.prefix).__module__}.{type(module_0.Node.prefix).__qualname__}"
        == "builtins.property"
    )


def test_case_5():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647


def test_case_6():
    bool_0 = False
    leaf_pattern_0 = module_0.LeafPattern(bool_0)
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is False
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    assert module_0.HUGE == 2147483647


def test_case_7():
    leaf_pattern_0 = module_0.LeafPattern()
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    assert module_0.HUGE == 2147483647


def test_case_8():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647


@pytest.mark.xfail(strict=True)
def test_case_9():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    wildcard_pattern_0.match(wildcard_pattern_0, wildcard_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    wildcard_pattern_0.match_seq(wildcard_pattern_0, wildcard_pattern_0)


def test_case_11():
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    assert module_0.HUGE == 2147483647


@pytest.mark.xfail(strict=True)
def test_case_12():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.optimize()
    var_1 = var_0.optimize()
    leaf_pattern_0 = var_0.match(var_1, var_0)
    assert leaf_pattern_0 is True
    leaf_pattern_0.match(node_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    module_0.LeafPattern(content=node_pattern_0)


def test_case_14():
    bytes_0 = b"q\xc7\xd4]y\xd2\xa6L6\xee\xb5\x94W\x8e\xc7\x9f\xcc\xa3\x0c%"
    with pytest.raises(AssertionError):
        module_0.NodePattern(content=bytes_0)


def test_case_15():
    int_0 = 1458
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.LeafPattern(int_0, name=none_type_0)


def test_case_16():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    assert var_0 is True


def test_case_17():
    str_0 = 'UR"""'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (("U",), ("R",), ('"',), ('"',), ('"',))
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647


def test_case_18():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.changed()
    assert leaf_0.was_changed is True


def test_case_19():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.match(node_pattern_0)
    assert var_0 is True


def test_case_20():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content is None
    assert var_0.min == 0
    assert var_0.max == 2147483647
    assert var_0.name is None


def test_case_21():
    int_0 = 3097
    none_type_0 = None
    with pytest.raises(AssertionError):
        module_0.Leaf(int_0, none_type_0)


def test_case_22():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    negated_pattern_0 = module_0.NegatedPattern(wildcard_pattern_0)
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert (
        f"{type(negated_pattern_0.content).__module__}.{type(negated_pattern_0.content).__qualname__}"
        == "pytree.WildcardPattern"
    )


def test_case_23():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    dict_0 = {
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
    }
    var_0 = wildcard_pattern_0.match(wildcard_pattern_0, dict_0)
    assert var_0 is True


def test_case_24():
    leaf_pattern_0 = module_0.LeafPattern()
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = leaf_pattern_0.match(leaf_pattern_0, leaf_pattern_0)
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_25():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    dict_0 = {
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
    }
    var_0 = wildcard_pattern_0.match(dict_0, dict_0)
    assert var_0 is True
    module_0.NodePattern(dict_0)


def test_case_26():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    var_0 = negated_pattern_0.match(wildcard_pattern_0)
    assert var_0 is False
    leaf_pattern_0 = module_0.LeafPattern(var_0)
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is False
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    var_1 = leaf_pattern_0.match(var_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_27():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    negated_pattern_0 = module_0.NegatedPattern(wildcard_pattern_0)
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert (
        f"{type(negated_pattern_0.content).__module__}.{type(negated_pattern_0.content).__qualname__}"
        == "pytree.WildcardPattern"
    )
    negated_pattern_0.match_seq(negated_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    set_0 = {none_type_0, wildcard_pattern_0, none_type_0, none_type_0}
    module_0.NegatedPattern(set_0)


def test_case_29():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.depth()
    assert var_0 == 0
    var_1 = leaf_0.clone()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "pytree.Leaf"
    assert var_1.lineno == 0
    assert var_1.column == 0
    assert var_1.type is True
    assert var_1.value is True
    assert var_1.fixers_applied == []


def test_case_30():
    float_0 = -1484.28639
    with pytest.raises(AssertionError):
        module_0.Leaf(float_0, float_0, float_0, fixers_applied=float_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0, prefix=bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    leaf_0.replace(bool_0)


def test_case_32():
    str_0 = "-a-1"
    var_0 = module_0.convert(str_0, str_0)
    assert var_0 == "1"
    assert module_0.HUGE == 2147483647


def test_case_33():
    int_0 = 18
    none_type_0 = None
    var_0 = module_0.generate_matches(none_type_0, int_0)
    assert module_0.HUGE == 2147483647
    with pytest.raises(AssertionError):
        module_0.NodePattern(content=var_0, name=int_0)


def test_case_34():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.changed()
    assert leaf_0.was_changed is True
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    with pytest.raises(AssertionError):
        module_0.NodePattern(bool_0, name=leaf_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = 'UR"""'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (("U",), ("R",), ('"',), ('"',), ('"',))
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    wildcard_pattern_0.match(wildcard_pattern_0)


def test_case_36():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.match(node_pattern_0, node_pattern_0)
    assert var_0 is True


def test_case_37():
    bool_0 = True
    wildcard_pattern_0 = module_0.WildcardPattern(min=bool_0, max=bool_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min is True
    assert wildcard_pattern_0.max is True
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pytree.NodePattern"
    )
    assert var_0.type is None
    assert var_0.content is None
    assert var_0.name is None


def test_case_38():
    bool_0 = True
    wildcard_pattern_0 = module_0.WildcardPattern(min=bool_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min is True
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content is None
    assert var_0.min is True
    assert var_0.max == 2147483647
    assert var_0.name is None


@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = ","
    wildcard_pattern_0 = module_0.WildcardPattern(name=str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == ","
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    assert var_0 is True
    wildcard_pattern_0.__repr__()


def test_case_40():
    str_0 = 'UR"""'
    leaf_pattern_0 = module_0.LeafPattern()
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = leaf_pattern_0.match(str_0)
    assert var_0 is False
    with pytest.raises(AssertionError):
        module_0.NodePattern(content=str_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    float_0 = 4503.651488423223
    module_0.NodePattern(float_0, float_0)


def test_case_42():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    str_0 = "JQ\ri%>cx"
    leaf_pattern_0 = module_0.LeafPattern(content=str_0)
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is None
    assert leaf_pattern_0.content == "JQ\ri%>cx"
    assert leaf_pattern_0.name is None


@pytest.mark.xfail(strict=True)
def test_case_43():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.match(node_pattern_0)
    assert var_0 is True
    str_0 = "-atin-1-"
    var_1 = node_pattern_0.match_seq(str_0, node_pattern_0)
    assert var_1 is False
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, max=var_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (
        ("-",),
        ("a",),
        ("t",),
        ("i",),
        ("n",),
        ("-",),
        ("1",),
        ("-",),
    )
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max is True
    assert wildcard_pattern_0.name is None
    wildcard_pattern_0.match(var_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.generate_matches(node_pattern_0)
    dict_0 = {var_0: node_pattern_0}
    module_0.WildcardPattern(var_0, name=dict_0)


def test_case_45():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    dict_0 = {
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
    }
    node_pattern_0 = module_0.NodePattern(content=dict_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.wildcards is True
    assert node_pattern_0.type is None
    assert (
        f"{type(node_pattern_0.content).__module__}.{type(node_pattern_0.content).__qualname__}"
        == "builtins.list"
    )
    assert len(node_pattern_0.content) == 1
    assert node_pattern_0.name is None


def test_case_46():
    str_0 = "*ID!\x0cxD,)\r^$?jf"
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content is None
    assert var_0.min == 0
    assert var_0.max == 2147483647
    assert var_0.name is None
    var_1 = var_0.match(var_0)
    assert var_1 is True
    int_0 = -1034
    with pytest.raises(AssertionError):
        module_0.LeafPattern(int_0, str_0)


def test_case_47():
    str_0 = '"\x0c'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, name=str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (('"',), ("\x0c",))
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == '"\x0c'
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content == (('"',), ("\x0c",))
    assert var_0.min == 0
    assert var_0.max == 2147483647
    assert var_0.name == '"\x0c'


def test_case_48():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(AssertionError):
        leaf_0.replace(bool_0)


def test_case_49():
    str_0 = "w"
    bool_0 = False
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, max=bool_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (("w",),)
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max is False
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    assert var_0 is False


def test_case_50():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    bool_0 = False
    wildcard_pattern_0 = module_0.WildcardPattern(min=bool_0, max=bool_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min is False
    assert wildcard_pattern_0.max is False
    assert wildcard_pattern_0.name is None
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content is None
    assert var_0.min is False
    assert var_0.max is False
    assert var_0.name is None
    var_1 = wildcard_pattern_0.match(node_pattern_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_51():
    str_0 = ">G%m%]\\7hG>@1S_{jz"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, name=str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (
        (">",),
        ("G",),
        ("%",),
        ("m",),
        ("%",),
        ("]",),
        ("\\",),
        ("7",),
        ("h",),
        ("G",),
        (">",),
        ("@",),
        ("1",),
        ("S",),
        ("_",),
        ("{",),
        ("j",),
        ("z",),
    )
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == ">G%m%]\\7hG>@1S_{jz"
    assert module_0.HUGE == 2147483647
    wildcard_pattern_0.match(str_0)


def test_case_52():
    str_0 = 'UR"""'
    float_0 = -84.1
    with pytest.raises(AssertionError):
        module_0.WildcardPattern(min=float_0, max=float_0, name=str_0)


def test_case_53():
    str_0 = ""
    with pytest.raises(AssertionError):
        module_0.WildcardPattern(str_0, name=str_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.__repr__()
    assert var_0 == "Leaf(NAME, True)"
    module_0.convert(bool_0, leaf_0)


def test_case_55():
    str_0 = "Q"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, name=str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (("Q",),)
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == "Q"
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content == (("Q",),)
    assert var_0.min == 0
    assert var_0.max == 2147483647
    assert var_0.name == "Q"


@pytest.mark.xfail(strict=True)
def test_case_56():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_1, bool_1]
    list_1 = [list_0]
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.match_seq(list_1)
    assert var_0 is True
    var_0.insert_child(bool_0, bool_0)


def test_case_57():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.clone()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "pytree.Leaf"
    assert var_0.lineno == 0
    assert var_0.column == 0
    assert var_0.type is True
    assert var_0.value is True
    assert var_0.fixers_applied == []
    node_pattern_0 = module_0.NodePattern(name=bool_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is True
    wildcard_pattern_0 = module_0.WildcardPattern(min=bool_0, max=bool_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min is True
    assert wildcard_pattern_0.max is True
    assert wildcard_pattern_0.name is None
    var_1 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "pytree.NodePattern"
    )
    assert var_1.type is None
    assert var_1.content is None
    assert var_1.name is None
    var_2 = var_0.__eq__(bool_0)


def test_case_58():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.get_lineno()
    assert var_0 == 0


def test_case_59():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.get_suffix()
    assert var_0 == ""


def test_case_60():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    none_type_0 = None
    var_0 = node_pattern_0.generate_matches(none_type_0)
    var_1 = module_1.object(*var_0)


def test_case_61():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.depth()
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_62():
    str_0 = "toenize"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, name=str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (
        ("t",),
        ("o",),
        ("e",),
        ("n",),
        ("i",),
        ("z",),
        ("e",),
    )
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == "toenize"
    assert module_0.HUGE == 2147483647
    node_pattern_0 = module_0.NodePattern(name=wildcard_pattern_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert (
        f"{type(node_pattern_0.name).__module__}.{type(node_pattern_0.name).__qualname__}"
        == "pytree.WildcardPattern"
    )
    node_pattern_0.match(node_pattern_0, node_pattern_0)


def test_case_63():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.remove()


@pytest.mark.xfail(strict=True)
def test_case_64():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.pre_order()
    var_1 = leaf_0.clone()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "pytree.Leaf"
    assert var_1.lineno == 0
    assert var_1.column == 0
    assert var_1.type is False
    assert var_1.value is False
    assert var_1.fixers_applied == []
    var_2 = leaf_0.get_lineno()
    assert var_2 == 0
    node_pattern_0 = module_0.NodePattern(name=leaf_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert (
        f"{type(node_pattern_0.name).__module__}.{type(node_pattern_0.name).__qualname__}"
        == "pytree.Leaf"
    )
    var_3 = var_1.__repr__()
    assert var_3 == "Leaf(ENDMARKER, False)"
    module_0.convert(var_0, var_0)


def test_case_65():
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.get_suffix()
    assert var_0 == ""
    var_1 = leaf_0.leaves()
    var_2 = var_0.__eq__(leaf_0)
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    i_o_base_0 = module_2._IOBase(*var_1)


def test_case_66():
    str_0 = "\tzOPE#BSQ*lbWcp6#2G"
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = node_pattern_0.optimize()
    var_1 = var_0.match(str_0)
    assert var_1 is True
    str_1 = "-atin-1-"
    int_0 = -3874
    with pytest.raises(AssertionError):
        module_0.WildcardPattern(str_1, max=int_0)


def test_case_67():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    leaf_pattern_0 = leaf_0.__eq__(leaf_0)
    assert leaf_pattern_0 is True
    var_0 = leaf_0.remove()


@pytest.mark.xfail(strict=True)
def test_case_68():
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    assert module_0.HUGE == 2147483647
    var_0 = negated_pattern_0.generate_matches(negated_pattern_0)
    module_1.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.__unicode__()
    assert var_0 == "True"
    wildcard_pattern_0 = module_0.WildcardPattern(var_0, bool_0, name=var_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (("T",), ("r",), ("u",), ("e",))
    assert wildcard_pattern_0.min is True
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == "True"
    wildcard_pattern_0.match(var_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    assert module_0.HUGE == 2147483647
    bool_0 = False
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is False
    assert leaf_0.value is False
    assert leaf_0.fixers_applied == []
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    var_0 = leaf_0.post_order()
    module_0.WildcardPattern(var_0, bool_0, name=var_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    dict_0 = {
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
    }
    node_pattern_0 = module_0.NodePattern(content=dict_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.wildcards is True
    assert node_pattern_0.type is None
    assert (
        f"{type(node_pattern_0.content).__module__}.{type(node_pattern_0.content).__qualname__}"
        == "builtins.list"
    )
    assert len(node_pattern_0.content) == 1
    assert node_pattern_0.name is None
    node_pattern_0.match(node_pattern_0, wildcard_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    dict_0 = {
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
        wildcard_pattern_0: wildcard_pattern_0,
    }
    node_pattern_0 = module_0.NodePattern(content=dict_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.wildcards is True
    assert node_pattern_0.type is None
    assert (
        f"{type(node_pattern_0.content).__module__}.{type(node_pattern_0.content).__qualname__}"
        == "builtins.list"
    )
    assert len(node_pattern_0.content) == 1
    assert node_pattern_0.name is None
    node_pattern_0.match(wildcard_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    set_0 = set()
    node_pattern_0 = module_0.NodePattern(content=set_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content == []
    assert node_pattern_0.name is None
    node_pattern_0.match(wildcard_pattern_0, node_pattern_0)


def test_case_74():
    bool_0 = True
    leaf_0 = module_0.Leaf(bool_0, bool_0)
    assert f"{type(leaf_0).__module__}.{type(leaf_0).__qualname__}" == "pytree.Leaf"
    assert leaf_0.type is True
    assert leaf_0.value is True
    assert leaf_0.fixers_applied == []
    assert module_0.HUGE == 2147483647
    assert module_0.Leaf.lineno == 0
    assert module_0.Leaf.column == 0
    assert (
        f"{type(module_0.Leaf.prefix).__module__}.{type(module_0.Leaf.prefix).__qualname__}"
        == "builtins.property"
    )
    leaf_pattern_0 = module_0.LeafPattern(bool_0)
    assert (
        f"{type(leaf_pattern_0).__module__}.{type(leaf_pattern_0).__qualname__}"
        == "pytree.LeafPattern"
    )
    assert leaf_pattern_0.type is True
    assert leaf_pattern_0.content is None
    assert leaf_pattern_0.name is None
    var_0 = leaf_pattern_0.match(leaf_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_75():
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    assert module_0.HUGE == 2147483647
    set_0 = {negated_pattern_0, negated_pattern_0, negated_pattern_0, negated_pattern_0}
    node_pattern_0 = module_0.NodePattern(content=set_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert (
        f"{type(node_pattern_0.content).__module__}.{type(node_pattern_0.content).__qualname__}"
        == "builtins.list"
    )
    assert len(node_pattern_0.content) == 1
    assert node_pattern_0.name is None
    node_pattern_0.match(negated_pattern_0)


def test_case_76():
    int_0 = 2443
    wildcard_pattern_0 = module_0.WildcardPattern(min=int_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 2443
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content is None
    assert var_0.min == 2443
    assert var_0.max == 2147483647
    assert var_0.name is None


@pytest.mark.xfail(strict=True)
def test_case_77():
    str_0 = "bare_name"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, name=str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content == (
        ("b",),
        ("a",),
        ("r",),
        ("e",),
        ("_",),
        ("n",),
        ("a",),
        ("m",),
        ("e",),
    )
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == "bare_name"
    assert module_0.HUGE == 2147483647
    wildcard_pattern_0.match(str_0, wildcard_pattern_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    str_0 = "c.W~SX=iPp#k1Uc\x0bheQ|"
    wildcard_pattern_0 = module_0.WildcardPattern(name=str_0)
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name == "c.W~SX=iPp#k1Uc\x0bheQ|"
    assert module_0.HUGE == 2147483647
    var_0 = wildcard_pattern_0.optimize()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert var_0.content is None
    assert var_0.min == 0
    assert var_0.max == 2147483647
    assert var_0.name == "c.W~SX=iPp#k1Uc\x0bheQ|"
    set_0 = set()
    wildcard_pattern_0.match(set_0, set_0)


def test_case_79():
    str_0 = ".\nl\\w+2"
    negated_pattern_0 = module_0.NegatedPattern()
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert negated_pattern_0.content is None
    assert module_0.HUGE == 2147483647
    var_0 = negated_pattern_0.generate_matches(str_0)
    node_pattern_0 = module_0.NodePattern(content=var_0)
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content == []
    assert node_pattern_0.name is None


def test_case_80():
    node_pattern_0 = module_0.NodePattern()
    assert (
        f"{type(node_pattern_0).__module__}.{type(node_pattern_0).__qualname__}"
        == "pytree.NodePattern"
    )
    assert node_pattern_0.type is None
    assert node_pattern_0.content is None
    assert node_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    str_0 = "-aX-1-"
    dict_0 = {}
    str_1 = "JK1r6x0"
    tuple_0 = (str_0, dict_0, str_1, dict_0)
    with pytest.raises(AssertionError):
        module_0.WildcardPattern(tuple_0, name=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    str_0 = "}C"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.convert(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    wildcard_pattern_0 = module_0.WildcardPattern()
    assert (
        f"{type(wildcard_pattern_0).__module__}.{type(wildcard_pattern_0).__qualname__}"
        == "pytree.WildcardPattern"
    )
    assert wildcard_pattern_0.content is None
    assert wildcard_pattern_0.min == 0
    assert wildcard_pattern_0.max == 2147483647
    assert wildcard_pattern_0.name is None
    assert module_0.HUGE == 2147483647
    negated_pattern_0 = module_0.NegatedPattern(wildcard_pattern_0)
    assert (
        f"{type(negated_pattern_0).__module__}.{type(negated_pattern_0).__qualname__}"
        == "pytree.NegatedPattern"
    )
    assert (
        f"{type(negated_pattern_0.content).__module__}.{type(negated_pattern_0.content).__qualname__}"
        == "pytree.WildcardPattern"
    )
    var_0 = negated_pattern_0.generate_matches(negated_pattern_0)
    module_1.object(*var_0)
