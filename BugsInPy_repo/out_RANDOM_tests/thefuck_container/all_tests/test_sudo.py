# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sudo as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "FHu)\":,.!D}&=\r'42_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = 762
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "=Iemb"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xea\r\x84\xceW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xb5\xe1\xc7\xed\xe5\xbe \xc0\x89\xaa\xb5\xad"
    bool_0 = True
    bool_1 = False
    bytes_1 = b"\xc2\xa0m\xee\xbekN"
    tuple_0 = (bytes_0, bool_0, bool_1, bytes_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    complex_0 = 1390.2 - 1742.4053j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    float_0 = -637.102
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x98\x04="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bytes_0 = b'\xa0q"b\x12\x05\xa2\n\xe5'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    int_0 = 527
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "\n"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bytes_0 = b"\xf3\x849\x81\xfa\x13\xbd'\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = 778
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = 'E9=1\t"vNj$iC\tHXfx`\x0b'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b"|)[\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = '1\\D6+DQ3?b3.=mc"L<Y'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bytes_0 = b"v\x8fD\xc6\xe6\xc3\xb2\xbe\t\xff"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bytes_0 = b"\xe2 \xa7\xc2\x93.Y\xc5^3\x02n\xe4<\xd87o\xc6k"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = True
    str_0 = "@2*\n8\rnX5"
    int_0 = -824
    dict_0 = {int_0: int_0, str_0: bool_0, str_0: str_0}
    bytes_0 = b"\xe7\xf9\xec%\xa7\xf6\x1aa"
    tuple_0 = (bool_0, str_0, dict_0, bytes_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_30():
    pass


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = 654
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = "Z 4lQ8dSa;b>$lW"
    str_1 = "[}kE*PJ/P5b2c\x0b"
    dict_0 = {str_0: str_0, str_0: str_1, str_1: str_0, str_0: str_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    int_0 = -2408
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    int_0 = -1073
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = "M=;CHDl^S"
    module_0.match(str_0, str_0)


def test_case_39():
    pass


def test_case_40():
    pass


@pytest.mark.xfail(strict=True)
def test_case_41():
    bytes_0 = b"h>\x02|\x82@R\xc5\x07\x1c\xa7\x87\x90}~\xad\xbd"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "WNvAYkf\t<1M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b")K\xfbws"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    float_0 = -1681.306277
    set_0 = {float_0}
    list_0 = [float_0, set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = "ILSv[iKp)Exk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    complex_0 = -469.05 + 895.439j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = "GVaR\np-8E\n@4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bytes_0 = b"\\\xb1\xbf\xbc!\xa4\x84\x8b*\xa5U3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    list_0 = []
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = 'D"X!f4\tGdYO'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    complex_0 = 2369.13 + 2091.807904j
    dict_0 = {complex_0: complex_0}
    object_0 = module_1.object()
    bool_0 = False
    tuple_0 = (complex_0, dict_0, object_0, bool_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    bytes_0 = b"`\xda\xba\xf2\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_60():
    pass


@pytest.mark.xfail(strict=True)
def test_case_61():
    bool_0 = True
    str_0 = "Q\x0c#$"
    tuple_0 = (bool_0, str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_62():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_63():
    int_0 = -974
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    bytes_0 = b"\xca\x06\x13(\x98\xa1~\x86<\xa7\x06\xf9\xe1%j\xc5\xcdS5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    bool_0 = True
    int_0 = 1774
    dict_0 = {bool_0: bool_0, int_0: int_0, bool_0: int_0, int_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    float_0 = -599.62
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    int_0 = -200
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    str_0 = "i\t2u8&}NTKXfiMz"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    complex_0 = 962.09102 - 550.91563j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    bool_0 = True
    tuple_0 = ()
    set_0 = {tuple_0}
    dict_0 = {bool_0: tuple_0, bool_0: set_0}
    tuple_1 = (dict_0, bool_0, bool_0)
    list_0 = [tuple_1]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    str_0 = ";"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    int_0 = 256
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bytes_0 = b"l\x08\x87\xa8\xec\x84"
    float_0 = 1009.632049
    module_0.get_new_command(bytes_0, float_0)


def test_case_77():
    pass


@pytest.mark.xfail(strict=True)
def test_case_78():
    int_0 = 1850
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = "zHLe#\x0b\x0co\"v\tw6'.Vr"
    int_0 = -1021
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    complex_0 = 1154.04 + 2325.767j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    bytes_0 = b"\t\x15\xdab\xadl\xbbYN\xb9f\x92O\r\x9b\xd0\xa1F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    bytes_0 = b't\x88\xa7*\t\xdc\xf9\x84z\x1e\xcbG\r"\xb7'
    tuple_0 = ()
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    str_0 = "\n#%Y1%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    int_0 = 7
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    complex_0 = -3044.9 + 2314.25j
    float_0 = -334.230735
    list_0 = [complex_0, float_0, float_0, complex_0]
    str_0 = "!PhcG"
    tuple_0 = (list_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    bytes_0 = b"v\xb0\xbd\xf1\xd9\x08\xbe)\x82\x19\x9e1\x86"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    bytes_0 = b"\xd9\xee\x99\x00\xbd\x99\xc0\x8a0\x1e\xd9\x959\xc1\xe0 \xbf\x85/"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_90():
    pass


@pytest.mark.xfail(strict=True)
def test_case_91():
    str_0 = "WU\tw"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    str_0 = "9aqm2FU~/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    int_0 = -1805
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    none_type_0 = None
    int_0 = 1578
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    bytes_0 = b"Vi\xb3BY\xd5\x7f\x13/\x7f\xb2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    str_0 = "?v$\x0bB|RY4Ef'`>r-"
    complex_0 = 4008.485281 - 1373.8259j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    float_0 = 2965.9318
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    float_0 = -310.942
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [dict_0, dict_0, float_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    float_0 = -256.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    str_0 = "52t .cV-tHF@u?:@!\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    bytes_0 = b"IPe_`\xaft\xf8C\xaa\xe6]\xe5.V\x0ft"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    bytes_0 = b"\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    str_0 = "SH?];u`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    str_0 = "M.OVN*O\rQ,/_c\tD+w3"
    set_0 = {str_0, str_0}
    module_0.match(str_0, set_0)


def test_case_113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_114():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_115():
    float_0 = 4029.571213
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    int_0 = -5221
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    bytes_0 = b"\xea\xd8\x9f\x18\x0fX"
    module_0.match(bytes_0, bytes_0)


def test_case_118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_119():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0, bool_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    int_0 = 1925
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    int_0 = 111
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    bytes_0 = b"\xe6\xf9`\x15\x02H\x04\xe3"
    str_0 = "ho\nw"
    set_0 = {bytes_0, str_0, bytes_0}
    bytes_1 = b"\xc8\xf9V\xfd\xd3m~L\x05\xd4\xfae\x98[/w\x07\x1b"
    module_0.match(set_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_124():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    bytes_0 = b"\xd2n\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    int_0 = 1729
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    bytes_0 = b"SA\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    str_0 = "},+"
    module_0.get_new_command(str_0, str_0)


def test_case_132():
    pass


@pytest.mark.xfail(strict=True)
def test_case_133():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    int_0 = -1236
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    int_0 = 5
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    bytes_0 = b"\xe4\xee&s\x8a\rJ"
    complex_0 = 1847.6731 + 2450.775j
    list_0 = [bytes_0, complex_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    float_0 = -761.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    str_0 = "bBS0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    bytes_0 = b"\xc2~#\x91\x92jl\xc6\t\x1dp\xb0\xc0W\x91\xaeW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    str_0 = "V)}}ZC`'+w0z,3>tA;D4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    bytes_0 = b"\x17\x83\xc1.g?\x03fw\xbe\xe6ZM#\xf4\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    complex_0 = 622.8 - 102.8978j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    str_0 = "R"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    none_type_0 = None
    int_0 = -1283
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    bool_0 = True
    str_0 = "8;!$GRo7SF0:7YXE};D>"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    int_0 = -6568
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    str_0 = "5p2fz4Yhq\tMKIO5J;u.("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    float_0 = -1336.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    int_0 = 1189
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    float_0 = 2486.785
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    str_0 = '"Ux"\'T5y5r+"~ PtI'
    module_0.match(str_0, str_0)


def test_case_155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_156():
    float_0 = 511.0
    list_0 = [float_0, float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    int_0 = 2087
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    float_0 = -1161.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    bytes_0 = b"ao(\xa8\xb2\x02\x01\x88\x0c`o`\xdc/6u\xac\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    float_0 = -1464.174
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    bytes_0 = b">9-\xe8L\x9eVbW`\x87\x05\x7fCL"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    float_0 = 2879.311758
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    int_0 = 2439
    int_1 = 56
    list_0 = [int_0, int_0, int_1, int_1]
    bool_0 = False
    tuple_0 = (int_0, list_0, int_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    int_0 = 3875
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_174():
    bytes_0 = b"\x83O\xfe\x13\x15\x96\xc5\\\xbc\xad6f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    int_0 = 2820
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    str_0 = "<$6"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    tuple_0 = ()
    str_0 = '[Zh\t(GL8nb,"s'
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    int_0 = 1961
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    str_0 = 'L*y"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    int_0 = 886
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    bytes_0 = b"\xc4a\xc5\x80\x16O\xa0\x1a\xdf\xbc9t\xf9e\xf4~\xe8#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    str_0 = "J6-nHLj2RHp\r$z"
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, str_0, bool_0)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_187():
    int_0 = 18
    bytes_0 = b"&\xb3\xebO\xce;\x1c\xc8\xce\x1d\xe5"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    str_0 = "RJgbT2|b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    float_0 = -2134.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    bytes_0 = b" \x9c\x91R\xf2+y\xbd\xb3\xf3\xc5+\xed\xef\x8bN\xa5\x02\xfa\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    int_0 = 2569
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    bool_0 = True
    float_0 = -2457.7
    str_0 = "l0U5'-E,>b"
    tuple_0 = (bool_0, float_0, bool_0, str_0)
    dict_0 = {tuple_0: bool_0}
    str_1 = "x8BD.'\"4n?jX?0h5O"
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_194():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_195():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    none_type_0 = None
    float_0 = -3730.097
    module_0.match(none_type_0, float_0)


def test_case_197():
    pass


@pytest.mark.xfail(strict=True)
def test_case_198():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    int_0 = -70
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    int_0 = -2037
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    bytes_0 = b"q8\xba\xc4{0YG\t'ue\xac\x03r"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_202():
    pass


def test_case_203():
    pass


@pytest.mark.xfail(strict=True)
def test_case_204():
    float_0 = -2301.561133
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    bytes_0 = b"`\x9d>\x94Q\xe4\xd50\xb9\xfe2c\xbb\r\xe4(\x0f\x9c\xde0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    bytes_0 = b"\xd2\xfb\x16\xde\xc0I:\x85\\\rL05\x98P\xf8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    float_0 = 1230.989385
    list_0 = [float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    str_0 = "27S'_, Cof[ "
    module_0.match(str_0, str_0)


def test_case_209():
    pass


@pytest.mark.xfail(strict=True)
def test_case_210():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    int_0 = 407
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    str_0 = "=KmT5xsopgI%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    int_0 = 363
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    int_0 = 1252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    tuple_0 = ()
    set_0 = {tuple_0}
    list_0 = [set_0]
    float_0 = 878.6
    module_0.match(list_0, float_0)


def test_case_217():
    pass


@pytest.mark.xfail(strict=True)
def test_case_218():
    str_0 = "T,?,b}~XxM=H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    str_0 = "6t\r5fFN!|\t#|s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    dict_0 = {tuple_1: tuple_1, tuple_1: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    bytes_0 = b"\xde\xeeaf\xf3\x04\x16b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    str_0 = "e6\ry/X|+oY\x0codTXAsR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    str_0 = "\\\n{ War)"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    complex_0 = 2188.7 + 3935.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    float_0 = -1002.7911
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    int_0 = 1206
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    int_0 = -529
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    str_0 = "25Q1OUE4B>Lu\\2=\t-T"
    int_0 = 1180
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    int_0 = -1216
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    bool_0 = True
    str_0 = "tZyhk\n"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    str_0 = ""
    tuple_0 = (set_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    str_0 = "CSF5X^kD6@En"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    str_0 = "gph\rWX{.'zB>Y<sS\"NCx"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    bytes_0 = b":"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    float_0 = 3215.52803
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    bytes_0 = b">"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    complex_0 = -203.2 - 4445.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    complex_0 = 1272.57416 - 1061.3605j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    bytes_0 = b"\xd1\xc1\xd0f\xd3\xfd\xcc\x8a\xf4\x1f\xa0\xe6\xe3\x01@="
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    float_0 = 5037.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    float_0 = -1439.96277
    tuple_0 = (bool_0, bool_0, dict_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    int_0 = 2441
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    bytes_0 = b"\xee\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    float_0 = -886.270214
    module_0.get_new_command(float_0, float_0)


def test_case_251():
    pass


@pytest.mark.xfail(strict=True)
def test_case_252():
    str_0 = "v6rO{EZ"
    none_type_0 = None
    str_1 = "sF+)L<;p)<O&iH_=a"
    str_2 = "_d@|QfOuzy%eV/-"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    none_type_0 = None
    str_0 = 'zc(gE<W.=wUgE\\"'
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    str_0 = "V`:''vh2Jt"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bytes_0 = b"\xd2\xc3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    bytes_0 = b"\x92\xa2m\x00\xe2e\x92\xfa\xeap"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    int_0 = -3305
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    int_0 = 1192
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    str_0 = "tcNG*sI"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    float_0 = 3202.26
    list_0 = [float_0, float_0]
    str_0 = "l7"
    set_0 = {float_0, float_0}
    tuple_0 = (str_0, set_0)
    bool_0 = False
    tuple_1 = (list_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    bool_0 = True
    float_0 = 1495.81583
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    str_0 = "%<B>]a{GB7MLR9c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    int_0 = -939
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    str_0 = "/*NbI0r#Op.JEra2\r"
    module_0.get_new_command(str_0, str_0)


def test_case_270():
    pass


@pytest.mark.xfail(strict=True)
def test_case_271():
    int_0 = 511
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    float_0 = 2937.39
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    str_0 = "r\niE_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    float_0 = 2496.02
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    int_0 = -4142
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    float_0 = -717.85731
    module_0.match(float_0, float_0)


def test_case_277():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_278():
    int_0 = -1742
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    bytes_0 = b"\xd8\x1e\xcfhy.\xa0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    float_0 = 2168.8719
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    float_0 = 506.6345
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    float_0 = -841.31264
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    float_0 = -30.874
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    bytes_0 = b"\xb6\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    bytes_0 = b"\x86\x8eo"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    int_0 = 3156
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    bytes_0 = b"\xf3\xed\xba\xfe\xae\x90$\x9f>\t\x11\x8b\xa1u\x06\xb6^\xd7\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    int_0 = 105
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    int_0 = 2275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    int_0 = -2591
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    int_0 = 3224
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    int_0 = 1283
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    int_0 = -2579
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [int_0, int_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    int_0 = -1964
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    int_0 = -2470
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    float_0 = 556.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    int_0 = -2311
    bytes_0 = b"V\x01\x03\xce"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    float_0 = 1304.548
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    complex_0 = 3528.4 + 1800.46227j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    int_0 = 2384
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    str_0 = ")F\t"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    bytes_0 = b"\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_307():
    pass


@pytest.mark.xfail(strict=True)
def test_case_308():
    int_0 = 1234
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


def test_case_309():
    pass


@pytest.mark.xfail(strict=True)
def test_case_310():
    str_0 = "XTcXdhfk"
    str_1 = "?>MHVD;(a#"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = "Nb"
    bool_0 = True
    tuple_0 = ()
    dict_0 = {}
    tuple_1 = (str_0, bool_0, tuple_0, dict_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    bytes_0 = b"k"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    str_0 = "lNK|^D"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    int_0 = 5813
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b"w\xfc"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    str_0 = "l|G\x0bd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    int_0 = -1503
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    int_0 = 1738
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [list_0, list_0, object_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    bool_0 = True
    str_0 = "suLNGeK{P{7F;\\T"
    dict_0 = {str_0: bool_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    none_type_0 = None
    float_0 = -1200.14396
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    int_0 = 1225
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    float_0 = -2436.12645
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    none_type_0 = None
    module_1.object(*none_type_0)


def test_case_327():
    pass


def test_case_328():
    pass


@pytest.mark.xfail(strict=True)
def test_case_329():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    bytes_0 = b"\xb4=\x02#\xd1\x03v\xcc\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    int_0 = 518
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    complex_0 = 82 - 1174.03434j
    bool_0 = True
    dict_0 = {}
    bool_1 = False
    tuple_0 = (complex_0, bool_0, dict_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_333():
    bytes_0 = b"0\xa1 N"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    bytes_0 = b".\xe2\x98\x16\x95\x80\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    int_0 = 1498
    bytes_0 = b"\xbbL\xd7\xf1\xd2\xe5\xfb\x96\xa8\xd4}\xcd"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    float_0 = -326.96
    module_0.match(float_0, float_0)


def test_case_337():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_338():
    bytes_0 = b"2\xaeUB^4\x9f\xf1\xf3\xf5\xfbR\x1a\x93#\xd3\xf9\xbc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    float_0 = -555.0
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_1, bool_1)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    int_0 = 993
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    str_0 = "6SEMs_\r0N5of\\"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    bool_0 = True
    bytes_0 = b"\x8c"
    str_0 = ";R"
    tuple_0 = (bool_0, bytes_0, bool_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    float_0 = 2987.064979
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    bytes_0 = b"R\x89m\xb9\x94L\xef"
    dict_0 = {}
    module_1.object(*bytes_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    float_0 = -2447.22
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    int_0 = 771
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    float_0 = -532.75669
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    float_0 = -67.05
    dict_0 = {}
    bool_0 = True
    tuple_0 = (float_0, dict_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    str_0 = "s/?C|>^7&,DEQB2$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    float_0 = 795.62
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    bool_0 = True
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    bytes_0 = b"\x90\xb3(\x8a\x02\xec\xfe\xfd\x97\xd2\xd4@"
    bytes_1 = b"\xe3\xb2\xc1\xf5Q\xe4\xe7\xca\x14"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_362():
    str_0 = "k|al2=b^\x0c!iOrs?"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    str_0 = "^x `a"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    int_0 = -1379
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_367():
    bytes_0 = b'#\xb5+\xbc\xb4D\xc5"\x9a\xd2\xe6\x08*\x19\xa7'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = 'G\nu:i"`]g6U$'
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    str_0 = '\x0b1";z0\r|\tytZ#Z}w\\K0'
    bytes_0 = b"\x8b2\x1c\xfd\x0e\xb5D5\xa5=\xae\xe7j"
    list_0 = [str_0, bytes_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    bytes_0 = b"9X\x8a\xc8\x0b\xc1\xc1\x1a}w\xcf\xba=Qb\x0f"
    list_0 = [bytes_0]
    str_0 = ""
    list_1 = [bytes_0, list_0, str_0, bytes_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_371():
    bytes_0 = b"\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    str_0 = 'PA\r}r\r@H:<"d9Sc\x0b\ro'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    bytes_0 = b"b\xe2\x86\xb4\xee\x06d\xbd\xb6+\xba\x07\xfd\x9cm"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bytes_0 = b"<\x900\xf2\x8f\xa9\xeb\xce\\Y\xb3\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    bytes_0 = b"\x1f\xa2'&\x7f\xd9W9.\xf5}\x9f\x0b\x070\xfd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    none_type_0 = None
    bytes_0 = b"eq\\\xf2\xb1"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    float_0 = -2806.6
    int_0 = 1363
    tuple_0 = (int_0,)
    tuple_1 = (float_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_379():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    list_0 = [tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    str_0 = "j+Sa\\p\twR@F_NH"
    str_1 = "11&v5"
    str_2 = "H\\I[xXQ5z\x0b8TP<)h"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


def test_case_381():
    pass


@pytest.mark.xfail(strict=True)
def test_case_382():
    bytes_0 = b"\x13bj\xfe\xd27\xa0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    str_0 = "Ty7qb+(cb\re0&Yy"
    set_0 = {str_0}
    tuple_0 = (str_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    str_0 = "!Fpy="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bytes_0 = b"1\xe3n\x84\n\xf5\xado[\xef"
    str_0 = "<fw"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: str_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    bytes_0 = b"\ro\xe2[\xa7"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    str_0 = "+Dr,k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    int_0 = 154
    module_0.match(int_0, int_0)


def test_case_390():
    pass


@pytest.mark.xfail(strict=True)
def test_case_391():
    int_0 = 3147
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    bytes_0 = b"\xe1>\xdc~\x8bw5\x9aT\xc8i\xb5Q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    int_0 = -3509
    module_0.match(int_0, int_0)


def test_case_394():
    pass


@pytest.mark.xfail(strict=True)
def test_case_395():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0]
    str_0 = "i;9vR0eV)!955"
    dict_0 = {str_0: set_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    str_0 = "C"
    str_1 = "~|IT~(u5k/~"
    str_2 = '\t>8Bg{p~eU*"^~k\t'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    object_0 = module_1.object()
    list_0 = [dict_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    int_0 = -1734
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


def test_case_400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_401():
    str_0 = "~B7BG`.jp5eYh["
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, str_0, set_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    bytes_0 = b"\xe03\xda\xa1-Ho"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    complex_0 = 1751.8 - 1454.803908j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    str_0 = "to|raB%uKy"
    module_0.get_new_command(str_0, str_0)


def test_case_405():
    pass


@pytest.mark.xfail(strict=True)
def test_case_406():
    int_0 = -887
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    float_0 = -865.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    float_0 = -1623.8005
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    int_0 = 1262
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bytes_0 = b"d%\xa5\x7f\xd8\xd9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0, dict_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    float_0 = 766.73426
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    bytes_0 = b"U,\x8c%r\xbd\x97\xc3\xba\x11xi9\x01w\xb5 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    str_0 = 'iGI"#%&w/{$G38QfCu'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    bytes_0 = b"\xcdE\xbaA\xb6\x9f\x9e\x83#+\x10\x9a\x8a\xf9P\x16\x8b/\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    float_0 = 4694.61
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    str_0 = ";/Uj=iW{Gr,{w3Kv)QAG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    int_0 = -2596
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    complex_0 = 1214.19 - 2144.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    str_0 = "{QdcBQ>]9TE]m"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    int_0 = 1506
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    str_0 = ""
    module_0.match(str_0, str_0)


def test_case_426():
    pass


@pytest.mark.xfail(strict=True)
def test_case_427():
    float_0 = 770.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    int_0 = -2441
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    bytes_0 = b"\xa4\xbe\xd5\xe5\xd4\xc3Z\x85VF\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    bytes_0 = b",z\xcd<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    str_0 = "Ppjg!0,XRm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    complex_0 = 2332.443 + 772.525094j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    bytes_0 = b"\n\xcb\xd1\xda\xa1\xc2\x06\x05"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    bytes_0 = b"\xdf0K\x97\xe7%6\xbe\xe5\x99\x9e8\x13Je\xc3\xac,\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    int_0 = 1721
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    bytes_0 = b"\xaex\xae+\xa6E\xbd\xb4J\\\x912Y\xe8 "
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_439():
    pass


@pytest.mark.xfail(strict=True)
def test_case_440():
    bytes_0 = b"?\x9cV\xf6\xf2B*\xdd\x8d"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    str_0 = "rQ|$S\rLWaMjp"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    bytes_0 = b"\x8d\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    float_0 = -3574.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    str_0 = '4EgUxFlj\x0b\rTj"l]O%J'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    str_0 = "f0m>gYZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    float_0 = 192.878
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    complex_0 = -1006.07 - 33.4369j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    dict_0 = {}
    tuple_0 = ()
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    dict_0 = {}
    bytes_0 = b"\xc5pR,e\xf4\x08\xed\x14\xa9\x81aJC\x03p\x13\xc5"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    complex_0 = 1695.157 - 2613.0441j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    int_0 = 50
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    float_0 = 2186.6788
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    bytes_0 = b"\xc8\xc4\xaa\x84\xfe\xd8\x85.\xa9#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    str_0 = "[xr\t4hZB^fg"
    list_0 = [str_0]
    float_0 = -5330.22676
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (float_0, bool_0, tuple_0)
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_457():
    str_0 = "B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    str_0 = "'!MI|U\x0b\x0cos*~+uh)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    float_0 = 1606.73
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    complex_0 = 737.7 + 1580.4j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    bool_2 = True
    module_0.get_new_command(dict_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_462():
    int_0 = 415
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    list_0 = []
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    str_0 = "#M\nM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bytes_0 = b"\xdd\xf6n7#+\x83\xbe\xaf\xc5\xba8z`4"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    tuple_0 = ()
    int_0 = 793
    list_0 = [tuple_0, tuple_0, tuple_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    int_0 = -828
    list_0 = [dict_0, int_0]
    tuple_0 = (list_0, bool_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    complex_0 = -4337.69 + 523.833167j
    module_0.match(complex_0, complex_0)


def test_case_476():
    pass


@pytest.mark.xfail(strict=True)
def test_case_477():
    str_0 = "lx"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    int_0 = 881
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    bytes_0 = b"!P\xad?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    int_0 = 293
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    bytes_0 = b"Xi\xa1\x9c\x9b\xa1Jj\xd6\xf0\xb3\x80t\xcd\x08\xe9j\x11n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    str_0 = "9{\rAl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    int_0 = 1462
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    bytes_0 = b"\xaf\xdeqi\xd4\xbd\xf1/#2\xe1Z\xf3\x16~,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    bytes_0 = b"\xd1\xc1\xe3Q\xd8H\xb2\xba\xcbs"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    bytes_0 = b"\x10\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    int_0 = -4011
    int_1 = -2885
    dict_0 = {int_0: int_0, int_0: int_1}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    complex_0 = -1167.917355 - 877.245j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    set_0 = set()
    int_0 = 2314
    bool_0 = True
    tuple_0 = (set_0, int_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_492():
    pass


@pytest.mark.xfail(strict=True)
def test_case_493():
    str_0 = "!D4(%@J"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    bytes_0 = b"\xbb\xfe\xffO\xf7Ub\xf1\xd3\x18\xbc@{\xf2^\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    str_0 = "F=L9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    str_0 = "0CS8!v@mC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    bytes_0 = b"\x07#"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    int_0 = -1983
    str_0 = "n\t]"
    bytes_0 = b"^\x0bW\x13)\x8b\xcd=\xdd"
    bool_0 = True
    bytes_1 = b"Ip\xe4\xaa\xde%l\xf8\xaf"
    tuple_0 = (bytes_0, int_0, bool_0, bytes_1)
    tuple_1 = (int_0, str_0, tuple_0, bytes_0)
    dict_0 = {tuple_1: tuple_0}
    list_0 = [dict_0, bool_0, tuple_0]
    list_1 = [list_0]
    list_2 = [list_1]
    int_1 = -2246
    tuple_2 = (list_2, list_1, int_1)
    module_0.get_new_command(tuple_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_500():
    int_0 = -2060
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    set_0 = set()
    list_0 = []
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    int_0 = -842
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    bytes_0 = b"0\xa7V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    str_0 = ".Esc"
    str_1 = " 8!N'X"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_508():
    str_0 = ',\')mlikjz"S"\tX3'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_509():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    str_0 = "S|Yu:K\nK@HpYiV}P0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    str_0 = "\x0b{p_=+!LE*9@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    int_0 = -806
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    float_0 = 3240.6
    module_0.get_new_command(float_0, float_0)


def test_case_514():
    pass


@pytest.mark.xfail(strict=True)
def test_case_515():
    bytes_0 = b"^\xe1\xc6\xba\x89"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    str_0 = '"A#$\\S=G`70X#&fw*\n'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    int_0 = -1574
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_519():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_520():
    int_0 = 1374
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    str_0 = "U]"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    complex_0 = -5269.4866 + 1506j
    module_0.get_new_command(complex_0, complex_0)


def test_case_523():
    pass


def test_case_524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_525():
    str_0 = "!A\rSQ3hl>cG"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    bool_0 = False
    str_0 = ""
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    str_0 = "k3L|J3jH-lj};En5[$xT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    int_0 = -1701
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    bytes_0 = b"9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    int_0 = 0
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    bytes_0 = b"D\xf5fk\x8d\xea\x19\x0e\xbf\x08\xdd_\xabO\xa3\x8e\xb9]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_535():
    int_0 = -573
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_536():
    float_0 = 121.65502
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    str_0 = "!ZW*pTOK).W{XZXdD"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    bytes_0 = b"\x14\xfe\x8d4{\xb0K\xc3\x90p>|\xb9O3\x90\x12"
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    bytes_0 = b"\xbf"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    bytes_0 = b"m\xbd\xc7q$\x99\x92p\xd4\x12_\x89\xd3\x19"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_541():
    pass


@pytest.mark.xfail(strict=True)
def test_case_542():
    str_0 = "iS"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    float_0 = 633.0
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    float_0 = -3206.77
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    int_0 = -776
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    float_0 = -1943.12
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    int_0 = 2401
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    int_0 = -2920
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    bytes_0 = b"xG[\xc4\x0f\x9e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    bytes_0 = b"\x92\x88\x9a\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    complex_0 = -8028.169 + 1451.82993j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    bool_0 = True
    str_0 = "2Uw6cj|vt!4`)v"
    str_1 = "d_"
    str_2 = "D>|ct}D\x0b+C"
    str_3 = "C1Q0!"
    dict_0 = {str_0: str_0, str_1: bool_0, str_2: str_0, str_3: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    complex_0 = -18.2534 + 1874.375895j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    int_0 = -2247
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    bytes_0 = b"\xb6e\xa9MK\xe6u\xf8h\xff\xd0\x18\x1d\x1d\xd6\xb3_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    float_0 = 2150.179
    float_1 = 939.048
    set_0 = {float_0, float_1}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    float_0 = 2751.67
    set_0 = {float_0, float_0, float_0}
    list_0 = [set_0, set_0]
    list_1 = [set_0, set_0, float_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_561():
    float_0 = 4553.285602
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    int_0 = 1947
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    bytes_0 = b"\xc5\xc0\xae\xde\xb7\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    float_0 = 1045.683
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    bytes_0 = b"\xdf\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    int_0 = -3269
    module_0.get_new_command(int_0, int_0)


def test_case_570():
    pass


@pytest.mark.xfail(strict=True)
def test_case_571():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0, set_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    bytes_0 = b"io~Pe\x10\xa6_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    str_0 = "]$A\x0c'}`,9+CR!okC+K7c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    str_0 = "j.(^Q]'UDAoi"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    bytes_0 = b"\xa9\x18\xce\xe8t\t\x1e\x1bE:\xf4\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    str_0 = "v&^$v[}Nk@QHdC"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    str_0 = "u!|uxP4O\t`=&/fdF#8h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    int_0 = -2525
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    int_0 = 2548
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    str_0 = "|D{MQ=j#du){)y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    bytes_0 = b"F\xa1\xba\xb3\x85p 4\xefdY\xa7\xac\x91,\xae/9"
    set_0 = {bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    int_0 = 1180
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    str_0 = "F]"
    complex_0 = 1419.465 + 279.84j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    str_0 = ">jX5\nwk>fO4PvH"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    complex_0 = 1385.492579 + 698j
    dict_0 = {}
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_593():
    pass


@pytest.mark.xfail(strict=True)
def test_case_594():
    bytes_0 = b"M("
    tuple_0 = ()
    tuple_1 = (bytes_0, tuple_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    float_0 = 4826.72
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    bytes_0 = b"x\xec\xc9\xd6\xd3\x03J"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    int_0 = 1332
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    bytes_0 = b"\xe4~\xdd\x18\n0\xc8\x19.@@\xbb\xa5\x9e\xb0\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    complex_0 = 1653.2 - 3576.2j
    tuple_0 = (complex_0,)
    dict_0 = {tuple_0: complex_0}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    int_0 = 63
    str_0 = "f<Ifhs"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    str_0 = "lP<rejfs~W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    int_0 = -24
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    bytes_0 = b"\x85A1\x0b\x16\xfa\x8d"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    int_0 = 1478
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    str_0 = ">:l!0zN*7(?1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    int_0 = -682
    set_0 = {int_0}
    tuple_0 = (int_0, set_0)
    tuple_1 = (tuple_0, int_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    float_0 = 1183.0
    module_0.get_new_command(float_0, float_0)


def test_case_609():
    pass


@pytest.mark.xfail(strict=True)
def test_case_610():
    float_0 = 978.55873
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    int_0 = -1417
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    complex_0 = 619.32 + 2297j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    bytes_0 = b"\t\x12\xe8\xde\x92\xdd\xe2\x04\xa7\x85\xb3\xbew\xfc\x8c\xe6A\xc7Fm"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    bytes_0 = b"\xbd\x86\x0bF+\xaf\x84\xb0z#\xa86\xdbD\x8b\x1e\\\x1f\xb1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    none_type_0 = None
    int_0 = -65
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    str_0 = "hgu!l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    float_0 = 3131.84
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    str_0 = "TkSm78@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    str_0 = "OH{yc\tm~F1R9|}Y^Toa"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    bytes_0 = b"j\xd4#\xbc]W\xd7zQ\xab\x027 |I\xd2\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    int_0 = -773
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    int_0 = 1023
    dict_0 = {}
    list_0 = [int_0, int_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    int_0 = -3078
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    bytes_0 = b'M\x01\xfb\xa7\xd2\x17\xfd\xddr".`'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    int_0 = -896
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    int_0 = 205
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_631():
    float_0 = 1922.07638
    list_0 = [float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    none_type_0 = None
    complex_0 = 2306.73 + 520.054877j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    str_0 = "??i.y+*Z@XJj/\nE-\rf<m"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    str_0 = "{l~=\x0c7HF)4o`"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    int_0 = -843
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    complex_0 = -2073.83 + 1364.851j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bytes_0 = b"\xb4\xad4B\xd3|\xfcy\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    str_0 = 'VFI1\x0cKaCR6"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    str_0 = "xA"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    int_0 = -802
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    str_0 = "V(I\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    complex_0 = 6171.5305 + 2798.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    tuple_0 = ()
    complex_0 = -80.2 + 1722j
    set_0 = {tuple_0, tuple_0, complex_0, complex_0}
    list_0 = [set_0, tuple_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    bytes_0 = b"\xa2\x90\x8e\x03&?\x0b\x83w\xf01\xff\xf1"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    bytes_0 = b"pl\x0b\xb9\xe6eN*\xd7<,\xbb\x879"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    bytes_0 = b"\x1d1j\x92\xfe\xb1"
    set_0 = {bytes_0, bytes_0}
    int_0 = 653
    tuple_0 = (bytes_0, set_0, int_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    str_0 = " l9_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    bytes_0 = b"n]^'\x0cz1\x9a"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    str_0 = 'YY" '
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    bool_0 = False
    int_0 = 2058
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    float_0 = -952.0
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    str_0 = "99=}uQ]XFOVF\\[]R%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    bool_0 = False
    int_0 = -2478
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bytes_0 = b"\xa6/\xc8z\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    bytes_0 = b'U\xa4\xc0P\xd9\r\t\xc7\x9a\xd4\xdeh"L'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    dict_0 = {}
    object_0 = module_1.object(*dict_0, **dict_0)
    module_0.get_new_command(object_0, dict_0)


def test_case_661():
    pass


@pytest.mark.xfail(strict=True)
def test_case_662():
    bytes_0 = b"\xae[\x00\xb4m\xb7\x89.\x8ae\n5\xe1\x1ax\x1c\xbe"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    bool_0 = True
    bytes_0 = b"\xd3\xb0\xab\t\xd1\xd9B\x80\xdaC\x84"
    tuple_0 = (bool_0, bool_0, bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    bytes_0 = b"\x9e\n$S\xc9,\x87+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_668():
    pass


@pytest.mark.xfail(strict=True)
def test_case_669():
    str_0 = "HFlL&\x0b$dFpi\\@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    int_0 = -517
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    int_0 = -2527
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    str_0 = "p\\l6U\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    int_0 = -597
    module_0.match(int_0, int_0)


def test_case_674():
    pass


def test_case_675():
    pass


@pytest.mark.xfail(strict=True)
def test_case_676():
    float_0 = 2432.32907
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    complex_0 = -1 + 3220.51381j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    bytes_0 = b"\xf5\xd4\xd9Q\xd7\xb1k\xa6X H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    int_0 = -4675
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    int_0 = 1600
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    float_0 = 2109.3816
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    bool_0 = True
    tuple_0 = (bool_0,)
    int_0 = 2926
    tuple_1 = (tuple_0, int_0, bool_0, bool_0)
    dict_0 = {tuple_1: int_0, int_0: int_0, int_0: tuple_1, tuple_1: bool_0}
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_685():
    int_0 = 714
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    complex_0 = 1651 - 1104.06j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    float_0 = 344.40154
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    bytes_0 = b"?>F\x12\xc2\xd7\x81]\xb6v\x95t"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


def test_case_689():
    pass


@pytest.mark.xfail(strict=True)
def test_case_690():
    bytes_0 = b"|"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    int_0 = -1910
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    int_0 = -2863
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    str_0 = "X!Wh@AF"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    bytes_0 = b"^\x8d\xde\x13\xe3+"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    bytes_0 = b"E\xf9\xff[\x05\xc8\xa4/\xa0\xc3\x99\x13q\x8d\x9c\xb1s\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    bytes_0 = b"`\xd0\x84y"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    complex_0 = -767.860471 + 631.6985j
    tuple_0 = (complex_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bool_0 = True
    complex_0 = -1594 + 4847.971j
    list_0 = [complex_0, bool_0, bool_0]
    tuple_0 = (bool_0, complex_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    complex_0 = -3364.403965 - 259.6016j
    module_0.get_new_command(complex_0, complex_0)


def test_case_700():
    pass


@pytest.mark.xfail(strict=True)
def test_case_701():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    bytes_0 = b"h\xd0\x19\xf9\xd3\x81c\x1f\xd2\x15\xffjU\x01`|"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    int_0 = -1014
    list_0 = [int_0, int_0, int_0, int_0]
    tuple_0 = (int_0, list_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    bool_0 = True
    str_0 = 'hzUk(/<7--) Vfk"`'
    tuple_0 = (str_0,)
    tuple_1 = (bool_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    int_0 = -2794
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    float_0 = -1706.515
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    set_0 = set()
    list_0 = [set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    str_0 = "N~:2qe{[y6p+=W #E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    bytes_0 = b"\x1a\xb8\xd3\xe9^a\xba\xb6\xd4>\xd0\xee\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    bytes_0 = b"\xc2\xd0n"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    str_0 = "U!s2`^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    int_0 = 2698
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    str_0 = "|&3qkvFXvG"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    bytes_0 = b"h,\n\xf0P\xde?\xa9\xebP\x81\xc0\x15\xe8\xaf\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_0, bool_1: bool_1}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_718():
    str_0 = 'w5N+q"e=w0I'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bytes_0 = b"I\x8bN\xb2\xfa\x9b\x11\x12\xe2\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    str_0 = 'O\nH]>\r2LQA]"d!9kC='
    list_0 = []
    int_0 = -4379
    tuple_0 = (list_0, int_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_723():
    pass


@pytest.mark.xfail(strict=True)
def test_case_724():
    bool_0 = True
    bytes_0 = b"\x13\x9duMZX\xe7<\xf3\xf3\xdd\xf5M\x9d"
    float_0 = -1415.244045
    bool_1 = True
    bool_2 = False
    tuple_0 = (bytes_0, float_0, bool_1, bool_2)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    bytes_0 = b"\xefF\xc46-\x18W\x99Z+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    bytes_0 = b"\xcb\xc3!\xeaHG\xcb\x83\xf5d\x96\xbd\x8b"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, bytes_0, set_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, set_0)


def test_case_728():
    pass


def test_case_729():
    pass


@pytest.mark.xfail(strict=True)
def test_case_730():
    float_0 = 1830.19
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    float_0 = 1182.85024
    float_1 = 3385.581522
    int_0 = 2514
    dict_0 = {float_0: float_1, float_0: float_1, float_0: float_1, int_0: float_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_732():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, tuple_0}
    list_0 = []
    list_1 = [set_0, bool_0, set_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_733():
    str_0 = "t84fB|J."
    module_0.get_new_command(str_0, str_0)


def test_case_734():
    pass


@pytest.mark.xfail(strict=True)
def test_case_735():
    str_0 = "8HB\x0cK]OqHXo%\x0c[T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    bytes_0 = b"g\xc8\x18"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    float_0 = 2467.61043
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    str_0 = "9_6Ic5o(M^7rc5:w,YI"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    str_0 = "MF>xT\x0cpsQD]!\r"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    str_0 = "p\x0b,c"
    str_1 = "jIhY oh{"
    bytes_0 = b"\xfc\x91J\x97$0#\x02EI\xf8"
    dict_0 = {str_0: str_0, str_1: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    bytes_0 = b"\x19\x0b\x99\xb5\xee\x9e\x0e\xe1+\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    bytes_0 = b"\xbaOsL\x851\\\xfd\xd7-\x11\x08X~"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    int_0 = 3388
    module_0.get_new_command(int_0, int_0)


def test_case_744():
    pass


@pytest.mark.xfail(strict=True)
def test_case_745():
    bytes_0 = b"\x94\x95\x87\x8fk-VU<\xc4\xa3t\xba\xeb\xd1\x06\x9e\xa1%-"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    str_0 = "PRE+D\\'h.Mn+3XQT%\n}/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    str_0 = "F"
    module_0.get_new_command(str_0, str_0)


def test_case_748():
    pass


@pytest.mark.xfail(strict=True)
def test_case_749():
    bool_0 = True
    int_0 = -1996
    module_0.get_new_command(bool_0, int_0)


def test_case_750():
    pass


@pytest.mark.xfail(strict=True)
def test_case_751():
    float_0 = -309.56
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    int_0 = -2487
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    int_0 = -8372
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


def test_case_756():
    pass


@pytest.mark.xfail(strict=True)
def test_case_757():
    str_0 = "85\t{Uq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    module_0.get_new_command(object_0, object_0)


def test_case_759():
    pass


def test_case_760():
    pass


def test_case_761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_762():
    float_0 = 1361.497
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    float_0 = 269.512736
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    int_0 = 1656
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    int_0 = 1525
    float_0 = 872.823319
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    int_0 = 63
    module_0.get_new_command(int_0, int_0)


def test_case_768():
    pass


@pytest.mark.xfail(strict=True)
def test_case_769():
    int_0 = -793
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    float_0 = -2955.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    bytes_0 = b"H\x07\x0e{\xd5\xb7\x87hNWn\xa7oL\xc3*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    int_0 = 110
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    complex_0 = -1953.0212 - 106.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    list_0 = []
    int_0 = -3423
    tuple_0 = (list_0, list_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    none_type_0 = None
    bytes_0 = b'\xf6\x81HW\x1b\xf4\xc7\xf4\x1ffYH\xac\xfd\x04\xac\xf2"\xc4'
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    float_0 = 101.04
    float_1 = -147.37
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_778():
    int_0 = -2121
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    int_0 = 1001
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    str_0 = "\nH76s/H<U&8OkA"
    complex_0 = -310.35076 - 1263.8551j
    dict_0 = {str_0: str_0, complex_0: complex_0, str_0: complex_0, str_0: str_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    bytes_0 = b"\xc0\x93\xd1\xce\xad\x8f\xdb\xb0\xeb\x8f\xee\x9b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    int_0 = -5883
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    int_0 = -13
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    str_0 = ";nlCB-'d'_:CjW-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    bytes_0 = b"\xdft"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    complex_0 = 308.7716 - 3719j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    bytes_0 = b"V\xb9\x98\xb58@4\xf98q\x06\xf8rT"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    int_0 = -3722
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    int_0 = 1927
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    str_0 = 'HG<;b3[EnI $m"\\A{)K'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    int_0 = 3003
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    bool_0 = False
    bytes_0 = b"\xc2\x1b\xc7\x8cC\x92"
    tuple_0 = (bytes_0,)
    set_0 = {bool_0, bool_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_796():
    pass


@pytest.mark.xfail(strict=True)
def test_case_797():
    str_0 = "6(zWBx"
    int_0 = 1549
    set_0 = {str_0, int_0, int_0}
    bytes_0 = b"B^\xaaM\x1c\xfdK\xbe\x07+\x9b\x9fNP\x83\xa7I"
    tuple_0 = (set_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    none_type_0 = None
    int_0 = 1513
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    float_0 = -2235.007
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    float_0 = -1624.5925
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    bytes_0 = b"\xac\x05\xae\xbcPVr{\x03y\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    bytes_0 = b'\xeb\x98\xe2\xdcA8\t\x04q>\x98Eq"Y\xf6\x13\xe7\x82\xe7'
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, list_0]
    tuple_0 = (list_1,)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_804():
    float_0 = -825.828932
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    int_0 = -1435
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    bytes_0 = b"\xbaK\xf8\xf2C\xebU\xa3\xfc\x89\xf4\xa1S\x1e\xd3\x18\x87"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, bytes_0, dict_0]
    bool_0 = True
    str_0 = "q|SLR0L8fS5mFQ"
    tuple_0 = (bool_0, bytes_0, bool_0, str_0)
    tuple_1 = (list_0, tuple_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    float_0 = 1570.58747
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    str_0 = "Scb"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    float_0 = -50.188175
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    float_0 = -664.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    int_0 = 793
    dict_0 = {int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    int_0 = 1610
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    str_0 = '\x0b\t+1;H-P7"X-Z'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    object_0 = module_1.object()
    float_0 = 2091.0
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    str_0 = '2{-I_JOC"2-V+(3N5/A'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    float_0 = 836.22
    set_0 = {float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    float_0 = -2153.836
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    float_0 = -2192.0
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


def test_case_820():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    str_0 = "R9%yN8;:('#]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    str_0 = ">ipj3Km6\x0c44)_{jl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    object_0 = module_1.object()
    float_0 = -1660.6577
    module_0.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_825():
    pass


@pytest.mark.xfail(strict=True)
def test_case_826():
    str_0 = "LJ<(<Ym&O$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    complex_0 = -5076.7 + 1798j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    str_0 = "pu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    int_0 = 1443
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    str_0 = 'Ajj"b5gpFi'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    bytes_0 = b" \x9c\xb3\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    str_0 = "OT^5\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    str_0 = 'b$"RQ*ft\taA<%w;D\x0c&zY'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    bytes_0 = b'|"\x9b\xa8B\xfa=\x12h\xeb'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    float_0 = 2201.62
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    str_0 = "uxS/E'~/=I.\x0cvp%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = 417
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    int_0 = 474
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bool_0 = False
    str_0 = "l0<aea+"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    float_0 = -179.58
    dict_0 = {float_0: float_0}
    bytes_0 = b"f\xa4\xc7R\xfa\x8a/\xaf#\x1eH\xb6\xf4\x96\x9c\xdbQ\xf2\xab"
    tuple_0 = (bytes_0, dict_0, dict_0)
    float_1 = -320.63
    tuple_1 = (dict_0, tuple_0, float_1)
    tuple_2 = (tuple_1,)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    float_0 = 4573.620401
    str_0 = ">1R"
    tuple_0 = (float_0, str_0, str_0)
    float_1 = 804.86786
    set_0 = {tuple_0, str_0, float_1}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    bool_0 = False
    str_0 = "wHo`j1!Sqih>K\n`>VbMX"
    dict_0 = {str_0: bool_0}
    tuple_0 = (bool_0, bool_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    bytes_0 = b"K\x1c\xea#\x80\x14\x16 \x90\x92%"
    int_0 = -209
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    str_0 = "iLS)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    bool_0 = True
    int_0 = 2454
    tuple_0 = (bool_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    int_0 = 1577
    set_0 = {int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    str_0 = ".wdc<2%;#~@/P\x0bO:=VM!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    float_0 = -1300.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    complex_0 = 1974.46 - 56.657j
    bool_0 = True
    int_0 = 242
    bool_1 = False
    tuple_0 = (bool_0, complex_0, int_0, bool_1)
    tuple_1 = (complex_0, tuple_0, bool_1)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_852():
    bytes_0 = b""
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    bytes_0 = b'L\x8f\x08\xb4\x9b\xe7M{P]\xb4"\x82\xee'
    bool_0 = True
    set_0 = {bytes_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    int_0 = 3439
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    float_0 = -456.21803
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    int_0 = 1562
    str_0 = "st\tP\txyo$?{GX1\tA6HL"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    float_0 = -535.68108
    module_0.get_new_command(float_0, float_0)


def test_case_858():
    pass


@pytest.mark.xfail(strict=True)
def test_case_859():
    int_0 = -1540
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    str_0 = "=oa_!u"
    int_0 = -3690
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    bytes_0 = b"?\xc7B:\xf2&"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    float_0 = -2060.859
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    float_0 = 684.74508
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    str_0 = "/,^98"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    object_0 = module_1.object()
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_871():
    int_0 = 2102
    dict_0 = {}
    tuple_0 = ()
    tuple_1 = (int_0, dict_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    str_0 = "QmkD[/[P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    int_0 = 1130
    tuple_0 = (dict_0, int_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    bytes_0 = b'\x04Q\x8a\x83\xfa\xce<B\\cs<\x17\x16\x0c e\x16\xd8"'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [bool_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    float_0 = -3131.941
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bytes_0 = b"@\x91\xfc\xd3{H*\xb2\x80\xd6\xa4@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    int_0 = 78
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    int_0 = -232
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    float_0 = -3840.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    bytes_0 = b"\x82,"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    str_0 = "VSM'/JbR}]"
    list_0 = [str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    str_0 = "bpug\r6QR3MK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    bytes_0 = b'c\x97\xe5\xff\xfe\x02C\xe4\xe9"'
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    str_0 = "%(x#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    float_0 = 154.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    bytes_0 = b"\xd2m\xa5"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    bytes_0 = b":!J\xb8\xe8\x03"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_891():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bytes_0 = b"\xdfg"
    module_0.match(bytes_0, bytes_0)


def test_case_893():
    pass


@pytest.mark.xfail(strict=True)
def test_case_894():
    float_0 = -3397.0
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0]
    module_0.get_new_command(dict_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_896():
    float_0 = -1268.72
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    bytes_0 = b"t|R"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    str_0 = "\r+aTX:y<Fw>K2c"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    float_0 = 781.88
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    str_0 = "8o|uH!8T<3{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    bytes_0 = b"\xb4\xce\xad\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    bytes_0 = b"_\x1e\xf3\x1d\xc4\x13\xc0\xa21\x0f\x1b\xee\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    float_0 = 410.24551
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    str_0 = 'k=T"/CAc\x0cXbkNptl\x0b{'
    str_1 = "=ZW`6#N@aoUQMS\x0bB\rJb"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_908():
    str_0 = "k"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    int_0 = -1243
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    bytes_0 = b"\xf8\xe0\x13#V$\x86\xab[\xce\xa4k/\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    bytes_0 = b"\xb8\x85\xca\x17C\xff\xb8\xd7,\xe9C"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    str_0 = '9Hm".^>[[:c1_'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    str_0 = "5^\to0`+"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    str_0 = "rcq$nTI5o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    float_0 = 828.74008
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    int_0 = -660
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    str_0 = "@ S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    list_0 = []
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    bytes_0 = b"E,\xb18Zr\x9b\x99@\xd4\x8f\xea"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    bool_0 = False
    none_type_0 = None
    module_1.object(*bool_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    bool_0 = True
    bytes_0 = b"\xad\x82M\xa1\x1ekF\xef<\xb9\xcf\x8b\x15\x02\xf6\x8d"
    bytes_1 = b"`4\x00\x9f\xb5\x90W#\x1a8GT\xfd\xc9"
    tuple_0 = (bool_0, bytes_0, bytes_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    str_0 = "K\nVj\twRCpbmX"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    float_0 = 588.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    int_0 = -780
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    str_0 = "$yv\\tCK-Ut\\&PcTRD,6-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    bytes_0 = b"\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    str_0 = "6Fi\nYl~|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "3B3\x0c'$\tu;~wF;lj|z^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    str_0 = "AAG-B;9:c}yG!qYai;uE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    str_0 = "Cys9\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bool_0 = True
    float_0 = -3202.99722
    module_0.get_new_command(bool_0, float_0)


def test_case_935():
    pass


@pytest.mark.xfail(strict=True)
def test_case_936():
    int_0 = -232
    set_0 = {int_0}
    bytes_0 = b"\xe4\xcd"
    tuple_0 = (set_0, bytes_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


def test_case_938():
    pass


@pytest.mark.xfail(strict=True)
def test_case_939():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    int_0 = 1807
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    int_0 = 804
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_944():
    pass


@pytest.mark.xfail(strict=True)
def test_case_945():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    bool_0 = True
    float_0 = -592.676331
    tuple_0 = (bool_0, float_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    str_0 = "S\n\tb@<iuw*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bytes_0 = b"\x0e\xc3\xf0p\x15\x14\xeaD\x80\\\x10\xd3\xec\x01`N\x9ff)"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    str_0 = "G$8D7B{]61rV.UmO\\c"
    module_0.get_new_command(str_0, str_0)


def test_case_950():
    pass


@pytest.mark.xfail(strict=True)
def test_case_951():
    str_0 = ",z/L3+J,f4fYt#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    bytes_0 = b"|\xa0\xaaZ\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    int_0 = -1110
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    str_0 = "-[.#v\\\thE-\n::4]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    str_0 = "EaNs5-'L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, bool_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, list_0)


def test_case_960():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_961():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    str_0 = "<r2_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    complex_0 = -1672 + 1954.412621j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    int_0 = 1017
    object_0 = module_1.object()
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    float_0 = -949.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    int_0 = 853
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    bytes_0 = b"b:#j\x15z\xf4$y\x0e\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_969():
    pass


@pytest.mark.xfail(strict=True)
def test_case_970():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    str_0 = "ZQ )>2nEJ6y`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    none_type_0 = None
    str_0 = "e%|sj\tvLmcYzE1"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    int_0 = -486
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_975():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    int_0 = -2418
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    tuple_0 = ()
    int_0 = -630
    dict_0 = {tuple_0: int_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    bytes_0 = b"g\xb6\x01J"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    float_0 = -3591.784
    tuple_0 = (float_0,)
    bytes_0 = b"\xc9\xaa\x17\xd1\x8bg\xe1"
    tuple_1 = (tuple_0, float_0, bytes_0)
    bool_0 = False
    dict_0 = {tuple_1: float_0, tuple_0: bool_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    bytes_0 = b'\xe0L\xc0\xfc\xff\xba\x13\x1b"\xf9\xb7\x02f\x0f\xf4\x94'
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    int_0 = 2930
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    int_0 = -2221
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    bytes_0 = b"\x8e\xb5@h\xfe\xda\x85\xe6t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bytes_0 = b"\xdb\xe8\x06TP\xd7=\xd0p\x8c\x86bTe"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    float_0 = 125.62934
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    float_0 = -407.332145
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    str_0 = "QM?<sz\"X SX'<zQ$\\3|:"
    tuple_0 = (str_0,)
    int_0 = 1576
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    str_0 = "B["
    list_0 = [str_0, str_0, str_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    set_0 = set()
    tuple_1 = (tuple_0, set_0)
    list_1 = [str_0, tuple_1]
    list_2 = [list_1, list_1]
    module_0.match(list_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    int_0 = 1590
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    bytes_0 = b"\x9dv\xb2J>\xf3Z-\x01\xe6\xa4:="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    str_0 = "A'D2zOmye/o<zvi9f"
    bytes_0 = b"Q"
    tuple_0 = (str_0, bytes_0)
    str_1 = "%y99\\(~=y@zi@Dd"
    str_2 = "\\Ml~c\\b>Toosv=(U%"
    dict_0 = {tuple_0: str_1, str_2: tuple_0, str_1: str_1, str_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    float_0 = 1191.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    int_0 = -1334
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    float_0 = -1421.96
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    int_0 = 2056
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    bytes_0 = b"\xbe6z93l\xc3\x8d]\x13\xdc\t\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    bool_0 = True
    bytes_0 = b"H^\xef)\x88O\x99\x8c!\n~\xeb@\x826\xad"
    list_0 = [bool_0, bytes_0]
    tuple_0 = (bool_0, bytes_0, list_0)
    module_0.match(tuple_0, list_0)


def test_case_1011():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1012():
    bytes_0 = b"\x8d\x9c\xcc`Z\x89y\xbcq\xd6,0\xbd"
    float_0 = 716.313735
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    str_0 = "Pnb,A)^{l[~$/g"
    module_0.get_new_command(str_0, str_0)


def test_case_1014():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1015():
    int_0 = -681
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    tuple_1 = (tuple_0, tuple_0, list_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    str_0 = " }_^<j9RoM\t|dI"
    tuple_0 = (str_0,)
    int_0 = -709
    tuple_1 = (tuple_0, int_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bytes_0 = b"\x84eo\xdb"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


def test_case_1023():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1024():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    int_0 = -3506
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    str_0 = "Umjd|g1 e$LU8\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    str_0 = "d7Cv.d~N0_=V<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    str_0 = "D_\r7PXKl9[PQzM{Ee,y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    bytes_0 = b"k\xc0\x1e\xe3"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    int_0 = 1625
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    str_0 = "hk{QKH\\R<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    str_0 = "=sN"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    bytes_0 = b'\xaaCy"\xf9\xd2\xca\xed\xe2\xca'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bytes_0 = b"\xdcZc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    float_0 = 15.44198
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    str_0 = "*zPJUq"
    module_0.match(str_0, str_0)


def test_case_1038():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1039():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bytes_0 = b"0\xce\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    str_0 = "`et9 vEXqB+:Ds.4"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    bool_0 = False
    set_0 = {bool_0}
    str_0 = 'N[\x0bg"/@u!l?cK('
    list_0 = []
    tuple_0 = (str_0, list_0, bool_0)
    tuple_1 = (bool_0, set_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bytes_0 = b"\xc1\xa1\x08\xe4\xedG6G\xad"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    int_0 = 266
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    complex_0 = 614.446006 - 238.79469j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    str_0 = "X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    str_0 = "Da^C-'7G/55eu>f)^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    bytes_0 = b"\xe9\xdfmF\xa3\xfc\xbd\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    complex_0 = -865.432 + 2488.69j
    tuple_1 = (tuple_0, bool_0, bool_0, complex_0)
    list_0 = [tuple_1, bool_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    list_0 = []
    str_0 = "GF"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    int_0 = 1724
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    complex_0 = -1582.76 - 2905.29j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    str_0 = "3FE-iIB=^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    str_0 = "Uu"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    dict_1 = {}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    float_0 = -2022.758
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    float_0 = 1267.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    str_0 = "z_A*I+;Y5[)WYTs%;6X4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_1, bool_1]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    float_0 = 123.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    complex_0 = -1638.55 - 573j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    none_type_0 = None
    float_0 = -3783.984471
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    str_0 = "7\t]U\rv[Q+~Dat"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    bytes_0 = b"\xf6\x1b*I\x97^\x0e\xfa\xa7\x11U\xd2A\x00F\xec\xfb\x82\xfb\xc2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    str_0 = "FH, 2gHw6WKgj]aL^PA}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_1: bool_0}
    bytes_0 = b"\xe5"
    tuple_0 = (dict_0, bytes_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    bytes_0 = b"W\x1d\xb6/\x0f\xfd\x06NF\x18\x7f\xd4\xba\x18/\xb0\x85i"
    tuple_0 = (bytes_0, bytes_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    float_0 = -1343.3506
    module_0.get_new_command(float_0, float_0)


def test_case_1073():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1074():
    str_0 = "/H5i 4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    dict_0 = {}
    int_0 = 11
    tuple_0 = (dict_0, int_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    bool_0 = False
    int_0 = -2582
    str_0 = "ar_'FK?Vz+dw`*9-"
    tuple_0 = (bool_0, int_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    float_0 = 753.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    str_0 = "7jC&Z5MlLjV U{#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    float_0 = -3174.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    int_0 = 4371
    module_0.get_new_command(int_0, int_0)


def test_case_1085():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1086():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    list_0 = [set_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    float_0 = -1095.96
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    complex_0 = -1097.9747 - 1189.655j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    set_1 = {complex_0}
    module_0.get_new_command(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    bytes_0 = b"C\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    bytes_0 = b"\xaf\xc6\x9d&\x02\x9f\xc8\xe9&QP\x07+\x04/S\xc1X"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    bytes_0 = b"\x08\xfe[\xb0\x87ix\x8b\xc8\x10\xa1MFS\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    str_0 = "x4Z~>\r%(Y"
    list_0 = [str_0, str_0, str_0]
    dict_0 = {}
    tuple_0 = (list_0, dict_0)
    bytes_0 = b"\x87\xd2\x81~i\x0f\xaco\xe7\xaa\xd1\x15\x02\xa4Z~\xe2\xec\xb5\xb1"
    tuple_1 = (tuple_0, str_0, bytes_0)
    tuple_2 = (tuple_1, list_0, tuple_1)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    float_0 = -3027.785771
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "E"
    tuple_0 = (bool_0, list_0, str_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    float_0 = -1227.56229
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    str_0 = "Hf,ge+eN=k###5^s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    bytes_0 = b""
    int_0 = 2270
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    bytes_0 = b"c6\x1f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    str_0 = "*&5LX!Jy[M)$\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    str_0 = 'iXZ7y7m\rRv`%"1'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    str_0 = "!p<]b"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    str_0 = "Cvz{*r=\nwCX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    str_0 = "L\nt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    set_0 = set()
    list_0 = []
    int_0 = -2294
    tuple_0 = (set_0, set_0, list_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    int_0 = -1099
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    bool_0 = False
    float_0 = 15.0
    list_0 = [bool_0, bool_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    int_0 = -1121
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bool_0 = True
    bytes_0 = b"\xe4\xe4\x84\xc7\x02\x8c\xd6\xd2\x8eb\xcb"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    bytes_0 = b"\xb4\xf3\x8b\x00\xd3\xc8p\xca\x0eg\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    str_0 = "TIsQuyd}-Sak>'<"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    str_0 = ",4%K4VT\x0c>qDs$$t\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    float_0 = -1785.6608
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    bytes_0 = b";\xf3.\x98\x15z\xa8\xd1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    int_0 = 2595
    list_0 = [int_0]
    list_1 = [list_0, int_0, int_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    complex_0 = 2785.82356 - 1330.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    int_0 = 318
    dict_0 = {int_0: int_0, int_0: int_0}
    bytes_0 = b"\\\x11\xbdSsJ\x04\xb7\x97e\xc42\x9f\xb4"
    list_0 = [int_0, bytes_0, dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    set_0 = {bool_1}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    bytes_0 = b"\xd4\x93iJ\x87\xe5\x0ba\xe8\x1a\x1c7|i|"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    str_0 = "YXvhz</&)7I"
    str_1 = "+3~\r$4,@\t&3i5"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_1.object(**dict_0)


def test_case_1124():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1125():
    str_0 = "fGA-T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    int_0 = -1269
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    float_0 = 575.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_1128():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1129():
    str_0 = "jE\\\x0b]5ei~Fn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    bool_0 = False
    str_0 = "?yH,"
    set_0 = {bool_0, bool_0, str_0}
    list_0 = [set_0, set_0, str_0, set_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    float_0 = -2645.605
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    float_0 = -778.81
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "M \\2Z%z:kzzU.6$Voue"
    str_1 = "mF\rv%\nV"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    str_0 = "X)AJ#+>ZQ\x0cFSOl%q-W"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    str_0 = "'\n<*{NGSZ]MQ\x0cN@"
    module_0.match(str_0, str_0)


def test_case_1137():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1138():
    int_0 = 541
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = 2018
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    int_0 = 2173
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    bytes_0 = b"\x8a\xf6\x8a\xf9+\xd0/\xf5\x9a0"
    list_0 = [bytes_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    str_0 = "M[WF$Lh1pB!v6_x4o"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    int_0 = 1872
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    str_0 = "H)DX73}~Z-uEkPy}4#*u"
    str_1 = "sQq}y"
    int_0 = -647
    dict_0 = {str_1: str_0, int_0: str_1, str_0: str_0, str_0: str_1}
    str_2 = "HUki@):W$8ds\x0c"
    dict_1 = {str_0: str_0, str_1: dict_0, str_2: str_0, str_2: int_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    int_0 = -1533
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    str_0 = ",+@,l\\H\\%c\r\x0cWrn"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    float_0 = 2650.04822
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    int_0 = -3423
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    str_0 = "&rubza`Ho=g:78`"
    str_1 = "w<^ld}54"
    bool_0 = False
    tuple_0 = (str_1, bool_0)
    set_0 = {tuple_0, tuple_0, bool_0}
    tuple_1 = (str_0, tuple_0, set_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    int_0 = 613
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    float_0 = -2311.7773
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: float_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    bytes_0 = b"\xbdh\xa0I\xa2b\x9fr\x93q7\x0eo\x8b\x1f\xd5Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    int_0 = -5392
    bool_0 = False
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    bytes_0 = b"+"
    str_0 = "'e42\n:\x0cS"
    tuple_0 = (bytes_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    float_0 = 502.32678
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    str_0 = "8[\x0c]c.Ie(uAH{:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    int_0 = -665
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    float_0 = 1451.65235
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    bytes_0 = b"SE\xfcX\x13\x0b|\x85P\xae\x06"
    str_0 = "m/bgFz}("
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    int_0 = -234
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    str_0 = "h[q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    float_0 = 92.86
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    bytes_0 = b"\xc8\xe1R"
    dict_0 = {bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    int_0 = -817
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    str_0 = "OdEr,Nj*m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    str_0 = "C},P/SD"
    float_0 = 2735.2
    tuple_0 = (str_0, float_0)
    module_0.match(tuple_0, float_0)


def test_case_1176():
    pass


def test_case_1177():
    pass


def test_case_1178():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1179():
    int_0 = 57
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    bytes_0 = b"!\x8f2%\x11\x10\xfe\xd3\xf8\xb2\xa2;\x90T\xcc\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    float_0 = -11.739649
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    str_0 = "I+2G62EU"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    float_0 = 3519.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    int_0 = -3179
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    float_0 = 667.341
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    complex_0 = 48.1958 - 366.78j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    int_0 = -1772
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    int_0 = -438
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    bytes_0 = b"@;\xf1cO\t\xbb\x83,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bytes_0 = b"\xf3\xb7%[V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    float_0 = 1249.94
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    object_0 = module_1.object()
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    complex_0 = -2118.38895 + 301.365606j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    str_0 = "PC@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1200():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1201():
    int_0 = 1656
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    object_0 = module_1.object()
    bool_0 = False
    list_0 = []
    tuple_0 = (object_0, bool_0, list_0, bool_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    int_0 = 640
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    int_0 = 152
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    int_0 = 3994
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    str_0 = "$z"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    float_0 = -603.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    bytes_0 = b"F"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    bytes_0 = b"\\Z\x81\xcf\x8f\x8b\xdc]\xc2\xd4\x90\xe5t\xbbW\x037c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    str_0 = "kp\nd2QFXh\\"
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    complex_0 = -1415.1 + 191.152564j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    str_0 = "9D)0\rZgdS]^J0j"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    bytes_0 = b"k\x93\xdbXF\x04\x08H\xb4t,\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    bytes_0 = b"\xa9sA\xa8\x93\xd4\xaa\r\xc8N"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    str_0 = "1uLrg\tdA_rKp1DZG{F9J"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    str_0 = 'j"4qc@),K<3Wz^.I>l\x0b\\'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    str_0 = "v^r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    str_0 = "An"
    complex_0 = 760.029 + 1170j
    set_0 = {str_0, str_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    int_0 = -776
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0, dict_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    float_0 = -1831.832
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    bytes_0 = b"\xa8\xa9z\x9a\xd3\xe8x\xa4[\x81"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    bytes_0 = b"\xc3\x9d!\xdf\x990\xf3\xc4\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    int_0 = -3037
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    str_0 = "\tK/AS+ef3Oc:=$Wlb]s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    str_0 = "PH&co{YnvTLY/d}"
    str_1 = "gf,/"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bytes_0 = b'*\x01\xd4\xa8k:\x85\xf2\xfa\xfd\x9e\xb8\xce"\x11\x1eA\xa7'
    int_0 = -1160
    tuple_0 = (bytes_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    bytes_0 = b"\xc6\x06\xe6\x1dcH\xedm\x9d3\xa2w2\xf3\xdb\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    bytes_0 = b"0\xd7\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bytes_0 = b"\xdf\x1d\xd4\xc2\xc8\xc2\x03"
    list_0 = [bytes_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    int_0 = 1601
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    float_0 = 394.8318
    str_0 = "_h$N;rgp`9PhlY"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    int_0 = 2435
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    bytes_0 = b"\x1b\x80r\xb1\xf5"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b"\x15\xf5,/\xc8\xd7\\\xbdg"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    int_0 = -631
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    bytes_0 = b"\xa7\x89\x0e\xa4\x035FJ\xf6\xe6\xfe\xa1\x1f\x86\x84"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    bytes_0 = b"\xe9\xa7_|;V\t#\xb9\xd5\xae\x1a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bool_0 = True
    complex_0 = -2287 - 621j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    int_0 = 992
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    none_type_0 = None
    int_0 = 3055
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    str_0 = "j%W!2boQABXe !N"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    complex_0 = 1789.03 + 1092.95129j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_1252():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1253():
    bytes_0 = b"\xd9\x17"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    str_0 = "=D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    float_0 = -4481.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    int_0 = -483
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    str_0 = "8/\x0cGgKu\x0bA=\rl8.SO.TA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bool_0 = False
    str_0 = "[u3P"
    module_0.get_new_command(bool_0, str_0)


def test_case_1261():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1262():
    float_0 = 87.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    bytes_0 = b"\xbe\x80\xb1\x80-~wp\x8e\xf7\xb5\xd2Q\x8f\xe8f&"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    str_0 = "Dd1GxH=;xBeiD.="
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    bytes_0 = b"5\x15\xbc-\x91\x8er"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    int_0 = -981
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    bool_0 = False
    dict_0 = {}
    module_0.match(bool_0, dict_0)


def test_case_1268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1269():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    bytes_0 = b"\x891\xab\xeb\x18\xc4\x96\x9f\x8be\x93\xc6\xb5}w"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    float_0 = 3050.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    bytes_0 = b"\xe2\xcb_\xd1M\xd0\xb1\xb5\xd0\x14\x9f\xa15\xcc\x89\x93\t "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    str_0 = "aiS\t~]TWNXWt9y\r/2(X\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    float_0 = -3608.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bytes_0 = b"\xe1\x04\x03c\x88D\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bytes_0 = b"\xc2\xa4\xa2\xe9\xb0x\xd3-\x1a\xab\xd9\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1278():
    pass


def test_case_1279():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1280():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    bytes_0 = b'\xb5\xa3R\xf7\xd5\xac\xf7"\xc3\x15\xfbVG'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    int_0 = 2264
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    object_0 = module_1.object()
    tuple_0 = (object_0, object_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    int_0 = -3597
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    bytes_0 = b"\x02<\x81j"
    bool_0 = True
    int_0 = -1626
    tuple_0 = (bytes_0, bytes_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    bytes_0 = b"$\xcc\xd9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    int_0 = -2480
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    str_0 = "\nMq/?$l2K<>Y:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    int_0 = -531
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    complex_0 = -2966.0568 - 865.73438j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    str_0 = "$\x0bY!H22a^kw"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    int_0 = -1360
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    int_0 = -1179
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    bool_0 = False
    bytes_0 = b""
    tuple_0 = (bool_0, bool_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    complex_0 = -2235.925196 - 141.614j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    float_0 = 1685.187153
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (bool_0,)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    float_0 = 1216.178
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    str_0 = "2aZU[8#lL+SB]Tq1_&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    int_0 = -802
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    float_0 = 1445.39615
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    int_0 = 2412
    str_0 = "W>7\\:U\\;MQBZ=<,"
    str_1 = "M"
    dict_0 = {str_0: int_0, str_1: str_0, str_0: str_1}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bytes_0 = b"`\xcaY\x93\xe0"
    tuple_0 = ()
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    int_0 = 6312
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1311():
    pass


def test_case_1312():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1313():
    int_0 = 3159
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    list_0 = [set_0, tuple_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1315():
    float_0 = -2094.086816
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    bytes_0 = b"\x7f\x8bB\xb0\x98\x104\xc2\xae\xb6\x12\x1b\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    int_0 = 4563
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1318():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1319():
    float_0 = -3416.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "*JL\n{yg"
    dict_0 = {}
    str_1 = "<]$\r\t\x0c:EGl)\tN,pM3"
    dict_1 = {str_0: none_type_0, str_0: dict_0, str_1: dict_0}
    module_1.object(*list_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    bytes_0 = b"\x8f\x14\x94\xdc\xce\xd3-\xb7\xc2\x80\x12\x99S\xa3\x81|\xe3u\x1b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    int_0 = 1013
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    float_0 = -1307.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    float_0 = -4191.32241
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    str_0 = "MbjF\t`7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    int_0 = -306
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    complex_0 = -340.474666 - 2508.9936j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.get_new_command(dict_0, object_0)


def test_case_1330():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1331():
    int_0 = -414
    tuple_0 = (int_0,)
    list_0 = [tuple_0]
    tuple_1 = (tuple_0, list_0, tuple_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    bytes_0 = b"AC\x91\x82\xd2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    int_0 = 2941
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    str_0 = ".[x$\\|moiw[Q[J\rlxn"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    int_0 = -1931
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    int_0 = 674
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    str_0 = "20\tc6S4Y k'^iT"
    module_0.match(str_0, str_0)


def test_case_1339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1340():
    int_0 = -991
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    int_0 = -108
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    bytes_0 = b"\xc1n+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    int_0 = -225
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    int_0 = 2081
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bytes_0 = b"\x8e\xf2\xa1\x02q\xaa/"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    float_0 = -1016.58
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    int_0 = 2559
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    bytes_0 = b"H0\xb5\x89\x14\x1cm7\x05\xbd\xaaV\\\xbe\x99C\xd4\x13"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1352():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1353():
    str_0 = "~-t\x0cB\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    none_type_0 = None
    bytes_0 = b"a%Q\x1aB\x14\xcfL\xdaGC/\xbc%\xbajbd"
    module_1.object(*none_type_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    int_0 = -980
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [int_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    bytes_0 = b"\xcf\xa8\x0f4o\xbc\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bytes_0 = b"M\x0b\xed*h\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    str_0 = "@r -o$?$t"
    set_0 = {str_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    int_0 = 2069
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    bytes_0 = b"\xd8N\x07h5|&\x0c\xbb\\\xb55,"
    str_0 = "hUMELR"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    int_0 = 3512
    dict_0 = {}
    dict_1 = {int_0: int_0, int_0: int_0, int_0: dict_0}
    module_0.get_new_command(dict_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    tuple_0 = ()
    tuple_1 = (object_0, tuple_0)
    module_1.object(**tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    int_0 = 356
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    float_0 = 54.160317
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0, bool_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bytes_0 = b"\xdb\xa8!\x88\xfc668\x00I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bytes_0 = b"ik\xe5jC\xa7\xcd\xd0i;\xcd\xccE\xb8\x84"
    float_0 = 46.4958
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0,)
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    bytes_0 = b"\xbdB\xbb\x82\x96;>\x8b\xed]E\xbc"
    module_0.match(bytes_0, bytes_0)


def test_case_1374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1375():
    bytes_0 = b"$\xdb\xac\x82V\x92\x15A3\x1d\x84\xdd\xa16\x19\xac\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    int_0 = 1920
    list_0 = [dict_0, bool_0]
    tuple_0 = (dict_0, int_0, list_0, int_0)
    module_0.match(bool_0, tuple_0)


def test_case_1377():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1378():
    str_0 = "O4&hsVf?/\n.>Q6V4'Z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1379():
    pass


def test_case_1380():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1381():
    bytes_0 = b"\x93\xd2\x864\x84vX\x18\xf5F\x10\xca\xa5"
    list_0 = []
    module_1.object(*list_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    none_type_0 = None
    int_0 = -1437
    tuple_0 = (int_0, none_type_0)
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        tuple_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    str_0 = "{yGXf?VOnb_cM[xUE`Ta"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    str_0 = "TA?58'T0>Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    bytes_0 = b"Qo\xe0t\x12\xd2\x1b#_a\x80T\xe2\xd9\x7f"
    str_0 = "'F|fI<{_\x0c1RG"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    none_type_0 = None
    bytes_0 = b"\x98\xd6\x07\x8e\xf5\xfa\x05\xb1Z\xfc{\xcc\x16@K\xcd5"
    set_0 = {none_type_0, none_type_0, none_type_0, bytes_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    str_0 = "b6fz\x0b\x0cm`dPKBL'XF:vF0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    complex_0 = 1863.4 - 2225.09946j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    int_0 = -517
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    float_0 = 2687.4581
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    int_0 = 1856
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    bytes_0 = b"j@\xfa\xc3\x18a\x8bZ\n\xae\xcd7\xf5\x92p"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    complex_0 = 2035 - 2056.855473j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    bytes_0 = b"\xc9v\xf7\x84\xeb\xdc\xe0\xd4\x18\xa5\x96p\xe1\x04\xc5\x1f\x8e\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    bytes_0 = b"'\xe4C#\x1e\xa1\x88\\\xc6="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    float_0 = -1011.10595
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    int_0 = 1804
    module_0.get_new_command(int_0, int_0)


def test_case_1400():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1401():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    set_0 = set()
    none_type_0 = None
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    int_0 = -2749
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    bytes_0 = b"\xd2\r,\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    float_0 = 2189.88065
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    int_0 = -3053
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bool_0 = False
    bytes_0 = b"\x88\xb4\x91\x1b\xde"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    str_0 = "FkHt1m(=*m=i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    int_0 = 618
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    bytes_0 = b"zU\x8d3A\xdb\xd8x\xc6\n\xfa\x19\xa57"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    int_0 = 2057
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    bool_0 = False
    int_0 = 3619
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    float_0 = 743.29885
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    complex_0 = 3562.735 + 1635.264938j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    int_0 = 388
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    str_0 = "aj6UN|&99}F\t~4 :]H"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


def test_case_1418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1419():
    str_0 = "W:U233;Z7L~k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    bytes_0 = b"\xce\xe0\xed\x94$\x13p\xe9>QH\x90R]\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    str_0 = "tBP5S,U#`'f\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    float_0 = -1358.104058
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    dict_0 = {}
    int_0 = -57
    list_0 = [dict_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    float_0 = -1160.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    complex_0 = -311.29 - 1537.197607j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    bool_0 = True
    bytes_0 = b"\xeb\x0e\x12\xd3\x87\x92\x91\x06\xa7\x06Z"
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    str_0 = 'PeMP1br1G"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    int_0 = 356
    list_0 = [int_0]
    tuple_0 = (int_0, list_0, list_0)
    float_0 = -1436.0
    list_1 = [tuple_0, float_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    str_0 = "*<bqx*dK"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    str_0 = "UGKzda_B-4"
    none_type_0 = None
    str_1 = "uy}"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    str_0 = "A#\\X\\ohf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    bytes_0 = b"\xeb\x90@\x85&\xde"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bytes_0 = b"N\xdeI\xd8\x1b2\xdf\x15\xa28\xfaS\xf8\xd5\x04F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    str_0 = ":07~('\x0by"
    float_0 = -3950.91
    list_0 = [str_0, str_0, float_0, str_0]
    int_0 = 629
    tuple_0 = (str_0, list_0, str_0, int_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    str_0 = "r\x0c~re?'!ESp3H"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    str_0 = "QU y)upu7d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bytes_0 = b":"
    list_0 = [bytes_0]
    tuple_0 = (list_0, list_0, bytes_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    bytes_0 = b"\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    bytes_0 = b"\x07M"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    str_0 = ""
    str_1 = "\t^$`R\niQopsE"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    int_0 = 1217
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    int_0 = -2578
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    str_0 = "\r>x8H52u4y*3uE2Gh\n|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bytes_0 = b"1\x18\xb6\x11G\xcc\xf7Oi;2S\x1d\x01y\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    int_0 = 3487
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    set_0 = set()
    bytes_0 = b"/"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    str_0 = ">"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    int_0 = 1054
    set_0 = set()
    list_0 = [int_0, set_0]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    bytes_0 = b"U6\xe3\x89bQOPM\xcdI\xef\xac#\xed\x11M\xf8\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    int_0 = 4171
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    bytes_0 = b"\xb5\x10\xcb\xc4\xc6ni"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    float_0 = 2318.566732
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    int_0 = 139
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    bool_1 = True
    list_0 = [bool_1, bool_0]
    tuple_1 = (tuple_0, bool_1, list_0)
    list_1 = [tuple_1, tuple_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    float_0 = 1109.3882
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    complex_0 = 1801.12013 + 444j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    float_0 = -1822.23969
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    int_0 = 915
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bytes_0 = b"\x82\xe6C\x93!\xceF"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    float_0 = -334.7
    set_0 = {float_0, float_0, float_0, float_0}
    list_0 = [set_0, float_0]
    int_0 = 169
    tuple_0 = (list_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    bytes_0 = b"\xdd\x82e\xcb\x80\xd1\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_1470():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1471():
    float_0 = -2258.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    complex_0 = 555.09 - 2639.19562j
    set_0 = {complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    none_type_0 = None
    str_0 = "5"
    tuple_0 = (str_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    int_0 = -1058
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    none_type_0 = None
    complex_0 = 624.074 + 347.01j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    int_0 = -1060
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    list_1 = [tuple_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bytes_0 = b"T0\x87\xfb\xcfk\xa7{\x1f\xe6\xfa\x0bw"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    float_0 = 1323.8868
    module_0.match(float_0, float_0)


def test_case_1480():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1481():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    bytes_0 = b"\xcdo\xc0\xa4+\xce\x17@\xc2\xa1\xd1\xbaH\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    int_0 = -2411
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    bytes_0 = b"\x1e\xd3\xecUR;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    set_0 = set()
    int_0 = 3054
    tuple_0 = (set_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    bool_0 = True
    bool_1 = True
    float_0 = 486.83
    tuple_0 = (bool_0, bool_1, float_0)
    list_0 = [tuple_0, bool_1]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1490():
    bytes_0 = b"\xdc\xf3\x9d$"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    complex_0 = 1953.042224 + 869.413j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    complex_0 = 2133 + 93.9113j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    bytes_0 = b"\xf1\xb4v\x19\xbd&\xccE\xe6"
    int_0 = 1257
    bytes_1 = b"[\x1c\xd1\xbeh\xfd\x12d\x02\xeb\x19\x12"
    tuple_0 = (bytes_0, int_0, bytes_1)
    dict_0 = {tuple_0: bytes_1, tuple_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bytes_0 = b"v\xa1\xa2"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


def test_case_1495():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bytes_0 = b"\xee%\n\n\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    int_0 = -549
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1498():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1499():
    str_0 = 'w7 )aI_AVJ{Rg0$"L0E'
    set_0 = set()
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    str_0 = "@#vD}s5\x0cfiCDW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    float_0 = 2522.01358
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    float_0 = -833.4892
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    bytes_0 = b"\xaau\xadY\xa4\xfb9q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    str_0 = "Mlz3{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    str_0 = '"~3|eoCKz\\'
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    int_0 = -72
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    bytes_0 = b"T\xa0 \xff\xf0B\x87\x92N\xb0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    str_0 = "zK_Rpz?qAl56y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    str_0 = "AdjD\nZ}MV["
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    int_0 = -674
    tuple_0 = (int_0,)
    set_0 = set()
    tuple_1 = (set_0,)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    int_0 = -63
    list_0 = [int_0]
    bytes_0 = b"\xa60\xa2a\xc0i("
    str_0 = 'v;E>"G;,4/n }'
    tuple_0 = ()
    tuple_1 = (list_0, bytes_0, str_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    float_0 = 1673.946
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_1517():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1518():
    int_0 = -213
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    str_0 = "QZW1\te)\n<fyv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_1]
    list_1 = [bool_0, bool_0, list_0, bool_0]
    module_0.get_new_command(list_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    str_0 = "\r\ri\x0ckXGRljL{At`aU7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    complex_0 = -1174.632 + 1124.21336j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    bytes_0 = b"\\\x17|"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    int_0 = -1945
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    int_0 = 1750
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    int_0 = -4725
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    bytes_0 = b"\n\x9b)81,\x81\x99\xb1\x83\x8c"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_1530():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1531():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    bytes_0 = b"'\x91\xb0\xd4\xd2\xa0\x04\xc2f\n\x05\xb6\xfa\xc6\x05\x86\x8cP\x13\xa0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    str_0 = "aSKnO"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    str_0 = "Byex&\t2(SCB"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    dict_0 = {}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    int_0 = 1112
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bytes_0 = b"W\x08"
    module_0.match(bytes_0, bytes_0)


def test_case_1540():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1541():
    tuple_0 = ()
    set_0 = {tuple_0}
    dict_0 = {}
    tuple_1 = (set_0, dict_0)
    module_0.get_new_command(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    float_0 = 2265.085225
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    str_0 = "$Nq S8R0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    str_0 = 'G!s3>Y!re&omL"0'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    str_0 = "9qPJ-X1MGcs//lNK)ze"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    int_0 = 2381
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    int_0 = -71
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    str_0 = "o"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    dict_0 = {}
    str_0 = ""
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    float_0 = -6641.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    bytes_0 = b"\t\x86\xa4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    float_0 = -257.13845
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    int_0 = -1651
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    str_0 = "'JPzR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    str_0 = "DsELq~2-\x0b\\9!J*+?|!~1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    bytes_0 = b"[zd\xdf\x1e\x82\xad\x08\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1560():
    bytes_0 = b"^\xca\x16\xad;\x9e\xde5O[\xde\x94\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    int_0 = -257
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    float_0 = -5028.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    bytes_0 = b"\xf1]\xe4\xf3$\xff\x01\xbbs_\x1b"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    str_0 = '\rSr9B7g"7 b% tLC"'
    tuple_0 = (list_0, str_0)
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    complex_0 = 2768.4 + 744j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    bytes_0 = b"/\xf6\xfb\x8fA\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    float_0 = -868.0
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    bytes_0 = b"\x05\xcb\x07\xb5\x17\xbb\xfc\x19!\xfc\x85\xa33t\xb3"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    float_0 = -2792.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    bytes_0 = b"\xff\x08\x13~\x86AU1s\x91\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    float_0 = 2287.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    str_0 = "z]z9g?,k\x0c$XA7pH)mvUg"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    bytes_0 = b"E\xe9\xb4\xc9T\x18\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    float_0 = -2416.89
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    float_0 = -1476.23
    module_0.get_new_command(float_0, float_0)


def test_case_1582():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1583():
    bytes_0 = b";Sg?-\x0c\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"\x12m\xbe\xbbuYH.\xb7yB\xed\xc3\xae\xe3\xc0"
    module_0.match(bytes_0, bytes_0)


def test_case_1585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1586():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    complex_0 = -1412.6 - 1799.50331j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    float_0 = -256.5527
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    int_0 = 2123
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    int_0 = 1932
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    float_0 = 144.8921
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    bytes_0 = b'fE@u,3\x99\x84\t"\xe5j\x15\xcb\xd0'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = "u\x0bxeR;E8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    str_0 = "/DuiPC$ly"
    set_0 = {str_0}
    float_0 = 1088.8124
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    int_0 = 0
    str_0 = "g?[)\rQdEs|A-"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    float_0 = -1066.2824
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    bytes_0 = b"K\xe5\xb9%Y.0\xf3"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    int_0 = -112
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    bytes_0 = b"\xe9\xb48\xd1h\xf4x"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    str_0 = "\\UW+)p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    float_0 = -3586.860668
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    dict_0 = {}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = 1886
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bytes_0 = b'\xd7\xaft\xea\xcavs\xfb\xc1\xc0\xce\xd8\xe5\x8d"\xa5N+A'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    str_0 = "C4XBK_:!o3b}"
    str_1 = "? PT@vr$q|OK5\x0bZ=A(V"
    str_2 = "/<cB;V~"
    bool_0 = False
    str_3 = "bJwp,U0"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: bool_0, str_3: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    str_0 = "^?ui+vg1.FqSeU|*>@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    int_0 = 411
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    str_0 = ".'7kajo\rT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    complex_0 = 1847.035331 - 3357.59j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    int_0 = 2455
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    float_0 = -161.594418
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bytes_0 = b"IO[*m\xd3\x10\xb1\xcbQ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    int_0 = -1534
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    float_0 = -3401.165362
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    str_0 = "(P\t1\nciYU|[qS|"
    bool_0 = False
    int_0 = 681
    tuple_0 = (bool_0, int_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    int_0 = 842
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    complex_0 = -1690.55396 + 1758.7213j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    bytes_0 = b"\xd4\x8eU\xcaEs\xc4\x02WG{)P\xcd\n\x98\xa5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    str_0 = "1Buk-L6GsFPk?:<Q?[e}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bytes_0 = b"\x87\x87\xb6]\x8d\x89ijq\xb4\xf9\xc5\xeb\x05/!\x0f\xa5\xb5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    str_0 = "'x\rWXhz8E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    float_0 = -1070.559874
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bytes_0 = b"\xa2\xc2]\x87%\xda\x99\xd6\xc57\xac4l\xf5\x88\xe7\xe8\tg\x05"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    bytes_0 = b"\\\x8en\xf8]\xee\x7fM.\r\xea\xba\xbc\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    complex_0 = 3085.4 + 518.460027j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    int_0 = -1745
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    str_0 = '\ne61Dm:eu"F\x0cf'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    int_0 = 306
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    bytes_0 = b"Z\xa9\xd2Iu\\\x9d<\xd7\xf6\x0f\xb6\x89\x1b"
    float_0 = 1066.477
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    str_0 = "?P^4e:5e"
    str_1 = ":mG^q!&[>s"
    str_2 = "(ouLd@"
    bool_0 = True
    tuple_0 = (str_1, str_2, str_0, bool_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    bytes_0 = b"3\xe2\xc5G`"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    bool_0 = True
    str_0 = "[9:r\\e[,tp!Gj&z~k|"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    float_0 = 1458.515404
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    str_0 = "+y#\rya!n.Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    str_0 = "\x0cR6DX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    float_0 = -1962.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    str_0 = "3XP%UfuxG<Tu\\i4Vr$BR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    bytes_0 = b"\x92=\x9d\x03/\xcfLO\xe1>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    str_0 = "]iK-+;<1XxdAev/s"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    object_0 = module_1.object()
    int_0 = 416
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    float_0 = -303.133
    module_0.match(float_0, float_0)


def test_case_1651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bytes_0 = b"\xf4\xeb\xd13^\x15\xe3\x80\xbc\xc9W\x87\xbfMr\xc5\x13\x7f\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    bool_0 = True
    bytes_0 = b"\x9c\xa2c\xd0\x9a\x12\xde\xb3#\xdf"
    str_0 = "q/y72*;G,I"
    tuple_0 = (bool_0, bytes_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    int_0 = 760
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    int_0 = 405
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    int_0 = -3087
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    int_0 = -2727
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (int_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    int_0 = -2601
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bytes_0 = b"\xa4\xc0\xd8&59\xbf\x0e/\xe8P\x13\xdfl\x81\xd5\x7f\t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bytes_0 = b"Z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    float_0 = -1777.178
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    int_0 = 506
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    int_0 = -3917
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    float_0 = -2642.03
    set_0 = {float_0, float_0, float_0}
    list_0 = [float_0, float_0, set_0]
    tuple_0 = (list_0, float_0, set_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    bytes_0 = b"T]\x0c\xd7\xfe\x10\\\x08\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1668():
    object_0 = module_1.object()


def test_case_1669():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1670():
    str_0 = '\t~"'
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    str_0 = ":*mOz7Q"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    int_0 = -2423
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    int_0 = -2846
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    str_0 = "%B#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    float_0 = -2833.4285
    str_0 = "s..F>UTjKP'Q"
    bool_0 = False
    tuple_0 = (float_0, str_0, bool_0)
    dict_0 = {tuple_0: float_0, tuple_0: bool_0}
    dict_1 = {}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    str_0 = 'GX"kbMdcbUi'
    set_0 = {str_0}
    tuple_0 = (str_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    float_0 = 2168.44332
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    int_0 = 2928
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    complex_0 = -733.73 + 929.737127j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, dict_0]
    tuple_0 = (dict_0, bool_0, list_0)
    module_0.match(tuple_0, dict_0)


def test_case_1686():
    object_0 = module_1.object()
    object_1 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1687():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    int_0 = -4179
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bytes_0 = b"p"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


def test_case_1690():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1691():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    list_0 = []
    str_0 = "]\x0cjS-/;k8"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    str_0 = "[-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    bytes_0 = b"XJ*\xba\xe7\xb1\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    float_0 = 3195.4056
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    int_0 = -698
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    int_0 = 4096
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    str_0 = "L#=>*D\n^>\\\\"
    float_0 = -2324.9671
    tuple_0 = (float_0,)
    list_0 = [str_0, str_0, tuple_0, float_0]
    list_1 = [list_0, float_0, float_0, tuple_0]
    module_0.get_new_command(str_0, list_1)


def test_case_1699():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1700():
    int_0 = -1002
    list_0 = [int_0, int_0, int_0]
    str_0 = "!|"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bytes_0 = b'"\x83\xac\x1d\xf6\x9cS\xeb\x02\x1a5\x89Q\xd76\x9e\xb8'
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    bytes_0 = b"k\x18\xc8\xe2\xaf\xa6(a'\x06\xa4=S\xc1W\x0cj2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    bool_0 = False
    str_0 = "d%"
    bytes_0 = b"\xf4\x1a\xc8PG\xe8"
    tuple_0 = (bool_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    float_0 = -3197.658
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    int_0 = 4328
    module_0.get_new_command(int_0, int_0)


def test_case_1706():
    pass


def test_case_1707():
    pass


def test_case_1708():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1709():
    str_0 = 'S3[y?pi)fuH"Mw'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    dict_0 = {}
    bytes_0 = b"\xd1\xc9x\xefC\xb2"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    bytes_0 = b"/&s\xd7\xb4 \xde\r\x8092\xf2\xa3$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    float_0 = -314.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    str_0 = "fC.oa"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    complex_0 = -763.79375 - 18.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    bytes_0 = b"&\xf5*j"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    int_0 = 1594
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    float_0 = -474.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    str_0 = "9an$r.;f"
    set_0 = {str_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (dict_0, dict_0)
    bool_0 = True
    list_0 = [tuple_1, dict_0, bool_0]
    module_1.object(*list_0)


def test_case_1721():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1722():
    str_0 = "Z,'cXB,fi&h2\r>]c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    bool_0 = False
    str_0 = "Ct_^/GQDF2#\x0c9\\U[DrE"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    bool_0 = False
    int_0 = 2342
    list_0 = [bool_0, bool_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_1726():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1727():
    str_0 = '"2'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    str_0 = "og,Q! !"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    str_0 = "&\x0b\x0bBY\x0cM"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1730():
    str_0 = "$CI2.G0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    int_0 = -1041
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bytes_0 = b""
    str_0 = "dHJz#tS8&CwoMd>fFg"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bytes_0 = b"\xd2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    none_type_0 = None
    bytes_0 = b"FF\x13,"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    int_0 = 294
    str_0 = "=Q<q%@\nPqk3G"
    dict_0 = {str_0: str_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    bytes_0 = b"\rz"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    int_0 = -108
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    str_0 = "Fa)#YZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    float_0 = -185.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    str_0 = "%Vuz3fUJy4J6"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    str_0 = "6%]oNcJ%;,Y"
    str_1 = "D@#d5Hg$y:KBMBxH"
    complex_0 = 224.41406 + 627.20981j
    dict_0 = {str_1: complex_0}
    tuple_0 = (complex_0, dict_0, dict_0, dict_0)
    dict_1 = {str_0: str_0, str_1: tuple_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    str_0 = "J=-GU=\\\r^m@`4oj"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    bytes_0 = b"\xd9w\x92\x94\xb5%\xed"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    float_0 = 491.27
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    str_0 = "|>\\Hu\tqtpc$a\x0bH(dn"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    str_0 = "%Fm6tC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    bytes_0 = b"d\x05 b\xd2\xd9\xf2\xff\x13\xbb"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    float_0 = -82.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    bytes_0 = b"\x8cd\xce\x87W\xa5\x03\xdf\xae"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    bytes_0 = b"n\x02\xce\x0b\xd8\xa48G\xa3v\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_1755():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1756():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


def test_case_1758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1759():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


def test_case_1760():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1761():
    int_0 = -2468
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    str_0 = "/{SwqV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    str_0 = "ynh~MM.j![\\1"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0, str_0]
    str_1 = "<Rxb{l|#9bqgP"
    module_0.match(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    float_0 = 741.6
    int_0 = -1716
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    int_0 = 906
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    str_0 = "j"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bytes_0 = b"\x03\xac3\xa4Z\x81!\xf8\xb4w\xc4:["
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_1768():
    pass


def test_case_1769():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1770():
    int_0 = 2302
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    bytes_0 = b"\x06p\xd7k\xd8\x1d\x84l3\x95L/\xca"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    float_0 = -178.235473
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    str_0 = "I_5"
    module_0.get_new_command(str_0, str_0)


def test_case_1774():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1775():
    str_0 = "j4h!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


def test_case_1777():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1778():
    float_0 = 806.778272
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    bytes_0 = b"\xaf\xd9\x91QaX\xf4\n\x9f\x18q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    complex_0 = -1152.88143 - 2677.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    str_0 = "UHw#|SN_ "
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0}
    tuple_0 = (str_0, dict_0)
    float_0 = 2891.332
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    tuple_0 = ()
    str_0 = "_+Y:~. Ixp(mT!"
    bool_0 = False
    dict_0 = {tuple_0: str_0, str_0: str_0, tuple_0: bool_0, bool_0: bool_0}
    tuple_1 = (dict_0,)
    complex_0 = -1551 - 1326.90205j
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    int_0 = 1773
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    str_0 = "q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, bool_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    float_0 = -1967.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_1787():
    pass


def test_case_1788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1789():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    float_0 = -759.93376
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    int_0 = 92
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    float_0 = -2561.195853
    int_0 = -2008
    dict_0 = {int_0: float_0, int_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_1: bool_1, bool_0: bool_1}
    str_0 = "~0"
    tuple_0 = (dict_0, str_0)
    list_0 = [bool_0, bool_0, bool_0, tuple_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_0, bool_1]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    int_0 = -2918
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    int_0 = -795
    module_0.match(int_0, int_0)


def test_case_1798():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1799():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bytes_0 = b"/\xb7N\xca"
    tuple_0 = (bool_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    str_0 = "L64jGF:@vaG:qI="
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    int_0 = 458
    bytes_0 = b"Jc\x07\xef$\xc0\x10\x12\xcd/\t\x1b\x03\xf2\xef"
    bytes_1 = b"a\xc9\x84\x06\xc6S\xc0\xbf9"
    dict_0 = {int_0: int_0, int_0: bytes_0, bytes_0: bytes_1}
    module_0.match(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    str_0 = "ST"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    tuple_0 = ()
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    str_0 = "\no31fTL@{ GR"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    bytes_0 = b"b\x86\xff\x87B;"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    str_0 = "Hk6pma1d"
    bool_0 = False
    int_0 = -1552
    str_1 = "S?/5,3 `rP&_\t\x0c"
    tuple_0 = (str_0, bool_0, int_0, str_1)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    bytes_0 = b"\xd2\xb0\x1f\xe2Y\xe4X9,\x93\x8e\x0e\x1f\xd1H"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1810():
    pass


def test_case_1811():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1812():
    int_0 = -5903
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    none_type_0 = None
    str_0 = " }H`qT^O8-R= 9!7ht"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    set_0 = set()
    bool_0 = False
    module_0.match(set_0, bool_0)


def test_case_1815():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    complex_0 = 745.61 - 1089.23698j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    bytes_0 = b"h\x0b\xaf.\x9d\xd201]\x99\xc5\x94\xf8\xc4&\x1c"
    bytes_1 = b"\xaf"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bytes_0 = b"\xaa1l\xe2\x8e\xe2\xb7\x83)V"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    int_0 = -671
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    bytes_0 = b"\xd9\xe5\xc1"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bytes_0 = b"\xd8t\xcf\xbcC/\xd2\xea5\xbaS\xba\xcd\x8f;\x96"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


def test_case_1824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1825():
    bytes_0 = b"q3\xfd\x17\x8c\x0e\x06"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    set_0 = set()
    int_0 = 458
    tuple_0 = (set_0, int_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    str_0 = " Uqa\x0ce"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    str_0 = "2u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    int_0 = 5266
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    complex_0 = -167.86 - 1484.760633j
    set_0 = {complex_0, complex_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    int_0 = -2416
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    str_0 = "'Bva2jAs9.T,j"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    int_0 = -3106
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    str_0 = "<ri8wSA,XnlaH5%E"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    bytes_0 = b"J\xa8\r\xbd\n\xf2m*"
    list_0 = []
    tuple_0 = (bytes_0, bytes_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    float_0 = 176.2371
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    str_0 = "GMHb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    int_0 = 2670
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    float_0 = 581.0
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    bytes_0 = b"\xbd\x89\xa8\xc7\xf9\xb2\xd9/\x83\x0f>\x80u\xfar"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1841():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1842():
    int_0 = -1320
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    bytes_0 = b""
    str_0 = "Zfuo\r"
    set_0 = {bytes_0, str_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    bytes_0 = b"\x9e\xbc\xb7\xf80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    bytes_0 = b"\x1e\xb0\xa9Wf\x0e\xf5\r,\xf7\xe0\xb1?\xdbH*\xceWC"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_1848():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1849():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    none_type_0 = None
    str_0 = "VH> \x0b>&Yx\tJ\t"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    str_0 = ";?k)MZCv,Oz72_!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    float_0 = 1616.06
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    float_0 = 2345.559864
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    bytes_0 = b"F\xbfQA'\x9ev\xe8\n\x13\xef?"
    module_0.match(bytes_0, bytes_0)


def test_case_1855():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1856():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    str_0 = "f/eCT|"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1858():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1859():
    complex_0 = -2643.7159 + 1060j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bytes_0 = b"L\xb1\x9a\x04)\xf0\xa5M\xf6w;\xa5\xa9\x9d\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    str_0 = "DSxTBPin},N\x0cx"
    bytes_0 = b"&\x93\x12\x8c.\x16\xa5"
    dict_0 = {str_0: str_0, str_0: bytes_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    float_0 = -2192.98754
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0]
    tuple_0 = (float_0, list_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    float_0 = -521.219
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    str_0 = "9wlLZ"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1865():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1866():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_1868():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1869():
    complex_0 = 2034.61 + 1549.2538j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    str_0 = "h:V;evC\tlvS3\n"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    float_0 = -441.454
    module_0.get_new_command(float_0, float_0)


def test_case_1872():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1873():
    bytes_0 = b"\x1c\x8b\xea\xc0U\xec?\x80\xbbr"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    str_0 = "guco5sm@\rX6e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    int_0 = -1446
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    bytes_0 = b"n\x85\x13]\x03z\xd1\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1879():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1880():
    str_0 = "N$w[NwS61/],"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    int_0 = -1277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    str_0 = 'es/ghHvpSb6}?"Du'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    int_0 = 1645
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    int_0 = 3815
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    int_0 = -1745
    bool_0 = True
    dict_0 = {int_0: bool_0, int_0: bool_0, bool_0: int_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    float_0 = 323.7272
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    str_0 = 'CSWAcI~"8/ Zm9IIiL'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    complex_0 = 170 - 1816j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    float_0 = -3122.519542
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    complex_0 = -458.088 - 3849.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    int_0 = 2022
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    int_0 = 1498
    dict_0 = {int_0: int_0}
    tuple_0 = ()
    int_1 = 2939
    tuple_1 = (int_0, dict_0, tuple_0, int_1)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    bytes_0 = b"\xe8\xb9}"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1896():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1897():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    str_0 = "%$v>%k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    float_0 = 2101.028
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    str_0 = "|_u$*I'@+P-\\w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    str_0 = "x"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    int_0 = 828
    bytes_0 = b"\x93fJTwkY\nM\x1e;{Y\xaf\xb5\xafKf"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    bytes_0 = b".\xf9\xecVf\xed\xb8\xd8\xd7\x97\x17\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    int_0 = -686
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    int_0 = -1939
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    set_0 = set()
    tuple_0 = (set_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = -1441
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    bytes_0 = b'"[.\xf8\x18\x17]\x13\xca\xd3'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    int_0 = -1399
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    bytes_0 = b"\xe4\x1c\x9d\x94\x14\x85\xf2\xcf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    int_0 = 428
    module_0.get_new_command(int_0, int_0)


def test_case_1915():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1916():
    complex_0 = -2008.5725 + 1844.2721j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    int_0 = 2461
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    str_0 = "J5h?[;&j6^sabjt?ART,"
    list_0 = [str_0, str_0, str_0, str_0]
    int_0 = -1858
    set_0 = {str_0, int_0, int_0}
    tuple_0 = (list_0, int_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    bytes_0 = b"\xf5y\xa2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    str_0 = "DZ"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    float_0 = -408.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    int_0 = -58
    bool_0 = True
    set_0 = {int_0, int_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    bytes_0 = b'"\x83b\xf7-\x9e\xaa\x9b\xb8\xc3;\xd5\x07+P\x1d'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    float_0 = 1824.007
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    complex_0 = -151.367 + 3321.66j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    int_0 = -490
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    float_0 = 858.35628
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    str_0 = "{lg'u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    int_0 = 1217
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    str_0 = "\x0cKZOE`YEXTETn7u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    str_0 = ")o2"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    int_0 = -3357
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    float_0 = 3967.45993
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    str_0 = "ZP~4XpNA<K5'e]4lHio"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    str_0 = "<iz\r[|t"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    dict_0 = {str_0: str_0, tuple_0: bool_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    str_0 = "umVpP9s;~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    float_0 = -4502.8
    str_0 = "-@1_,Ln)kt=nn-I2xa2"
    tuple_0 = (float_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    float_0 = 2591.756268
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    none_type_0 = None
    bool_0 = True
    tuple_0 = ()
    str_0 = "%`tgFote"
    tuple_1 = (bool_0, tuple_0, none_type_0, str_0)
    list_0 = [none_type_0, tuple_1]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    bytes_0 = b"@\xd4\xa6Z&\xe2\xb8Z\xc5\xdd\xcf\xd1\x02\xfa\x95\x10"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    str_0 = "cjw\r(~r\x0b$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    int_0 = 366
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    bool_0 = False
    float_0 = 2964.5588
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    str_0 = "79M*/tt2~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    tuple_0 = ()
    bool_0 = False
    bool_1 = False
    bool_2 = False
    dict_0 = {bool_0: bool_0, bool_1: tuple_0, bool_2: bool_0}
    tuple_1 = (bool_0, bool_0, bool_1, dict_0)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    str_0 = " )`hs\x0c"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    object_0 = module_1.object()
    str_0 = "-.ysG>\tVb1v\r[\x0c"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    int_0 = -1385
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    dict_1 = {}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    bytes_0 = b"\xfe"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    int_0 = 3700
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    bytes_0 = b"q\xfd\xf7\xd6R\xec"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_1959():
    pass


def test_case_1960():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1961():
    float_0 = -665.0
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    float_0 = -1611.362345
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    str_0 = "EbvN'oiK"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    float_0 = -1337.753
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    complex_0 = 1202.38 - 2935.116j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    tuple_0 = (set_0,)
    tuple_1 = (complex_0, complex_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    int_0 = 971
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    list_0 = []
    str_0 = "\rW!DWIXL0_az%>z\x0b"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    tuple_0 = ()
    object_0 = module_1.object()
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    int_0 = -3136
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    complex_0 = -1744.292525 + 897.91j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    float_0 = -5262.548627
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    str_0 = "%a+k"
    bool_0 = True
    list_0 = [str_0, bool_0, bool_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    bool_0 = True
    tuple_0 = (bool_0,)
    float_0 = 1434.798734
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    str_0 = "3G4&&\rl<n\x0cV\x0b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    int_0 = 4186
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    str_0 = "op"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    complex_0 = 216.208457 + 2509.985j
    list_0 = [complex_0]
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    str_0 = "ka\\y) V.@}|J}I\x0b<v2tO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    int_0 = -1567
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    int_0 = -846
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    float_0 = 3808.02
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    str_0 = "E+q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    int_0 = -7
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    complex_0 = 2143.9865 - 5073.3558j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    str_0 = "lwm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    bytes_0 = b"\x10\x86\x8d\xffm+\x96\x84p\x13\xaa\x1a\xc6\x1fc\xed"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


def test_case_1991():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1992():
    int_0 = 1420
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1994():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    int_0 = 72
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    int_0 = -2013
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    int_0 = 272
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    float_0 = -2272.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    bytes_0 = b"\xaf\x1f\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2000():
    bytes_0 = b"\x88\x11g\x81\xbe\xc3\x88\x92\x9d7\xcf\\\xd3^@\x1d\r/"
    set_0 = {bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    str_0 = 'nDe2"#\\ W=\tp-Z"s'
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    bytes_0 = b"\xebHR\xb3l"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    float_0 = -4250.170678
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    int_0 = 2448
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    bytes_0 = b"u\x02\xa0\x9cH\xca\xd2\xa8-\xd2wS<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    str_0 = "L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    bytes_0 = b"F(\xa7\x8en\xb9_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    int_0 = 997
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    complex_0 = -1554.0229 + 3073j
    module_0.match(complex_0, complex_0)


def test_case_2012():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2013():
    object_0 = module_1.object()
    str_0 = "akx@vjpD;y[=Wu]<l7nS"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    float_0 = 2929.847416
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bytes_0 = b"\xb7\xe9\x8bnU\xe9'\x02\\{,\xf5\x96Y\xac\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    bytes_0 = b"\xbfw"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    int_0 = -1626
    complex_0 = -1656 + 189.328599j
    module_0.get_new_command(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    int_0 = -121
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    float_0 = 2590.03
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    bytes_0 = b"=\xa0\x0c[\x89\xe1\xce\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    bytes_0 = b"D\xb8\xc6\xb1~\xd2\x9cq\xd9\xe9]\xe8\xd4\x99\xf2\xceqV\xed\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    float_0 = 531.288
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    none_type_0 = None
    str_0 = ""
    str_1 = "@6"
    str_2 = "L-6qraQD"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    int_0 = -751
    bool_0 = False
    tuple_0 = ()
    bool_1 = True
    tuple_1 = (tuple_0, bool_1)
    dict_0 = {bool_0: tuple_0, int_0: bool_0, tuple_0: int_0, bool_1: tuple_1}
    tuple_2 = (bool_0, bool_0, tuple_1, dict_0)
    tuple_3 = ()
    tuple_4 = (int_0, tuple_2, tuple_3)
    bytes_0 = b"\xf2\x86"
    tuple_5 = (int_0, tuple_4, int_0, bytes_0)
    module_0.get_new_command(tuple_5, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    str_0 = "~lI\t\rWdkbSQ\\}ev\n^<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    tuple_0 = ()
    object_0 = module_1.object()
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    float_0 = -67.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    complex_0 = -1074.73 + 3750.793045j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    float_0 = 3462.97328
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    bytes_0 = b"'k\x86\x1fZ\xe6\x85\xd0W\x9e\xba\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    complex_0 = -925.98874 - 890.24j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    str_0 = ')*"8,1#\tG([9kx'
    bool_0 = False
    list_0 = [bool_0]
    dict_0 = {str_0: str_0, str_0: list_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    float_0 = -596.72
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    float_0 = 3198.2844
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    str_0 = "dMt\nJ:g<=\rIJJp=aox!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bytes_0 = b"\x97rW\xec\xe7\xe7\xc4H\xef>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    int_0 = -2803
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    int_0 = -2386
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    bytes_0 = b"iwWH\x15\x94\xbe\xe8!\xc0)\xae\x90\xc5\x0b"
    str_0 = "\x0bLn\\3F\\c6,o3UI"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    str_0 = ")[pqOl,sL_pm"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    str_0 = "\x0cw{Rbrv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bytes_0 = b'8,VN"g\x01\xa4\xd4\xa4\xc8u'
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    int_0 = -235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    float_0 = -2072.655
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    bytes_0 = b"\xd8\xafc;\x81/{\x0e\xe6\xa7\x0c\xd9\x85qwEw"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    bytes_0 = b"\xf7L\xfe\x95\x9f\x9bTFN\xb7%\xd0M\x1d\xb5o\x03"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    bool_0 = True
    bytes_0 = b"\xf4\x17"
    bool_1 = True
    dict_0 = {bool_1: bool_1, bytes_0: bytes_0, bytes_0: bool_0}
    tuple_0 = (bytes_0, bool_1, dict_0, dict_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    float_0 = -2343.2213
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bytes_0 = b"+"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    int_0 = -1831
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(tuple_0, list_0)


def test_case_2062():
    pass


def test_case_2063():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2064():
    list_0 = []
    list_1 = [list_0]
    list_2 = [list_1]
    int_0 = 4187
    tuple_0 = (list_2, list_2, int_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, list_2)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    int_0 = -1468
    module_0.match(int_0, int_0)


def test_case_2066():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2067():
    bytes_0 = b"tTV\xaaw7\xd0+_\xe4\xa5\t\xd4\xe1\xd2(f\xbfs"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    set_0 = set()
    int_0 = -1744
    str_0 = "Oo"
    list_0 = []
    tuple_0 = (set_0, int_0, str_0, list_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    str_0 = "JD<-s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    float_0 = 2191.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    int_0 = 3152
    module_0.match(int_0, int_0)


def test_case_2074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2075():
    float_0 = 2353.97161
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    float_0 = -866.3028
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    int_0 = 87
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "Jf;IXx}UDHR3\x0c(6"
    str_1 = "=.]x>=rdcdhAqcB2"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


def test_case_2079():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2080():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_2081():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2082():
    tuple_0 = ()
    bytes_0 = b"\xe7\xe2\xb2\x05\xc2$\xff\x07\xcf"
    tuple_1 = (tuple_0, tuple_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    complex_0 = -4727.33 + 1390.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bytes_0 = b"\x9ct\x84\xa4\xd1\xa7\xd9C\xd7\xae\x10\x8f\xc8\x15BW'"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    int_0 = -1400
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    str_0 = ">%W@z \n`qYSo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    float_0 = -4038.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    str_0 = ";1RjQ^pwvT"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    bytes_0 = b"\x8cYRx\xd8\xd6\xef\xc8\x9f\xac\xe16%0\xb8E"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    int_0 = -2198
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    float_0 = 1876.0
    list_0 = [float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    str_0 = '\x0c\rW%.t6Ce!l \x0c)"_:'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    str_0 = "~u\x0cmlx9*2[Qu;H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    complex_0 = -1980.61529 - 3197.9907j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    int_0 = -3504
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    float_0 = -3865.620715
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    int_0 = -1939
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    bytes_0 = b"\xacV\xa9\x96s\x88-u\xdfTd5["
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    complex_0 = -165.998 - 2164.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    str_0 = "4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    str_0 = "ASp6~(_3JZ#u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    int_0 = -545
    module_0.get_new_command(int_0, int_0)


def test_case_2106():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2107():
    float_0 = 2521.824638
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    bytes_0 = b""
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    tuple_0 = ()
    object_0 = module_1.object()
    list_0 = [tuple_0, object_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    int_0 = -2012
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    float_0 = -1311.529
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    bytes_0 = b"UH\xd3\x1c\xa9\x19\xa3\xaezF\x07\x82"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    float_0 = -2323.34
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    int_0 = 285
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    complex_0 = -854 + 2264.052502j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    str_0 = "37T],o"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    complex_0 = 1966.559179 - 617.58748j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    bytes_0 = b"m6\xb0k!\xe6\xd6\x8b\xdc\x04"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    str_0 = "\np7?63`M$Q.#4"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    bytes_0 = b"\x04,\x8b\xb0\x1a\x96\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    int_0 = -2981
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    int_0 = -1269
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    int_0 = -508
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    int_0 = 275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    bytes_0 = b"<k\xbeH"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    float_0 = -1680.066
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    str_0 = "D$]526#z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    bytes_0 = b"\xbf\xfcs\xd3\xbb\xca\xc4\xa1\x06\xb6\x9c\xf1"
    list_0 = [bytes_0, bytes_0]
    str_0 = "t\x0b$:esxHKs><,4V \x0b\x0b"
    tuple_0 = (bytes_0, list_0, str_0)
    module_0.match(tuple_0, str_0)


def test_case_2130():
    pass


def test_case_2131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2132():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    int_0 = -2161
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    int_0 = 3381
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    complex_0 = -203 - 2819j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "<\x0bo{6_&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    int_0 = -2718
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    int_0 = 836
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    list_1 = [list_0, bool_0, list_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bytes_0 = b"\xa8\x0e4\xab\xe4\x8d\x07\x19U\xc1\xfc}:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    str_0 = "\\a<N\x0bVsQTx=<7*0MQX;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    object_0 = module_1.object()
    list_0 = [bool_0, object_0, tuple_0, object_0]
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    str_0 = "_$ra#y5i\x0bqdLm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    str_0 = "04C)UaJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    int_0 = 1356
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    float_0 = 162.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    str_0 = "W|`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    str_0 = "^N8X"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    bytes_0 = b"\xcf\xc4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    str_0 = "Ma"
    bytes_0 = b"A\xc9\x06"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    bool_0 = True
    bytes_0 = b"\xe9D\x07\x0f\xd7A0&\x93"
    module_0.match(bool_0, bytes_0)


def test_case_2157():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2158():
    int_0 = 4997
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    bytes_0 = b'\xf4\xed"A\xb6\xb1\xa5C\xc2\xe1\xd2F\xbe'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    float_0 = -1493.011
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    str_0 = ':G]\nk";'
    str_1 = "Ko678]0\x0c\rre4+2x"
    tuple_0 = (str_0, str_1)
    set_0 = {tuple_0, str_1}
    bytes_0 = b"\xea\x0bgU\xf8\x1e\x97\x03\x1e"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    int_0 = 3332
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    int_0 = -1820
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    bytes_0 = b"\xa1\xd3\xfb:][f\x07\x14\xe362%\xe6<6"
    str_0 = "8LGxz_\n\n62>,[\r"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    int_0 = -5264
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    bytes_0 = b"\xcd\xc3M\x873\x81\xcb\xf1\x13av}%i\xc3\xa0j\xb8|\xdd"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    int_0 = -992
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    bytes_0 = b"\xe9\xeaq=\xbb\x9f\xc5\x14s\xa9\xcd\x95\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    bytes_0 = b"\xbe\xd4l\x83\xc0\x8b "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    bytes_0 = b"\xa7\x95(\x97\xec\x05"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    float_0 = 716.8396
    module_0.get_new_command(float_0, float_0)


def test_case_2173():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2174():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    bytes_0 = b"\x0bqM\xf9'\x0f\xaeK\x05\xe9\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    str_0 = "vMS:tr\x0beWH}f5rMO-W\\"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    int_0 = 1149
    list_0 = [int_0]
    float_0 = 799.63
    tuple_0 = (int_0, list_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    int_0 = -183
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    int_0 = -1433
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    int_0 = -81
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    str_0 = "|{P2]&X'CZcd;?9h"
    bool_0 = True
    set_0 = {str_0, str_0, str_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    int_0 = -996
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    int_0 = -1163
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: int_0, int_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    float_0 = 1238.0
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    int_0 = -235
    bytes_0 = b"{\x82\xeb\xbdr\x9eE\xb6(\xe3\x1c"
    bytes_1 = b"w\x98!\xc2\xa6\xdbF\xc6"
    dict_0 = {int_0: bytes_0, int_0: int_0, int_0: bytes_1, bytes_1: bytes_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    str_0 = "1\r{NGv\\5\tO"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    str_0 = "**QsHEO,W}@\tx4>dNS"
    module_0.match(str_0, str_0)


def test_case_2188():
    pass


def test_case_2189():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    int_0 = -1241
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    str_0 = "}\x0b)O+PQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    int_0 = -2780
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    str_0 = "K$P\\n;,Xv7#JEAV3;\\qv"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    float_0 = -3709.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bytes_0 = b"\x96\xac\x19\xba\x9c\\\x1d\x15q\x06O\xa4.\xbd\xac3|g\xf0a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    int_0 = 1651
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    bool_0 = True
    complex_0 = 3522.633057 + 318.007j
    dict_0 = {bool_0: bool_0, complex_0: complex_0, bool_0: bool_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bytes_0 = b"\x92\xa353\r:\xa8\x06\xb6\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    bool_0 = False
    str_0 = "\\_(FS9mX>\\jpUKU^"
    dict_0 = {str_0: str_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    none_type_0 = None
    float_0 = -66.5864
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"p\xea\xa4?"
    module_0.get_new_command(list_0, bytes_0)


def test_case_2206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2207():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    bytes_0 = b"\xc6\xc1\x82\x0ee\xadp\xa2\x7f\x80\xe0\xcd\xce%\xfeSz\\)("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    float_0 = 67.1727
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    float_0 = -3593.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    bytes_0 = b"Fn>T\xb9-\xacJz\x85\xf8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    str_0 = "dE/zC!X3;CUWl-+m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    str_0 = "vCa%s;q@4g)G"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    str_0 = "{Q5ZtN<CAyFDo"
    module_0.get_new_command(str_0, str_0)


def test_case_2216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2217():
    int_0 = 633
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    str_0 = "0Zi0bd_,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    bytes_0 = b"\xfeN\xc8\x9fQ\xc7-"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    float_0 = 3431.206
    module_0.match(float_0, float_0)


def test_case_2221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2222():
    float_0 = -1033.958872
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    str_0 = 'JISc"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    str_0 = 'N+L(@L~#?FBp_\nL"Q'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    float_0 = -2665.833944
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2226():
    pass


def test_case_2227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2228():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    bytes_0 = b"\xf6n\xd7\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    bytes_0 = b"9\xce\x8e\xa2\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    float_0 = 381.13
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    str_0 = "OyEd<?R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    bytes_0 = b"f\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    int_0 = -1025
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    int_0 = 754
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    bytes_0 = b"Y\x94\xcf\xb9\xff\x0b\xe4G\xe1\xa4o\xd4\xf4\x1e\x8fj9\xa3\x19"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    str_0 = "XGRV0`"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    int_0 = 2806
    module_0.get_new_command(int_0, int_0)


def test_case_2240():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2241():
    str_0 = "{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    complex_0 = 3078 - 1842j
    bool_0 = True
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        bool_0: bool_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    int_0 = -673
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    int_0 = -1244
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    float_0 = 629.4213
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    str_0 = 'S@"cVcS\'"kuw#'
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    list_0 = []
    bool_0 = False
    str_0 = ""
    tuple_0 = (list_0, bool_0, str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    bytes_0 = b"\xca\xd2\xd3J\x99\xe4\x9d\xbb:\xb2\x01\xe1"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    str_0 = "RddBG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    bytes_0 = b"\x92\xaf\x98\xb9h\xa8\x90\xb1j\x9f?\xe4 \x9b\x9d\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    bytes_0 = b"fy\xea]\xa8\xa0\xe8\x7f\xe7<\x91\x98\\\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    float_0 = -465.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    int_0 = -119
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    str_0 = "94xJ9?NJfsF"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    bool_0 = False
    list_0 = [bool_0]
    float_0 = -1077.233
    list_1 = [list_0, list_0, list_0, float_0]
    module_0.get_new_command(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    str_0 = "?jvQO6,r@JXCTZZx{#ZR"
    complex_0 = 1741.156 + 153.5j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    str_0 = "G3yp?&}=)<}c)\x0c"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    int_0 = 974
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    bytes_0 = b"\x16]Z\x02\xa1\x1c\xbd}\x95\xee\xacP\xbe\x0f\xc1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    int_0 = 2373
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    str_0 = "H"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    int_0 = -888
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    str_0 = "d\r/P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    bytes_0 = b"/\xf8e\xc8s"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    bytes_0 = b"\x02\x93\xde;+0\n\x1f"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    bytes_0 = b"+\xba2\x1b\x1a3?\x03.\xa2R\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    object_0 = module_1.object()
    list_0 = [object_0]
    bytes_0 = b"\x9f\xc8h"
    str_0 = ".WRM) ;n zy"
    tuple_0 = (list_0, bytes_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    int_0 = -1894
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    str_0 = " MEy]\n#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    str_0 = "veL\x0c\t_\t*\n9f:dy"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "rz)</>!KlX$EAjs)ng"
    int_0 = -3532
    str_1 = "i:J'#22e\x0b"
    bytes_0 = b'"\x1c\x18!\xe9\xd3G\x86E:M'
    dict_0 = {str_0: int_0, str_1: str_0, str_1: bytes_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    int_0 = 532
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    int_0 = 3807
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    str_0 = '>"4H8'
    list_0 = [str_0, str_0, str_0]
    float_0 = -137.367
    tuple_0 = (list_0, float_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    str_0 = "va"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    str_0 = ""
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    str_0 = "j*'HV*0%fH;*&x^:%ug"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, str_0)


def test_case_2286():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2287():
    bytes_0 = b"\x12\x0bE\xaf\xe1"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bool_0, bool_0: bool_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    bytes_0 = b"\n\xa9\x87f\xbb\x82uOx"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    tuple_0 = ()
    bytes_0 = b""
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    int_0 = -4149
    list_0 = [int_0]
    str_0 = "?y-a{UfJ"
    dict_0 = {str_0: str_0, str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    float_0 = 1499.95963
    int_0 = -1855
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    int_0 = -3371
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    str_0 = "oq28[:^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    int_0 = 1549
    str_0 = 'r)3-mEM!d^)z\x0c"U'
    tuple_0 = (dict_0, int_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    str_0 = '"P`u/i ^0N+VB\nOLWWs'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    tuple_0 = ()
    bytes_0 = b"\xf5\xa3\x9b\xd02\xad\xf7\x92\xdf"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    bytes_0 = b"\xc7\x12\xba\x8dA\xdcb6<\xf1"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    int_0 = -1654
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    int_0 = -398
    str_0 = "Eq0)$%\t:MG\t.&2u"
    tuple_0 = (int_0, int_0, int_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    int_0 = 3625
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    int_0 = 2797
    bytes_0 = b"\x93\x9e\xdf\x1c\x18\x8d"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    int_0 = 1268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    str_0 = "R\t{qAO23"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_2307():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2308():
    none_type_0 = None
    bytes_0 = b""
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    float_0 = -535.99
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    int_0 = 2950
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    float_0 = 802.0541
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    bytes_0 = b"U\xe41\x1a\xd3\xcc\x8a5!/\xb2S`3\x9d"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_2314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2315():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    float_0 = 537.0
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bytes_0 = b"`\x99\x12"
    list_0 = [bytes_0, bytes_0]
    bool_0 = False
    bool_1 = True
    tuple_0 = (list_0, bool_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    float_0 = 210.38
    module_0.match(float_0, float_0)


def test_case_2319():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2320():
    int_0 = -657
    set_0 = {int_0, int_0, int_0, int_0}
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    str_0 = "T\r<!]4RG>L9_"
    str_1 = '"nB\x0c{-cqp'
    complex_0 = -2038.2028 + 4312.88092j
    set_0 = {str_0, str_1, complex_0, str_1}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    complex_0 = 241 + 445.212974j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    bool_0 = True
    str_0 = "!G"
    dict_0 = {bool_0: bool_0, bool_0: str_0, bool_0: str_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


def test_case_2325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2326():
    bytes_0 = b"\xe7\x98\x1d\xab\xb0O\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    complex_0 = 2431 + 422j
    tuple_0 = (complex_0,)
    tuple_1 = (tuple_0,)
    complex_1 = -878.9 + 1663.37916j
    tuple_2 = (tuple_1, tuple_0, complex_1)
    list_0 = [tuple_2, tuple_0]
    module_0.get_new_command(list_0, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    float_0 = -1544.6
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    int_0 = 1649
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    int_0 = -417
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    str_0 = "IP-~~PSH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    str_0 = " N\r!Zg#(S5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    float_0 = 524.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    int_0 = 2071
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    int_0 = -983
    module_0.get_new_command(int_0, int_0)


def test_case_2340():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2341():
    str_0 = "%\x0bbw<<\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    bytes_0 = b"\xdaY\xdb\xdd\xd4n\x11\x07\x1e\xce\xfbS\x84y\xe1`\xfdy2\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    str_0 = "N"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    complex_0 = 1361 - 1630.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    dict_0 = {}
    list_0 = []
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    complex_0 = 761.44897 - 502.91102j
    str_0 = "u_w3alQPR4YO$4"
    dict_0 = {str_0: complex_0}
    tuple_0 = (complex_0, str_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_2348():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2349():
    bytes_0 = b"s\xf5y\xa6r\xd7\xda\x8b\x03\xc5\xd7\xc1\xc9!\xf9\x7fG\xf6\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    str_0 = ""
    set_0 = {str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    bytes_0 = b"\xef"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = False
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    str_0 = "l{dp&]SA1EhuS %9|$<c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    complex_0 = 59.5 - 1874.25201j
    tuple_0 = (complex_0,)
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    int_0 = -1559
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    str_0 = "kp\t;k1/^8(vLD'7h\\bl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    bytes_0 = b"\xe0L\xbad"
    module_0.match(bytes_0, bytes_0)


def test_case_2360():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2361():
    float_0 = -5274.0
    tuple_0 = (float_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    int_0 = 1645
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    int_0 = -205
    str_0 = ",apgfTYRSR]-^\x0b'u${&"
    dict_0 = {str_0: str_0, int_0: str_0}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    tuple_1 = (int_0, str_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    str_0 = "5l%0z-$t%V\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    int_0 = -1724
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    complex_0 = -2475.94755 - 397j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    complex_0 = 472.861 + 544.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    set_0 = set()
    str_0 = "p"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    bytes_0 = b""
    str_0 = "e.iJ{OP@K"
    int_0 = -1782
    bool_0 = True
    tuple_0 = (bytes_0, str_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


def test_case_2373():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    object_1 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2374():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2375():
    pass


def test_case_2376():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2377():
    str_0 = "U\tY"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    str_0 = "\tltUdu-|#K\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    str_0 = "KR5K18'^(JbS%\"b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    int_0 = 464
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    str_0 = "fX4D\\q@Y"
    dict_0 = {str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


def test_case_2382():
    pass


def test_case_2383():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2384():
    bytes_0 = b"\xb3\xdbX\xef\xecdm\xfcP\xaf"
    bytes_1 = b"\xc9g\x14\xa8f\xa3\xa3"
    dict_0 = {bytes_0: bytes_0, bytes_1: bytes_1}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    int_0 = -1085
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    float_0 = 526.14193
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    int_0 = -1301
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    bytes_0 = b"\xae\xdd\xe9p@htY\x95/_?1\x8fo\xf6c\xa6\xdf\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    bytes_0 = b"G\xce\xed\xa8n\x0b\x04+:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    bytes_0 = b"\xabS\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    list_1 = [tuple_0, list_0]
    str_0 = "8XY\x0c"
    str_1 = "p>"
    str_2 = "w<;g^/"
    dict_0 = {str_0: tuple_0, str_1: str_1, str_2: str_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    int_0 = 503
    str_0 = "\\GOT''R6CGZj;"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    int_0 = -3832
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    str_0 = "Hn\\KZx8bRDI,48IwM5S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    bytes_0 = b"\xe3\x97\xa2\xfe\rIG#\x14J\xdc\x16\x15\xf3\x01\x9b\xc7\xce\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    int_0 = 6143
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    str_0 = "\rW*h\\c"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    str_0 = "ER\nR{L8)w7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    bytes_0 = b"\x92\xa7*\xc0\xf7'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    bytes_0 = b"*LE\n\xdb\x16z\xc3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    str_0 = ""
    str_1 = "!2MI*sF^"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    float_0 = 1774.356
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    complex_0 = 290.942 - 2098.25j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    str_0 = "W8tGt*IX%!\x0cN1wK"
    str_1 = "("
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bytes_0 = b"\xea\xb0\xd1X0\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    set_0 = set()
    dict_0 = {}
    bool_0 = True
    tuple_0 = (set_0, dict_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    bytes_0 = b")$\xfb^\x12\xdf\x14\xb7\xf5\x16L\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    float_0 = 897.257527
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    bytes_0 = b"u\xde~F.\x80O\xde\xa0\xb68'\xa8@?\xccL\xf7\x1dF"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    complex_0 = 4099.27 - 3652j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    int_0 = 2373
    module_0.match(int_0, int_0)


def test_case_2414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2415():
    float_0 = -962.7664
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    int_0 = -39
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    complex_0 = 2051.84 + 347.026277j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    float_0 = 645.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    str_0 = "8rQCY"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    int_0 = 200
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, list_0, list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    int_0 = 1643
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bool_0 = False
    bytes_0 = b"v\x99\x00\xcfR\xdd\x98\xb3\xbe\xc2\xde\xb7N\x8f\xca8\xa2"
    dict_0 = {bool_0: bytes_0, bool_0: bool_0, bytes_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    str_0 = '9y=oH:cRHl?(?WP"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    float_0 = 1390.25
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    bytes_0 = b"\x89W\xfd\t.\xfd@\xf7\xc9>\xe5\x9f\x85\xc1\xb0\x91O\xbcR"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"D\x9d\x8e\xd6fx[\x12)\x06:"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    int_0 = -747
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, bool_0, bool_0)
    bool_1 = True
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    int_0 = 852
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    bytes_0 = b"TUH\x04\x06g@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    complex_0 = 1387.8231 - 3083.92755j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    float_0 = -2650.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    set_0 = set()
    bytes_0 = b"\xc7h\x00\xe77?2B\x9b\xfb\x0e"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (set_0, list_0)
    module_0.match(tuple_0, tuple_0)


def test_case_2437():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2438():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    float_0 = -1065.882
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    str_0 = ""
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    complex_0 = -3003 + 1665.9079j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    bytes_0 = b"\xff\xe6\x93\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    int_0 = -112
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    int_0 = 269
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    str_0 = "s*%4=2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    bytes_0 = b"m\xac2\xb0\x89*\x8d\xc7\x83\xf9\x8c^\xf8\x01\x1aO\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    int_0 = -86
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    int_0 = 1342
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    int_0 = 293
    module_0.match(int_0, int_0)


def test_case_2453():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2454():
    object_0 = module_1.object()
    bytes_0 = b"\xd3(\x88Z\xbf\xb46\xe2\x961q\x05\x14C\xca\x0f\xbb\xbf"
    dict_0 = {object_0: object_0, bytes_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_2456():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2457():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    int_0 = 1884
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    none_type_0 = None
    int_0 = -2000
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    str_0 = "jFvBM\thk4+("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    float_0 = -728.81
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    str_0 = "F,qLeE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    float_0 = -3404.955
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    complex_0 = -46.03295 + 576.78023j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    bytes_0 = b"-\xefTj\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    bytes_0 = b"q[m"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    bytes_0 = b"\xba\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    bytes_0 = b"\xba\xea\xcb\x16\xb6\x1e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    none_type_0 = None
    complex_0 = -2809.6925 + 2215.6948j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    int_0 = -1191
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    float_0 = -1316.020523
    bool_0 = False
    list_0 = [float_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0, bool_0, bool_0]
    module_0.match(list_0, dict_0)


def test_case_2476():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2477():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    float_0 = 2067.0
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, float_0: bool_0, bool_0: float_0, bool_1: bool_0}
    tuple_0 = (float_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    str_0 = "k#@lR'\x0c-weg+f@G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    str_0 = "\nf0%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    bytes_0 = b"s\xbd\xec\x1eE\xed\x1e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    bytes_0 = b"\x91&\xce\xceEh|"
    set_0 = {bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    int_0 = -468
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    int_0 = 459
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    str_0 = "oy>{S.}K!<s!7k\x0blE$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    bytes_0 = b"XW/\x19v>"
    set_0 = {bytes_0}
    complex_0 = -1537.91 + 146.1898j
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    float_0 = -726.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    float_0 = -615.0
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    bytes_0 = b"={x\x97\x0cfQ\x13#\x839\xb52\x1a\xd3I"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, bytes_0]
    dict_0 = {bytes_0: tuple_0}
    tuple_1 = (list_0, dict_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    bytes_1 = b"t#\xe2\x8d\xa5=\xd7\xfb~"
    module_0.match(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    bytes_0 = b"4\xc2\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    bytes_0 = b"\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    int_0 = -632
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    float_0 = -3534.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    int_0 = -6989
    int_1 = 534
    module_0.get_new_command(int_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    int_0 = 1612
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    bytes_0 = b"L\xc9\xae\xd0\xc65.E\xd9\x9b"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_2502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bytes_0 = b"W"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    bytes_0 = b"\xc9r\x11\x9c\xba\xd6"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    float_0 = -3216.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b"\xaaIS\xce\x1b\x9e\xdb\xe2&\x01e\xddS&\xca5\x1f\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    str_0 = "IX=Y~K=~v3R"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    bytes_0 = b"\xce<\xf53\xf5\xd0\\\xba9v_]\xf9\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    bytes_0 = b"\xbe\xa1\xcc\x17\xd5\x86\x00\xaaoR\x10\xca\xec\xbc\x08\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    str_0 = "O{2`\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    complex_0 = -749.91 + 3307.128j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    str_0 = "fpw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    bytes_0 = b"\xc8T\x89"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = True
    str_0 = "ao8X.qnk"
    tuple_0 = (list_0, bool_0, str_0)
    bool_1 = False
    tuple_1 = (list_0, tuple_0, bool_1, bool_1)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    int_0 = 2002
    list_0 = [int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    str_0 = "a;2/YgoPp={h3{=:4\x0b,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    int_0 = -1454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    str_0 = "caODrtZ_\r:&a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    int_0 = -1403
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    str_0 = "\t"
    int_0 = 3103
    dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    int_0 = 315
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    int_0 = 4152
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    int_0 = -239
    module_0.get_new_command(int_0, int_0)


def test_case_2524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2525():
    float_0 = 362.892667
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    str_0 = "f\\@8%y*7uIE)"
    str_1 = "v\x0bJt"
    str_2 = ""
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    int_0 = 2228
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    int_0 = 427
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    str_0 = "2M.3^X%%>&S"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    bytes_0 = b"]\xe5\x93\xa3\x95}\xfd\x94Z\xf8H\x85\x7f\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    int_0 = -1957
    module_0.match(int_0, int_0)


def test_case_2532():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2533():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    list_0 = [dict_0, object_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    str_0 = "W/"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    bool_0 = True
    list_0 = [bool_0]
    int_0 = 496
    tuple_0 = (list_0, bool_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    bytes_0 = b"y\xefQ=.\x1cJ\xf1\xba\x19\xaf\x8b\x80\x80%\xf2\x8a\x00"
    set_0 = {bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    bytes_0 = b"6\x86[\xf1\xf7\x0b\xe2\xcdu?C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    complex_0 = -776.69 + 258j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2540():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2541():
    float_0 = 680.82
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    bool_0 = False
    int_0 = -1196
    dict_0 = {bool_0: bool_0, bool_0: int_0, bool_0: bool_0}
    module_0.match(dict_0, int_0)


def test_case_2543():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2544():
    none_type_0 = None
    int_0 = -497
    dict_0 = {}
    list_0 = [int_0, none_type_0, dict_0, dict_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    str_0 = "p}~m^<[^pG{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bytes_0 = b"\xec\x18\xbc. \x11A\xe9\xbd\xf3\x96W\xfa+"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2547():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2548():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = 2539
    bool_1 = False
    tuple_0 = (bool_0, list_0, int_0, bool_1)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    bytes_0 = b"\xf9\xa8\x8f-\xb7\x10\xc6"
    module_0.match(bytes_0, bytes_0)


def test_case_2550():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2551():
    bool_0 = True
    complex_0 = 465 + 763.69j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    tuple_0 = ()
    str_0 = ")0"
    tuple_1 = (tuple_0, str_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    int_0 = -3702
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    str_0 = "\x0b\tT\rNM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    float_0 = 4280.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    str_0 = "f<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    int_0 = 2808
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    bytes_0 = b"\r\x8e\xc2\xff\xc3'\xbd\xae\xd2\xc1q\x82\x96k\xa4\x9d\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    int_0 = 2757
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    int_0 = -1767
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    int_0 = -795
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    bytes_0 = b'\xd3\x10\xc2\x86"\xd8\xb9n\x80\xba\xb1S4\x0f\x04\xc8\xa2|'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    float_0 = 560.6867
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    bytes_0 = b"\x95\xe9qC[+\xd1k%"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    complex_0 = 706 - 420.5132j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    int_0 = -3454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    bytes_0 = b"\x11\xbb\xb4\x82\x8e#\xdb\xeb\x1c\r\xb8\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    bool_0 = True
    list_0 = [dict_0, object_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    bytes_0 = b"\xcd\xce\x89g\xebN\xe9\x17\x19\xad\xddxbmg"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    int_0 = -1877
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bool_0 = True
    str_0 = "+V4Q!H9"
    set_0 = {bool_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    int_0 = 3078
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    int_0 = -627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    bool_0 = True
    bytes_0 = b"\xc6\xb4\xc4\x04\xbd+i\x02"
    set_0 = {bytes_0}
    tuple_0 = (bool_0, bool_0, bytes_0, set_0)
    list_0 = [bool_0, tuple_0, bool_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    complex_0 = 917.72452 - 355.92615j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    int_0 = 45
    bytes_0 = b"\xb6\xf3\x04\x85\x94\xaa\n\xb6\x0f\x98"
    module_0.match(bytes_0, int_0)


def test_case_2580():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2581():
    float_0 = 2678.2381
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    bytes_0 = b"=\xad\xb9Cy-\xb0`\x92\xae\xb7\xb0L\x14`\xea \x82E"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    int_0 = -869
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_2585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2586():
    int_0 = 1702
    module_0.match(int_0, int_0)


def test_case_2587():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2588():
    str_0 = ",S<%yv- wc|\x0c 2"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_1]
    tuple_0 = (bool_0, bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    bytes_0 = b"\r\x1cH\xear"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bytes_0 = b"X\xbauL\x1f\x8e\xeb+\x8d\xf2o\xff\x05iB<};\x1bY"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    str_0 = "1$6\t\rG||&B"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bytes_0 = b"o\x95\xc9"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    bytes_0 = b"\x88\x08\xc8/\xc9\xc8\xc4\xa8\xcf)\x07"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    float_0 = -248.34
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    float_0 = -1472.581956
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    bool_0 = True
    set_0 = set()
    dict_0 = {bool_0: set_0, bool_0: set_0}
    tuple_0 = (bool_0, set_0, dict_0, bool_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    float_0 = -3977.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    list_0 = [tuple_0, tuple_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    int_0 = 1180
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    float_0 = -413.90987
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    float_0 = 2282.2014
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bytes_0 = b"/\xbcY\xed\x92X\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    float_0 = 1332.5
    bytes_0 = b"k\xbe\x99\xceP@\xc7%O\xb8\xe0\xcbJ\xcb\xf7\xd9]z\xc0"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b"\x96\xbd#\xc90d^l\xd6\xc8\x04\x86\xef_\x0e\x0e=l"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    str_0 = "9XB]<.5.#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    bytes_0 = b"\xe6\x033\xfd\xc0\x9d>=\xe3TS"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    str_0 = '"?u"}J'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    float_0 = 1221.492318
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    str_0 = "*n+#eT}q:UU:DR\t\t7878"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    str_0 = ""
    none_type_0 = None
    str_1 = "_3\t$\x0c@"
    str_2 = "r}p'"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    bool_0 = False
    str_0 = "xDRuC"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    int_0 = 96
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    bytes_0 = b"\xe3!"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    int_0 = 1706
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    str_0 = "'c)_nEaA;[?EJ-"
    bool_0 = False
    tuple_0 = (str_0, bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    str_0 = "h%[V}:1>3#]=`Q:S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    bytes_0 = b"\xf6z6\xa5\xc4{\x84V"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_2626():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2627():
    str_0 = "^U'}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bool_0 = True
    float_0 = 45.4
    list_0 = [bool_0, bool_0, bool_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2631():
    pass


def test_case_2632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2633():
    float_0 = 1661.624165
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    bytes_0 = b"\x05\x13\x9b\xafk\xed&\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    str_0 = "@uX"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


def test_case_2636():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2637():
    int_0 = -2923
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    str_0 = "p'X<^q1f"
    set_0 = {str_0, str_0, str_0, str_0}
    bool_0 = True
    tuple_0 = (set_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


def test_case_2639():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2640():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    float_0 = -1205.50355
    set_0 = {float_0, float_0}
    str_0 = ""
    bool_0 = True
    tuple_0 = (set_0, str_0, bool_0, float_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    str_0 = '92:d&+$C."\\]i|tf'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    bytes_0 = b"ZO\xa3\x7f\x87\x02\xb5\x08\x1cT\x90/\xdd\xbe\xfer"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    float_0 = -548.0
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    bytes_0 = b"\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    float_0 = -280.635
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    bytes_0 = b"\x1a\xbc`\x1e\x05\xdc\x84\xbb\xf0\xaa\xc6\x10\x84\x1cw\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    str_0 = "iK\t\\3M&"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    str_0 = "v j BQ|T"
    str_1 = "V*f6"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    float_0 = -1304.64253
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    str_0 = "pA_0\tU<V.$=EBF\x0c9YbDQ"
    set_0 = {str_0, str_0, str_0, str_0}
    bool_0 = True
    tuple_0 = (str_0, set_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    int_0 = -120
    int_1 = 1953
    tuple_0 = (int_0, int_0, int_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    str_0 = "2c'r6.l+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    str_0 = "H?t[(WR.W9l}<3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    bool_0 = False
    bytes_0 = b"\x1c\x9e\xdd("
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    bool_0 = False
    int_0 = -499
    module_0.match(bool_0, int_0)


def test_case_2659():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2660():
    float_0 = -498.89431
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    none_type_0 = None
    bytes_0 = b"\xcd\xd5\xd9U\x7f\xf5_S\xef\x97\xd4\x1e\xc7\xf6\x18\xa2\xf9\x91"
    module_0.get_new_command(none_type_0, bytes_0)


def test_case_2662():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2663():
    int_0 = 1409
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    str_0 = "6Bc21v0kTP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bytes_0 = b"O\x13\x88"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    str_0 = "FN_@H% :"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0}
    tuple_0 = (str_0, bool_0, dict_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    int_0 = 91
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    complex_0 = -806.9116 + 2371.1932j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    bytes_0 = b"\xcb\x11\xa0<\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    str_0 = "c}ZcR[r$<fY*QhYP3s%F"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    str_0 = "O2N'h\tEJL5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    tuple_0 = ()
    bool_0 = False
    dict_0 = {tuple_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    str_0 = "PqEqWj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    int_0 = 1033
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    str_0 = "1 \x0b5DrMkg=SNW1\\ 'V"
    module_0.get_new_command(str_0, str_0)


def test_case_2676():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2677():
    str_0 = "VV.Xh6/:S`,V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    str_0 = 'B {c"g/Dhc'
    dict_0 = {}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    complex_0 = -2652.81873 - 1757.768357j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_2680():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2681():
    float_0 = 2172.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    str_0 = "G)qbT.sEsb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    str_0 = "MID\x0cih\nFf,"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    float_0 = 162.53
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    int_0 = 2127
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    bytes_0 = b'\x86J\xf5\xe4\xf8\xa3\xe8=\x12\xfb#m")\xf8v'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    int_0 = -106
    dict_0 = {}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    str_0 = 'mq.zT"s0T)Q'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    int_0 = -90
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    str_0 = "A<dmEW'F'e\t'ra\tQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    int_0 = 629
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    int_0 = -1553
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    float_0 = 2844.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    int_0 = 1610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    int_0 = -1953
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    none_type_0 = None
    int_0 = -3635
    module_0.match(none_type_0, int_0)


def test_case_2700():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2701():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2702():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2703():
    bytes_0 = b"#d\xf8l\x9e\xd3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bytes_0 = b"X7nF\x01\x8fk\xcbX\xd3\x046\xfd\xcc\xc2\x9d\xe9\x08\x90\xbb"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    bytes_0 = b'o"\xec0a\x8em\xdb\x9b'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    bytes_0 = b"\x85\xcc9\x84\xf6\xe9\xfeq\xcb\x85\x94$\xbc\xaar\xeefE"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    int_0 = -2318
    module_0.get_new_command(int_0, int_0)


def test_case_2708():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2709():
    bytes_0 = b"1="
    set_0 = {bytes_0, bytes_0, bytes_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    float_0 = 911.5173
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    str_0 = ")C~&|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    str_0 = "2v"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [bool_0, bool_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bool_0 = False
    str_0 = "E"
    list_0 = [bool_0, bool_0, bool_0, str_0]
    module_0.match(list_0, str_0)


def test_case_2717():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2718():
    str_0 = "-.sX^$e{|\nTd"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    int_0 = 652
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    int_0 = 3249
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    float_0 = -3124.627004
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bool_0 = False
    int_0 = 1229
    dict_0 = {bool_0: bool_0, bool_0: int_0, int_0: int_0}
    tuple_0 = (bool_0, int_0, dict_0)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    float_0 = -248.626
    int_0 = -2857
    tuple_0 = (float_0, int_0)
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


def test_case_2725():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2726():
    int_0 = -1362
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    int_0 = -4188
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    int_0 = 809
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0]
    list_2 = [list_1, list_0]
    module_0.match(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    bytes_0 = b"\xbe\x12\x16<\xb0\x08\x9b"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = True
    str_0 = ""
    set_0 = {str_0}
    tuple_1 = (bool_0, bool_1, str_0, set_0)
    list_0 = [tuple_0, tuple_1, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    int_0 = -479
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    bytes_0 = b"\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    bytes_0 = b"\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    float_0 = -1035.99
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    bytes_0 = b"\x13\xc2I\rU[\xa6\xdc\x1d\x1dC&i\xd9[K|\xacR"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    bytes_0 = b"'\xfd\x9bF\xd5\xb8\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    int_0 = -2394
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    bytes_0 = b"\xe6)\xca\x1c\x023N17"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    str_0 = "\"\n6ERiBm/nd\n('SeZ"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    str_0 = '5\n"Bg'
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    int_0 = -331
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    str_0 = "N\nyX\nh2~ic\x0cdjOz\x0cW"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    str_0 = "^*\ri"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    str_0 = "IPr*e$;\n4hzTX0<"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    complex_0 = 1312.399 + 1055.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    bytes_0 = b"\x9f\x00\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    complex_0 = 2402.850045 + 4488.74j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    int_0 = -185
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    str_0 = "54 ?a[w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    complex_0 = 3255.4645 + 70j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    int_0 = -1777
    list_0 = []
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    str_0 = ";S\tahs)I\x0b<2,("
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    float_0 = 364.31
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    str_0 = "3Pcw^@%u>;E{)\rI|k? b"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    bytes_0 = b'\xca\xb4\x14\x1bN\xab\xdd\x8d"\xb5p\x1e\xe4lG\x84*\xcb\xa9'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    bytes_0 = b"&\xbb\x89\xe6\x1f\x9aA\xc7t\xa9"
    bool_0 = False
    dict_0 = {bytes_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    int_0 = 1111
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    int_0 = -3384
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = 3937
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    bytes_0 = b"\xf3Xx\xd7\x12\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2767():
    bool_0 = True
    str_0 = "#MYa\\S%~LS4yiE_&V."
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    bytes_0 = b"zp#x\x17\xfc\xe4O[h\x07h\x85\x89\x07\x11\xf3Ho"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    set_0 = {tuple_0, tuple_0, bytes_0, bool_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    int_0 = -2425
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    int_0 = -1026
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    int_0 = -3509
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    bytes_0 = b"5d|\x0e*\xbc\xbb\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [str_0, list_0, str_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    int_0 = -4894
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    bytes_0 = b"\xdcb\xf3\xcf*{[c\xf0\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    complex_0 = -1050.1 + 1380.46317j
    set_0 = {complex_0, complex_0, complex_0}
    tuple_0 = (complex_0, set_0)
    list_0 = [tuple_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_2777():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2778():
    complex_0 = -865.47333 + 6279.6182j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    tuple_0 = ()
    int_0 = -277
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    float_0 = -3658.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    int_0 = 2913
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    int_0 = -1535
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    str_0 = "~CfJgom[Xq1S [uSGOtz"
    str_1 = "\n\x0cUFQ"
    str_2 = 'k"La'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    str_0 = "{ZGsk{*J1x}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    bytes_0 = b"\xa2\xce\xa2\x90\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


def test_case_2787():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2788():
    int_0 = 469
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bytes_0 = b":)ScO'\xcd;\x18U\xe2\xd3x\x0b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    str_0 = "g\x0bG\\$4*="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    none_type_0 = None
    int_0 = -91
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    int_0 = 1198
    set_0 = {int_0}
    tuple_0 = (int_0, int_0, set_0, set_0)
    list_0 = [tuple_0, tuple_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    list_0 = []
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (list_0, tuple_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    str_0 = ":\\=yI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    str_0 = "AZJB|OsCX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    str_0 = "S&3<\tt-,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    float_0 = -3060.273
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    bytes_0 = b"Y\xcd\xd1\xb1\xfc\xfd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    none_type_0 = None
    str_0 = "H1]BP"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    int_0 = 1235
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    bytes_0 = b"O\\\xb1f,\t"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    complex_0 = -162.282 + 4183.635932j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [bool_0, bool_0, bool_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    bytes_0 = b"\xf6\x82F"
    set_0 = set()
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    int_0 = -317
    str_0 = "+mmrq"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    float_0 = -515.71379
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    none_type_0 = None
    str_0 = "\x0ct,5aq1\x0c"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    int_0 = 472
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    str_0 = ""
    str_1 = "#\x0b@:7`TM<G\tl^]&lF"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    str_0 = "E>LDj\n_@qC02K`"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    complex_0 = 2925.6094 - 2865.413185j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    int_0 = -1507
    bytes_0 = b"\x96\x91\xb3%\xafJEA+\x1ccj\\\x91\xae\xca\x96\x94"
    tuple_0 = (int_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    int_0 = 945
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    complex_0 = -5531.015 - 1681.1j
    float_0 = 950.1
    tuple_0 = (complex_0, float_0)
    str_0 = "9b<\t{"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    int_0 = 1464
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    int_0 = -1086
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    str_0 = "t~ '"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    str_0 = "\\!J!guk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bytes_0 = b"\tP\x82\x11\xc1\x8fk\xa4\x95\xfd\x95\xd9\x89\x90D\x062\xe5"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    int_0 = -1522
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    str_0 = "*7Q#rD\x0bXVp+12"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    bytes_0 = b"_"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    str_0 = "\\["
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    int_0 = 383
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    bytes_0 = b"V\xdb\xe9<!\x80NN\xd8\xb1\x97"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    bytes_0 = b'\xcf\xbe"\x97~\xbae\x9e\xb4YT\xb4\xfa\xef\x93\xac'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    str_0 = "&8("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    str_0 = "07IN#"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    float_0 = -27.12
    module_0.match(float_0, float_0)


def test_case_2835():
    pass


def test_case_2836():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2837():
    float_0 = 1198.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    int_0 = -588
    str_0 = "OIfPX,\nsChrFEd\x0bE\x0b"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    float_0 = -803.9
    float_1 = -1915.553
    int_0 = -4238
    tuple_0 = (float_1, int_0)
    tuple_1 = (tuple_0, float_0)
    module_0.get_new_command(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    str_0 = "K"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    int_0 = 1054
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    str_0 = "y(\t#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = 4364
    str_0 = "-JEkI\x0b%DV"
    tuple_0 = (list_0, int_0, bool_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    int_0 = -502
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    bytes_0 = b"\x962O\xf22\xf1\x95\x93\xa9\xad\x07\x88Z\xda\xd5\xd0\xa7E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    bytes_0 = b"\xb0C\xe8tdy1t\x05\xc3\xe3e\x14"
    module_0.match(bytes_0, bytes_0)


def test_case_2847():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2848():
    float_0 = 652.3096
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    bytes_0 = b'\xdc@"\x9b\xc7.\x99\xdc\xc5\xb3\xf4\x89f\xf8\xfdk\x19\xb7\xfbI'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bytes_0 = b"\xf8j"
    set_0 = {bytes_0}
    list_0 = [set_0]
    bytes_1 = b"\xf4"
    list_1 = [list_0, bytes_1, bytes_1, set_0]
    module_0.get_new_command(set_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    int_0 = 1280
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    float_0 = -1902.4847
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bool_0 = True
    bytes_0 = b"\xf3\x90w\xac3\xde\x13\xaf\xe8\xdf\xc4_\x1e\xeb\xe9b\xe8\x1b\xd7\xa3"
    tuple_0 = (bool_0, bytes_0, bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    int_0 = 685
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    int_0 = -1762
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0]
    bool_0 = True
    tuple_0 = (list_1, int_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    int_0 = 2896
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    bytes_0 = b"\x87\xab\xf3\xcc9\xaa\\|\x86\xbe\x8bO[\x1cW\xc79\xc4\xe3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = "q,qA9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    int_0 = 3355
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    bytes_0 = b"\xaa\xa7F\xdaA\xdd\xca\x80\xc6\x95\xd7lN:"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    complex_0 = 1484.56499 - 769.97652j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    int_0 = -2772
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    bytes_0 = b"\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    str_0 = "IKrE`eYrhFy"
    bool_0 = False
    set_0 = {str_0, bool_0, str_0}
    tuple_0 = (set_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    float_0 = -3746.933032
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    complex_0 = 1105.1 - 1248.8j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    bytes_0 = b"k\xc8."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "IWe'W,+(eE6=lOU*aFp"
    int_0 = 689
    tuple_0 = (str_0, int_0)
    object_0 = module_1.object()
    tuple_1 = (tuple_0, bool_0, object_0, dict_0)
    module_0.match(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    bytes_0 = b"\xd1oUP\x88\x0b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    str_0 = "T\rEZmsq\r$4$_\rwW<K\x0c"
    float_0 = -891.3742
    list_0 = [str_0, float_0, str_0]
    tuple_0 = (list_0, float_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


def test_case_2876():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2877():
    str_0 = "p6W-YMC%&J2]vh=?@1t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    bytes_0 = b"\xff\x04\xce\x87?\x9d~\xb4\x8c\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [bool_0, bool_0, list_0]
    int_0 = 4492
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    int_0 = -1067
    bool_0 = False
    bytes_0 = b"!\xc0\x03\x13\x03\x88v\xbb3\xfe\xefN\xdfZ\x88\xf4"
    dict_0 = {int_0: bool_0, bytes_0: bytes_0, bool_0: bool_0, bytes_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    int_0 = -1387
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    str_0 = 'my$Qh=9"-&<"C6'
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    complex_0 = 1220.442336 - 2412j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    bytes_0 = b"+\xe5\xbc1\x83a\xce\xf0\xd2Y\x87\xee\xf9\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    str_0 = "B\x0bnE~XfFn}\nVz3P^nEL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    float_0 = 495.33625
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    str_0 = "yCl\\! rN x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    str_0 = "h#ez5-hTB"
    float_0 = -3447.36739
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    int_0 = 371
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    int_0 = 182
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    bytes_0 = b"\xd2Y\x89\xeff\xb6r\x13\xc5>\xf2"
    module_0.match(bytes_0, bytes_0)


def test_case_2898():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2899():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    bytes_0 = b"\x8a\xd7jL\x08\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    int_0 = -1320
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    float_0 = -3053.172057
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    float_0 = -1583.98188
    int_0 = -2117
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    object_0 = module_1.object()
    float_0 = 2028.0
    module_0.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    str_0 = "\x0b~'~fb[chh}/=\n'_Fup"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    bytes_0 = b"O\xc0\x06\x0fa\x00D\xf4\x1b:\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    str_0 = "`|G.g_!gh\r%8)]M^"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    str_0 = "gArHq{M>F"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    str_0 = 'Qf.BbkX\n["'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    str_0 = "@f\x0b|{$*ls)L`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    str_0 = "\tG%q.l|3BZc\no\t^=g\x0b\t"
    int_0 = 846
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    bool_0 = True
    complex_0 = -180 + 171.4965j
    dict_0 = {complex_0: complex_0, bool_0: bool_0}
    int_0 = 1083
    tuple_0 = (bool_0, complex_0, dict_0, int_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    float_0 = 2262.210071
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_2916():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2917():
    bytes_0 = b"Km\xf2:T\x8e-\x9c)\xa0\xbfY\xc5\x96K"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


def test_case_2919():
    pass


def test_case_2920():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2921():
    bytes_0 = b"u\xb3\xf6\x18\xd2-c\x96\xd6\xd0\xb4Nk\xa1\xf5\xee"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    bytes_0 = b"\xbfP\xbb\xb9\xac4G\xebXr\xc8\x12\x08y\xa6K"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    str_0 = "YctsKF@4e"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    float_0 = 1016.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_2925():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2926():
    int_0 = -2075
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    bytes_0 = b"\x04\xf4\x87"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "13tHAX#@QxF{l\n "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    str_0 = "\x0c4Ny2"
    bool_0 = False
    tuple_0 = (str_0, bool_0, bool_0, bool_0)
    tuple_1 = (tuple_0,)
    dict_0 = {str_0: str_0, str_0: tuple_1, bool_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    float_0 = -1788.423
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    int_0 = -491
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    bytes_0 = b"\xeb\xf6;\xc1\xb8\x9c"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    str_0 = "ig;!DLbAOXe:Gu=&"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    float_0 = -631.34492
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    bytes_0 = b"\xc5\xf6\xfd\x05\x0ey\xc1\x83\xd9\xa7\xe2\x15\xbc\x80\x1f\x8c\x9cNo<"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    bytes_0 = b"\x80\xd83\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    float_0 = -315.8379
    tuple_0 = (float_0, float_0)
    dict_0 = {tuple_0: float_0, tuple_0: float_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bytes_0 = b"\xb2\x86-U\xbbz\xd3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    int_0 = 2622
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    complex_0 = -833.2025 + 210.7j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    complex_0 = -1663.159644 - 603j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    complex_0 = 3348.1 - 1577.805541j
    tuple_0 = ()
    tuple_1 = (complex_0, tuple_0, complex_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    int_0 = 682
    module_0.match(int_0, int_0)


def test_case_2945():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2946():
    str_0 = ".DkS:XO9h, v->fs$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    int_0 = -214
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    str_0 = "]KX V,yYfU}\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    str_0 = "3\x0bl3|.5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    bytes_0 = b"H#\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    bytes_0 = b"\xdaw\xc9\xc7[\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    bytes_0 = b"n\x8f\xce\xb4/\xc6.A<b\x07\xf5\xea\x9e&mD"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    int_0 = 2187
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    bytes_0 = b"\x0c\x19j\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    float_0 = -2559.05
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    bytes_0 = b"\xb8\xc3!\x99\xa4\x97\xa5f\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    complex_0 = -1880.16677 + 105.979j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2960():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2961():
    str_0 = "o^&Q7"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    int_0 = 2053
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    complex_0 = 2799.52379 - 2093.2111j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    str_0 = "~0nHwXy 4*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    float_0 = -241.347322
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: bool_0, bool_0: dict_0, bool_0: bool_0, bool_0: dict_0}
    none_type_0 = None
    module_0.match(dict_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    bytes_0 = b"Dd.\xb6\x84e]\xae4-D8\xa6\xd9\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    int_0 = -323
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    float_0 = 1958.14755
    bytes_0 = b"\xba\x9d\xbe\xab\xacsz\xe0^"
    tuple_0 = (float_0, bytes_0)
    list_0 = [tuple_0, bytes_0, float_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    bytes_0 = b'\x9aQf\xe0_\xe5\xda>\x87J"\xfd\xb2Gq'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    str_0 = "e\x0cv=Gqhk7RdLc}qzL'i"
    module_0.get_new_command(str_0, str_0)


def test_case_2974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2975():
    str_0 = "Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    bytes_0 = b"R\xbe\xe9\xdb\xc7pV"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    float_0 = -476.628
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    int_0 = 841
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    int_0 = 38
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    str_0 = "J]q&[Z?K>asnCd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2983():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2984():
    bytes_0 = b"\xf9C4\xf0P\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_2987():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2988():
    float_0 = -3173.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    int_0 = 624
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    str_0 = "z['VZ'9LJx{\r Rq9+mZ"
    set_0 = {str_0, str_0}
    str_1 = "\x0b%=#2QpE7\\,6q&YfXE&"
    module_0.get_new_command(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    int_0 = -3000
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    str_0 = "H\\2\\.0ng?+"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    int_0 = 2749
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    bytes_0 = b"\x8am\xa4Q\xa3\x96<\xe9\x8a\xf91"
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\\\x08p\xb0\xaa[\xb6\xa8\xe0"
    dict_1 = {bool_0: bool_0, bool_0: dict_0, bytes_0: dict_0}
    module_1.object(*dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    str_0 = "'wn\ri\tE7(KKUf&7\x0b:<\x0b-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    int_0 = 1343
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    bool_0 = False
    str_0 = "6Q<tSmr+?y "
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    bytes_0 = b"\xea\x17\xb3Be\x1b \xb9a\xa2\x84e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    str_0 = "oN\x0c}m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {bool_0: bool_0, bool_0: tuple_0, bool_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    str_0 = "9uOV%!'>(`\roB<!FO)"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    int_0 = -1910
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_3009():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3010():
    int_0 = -1914
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    str_0 = "inz$!a33"
    tuple_0 = (set_0, bool_0, bool_1, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    complex_0 = -1100 + 1349.2j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    str_0 = "Z\x0c{OS|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    bytes_0 = b"&m\xde\xa1\xe4\xc0\x9a\xab\xaa@\xb4\xd93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    float_0 = 1159.0
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    float_0 = -1012.6646
    set_0 = {float_0, float_0, float_0, float_0}
    list_0 = [set_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    bytes_0 = b"j\xf5\xd9\x90"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    int_0 = -1812
    tuple_0 = (int_0,)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    int_0 = 276
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    bytes_0 = b"\xc63\xc3\xefQ\xdc\x94\x1f\xb5\x07\x15\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    float_0 = -3699.8
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    bool_0 = False
    str_0 = "}9+to\t"
    list_0 = [bool_0, bool_0, str_0]
    dict_0 = {str_0: bool_0}
    float_0 = 404.54029
    tuple_0 = (list_0, dict_0, float_0)
    tuple_1 = (tuple_0,)
    list_1 = [list_0, tuple_0, bool_0, tuple_1]
    module_0.get_new_command(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    int_0 = -1266
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    dict_0 = {}
    float_0 = 1060.0
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    str_0 = "5EY;xeMZm0|"
    str_1 = ";t"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    complex_0 = 914.927 + 1179.7j
    dict_0 = {}
    bool_0 = True
    str_0 = "rh.{j'rp"
    tuple_0 = (str_0,)
    tuple_1 = (dict_0, bool_0, tuple_0, str_0)
    tuple_2 = (complex_0, tuple_1)
    module_0.match(tuple_2, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    float_0 = 1515.261
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    str_0 = "(%44\x0ca~3\\1)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    set_0 = set()
    str_0 = "p\x0c<"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    bytes_0 = b"{\xe8D\x00R~\x1e"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    bytes_0 = b"n\xde\xa4\x8a\x10\x90u\t"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    str_0 = "'ttt,{}ydgsN't0[~"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    complex_0 = -933.69 + 3994.2j
    str_0 = ";6]"
    module_0.match(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    float_0 = 1040.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    float_0 = -487.545336
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    bytes_0 = b"N\x8c\xb8\x9c\xc5\xb0\x87\xd2$"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    int_0 = 1638
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    bytes_0 = b"\xc6\xeaq\xd5\xf9\xf8\n\xc1!` \xaaW\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    bytes_0 = b"\xe3\xae,\xcck\x02\xd6\xa3\xeb\xdf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 424
    list_0 = [dict_0, bytes_0, dict_0, int_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    none_type_0 = None
    float_0 = 374.7
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    bool_0 = True
    int_0 = 2823
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    complex_0 = -1795.714 + 482.5098j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    bytes_0 = b"\xc9\xd1\xce\xc1\x07\xba\xabB"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    bytes_0 = b")\xce\xfcX\x98\x08\x9b\x036\xf2\x07\xb81\xae\xf3\xa9\x0b\x80\x04"
    bool_0 = False
    bytes_1 = b"\xbd\x8a\xa0"
    int_0 = 1372
    str_0 = "V.><*"
    tuple_0 = (int_0, bool_0, bytes_1, str_0)
    list_0 = [bytes_1, bytes_1, tuple_0, tuple_0]
    tuple_1 = (bytes_0, bool_0, list_0, int_0)
    list_1 = [tuple_1, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    int_0 = -1364
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    int_0 = 761
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    bytes_0 = b"7L\xe7\xae1kZ\xc2mu\rh\xb2\xc9\xb2,\xd8\xea\xb9\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    int_0 = -1047
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {}
    list_0 = [int_0, int_0, tuple_0, dict_0]
    complex_0 = -2130.82385 - 126.885j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    str_0 = ';"Su9\nBg'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    str_0 = "tvg^FktEx]1cWR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    int_0 = -2987
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    float_0 = 76.56974
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    set_0 = {tuple_1, tuple_1}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    int_0 = 757
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    str_0 = ")QD+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    list_0 = [dict_0, bool_1, bool_1]
    bool_2 = True
    list_1 = [list_0, bool_2]
    module_1.object(*list_1, **bool_2)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    float_0 = 2105.795488
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    int_0 = -549
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    bool_0 = False
    bytes_0 = b"U\xe1"
    str_0 = "oBwG~-t<8\\Z\nW@>.cMh"
    tuple_0 = (bool_0, bool_0, bytes_0, str_0)
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    bytes_0 = b"\xe1\xaf\x16\x94\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    str_0 = "\\(a%s?c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    int_0 = -2821
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    int_0 = 3578
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    int_0 = 3771
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    int_0 = -382
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    bytes_0 = b"\xc8\x14\x95\xccO?$\xd1\x89\n"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3085():
    pass


def test_case_3086():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"\xcc\xe8\x0fr\xec\x1fI\xeb\xee\x8a\x87k\x82\x0e\x87n\xf6 \xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    str_0 = "wVPOw&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    bytes_0 = b"s\xa3\xd9\xa9a\x9a\xd3\xcf\xd5\xb3\xdaX\xcf*\xf6\x9en\x1e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    bytes_0 = b"\xb5\xa2\x8f"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    str_0 = "}XQWwV*g\\VNax"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    float_0 = 2763.0
    module_0.match(float_0, float_0)


def test_case_3094():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3095():
    str_0 = "aJH@#U$HLX^YZ)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    complex_0 = -2405.071 + 1717.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    str_0 = "TPcGWB`Eq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    str_0 = 'x)TA"o!1-NFM7|%4od5'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    bytes_0 = b"3j\xcf\xc0\xc7\x1a\x98Q%"
    module_0.match(bytes_0, bytes_0)


def test_case_3101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3102():
    str_0 = "T6?L@<nqx"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    str_0 = "8G 6c+R'qUb]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    int_0 = 1535
    set_0 = {int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    float_0 = -1415.43989
    dict_0 = {}
    module_1.object(*float_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    bytes_0 = b"Q@\xaa\xb7l6\x90\xdb\x986xY\xb0y\x970"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3107():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3108():
    int_0 = -3783
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    int_0 = -2017
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    str_0 = "$h:9&<q*q(@_)sW-7Q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    int_0 = 3431
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    int_0 = -1448
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


def test_case_3113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3114():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    bool_0 = True
    int_0 = -710
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    str_0 = "b>IZmE"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    str_0 = "2\t$2[N=n:b<evBR1&\x0b`b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    float_0 = -3373.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    int_0 = 1441
    module_0.get_new_command(int_0, int_0)


def test_case_3120():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3121():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    complex_0 = -2859.6141 - 3191j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    str_0 = "p{>$.8P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    float_0 = -966.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    str_0 = 'pi"|BVc$\nOuQ^=8:P'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    int_0 = -659
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    complex_0 = -1065.01 + 3103.659j
    tuple_0 = (complex_0,)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    float_0 = -3024.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    complex_0 = 1654.766 - 2411j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    complex_0 = 2320.012 + 623.36j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    str_0 = 'rWu"_'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    bytes_0 = b"\xb8j]\x15r\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    int_0 = 2312
    module_0.get_new_command(int_0, int_0)


def test_case_3137():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3138():
    str_0 = "-fn=\n)udYe}>ZL"
    module_0.get_new_command(str_0, str_0)


def test_case_3139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3140():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0, bool_0: list_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    float_0 = -69.56
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    int_0 = -2733
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    object_0 = module_1.object()
    dict_0 = {}
    complex_0 = 35.13211 + 2314.88923j
    tuple_0 = (dict_0, complex_0, complex_0)
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    int_0 = 3002
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    int_0 = -1516
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    float_0 = -3853.4294
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    float_0 = -5219.9549
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    int_0 = 905
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bytes_0 = b"\xcd7\xb8&\xd3X\xe8\x90\xaa\x92\x1d\x973\\\x1dCEX"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    none_type_0 = None
    str_0 = ' "b!\x0bGEyt6sFKW8v'
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    str_0 = "RGR*2N)5Zg?Z"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    str_0 = "\x0b+A"
    list_0 = []
    tuple_0 = (str_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    int_0 = -1815
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    bytes_0 = b"\xa4DL\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    int_0 = 106
    float_0 = 1774.4
    float_1 = 148.0
    tuple_0 = (int_0, float_0, float_1)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = 1919
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    str_0 = 'cNg\x0bdv$9h"@W-6.Q_\rWb'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    str_0 = "qc^?Dd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    float_0 = 1340.2324
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    int_0 = 4312
    module_0.match(int_0, int_0)


def test_case_3166():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3167():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    bytes_0 = b"\x87_\x91\xd6\x11\x10\x8d\xfd\xa6A\x99\xfe\xc2\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    int_0 = -2197
    module_0.match(int_0, int_0)


def test_case_3170():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3171():
    int_0 = -1584
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    float_0 = 1105.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    int_0 = 3678
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    float_0 = 276.728569
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    str_0 = "s\x0bp\n2![/7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    bool_0 = False
    list_0 = []
    bool_1 = False
    dict_0 = {}
    tuple_0 = (bool_0, list_0, bool_1, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    int_0 = 3112
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    float_0 = -1249.06422
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    bytes_0 = b"\x83\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    int_0 = 2576
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    bool_0 = True
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    list_1 = [object_0, list_0]
    set_0 = set()
    int_0 = 86
    tuple_0 = (list_1, set_0, int_0)
    int_1 = 3243
    tuple_1 = (tuple_0, list_1, int_1)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    str_0 = "h6qQ- *H8x:s%v`C,\\f "
    str_1 = "Q"
    str_2 = "H[D(H]l\x0c\\"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    str_0 = "x~&@VYV{ouwRX#A\\T"
    module_0.match(str_0, str_0)


def test_case_3187():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3188():
    bytes_0 = b"77\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    str_0 = "~>.*z{yc#p8@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    complex_0 = 1761.176052 + 2097.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    float_0 = 387.6977
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    int_0 = -123
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    bytes_0 = b"aP\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    int_0 = -417
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    bool_0 = False
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, bool_0)


def test_case_3197():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3198():
    int_0 = -32
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    int_0 = -449
    module_0.get_new_command(int_0, int_0)


def test_case_3200():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3201():
    bytes_0 = b"\xb4S\x83\x92"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    int_0 = 402
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    bytes_0 = b"^\r\xe9\xd9\n\xd2\xebZ\x8bFb\xad\xacF\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    str_0 = "U@\x0bbV@2*IGLihpuxs9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    str_0 = "Q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    bool_0 = True
    bytes_0 = b"\xeclN\x84\x86\x1d]\xd1\xd5$N\xfc\xe2\xb7"
    tuple_0 = (bool_0, bytes_0)
    set_0 = {tuple_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    float_0 = -1274.3497
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    int_0 = -618
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    int_0 = -2370
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    str_0 = ".q@`\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    str_0 = '"t%qe6j<ew4?Ne$n\n3'
    none_type_0 = None
    str_1 = "\nS-9nSd"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    bytes_0 = b"W\xbf\x1fy\x12\xd1|\x0c\x9aj"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    float_0 = -3092.8719
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    bytes_0 = b"F\x04\x8d#\x07\xf7{\xaf\xae\x00\x9e\x06P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    str_0 = "z2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    bytes_0 = b"\xe0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    int_0 = 17
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    float_0 = -3913.24551
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    int_0 = 4953
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    bytes_0 = b"\xbcJ\xd5\x929:\x7f\x19\xe5\x1c\x81"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    list_0 = [dict_0, bool_1, bool_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    bool_0 = True
    str_0 = "R,BH5u'ua8Jn5G"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    int_0 = 1063
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    int_0 = 2857
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    int_0 = -1630
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    int_0 = -2472
    bool_0 = True
    tuple_0 = (int_0, bool_0, int_0)
    set_0 = {tuple_0, int_0, tuple_0, bool_0}
    int_1 = 154
    tuple_1 = (tuple_0, set_0, int_1)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    float_0 = 6826.2
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    str_0 = '?\\"D7"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0, bool_0, bool_0)
    str_0 = "\x0cWNr)IMGF/y@\r8JF"
    dict_0 = {bool_0: bool_0, bool_0: tuple_0, str_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    str_0 = "OWt8HoBwz-,9k]#xWFHo"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    complex_0 = -3834.084 - 303.4873j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    bytes_0 = b"\x9e\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    str_0 = "ICC#=w>(D\rO_X*M!FH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    str_0 = "0c1D"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    float_0 = 1107.996443
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    int_0 = -600
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    complex_0 = 272.56 + 3153.5086j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    none_type_0 = None
    set_0 = set()
    tuple_0 = (none_type_0, none_type_0, set_0, set_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    float_0 = -1620.7615
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    str_0 = 'zfN8{*&"OtFo'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    complex_0 = -392.2517 + 2040.948j
    module_0.match(complex_0, complex_0)


def test_case_3243():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3244():
    bytes_0 = b"\xe6w\xacF\xc9\xfa\xb16H\xfc>YT+\xe0R>\xf6"
    tuple_0 = ()
    tuple_1 = (bytes_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    int_0 = 3270
    module_0.match(int_0, int_0)


def test_case_3246():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3247():
    int_0 = -1132
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    int_0 = 1078
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    int_0 = -271
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    float_0 = -2300.19494
    float_1 = -1992.8911
    module_0.get_new_command(float_0, float_1)


def test_case_3251():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bytes_0 = b'\xcd\xba\xaa\xe3\xde\x10\xb9"9<3\x1dx'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    str_0 = "xX#.]K\\zg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    str_0 = '0CD"j&um"dg'
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    float_0 = 4428.7
    bool_0 = False
    tuple_0 = (float_0, float_0, bool_0)
    dict_0 = {tuple_0: bool_0, float_0: bool_0, tuple_0: bool_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    int_0 = 1035
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    bytes_0 = b"\x18~\x0f{D\xe8I\xca\x17\xc8\xf9\x9f\xbb\x7f\xed\xb2A}%f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    str_0 = "'2u/^{a4}9<S"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


def test_case_3259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3260():
    bytes_0 = b"B\xb4~\x80\xa8?\xc7\x02\xdfkq\xef\xe1)\xd2\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3263():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3264():
    float_0 = -4564.0
    list_0 = []
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    bytes_0 = b"\xc4B"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    bytes_0 = b"\x9c\xda\x8a\x8c}F\x15\xe8\x88X\x08*\xbb\x01YH\x9dd"
    int_0 = 328
    dict_0 = {}
    tuple_0 = (bytes_0, int_0, dict_0, dict_0)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, tuple_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    str_0 = "ULN \n\t\\~\\E9.T"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    str_0 = "b74"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    bytes_0 = b"\x08\xbci!\t\xd9dX"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    bytes_0 = b"\xab\xce\xcdB!L'\xaeC\x96?\xabd\xdd\x8aw\xed"
    bool_0 = True
    list_0 = [bytes_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    str_0 = "2,@?CcC4"
    float_0 = -1195.5
    tuple_0 = (str_0, str_0, float_0)
    list_0 = [tuple_0, str_0, str_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    str_0 = "2/fa;TBw]\t!"
    float_0 = -3189.43138
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    str_0 = "\\?vKgi"
    set_0 = {str_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    float_0 = 1640.28252
    module_0.get_new_command(float_0, float_0)


def test_case_3278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3279():
    float_0 = 1589.84
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    str_0 = 'Gz"IIJkBt{`w]MfklZ'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    int_0 = 559
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = 1530
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    str_0 = "3\r3*.FM\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    float_0 = -139.7384
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    bytes_0 = b'\x15\xd1\xc7JW\xa9\xca\x89\xa2\xec"\xc7'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    int_0 = 1086
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    int_0 = 1324
    bytes_0 = b"\xaf\x1e"
    list_0 = [bytes_0]
    list_1 = [list_0, bytes_0, int_0]
    module_0.get_new_command(int_0, list_1)


def test_case_3288():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3289():
    bytes_0 = b"\x95V}\xd5\xbf\x7f\xde?\xee5]\xee\x80\xddV\xa2Y\x9c\xc7\xe4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    float_0 = -1617.5881
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    complex_0 = -1991.99832 - 3656.6125j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    int_0 = 783
    list_0 = [int_0, int_0, int_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0, int_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = "@t`JEkAy(\x0bv#"
    int_0 = -1098
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    str_0 = "jd$]psh\nA!5/f`HV=@>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    str_0 = "jLuB|y\x0bv.*=@*41\tuF"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, set_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    str_0 = "^E>\t"
    int_0 = 5130
    tuple_0 = (str_0, int_0)
    dict_0 = {tuple_0: tuple_0, int_0: str_0, tuple_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    bytes_0 = b"\x0bd!A\xfc\xbe,\xb1\x9f\xa0\xf4K\xac\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    int_0 = 1499
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    str_0 = "wdq7hspj[ T0g&8e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    bytes_0 = b"\xd3\xcb\xbe\xf8P\xf0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    bool_0 = True
    float_0 = 1046.008023
    set_0 = {bool_0, bool_0, float_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    complex_0 = -2144.85 - 2738.65145j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    str_0 = "boz-H^=cMOuo"
    str_1 = "P\x0cE_~(v<}n}SI"
    list_0 = [str_0, str_1, str_0]
    dict_0 = {str_0: str_0, str_1: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    bytes_0 = b"C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    str_0 = 'AQ~JHkW"q\nQQ6]%;iy~L'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    bytes_0 = b"\xf3\xd3\xcb\x8f_o1B'\xf2\xfe4\xeb"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    int_0 = -222
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    str_0 = 'F)g"'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    bool_0 = True
    str_0 = "GCagL,x*UW#E,"
    tuple_0 = (bool_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    bytes_0 = b'"\xf8\xb0\x19\xf93\xf0\x97\x02e\x11\x86'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    bytes_0 = b"\xf1\xfa%\x82\xf9w\x86\x9e\x8c\xee22\xd0\x8c\x94\xc1\x8d\x07"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    int_0 = 2845
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    float_0 = -2835.7065
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "y<2}Y%"
    str_1 = "}/&'SX9}ftO["
    dict_0 = {str_0: str_0, str_1: list_0, str_1: list_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    complex_0 = -2159 - 1015.4288j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bytes_0 = b"\x85\xa5\xf4\xc5Oh\x88r\xbb\x9a\xa5\xaat\xff\x00\xfee\xecS"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    str_0 = "\tp(_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    bytes_0 = b"\xc7>\x11C\xac\x15\xd1W\xf2\x94\xb5\xec1\xc4\xb0\xca\xae\xb0 "
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    int_0 = 2151
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    bytes_0 = b"\x818\xeeI\x07\xab}\x00\x8dV\x05\x8b\xfd\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    float_0 = 3104.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    int_0 = -3324
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    complex_0 = 669.93 - 480j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    bytes_0 = b"\x81qo\x8bID\x17\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    float_0 = 75.0873
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    str_0 = "Q\n@+\r*{>w|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    complex_0 = -1797.514 - 452j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bytes_0 = b"\xc2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    complex_0 = 4903.76 + 2968.678511j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    bool_0 = False
    int_0 = 4109
    list_0 = [bool_0, bool_0, int_0]
    set_0 = set()
    tuple_0 = (bool_0, list_0, set_0)
    list_1 = [tuple_0, bool_0, set_0, bool_0]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    str_0 = " KFn 62|Wt\"\\'Db["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    float_0 = -385.17646
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    int_0 = 2095
    module_0.match(int_0, int_0)


def test_case_3340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3341():
    float_0 = 3251.356
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    str_0 = "/&C'P\t:M1lY.~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    bytes_0 = b".\xec\x91\xc3'\x0cZ\x8c\xb3q\xeez\x92\xbc\x80\xe6A\xf2"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    str_0 = "TE\rd4>xy$wbnq]WbF@"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    bytes_0 = b"\xfdO"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    bytes_0 = b"\x07Q\xb5o\xb7\xec"
    bytes_1 = b"\xe9\xd9\xb1g\xcf\xb7\xb1@\x14\xe2Qv"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_1}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    int_0 = -242
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    str_0 = "Q83{{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    float_0 = 1269.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    float_0 = 437.65009
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    int_0 = 442
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    str_0 = "ShQ\twlY,J&<3q+fE|F"
    bool_0 = False
    str_1 = "pTxG/k"
    dict_0 = {str_0: bool_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_3355():
    pass


def test_case_3356():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3357():
    int_0 = -2727
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    str_0 = "XnvJ.f0T:L\n>4*I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    int_0 = 1326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    str_0 = "Vq&iQ]]6"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    none_type_0 = None
    int_0 = -826
    tuple_0 = (none_type_0, int_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    int_0 = 802
    str_0 = "qyMl|)9&A(m}0c\x0cU"
    dict_0 = {int_0: int_0, int_0: int_0, str_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    complex_0 = 70.475665 + 2958.85881j
    list_0 = [complex_0, complex_0]
    list_1 = [list_0, complex_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    str_0 = 'u$m@s?*"N)UlN'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    bytes_0 = b"\x7f\xa8\xe2Oa\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    int_0 = -529
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    str_0 = "#oY_X<\nZAn\rUw"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    float_0 = 3026.4573
    module_0.get_new_command(float_0, float_0)


def test_case_3370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3371():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    float_0 = -1338.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    str_0 = "-\\JJD>OXsNzG]2F!]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    complex_0 = -1150 - 708.65299j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    float_0 = 515.3201
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    int_0 = 1097
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    str_0 = '2g"!\tQ\ni;:~'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    int_0 = -855
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    bytes_0 = b"\xf1\xc2\x15\xe3\xd1\xda\xb7\xe3\xf2`"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    complex_0 = -489.212 - 803.2j
    list_0 = [complex_0]
    tuple_0 = (complex_0, list_0)
    list_1 = [tuple_0, list_0]
    list_2 = [tuple_0, list_1, list_1]
    module_0.get_new_command(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    int_0 = 1421
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    bytes_0 = b"\xdd\xf5l\xa1Q\x84"
    set_0 = {bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    none_type_0 = None
    str_0 = 'ab>jhs$[0".BV\t\tLS NB'
    module_0.match(none_type_0, str_0)


def test_case_3385():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3386():
    str_0 = "lCWt1%P\x0b-\nh;)l^HE<1="
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0, bool_0]
    module_0.match(list_0, bool_0)


def test_case_3388():
    pass


def test_case_3389():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3390():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    str_0 = "HLIWfyaH"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    int_0 = -390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    float_0 = 2222.548
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    str_0 = "O]"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    int_0 = -1554
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    bytes_0 = b"\x81e$\xdf{HCr"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    float_0 = 3053.0
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    int_0 = -605
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    int_0 = -1611
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    float_0 = -720.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    int_0 = 418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    str_0 = "4>m%@MC7k!X$"
    list_0 = []
    dict_0 = {str_0: list_0, str_0: list_0, str_0: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = 1675
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    object_0 = module_1.object()
    bool_0 = True
    list_0 = [object_0]
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        bool_0: list_0,
    }
    tuple_0 = (dict_0, dict_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    str_0 = "V8xk\tu"
    float_0 = -79.0
    list_0 = [str_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    bytes_0 = b"\x1b\x8f^n\xefv&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    bytes_0 = b"\xf9\x93\xd6\xe2l]"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    int_0 = 4504
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    int_0 = 497
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    complex_0 = -1175.5648 - 1857.51681j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    str_0 = "\\-C(U ORk+R_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    bytes_0 = b"\xd7I\xe7EpE\x96`\x15\xa1\xa8\xda\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    float_0 = 199.10418
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    int_0 = 837
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    complex_0 = -944.76934 - 1199.27j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    int_0 = -4112
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = "m}xk"
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


def test_case_3421():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3422():
    str_0 = "60,YnUK[#"
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, object_0: str_0, object_0: str_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    bytes_0 = b"\xab\xc3\x05\xc1\x95\xc4=\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    float_0 = 434.303
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    float_0 = 2218.9441
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    bytes_0 = b"i^\xf8\xc4:\xc9\xd6\xe4Z6*\x9d\xbd\xa6\x07:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    complex_0 = -113 - 1172.44j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    int_0 = 1219
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    int_0 = -3302
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    str_0 = "OU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bytes_0 = b"\x16b\xc4`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    float_0 = -1522.21636
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    str_0 = "vmRSZ dF"
    tuple_0 = ()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: tuple_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    str_0 = "\r<|i\nu&C#e0<}u*rY']"
    module_0.match(str_0, str_0)


def test_case_3438():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3439():
    str_0 = "z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    bytes_0 = b"\x16\x12\xbd2\x19\xf21\x9c\xba1\xf3\xc5p"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    bytes_0 = b"\xd6\xf7 ^7\xe2\x18\x9e\x19<D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    str_0 = "`h'7m-Si"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    float_0 = -3470.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    int_0 = -814
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    bytes_0 = b"1\xc3L\x90\\\xdb~\xca0,"
    float_0 = -4866.4
    list_0 = [bytes_0]
    set_0 = {bytes_0}
    tuple_0 = (set_0,)
    bool_0 = False
    tuple_1 = (float_0, list_0, tuple_0, bool_0)
    module_0.match(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    float_0 = -3634.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_3447():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bool_0 = True
    bytes_0 = b"\\\xeax\xa9\xd4\x04\x1c\x1b:T"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    str_0 = "W%G#HPuWA2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    str_0 = "rP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    bytes_0 = b"\xb5\xd2o5\xf3\x9b\xfe\xb3\xbbb\x9bTw\x04\x81F;\xcd?\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    int_0 = -1025
    list_0 = []
    str_0 = "cNAa.sDQ\x0cE[7"
    dict_0 = {str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    bytes_0 = b">\x04\x9a{"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    bytes_0 = b"\xa8\x90\xcc+'\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    int_0 = -616
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    object_0 = module_1.object()
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    complex_0 = -247.1 - 96.58836j
    set_0 = {complex_0}
    list_0 = [set_0]
    tuple_0 = (set_0, set_0, list_0)
    bool_0 = True
    tuple_1 = (complex_0, tuple_0, complex_0, bool_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    float_0 = -718.996
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    bool_0 = True
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    float_0 = -575.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    bytes_0 = b"\xd9\xe8\x8bmk\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    int_0 = -5176
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    int_0 = -1372
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    bytes_0 = b"\xf5x\x95\x17;G\x01\x1f\x99\xea\xa1\xa8u/\xa3\xe5=2\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bool_0 = True
    int_0 = 702
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_3470():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bytes_0 = b"=\x83\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    int_0 = 3760
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    int_0 = -324
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    bytes_0 = b"\x05MKb\x8d\xa0P\x12U\x0e*"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    float_0 = -162.54
    set_0 = {float_0, float_0, float_0}
    str_0 = "{_3g=\t%;"
    bytes_0 = b"Q\x0f\xe3\x11\xde\xeeW{\xc8\x00"
    tuple_0 = (set_0, str_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    float_0 = 2282.906173
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    int_0 = 756
    int_1 = -1424
    list_0 = [int_1, int_0, int_0, int_1]
    dict_0 = {int_1: int_0, int_0: int_0, int_1: list_0}
    tuple_0 = (int_0, int_1, list_0, dict_0)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    int_0 = 3160
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    bytes_0 = b"7R\x07\x820\x9a"
    str_0 = "0|"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    bytes_0 = b"\x06\x182\x9d{\xe0\xe0\r\xe0Q\xef\xff{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    str_0 = "t?hK%i{)XClY%XFL\t~D"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    int_0 = 3308
    list_0 = [int_0, int_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    int_0 = -1998
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    str_0 = "Y831%e1{;9#Oo"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    bytes_0 = b"b\xe6\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    float_0 = -3642.51558
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    str_0 = "KQxb9^4("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    bytes_0 = b"\xf9\x8d\xff\x06"
    module_0.match(bytes_0, bytes_0)


def test_case_3491():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3492():
    int_0 = 1693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    bytes_0 = b"\xb0\x16\xb2\x80\xf9\x1e\x9f\xba\xcf\x82l\x87+\xcc\x05\xae\xc8\x13\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    int_0 = -2372
    bool_0 = True
    bool_1 = True
    tuple_0 = (int_0, bool_0, bool_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    str_0 = "A`Lg}@1N>\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    str_0 = "'"
    object_0 = module_1.object()
    list_0 = [str_0, str_0, object_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    complex_0 = -1279.589 + 1807.933j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    list_0 = []
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    str_0 = "-bt%eEK#+U%= xnpn"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    str_0 = ",g%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    str_0 = "\x0c\x0bYc&Wp~bph"
    list_0 = [str_0, str_0]
    int_0 = 1902
    tuple_0 = (list_0, int_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    bytes_0 = b"\xf0[\xb6Q\x18"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    int_0 = 723
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    int_0 = -1218
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    str_0 = "MVmH\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bool_0 = True
    bytes_0 = b"\x93\x12\xff\x89k\xab\xc82G\x9aWqa\x19\x0f\xa8\x8ej?:"
    list_0 = [bool_0, bytes_0, bool_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    int_0 = 4043
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    int_0 = -1989
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    bytes_0 = b"^\x8c\x84\xfb\xa5\x01\xba\xe7\xac\x84_9"
    set_0 = {bytes_0}
    list_0 = [set_0, bytes_0, bytes_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    complex_0 = 306.63643 + 1993.8442j
    set_0 = {complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    bytes_0 = b"i \x9e\xbe\xc3\xd7\xdbI\x06\xfb\xe6\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    str_0 = "#Ig49kH;O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    bytes_0 = b")\x98\xfe\x10\x0b.\x8d\xca\x89i\x8d6\xda\x88N\x9a\xc6\x87"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    int_0 = -376
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    str_0 = "PlO]TcoD#X"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    bytes_0 = b"]F\xeb\xa1\x9c\x94\xe3\xe9)~  "
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    float_0 = 3222.303
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, bool_0, dict_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    str_0 = "x[,4FKg1S/|U$'L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    bool_0 = True
    str_0 = "NPtj:-f4>JUFU"
    str_1 = "Y6Un"
    str_2 = "}_);;iV:"
    dict_0 = {str_0: bool_0, str_0: str_0, bool_0: str_1, str_1: str_2}
    tuple_0 = (bool_0, str_0, str_0, dict_0)
    bool_1 = True
    float_0 = -882.199
    tuple_1 = (tuple_0, bool_1, float_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    str_0 = "|'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    str_0 = 'o"oN&\rBBnHsrL"Y\nk'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    complex_0 = -948.8324 + 881j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    float_0 = -911.76954
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    float_0 = -3345.4963
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    int_0 = -1810
    bool_0 = True
    set_0 = {int_0, int_0, int_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    bytes_0 = b"\r\xc9\xb4\xf6O\x99[\x9a\x8a\x08\xa76"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    float_0 = 957.68665
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    str_0 = "M&p.6SIke?WY:(K_1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    float_0 = -1022.0282
    module_0.get_new_command(float_0, float_0)


def test_case_3537():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3538():
    float_0 = 927.4
    module_0.get_new_command(float_0, float_0)


def test_case_3539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3540():
    bytes_0 = b"\x92\x90>\r\xec\xba5\x04\x19\xb1.\xf6\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    complex_0 = -281.8 - 1322.763j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    tuple_0 = ()
    float_0 = 2096.7982
    dict_0 = {tuple_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    str_0 = '1*m$"XI9'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    str_0 = "AP`<"
    list_0 = [str_0, str_0]
    list_1 = [str_0, str_0, list_0, str_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    bytes_0 = b"\xec\xbdCK\xd6\xd83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    complex_0 = 420 - 4060.6668j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    int_0 = -252
    bytes_0 = b"{\x8dj"
    list_0 = [int_0, int_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    str_0 = "aiSj%"
    bytes_0 = b"j\xa7\xb9\x87\x91\xec\x7f"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    float_0 = 1928.1
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    str_0 = "bTbY\x0b[QN+~#"
    str_1 = "{8t"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    str_0 = "!DN|Q@U"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    str_0 = "w8Akrl!B$(ZnA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    str_0 = "pz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    int_0 = -662
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    int_0 = 299
    object_0 = module_1.object()
    module_0.get_new_command(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    str_0 = '689Q\x0b"qCep{si?K\tii'
    module_0.get_new_command(str_0, str_0)


def test_case_3558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3559():
    bytes_0 = b'\xc9\xf3"6`h\xde\x11\x9b\x1f'
    complex_0 = -2135.489 + 2704.7379j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    int_0 = 708
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    float_0 = -2557.9
    float_1 = 3635.0
    tuple_0 = (float_1, float_1, float_0, float_0)
    tuple_1 = (float_0, tuple_0)
    module_0.get_new_command(tuple_1, float_1)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    bytes_0 = b"`\x85\xdbWO"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    float_0 = 5268.36366
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    none_type_0 = None
    str_0 = "OMLy/"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    bytes_0 = b"\xa8\x06"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    str_0 = "\\Xm"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    bytes_0 = b"gt\x84A\xbf\x80G\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    int_0 = 56
    list_0 = [int_0, int_0, int_0]
    list_1 = [int_0, list_0]
    module_0.get_new_command(int_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1, bool_1, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    object_0 = module_1.object()
    int_0 = -5828
    set_0 = {int_0}
    module_0.get_new_command(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    str_0 = "T#/*|<PKto8b= "
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    str_0 = " Mu\tdU|e[X6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    bytes_0 = b"\xf3\xa1\xac\xe1\x8d\xa9\x8a!"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bytes_0 = b"\xed\x7f]\x9f\xeb\x8c\t\xab\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    str_0 = "Y4pl(?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    bytes_0 = b"\x8e\xe2\xae\x91&[\xf2c_\nm\x7f\x04\x9eJe\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    complex_0 = 342.7829 - 761.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    str_0 = ">Cbb-[.80L"
    bool_0 = False
    dict_0 = {str_0: str_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    int_0 = 369
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    bytes_0 = b"\xcc\xd9\x13\x10@\xa3'C"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bool_0 = True
    str_0 = "Uzw~?c?H#s}\nX[L8"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    str_0 = "]|pD*lLB6o}thMSl`Oo$"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    int_0 = 1362
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    str_0 = "zaFVzq$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    str_0 = ',"U^xLJRI,D7pcH92w;'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    str_0 = "}0P{T`@:dJc@^49u"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    int_0 = 4910
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    str_0 = "Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    bytes_0 = b"\x1a\xe0\xbe{d\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    bytes_0 = b"M\x91\x87\xdeS\xf6m?Y\x1e\xc3v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    float_0 = 1384.08
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    object_0 = module_1.object()
    float_0 = 624.0
    list_0 = [object_0, object_0]
    tuple_0 = (list_0,)
    tuple_1 = (object_0, float_0, tuple_0, tuple_0)
    module_0.match(tuple_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    int_0 = -437
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    int_0 = 567
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    float_0 = 318.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    bytes_0 = b"\x84Fx\xf5\xea\x9f\xb2\xb2J\\"
    set_0 = {bytes_0, bytes_0}
    float_0 = -2133.5939
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    str_0 = "(VFr}\x0bn=s|am\r"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    str_0 = '4q8.tRe8"K'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    float_0 = 231.575157
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    float_0 = 361.2
    module_0.match(float_0, float_0)


def test_case_3609():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3610():
    str_0 = "Ex\x0cRh;."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    complex_0 = -1719.3 + 18.291j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    bytes_0 = b"[\x03l\xf9S\x07\xab\xf3\x90s\xa1\x82\x80\x15\x9f\xde\xa3\x84"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    int_0 = -541
    float_0 = 2219.022
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    bool_0 = False
    int_0 = -4611
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    int_0 = 433
    dict_0 = {int_0: int_0}
    tuple_0 = (int_0, int_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    str_0 = "#~FF]Z!X\\\\{k~Ks=\x0bI\t"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    str_0 = "S[|Qf|V xz& c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    str_0 = "</X5}T}p0gk_\rf\x0bU>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    str_0 = "d'AtOKf&R#'\r*|}]^*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    bytes_0 = b"]1\xe5\xd3\x0f\x1e\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    bytes_0 = b"/"
    tuple_0 = ()
    tuple_1 = (bytes_0, tuple_0, bytes_0)
    list_0 = [tuple_1, tuple_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    str_0 = "S;,vv1cI[;qXCE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    bytes_0 = b"\x90G\x82D\x15~\x1b\xdav"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bytes_0 = b"\x82\xcb\x14"
    list_0 = [bytes_0]
    int_0 = -809
    tuple_0 = ()
    set_0 = {tuple_0}
    tuple_1 = (list_0, int_0, set_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    int_0 = 231
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    bytes_0 = b"\xb8\xe8x+\x83\xed\xba\xa0\x95\xe9\x8d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    int_0 = -2391
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    bytes_0 = b"\xca\x8e\xdf\x1fs\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    str_0 = "6'Y^K'o2-w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    bool_0 = False
    set_0 = {bool_0}
    bytes_0 = b"\xa9"
    tuple_0 = (set_0, bytes_0)
    tuple_1 = (set_0, set_0, bytes_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    complex_0 = -396.47 - 962.392j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3634():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3635():
    int_0 = -1590
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    object_0 = module_1.object()
    bytes_0 = b"\x89\xa3\x919\xe6"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    int_0 = 358
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0}
    module_0.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    str_0 = "YXSr&03=Em,@m_[U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    dict_0 = {}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    complex_0 = 2406.897075 - 1426.3014j
    str_0 = "3+X1Z|[\n\x0b38$$iD+"
    set_0 = {complex_0, complex_0, str_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    str_0 = "(2bP pm.+}S7m_qP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bytes_0 = b"\xdc\xc0\x15\xb08"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    str_0 = '"gi)#-Y#edOcCE^'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    int_0 = 1117
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    str_0 = "vhFkO&\n4qdNN{"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    int_0 = -3995
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    list_0 = []
    object_0 = module_1.object()
    list_1 = [list_0, object_0, list_0, object_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    complex_0 = -1403.42 - 680.54898j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    bytes_0 = b"\\\xad\xb1TLn"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    str_0 = ":!Klq}TH7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    float_0 = -29.967217
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    str_0 = "S{\tJ>uep.4}p5g"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    int_0 = 2561
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    float_0 = 4155.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    int_0 = 898
    module_0.match(int_0, int_0)


def test_case_3662():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3663():
    str_0 = "JU\r*+gJ-Z\x0ba#n"
    module_0.match(str_0, str_0)


def test_case_3664():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3665():
    str_0 = "ta_r2:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    str_0 = "xzJX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    str_0 = "X8d>_L<`Ur}i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    str_0 = "(XFyZ\\T?n7YdsN7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    bytes_0 = b"\x88\x8d6T\x1e\x96\x98sE!\xb9\xff\xb8\x14\x18]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    complex_0 = 708.94 - 1859j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    complex_0 = -533 + 1276.46j
    list_0 = [complex_0, complex_0, complex_0]
    bool_0 = False
    int_0 = 2484
    tuple_0 = (list_0, bool_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    str_0 = "tch/"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    int_0 = 680
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    bytes_0 = b"\x19R\xb6\xad"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    float_0 = -935.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    int_0 = -2529
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    bytes_0 = b"\xbb\x87\x0b\xb0\xbe\xa1/7\xab\x16\xc2Aw"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    bytes_0 = b"D\x05<X!\xdco\xd5\xd8\x07F"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    str_0 = "\r4P|*xo&7--'"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    bytes_0 = b""
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0)
    int_0 = 4614
    tuple_1 = (tuple_0, tuple_0, int_0, int_0)
    module_0.match(tuple_1, tuple_0)


def test_case_3681():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3682():
    bytes_0 = b"\x8e\xbd\x9d\x01s0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    str_0 = "yU\t&r`Pv#}Qxn<:"
    str_1 = "xu\x0c'Bz]L"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    int_0 = 2592
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    int_0 = 2129
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    float_0 = 4659.185
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    int_0 = 1480
    bool_0 = False
    dict_0 = {}
    tuple_0 = (int_0, int_0, bool_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    str_0 = '=={uGZ1"tG8*4Ldbx\x0b]'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    int_0 = 657
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    str_0 = "tPU*"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    float_0 = 1145.29
    module_0.get_new_command(float_0, float_0)


def test_case_3696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3697():
    float_0 = 3485.16651
    bool_0 = False
    dict_0 = {float_0: bool_0, float_0: float_0, bool_0: float_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    float_0 = 1212.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    float_0 = 2161.52
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    list_0 = []
    dict_0 = {}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    str_0 = "Z}C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    float_0 = 499.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    float_0 = -1580.96
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    float_0 = -1445.631
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, object_0, bool_0)
    bytes_0 = b"\xba\xf4\xee\xac\r\xb6\xf8\x1d\xedI"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    complex_0 = -1694.0168 + 1069.57115j
    float_0 = -837.9
    module_0.get_new_command(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    str_0 = "{~o]6?W_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    float_0 = 642.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    str_0 = "W'}SA\t+\"2,:eRX:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    str_0 = "m$*"
    float_0 = 1550.5373
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    float_0 = 3669.6232
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    bytes_0 = b"\x95\xf6c\x89,\xf4g\xe4y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    int_0 = 1126
    bool_0 = True
    float_0 = -2188.081
    set_0 = {int_0, float_0}
    tuple_0 = (int_0, bool_0, float_0, set_0)
    tuple_1 = (tuple_0, set_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    int_0 = -1822
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    str_0 = ":N+GrG339"
    none_type_0 = None
    str_1 = "ElS"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    int_0 = 1277
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    int_0 = 1574
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    int_0 = 917
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    float_0 = -2092.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    int_0 = -909
    str_0 = ""
    object_0 = module_1.object()
    tuple_0 = (int_0, str_0, str_0, object_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    int_0 = -710
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    str_0 = "W\x0b&u"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    str_0 = '[.BH8Mj"'
    list_0 = []
    dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    complex_0 = -1452.011152 - 3564.22j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    complex_0 = 1944.01837 + 1954.5973j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    int_0 = -1273
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    str_0 = "lk9xES!%x?"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    float_0 = -1762.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    str_0 = "$(5zk#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    set_0 = set()
    float_0 = -994.01
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    bytes_0 = b"\x1b\xb4\xad\xfb\x9f\x0e\xea o\x80\x9d\xcc\xcdE_?j\xbb;?"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    int_0 = 1891
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    str_0 = "IMqqK%fuR_"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    int_0 = -4979
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    bool_0 = True
    int_0 = -909
    list_0 = [bool_0, bool_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    int_0 = 808
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    float_0 = 779.244
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    complex_0 = -1484.18 + 1027.87608j
    complex_1 = 460 + 1619j
    module_0.match(complex_0, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    bytes_0 = b"j;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    dict_0 = {}
    bytes_0 = b"{\x0f\xce\x10\x9c\xb5\t\xa8\x90"
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (tuple_0, bool_0, bool_0)
    tuple_2 = (dict_0, bytes_0, bool_0, tuple_1)
    module_1.object(**tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    str_0 = "_8[bpz2nLju!HM[;p^xh"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    str_0 = "R?j[N\n~] "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    list_1 = [list_0, object_0, object_0, list_0]
    module_1.object(*list_1)


def test_case_3748():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3749():
    int_0 = 392
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0}
    list_0 = [dict_0, tuple_0, dict_0, tuple_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    str_0 = "o\n/fPKxzsM> 9)v#:mZ!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    bytes_0 = b"\x81\xcb\xa1\x18o\x1d\x07\xf6X\xa5\xab\xe8\x1b_"
    int_0 = 2541
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_3752():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3753():
    bytes_0 = b"a\xc3\xedT\x02\xf9\xa8\xb0\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bytes_0 = b"\x0e\xadA\x93\xec\xea\x11\xc7\x93\x0e\\"
    list_0 = [bytes_0]
    bytes_1 = b"\xa01\xe8\xb1\x9b\xc6\x16\xc3j2\xc9"
    tuple_0 = (list_0, bytes_1)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    dict_0 = {}
    int_0 = 884
    tuple_0 = (dict_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    float_0 = -1536.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    int_0 = 2540
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    str_0 = "dcGl:\rdf"
    str_1 = ',(}Zv"T\n6D'
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    float_0 = 277.643522
    object_0 = module_1.object()
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: object_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    str_0 = ";o_<i48L?73[*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    str_0 = "Hu%r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    int_0 = 21
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    int_0 = 454
    str_0 = "\tgWWx`a+\t-|\n"
    dict_0 = {int_0: str_0, str_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    complex_0 = 2042.8955 + 2757.768j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    str_0 = "P<"
    set_0 = {str_0}
    list_0 = [set_0, set_0, set_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    float_0 = 1002.64
    object_0 = module_1.object()
    dict_0 = {float_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    float_0 = 3749.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    bytes_0 = b"\x9ell\xe6\x9av\x19\xcd\x0f\xd7\xfcQp\x1c$%\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    str_0 = "4!z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    int_0 = 1721
    float_0 = 431.8
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    bytes_0 = b"\x86\xe9k\xe9"
    list_0 = []
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    float_0 = 3203.32128
    list_0 = [float_0, float_0]
    str_0 = "s'r_5A)"
    tuple_0 = (list_0, str_0)
    list_1 = [tuple_0]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    set_0 = set()
    object_0 = module_1.object(*set_0)
    tuple_0 = (object_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    int_0 = 545
    tuple_0 = (int_0, int_0)
    bool_0 = False
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    bool_0 = True
    set_0 = {bool_0}
    dict_0 = {}
    module_0.get_new_command(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    int_0 = -1678
    bool_0 = True
    set_0 = {int_0, bool_0, int_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    complex_0 = 1153.372 + 230.318j
    bool_0 = False
    int_0 = -3240
    dict_0 = {complex_0: complex_0, bool_0: int_0, bool_0: bool_0}
    tuple_0 = (complex_0, bool_0, int_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    int_0 = -693
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    str_0 = "HHp*jM'GSOlGpj#zr^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, set_0)


def test_case_3785():
    pass


def test_case_3786():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3787():
    str_0 = "\t&vo{V+1_iIi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    int_0 = -1293
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    bytes_0 = b"\xa0\x13J\xb4\x96\x9f\x82M\xfd\x03z\xcf\xe0\xa3\x9f\xd5"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    int_0 = 2790
    complex_0 = 1281.2302 - 903.98111j
    module_0.match(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    bytes_0 = b"@\xd6\x9a\x16\xcbT\x08\ri\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    int_0 = -296
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    str_0 = "7o0J8YJ\t><Dz"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    int_0 = -2014
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    none_type_0 = None
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    int_0 = 1382
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3798():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    bool_0 = False
    str_0 = "`<-kus+;hQ_fvsU"
    tuple_0 = (str_0,)
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    str_0 = "\t[IsrXVO~[NMnkC+H."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    float_0 = 354.2965
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    tuple_0 = ()
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    complex_0 = 2745.5 + 1619.47j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    bytes_0 = b"o\xa2\xff\xc9\xdf\x1aK\x86\xbe\x1c\xd0!\x96Y|\x0c\xaa\x19"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    bytes_0 = b"\xb8T\xe1!\xb0\xec^fl\x05xX1D\\\xf4\xbf;S"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    bool_0 = False
    list_0 = [bool_0]
    int_0 = 1964
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    int_0 = -2990
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    none_type_0 = None
    int_0 = 474
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    float_0 = 880.7927
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    int_0 = 684
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    complex_0 = -1313.6746 + 1010.1219j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    bytes_0 = b"T\xaf\xfe\xfdV\xd3D\x05\xa3K.\x82o>E\xc1"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    float_0 = 1725.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    complex_0 = -246 - 1831.25j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    bytes_0 = b"$\x8a\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    int_0 = 314
    str_0 = "]i7PC}/!\n"
    tuple_0 = (int_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    bytes_0 = b"\x90"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    str_0 = "o%)S(+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    bytes_0 = b"\x02\xf3\xfb\x89\xa8WS\xd1\xc6g\r\x81\xb7u[\tA/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    str_0 = "j:(qA/[89\r"
    int_0 = 3973
    dict_0 = {str_0: str_0, str_0: str_0, int_0: int_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_3824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3825():
    int_0 = 2619
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    str_0 = "+uI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    str_0 = "Y:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_3829():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3830():
    str_0 = "=0#'cl>U"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    str_0 = "#f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    str_0 = "%I#6'Sw3X:"
    str_1 = "Z\tO4>d|1]+u"
    set_0 = {str_0, str_0, str_1}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    str_0 = "]O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (list_0, bool_0, list_0)
    tuple_1 = ()
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    int_0 = 2430
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    tuple_0 = ()
    object_0 = module_1.object()
    tuple_1 = (tuple_0, object_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    float_0 = 4575.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    complex_0 = -262.52655 - 2333.443j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    complex_0 = -288.32427 + 2955.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    str_0 = ")\r7-lg:iEJ7`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    int_0 = 2181
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    str_0 = "-"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    set_0 = set()
    bytes_0 = b"J\xc1\xf4\x9c\xa0b\xda\xaba\x9a\x1c\x87\x02"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    str_0 = "4x4F\\vb5pp+!HD G,3_0"
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0, str_0: bool_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    int_0 = 301
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    bool_0 = True
    str_0 = "zVSlErW=90BH&J>p{|F"
    tuple_0 = (bool_0, str_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    object_0 = module_1.object()
    str_0 = "il9"
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    dict_1 = {object_0: dict_0}
    module_0.match(dict_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    str_0 = "rJ#UI{UM"
    dict_0 = {str_0: str_0, str_0: str_0}
    bytes_0 = b"\xea`\xbd\x84\x13\xab\xdb"
    list_0 = [bytes_0]
    bytes_1 = b")\xd3\x8c\xb2\xe8\xd0\xf6\xb2\xe3Ax3"
    tuple_0 = (dict_0, bytes_0, list_0, bytes_1)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    bytes_0 = b"\xaev\x8bH\x81\xed\xe7\x9abtt\xe4\x01nB\x06M\xc2|\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    bytes_0 = b"0d\xfe\xc3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    bytes_0 = b"41\x11\x03\xa8\xf0\x04\x01$\x91\x89b\xdf"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    bytes_0 = b"A7\xa1]\x00 V\xc7\x83\x07V4\xd7\x9dm\n\x94*U"
    module_0.match(bytes_0, bytes_0)


def test_case_3859():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3860():
    int_0 = 2545
    module_0.match(int_0, int_0)


def test_case_3861():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3862():
    set_0 = set()
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    float_0 = 366.84894
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    str_0 = "C_\x0br}`eK~</"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    int_0 = 2178
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    str_0 = "M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    int_0 = -98
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    str_0 = "Q"
    list_0 = [str_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    int_0 = 3942
    module_0.match(int_0, int_0)


def test_case_3870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3871():
    str_0 = "L\ne~&_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    bool_0 = False
    bytes_0 = b"~`"
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, bytes_0, list_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    object_0 = module_1.object()
    float_0 = -1776.617
    module_0.get_new_command(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    float_0 = 1017.9
    module_0.match(float_0, float_0)


def test_case_3876():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3877():
    int_0 = -518
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    float_0 = 900.46
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


def test_case_3879():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3880():
    int_0 = 4629
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    bytes_0 = b"\xb2\xde\\\xb1\x07\xdb\xf6\xad?\x81\xcd\xa9\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    str_0 = "_U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    bytes_0 = b"\xaaA\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    int_0 = 1241
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    float_0 = -943.96
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    str_0 = "4|>6."
    list_0 = [str_0]
    list_1 = [list_0, str_0, list_0, list_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    int_0 = 1374
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    bytes_0 = b"}\xf4IT\x1e\xa0\x8b\x8f\x1cnf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    float_0 = -369.54
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    float_0 = 1362.97
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    bytes_0 = b"\xa1X\xb5\x9a\x8c\x9e\x93<\xa0Q\xfd\xc0\xc32\xa0Q"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3893():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: set_0}
    list_0 = []
    object_0 = module_1.object()
    set_1 = {object_0}
    tuple_0 = (bool_0, list_0, set_1, list_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    str_0 = "@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    int_0 = -3133
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    str_0 = "Cb{`<\tUq"
    module_0.match(str_0, str_0)


def test_case_3898():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3899():
    str_0 = "d>5#lw\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    float_0 = -3778.3
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    str_0 = "gP@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    str_0 = 'l-Am>u``LA7|k\\yH]P@"'
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    str_0 = "#?hD@,fy/ pce)Oo2<O"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    bytes_0 = b"4\xd1\xe4F\xd4\x1e\xb7Y\xc3\xfa\x83\xf5\x82\x1e"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


def test_case_3906():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3907():
    str_0 = "I}{bNtJ;,u:=%Q>u|ib"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    bytes_0 = b'\xdc"bG'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    object_0 = module_1.object()
    str_0 = "g36Wf`^vTVj="
    module_0.get_new_command(object_0, str_0)


def test_case_3910():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3911():
    bytes_0 = b"v\x01"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


def test_case_3912():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3913():
    bytes_0 = b'dl\x07\x9eyN@C\xb1\x14\x19"\xc0\x9d'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    float_0 = -2415.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    int_0 = 440
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    int_0 = 1151
    module_0.get_new_command(int_0, int_0)


def test_case_3917():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3918():
    float_0 = -109.1789
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    str_0 = ".>]u\n8[qP2()"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    str_0 = "(mQlbXGaCkR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    float_0 = -54.46
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    int_0 = -491
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (int_0, int_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    int_0 = -3057
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    str_0 = "QBl}[j$5}C<<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    int_0 = -54
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    str_0 = "@^4i.@Ff3VCW9IyrQaLm"
    list_0 = []
    float_0 = -927.0
    tuple_0 = (str_0, list_0, list_0, float_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    int_0 = -2049
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


def test_case_3930():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3931():
    float_0 = -47.923
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_3932():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3933():
    str_0 = "G"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    none_type_0 = None
    str_0 = "20ZC8%"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    str_0 = "/[9+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    str_0 = "R*9Cx3m-KZDj6"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    int_0 = 6877
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    bytes_0 = b"\x84A\x96\x8d\xab*\x89\xd6\xdc\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    list_0 = [object_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = (tuple_0, list_0)
    str_0 = "|:@\x0b`]0\n^p"
    tuple_2 = (tuple_1, str_0)
    module_0.get_new_command(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_3942():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3943():
    str_0 = "a|BVXC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    str_0 = "I`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    float_0 = -1518.448959
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    str_0 = "YH"
    set_0 = {str_0, str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    int_0 = 1373
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    str_0 = "-Z9cz%]=gU8w56EG^1HL"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0]
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    int_0 = -2118
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bytes_0 = b"\xbc\xd9\x98\x0b\x07V\xb9\xea\xec\x84\x86\x95\xc5\xc3\x8f\xca\xacb"
    str_0 = "yXOnrf9819R*"
    tuple_0 = (set_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    float_0 = 735.813905
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_3954():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3955():
    int_0 = 3281
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    str_0 = "havrX\t!'r2{a)c!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    str_0 = "6"
    list_0 = [str_0]
    list_1 = [list_0, str_0, str_0, str_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    str_0 = "AqZIcQd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    str_0 = "euh{V1qq#Fcw0E"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    int_0 = 1998
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    bytes_0 = b"\x04\xef$g"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    float_0 = 1475.517
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    str_0 = 'Ti@;+"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    none_type_0 = None
    int_0 = -1752
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    float_0 = 3192.699639
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_3968():
    pass


def test_case_3969():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3970():
    str_0 = "\\i,\x0cVxtB{xS)Jf`uK*\n"
    module_0.get_new_command(str_0, str_0)


def test_case_3971():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3972():
    int_0 = 131
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    str_0 = "u1y-}8xvqW0m\x0c|n|<Fv0"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    complex_0 = 1248.3 + 28j
    module_0.match(complex_0, complex_0)


def test_case_3975():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3976():
    str_0 = "D"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    bytes_0 = b"\xc2\xfd'\x1cl\xbcc&0\x83\xc90\x84"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    int_0 = 386
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    bytes_0 = b"\x97+\x04#\xd1\x82\xa7\x04.#\x05\x047;m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    str_0 = "[\t,*&k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    int_0 = -3008
    set_0 = set()
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    bytes_0 = b"|A\xb4\xb6\x0c\xa0\xaf\x7f~\xd1\t\x8b\xb4\xf2\x03\xfd_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    tuple_0 = ()
    int_0 = 2807
    tuple_1 = (tuple_0, int_0)
    bool_0 = False
    tuple_2 = (tuple_1, int_0, int_0, bool_0)
    module_0.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    bytes_0 = b"uJl\x18\xc9\xd4\x128\xdbw\xb0\xfe\xae"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3985():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3986():
    int_0 = -435
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    set_0 = set()
    tuple_0 = (set_0,)
    int_0 = 1529
    list_0 = [tuple_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    str_0 = "kJ6L!C1l9k0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    int_0 = -1912
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    float_0 = -27.81
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    bytes_0 = b"\xeay\xbf\xd5\xcf\xdd*\xa8V\x9f\x1a\x95\x02"
    tuple_0 = (bytes_0,)
    tuple_1 = (tuple_0,)
    str_0 = "PZt2=g["
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    float_0 = -1152.013
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    bytes_0 = b"\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    str_0 = "-lsJoVD^!n%!7_"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    str_0 = "B2k\t@E"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    str_0 = "#a?Io5av|/iU`@X"
    int_0 = -1125
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    bool_0 = False
    str_0 = "XMwQmhJ`V8-Kg#y="
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    str_0 = "Qu."
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    list_0 = [dict_0, dict_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    str_0 = "h\x0cps7I-;7&00SA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    complex_0 = 68.706093 - 1089j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    complex_0 = -974 + 1060j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    bytes_0 = b"8S)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    bytes_0 = b"\x998\xd5%\xee\x15\xb2\x92\xf3[\xf3\xa1\xf7\xe72\x98\xf4\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    bytes_0 = b"\xb3\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    int_0 = -402
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    float_0 = -2040.7908
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    float_0 = 2592.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    int_0 = -3048
    tuple_1 = (list_0, list_0, list_0, int_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    float_0 = 4195.162016
    module_0.match(float_0, float_0)


def test_case_4014():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4015():
    complex_0 = 3666.71989 - 5668.32046j
    int_0 = 847
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    int_0 = -771
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    str_0 = "x{XQYlAlXot{>\t9N8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    int_0 = -181
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    dict_0 = {}
    float_0 = -1239.945802
    list_0 = [dict_0, dict_0, dict_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    str_0 = 'cb"`o$fb'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    bytes_0 = b'\xb6\xf1\xdb\x07\xee5"<w\x1b\x10\xa5M-w'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    str_0 = 'tORu]d"&\rjhuF#.'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    str_0 = "5\n,"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    str_0 = '~8QUM>ks0T"e_%m||'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    int_0 = 1469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    list_0 = []
    object_0 = module_1.object(*list_0)
    int_0 = 1818
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    int_0 = 300
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    int_0 = -1861
    module_0.get_new_command(int_0, int_0)


def test_case_4032():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4033():
    str_0 = "i}%e\x0b(MIO:){"
    list_0 = []
    dict_0 = {str_0: str_0, str_0: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    str_0 = "fM5Qr%Ji!mC#NPDcBl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    float_0 = 679.03
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    float_0 = 501.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    int_0 = -1043
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    str_0 = "|\r\n\\I,i@Iu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    bytes_0 = b"\xac\xf0\xb9O\x08O\tLS\xe5\xdb\x94\x9e\x11S\x98\x9e\x8a\xbf\x99"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    int_0 = 1482
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    int_0 = -3340
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    bool_0 = True
    tuple_0 = (list_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    bytes_0 = b"\xab\xb6\xb7\x9c\xab9\\W\xd2w\xdb\t\x0c\x16\xbd\x81d[\x88\x83"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    bytes_0 = b"3\xfdX;Rd\xdeZ\x08\xff\xe2L\x85\xa3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    int_0 = 3074
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    int_0 = 1410
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    bool_0 = False
    tuple_0 = (bool_0,)
    bytes_0 = b"\x9f"
    bytes_1 = b"\xab\x10\xc2\xbc\xce-\\\xf8\xc6#vk\xee\xa1\xc79^\xa7"
    tuple_1 = (bytes_0, bytes_1)
    set_0 = {tuple_0, bool_0, bool_0, tuple_1}
    module_0.get_new_command(set_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    int_0 = 131
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    float_0 = 3372.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    str_0 = "d\x0cplqJ>$EO[y"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    complex_0 = -3603.380516 - 648.174889j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    bool_0 = False
    tuple_0 = (complex_0, complex_0, dict_0, bool_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    float_0 = -906.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    int_0 = 635
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    str_0 = "_i"
    str_1 = "\x0b["
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    int_0 = -458
    bool_0 = False
    tuple_0 = (int_0, bool_0, int_0)
    bool_1 = False
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    bool_0 = False
    bytes_0 = b"a\xcfPZ\xf3D\xca\xa0\xe3\x83\xd1\xa6\xd9\x9c\x19b"
    list_0 = [bool_0, bytes_0, bytes_0, bytes_0]
    int_0 = -1104
    tuple_0 = (bool_0, bytes_0, list_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    int_0 = 1769
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    int_0 = -1152
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


def test_case_4062():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b"\x1f\xca\xc0\x9c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    float_0 = -311.45113
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    float_0 = 814.7079
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    bytes_0 = b"\x8b\xf8\x10"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    str_0 = "|oXZ"
    tuple_0 = (str_0,)
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    str_0 = "W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    str_0 = "9(L$q;v{T0YVX)6"
    module_1.object(*str_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    int_0 = -317
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    bytes_0 = b"6,\xeb*\xa9\xb7\x93c\xa1V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    str_0 = "#]"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    float_0 = -2968.41
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bytes_0 = b"\xf8j\xec\t\x9b>\x8e^]\x91t\xb0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    str_0 = "uWhKQs,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    bytes_0 = b"5\x0e\x98\x1d\x11l\xc5\x1a\x9d\xb5\xe8N\x1dR!\xa4/\xc5\xe3\x9d"
    object_0 = module_1.object()
    module_0.get_new_command(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    int_0 = 2092
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    bytes_0 = b"\x0e\x94,\xb4$\x1b@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    int_0 = -2139
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    str_0 = "$u!/6OG#f9|Jg<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "h*t~U=}jkI2{\t{C "
    object_0 = module_1.object()
    dict_0 = {str_0: list_0, str_0: object_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    bytes_0 = b"\x06\xca\x08\xfbr\xe1A\xa2c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    int_0 = -1059
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, tuple_0]
    str_0 = "m|'+&hSN\n-f.LShX"
    set_0 = {int_0, tuple_0, str_0, int_0}
    tuple_1 = (list_0, set_0, set_0)
    module_0.match(tuple_1, tuple_0)


def test_case_4087():
    object_0 = module_1.object()


def test_case_4088():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4089():
    complex_0 = -176.725983 - 809.17292j
    module_1.object(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    str_0 = ":,WL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    str_0 = "d_"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    bytes_0 = b"_\x85\xd9\xab\x19\xf3\xe2}\xf1\x81:\x9e\xb9\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    complex_0 = -5310.23459 - 1789.585458j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    int_0 = 5768
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    float_0 = -460.26752
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    float_0 = 2752.9072
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    int_0 = 630
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    complex_0 = -1395 - 2046.6j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    str_0 = "}Y[K"
    str_1 = "$N7$0|"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    complex_0 = 919 - 342j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    int_0 = 240
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    int_0 = -2204
    str_0 = "-}]f"
    bytes_0 = b"~\r\x0f\x12%`\xf7P"
    float_0 = -1244.54
    tuple_0 = (bytes_0, str_0, int_0, float_0)
    tuple_1 = (int_0, str_0, bytes_0, tuple_0)
    bytes_1 = b"\xe9\xd4r\xd5\xef\x83\xa7h\xe6\xe0\xed\x85\xd3nG)g\xaa\xa7$"
    module_0.get_new_command(tuple_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    str_0 = "\t~a2-Fw[zxWU=F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    int_0 = -939
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = "R%@0N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    str_0 = "hN6"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    float_0 = -1185.0
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    float_0 = 1095.5628
    bool_0 = True
    bytes_0 = b""
    list_0 = [float_0, float_0]
    tuple_0 = (bool_0, bytes_0, list_0)
    tuple_1 = (float_0, tuple_0, float_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    str_0 = "<H@Yy\\w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    str_0 = "JX~i\rkXgeyQImB"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    bytes_0 = b"%=\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bytes_0 = b"\xd7\x08\x87\xbe\xf1\x80J\xc7}\xc6\xb1\xe3\xc1^\xb1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    bytes_0 = b"\xf1\x1aM\xb5\xb3\xff\x82\xf2\xe6\x03\xf5\xf43\xfdt\x8b\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    int_0 = -1714
    module_0.get_new_command(int_0, int_0)


def test_case_4119():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4120():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    bool_0 = True
    str_0 = "GdaVq"
    list_0 = []
    tuple_0 = (bool_0, str_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    str_0 = ":D6"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    int_0 = 1584
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bytes_0 = b"zG\x8f?\xad\xbcb\xb7\xff]\xf7\xc0\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bytes_0 = b"]\xd2\x7fh"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    list_0 = []
    str_0 = "(T"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    int_0 = 3558
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    int_0 = 1535
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    str_0 = "V&hE!\x0b7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    int_0 = 1136
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    str_0 = "T<FXUI6Q9b=*cCF%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    bytes_0 = b""
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    str_0 = "5=&RG9]0YF"
    str_1 = "qV&"
    dict_0 = {str_0: tuple_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_4135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4136():
    int_0 = -2765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    bytes_0 = b"\xa9\xfbu\xc8\x0b\xa2\x95\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    str_0 = ":;p,ML@z<wk+A"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4140():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4141():
    bool_0 = True
    float_0 = -1631.3
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, float_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    int_0 = 4163
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    str_0 = "s:+50"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    int_0 = 582
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    str_0 = 'n_X1\tdxIO%@-2Q($)AN"'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = 1815
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    none_type_0 = None
    bytes_0 = b"\x94, HO"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bytes_0 = b"K\xa6\xfc*\xf5\x96\x17\xb1\xd6\xf2<\xecy]\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bytes_0 = b"l\xb5/}\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {bool_0: bool_0}
    tuple_0 = (list_0, bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_4151():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4152():
    int_0 = 1286
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    str_0 = 'R;"]xiK?Km ?m3'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    bytes_0 = b"\xb9%\xe3\n\xc1\x07\xb3'n\xc4\x17\xa2F\xab~\x0e\xb0\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    float_0 = 744.969
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    int_0 = 746
    module_0.get_new_command(int_0, int_0)


def test_case_4158():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4159():
    float_0 = -3254.0
    list_0 = [float_0, float_0, float_0]
    str_0 = "\\n!MG68(\x0b#6tV\\eAsi"
    set_0 = set()
    dict_0 = {str_0: set_0, str_0: float_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    str_0 = "o,Z,kdv)[?`8}Z}xj#<E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    str_0 = "LJs$l$X=="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    int_0 = 2260
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    int_0 = 1028
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    bool_0 = True
    int_0 = 2055
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    int_0 = 243
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    int_0 = 587
    set_0 = set()
    list_0 = [int_0, set_0, int_0, set_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    str_0 = "-PM/"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    str_0 = "U+}|NY&l_-Vp;Seog<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    complex_0 = -924.08716 + 523.09j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = []
    tuple_1 = (tuple_0, list_0)
    module_0.match(tuple_1, tuple_0)


def test_case_4172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4173():
    float_0 = -47.8044
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    int_0 = -1794
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    float_0 = 1119.2649
    list_0 = [float_0, float_0, float_0]
    tuple_0 = (float_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    int_0 = -1771
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    str_0 = " 3#P\n&Fw4NIT) V%>{"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    str_0 = "AZ.K"
    str_1 = "%z5?Tw^KXK1`hZ2gj"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    str_0 = '%q,"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    bytes_0 = b"_\xeb\xcf\x8fj"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    str_0 = "&$e|}A?z@#mEL_ns"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    int_0 = -1489
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_4184():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4185():
    bytes_0 = b"\xcb\xbe.OW\xc3\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = -1526
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    int_0 = 520
    str_0 = "*(pC|*0"
    set_0 = {int_0, str_0, str_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    float_0 = -2737.6
    bytes_0 = b'\xaa`"\xc4\xd3\xa6%'
    list_0 = [float_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    bytes_0 = b"a\xbc\x17\xec"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    list_0 = [set_0]
    module_0.match(list_0, set_0)


def test_case_4193():
    pass


def test_case_4194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4195():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1, bool_1}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    str_0 = "RKIumHU.sL <'P*j8+5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    int_0 = -330
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    int_0 = -1120
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    float_0 = 1550.99
    float_1 = 942.174
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    bytes_0 = b"\xf4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4201():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4202():
    int_0 = -3838
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    int_0 = 1816
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    bytes_0 = b"\xd7\x10\x06\x9d|\x1a\x07\xe0\xd7j\xa4\xc4mp\xe0="
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    complex_0 = -1565 + 878.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    str_0 = "3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    float_0 = -2265.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    str_0 = "21i"
    set_0 = {str_0}
    module_1.object(*set_0)


def test_case_4210():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4211():
    int_0 = 2268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    int_0 = -1656
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4214():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4215():
    bytes_0 = b"\xd2Y|@@B\xc9\xf6\x99\x93\xc1\xa1\xe5\xcfD\x15\x17\x0e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    float_0 = 2169.82
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    bytes_0 = b"\xc5r"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    int_0 = 1282
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    complex_0 = -836.8067 + 1751.4j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    int_0 = -688
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    int_0 = -1200
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    float_0 = -2442.2991
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    float_0 = 315.70973
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    str_0 = "qMoA0f"
    module_0.match(str_0, str_0)


def test_case_4225():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4226():
    float_0 = -923.693
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    float_0 = -3166.528405
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    int_0 = 344
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    bytes_0 = b"\xc8\x07\x89(D'\xc5>\xc1;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = "TL/Vm]>0/"
    str_1 = "}?8h]"
    dict_1 = {str_0: str_0, str_1: bool_0, str_0: dict_0}
    module_1.object(*dict_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    bytes_0 = b"@\x90\x7fb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    bytes_0 = b"\xdc\xfc\x0b\x87q\xda"
    float_0 = -341.5
    set_0 = set()
    tuple_0 = (bytes_0, float_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    float_0 = -1140.619
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    bytes_0 = b"\xe0\xb5\x182V\xa5Y\x92\x8f-\xb8M\x83\xc5p\xdd(\xdal\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    str_0 = "iBp;fP1=(E) fDU<-Mkn"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    int_0 = -2545
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


def test_case_4237():
    pass


def test_case_4238():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4239():
    str_0 = "'Z.N#+5!\tA\x0cAF"
    str_1 = ""
    str_2 = "~vI,~u3e"
    str_3 = "d+[vy4"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_3: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    float_0 = -2936.06368
    module_0.match(float_0, float_0)


def test_case_4241():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4242():
    float_0 = -2.325
    module_0.get_new_command(float_0, float_0)


def test_case_4243():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4244():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    complex_0 = 2917.26975 - 2137.06j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    int_0 = -1821
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0)
    module_0.match(tuple_0, int_0)


def test_case_4247():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4248():
    str_0 = "\r/[V\rpVb'A16'P@P3<"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: str_0, str_0: str_0, tuple_0: str_0, tuple_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    none_type_0 = None
    bytes_0 = b"_\x8d"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    str_0 = "{E5@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    int_0 = -848
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    set_0 = set()
    tuple_0 = (int_0, dict_0, set_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    complex_0 = 1369.1306 + 6059.2062j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    int_0 = -632
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    float_0 = -1039.827
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    bytes_0 = b"M}\xe9U\xdc\xd1\xdb\x90\xecw/C\x96\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    str_0 = "%z76^"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    int_0 = 1000
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    int_0 = 1228
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    bool_0 = True
    float_0 = -2697.0
    bool_1 = False
    str_0 = "xH`V|v\t}xi"
    tuple_0 = (bool_0, float_0, bool_1, str_0)
    list_0 = [tuple_0, bool_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    float_0 = -573.528892
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    int_0 = -642
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    int_0 = 192
    set_0 = {int_0, int_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    float_0 = -252.8365
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    complex_0 = -1098.95423 + 944j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    str_0 = 'S"m EEw+jssMd#\x0c'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    str_0 = "6kxy#4QRP"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    int_0 = -631
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    int_0 = 1169
    str_0 = "_H\n_~mq"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    str_0 = "!J\x0b~Q \\0\x0babI5gRZg}>D"
    module_0.match(str_0, str_0)


def test_case_4272():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4273():
    str_0 = "7BA Eewi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    bytes_0 = b"\xdc\xad\xaf\xb2\xdf\xc5\xed\xc6\x94\xa4D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    int_0 = 879
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    int_0 = 1757
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bytes_0 = b"g\x9c\x02w\xe2mO\x89G\xe5\xe1~@(O,&cL\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    int_0 = 1619
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    int_0 = 869
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    int_0 = 165
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    bytes_0 = b"\xe4\xd0\xd9\xd5[\x8d\xfe\x85$\xf2\xb5a\xdc\xd9\x95y\xa5\xa7"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0, bytes_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    bytes_0 = b">\xdd}\xcf\xf7\xba|\xd9"
    set_0 = {bytes_0}
    complex_0 = -1827.3 + 2837.83093j
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    str_0 = "m4/:a|nu;O>Z"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    str_0 = "r_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    str_0 = "+z7"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bytes_0 = b"\xbb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    int_0 = -5639
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    str_0 = "MU%9|;:0i\t:["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, list_0)


def test_case_4291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4292():
    int_0 = -1418
    bytes_0 = b"\xe5\xc7;\x9fpBT0\xc3\xb4k\x03Z\x0c"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bytes_0: int_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    int_0 = -1505
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    set_1 = set()
    int_0 = -1154
    tuple_0 = (set_1, bool_0, bool_0, int_0)
    dict_0 = {}
    tuple_1 = (tuple_0, int_0, dict_0, int_0)
    tuple_2 = (set_0, tuple_1, bool_0, dict_0)
    module_0.get_new_command(bool_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    bytes_0 = b"\x8d\xd2\xa6L\x12\xcf\xf4\xf0\xf5\x04\x81{w\xa6\xc5\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    bytes_0 = b"\xc8\x99?\x9a#\x98hhB\xe4\xb6\x1a\x8e\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    str_0 = '!zM~xePADKv$"k\rOIj~!'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    bytes_0 = b"\xbc\x9a\xf9\xfe>\xed\x9e\x06\xa5\x14\x14\xa4\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    bytes_0 = b"T\x82\nO\xfb\xd4\xb9\xbd\x86\x08\xce1\x80\x06\xb7h\xd5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    bytes_0 = b"\xeb\xcf\xbf$qq\x9a\xd0\xe2\x80"
    int_0 = 1082
    module_0.get_new_command(bytes_0, int_0)


def test_case_4301():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4302():
    str_0 = "<a "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    int_0 = -2605
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    bytes_0 = b"\xadf"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4305():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4306():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    float_0 = 2767.44111
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    float_0 = -955.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    bytes_0 = b"\x8f"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    int_0 = -877
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    str_0 = "]f0[@|0\rsZK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    complex_0 = 263 + 575.3j
    bytes_0 = b"*\xd4\xe5"
    module_0.get_new_command(complex_0, bytes_0)


def test_case_4313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4314():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


def test_case_4315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4316():
    int_0 = -167
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    bool_0 = False
    int_0 = -4067
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, int_0: int_0}
    list_0 = [dict_0, dict_0, int_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    complex_0 = 787 + 3335.075j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    bytes_0 = b"]\xc37C\xd2\xba\x98>\xce\xdcV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    float_0 = 445.6809
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    int_0 = -709
    module_0.match(int_0, int_0)


def test_case_4322():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4323():
    int_0 = 1648
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    bytes_0 = b"B{\xd9\xf9]\xd5>\xd6\xb1\x9d\xeb\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    int_0 = 507
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    bytes_0 = b"\xc3H-\x19\x83\x9c\xe9mm\xde\xc8\x01\xca\n6P"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    str_0 = '"KP.ga'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    int_0 = -882
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    float_0 = -1267.0
    list_0 = [float_0]
    tuple_0 = (float_0,)
    bool_0 = True
    int_0 = 2152
    set_0 = set()
    bytes_0 = b"\x06`\xc6\x95\xaa\xf0\xe3\xe9\xe6\xbe?z\xa1p5"
    tuple_1 = (bool_0, int_0, set_0, bytes_0)
    tuple_2 = (list_0, tuple_0, tuple_1)
    module_0.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    int_0 = 2166
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    bytes_0 = b"\xcc)\xf7\xd1\x96r\xe8F[d\xcf\xac\xb9\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    bytes_0 = b"A\xd5)\x8d}\x13j\xe8\xee"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    str_0 = "C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    bytes_0 = b"}v\x1dK\xa9\x87\xad9\x02%\xe0\xfdw\xd7!c\xd0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


def test_case_4336():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4337():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    str_0 = "(8v't\ro]6,K\rG+XQ{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    tuple_0 = ()
    dict_0 = {}
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    complex_0 = -3704.6 + 1124j
    bool_0 = True
    tuple_0 = (complex_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    float_0 = -924.158204
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    float_0 = -528.3618
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    bytes_0 = b"$\x8c+\xddA\xed\x86\xbd\x11q5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    int_0 = 313
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    bytes_0 = b"T\xc5[\xa1M?YU:\r"
    list_0 = [bytes_0, bytes_0]
    set_0 = set()
    int_0 = -756
    tuple_0 = (set_0,)
    tuple_1 = (list_0, set_0, int_0, tuple_0)
    module_0.get_new_command(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    tuple_0 = ()
    float_0 = 962.17
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    bytes_0 = b"\x01\xdcD\xb7\xad.+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    str_0 = "Q<Z-tZYkBg:z[}\rB\t:~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    bytes_0 = b"\n\xfd\x9bc\xac"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    int_0 = -3814
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    bytes_0 = b"i\xc9\xfc\x13\xfa\xf7f\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4357():
    int_0 = 674
    tuple_0 = (int_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    float_0 = 1827.828808
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    str_0 = ":"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    bytes_0 = b'X\xacE\xf4S\x9bP\xa0\xfd\x89[\x84\xed!\xb1\x0e\x85"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    int_0 = -180
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    int_0 = -848
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


def test_case_4364():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4365():
    float_0 = 1546.2423
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    bytes_0 = b"\xc7ZR\xbb\x05i\xe9\xddo|A\x8c'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    bytes_0 = b"\xee)3Q\xeb\xb3\xd6#\x93\x81\x9dWI0X"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_4370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4371():
    set_0 = set()
    int_0 = 818
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    bytes_0 = b"\xadvENH%@\x05\xfc}\xcb\x8bP\xa3\x99\xd8\xd8\x18\xde\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    bytes_0 = b"\xcf':\x079OsV\xbb'}\xb7\x7f\xd7\xe5N\x03\xde\xa2"
    object_0 = module_1.object()
    dict_0 = {bytes_0: bytes_0, object_0: bytes_0, bytes_0: object_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    float_0 = 1137.2
    str_0 = "sZBrH4vF\\z=fYs"
    tuple_0 = (float_0, str_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    complex_0 = 35.023822 + 654j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    str_0 = "ttf{N]XeGO"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    bool_0 = True
    str_0 = "5es6>C"
    bool_1 = False
    dict_0 = {bool_0: bool_0, str_0: str_0, str_0: str_0, str_0: bool_1}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    int_0 = 735
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    str_0 = ""
    tuple_0 = (str_0,)
    bool_0 = True
    set_0 = {tuple_0, bool_0, tuple_0, bool_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    float_0 = -2853.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    bytes_0 = b"\x86\xe0[\x1d\xb3\xde\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    bytes_0 = b"\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    int_0 = -4952
    set_0 = {int_0}
    tuple_0 = (int_0, set_0)
    str_0 = "zwRef?\x0cT8,`KJ_Kw7\x0c~"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bytes_0 = b"\x7f{\x98?\x84w\xbf\x04\xe7M\xd5\x03\xb4\xae+"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    str_0 = "xy"
    tuple_0 = (str_0,)
    bool_0 = False
    str_1 = "CW\np~v#|;j"
    dict_0 = {tuple_0: bool_0, str_0: tuple_0, bool_0: str_1, str_1: str_1}
    bytes_0 = b"\xf9\x9dSE\x1bS"
    tuple_1 = (dict_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    bytes_0 = b"z~\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    bytes_0 = b":\x91\xfb\xd1%\x1b\x04,\x9alC"
    bool_0 = True
    list_0 = [bytes_0]
    bool_1 = True
    tuple_0 = (bool_0, list_0, bool_0, bool_1)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    float_0 = 601.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    float_0 = -99.583
    list_0 = [float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    int_0 = 1803
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    bytes_0 = b"JN\x1a\xe4g\xc4\xfaH\x16\x99\xa7\xa4\x1a\x92k\xe5\r\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    float_0 = -2249.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    float_0 = -1032.09488
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [dict_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    int_0 = 1632
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    int_0 = 207
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    bytes_0 = b"5\xdcZ{\xbd\x14a\x12w\xdc\x16\x81\xd15"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    float_0 = -1537.1093
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    complex_0 = 45.12395 - 2830.905692j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    tuple_0 = ()
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    float_0 = -1218.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    int_0 = 137
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    str_0 = "pmG\x0cfue"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    int_0 = 1063
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    int_0 = -1251
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, dict_0]
    int_1 = -2363
    bool_0 = True
    tuple_0 = (int_0, list_0, int_1, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    complex_0 = 1333 + 828.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    str_0 = "9+x/],O6Sml\ryp"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    bytes_0 = b"\xa1H\xa1\xc8\x0e\xc0\xfbf\x9e\xec\xdc\xb1|\x15\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    bytes_0 = b"\xd0\x87\x94\x13\x82\xa8\xee*\x9b\xd9p\x17\xfaA\x7f\x97V<\xa1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    bool_0 = True
    bytes_0 = b"\\\x01\x9a\x14\xa9\x9b\x02\x88"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    str_0 = "u."
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (str_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    float_0 = -4272.5713
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    float_0 = 269.098
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    bytes_0 = b"\xd75\xaf\x0f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    bytes_0 = b"\x87\xe1\xc2\x19\x045\xb1:h"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    int_0 = -1001
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    complex_0 = 855 + 2082j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    complex_0 = -755.36 + 2213.68575j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    complex_0 = -1186.1 + 41.7203j
    module_0.match(complex_0, complex_0)


def test_case_4423():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4424():
    float_0 = 2794.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    float_0 = 840.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    bytes_0 = b"\\\xf3\xa1\xef\xc6\xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    float_0 = -2404.435
    tuple_0 = (float_0,)
    bool_0 = False
    str_0 = ";"
    tuple_1 = (tuple_0, bool_0, tuple_0, str_0)
    set_0 = {tuple_1}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bytes_0 = b"\x93\xdc\xa2\xa0E"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    int_0 = 272
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    complex_0 = -3802 + 1856.6j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bytes_0 = b"yk\x08\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    float_0 = -1184.070879
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    str_0 = "\x0bG~1= ~:;?m#y}"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    float_0 = 2931.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    float_0 = -1366.62648
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    str_0 = "Np*yf7Zv7<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    str_0 = "wApqx&T-!qdm2TFWJ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    complex_0 = 87.90951 + 2262.2553j
    list_0 = [complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    dict_0 = {}
    list_0 = [dict_0]
    tuple_0 = (list_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    int_0 = 224
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    int_0 = 2250
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    bytes_0 = b"\xba\x94o\x11\xd8\x88x>\x83\x13\xfd\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    str_0 = "(eFM;`Ks\nN"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    bytes_0 = b"\xe3}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    str_0 = "7"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = -1611
    bytes_0 = b"Wv\x11\xd1\x04Yu\x963"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: bytes_0}
    tuple_0 = (dict_0,)
    tuple_1 = (int_0, int_0, tuple_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    str_0 = "rFh{2\n+9v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    str_0 = "cr4lLW!]n:)(@^\n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    complex_0 = -603.41 - 1442.83337j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    int_0 = -1013
    module_0.get_new_command(int_0, int_0)


def test_case_4454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4455():
    str_0 = "<oA]/k5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    int_0 = -609
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    str_0 = "O[ol\nsqG#A6\r;*LoA0a<"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4458():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4459():
    int_0 = -3857
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    int_0 = 2185
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    complex_0 = 224.12811 + 2233.44701j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    int_0 = 1849
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    str_0 = "(h:d6_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    str_0 = "{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bytes_0 = b"\xd9q\xeb\xbba`~\xe5\xe5"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    bytes_0 = b"V\xe9\xfb\xd3\x95r2_\xe7\x01\xa4\xe1\\\xc5\x06m"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    str_0 = "H]H]Q|}pP"
    set_0 = {str_0, str_0}
    bool_0 = False
    tuple_0 = (str_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    bytes_0 = b"{\x95\xe7\xe0(\xf9p^Y\x13\xac\x86\xb8\xdf\xf6X"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, bytes_0, bytes_0, bytes_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    float_0 = 1582.511
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    str_0 = '[2K\x0c~C"'
    dict_0 = {}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    str_0 = "ws2\x0c)I)+Xs,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    bytes_0 = b"\xce\xe9\xe7\x9c\x06\x8b\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    str_0 = "wh2\n\x0c[')"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    str_0 = "4Z:t3'*B /m"
    tuple_0 = (str_0,)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    int_0 = -1493
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    int_0 = 221
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    bytes_0 = b"\x89\x8a\xb4\xa4\x86pR\xf3I\xb6\x92\xbc\x10<\x12\x13"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bytes_1 = b"\xa2d\xf56\xf3\xbc7w"
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    str_0 = "2$9;%]m"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    bool_0 = True
    complex_0 = 1739.5383 + 861j
    bytes_0 = b"2\xd42"
    float_0 = 1255.3042
    list_0 = [float_0]
    dict_0 = {bool_0: bool_0, bool_0: complex_0, bytes_0: list_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bytes_0 = b"\x1e\xb1\x9d\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    str_0 = "3\r(c]*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    float_0 = -2017.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_0: bool_0, bool_0: bool_1, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bytes_0 = b"\xe6\x9c\xea;\x0fO:\xb5Dp{"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: bytes_0, tuple_0: bytes_0, tuple_0: bytes_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    bytes_0 = b"\x8c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    bytes_0 = b"w\xea\x92[c!3lY\xfb4\x98\xa3\x16\xefd"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0, set_0]
    str_0 = "Hp%B`G9,U\t}"
    module_0.match(list_0, str_0)


def test_case_4489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4490():
    bytes_0 = b"s|\xdc\x8d\xcf\xd9\xfa\x1b\xf6R\x92\x00\x1d"
    set_0 = {bytes_0, bytes_0}
    object_0 = module_1.object()
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    str_0 = "F88B{ql4n@^\"u`'kuQHl"
    set_0 = {str_0, str_0, str_0}
    float_0 = -107.0
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    int_0 = -1606
    set_0 = {int_0, int_0, int_0}
    list_0 = [int_0, set_0, set_0]
    float_0 = 2743.0888
    tuple_0 = (float_0,)
    tuple_1 = (float_0, int_0, tuple_0, tuple_0)
    tuple_2 = (int_0, tuple_1)
    list_1 = [tuple_1, tuple_2, float_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    bytes_0 = b"\x9bp\xf8]\x84\r\xd9\xab\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    str_0 = "brVyD>eU?j..}2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    set_0 = set()
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    int_0 = 1446
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    str_0 = "owD^8j?5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    float_0 = 1534.06
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    str_0 = "2?18*2L&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    bytes_0 = b"\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    str_0 = "lZQ|b*EZv^}'UL"
    int_0 = 2525
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bytes_0 = b"W\xae"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4506():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4507():
    str_0 = "KTpQ^E0}*y&mH@s"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    float_0 = 3724.241
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    float_0 = 1574.221948
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bytes_0 = b"\x19\x92\xae.\xcb\x01\x17\x97\x1d\x06\xc8P-d\xf9"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    str_0 = "i}J,@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    bytes_0 = b"-\x83Wm"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    bytes_0 = b"\xeei\xab\xc9-\xb9o,\xff\xeb\xb4F\x1f\xf1r\x1a\x1a\x1a\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    str_0 = "o4Lszn1lFiXdSd)t7tk5"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    int_0 = -2500
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    list_0 = []
    str_0 = ".Qr"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


def test_case_4518():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4519():
    str_0 = "`2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    complex_0 = 1698.16 - 3330.7j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    int_0 = -4190
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    int_0 = -4216
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    complex_0 = 655.5702 - 3207.725j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4525():
    complex_0 = -2006.933 - 1569.95j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    int_0 = 1255
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    str_0 = "\t9\x0b#\\*fDZ/9/#i\x0c-x^7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    int_0 = -2561
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    str_0 = "[] &p<\x0bwe3a{9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    int_0 = -512
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    bytes_0 = b"\x02\xf45\x92\xa2\xfd\xee\x01vt\xcfBx\x1a$[\x1e\xd2Q"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    bytes_0 = b"\x98u"
    int_0 = 261
    float_0 = 1437.77912
    dict_0 = {bytes_0: int_0, bytes_0: float_0, int_0: bytes_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    str_0 = "<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    bytes_0 = b"\x15\xeeRh\xa9\xe9+\x11\xb4T\xf3Z\xb30\xfc\xfc\x0e\n\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    str_0 = "\"z \r1$'/="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    float_0 = 760.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    float_0 = 2156.017807
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    bool_0 = False
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    int_0 = -1532
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (int_0, tuple_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    tuple_0 = ()
    str_0 = "xB3iDA-tT61/x\x0c=xo."
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    float_0 = 1893.889044
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    bytes_0 = b"\x82n\xde\x9d\x03\xb3$P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    float_0 = 315.22813
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    str_0 = "{h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    str_0 = "m'w/1{jh\x0bv\\a)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    bytes_0 = b"\x04vC\x04\xab\x16r\x12\xcf\x0f\x81\x1bHh\x04\x1eI:\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    str_0 = "jpAH\r\x0c.IFgM26M\n,G8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    float_0 = 1469.673001
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    int_0 = 926
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    complex_0 = -444.2369 + 2129.14589j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    float_0 = 367.8232
    module_0.match(float_0, float_0)


def test_case_4558():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4559():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    float_0 = -706.40567
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    float_0 = 1313.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    int_0 = 1902
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    float_0 = 2304.135443
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    bytes_0 = b"\x96\xe5R<\x0c\x9a\xd9,\xe5ZHp\x03\xf3\xee\xc4\xca"
    bytes_1 = b""
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    str_0 = "tzd1`*UZh$Hg['Zv#\"gh"
    set_0 = {str_0, str_0}
    list_0 = [set_0]
    bool_0 = True
    bytes_0 = b"\xa6"
    tuple_0 = (set_0, list_0, bool_0, bytes_0)
    tuple_1 = (tuple_0, set_0)
    module_0.match(str_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    bytes_0 = b"\x0c"
    module_0.match(bytes_0, bytes_0)


def test_case_4568():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4569():
    bytes_0 = b"9\x19X\xc0Q\x1c\xe2A\xfa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    int_0 = -1010
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_0, bool_0, bool_1]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    bool_0 = True
    set_0 = {bool_0}
    int_0 = -896
    tuple_0 = (int_0,)
    tuple_1 = (bool_0, tuple_0, bool_0, set_0)
    int_1 = 640
    tuple_2 = (set_0, tuple_1, int_1)
    module_0.match(tuple_2, set_0)


def test_case_4575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4576():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    float_0 = -3623.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    float_0 = -1592.123
    module_0.match(float_0, float_0)


def test_case_4579():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4580():
    bytes_0 = b"\x1e\xbbZ\xe7\x9d\xa6\xc8v\xc05\x83\x81`\xbe\x9ctj\x08\x8e\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    int_0 = 454
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    float_0 = -573.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    complex_0 = 5420.37542 + 695.669j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    str_0 = "F\\S\tu!J[4ZKl\x0c,J<"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_4586():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4587():
    complex_0 = -123.5107 - 4890.71j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    str_0 = " xJ1sK'] \tTj##NH"
    bool_0 = True
    bool_1 = False
    tuple_0 = (str_0, bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    str_0 = '%,4F10M2"TN}NlTM/7'
    none_type_0 = None
    str_1 = "'y'z"
    str_2 = "r\\%W<}Q'"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    bytes_0 = b"\xac\xbc\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    bytes_0 = b"\xe3\xd8\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    int_0 = 1734
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0, int_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    int_0 = -231
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    float_0 = 4947.7921
    module_0.match(float_0, float_0)


def test_case_4596():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4597():
    str_0 = '\x0bS"+'
    str_1 = "-#iP="
    tuple_0 = (str_0, str_1)
    dict_0 = {tuple_0: str_1, str_0: tuple_0, str_1: str_0, tuple_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    bytes_0 = b"5"
    tuple_0 = (bytes_0,)
    bytes_1 = b"q\x989\xcd qk\x8e\x10B\xe4\x83G"
    module_0.get_new_command(tuple_0, bytes_1)


def test_case_4599():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4600():
    str_0 = ""
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    int_0 = -628
    list_0 = [int_0]
    bool_0 = True
    tuple_0 = (int_0, list_0, bool_0, int_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    bytes_0 = b"\xb8\x85\x91\xb9\x1d\xb8U\xfb\x18Qc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bytes_0 = b"\xd4\xf48\xc8\x99\xd0*,\xf3\xb2\x99\\\xc5\xc1%\xf6\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4605():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4606():
    str_0 = "'*-x&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    bytes_0 = b"\x08\xfa'_{\xe0\xa7Tgjk\xcc\xe7\x1dg\xff\x18\x8b\xbe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    float_0 = -92.1
    set_0 = {float_0, float_0}
    tuple_0 = (float_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    str_0 = "=un&Ex-G]"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    str_0 = "V"
    module_0.match(str_0, str_0)


def test_case_4611():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4612():
    str_0 = "h :?nq!GGo{0:B/Qn`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    str_0 = "5S"
    bytes_0 = b";\xa1\xd4{\xfc\x16\x03"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    bytes_0 = b"zipy"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    str_0 = "I~f}) OhT^'&f#{v/"
    int_0 = -3128
    str_1 = ""
    dict_0 = {str_0: str_0, str_0: int_0, str_0: int_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    str_0 = ">>E8"
    tuple_0 = ()
    set_0 = {str_0, tuple_0, str_0, tuple_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    none_type_0 = None
    str_0 = "Yt}RP#ek"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    str_0 = ";1d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    bytes_0 = b"R\xfe\xe9\x8d\x89\xe6\x90R\xdc\xfd\xf6"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    str_0 = "Jv`k=z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    int_0 = -4143
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    bytes_0 = b"\xc8q!\xef\x0bs\xce\x8c~\xe5\xd2\xb9\x84t\xa4<\x0e\xba\xb5j"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    bytes_0 = b's\xeb\xdb)\xd9\xdd\xf4\x01\x01\xff"\xad\x98g\x15\x83\x8d\xff'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = True
    list_0 = [bool_0, bool_0, set_0]
    tuple_0 = (bytes_0, set_0, bool_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    none_type_0 = None
    bytes_0 = b"\x91Q\t\x0cc\xdb\xea\x19\xfa_"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    str_0 = "To-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    int_0 = -693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    int_0 = -3102
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    str_0 = "0N=G{gaHQ=!F=D-Bxa"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    int_0 = 3779
    bool_0 = False
    set_0 = {int_0, int_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    str_0 = "%PY)B\r?$.D Z \rS"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bytes_0 = b"\xb3W\x0eX\\\xf7hh\x10\x81\xa5\xc7\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    int_0 = -899
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    float_0 = -24.0779
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_4637():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4638():
    int_0 = -192
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    int_0 = 180
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    complex_0 = -1861.8 + 2283.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    bool_0 = True
    complex_0 = 2671.32314 - 3067.3j
    list_0 = [bool_0, bool_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bytes_0 = b"\xae\x8f\xb8\xee\xf8\xc3\xbb\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    int_0 = 2653
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    str_0 = "\x0cfPiI<\"(U'pF\x0c`,e%oc4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    str_0 = "7EgMS6hO(Lj\r:dt.~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    int_0 = 90
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    bytes_0 = b"\xddQ\xb0\x97r\xa2\x03\xd2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    str_0 = "oIl8U"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    int_0 = 3795
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    bool_0 = False
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    float_0 = -2091.221
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    str_0 = "}ay8?4 o"
    str_1 = "#r1?L"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    none_type_0 = None
    int_0 = -2976
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    str_0 = "%8"
    str_1 = ""
    str_2 = "T3KnvK=Qtg"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    int_0 = -2720
    list_0 = [int_0]
    bytes_0 = b"8\\\x87\xf8\xcd6\xbd\xe9"
    set_0 = {bytes_0, int_0, bytes_0, int_0}
    tuple_0 = (int_0, list_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    bytes_0 = b"\xc7\xae\x9aD4\x9bs\xa4.\x19\x88W\xf8\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    int_0 = -1561
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    int_0 = -1700
    tuple_0 = (int_0, int_0, int_0, int_0)
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    int_0 = 739
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4663():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4664():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.match(tuple_0, tuple_0)


def test_case_4665():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4666():
    int_0 = 3056
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    object_0 = module_1.object()
    str_0 = "s2puLR="
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bytes_0 = b"\xea\xdf\xc9\xe3h\xa7`\xec"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    float_0 = -1594.51
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    int_0 = 1109
    bool_0 = False
    list_0 = [int_0, int_0, int_0, int_0]
    set_0 = {int_0}
    tuple_0 = (int_0, bool_0, list_0, set_0)
    module_0.match(tuple_0, tuple_0)


def test_case_4672():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4673():
    str_0 = "Bn*px9t _TkMD"
    none_type_0 = None
    str_1 = "EI#/_T\rl2y8=[g"
    str_2 = "\nT\nfFN]\x0b%hX_"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    float_0 = -1363.73387
    tuple_0 = (bool_0, dict_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bytes_0 = b"\x16Ox\xfa=1Z\xb0\x07\xfb\x8c+\xdc\xbb\xa4y\x83\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    str_0 = "WB^OOA>D9<FM\\mr;jU'@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    none_type_0 = None
    int_0 = -1359
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    bytes_0 = b"x\x15\xbek\x01\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    float_0 = -668.8
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    int_0 = 796
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    int_0 = 6391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    bytes_0 = b"\xe7\xcc\xf71\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = "L)3M91R8ly7;A"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, bool_0: str_0}
    list_0 = [dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    str_0 = "cV1%nE\\c#7'k"
    str_1 = ""
    dict_0 = {}
    tuple_0 = (str_0, str_1, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    int_0 = 1194
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    str_0 = "uuJ|cj6)kK"
    str_1 = ",IT21oT nw"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    str_0 = "\x0btw<U~LjF!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    float_0 = 1033.764
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    str_0 = "j[j&qq|,\tNVwJ"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    str_0 = "'By\x0c-ru<ot"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    str_0 = "TdPs\x0c>??c1bo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    int_0 = 1223
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    int_0 = -1359
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    str_0 = "+Iyht,m\n\r^"
    tuple_0 = (str_0,)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    none_type_0 = None
    int_0 = -3577
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    bytes_0 = b"K\xdf\xbc\x15\xfeiddp\xceQ\x7fk\x1d<'G"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    bytes_0 = b"n\xdbbj\xc5O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    float_0 = 2013.87
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    int_0 = 1453
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    str_0 = "D~%Y#'c"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    bytes_0 = b'\x87\x18\xe7xm=\xe0\r\xf9\x08|"\xdf\xa1\x85\xaa\xdc-E%'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    int_0 = -576
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    str_0 = "U"
    module_0.match(str_0, str_0)


def test_case_4712():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4713():
    int_0 = -421
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_1, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    float_0 = -65.0
    set_0 = {float_0, float_0}
    str_0 = "SWRW{k,O9|k!z7TNg"
    tuple_0 = (set_0, str_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    str_0 = "8OiC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    str_0 = "B T\tolF]g\x0bI8hnBA[|*J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    str_0 = "I'7\tm.D"
    list_0 = []
    tuple_0 = (str_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    bool_0 = True
    int_0 = -166
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bytes_0 = b"T}\xba\xd4\xe4\xb9\xf9\xd2\xe0,.\xa0\x16zd\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    bytes_0 = b"\\\x0b\xe9\x148$\xd1\xb4\xfc`7\xf6C\xf2\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    int_0 = -745
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    none_type_0 = None
    bytes_0 = b"\x843U8slI\x1c\xed\xd4\x82\xe2\x96\xe2\x13n"
    tuple_0 = (bytes_0,)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    int_0 = -1446
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    none_type_0 = None
    str_0 = "m@n>K1sRDajg-"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    bytes_0 = b"\x90\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    int_0 = -3402
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    none_type_0 = None
    int_0 = -492
    tuple_0 = (int_0,)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    complex_0 = -1080.141 + 1689j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    int_0 = -2506
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    bytes_0 = b"\xbe!\xc1\xb2\xd9\x9d\x17ZOK\x80"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4733():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4734():
    str_0 = "Glb5l0M(\n"
    int_0 = 2518
    module_0.get_new_command(str_0, int_0)


def test_case_4735():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4736():
    bool_0 = True
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    bytes_0 = b"=\xbf9\x86\x92\x06\x1c\xac\xbf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bytes_0 = b"\x07 \xe2(\x06\xd5\xd3'\xea\x10\n"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    str_0 = "cG"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    bytes_0 = b"p\xban\xf6(\x196"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    bytes_0 = b"\xad\x860q\xca\x1d*\xe0\xc6NW^bl\xc3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    str_0 = "\tq5\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    str_0 = "j*1IB|y^a'M~\r$vly"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_4745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4746():
    float_0 = 720.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    float_0 = 1282.333
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    str_0 = "}$EJDa*Jwl0zf\to#X=j"
    set_0 = set()
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    int_0 = 1771
    int_1 = 383
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    float_0 = 1267.105
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    bytes_0 = b"\xc8hO\xe1\x18\xd6r:\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    float_0 = 1350.72651
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    int_0 = -1137
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    complex_0 = 654.432411 + 2401.99j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    float_0 = 4106.594737
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    bytes_0 = b'U"\xdeT*\xe3\xe2\xa4\x16:\xed"\xect\xbdmo\xe5\x9c'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    float_0 = -1782.8492
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    int_0 = 2460
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    int_0 = 26
    bytes_0 = b"\x8b\xdc\x90\xfdB\x92\x84&\xb2\x0b"
    tuple_0 = (int_0, int_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    tuple_0 = ()
    int_0 = 476
    float_0 = -2857.0
    bytes_0 = b"D\xc3VOk1\xee\xf1\x7f\xb8,\x85\xe1$\xc1\x8e\xd1[`"
    tuple_1 = (tuple_0, int_0, float_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    complex_0 = 2275 - 2341j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    bytes_0 = b"\x99A\x8bi\xb9\xd4-\x9d\x968"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    bytes_0 = b"X\xef9\xa6N\x13\x89\xec\xdd>\xd6\x0c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    int_0 = -995
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    str_0 = "\x0byr"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    str_0 = "pYO@dEL65q1K"
    module_0.match(str_0, str_0)


def test_case_4773():
    pass


def test_case_4774():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4775():
    bytes_0 = b"v\x17\xdbD\xab\x85\xac\x0eI\xaf\xbbBv5\xad\x99c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    int_0 = 2053
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    bytes_0 = b"\xf1\xb6"
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    bool_0 = False
    object_0 = module_1.object()
    bool_1 = False
    tuple_0 = (bool_0, object_0, bool_0, bool_1)
    module_0.match(tuple_0, object_0)


def test_case_4779():
    pass


def test_case_4780():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4781():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4782():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4783():
    bytes_0 = b"\x00W\xfb\x14@qb0\x82\xf80\x89\xd5\xbfn\x80U\x859b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    str_0 = "-wy.oH"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    none_type_0 = None
    str_0 = "s\x0c@#6 IN"
    str_1 = "8"
    set_0 = {str_0, str_0}
    dict_0 = {str_0: none_type_0, str_1: str_0, str_1: set_0, str_1: set_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    str_0 = "<*AYrg4jh<GpYo1\rm[?t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {bool_0: bool_0, tuple_0: tuple_0}
    tuple_1 = (bool_0, tuple_0, bool_0, dict_0)
    tuple_2 = (bool_0, tuple_1, bool_0)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bytes_0 = b"\x95\xa7\x1d\xc1M\x87c\xbe>\xa3\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    int_0 = -2140
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    float_0 = 1586.037812
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    str_0 = "#ME ~o0\t"
    none_type_0 = None
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    int_0 = 295
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    int_0 = 515
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    complex_0 = 2882.487113 - 1648.859433j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    float_0 = 3605.0425
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    int_0 = -1461
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    int_0 = 1288
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    complex_0 = -2920 + 1669j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    bytes_0 = b"\xc7\xe4)\x04,T\xc7<3\x94|y\xe7\x07i"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    str_0 = "w"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    int_0 = 275
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    str_0 = "x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    tuple_0 = ()
    list_0 = [tuple_0]
    object_0 = module_1.object()
    list_1 = [list_0, object_0, tuple_0, tuple_0]
    str_0 = ""
    str_1 = "qoST"
    dict_0 = {str_0: list_0, str_1: list_1, str_1: list_1}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    int_0 = 4034
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    complex_0 = -359.8005 - 2405.82j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bytes_0 = b"\xfe\xc7}3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    str_0 = 'R\tzdZb00"<H'
    dict_0 = {str_0: str_0}
    module_1.object(*str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    float_0 = -1536.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    float_0 = 1062.54
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    str_0 = " s%+=|WSHE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    int_0 = -1597
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    bytes_0 = b"}\xde1(\x98~\xed\x07l\xfd\xc9\x06\x98[#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    int_0 = -73
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    bytes_0 = b"5\x81"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    float_0 = 1228.685
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


def test_case_4820():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4821():
    str_0 = "N68]AZzeXt,oVx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    str_0 = "rf0>QIdEhL>fX+["
    tuple_0 = (str_0,)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    float_0 = -2345.672033
    list_0 = [float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    str_0 = "|<e]SiC"
    float_0 = -2743.246517
    list_0 = [str_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bytes_0 = b"\xbf\xba\x9f\xc21O\xee\x84\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    str_0 = "h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    object_0 = module_1.object()
    str_0 = "g{}E+M3_0ZDiw3p\\+l"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    bytes_0 = b"\x1d\xd1eq\xfb\x19"
    tuple_1 = (tuple_0, bytes_0)
    module_0.get_new_command(object_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    int_0 = 212
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    int_0 = -501
    int_1 = -1416
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    bytes_0 = b""
    int_0 = -802
    tuple_0 = (bytes_0, bytes_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    str_0 = "|StL4U\tvVA!tYJF"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    bytes_0 = b"\xcc\xb8\xb0\x92"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    int_0 = -1613
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    int_0 = 1619
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    object_0 = module_1.object()
    tuple_0 = ()
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    float_0 = -460.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    str_0 = '\x0c%e?D]\r|FL#9&@"n'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    object_0 = module_1.object()
    list_0 = [object_0]
    str_0 = "ln]Sl})Gm\t&~:JMu>_"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    str_0 = "4}x7iQL\x0bB?F T<PIJS>"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    str_0 = 'lzm"+P`}82G)BS{nPO'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    int_0 = 3414
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    int_0 = 660
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    bytes_0 = b"Ur\xeb1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    str_0 = "lI\\YlhiT;}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    bytes_0 = b"Oz"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    float_0 = 1164.5
    object_0 = module_1.object()
    str_0 = "\x0cjAd\\vDtjVY!c"
    list_0 = [float_0, object_0, float_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_4851():
    pass


def test_case_4852():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4853():
    str_0 = "N~|-f~>c>w\rbkY;q0d["
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    str_0 = "%sw<waiU}i\\Zr*yG\x0c\x0buc"
    module_0.match(str_0, str_0)


def test_case_4857():
    pass


def test_case_4858():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    str_0 = "y9f-ulE_[R$-"
    bytes_0 = b"\xeb\x8dC\x9c0\xf4mN\x1fe\xcb\xa4\xc8xl\xb0r"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    int_0 = -275
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    str_0 = "`3"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    float_0 = -4029.85736
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bytes_0 = b"\x93\x0f\x1d\x9c=2:*h|"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    bytes_0 = b"\xe1Ry\xff\x89\xaa\xe5K"
    list_0 = [bytes_0]
    set_0 = {bytes_0, bytes_0, bytes_0}
    str_0 = "|Ov@J^mNE6="
    tuple_0 = (bytes_0, list_0, set_0, str_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    str_0 = "%1dTo$eCP;"
    bool_0 = True
    set_0 = {str_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    float_0 = -2083.0
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    float_0 = 2256.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    none_type_0 = None
    bytes_0 = b"\x10e\x8c\x95\xe0T\xa6\x1d\xa2*\x7f\xda7=8\xce"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4871():
    complex_0 = 759.22992 - 1792.871304j
    bool_0 = True
    set_0 = {complex_0, complex_0, bool_0, complex_0}
    list_0 = []
    tuple_0 = (set_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    str_0 = '\x0bZ,zMf\n`44J"X:\\'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    complex_0 = 411.62 + 3062j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    none_type_0 = None
    float_0 = -5513.305
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    str_0 = "}RGaU"
    int_0 = 65
    tuple_0 = (int_0,)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    str_0 = "wffvv,\r8\\]_=\rmC\x0cl0AZ"
    int_0 = -1874
    set_0 = {str_0, int_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    complex_0 = -637.9 + 2901.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    int_0 = 2184
    list_0 = [int_0, int_0]
    bytes_0 = b"\xaa\x8a\xdc\xed\x92\xa2\x0br\x85\x07\xf1B\xe0;\x10\x7f|<u)"
    tuple_0 = (bytes_0, list_0)
    module_0.match(list_0, tuple_0)


def test_case_4880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4881():
    int_0 = -1144
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    float_0 = -317.083
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    str_0 = "Rps-1_"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    int_0 = 789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    int_0 = -577
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    bytes_0 = b"\x1eH_}"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    str_0 = 'jH>.dTnP9"Q+sB*B'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0]
    str_0 = "vo"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    complex_0 = -2458.253874 - 2721.1193j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    float_0 = -2594.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    none_type_0 = None
    bytes_0 = b"F\x0c=\xd5\n?\xaf\xfa\x02\xcb\xc1\x0e\xffr\x1d\x95b\xbd"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    int_0 = 1142
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    int_0 = 528
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    float_0 = -981.434722
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    bytes_0 = b"\xc9\xf0\xc1K\x06\xf6\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    int_0 = 342
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    str_0 = "_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    bytes_0 = b".7\x8fb|H\xc9\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    bytes_0 = b"\xb9\xf3Z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    complex_0 = 336.1153 + 4340j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    float_0 = 396.2575
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    str_0 = "\\4)!#Eo"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


def test_case_4904():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4905():
    str_0 = "xW7W1>[P)G\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    bytes_0 = b"\x17\xe8\x0e\xc4\xf3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    bytes_0 = b"U\xcb\x05"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4908():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4909():
    int_0 = 578
    bool_0 = False
    int_1 = -510
    tuple_0 = (int_0, bool_0, int_1)
    module_0.get_new_command(tuple_0, int_1)


def test_case_4910():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4911():
    int_0 = -133
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_4915():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4916():
    float_0 = -1411.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    str_0 = "EbnU J,Ik3"
    module_0.get_new_command(str_0, str_0)


def test_case_4918():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4919():
    str_0 = '(#dXYDb;"?'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    str_0 = ","
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    bytes_0 = b"\xeb\xa3\x9f\xb0\x16}d\x99H\x82\xee\xfb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    int_0 = 1068
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0, int_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_4923():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4924():
    complex_0 = -274.575215 + 1881.9j
    bytes_0 = b"\xc3L"
    module_0.get_new_command(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    bool_0 = True
    bytes_0 = b"]\x95K"
    set_0 = {bool_0, bytes_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_4926():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4927():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    float_0 = 2719.94
    module_0.match(float_0, float_0)


def test_case_4931():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4932():
    int_0 = -4891
    int_1 = 1441
    dict_0 = {int_0: int_0, int_0: int_1, int_0: int_1, int_1: int_0}
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    str_0 = "T#Z&m73N)iT2_H"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    int_0 = 1745
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    int_0 = 3580
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    str_0 = ",J-K.z\rj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    bytes_0 = b"\xd1\xeb"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    int_0 = -2068
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    bytes_0 = b"?Q\x88\xe6\x99"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    int_0 = 1552
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    bytes_0 = b"\x9b\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    bytes_0 = b"7"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    int_0 = -1817
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    bytes_0 = b"1\xa2\x11\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    bool_0 = True
    set_0 = {bool_0}
    str_0 = "'?#w8div~,$[m@~"
    tuple_0 = (str_0,)
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    float_0 = 2299.7802
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    int_0 = 4118
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4949():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4950():
    int_0 = -2918
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    int_0 = -1193
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    str_0 = "Tn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    bytes_0 = b"^M\x967\x08\x84\xfc\xf0j\x98\x8cb\xa4\x0b\xf0b\xc1+1"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = '\x0cunoo"%;(Ofb\x0cM\rRAW'
    bytes_0 = b"\xa1h\x99\xe6M<\xa3^\xf9\xdf\xfcG\xb7t\xc4"
    list_0 = [str_0, str_0, bytes_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    str_0 = "PKYRS(X=,uP\n17m4)-"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    float_0 = -1007.0
    tuple_0 = (float_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    none_type_0 = None
    bytes_0 = b"#\x08\x9b\xbc>\xf8"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    int_0 = 3209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    float_0 = -1070.5
    float_1 = 138.35216
    bool_0 = False
    tuple_0 = (float_0, float_1, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    bytes_0 = b"\xfe*%\xcd\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    int_0 = 250
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    int_0 = 4780
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    float_0 = -414.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    str_0 = "ys`GQkSn,Fri9^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    str_0 = "JA {mm@I)C\x0cNO\x0ba"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    float_0 = -2002.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    str_0 = "<aHqcV;F]\x0cQMB"
    module_0.get_new_command(str_0, str_0)


def test_case_4968():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4969():
    bytes_0 = b""
    list_0 = [bytes_0]
    float_0 = 255.465
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    int_0 = -161
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bytes_0 = b"\x0ba\xce\x19\xca\x1ae\x03\xdd\xb7\xd9\x17\xa7?)\x8c\xd4\x8f\xe4P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    bool_0 = False
    int_0 = 2569
    tuple_0 = (bool_0, bool_0, bool_0, int_0)
    bool_1 = False
    str_0 = "6ObgQ"
    tuple_1 = (tuple_0, bool_1, tuple_0, str_0)
    list_0 = [tuple_1, bool_1, bool_0, bool_0]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    float_0 = -3663.11
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    float_0 = 1896.474451
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_1, bool_1}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    str_0 = ""
    tuple_0 = (str_0, str_0)
    set_0 = {tuple_0, str_0, tuple_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    float_0 = 1530.3686
    bytes_0 = b"_Krz"
    set_0 = {float_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    bytes_0 = b"\xcb\x00"
    float_0 = 1331.9261
    bytes_1 = b"&\xd6G\xce\x0e\xfc\x82\xdd\xbc\x9cU?\xaa\x95yC\xf5"
    tuple_0 = (bytes_0, bytes_0, float_0, bytes_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    bool_0 = True
    bytes_0 = b"\xc3\xd5d\x91\xad;U\xbfN-8\xb5SM\x0eK\x91"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    bytes_0 = b"\xdbuh\xeeH[ J\xee\xc9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    complex_0 = 693.5 + 2058.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    bool_0 = False
    int_0 = 503
    str_0 = "4aeu@Uqn47"
    tuple_0 = (bool_0, int_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    int_0 = 278
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    bytes_0 = b"\xaa"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    int_0 = -1465
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    bool_0 = True
    bytes_0 = b"\xb8\x07.k\xcd\xb6\xc8\\WQ@"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    float_0 = 2127.224
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    complex_0 = -1648.238306 - 1398.949j
    int_0 = -636
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    str_0 = "w,3G\rp(<\nN+'Ryo@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    none_type_0 = None
    int_0 = 2150
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    str_0 = "#d&!{"
    bool_0 = True
    int_0 = -2751
    tuple_0 = (str_0, bool_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    bytes_0 = b"\xe9|\xfc\xad\x07D\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    str_0 = "s{?,d0j"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    bytes_0 = b"\x9dRa \xcb\xf2\xa7z\xd2\xbd\xa2\xca\xfa\xca\xb0"
    module_0.match(bytes_0, bytes_0)


def test_case_5001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5002():
    bytes_0 = b"f\x9e\x1d(\xde\xd3 \xb2\xf1\xe2G\x06_\x98E\xf6\xc4s@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    bytes_0 = b"\x0e8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    int_0 = 102
    dict_0 = {}
    bytes_0 = b"\xd6\xe5}\x02<'\x98\xc9?\x0c\xc0"
    tuple_0 = (dict_0, int_0, bytes_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    bytes_0 = b"\xb7D\x82\xc8\xee\x0ci1\x0e\xd9o\x08\xde\x8d\x12\x84\x91"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    str_0 = "fQvgyEe.:3fpS$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    int_0 = 1172
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    complex_0 = 2900 + 1029.010268j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_5010():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5011():
    bytes_0 = b"\xb4\xe8q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    str_0 = 'Zh2%U]\rM(}@"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    int_0 = -1030
    module_0.match(int_0, int_0)


def test_case_5015():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5016():
    str_0 = ">l+"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    complex_0 = 208.634 + 830.97914j
    tuple_0 = (complex_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    str_0 = "*`R\\';,XZP\"3 y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    bytes_0 = b"\x8d5\xee\x83gy4\x10\x7fPh]\x19S"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    bytes_0 = b"\x8eP"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    int_0 = -279
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    complex_0 = 1300 + 4673.53j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    int_0 = 208
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    dict_0 = {}
    tuple_0 = (dict_0,)
    set_0 = set()
    bool_0 = True
    tuple_1 = (tuple_0, tuple_0, set_0, bool_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    int_0 = -939
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    int_0 = 1227
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    complex_0 = 1523.984 + 44.0039j
    int_0 = 2891
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    int_0 = -1826
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    float_0 = 665.268863
    bool_0 = False
    complex_0 = -1681.21 - 1497.696445j
    dict_0 = {float_0: bool_0, bool_0: bool_0, float_0: bool_0, bool_0: complex_0}
    tuple_0 = (float_0, dict_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    bytes_0 = b"]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    bool_0 = True
    bytes_0 = b"\xd2p1\x9d\xa9L'\x7f\xdc\r\x08\x9f\x10\x8f\xf4zvJ\x827"
    complex_0 = 929.539 + 764.95294j
    tuple_0 = (bool_0, bool_0, bytes_0, complex_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    bytes_0 = b"\xea\xf6\x17\xb6\x93\xcf\xfa\xea\xc9u}N\x92wl4\xe6\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    bytes_0 = b"d\xd3^\xbd\n\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    str_0 = "k14>8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    bytes_0 = b"\xa1\x9d\xf8\xe3\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    int_0 = -2579
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    bytes_0 = b"\xc9\xd5\xe7vN}\x8av\xfewkc\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bytes_0 = b"\xa1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_5041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5042():
    str_0 = "@f]m_zrn-nx+),,qR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    str_0 = "1;6dMVl\\\\hAWKaB."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    str_0 = "74~n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    int_0 = -3698
    list_0 = [int_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    bytes_0 = b";\x87\x01o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    int_0 = -2829
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    str_0 = "X+Q}Sj"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    str_0 = "3\rz"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0, set_0)
    list_0 = [tuple_0, set_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    int_0 = -447
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    str_0 = 'C/I{q3.[-O" J8_'
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    int_0 = 2784
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    str_0 = " Ux=NI'+*F"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    dict_0 = {}
    object_0 = module_1.object(*dict_0)
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bool_0 = False
    float_0 = 141.472487
    set_0 = {bool_0, float_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_5057():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5058():
    str_0 = "Tp-d6lkGFe,>U(gCE~B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    bytes_0 = b"5\x08\xdd*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    int_0 = 2551
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    bytes_0 = b"\x8dWI\xd3\xe5\x13\xbb"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    tuple_0 = (bool_0, bool_1, bool_2)
    float_0 = -1358.296823
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    str_0 = "?<9[v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    float_0 = -1420.4913
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


def test_case_5067():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5068():
    bytes_0 = b"\x17"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    object_0 = module_1.object()
    complex_0 = -405.33223 + 3491.320747j
    module_0.get_new_command(object_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    float_0 = -215.7
    module_0.match(float_0, float_0)


def test_case_5071():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5072():
    int_0 = -1205
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    int_0 = 413
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    str_0 = "{A)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    complex_0 = 1459 - 1366j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    str_0 = "Q.>L:86az"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    float_0 = 503.36121
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    object_0 = module_1.object()
    int_0 = 2379
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    str_0 = "@fJETLO492v"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    float_0 = 1982.792
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    float_0 = -245.2593
    set_0 = {float_0, float_0, float_0}
    list_0 = [set_0, set_0, set_0, set_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    int_0 = -326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bytes_0 = b"0\t\xe2\xf7y\x8e\nX\x81\x9fV\xbdb#\xc4\xfe>\xa0\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    str_0 = "U"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    bytes_0 = b"XK=\xcbv"
    str_0 = "cj"
    dict_0 = {bytes_0: bytes_0, str_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    int_0 = 3304
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    int_0 = 2899
    bytes_0 = b"\xc3,\xe6wI\xbf"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    str_0 = ")"
    str_1 = ""
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    int_0 = -202
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    bytes_0 = b"\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    bytes_0 = b"\x88\xda\x88\x0f\xce\x999"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5095():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5096():
    str_0 = "'N8PB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    int_0 = -509
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    float_0 = 148.7882
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    str_0 = "$B]x|pxQOcH;0 g"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


def test_case_5101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5102():
    dict_0 = {}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


def test_case_5103():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5104():
    float_0 = -2560.865
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    bool_0 = True
    str_0 = ".x2!O\t1/P;-2lG"
    set_0 = {bool_0, str_0, bool_0, str_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    float_0 = -319.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    int_0 = -2923
    float_0 = -147.819
    dict_0 = {int_0: int_0, int_0: int_0, int_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    bytes_0 = b"\xb4~\xce\x14zW\xc1\x04~\xa3"
    int_0 = 4187
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    int_0 = -2190
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bytes_0 = b"g\x13\x1a@i\xc4\xca\x8cfl\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    float_0 = 1088.4268
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    int_0 = -932
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    str_0 = 'g?OzS`ot"r'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    bool_0 = False
    str_0 = "eZH0\n`j2E"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    bytes_0 = b"\xf6c\xea\x18"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5117():
    pass


def test_case_5118():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5119():
    int_0 = 2174
    list_0 = [int_0]
    bytes_0 = b"8\x12\xd5\xf4T\xad"
    tuple_0 = (int_0, list_0, list_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    int_0 = 396
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    str_0 = "wV-+l4and|cFJSs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    int_0 = 550
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bytes_0 = b"\xf3Q\xf1{\xc4\x88f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    str_0 = '&@ %"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    str_0 = '=J"mL'
    module_0.get_new_command(str_0, str_0)


def test_case_5126():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5127():
    str_0 = 'BG\\]@`m#ZH"\x0b,?g'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5128():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5129():
    bool_0 = True
    set_0 = set()
    int_0 = -630
    tuple_0 = (set_0, int_0)
    tuple_1 = (bool_0, bool_0, bool_0, tuple_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    bool_0 = False
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5132():
    str_0 = "HT>^V1ca%ZWKSaduk@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5133():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5134():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


def test_case_5135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5136():
    int_0 = -2926
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    bytes_0 = b"\xff<X\xf3\x18\xdb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


def test_case_5138():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5139():
    int_0 = 1311
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    str_0 = 'Q"L](OVWAE'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    bytes_0 = b"\x0b\x01\xb7\xd4\xf2X\x92-t C\xc8"
    tuple_0 = (bytes_0,)
    complex_0 = 930.8 + 1809.26j
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bytes_0 = b"\xf3\xcd\x8c\xac\n\x18\xe8\xb7j"
    set_0 = {bytes_0}
    tuple_0 = (object_0, list_0, bytes_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    float_0 = 2380.632137
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    str_0 = "Jt"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    int_0 = 268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    str_0 = 'n<e,E"Yf0'
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    int_0 = 2159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    str_0 = ";jiy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    bytes_0 = b"1<\xfd\x81=#z\xe9\xc0\xda?\xed\xe4N\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    bytes_0 = b"'~:\xa2\x9c\xb2P\x118\x9d\xb8w"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    bytes_0 = b"\nc6D\xad_V"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    str_0 = "@&_Eh6@kzg}]li42P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    int_0 = -59
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    int_0 = -1248
    module_0.get_new_command(int_0, int_0)


def test_case_5157():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5158():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    str_0 = "{51 Xo^"
    module_0.get_new_command(str_0, str_0)


def test_case_5160():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5161():
    str_0 = "!3W\rh$eiymUa[ $cPZm\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    str_0 = "^'J\"d=-i\rW+-wu48Rq;("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    float_0 = -1622.491713
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    bool_0 = False
    int_0 = -3549
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    float_0 = 1682.4648
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    str_0 = "w5[B=\\R$)D5nS&JZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    str_0 = '}~h\rS3(onl[R7yb"4n/c'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    str_0 = "Zb,eHoN7TngL56lQ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    bool_0 = True
    str_0 = "\x0blg3#`Ae|G_"
    tuple_0 = (bool_0, str_0)
    list_0 = [tuple_0, tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    complex_0 = 3417.008 + 383.2437j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    str_0 = "YphF'_(\x0b[9<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    str_0 = "Yef(U@cH\\lW-*So"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    complex_0 = 1275.5 + 859.47j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    bytes_0 = b"7\xb0xPw\x1f\xca\xa20"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    str_0 = "T1&6v/.)="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    bytes_0 = b"\x1f\xe8\xad\x96D\xd5\x95nwW\xcc\xe5\xcb"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    str_0 = "|!Q1$HJ^X|dr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    bool_0 = False
    str_0 = "h"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    bytes_0 = b"\xf1O\xe8d\xd8\xd0/(h\xeb\xd1\x89C\xb0|\x02\xbf\x82\xaf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    str_0 = '.5Eq7=v\n\tb_|gFyYo"0'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    str_0 = "ms5f\nAd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    str_0 = 'pRv+^D"]}'
    none_type_0 = None
    str_1 = "\x0cRmMiBaLmEZA"
    str_2 = ""
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    str_0 = 'K6"+],Kj\nD</2uB6JqI}'
    int_0 = 1128
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    str_0 = "\n_2+e7X?C:n{R-i\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bytes_0 = b"]f\xbf0\xe0\xc7tn\x04\xdb\xceb\xe0\xec\x92\xb7\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    str_0 = ":G%3@p\x0b`^sH4\t5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    str_0 = "tc\tj{91B@>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    bytes_0 = b"X\xc3\xf3W\x9b8\xd1\x1c\x02\x94/qR\xb8\xb8\x13"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    str_0 = ";U};4d\t#2V"
    none_type_0 = None
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_1.object(*list_0)


def test_case_5197():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5198():
    str_0 = "8=B Y]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    str_0 = "T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    int_0 = 456
    int_1 = 1902
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    none_type_0 = None
    int_0 = -2082
    module_0.match(none_type_0, int_0)


def test_case_5202():
    pass


def test_case_5203():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5204():
    int_0 = -521
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5205():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5206():
    bytes_0 = b"x\x9b$\xa6\x81\xa5\xe5\xc8\xcd7\xe9\x89\x86\x11@"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    float_0 = 1567.4533
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    bytes_0 = b"\xb0w\xfam\x0b\x8f\x03u[\xfa?\xf0"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    bytes_0 = b"\x9d\x89\xe3<j\xda\xf6\xe6+\x92\xfbPrG"
    tuple_0 = ()
    str_0 = ")::hf!0r]EK~\r19&Qd4J"
    tuple_1 = (bytes_0, tuple_0, str_0, bytes_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    bytes_0 = b"\xeaT\xdb\x0b=\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5213():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5214():
    str_0 = "EK]3)$2(M}s!^j`;X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    str_0 = "h9.t>g+rqjh.y`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    bytes_0 = b"\xc6k\x94\x1f\x8b\x00\xf2\xec\x7f\x93\x9f\xc6h\x04\x066J\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    int_0 = 3316
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_5218():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5219():
    int_0 = 1647
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    bytes_0 = b"\xdf;<0{A\xd0%i\xe4\xc3"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    bytes_0 = b"\x9b\xa8XO\xfdY\x94\x8aZ\x1bt\\\xfd\x9b\xc8G\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    int_0 = 3351
    int_1 = -379
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    str_0 = "Y&??%>QXBB1BzuL"
    str_1 = "Q9"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    int_0 = 2992
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    int_0 = 126
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    int_0 = -220
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    float_0 = -1994.01004
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    float_0 = 809.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    int_0 = -2051
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    int_0 = -199
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    str_0 = "YxJ<CW `\x0cw>?6A|)ME"
    bool_0 = True
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    str_0 = "(1B{s]<tT?\rX?C$x%zb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    int_0 = -18
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    complex_0 = 92 - 490.632j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    float_0 = -217.85
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    int_0 = 1490
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    bytes_0 = b"\x93*a\x81\xef%ccx\x88\x8a_.0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    str_0 = "~/@Qk\x0cZRf.>Eh\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    object_0 = module_1.object()
    bool_0 = True
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    int_0 = 1671
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    str_0 = "Cp<D"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    tuple_0 = ()
    bytes_0 = b"\xcd\x08L\xb7Jx\xb0\x15\xa3\xff\xee\xb3Z \xd6a\xb6\\`\x9e"
    tuple_1 = (tuple_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    float_0 = -1251.25301
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    int_0 = 3924
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    int_0 = -1475
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    bytes_0 = b"\xd9z"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    float_0 = 2071.026688
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    bytes_0 = b"\xe8\x7fWL(nh\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    int_0 = 171
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    complex_0 = 2785.0166 + 2018.507j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    str_0 = "VH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    float_0 = -2913.453503
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


def test_case_5260():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5261():
    bytes_0 = b"\xc3\xd1E"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    bytes_0 = b"\x15\xea1;"
    str_0 = ";=Ia~N3!6N)Z\rXt"
    tuple_0 = (bytes_0, bytes_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    str_0 = "8&;92u0qOO%G"
    list_0 = [str_0]
    str_1 = "B^GAXWU"
    tuple_0 = (str_0, str_0, list_0, str_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    int_0 = -2406
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    float_0 = 817.14
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_5268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5269():
    int_0 = -1105
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    bytes_0 = b"\xe9Y\xc4n\x8c\x08:r\xa1C\xd9|x\x97\xdcL\xf5\x84\xff\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    bytes_0 = b"\xecQj\x1a\xc6\x83\xea\x9dJ\x9ej\x18\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    bytes_0 = b"/\x01\x06\x11\x13.m"
    module_1.object(**bytes_0)


def test_case_5273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5274():
    set_0 = set()
    bytes_0 = b"c\xcd\xc1\x00\xbc.\xcc\xb9\xdd\x13\xd7\xd5\x82\xb4\xa7"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    int_0 = -3053
    list_0 = [int_0, int_0, int_0]
    int_1 = 404
    module_0.match(list_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    bool_0 = True
    int_0 = -2206
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    str_0 = "#7h'#a"
    module_0.get_new_command(str_0, str_0)


def test_case_5278():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5279():
    bytes_0 = b"-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    list_0 = []
    str_0 = "g2(R"
    dict_0 = {str_0: list_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    complex_0 = -1056 - 1829.99j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    bytes_0 = b"\xdfp\x19@#BC\x97B\x8c^\xf3p\xc9"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    str_0 = "y[s=uv^xB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, str_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    int_0 = -730
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    bool_0 = True
    str_0 = "/'V"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    int_0 = -3437
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    int_0 = 961
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    str_0 = "t[FjK.%\n\n87f-8+5]"
    none_type_0 = None
    str_1 = "N2pCFH.e0iZbo?H"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    float_0 = -213.98
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    float_0 = 3351.89456
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    bytes_0 = b"\xfeW\x1a\x0c\x8e"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    int_0 = 693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    str_0 = "P}~.(;S8+-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bytes_0 = b"\xb8\x06\x88\xdf\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    complex_0 = 700.11423 - 1055.0503j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    int_0 = 948
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    str_0 = "B\x0bGjV,Yh}xb?%yG0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    float_0 = 5506.1
    set_0 = {float_0, float_0, float_0}
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    bytes_0 = b"\x9b.\xac\x03\xbb\x94\xa8\x9f\xaf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_5302():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5303():
    int_0 = 1793
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    int_0 = 3682
    bool_0 = False
    dict_0 = {int_0: int_0, bool_0: int_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_5305():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5306():
    float_0 = -1323.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    float_0 = 177.7
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    complex_0 = -1731.39955 + 1080.87599j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    bytes_0 = b"\xd56\xfa\xad\xf9\x19\x9d,\xb3\xdeu\x8a\x90\x1d\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    bool_0 = False
    int_0 = -62
    tuple_0 = (bool_0, bool_0, int_0)
    bool_1 = True
    list_0 = [tuple_0, bool_1, bool_1, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = "=k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    float_0 = 667.2
    module_0.match(float_0, float_0)


def test_case_5314():
    pass


def test_case_5315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5316():
    float_0 = 1125.72419
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    str_0 = ")S"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    float_0 = -149.16044
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    bytes_0 = b"\xd8\xa7i\xfc4\x96\xb8\xa3\xff\xa6\x07\x0b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    bytes_0 = b"\x15\x84\x17k\\[W\xc3\xbf\x10\xc4h\xfe1\x88\x90E"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    int_0 = -948
    module_0.match(int_0, int_0)


def test_case_5322():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5323():
    str_0 = "Jl'\x0cGoPHW"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    bytes_0 = b"{\xe8$\x83\xd7\x14\xc1\x04\x8c\x91I(\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    str_0 = "tlXFFna\x0b%]DWy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    bytes_0 = b"\xa8\xa2^\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    float_0 = 1597.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    int_0 = -2100
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    int_0 = 21
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    complex_0 = 1838 - 1935.56257j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    int_0 = 2179
    module_0.get_new_command(int_0, int_0)


def test_case_5332():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5333():
    str_0 = 'z~E#0K;y\r2!8c<"-K'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    float_0 = -3678.0
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    int_0 = 1100
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    bool_0 = False
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: object_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    str_0 = "'3OCy\\8!]2H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    str_0 = "u=R,NA\rGVO\nEHH6JJS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    int_0 = -733
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    bytes_0 = b"r'\xb9-}\x05\xbd\x0b\xb5\x10\x91\xf6J"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    float_0 = -1084.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    str_0 = "D"
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    complex_0 = -1841.403 - 3243.8j
    float_0 = -797.08787
    dict_0 = {complex_0: float_0, float_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: tuple_0, tuple_0: tuple_0, bool_0: tuple_0}
    complex_0 = -3296.21213 + 541.9256j
    float_0 = 3149.0
    tuple_1 = (dict_0, complex_0, tuple_0, float_0)
    module_0.match(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    complex_0 = 2398.86 + 600.88995j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    str_0 = "j*5<v^9rHK&?OS{JRD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    none_type_0 = None
    int_0 = 550
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    str_0 = "4x%^}wWf"
    bytes_0 = b"\x89\x17\x88\xf2\xa5l&}ED\xee"
    float_0 = 795.312227
    bool_0 = True
    tuple_0 = (str_0, bytes_0, float_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    set_0 = set()
    int_0 = -3252
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    complex_0 = 657 - 2011j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    bytes_0 = b"\x12RjpU\xcd,\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    float_0 = -688.75
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    str_0 = "OSE/,Hn>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    float_0 = -2222.67
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    complex_0 = -990.92 - 1482.6352j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    bytes_0 = b"\xea\x15\xd8\x94\x7f\x06\x97\x1c\xc5k`\xbav\xb6\x18\x98\xefQ\xee"
    module_0.match(bytes_0, bytes_0)


def test_case_5361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5362():
    bytes_0 = b"\x99-\xd69\x9e\x81r~q\x1aZ\xe0\x916\xb4\xf8\xd2*\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    bytes_0 = b"\xc95z\x84\xc8kfWz]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    float_0 = 489.736
    module_0.match(float_0, float_0)


def test_case_5366():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5367():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    int_0 = -1801
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    object_0 = module_1.object()
    bool_0 = False
    str_0 = "; fi-"
    tuple_0 = (bool_0, bool_0, str_0)
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    int_0 = 2858
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    bytes_0 = b"9+\xd7^S\x8d\x9a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    float_0 = -917.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    bytes_0 = b"$\x8e\xca\xa9\x0e\xa8\x04\t\x88\x11e&\xdf\x98\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    str_0 = "*s;t!,g\x0bwT/VAL\n!Z_J0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    complex_0 = -1542.957583 - 595.6j
    bytes_0 = b"\x07\xe6\xf9"
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        bytes_0: complex_0,
        complex_0: bytes_0,
    }
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    float_0 = 638.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    float_0 = -80.49558
    object_0 = module_1.object()
    module_0.get_new_command(float_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    bool_0 = True
    bytes_0 = b"\xf2"
    tuple_0 = (dict_0, list_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    int_0 = 1977
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    float_0 = -4590.18
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    str_0 = '`3\rmkr`g"D3Jr\rQ>P'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    str_0 = "m\tfRO3qGB"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    float_0 = 2537.002
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    str_0 = "]{m;-5ZB;1_J@)VX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    dict_0 = {}
    bool_0 = False
    bytes_0 = b"\x0c\\u\xb9"
    list_0 = [dict_0]
    tuple_0 = (dict_0, bool_0, bytes_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    int_0 = 1302
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    str_0 = "h4w=j&Lh!z\\,a5hfpuA?"
    module_0.get_new_command(str_0, str_0)


def test_case_5390():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5391():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    str_0 = "p1\rsfNrV3|m_"
    list_0 = [str_0]
    list_1 = [list_0, str_0]
    list_2 = [list_1, list_1, list_0]
    module_0.get_new_command(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    str_0 = 'b>V*Jc s\tRWt%-\t!L":'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    float_0 = -2943.0
    set_0 = set()
    module_0.get_new_command(float_0, set_0)


def test_case_5395():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5396():
    bytes_0 = b"\xb8W"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    int_0 = -2921
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    float_0 = 3164.27981
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    int_0 = -1848
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    float_0 = -3638.533
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    int_0 = -510
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = 'L_"~$fge8Xo~RCQ'
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    int_0 = 2508
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    str_0 = "\rsG~AGu="
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bytes_0 = b"\x8f\x0f"
    module_0.match(set_0, bytes_0)


def test_case_5409():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5410():
    float_0 = -1031.6226
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    int_0 = -1004
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    float_0 = -345.069988
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    int_0 = 765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    int_0 = -3147
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_5416():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5417():
    int_0 = 787
    list_0 = [int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    int_0 = 1266
    int_1 = 780
    tuple_0 = (int_0, int_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    bytes_0 = b"\x9e\xf2"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    int_0 = 471
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    complex_0 = 1273.7 - 1260.332j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    int_0 = -1162
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    int_0 = -4607
    complex_0 = 1254.9 + 639.2j
    bytes_0 = b"&<`\xa1\xa1\xa6\x0e\xdeN,\xf4@5\xedxJ"
    list_0 = [int_0, complex_0, complex_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5424():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5425():
    float_0 = -727.12
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    str_0 = "?FTv+g6[cyFe)ii~b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "'vV%E"
    str_1 = "BT8mw"
    str_2 = '"v2jD`\t(=!#w<Xs@'
    dict_0 = {str_0: list_0, str_1: str_1, str_2: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    str_0 = "nL\n6\x0b:IDDLWSc\n`Q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    float_0 = -3110.57
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    bytes_0 = b"4u \x19\xfc\x1b\x96\xe5\x7f<\xac\xd5\xc9\x8b\x98\xe2\xb2\x92\xdb"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_5433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5434():
    str_0 = "<\x0bRfU$W\x0cAo\x0co"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    int_0 = 2658
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    str_0 = "^!\x0b6tt#,Brz::nC#"
    module_0.match(str_0, str_0)


def test_case_5437():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5438():
    tuple_0 = ()
    tuple_1 = ()
    module_0.get_new_command(tuple_0, tuple_1)


def test_case_5439():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5440():
    str_0 = "A&yI\r62^pU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    bool_0 = True
    int_0 = 2308
    tuple_0 = (bool_0, bool_0, int_0, bool_0)
    list_0 = [tuple_0, bool_0, bool_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    str_0 = "@C\x0c2)VJ$d Gmu\x0c e"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    int_0 = -731
    bytes_0 = b"\x0b"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    str_0 = "q+Q]+:\nr!~ "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    complex_0 = -809.3 - 969.31361j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    str_0 = "&\t']Cui#wh*;U"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    int_0 = -170
    tuple_0 = (int_0, int_0)
    int_1 = -1407
    bytes_0 = b"\xc9\x8d\xf72"
    tuple_1 = (tuple_0, int_1, int_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    bytes_0 = b"K\t\xdeIT\x80`\xa9\x97W@\xd8\xe0)\xdb\xbfw\xa4"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    str_0 = "M'@7)5k2bP."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    bytes_0 = b">\xa7u\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    bytes_0 = b"\x0e\x02\xb6\xa6\xf60\xfcc\xe6g"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    int_0 = 540
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    bytes_0 = b"+\x0eY\xacJ\x96\x92\xc4{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    bytes_0 = b"\x99\xa3\x8c\x88"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    int_0 = -1506
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    int_0 = 1854
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bool_0: int_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    bytes_0 = b"W\x94\xc0\x07\xdd\xf1"
    int_0 = -877
    complex_0 = -4645.823 + 687.108508j
    dict_0 = {bytes_0: int_0, bytes_0: complex_0, bytes_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    int_0 = -2148
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    bytes_0 = b"\xc6\x9f\xb9\xc2\xb9\xdb\x9b\x9f4\xa7\x9f"
    list_1 = [list_0, object_0, bytes_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    int_0 = -2525
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (int_0, list_0)
    module_0.match(tuple_0, list_0)


def test_case_5464():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5465():
    str_0 = "r.qO{5\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    int_0 = 1569
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    bytes_0 = b'\xc0\xb3@m\xc6\xa9\xc0_\xb5\xbc\xc0\xa61"\x12\xb8v9H\xc1'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    bytes_0 = b"\xf2\xb4h@l"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    complex_0 = 2553.11134 + 456.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    float_0 = 20.022766
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    str_0 = "A2(Z#G5jdT9Q!'\n'H"
    module_0.get_new_command(str_0, str_0)


def test_case_5472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5473():
    float_0 = 2126.323
    tuple_0 = (float_0, float_0, float_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    int_0 = 664
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    float_0 = 594.38
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    int_0 = 3031
    dict_0 = {int_0: int_0}
    float_0 = 1092.7
    tuple_0 = (dict_0, int_0, float_0)
    module_0.get_new_command(tuple_0, dict_0)


def test_case_5479():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5480():
    bool_0 = True
    int_0 = -84
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    int_0 = -180
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    bytes_0 = b"\x9d\xb2\xd8\xb3\xc6)\xb5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    bytes_0 = b"\xfd%\xd8\xfcq\xe8\xc0}\xa4q\xde\xc0\x02\xb66\x96*"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    int_0 = 1783
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    str_0 = "Fr*(yXSh/Qt9"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    list_0 = []
    bool_0 = False
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    str_0 = "AN@rOr"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    bytes_0 = b"\xa3H\xeas6\xf1]&\xbd\x99\xfb\xab\tW\xc6"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_5492():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    str_0 = 'Xvn@_\t*J9Z*"'
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    bytes_0 = b"\x144\x05"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    bytes_0 = b"\x0f["
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    str_0 = "\r"
    bytes_0 = b"\xcfD\x0c\x846["
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    int_0 = 3689
    list_0 = [int_0, int_0, int_0]
    bytes_0 = b"P\x92\xdb%j\x94p\xd5\x03\x1fjy\xd7\x80\xf0\x86"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    complex_0 = 2158.522 - 119.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    int_0 = -610
    int_1 = -2089
    tuple_0 = (int_0, int_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    str_0 = 'UgF7o"-Rf;VH'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5501():
    object_0 = module_1.object()


def test_case_5502():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5503():
    float_0 = 670.44946
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    float_0 = 3048.6107
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    str_0 = ".c;%op FW*\x0bc[7\\\x0b_$?"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    float_0 = -883.488585
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    str_0 = '}"e<32a7M5KP4]'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    bytes_0 = b"\x07\xa1\x8b\x14\x86\xe5\\Lf\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    float_0 = 3295.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    float_0 = -1753.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    int_0 = -4572
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    complex_0 = -2716.043094 + 1150j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    float_0 = 981.5746
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    bool_0 = True
    bool_1 = True
    bool_2 = True
    tuple_0 = (bool_0, bool_1, bool_2, bool_2)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    complex_0 = -2001.365551 - 776.21j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    bytes_0 = b"C\xd0\xe8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    bytes_0 = b"\xb4!F\x1b9\xf1M\x10"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    int_0 = -1005
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    bytes_0 = b"\x8a\x10q\x13'\xc1\x93\xcd\xda\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    str_0 = "n>hj:8\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    complex_0 = -700.47033 + 515j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    object_0 = module_1.object()
    set_0 = {object_0}
    bytes_0 = b"\xc1\xb3\nr\x84I\xcfw\xda *qBK1\xa5\x87\xd3\xa8"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    str_0 = "VL;=)F\x0b}\rCZ]Pu=-zrAV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bytes_0 = b"2r\x1d\xe8\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    float_0 = 1936.0
    str_0 = "0}Nsv|%Bo bS=wy4zj%"
    bool_0 = False
    list_0 = []
    tuple_0 = (str_0, bool_0, list_0)
    tuple_1 = (float_0, tuple_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    float_0 = 1746.4
    complex_0 = -26 + 182.6547j
    module_0.match(float_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    int_0 = -968
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    int_0 = -4673
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    float_0 = 4524.95688
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bytes_0 = b"C\x994wI\x90\x85\x0c\x93\x06\x12\x1e\xa5\xd7e0"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    float_0 = 4474.38207
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    str_0 = "d,G3ER"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    int_0 = -1377
    str_0 = "nA\x0b?"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: str_0, str_0: int_0}
    dict_1 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: dict_0}
    module_0.match(dict_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    bytes_0 = b"'\xbcZ\xa5\xcbk\xbf\xa6\xf9\x15\x1b\x94\xa6\x97\x88K\xa29N"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    float_0 = -1341.91963
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    int_0 = 2939
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    bytes_0 = b'!YTWS/\xad#"\xb2\xe3'
    set_0 = {bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    float_0 = -1180.5
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    str_0 = "ez^{,a"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    str_0 = "UNw^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    int_0 = -1406
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    float_0 = 1080.337
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    int_0 = -3572
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)
