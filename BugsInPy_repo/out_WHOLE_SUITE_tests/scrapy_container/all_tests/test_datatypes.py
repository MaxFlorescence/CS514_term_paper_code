# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import datatypes as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_0 = caseless_dict_0.normvalue(caseless_dict_0)
    var_0.__getitem__(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    local_cache_0 = module_0.LocalCache()
    multi_value_dict_0 = module_0.MultiValueDict(local_cache_0)
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.__copy__()
    assert len(var_0) == 0
    var_1 = var_0.items()
    var_2 = multi_value_dict_0.update()
    var_2.__getitem__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.items()
    var_1 = merge_dict_0.copy()
    var_2 = merge_dict_0.getlist(var_1)
    var_3 = var_1.get(var_0, var_1)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "datatypes.MergeDict"
    )
    assert var_3.dicts == ()
    none_type_0 = None
    caseless_dict_0 = module_0.CaselessDict(none_type_0)
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_2.__copy__()


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    merge_dict_0 = module_0.MergeDict()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.update(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.__deepcopy__()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_0) == 0
    var_1 = var_0.copy()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_1) == 0
    var_2 = multi_value_dict_0.values()
    var_3 = var_1.update(var_0)
    var_4 = var_1.__setitem__(var_3, var_0)
    var_1.setdefault(var_1)


@pytest.mark.xfail(strict=True)
def test_case_5():
    merge_dict_0 = module_0.MergeDict()
    none_type_0 = None
    var_0 = merge_dict_0.get(merge_dict_0, merge_dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "datatypes.MergeDict"
    )
    assert var_0.dicts == ()
    var_1 = merge_dict_0.get(none_type_0, none_type_0)
    var_2 = merge_dict_0.__copy__()
    var_3 = var_0.get(merge_dict_0, merge_dict_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}" == "datatypes.MergeDict"
    )
    assert var_3.dicts == ()
    var_4 = merge_dict_0.__copy__()
    var_3.__setitem__(none_type_0, merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.setdefault(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    merge_dict_0 = module_0.MergeDict()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = merge_dict_0.has_key(multi_value_dict_0)
    var_1 = merge_dict_0.items()
    var_2 = multi_value_dict_0.appendlist(merge_dict_0, merge_dict_0)
    assert len(multi_value_dict_0) == 1
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    module_0.CaselessDict(merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    merge_dict_0.get(list_0, merge_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = True
    none_type_0 = None
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.getlist(none_type_0)
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_1 = multi_value_dict_0.setlistdefault(bool_0, none_type_0)
    assert len(multi_value_dict_0) == 1
    var_2 = multi_value_dict_0.copy()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_2) == 1
    var_3 = var_2.copy()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_3) == 1
    multi_value_dict_1 = module_0.MultiValueDict()
    assert len(multi_value_dict_1) == 0
    var_3.items()


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_1 = module_0.MultiValueDict()
    assert len(multi_value_dict_1) == 0
    local_cache_0 = module_0.LocalCache()
    site_node_0 = module_0.SiteNode(none_type_0)
    var_0 = site_node_0.to_string()
    assert var_0 == "None\n"
    var_1 = site_node_0.to_string()
    assert var_1 == "None\n"
    multi_value_dict_1.add_child(multi_value_dict_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_0 = caseless_dict_0.normvalue(none_type_0)
    var_1 = caseless_dict_0.update(caseless_dict_0)
    var_2 = caseless_dict_0.update(caseless_dict_0)
    caseless_dict_0.get(var_2)


@pytest.mark.xfail(strict=True)
def test_case_12():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    caseless_dict_0.__setitem__(none_type_0, caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.setlistdefault(none_type_0)
    assert len(multi_value_dict_0) == 1
    none_type_1 = None
    var_1 = multi_value_dict_0.values()
    none_type_2 = None
    site_node_0 = module_0.SiteNode(none_type_2)
    var_2 = multi_value_dict_0.get(none_type_0)
    site_node_0.add_child(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_14():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.setlistdefault(none_type_0)
    assert len(multi_value_dict_0) == 1
    none_type_1 = None
    str_0 = '=F{y&":FTH\tjS'
    var_1 = multi_value_dict_0.__setitem__(none_type_0, str_0)
    var_2 = multi_value_dict_0.get(none_type_0)
    assert var_2 == '=F{y&":FTH\tjS'
    var_3 = multi_value_dict_0.appendlist(var_1, var_2)
    var_1.add_child(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.update()
    site_node_0 = module_0.SiteNode(var_0)
    local_cache_0 = module_0.LocalCache(bool_0)
    assert (
        f"{type(local_cache_0).__module__}.{type(local_cache_0).__qualname__}"
        == "datatypes.LocalCache"
    )
    assert len(local_cache_0) == 0
    local_cache_0.__setitem__(local_cache_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.values()
    var_1 = var_0.copy()
    var_1.__delitem__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.__delitem__(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.get(multi_value_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    var_0 = caseless_dict_0.__copy__()
    caseless_dict_0.pop(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0]
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.update(list_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bytes_0 = b"\x07q"
    list_0 = [bytes_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    var_0 = merge_dict_0.has_key(bytes_0)
    assert var_0 is True
    merge_dict_0.has_key(list_0)


def test_case_22():
    bytes_0 = b"\x07q"
    list_0 = [bytes_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    var_0 = merge_dict_0.__copy__()
    var_1 = merge_dict_0.has_key(bytes_0)
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_23():
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.add_child(caseless_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = False
    set_0 = {bool_0}
    site_node_0 = module_0.SiteNode(set_0)
    local_cache_0 = module_0.LocalCache()
    caseless_dict_0 = module_0.CaselessDict()
    assert (
        f"{type(caseless_dict_0).__module__}.{type(caseless_dict_0).__qualname__}"
        == "datatypes.CaselessDict"
    )
    assert len(caseless_dict_0) == 0
    assert (
        f"{type(module_0.CaselessDict.fromkeys).__module__}.{type(module_0.CaselessDict.fromkeys).__qualname__}"
        == "builtins.method"
    )
    caseless_dict_0.__contains__(site_node_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.getlist(multi_value_dict_0)


def test_case_26():
    int_0 = 2531
    site_node_0 = module_0.SiteNode(int_0)
    none_type_0 = None
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.setdefault(none_type_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.setdefault(none_type_0)
    var_2 = var_1.__repr__()
    assert var_2 == "None"


@pytest.mark.xfail(strict=True)
def test_case_27():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    multi_value_dict_0.__deepcopy__(multi_value_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    int_0 = 2
    local_cache_0 = module_0.LocalCache(int_0)
    assert (
        f"{type(local_cache_0).__module__}.{type(local_cache_0).__qualname__}"
        == "datatypes.LocalCache"
    )
    assert len(local_cache_0) == 0
    none_type_0 = None
    var_0 = local_cache_0.__setitem__(none_type_0, local_cache_0)
    assert len(local_cache_0) == 1
    var_0.__copy__()


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = True
    merge_dict_0 = module_0.MergeDict()
    var_0 = merge_dict_0.getlist(bool_0)
    var_0.get(var_0)


def test_case_30():
    merge_dict_0 = module_0.MergeDict()
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    with pytest.raises(TypeError):
        multi_value_dict_0.update(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "w<_i~a\x0b=\\O\n7:$"
    list_0 = [str_0]
    merge_dict_0 = module_0.MergeDict(*list_0)
    merge_dict_0.items()


@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    none_type_1 = None
    list_0 = [none_type_1, none_type_1]
    merge_dict_0 = module_0.MergeDict(*list_0)
    merge_dict_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    bytes_0 = b"\xe8]xj\xdc\xf1\xa1&\x10\x07\x92\x9f(=\x07\xd3@q@\x97"
    merge_dict_0 = module_0.MergeDict(*bytes_0)
    merge_dict_0.getlist(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "J3rzP)YPsj"
    module_0.MultiValueDict(str_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError()
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    var_0 = multi_value_dict_0.getlist(multi_value_dict_key_error_0)
    list_0 = [multi_value_dict_key_error_0]
    multi_value_dict_0.update(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    multi_value_dict_0 = module_0.MultiValueDict()
    assert len(multi_value_dict_0) == 0
    none_type_0 = None
    var_0 = multi_value_dict_0.__setitem__(none_type_0, none_type_0)
    assert len(multi_value_dict_0) == 1
    none_type_1 = None
    var_1 = multi_value_dict_0.__deepcopy__()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datatypes.MultiValueDict"
    )
    assert len(var_1) == 1
    var_2 = var_1.update(var_1)
    var_3 = multi_value_dict_0.setdefault(none_type_1)
    var_4 = multi_value_dict_0.getlist(var_3)
    var_3.lists()


@pytest.mark.xfail(strict=True)
def test_case_37():
    bytes_0 = b"\xd0\x18\xc6\xdb\x8b%a\xa9\xb1f\xb3c\xbd"
    site_node_0 = module_0.SiteNode(bytes_0)
    local_cache_0 = module_0.LocalCache()
    var_0 = site_node_0.to_string()
    assert var_0 == "b'\\xd0\\x18\\xc6\\xdb\\x8b%a\\xa9\\xb1f\\xb3c\\xbd'\n"
    var_1 = site_node_0.add_child(site_node_0)
    site_node_0.to_string()
