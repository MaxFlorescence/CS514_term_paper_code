# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import pygson as module_0
import re as module_1
import enum as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    j_s_o_n_lexer_0 = module_0.JSONLexer()
    assert (
        f"{type(j_s_o_n_lexer_0).__module__}.{type(j_s_o_n_lexer_0).__qualname__}"
        == "pygson.JSONLexer"
    )
    assert j_s_o_n_lexer_0.options == {}
    assert j_s_o_n_lexer_0.stripnl is True
    assert j_s_o_n_lexer_0.stripall is False
    assert j_s_o_n_lexer_0.ensurenl is True
    assert j_s_o_n_lexer_0.tabsize == 0
    assert j_s_o_n_lexer_0.encoding == "guess"
    assert j_s_o_n_lexer_0.filters == []
    assert module_0.JSONLexer.name == "JSON Lexer"
    assert module_0.JSONLexer.aliases == ["json"]
    assert module_0.JSONLexer.filenames == ["*.json"]
    assert module_0.JSONLexer.flags == module_1.RegexFlag.DOTALL
    assert len(module_0.JSONLexer.tokens) == 7
    j_s_o_n_lexer_1 = module_0.JSONLexer()
    j_s_o_n_lexer_2 = module_0.JSONLexer()
    j_s_o_n_lexer_3 = module_0.JSONLexer()
    none_type_0 = None
    module_0.JSONLexer(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = 'h";dE/x'
    str_1 = "4e"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, str_1: bool_0}
    j_s_o_n_lexer_0 = module_0.JSONLexer(**dict_0)
    assert (
        f"{type(j_s_o_n_lexer_0).__module__}.{type(j_s_o_n_lexer_0).__qualname__}"
        == "pygson.JSONLexer"
    )
    assert j_s_o_n_lexer_0.options == {'h";dE/x': 'h";dE/x', "4e": False}
    assert j_s_o_n_lexer_0.stripnl is True
    assert j_s_o_n_lexer_0.stripall is False
    assert j_s_o_n_lexer_0.ensurenl is True
    assert j_s_o_n_lexer_0.tabsize == 0
    assert j_s_o_n_lexer_0.encoding == "guess"
    assert j_s_o_n_lexer_0.filters == []
    assert module_0.JSONLexer.name == "JSON Lexer"
    assert module_0.JSONLexer.aliases == ["json"]
    assert module_0.JSONLexer.filenames == ["*.json"]
    assert module_0.JSONLexer.flags == module_1.RegexFlag.DOTALL
    assert len(module_0.JSONLexer.tokens) == 7
    j_s_o_n_lexer_1 = module_0.JSONLexer()
    j_s_o_n_lexer_1.add_filter(j_s_o_n_lexer_1)


@pytest.mark.xfail(strict=True)
def test_case_2():
    auto_0 = module_2.auto()
    module_1.fullmatch(auto_0, auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    j_s_o_n_lexer_0 = module_0.JSONLexer()
    assert (
        f"{type(j_s_o_n_lexer_0).__module__}.{type(j_s_o_n_lexer_0).__qualname__}"
        == "pygson.JSONLexer"
    )
    assert j_s_o_n_lexer_0.options == {}
    assert j_s_o_n_lexer_0.stripnl is True
    assert j_s_o_n_lexer_0.stripall is False
    assert j_s_o_n_lexer_0.ensurenl is True
    assert j_s_o_n_lexer_0.tabsize == 0
    assert j_s_o_n_lexer_0.encoding == "guess"
    assert j_s_o_n_lexer_0.filters == []
    assert module_0.JSONLexer.name == "JSON Lexer"
    assert module_0.JSONLexer.aliases == ["json"]
    assert module_0.JSONLexer.filenames == ["*.json"]
    assert module_0.JSONLexer.flags == module_1.RegexFlag.DOTALL
    assert len(module_0.JSONLexer.tokens) == 7
    j_s_o_n_lexer_1 = module_0.JSONLexer()
    module_0.JSONLexer(**j_s_o_n_lexer_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    j_s_o_n_lexer_0 = module_0.JSONLexer()
    assert (
        f"{type(j_s_o_n_lexer_0).__module__}.{type(j_s_o_n_lexer_0).__qualname__}"
        == "pygson.JSONLexer"
    )
    assert j_s_o_n_lexer_0.options == {}
    assert j_s_o_n_lexer_0.stripnl is True
    assert j_s_o_n_lexer_0.stripall is False
    assert j_s_o_n_lexer_0.ensurenl is True
    assert j_s_o_n_lexer_0.tabsize == 0
    assert j_s_o_n_lexer_0.encoding == "guess"
    assert j_s_o_n_lexer_0.filters == []
    assert module_0.JSONLexer.name == "JSON Lexer"
    assert module_0.JSONLexer.aliases == ["json"]
    assert module_0.JSONLexer.filenames == ["*.json"]
    assert module_0.JSONLexer.flags == module_1.RegexFlag.DOTALL
    assert len(module_0.JSONLexer.tokens) == 7
    j_s_o_n_lexer_1 = module_0.JSONLexer()
    str_0 = "\\Wb.DgphYE\\^Hx"
    str_1 = "a\tMB3}v\\$|b<LQ=%"
    dict_0 = {str_0: j_s_o_n_lexer_1, str_1: str_1}
    j_s_o_n_lexer_2 = module_0.JSONLexer(**dict_0)
    j_s_o_n_lexer_3 = module_0.JSONLexer()
    j_s_o_n_lexer_4 = module_0.JSONLexer()
    var_0 = j_s_o_n_lexer_1.__repr__()
    module_0.JSONLexer(**var_0)
