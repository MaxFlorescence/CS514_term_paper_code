# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import configuration as module_0


def test_case_0():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    list_0 = [var_0, var_0, var_0]
    var_0.set(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    list_0 = [var_0, var_0, var_0]
    var_0.getint(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    tuple_0 = ()
    none_type_0 = None
    luigi_config_parser_0 = module_0.LuigiConfigParser(
        delimiters=tuple_0,
        comment_prefixes=none_type_0,
        strict=none_type_0,
        interpolation=tuple_0,
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0 = luigi_config_parser_0.getintdict(none_type_0)
    bool_0 = False
    bool_1 = False
    var_0.getfloat(none_type_0, bool_0, bool_1)


def test_case_4():
    luigi_config_parser_0 = module_0.LuigiConfigParser()
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    var_0 = luigi_config_parser_0.getfloat(
        none_type_0, luigi_config_parser_0, none_type_0
    )
    var_1 = module_0.get_config()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    var_1.popitem()


@pytest.mark.xfail(strict=True)
def test_case_5():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getboolean(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    luigi_config_parser_0 = module_0.LuigiConfigParser(
        allow_no_value=none_type_0,
        strict=none_type_0,
        default_section=none_type_0,
        interpolation=list_0,
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    bytes_0 = b"\xa9\xca[\xaa\xdfqK\x17\xa7e\xa2\x8c"
    none_type_1 = None
    luigi_config_parser_1 = module_0.LuigiConfigParser(
        comment_prefixes=none_type_1, default_section=bytes_0
    )
    luigi_config_parser_1.set(none_type_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getintdict(var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    str_0 = "2RF9BedL6E4"
    var_1 = var_0.__setitem__(str_0, var_0)
    assert len(var_0) == 2
    none_type_0 = None
    module_0.LuigiConfigParser(converters=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 2
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    var_0.getint(none_type_0, none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    tuple_0 = ()
    none_type_0 = None
    luigi_config_parser_0 = module_0.LuigiConfigParser(
        delimiters=tuple_0,
        comment_prefixes=none_type_0,
        strict=none_type_0,
        interpolation=tuple_0,
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    dict_0 = {}
    var_0 = luigi_config_parser_0.getintdict(none_type_0)
    var_1 = luigi_config_parser_0.get(tuple_0, dict_0, tuple_0)
    bool_0 = False
    bool_1 = False
    var_0.getfloat(none_type_0, bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    var_1 = var_0.getint(none_type_0, tuple_0, bool_0)
    assert var_1 is True
    bytes_0 = b"\x03W&\x03\xfd\x11+\xe8\n"
    module_0.LuigiConfigParser(var_1, none_type_0, var_1, interpolation=bytes_0)


def test_case_12():
    none_type_0 = None
    luigi_config_parser_0 = module_0.LuigiConfigParser(
        comment_prefixes=none_type_0, default_section=none_type_0
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0 = luigi_config_parser_0.getintdict(none_type_0)
