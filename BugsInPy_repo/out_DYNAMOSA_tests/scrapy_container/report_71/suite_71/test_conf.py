# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import conf as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.get_sources()
    var_1 = module_0.build_component_list(var_0, var_0)
    var_2 = module_0.closest_scrapy_cfg()
    assert var_2 == ""
    var_3 = module_0.get_sources(var_0)
    module_0.arglist_to_dict(var_0)


def test_case_1():
    dict_0 = {}
    var_0 = module_0.arglist_to_dict(dict_0)
    var_1 = module_0.build_component_list(dict_0, var_0)


def test_case_2():
    var_0 = module_0.closest_scrapy_cfg()
    assert var_0 == ""


def test_case_3():
    var_0 = module_0.init_env()


def test_case_4():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.SafeConfigParser"
    )
    assert len(var_0) == 1


def test_case_5():
    dict_0 = {}
    object_0 = module_1.object()
    var_0 = module_0.build_component_list(dict_0, dict_0)
    var_1 = module_0.get_config(dict_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configparser.SafeConfigParser"
    )
    assert len(var_1) == 1


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.arglist_to_dict(none_type_0)


def test_case_7():
    dict_0 = {}
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.SafeConfigParser"
    )
    assert len(var_0) == 1
    var_1 = module_0.build_component_list(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configparser.SafeConfigParser"
    )
    assert len(var_0) == 1
    complex_0 = -1083.6 + 341.0054j
    var_1 = module_0.build_component_list(dict_0, var_0)
    var_2 = module_0.get_sources()
    var_3 = module_0.closest_scrapy_cfg()
    assert var_3 == ""
    var_4 = module_0.get_config(complex_0)
    var_5 = module_0.get_config(var_4)
    var_6 = module_0.init_env(set_syspath=var_3)
    var_7 = module_0.get_sources(var_5)
    var_8 = module_0.get_sources(var_3)
    var_9 = module_0.get_config()
    dict_1 = {var_3: var_6}
    var_10 = module_0.build_component_list(dict_1, dict_0)
    var_11 = module_0.get_config(var_0)
    module_0.build_component_list(var_8, complex_0)
