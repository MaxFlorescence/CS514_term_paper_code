# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import re as module_0
import difflib as module_1
import brew_install as module_2
import locale as module_3
import heapq as module_4
import builtins as module_5
import enum as module_6
import collections as module_7


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b";\xed\xd74"
    var_0 = module_0.search(bytes_0, bytes_0)
    none_type_0 = None
    var_1 = module_1.unified_diff(none_type_0, none_type_0)
    var_1.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    complex_0 = 940.579 + 4123j
    var_0 = module_1.ndiff(complex_0, complex_0, complex_0)
    module_0.sub(var_0, var_0, complex_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 629
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    dict_0 = {}
    error_0 = module_3.Error(**dict_0)
    error_1 = module_0.error(error_0)
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x8d\xbb\x87;\x99\xa4\x7f,\xcb\xeb\x17\x06\xca\x12\xceN\x91\xf8"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "O%"
    none_type_0 = None
    var_0 = module_1.context_diff(
        str_0, str_0, none_type_0, fromfiledate=str_0, n=str_0
    )
    var_1 = var_0.__dir__()
    list_0 = [var_0, none_type_0, str_0, var_1]
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    complex_0 = 2807.1827 - 799.51894j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, none_type_0, none_type_0, none_type_0
    )
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "oZ>|&/Z^rc"
    var_0 = module_0.template(str_0)
    var_0.get_opcodes()


def test_case_11():
    pass


@pytest.mark.xfail(strict=True)
def test_case_12():
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_2.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    list_0 = []
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bytes_0 = b"\x1bQ\xf3"
    var_0 = module_0.purge()
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    int_0 = -4
    none_type_0 = None
    var_0 = module_1.context_diff(int_0, int_0, tofile=none_type_0, n=none_type_0)
    module_2.match(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    dict_0 = {}
    module_0.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    var_0 = module_0.purge()
    var_1 = module_1.ndiff(var_0, var_0, charjunk=var_0)
    var_1.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "q8JW*RRFi"
    dict_0 = {}
    tuple_0 = (str_0, dict_0)
    none_type_0 = None
    module_2.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    float_0 = 933.4
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    var_0 = module_1.diff_bytes(bool_0, bool_0, bool_0, lineterm=bool_0)
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_24():
    float_0 = -2608.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = False
    var_0 = module_1.unified_diff(bool_0, bool_0, fromfiledate=bool_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    none_type_0 = None
    module_2.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


def test_case_32():
    int_0 = -2034
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_2.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = True
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.diff_bytes(bool_0, bool_0, bool_0, tofiledate=none_type_1)
    var_0.make_table(bool_0, bool_0, bool_0, context=none_type_0, numlines=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bytes_0 = b"\xc8\x1cX1:\xf6"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_2.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = "FJ5i\x0bl#/;N<Zh)wkl)s"
    module_4.nlargest(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    int_0 = -1326
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    var_0 = module_0.purge()
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_41():
    bytes_0 = b"\xc9\xb4\xb8\x13\xfc\xb5h\xac\xa8F\xf2M\xdd\x97"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = "r383\x0c:[\x0b<kQgU"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    differ_0 = module_1.Differ()
    module_2.get_new_command(differ_0, differ_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    float_0 = 709.7626
    module_0.split(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bytes_0 = b"h=\xb3V\xa7["
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    bool_0 = True
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    exception_0 = module_5.Exception(*list_0)
    var_0 = module_1.diff_bytes(bool_0, exception_0, list_0, tofile=bool_0)
    module_2.get_new_command(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    str_0 = "672RvpxyVPcjY6\\"
    module_6.auto(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bool_0 = True
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    tuple_0 = ()
    none_type_0 = None
    module_2.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    int_0 = 3664
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    int_0 = 955
    module_6.EnumMeta(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    set_0 = {error_0}
    module_1.get_close_matches(set_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    str_0 = "T&W' jRBY;`^:}M6~Eb"
    module_0.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    html_diff_0 = module_1.HtmlDiff()
    set_0 = {html_diff_0, html_diff_0, html_diff_0, html_diff_0}
    none_type_0 = None
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    bytes_0 = b"5\\\x01\xaf\r\x02\xca\xb8\x94\x1c"
    bool_0 = False
    var_0 = module_1.ndiff(bytes_0, bool_0, charjunk=bytes_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_60():
    none_type_0 = None
    int_0 = 1949
    module_2.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    list_0 = []
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    bytes_0 = b"\xef\xac\x83\xae\xbe\xf4\x01\xcc\x1e>\xa1\xba)\x06(\xfa"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    list_0 = []
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    enum_dict_0 = module_6._EnumDict()
    module_2.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    str_0 = "?.h#V"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    var_0 = module_0.purge()
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    bool_0 = True
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_0.findall(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    str_0 = "84^XQ6a/o"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = "9`wxJp)ge8\rRZ\r>W_3"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, tofile=none_type_0, fromfiledate=none_type_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    int_0 = -1610
    differ_0 = module_1.Differ(charjunk=int_0)
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        int_0, differ_0, int_0, differ_0, none_type_0, none_type_0
    )
    var_1 = module_1.unified_diff(differ_0, int_0, none_type_0, fromfiledate=var_0)
    module_0.finditer(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    float_0 = -280.248667
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    int_0 = -2673
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    str_0 = "YFGa0"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


def test_case_87():
    pass


@pytest.mark.xfail(strict=True)
def test_case_88():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    bytes_0 = b"\xc3\xf7\x97\xae?8b|\x13s\xd522\xf5\xe6x\xf1"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    exception_0 = module_5.Exception()
    list_0 = [exception_0, exception_0]
    module_1.IS_CHARACTER_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    complex_0 = -342.32743 + 768j
    module_0.template(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    bool_0 = True
    none_type_0 = None
    module_2.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


def test_case_95():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    enum_dict_0 = module_6._EnumDict()
    module_4.nlargest(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    set_0 = set()
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    bytes_0 = b"X~/\xd5Z\x15l-\x87\x03\xee\xaaP\x92=\xbc\xf36"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    dict_0 = {}
    module_1.IS_CHARACTER_JUNK(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    bytes_0 = b"\x96\x1b\xcc\x1eIM\x90"
    none_type_0 = None
    var_0 = module_1.diff_bytes(bytes_0, none_type_0, none_type_0)
    var_1 = var_0.__dir__()
    module_2.get_new_command(var_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    complex_0 = 656.35 - 181j
    module_6.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_2.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    list_0 = []
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, tofile=none_type_0)
    var_0.compare(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    int_0 = -302
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    set_0 = set()
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    str_0 = ',_kyTm0xk$mtl!")'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    str_0 = "UUBJ=PYx|J\n"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    float_0 = -3006.196
    var_0 = module_1.ndiff(float_0, float_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    str_0 = "Z="
    dict_0 = {str_0: str_0, str_0: str_0}
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    list_0 = [var_0, none_type_0, none_type_0]
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    bytes_0 = b""
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_120():
    none_type_0 = None
    module_0.escape(none_type_0)


def test_case_121():
    bool_0 = False
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0, rename=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    int_0 = 1059
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    str_0 = "J\\X`Z\t=mn]"
    bool_0 = True
    module_2.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_126():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    bytes_0 = b"\xc3"
    none_type_0 = None
    var_0 = module_1.restore(bytes_0, none_type_0)
    var_0.find_longest_match(bhi=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    int_0 = -1848
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    int_0 = -1069
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    float_0 = -693.759
    none_type_0 = None
    module_0.finditer(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    list_0 = []
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        tofiledate=none_type_0,
        n=none_type_0,
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    str_0 = "?Cw sx"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    bool_0 = False
    module_1.get_close_matches(bool_0, bool_0, cutoff=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    str_0 = "R8%y%"
    differ_0 = module_1.Differ(charjunk=str_0)
    module_2.get_new_command(differ_0, differ_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    exception_0 = module_5.Exception()
    module_2.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    int_0 = -3140
    module_4.nlargest(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    float_0 = 1255.8756
    module_2.match(float_0, float_0)


def test_case_142():
    bytes_0 = b"C"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0, module=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    bool_0 = True
    none_type_0 = None
    module_2.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    bool_0 = False
    none_type_0 = None
    module_2.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    int_0 = 2857
    module_2.get_new_command(int_0, int_0)


def test_case_146():
    float_0 = 1922.5393
    list_0 = [float_0, float_0, float_0, float_0]
    var_0 = module_1.IS_CHARACTER_JUNK(list_0, list_0)
    var_1 = module_1.unified_diff(var_0, list_0, list_0, fromfiledate=float_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    int_0 = -1716
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_2.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(a=none_type_0, autojunk=none_type_0)
    list_0 = [sequence_matcher_0, sequence_matcher_0, sequence_matcher_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    complex_0 = 566.23456 + 4553.3614j
    none_type_0 = None
    module_2.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    str_0 = "S0Nz[0vTd\t&"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    int_0 = 321
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    bytes_0 = b"e\x1a\xb6\xa8\xce\x0e\xdb\x10\xcc\xdd\xb2\xf9-1\xb8/\xacq$"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    int_0 = -110
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    complex_0 = 743.8831 + 311.976j
    none_type_0 = None
    module_2.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    bytes_0 = b"ts\xea\xfe\xe7\x95\x8a\xe4\xb4\xdf@\x91C"
    none_type_0 = None
    var_0 = module_1.context_diff(bytes_0, bytes_0, lineterm=bytes_0)
    module_0.sub(bytes_0, bytes_0, none_type_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_163():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    bytes_0 = b"\xcb\xe7\xbd};\xc5z\xbc\x91M\xb0)l\xa2\xd1"
    list_0 = [bytes_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    enum_dict_0 = module_6._EnumDict()
    bytes_0 = b"'\xd1\x80\xb6L\x08\xd07/"
    none_type_0 = None
    module_0.subn(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    int_0 = 851
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    str_0 = "a\n\x0bUf]P+k!Po?q]"
    int_0 = 435
    set_0 = {str_0, int_0}
    bytes_0 = b"c\xdf6\xba\xb9\xf1\xf2\x81\xb5\xb4\xb34\x113i\xf9H\x9d"
    var_0 = module_1.unified_diff(set_0, str_0, lineterm=bytes_0)
    module_4.nlargest(var_0, var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    complex_0 = -1045.20093 - 3247.048j
    tuple_0 = (complex_0,)
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, tuple_0)
    none_type_1 = None
    none_type_2 = None
    var_1 = module_1.context_diff(
        none_type_2, none_type_2, none_type_2, lineterm=none_type_2
    )
    var_1.make_table(none_type_1, none_type_1, none_type_1)


def test_case_170():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0, none_type_0, rename=none_type_0, defaults=none_type_0
        )


@pytest.mark.xfail(strict=True)
def test_case_171():
    int_0 = -3111
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    base_exception_0 = module_5.BaseException()
    module_2.get_new_command(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    str_0 = "$"
    none_type_0 = None
    module_0.subn(str_0, str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    int_0 = -105
    dict_0 = {int_0: int_0, int_0: int_0}
    module_2.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    str_0 = "K"
    var_0 = module_0.match(str_0, str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_179():
    int_0 = -937
    float_0 = -2939.555
    module_2.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    auto_0 = module_6.auto()
    module_6.unique(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    int_0 = 1715
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.split(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    str_0 = "Xm),S)E>2&"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    bytes_0 = b"\x13\x8e\xbf\x7fyyQ\xd6\x1b\xd81\xf7\x81\xa0L"
    bool_0 = True
    var_0 = module_1.restore(bytes_0, bool_0)
    var_0.make_file(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    float_0 = -435.958
    list_0 = [float_0, float_0, float_0, float_0]
    module_2.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bytes_0 = b"\x9ao"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.set_seq1(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    none_type_0 = None
    int_0 = 1744
    module_2.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_189():
    int_0 = -977
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    set_0 = set()
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    str_0 = "P5nz"
    none_type_0 = None
    module_0.subn(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_192():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_1.get_close_matches(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    none_type_0 = None
    bool_0 = True
    module_2.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    sequence_matcher_0 = module_1.SequenceMatcher()
    module_2.match(sequence_matcher_0, sequence_matcher_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    str_0 = "a#-gA&"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    bool_0 = False
    var_0 = module_1.ndiff(bool_0, bool_0, bool_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_199():
    var_0 = module_0.purge()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_200():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    str_0 = ""
    sequence_matcher_0 = module_1.SequenceMatcher(a=str_0)
    var_0 = module_1.diff_bytes(
        sequence_matcher_0,
        str_0,
        str_0,
        sequence_matcher_0,
        fromfiledate=str_0,
        tofiledate=str_0,
        n=str_0,
        lineterm=sequence_matcher_0,
    )
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    int_0 = -2936
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_203():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_204():
    int_0 = 1354
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    str_0 = "I\\,Vgz2G>_*u/=vy"
    none_type_0 = None
    module_0.sub(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    float_0 = 1157.19
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__call__(bool_0, bool_0, start=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    bool_0 = False
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    bytes_0 = b"\xe9\xb1\x85\xb8\x04\xa40\x83Yn#Db\x05\xb6]"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    none_type_0 = None
    str_0 = 'lB|ZY8av\n-F`"{(Yj'
    var_0 = module_1.IS_LINE_JUNK(str_0)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    str_0 = "6\tvM]&&"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    int_0 = -673
    module_2.get_new_command(int_0, int_0)


def test_case_217():
    bytes_0 = b""
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    str_0 = "c|kO:5*ZH"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    var_0 = module_0.purge()
    var_0.get_matching_blocks()


def test_case_220():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0,
            none_type_0,
            rename=none_type_0,
            defaults=none_type_0,
            module=none_type_0,
        )


@pytest.mark.xfail(strict=True)
def test_case_221():
    bytes_0 = b"rJmu\xd2\x9b\xf6>5"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    var_0 = module_0.purge()
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_224():
    bytes_0 = b"\xdc;Hv\xac\x19Me\x00HM\xd6\xd2Te"
    var_0 = module_0.template(bytes_0)
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    float_0 = -1187.206898
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    none_type_0 = None
    bool_0 = True
    module_2.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    bool_0 = True
    enum_dict_0 = module_6._EnumDict()
    enum_dict_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_228():
    int_0 = -6582
    set_0 = set()
    module_2.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    var_0 = module_0.purge()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_230():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


def test_case_231():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(list_0, none_type_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_233():
    dict_0 = {}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    float_0 = 761.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_2.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    object_0 = module_5.object()
    module_2.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    int_0 = 3390
    list_0 = [int_0, int_0, int_0, int_0]
    module_2.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    int_0 = 538
    list_0 = [int_0]
    module_2.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    var_0 = module_0.purge()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_241():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    float_0 = -1025.973947
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_244():
    int_0 = 1133
    var_0 = module_1.diff_bytes(int_0, int_0, int_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_245():
    bytes_0 = b"\xad\xf1\xb2\xe5?\x9a\x9c\xd6):\x02\x1e\x06<\x94"
    module_0.split(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    bytes_0 = b"5\xfd\xef.\xfc\xcaT\x06\x80\xf7\xef\x85\xd5\xe3\xd9W"
    module_0.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    str_0 = "NGZm2s~M'*\t+0qCu"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(none_type_0, b=none_type_0)
    sequence_matcher_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_251():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    set_0 = {regex_flag_0}
    none_type_0 = None
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    var_0 = module_0.purge()
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    bool_0 = False
    tuple_0 = ()
    module_2.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    bytes_0 = b"]A\xaa\x8f"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_256():
    float_0 = 1179.9734
    module_6.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofiledate=none_type_0
    )
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_258():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


def test_case_259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_260():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    bool_0 = False
    int_0 = 2812
    tuple_0 = (bool_0, int_0)
    module_2.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    tuple_0 = ()
    module_2.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    str_0 = "zx<S:*bb9>z^8A3YV"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    list_0 = []
    none_type_0 = None
    str_0 = "Z\x0b*rPO4de"
    tuple_0 = (str_0,)
    var_0 = module_1.unified_diff(
        list_0, list_0, list_0, none_type_0, tofiledate=tuple_0
    )
    var_0.__repr__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    complex_0 = 893.095 - 939.2458j
    none_type_0 = None
    var_0 = module_1.context_diff(complex_0, none_type_0, lineterm=none_type_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_267():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    complex_0 = -1642 - 4068.4929j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    int_0 = 1912
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, lineterm=none_type_0)
    none_type_1 = None
    module_2.get_new_command(none_type_1, none_type_1)


def test_case_271():
    int_0 = -2174
    set_0 = {int_0}
    with pytest.raises(ValueError):
        module_7.namedtuple(set_0, set_0, module=int_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    str_0 = "NQ3d`96`BK<.-=.7zn"
    var_0 = module_0.sub(str_0, str_0, str_0)
    var_1 = module_1.IS_CHARACTER_JUNK(var_0)
    var_2 = module_4.nlargest(var_1, str_0)
    var_3 = module_1.ndiff(var_2, var_0, var_2)
    module_0.split(var_3, var_3)


@pytest.mark.xfail(strict=True)
def test_case_273():
    dict_0 = {}
    var_0 = module_1.restore(dict_0, dict_0)
    module_2.match(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    error_0 = module_3.Error()
    none_type_0 = None
    module_2.match(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    bool_0 = False
    bytes_0 = b"!tN"
    tuple_0 = (bool_0, bytes_0)
    var_0 = module_1.diff_bytes(tuple_0, bytes_0, tuple_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    none_type_0 = None
    tuple_0 = ()
    module_0.subn(none_type_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_277():
    bytes_0 = b"\xbaPc\x02\xb2\x10?\x1ed(\x10\xb2\xc8_\xce"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_278():
    str_0 = "/n~.W_\r_\n+BEv\x0c"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    bytes_0 = b"\xce\x0c\xadM"
    module_2.get_new_command(bytes_0, bytes_0)


def test_case_280():
    none_type_0 = None
    bytes_0 = b"v\x89a2\x83\x16\x11\x1a\xbb)\xf7\x0e\xe4\x87\x07\x04\xd2\xcb|"
    none_type_1 = None
    var_0 = module_1.diff_bytes(
        bytes_0, bytes_0, bytes_0, none_type_1, fromfiledate=bytes_0
    )
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    bytes_0 = b"Fv~W\xfep\xa2\xe1\x1e"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    tuple_0 = ()
    none_type_0 = None
    module_2.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    var_0 = module_0.purge()
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_1.IS_CHARACTER_JUNK(var_1)


@pytest.mark.xfail(strict=True)
def test_case_287():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    module_0.finditer(var_0, var_0)


def test_case_288():
    bytes_0 = b"\x00\x83\xde\xc4\x9a\x0f"
    float_0 = -2243.2
    with pytest.raises(ValueError):
        module_1.get_close_matches(bytes_0, bytes_0, cutoff=float_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    int_0 = 416
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    int_0 = -915
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    int_0 = 1464
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    str_0 = "L# Ci*"
    none_type_0 = None
    var_0 = module_1.restore(str_0, none_type_0)
    list_0 = [var_0, none_type_0, var_0, var_0]
    module_2.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    bytes_0 = b"k\xa7`c`2"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    float_0 = -4740.957
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, float_0, none_type_0, tofiledate=none_type_0, n=none_type_0
    )
    var_0.__setattr__(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    str_0 = "GQ;FNxs:}/"
    var_0 = module_0.match(str_0, str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_296():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    str_0 = "pjU1Ba.c{/XHE'{( ("
    none_type_0 = None
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    str_0 = "gX`%D"
    var_0 = module_1.IS_LINE_JUNK(str_0)
    var_1 = module_0.purge()
    module_0.fullmatch(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_299():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    int_0 = 344
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    int_0 = 815
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    int_0 = -1666
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    bytes_0 = b"\xf1B^jK\x8e\xb5%#\xd0\xe2\xa5"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    str_0 = ".='|VXeXoBSU"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    float_0 = 1378.1917
    none_type_0 = None
    module_0.search(none_type_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_2.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = "cOu^0W"
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    module_2.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    int_0 = 1327
    module_2.get_new_command(int_0, int_0)


def test_case_313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_314():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    list_0 = []
    none_type_1 = None
    var_1 = module_1.ndiff(list_0, none_type_1, none_type_1)
    int_0 = 2649
    dict_0 = {var_1: list_0, int_0: list_0}
    module_1.IS_LINE_JUNK(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    str_0 = ")*.uq@S} ;,&w,`.0&O"
    none_type_0 = None
    var_0 = module_1.diff_bytes(str_0, none_type_0, str_0)
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_316():
    bytes_0 = b"\xe3\xa1\xab\xf0\xfcw\xfcm*\x00\xda\x010\xa2*\xd2?"
    module_1.get_close_matches(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    int_0 = -970
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    int_0 = 1848
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    str_0 = "'(tad "
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
    )
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_322():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    int_0 = -2295
    none_type_0 = None
    var_0 = module_1.diff_bytes(int_0, int_0, int_0, tofile=int_0, lineterm=int_0)
    var_0.__call__(int_0, int_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    set_0 = set()
    none_type_0 = None
    module_2.get_new_command(set_0, none_type_0)


def test_case_325():
    int_0 = -2284
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    var_0 = module_1.diff_bytes(set_0, set_0, none_type_0, int_0)
    none_type_1 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_1, none_type_1)


def test_case_326():
    float_0 = -3993.02
    with pytest.raises(TypeError):
        module_7.namedtuple(float_0, float_0, module=float_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    int_0 = -1317
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    int_0 = 1658
    none_type_0 = None
    module_0.search(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    none_type_0 = None
    bytes_0 = b"\xec\xe1i [i"
    module_2.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_331():
    bytes_0 = b"\tpp\xcfl\x92\xf8=\t\x0c\xe8\x9b\xe5\x87"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_333():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    complex_0 = -403.2 - 1962j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    int_0 = 1175
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bytes_0 = b"\xc8"
    var_0 = module_0.split(bytes_0, bytes_0)
    var_1 = module_1.restore(var_0, var_0)
    str_0 = "UY&(FhZYK\\MLp  GWk}E"
    str_1 = ""
    var_2 = module_1.diff_bytes(
        str_1, str_1, str_1, fromfiledate=str_1, tofiledate=str_1, lineterm=str_1
    )
    var_2.make_file(str_0, str_0, numlines=str_0)


def test_case_340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_341():
    bytes_0 = b"\xf8\xc9uW}"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        bool_0, bool_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    bool_0 = True
    module_0.escape(bool_0)


def test_case_344():
    str_0 = "ua\r9Q"
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    int_0 = -1102
    list_0 = [int_0, int_0]
    module_2.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    list_0 = []
    module_1.IS_CHARACTER_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    int_0 = 1357
    set_0 = {int_0, int_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_352():
    str_0 = '"dC*VX<?\t|.\r<p#'
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    str_0 = "/c51\\B#e=N^ohI`"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    float_0 = -1202.521
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    str_0 = "-*2"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    str_0 = '}a,z"I^wv\x0bf#<$A'
    module_0.split(str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    str_0 = "^LzmV^+Qx8%b"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    complex_0 = -242.52308 + 753.55422j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    float_0 = -1896.274904
    none_type_0 = None
    module_0.compile(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    none_type_0 = None
    module_0.escape(none_type_0)


def test_case_367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_368():
    bool_0 = False
    none_type_0 = None
    module_0.findall(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    int_0 = 538
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    float_0 = 1983.3
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    bytes_0 = b"\xf7\x19\xb5\xf1Gc\xdd\x92-xdD\xf2"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    bytes_0 = b"\xa5\xe6\x8c\xdfU\x86\xa6SZ\xaaq\xc0\x91\xc6'\x8d0:\x87\x96"
    none_type_0 = None
    module_0.subn(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.ndiff(none_type_1, none_type_1)
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    error_0 = module_3.Error()
    module_2.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    str_0 = "L=$}qDb*D."
    module_1.get_close_matches(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_2.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    bytes_0 = b"\xce\x16\xb4\xb7L`_\r\xa4\xd2\xe5\x91\xb8"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    str_0 = "|?`2j\x0bKx&"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    int_0 = 300
    dict_0 = {int_0: int_0}
    module_2.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    bytes_0 = b"\x1d\xbb4\xab\xa8\xa8\x97\xfe\xf0\x95i\x04\xabv\xbc"
    var_0 = module_0.purge()
    var_0.__setitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bool_0 = False
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    bool_0 = True
    var_0 = module_1.ndiff(bool_0, bool_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    int_0 = -1819
    module_4.nlargest(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    bytes_0 = b"\xd9\xdb^~\xab\xbd\xa7\x86\xf1[\xe7"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    module_6.EnumMeta()


def test_case_392():
    bytes_0 = b"\xf6\x16\x9e*H\x95)\xb3\xbdZ\xe3"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0, rename=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    str_0 = "bY` j+z@&_HQ8F"
    dict_0 = {str_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    int_0 = 1266
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofile=none_type_0
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    int_0 = -1452
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    var_0 = module_1.restore(dict_0, bool_1)
    module_2.match(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    int_0 = 433
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    bytes_0 = b"\xc1+\xc4\xa80k\xed\x83i"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.findall(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    bytes_0 = b"!\x89\x94\xb84\x19\\\xff\xbfF\xadt\x04\xc2\x01"
    var_0 = module_0.template(bytes_0)
    module_0.search(var_0, bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    int_0 = -468
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    none_type_0 = None
    bool_0 = False
    tuple_0 = (bool_0,)
    module_2.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        fromfiledate=none_type_0,
    )
    module_2.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    var_0 = module_0.purge()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_406():
    str_0 = "=`@F6="
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    enum_dict_0 = module_6._EnumDict()
    none_type_0 = None
    module_2.match(enum_dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.ratio()


def test_case_409():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    var_0 = module_0.purge()
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_411():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    int_0 = 403
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    str_0 = "FxMKF#Cd'+l#\x0bZ?5E"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    bytes_0 = b"\xc5\x87+2\\\xf9&/\x82\xc58m\xcf"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, fromfiledate=none_type_0, lineterm=none_type_0
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    bool_0 = True
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    var_0 = module_0.purge()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_421():
    bytes_0 = b"\\\xdc]H\xea\xd1\x1f\x1f\xf1x\xad\x1f.\xecM\x0b\x8b\xe1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.compile(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    str_0 = "<<r~m\r~N+-k?x9o"
    var_0 = module_0.finditer(str_0, str_0)
    tuple_0 = (str_0, var_0)
    module_2.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    float_0 = -2979.0
    module_1.IS_LINE_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    html_diff_0 = module_1.HtmlDiff()
    module_2.match(html_diff_0, html_diff_0)


@pytest.mark.xfail(strict=True)
def test_case_428():
    float_0 = -91.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_429():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    none_type_0 = None
    module_2.match(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    int_0 = -522
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    bool_0 = False
    bool_1 = True
    module_2.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_432():
    int_0 = -784
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, fromfiledate=none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    int_0 = 123
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    dict_0 = {}
    none_type_0 = None
    module_2.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    bool_0 = True
    bool_1 = True
    module_2.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_439():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        tofiledate=none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    var_1 = module_1.unified_diff(var_0, none_type_0, var_0)
    bytes_0 = b"F\xdfA\xa6RqU\xcc\xcaM"
    var_2 = module_1.diff_bytes(
        bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, lineterm=bytes_0
    )
    module_1.IS_CHARACTER_JUNK(var_2)


@pytest.mark.xfail(strict=True)
def test_case_440():
    bool_0 = True
    set_0 = set()
    dict_0 = {bool_0: bool_0, bool_0: set_0}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    differ_0 = module_1.Differ()
    none_type_0 = None
    module_0.search(differ_0, none_type_0, differ_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    str_0 = "&\t27\x0b#igE=\rO@/v#BCX"
    tuple_0 = (str_0,)
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    float_0 = 237.24
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    int_0 = -149
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    var_0 = module_0.purge()
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_451():
    none_type_0 = None
    bytes_0 = b"\x8dF\xfdA\x11\xbf\xbaA\xdd\xfc*\xe8@\x11\xec\xe4"
    module_2.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    list_0 = []
    none_type_0 = None
    module_0.subn(list_0, list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    str_0 = "%ajs"
    var_0 = module_0.search(str_0, str_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    str_0 = "D+"
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, fromfiledate=none_type_0)
    var_0.__setattr__(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    str_0 = "uw&D,~ %"
    none_type_0 = None
    var_0 = module_1.ndiff(str_0, none_type_0)
    module_0.compile(var_0)


def test_case_460():
    bytes_0 = b"e !Y\xfc\x81\xa2:e\x83\x90\x8e>\x81i}"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0, defaults=bytes_0, module=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    float_0 = 658.399
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    float_0 = -1264.56373
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    bytes_0 = b"R\x02\x06\xdcr\x88"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    str_0 = "np\r()}eqrw/64"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    str_0 = "I_B.wG_9iI[%o\n"
    list_0 = [str_0, str_0, str_0, str_0]
    int_0 = -416
    module_0.sub(str_0, list_0, str_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    str_0 = "L9Dgp`Ku-q(PLd{\rAb"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    int_0 = 880
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    int_0 = 522
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    str_0 = "^G29r"
    var_0 = module_0.escape(str_0)
    var_1 = module_0.template(var_0)
    str_1 = "`UNBp\\Tp"
    module_6.unique(str_1)


@pytest.mark.xfail(strict=True)
def test_case_472():
    bytes_0 = b"\x8dU\xb9\x8e\xccS\x12\xbc\x88b\xd1\xd2"
    none_type_0 = None
    module_0.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_473():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_474():
    str_0 = "\">.<$>VZ3'>G'I"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    int_0 = -84
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    dict_0 = {}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    set_0 = {var_0}
    module_2.get_new_command(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    int_0 = 579
    set_0 = {int_0, int_0}
    var_0 = module_1.unified_diff(int_0, int_0, int_0, n=set_0)
    tuple_0 = (int_0, int_0, var_0, var_0)
    module_2.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    float_0 = 994.6162
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    str_0 = "0>xYAI%ryLYytq&"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    base_exception_0 = module_5.BaseException()
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    var_0 = module_0.purge()
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    str_0 = "cA&Mm4P\x0bxm|TkLQ+a"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    bool_0 = True
    none_type_0 = None
    module_4.nlargest(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    exception_0 = module_5.Exception()
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        exception_0, exception_0, exception_0, tofile=exception_0, lineterm=exception_0
    )
    var_0.compare(none_type_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    str_0 = ",PEW?yG\rrU"
    str_1 = "u<i"
    str_2 = "r<w\x0c+fR#"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_0}
    module_5.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.finditer(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = 2075
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    bytes_0 = b"\xe8\xd7q\xa0\xc4\x19$\xa27\x0c\xce\x9c\xf6,\x80M"
    set_0 = {bytes_0, bytes_0}
    module_2.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, fromfiledate=none_type_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_495():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, none_type_0, none_type_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    str_0 = "X'MC'qg]!K}J"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    bool_0 = False
    bool_1 = False
    module_2.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_502():
    str_0 = "\nd@mJA}Ph\\+/}J"
    var_0 = module_1.IS_CHARACTER_JUNK(str_0, str_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_503():
    module_6.EnumMeta()


def test_case_504():
    none_type_0 = None
    int_0 = -1251
    float_0 = 1829.0
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, int_0, rename=float_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    sequence_matcher_0 = module_1.SequenceMatcher()
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_1.context_diff(
        tuple_0,
        none_type_0,
        tofile=tuple_0,
        fromfiledate=none_type_0,
        tofiledate=tuple_0,
    )
    var_0.__contains__(sequence_matcher_0, sequence_matcher_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    var_0 = module_0.purge()
    var_1 = module_1.restore(var_0, var_0)
    module_2.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


def test_case_509():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    str_0 = "ecjFE!sG/&(_"
    none_type_0 = None
    str_1 = 'm"k8R\nRJ\'\nU\n%>u"X'
    module_0.subn(str_0, none_type_0, str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_511():
    float_0 = -181.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_1.diff_bytes(tuple_0, tuple_0, none_type_0, fromfiledate=none_type_0)
    module_0.split(tuple_0, var_0, none_type_0)


def test_case_513():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    float_0 = -2409.33037
    none_type_0 = None
    module_4.nlargest(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    bytes_0 = b",\xea\xa4\x93\x95\x0e4"
    error_0 = module_0.error(bytes_0, pos=bytes_0)
    var_0 = module_0.purge()
    var_0.set_seqs(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    int_0 = -978
    set_0 = set()
    module_2.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    float_0 = 1846.30061
    bytes_0 = b""
    list_0 = [float_0, bytes_0, float_0, bytes_0]
    module_0.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    bytes_0 = b"\xa4n\xd7\xad\xb3&zkM5>\xa65\xb9R\x9dt\xdbj"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_521():
    float_0 = 2100.776
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    complex_0 = 1092.701 + 2231.950204j
    list_0 = [complex_0, complex_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    int_0 = 228
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    tuple_0 = ()
    module_1.IS_CHARACTER_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    float_0 = 210.176
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    bool_0 = True
    var_0 = module_1.ndiff(bool_0, bool_0, bool_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_531():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    float_0 = -602.1888
    str_0 = "'ik\x0b}Q18ibV~4(,e"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    int_0 = 575
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    str_0 = "krYc,Cfx\x0cD]"
    float_0 = 3359.019565
    none_type_0 = None
    module_0.subn(str_0, float_0, none_type_0, str_0, str_0)


def test_case_535():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0, none_type_0, rename=none_type_0, module=none_type_0
        )


@pytest.mark.xfail(strict=True)
def test_case_536():
    str_0 = "+o^OPR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    tuple_0 = ()
    module_4.nlargest(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    enum_dict_0 = module_6._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    str_0 = "AMxQo+/ysMT7_"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    list_0 = []
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    complex_0 = 1839.25931 - 672.0813j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    complex_0 = 2885.22 - 2178.29912j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    int_0 = -2980
    module_4.nlargest(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    int_0 = 2494
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    bytes_0 = b"\xab:\ng\xf8\xbc\x8a"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    str_0 = "d"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    bytes_0 = b"\xad\x03"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    list_0 = []
    module_1.IS_LINE_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    str_0 = "\x0cRY}g4"
    int_0 = -4133
    var_0 = module_1.unified_diff(str_0, int_0, fromfiledate=int_0, lineterm=int_0)
    none_type_0 = None
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    str_0 = 'UmVQ"q*a(d*Boz'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    bool_0 = False
    none_type_0 = None
    module_4.nlargest(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    int_0 = 385
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    float_0 = -2524.16681
    list_0 = [float_0]
    none_type_0 = None
    module_0.template(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    str_0 = "C;jhLw\x0bhl."
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    bytes_0 = b"\x9b\x95\xa2i+\xe8\x8d\xa7p\x85(j\xafs\xc6\xbf\xd1\x8c"
    module_4.nlargest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    bool_0 = True
    module_0.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    bytes_0 = b".pjR\xab0\x92\xf9e\xb6"
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    set_0 = set()
    module_0.findall(set_0, set_0, set_0)


def test_case_568():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    int_0 = -2865
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        lineterm=none_type_0,
    )
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_573():
    complex_0 = -2603.177 - 2746.9j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    float_0 = 1913.3497
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    list_0 = []
    error_0 = module_3.Error(*list_0)
    module_0.subn(error_0, list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    none_type_0 = None
    list_0 = []
    var_0 = module_1.restore(list_0, list_0)
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    str_0 = "}"
    var_0 = module_1.restore(str_0, str_0)
    var_1 = module_1.restore(var_0, var_0)
    dict_0 = {var_1: str_0}
    module_0.sub(dict_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    var_0 = module_0.purge()
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_580():
    str_0 = "1^Lp"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    str_0 = "xujk2D/DF )X<"
    var_0 = module_1.IS_LINE_JUNK(str_0)
    exception_0 = module_5.Exception()
    float_0 = -1805.854
    module_1.IS_CHARACTER_JUNK(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    float_0 = 1306.47
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    bytes_0 = b"\xd0\xde?"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    list_0 = []
    base_exception_0 = module_5.BaseException(*list_0)
    module_2.get_new_command(base_exception_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    bytes_0 = b"\xe7\xd6C\x8dA\xc8\x88\xae"
    module_1.IS_LINE_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, bool_0, charjunk=none_type_0)
    bytes_0 = b"b\x95\x01G\xe1\xf7"
    module_2.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_590():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_591():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    list_0 = []
    module_1.IS_CHARACTER_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    str_0 = "ZWKBg5!X\n&Vgm1kP,C"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    var_0 = module_1.diff_bytes(list_0, none_type_0, list_0, tofile=str_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    dict_0 = {}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    str_0 = "&;G"
    var_0 = module_0.purge()
    var_0.__contains__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    complex_0 = -1109 + 177j
    none_type_0 = None
    module_0.finditer(complex_0, none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    complex_0 = 1915 + 1320.48j
    module_0.compile(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    str_0 = "v,kLj\\\n_"
    none_type_0 = None
    str_1 = "MJfkhIQe"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    int_0 = -343
    list_0 = [int_0, int_0]
    bytes_0 = b'\xe7"\x03\x04\xa6\xca\x8c\xd8\x83C'
    module_2.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    list_0 = []
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    int_0 = 1555
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    int_0 = -2426
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    float_0 = 3365.5
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    bytes_0 = b"CW\x8e+\xdb\x17\xb4"
    module_6.EnumMeta(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    list_0 = []
    module_0.compile(list_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    str_0 = "YkY\x0cxp+i.DG'V^"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    int_0 = 115
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_2.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    int_0 = 3774
    none_type_0 = None
    var_0 = module_1.ndiff(int_0, int_0, int_0, none_type_0)
    module_2.get_new_command(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    int_0 = 2542
    module_2.match(int_0, int_0)


def test_case_616():
    bytes_0 = b"\x01\x00>\x9c\xdfAQ\x81'\xfb\x94\xc9#Q\xc0E\xc5\xfa\x80"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0, defaults=bytes_0, module=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    float_0 = -3200.727
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    str_0 = "opCv7';m"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    float_0 = 1785.9916
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    differ_0 = module_1.Differ()
    module_2.match(differ_0, differ_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    var_0 = module_0.purge()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_624():
    bytes_0 = b"\x92\x03\x19P\x03\xd3N\xbbW\xad\x93\xd6\x8a"
    bytes_1 = b"\xed\xc8HK\xa9\xa6ees\xa4E\x9c\x04\xf2\x04 "
    bool_0 = False
    tuple_0 = (bytes_0, bytes_1, bool_0)
    module_2.match(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_625():
    tuple_0 = ()
    var_0 = module_1.unified_diff(tuple_0, tuple_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    none_type_0 = None
    bytes_0 = b"\xc1\xbb\xec|\x17IzK\xeb"
    module_2.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    var_0 = module_0.purge()
    var_1 = module_1.restore(var_0, var_0)
    var_2 = module_1.ndiff(var_1, var_1, charjunk=var_1)
    module_2.match(var_2, var_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_0.finditer(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    int_0 = -31
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    list_0 = []
    module_1.IS_LINE_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    int_0 = 20
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    int_0 = -2419
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    none_type_0 = None
    bytes_0 = b"\xa0\x15*s+\x98"
    module_2.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    str_0 = "s:%DAR%t\r_"
    var_0 = module_0.split(str_0, str_0)
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    bytes_0 = b"\x9eA\x98\xa1\x84dF\xdbto\x9f\xe8\xc4O\x11\x9bP\xee\x1e"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.search(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    float_0 = 2391.37
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(a=none_type_0, b=none_type_0)
    module_2.match(none_type_0, sequence_matcher_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    tuple_0 = ()
    none_type_0 = None
    module_0.compile(tuple_0, none_type_0)


def test_case_645():
    exception_0 = module_5.Exception()
    with pytest.raises(TypeError):
        module_7.namedtuple(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    str_0 = "Ectksx=PX8WY/-)?S"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    int_0 = -1205
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    int_0 = -838
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_651():
    bytes_0 = b"\xc0\xca)\xa8\x19O\xc9\x0f\x02\xb9l^3\xb5"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    bytes_0 = b"\xfdo(\xe6U\xa5\xcc\xfc\xea\x87Wy\xc3[\x98"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    none_type_0 = None
    str_0 = "*iC#\n<IWk\n"
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, tofile=none_type_0, lineterm=str_0
    )
    module_2.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    str_0 = "CZ}]p3\x0cL_\x0b~-`Q98E=-^"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    bool_0 = True
    str_0 = "v"
    bool_1 = False
    var_0 = module_1.unified_diff(
        str_0, str_0, str_0, fromfiledate=bool_1, tofiledate=bool_1
    )
    var_0.set_seq1(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0)
    str_0 = "W\nosQb"
    none_type_1 = None
    module_4.nlargest(str_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    dict_0 = {}
    none_type_0 = None
    module_2.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_664():
    float_0 = -1286.87525
    module_6.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    bytes_0 = b"\xe7\x9d0"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    float_0 = 2176.081918
    module_0.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, tofile=none_type_0, lineterm=none_type_0
    )
    tuple_0 = (var_0,)
    module_2.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    int_0 = -2122
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, bool_0, none_type_0)


def test_case_670():
    int_0 = 2487
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0
    )
    int_0 = -1353
    module_1.IS_LINE_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    str_0 = ")i-lE;C~CvU5GqSuh_"
    bytes_0 = b"\xba\xdb\x12\xed\xd4{\xc4*"
    module_2.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_675():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_676():
    bytes_0 = b"z\xd8\xe1\x0b\x18&E5\xedK\x83![8"
    module_0.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    float_0 = 1248.33
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    var_0 = module_0.purge()
    var_0.__delattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    int_0 = 812
    bool_0 = False
    module_0.sub(int_0, int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    list_0 = []
    none_type_0 = None
    module_0.template(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    str_0 = ">\rH"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_684():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    float_0 = -2293.78883
    list_0 = [float_0, float_0]
    module_0.search(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_2.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    int_0 = 4190
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    str_0 = "*kU,5L5"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    bytes_0 = b"\x1c\xf6\x08\x86}B\xbe!\xe5\xbfk"
    var_0 = module_0.purge()
    var_0.__delattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    bytes_0 = b"\xb9\xe4G\x8ec}\x06\x8e\xaaz\xe23 \xe5\x08!\x12"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    float_0 = 2734.836203
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    str_0 = "}e>)b^7d(-~"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    error_0 = module_3.Error()
    int_0 = 418
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    complex_0 = 504 - 996.1738j
    var_0 = module_1.ndiff(complex_0, complex_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    bytes_0 = b"\x06\xf8"
    var_0 = module_1.unified_diff(bytes_0, bytes_0, fromfiledate=bytes_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    int_0 = -1656
    module_0.Scanner(int_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    bytes_0 = b"\xf9X\x14"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    differ_0 = module_1.Differ()
    dict_0 = {
        differ_0: differ_0,
        differ_0: differ_0,
        differ_0: differ_0,
        differ_0: differ_0,
    }
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    tuple_0 = ()
    var_0 = module_1.unified_diff(tuple_0, tuple_0, tofile=tuple_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    int_0 = -607
    html_diff_0 = module_1.HtmlDiff(charjunk=int_0)
    none_type_0 = None
    module_2.match(html_diff_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    auto_0 = module_6.auto()
    module_0.template(auto_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    float_0 = -458.314669
    sequence_matcher_0 = module_1.SequenceMatcher(float_0, float_0)
    sequence_matcher_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_708():
    int_0 = 728
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    str_0 = "zBbLZ;,kzWR-FW1!"
    bool_0 = True
    module_2.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    list_0 = []
    none_type_0 = None
    module_2.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    str_0 = "#Osiv;pPOhC1{"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    bytes_0 = b"s\n\x8dyW\xf6\x9bL\x82U]K"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    int_0 = -3194
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    int_0 = 1552
    module_0.match(int_0, int_0)


def test_case_716():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    complex_0 = 341.57644 - 2603.548486j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    float_0 = -550.38291
    module_1.IS_CHARACTER_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    int_0 = -1927
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    var_0 = module_0.purge()
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_723():
    int_0 = 2049
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    none_type_0 = None
    bool_0 = True
    module_0.split(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, none_type_0, charjunk=none_type_0)
    var_1 = module_1.context_diff(
        var_0, bool_0, none_type_0, var_0, n=bool_0, lineterm=none_type_0
    )
    module_0.sub(var_1, none_type_0, bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    str_0 = "jP>'}:\tR2<r\"i+k,"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    int_0 = 4072
    var_0 = module_1.context_diff(int_0, int_0)
    var_1 = var_0.__dir__()
    module_0.sub(int_0, int_0, int_0, flags=var_1)


@pytest.mark.xfail(strict=True)
def test_case_728():
    bytes_0 = b"\xc2_"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    int_0 = -2843
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    bool_0 = False
    bytes_0 = b"\x11\xa6\xacB]\xb9\xf7\xad\xc8\xb5\xf1&w\xbcP"
    module_2.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        tuple_0, tuple_0, none_type_0, fromfiledate=none_type_0, lineterm=none_type_0
    )
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_732():
    set_0 = set()
    module_0.subn(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    float_0 = -606.61
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    str_0 = "M$I"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    int_0 = 3410
    module_2.get_new_command(int_0, int_0)


def test_case_738():
    bool_0 = True
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    bytes_0 = b"\xae\x9d$\xb3\x80\xe7\xc2\xae\x19\xd3\x86H\xc5\xcb!\xf0\x16s"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    int_0 = 1023
    tuple_0 = (int_0,)
    module_1.Match(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    str_0 = "$6S"
    var_0 = module_1.IS_CHARACTER_JUNK(str_0, str_0)
    module_2.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    int_0 = 1865
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    enum_dict_0 = module_6._EnumDict()
    module_0.finditer(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    str_0 = ">S(rw\tM%|.Qu8@\r"
    var_0 = module_1.restore(str_0, str_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    int_0 = -1212
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_6.auto(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    bytes_0 = b"j&\xd2?7\xcfO"
    module_1.IS_LINE_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    float_0 = 4482.0
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = sequence_matcher_0.get_matching_blocks()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    bool_0 = False
    bytes_0 = b"\xf5\xb2\x96K2\x1cF\x9e\xdaN\x83"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_2.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    bytes_0 = b"\x9b\x9bf3T\xa9"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    module_6.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    bytes_0 = b"\x9b\xdbn/X\xff\xc0\x9f\xc6\x11\x9asu\x8a\x06\x98u<\x94"
    differ_0 = module_1.Differ(bytes_0)
    module_0.findall(differ_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    str_0 = "vl$Cn7Tt/g{Wd=~1"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    none_type_0 = None
    module_3.Error(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_0.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    enum_dict_0 = module_6._EnumDict()
    var_0 = module_0.purge()
    var_0.make_file(enum_dict_0, enum_dict_0, enum_dict_0, charset=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    str_0 = "g|\t%]?\r\x0b"
    var_0 = module_0.findall(str_0, str_0)
    module_2.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    int_0 = -1893
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    int_0 = 853
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    bool_0 = True
    none_type_0 = None
    module_1.get_close_matches(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    bool_0 = True
    module_0.findall(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    str_0 = "8snv\\Z"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_2.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    str_0 = "bz|M[x[w[R"
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0, list_0, list_0]
    module_0.subn(list_0, list_0, list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    int_0 = -202
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    tuple_0 = ()
    module_1.IS_LINE_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    str_0 = ":/#Z\n3M~$wt.s/gu,Aj"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_785():
    str_0 = "y"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    float_0 = -4146.419649
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    int_0 = -1864
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    float_0 = -2597.357
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    str_0 = 'K2}i"v)o8AZ'
    str_1 = "ofMmsi\x0cQA\tOOZb"
    module_2.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_791():
    bytes_0 = b"u\x11\xaa\xd9R\xf7\x07iaz=\xb0\xd5Q[\xf49\xdb\xf3)"
    var_0 = module_1.restore(bytes_0, bytes_0)
    module_0.search(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    base_exception_0 = module_5.BaseException()
    differ_0 = module_1.Differ(base_exception_0)
    module_0.split(differ_0, differ_0, flags=base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, none_type_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    bytes_0 = b"lB\x880r\xd57\t\xb3"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    str_0 = "TA/ZD"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    bytes_0 = b"M\xb9"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    auto_0 = module_6.auto()
    module_2.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_1.get_close_matches(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    bytes_0 = b"\xcf@\xfe\x17\xb2\xe7\xc7\xba\xc2\xd0-\x00\x93\xd1Q"
    module_0.search(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    float_0 = 613.55657
    none_type_0 = None
    module_0.findall(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    int_0 = 278
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    float_0 = 1959.493
    module_2.match(float_0, float_0)


def test_case_805():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    complex_0 = 1168.2 - 3284.207631j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    str_0 = "~(F0kMn?`^(5"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    bytes_0 = b"h\x01\xaf\x8f\xa6a\xb1"
    int_0 = -2126
    module_2.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    sequence_matcher_0 = module_1.SequenceMatcher()
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    float_0 = -295.6
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    none_type_0 = None
    bytes_0 = b"\xb9"
    var_0 = module_1.restore(bytes_0, bytes_0)
    var_0.make_file(none_type_0, none_type_0, context=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    dict_0 = {}
    module_0.subn(dict_0, dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    bytes_0 = b"\x0c8>\xa5\xd2k"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    bytes_0 = b"\xe1Z"
    none_type_0 = None
    module_0.finditer(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    bytes_0 = b"O\xf8\xb5"
    var_0 = module_0.escape(bytes_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    int_0 = 557
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    none_type_0 = None
    bytes_0 = b"\xc2\xbb~"
    module_0.subn(none_type_0, none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    int_0 = -1254
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    none_type_0 = None
    module_0.compile(none_type_0)


def test_case_824():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    auto_0 = module_6.auto()
    module_0.findall(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    complex_0 = 2483 + 743.725j
    module_1.get_close_matches(complex_0, complex_0, cutoff=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    str_0 = "#cD'20b[>j~'"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    int_0 = -1247
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    int_0 = 1146
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    int_0 = 4195
    module_1.IS_CHARACTER_JUNK(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    bool_0 = True
    bytes_0 = b"\xcd\x12,\xa0s\x9a\x8cK\x07#Q\xde]\xear,\xed\xa1\x1e"
    module_2.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0)
    var_0.set_seq2(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    float_0 = -77.0
    var_0 = module_1.unified_diff(float_0, float_0, lineterm=float_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    float_0 = -828.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    float_0 = -1146.74371
    set_0 = {float_0}
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    int_0 = 1716
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    list_0 = []
    var_0 = module_1.ndiff(list_0, list_0)
    module_2.match(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    str_0 = 'G~C\\"#$\t{j0av+H'
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bytes_0 = b"\xb5\xe1\xd2\xbbL|l\xb9ts\x0eV\x85M\xa4.\x0f?\xc5"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    float_0 = -1526.7676
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    float_0 = -2055.92666
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(b=none_type_0, autojunk=none_type_0)
    sequence_matcher_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_847():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_2.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    complex_0 = 577 + 1095.997j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    bytes_0 = b"\xcex\xe5\x07 \xf7\xc6k\xf9\x16\xcb\xf4{\xfa\xe7K\xd0\x08(\x12"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    str_0 = "(WFA\x0c{\x0bW>!iXp4"
    var_0 = module_1.unified_diff(str_0, str_0, error_0, n=error_0)
    module_2.get_new_command(error_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    bytes_0 = b"/e;\xd5\\"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    complex_0 = -310.2 - 204.937778j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    bytes_0 = b"e\xfc\xdf\xf7\xe9\xe9\x1d\xce\xe6\xfa{\xb8"
    var_0 = module_1.restore(bytes_0, bytes_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_861():
    float_0 = -7.0
    module_0.compile(float_0)


def test_case_862():
    bool_0 = True
    tuple_0 = (bool_0,)
    with pytest.raises(ValueError):
        module_7.namedtuple(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    str_0 = "_\x0b/3p;D,\r\x0b"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    var_0 = module_0.purge()
    module_6.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    enum_dict_0 = module_6._EnumDict()
    enum_dict_0.__setitem__(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    float_0 = 195.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    int_0 = 2677
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    float_0 = -295.178
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    int_0 = 351
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    int_0 = 2276
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    int_0 = 1815
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    var_0 = module_0.purge()
    set_0 = {var_0}
    module_2.match(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    bool_0 = True
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    dict_0 = {}
    error_0 = module_0.error(dict_0, dict_0)
    int_0 = -1974
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    bytes_0 = b""
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    bytes_0 = b""
    var_0 = module_1.unified_diff(bytes_0, bytes_0, tofiledate=bytes_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: var_0}
    module_2.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    int_0 = 1603
    list_0 = [int_0, int_0, int_0, int_0]
    module_2.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    str_0 = "5MtC7UP="
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    int_0 = 2820
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    float_0 = 310.0
    module_1.get_close_matches(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    complex_0 = -138.67705 + 2217.8996j
    module_6.EnumMeta(*complex_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    module_0.finditer(var_1, var_1)


def test_case_890():
    bool_0 = True
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    float_0 = 2726.058011
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    int_0 = 5805
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bytes_0 = b"\xd2\xc5\x1a'W' "
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    str_0 = "t, -7m%4@k-f"
    module_4.nlargest(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    none_type_1 = None
    module_0.findall(none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_897():
    int_0 = -164
    var_0 = module_1.diff_bytes(
        int_0, int_0, int_0, fromfiledate=int_0, tofiledate=int_0
    )
    module_0.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    int_0 = -920
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


def test_case_900():
    int_0 = 521
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    str_0 = "RD\n&"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    bytes_0 = b"\x05\xee\x8a"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    bytes_0 = b"!G_(\xf7\xf3\x8f\xbf[\xcd\xd2n@]U\x90\xd66"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_904():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, fromfiledate=none_type_0)
    error_0 = module_0.error(var_0, var_0)
    module_1.get_close_matches(error_0, var_0, cutoff=var_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    int_0 = 319
    module_0.findall(int_0, int_0, int_0)


def test_case_907():
    bool_0 = True
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0, module=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    bytes_0 = b"\x1e\x04"
    var_0 = module_0.purge()
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_909():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, tofiledate=none_type_0, n=none_type_0
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_910():
    int_0 = 1632
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    bytes_0 = b"\x82\x0c\x1e"
    module_4.nlargest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_2.get_new_command(none_type_0, var_0)


def test_case_913():
    int_0 = 5287
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, int_0, rename=int_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    dict_0 = {}
    module_4.nlargest(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    bytes_0 = b"\xc4\x1f\xb5uX\xf6\xe66\xa1hC\xb3\x11\xf6\xf2"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    bool_0 = True
    str_0 = "g$Nv"
    module_2.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    float_0 = -1967.2
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    set_0 = set()
    var_0 = module_1.ndiff(set_0, set_0)
    module_1.IS_CHARACTER_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    var_0 = module_0.purge()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_921():
    int_0 = -2188
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    bytes_0 = b"\x10\xb2\x116JnJk\x04\xa8"
    var_0 = module_0.finditer(bytes_0, bytes_0)
    module_2.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    float_0 = 1012.89
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    int_0 = -814
    none_type_0 = None
    module_1.get_close_matches(int_0, none_type_0, none_type_0)


def test_case_926():
    bool_0 = True
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0, rename=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    none_type_0 = None
    str_0 = "]\x0bf~|~rr3Sm+,Szd,"
    str_1 = "cMAyvJYHz,"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_6.EnumMeta(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    str_0 = "5g#ZR"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    bytes_0 = b"G<"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    int_0 = -1070
    var_0 = module_1.unified_diff(int_0, int_0, int_0, int_0, n=int_0)
    differ_0 = module_1.Differ(var_0)
    var_1 = module_1.unified_diff(differ_0, var_0, fromfiledate=differ_0)
    module_0.template(var_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    var_0 = module_0.purge()
    var_1 = module_1.restore(var_0, var_0)
    module_2.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_932():
    complex_0 = 2953.262 + 389j
    module_6.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    bytes_0 = b"_\x89\xd3\xd8Y\xf7"
    int_0 = -7440
    module_2.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bytes_0 = b"\x1fS~\xa7"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    str_0 = "pf+iu`sjZp<^^"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    str_0 = "gqL>,k6kN"
    var_0 = module_0.sub(str_0, str_0, str_0)
    module_0.template(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    bool_0 = False
    module_0.template(bool_0, bool_0)


def test_case_938():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0,
            none_type_0,
            rename=none_type_0,
            defaults=none_type_0,
            module=none_type_0,
        )


@pytest.mark.xfail(strict=True)
def test_case_939():
    int_0 = -5966
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    str_0 = "-z]3"
    var_0 = module_0.finditer(str_0, str_0)
    set_0 = {var_0, str_0, str_0, str_0}
    float_0 = 3062.74014
    module_2.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    bytes_0 = b"\xf5\x95\x89$\n\xf5%\xa4\xa7>\xd9\xe8/\x19\xbf\xf3"
    var_0 = module_1.unified_diff(bytes_0, bytes_0, fromfiledate=bytes_0, n=bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    int_0 = -2917
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    bytes_0 = b"9\xd8\x85\x9deo\x0c\x0e\xe1\x14\xb8\xad\x0b\x86"
    set_0 = {bytes_0, bytes_0}
    module_0.finditer(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    int_0 = 521
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bytes_0 = b"\x08\x1e\xc5\xdc\x94\xedc\x13\x08\xfd\xfd\xe1"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    int_0 = 1905
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    set_0 = set()
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    base_exception_0 = module_5.BaseException()
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    tuple_0 = ()
    module_2.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    bytes_0 = b"\xcf\xf9\x86\xab\xac\x13\x021\xec)\xd9\xbc\xb8w\xce\xf05]"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_956():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    object_0 = module_5.object()
    set_0 = {object_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    var_0 = module_0.purge()
    module_1.IS_LINE_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    bytes_0 = b"\xbe\x83\xc0v\x00n\xac\x81\xe6awf\xc3\x0e\xe1\x81\xd9\xb4!\xeb"
    module_1.IS_LINE_JUNK(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    bytes_0 = b"B\xb48\xa9\xb4N\xd8\x06[\x8c0W"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


def test_case_964():
    str_0 = '-qNz#l]ITe"'
    with pytest.raises(ValueError):
        module_7.namedtuple(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, tofiledate=none_type_0
    )
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_968():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    str_0 = "T6[j\nTIA$|VeL+uQ_;<3"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    var_0 = module_0.purge()
    bool_0 = True
    var_1 = module_1.context_diff(var_0, var_0, tofiledate=var_0, lineterm=bool_0)
    var_1.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_972():
    bool_0 = False
    none_type_0 = None
    module_2.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    int_0 = 85
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    bytes_0 = b"\x98\xef}\xcdD\x93"
    module_6.EnumMeta(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    auto_0 = module_6.auto()
    str_0 = ";"
    bytes_0 = b"\xc7\x0f\x99\x14\xd9\xba\x0b\xd8Y"
    dict_0 = {str_0: bytes_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_2.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    auto_0 = module_6.auto()
    complex_0 = -4001.74953 + 531j
    none_type_0 = None
    module_0.split(complex_0, none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_981():
    str_0 = "a>oK]D"
    module_0.fullmatch(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    int_0 = 2039
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    none_type_0 = None
    bytes_0 = b"\xc8\xc9\xca(GP\xb4i\xc0C3h;\xaa\x03@x"
    module_0.sub(none_type_0, bytes_0, bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    str_0 = "\x0clo\t"
    tuple_0 = (str_0,)
    var_0 = module_1.restore(str_0, tuple_0)
    module_0.fullmatch(var_0, tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, n=none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    none_type_0 = None
    module_6.unique(none_type_0)


def test_case_989():
    pass


def test_case_990():
    float_0 = -1227.1328
    list_0 = [float_0, float_0]
    with pytest.raises(TypeError):
        module_7.namedtuple(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    bytes_0 = b"`\x01O\xee"
    module_0.finditer(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, n=none_type_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    float_0 = 316.795598
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.context_diff(
        none_type_1, none_type_1, fromfiledate=none_type_1, tofiledate=none_type_1
    )
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    exception_0 = module_5.Exception()
    none_type_0 = None
    module_2.get_new_command(exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    str_0 = "4B]>-g+\x0c=\n(ZZ.2Alr1"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    float_0 = -410.41604
    module_0.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    int_0 = 1745
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    tuple_0 = ()
    bool_0 = False
    module_0.compile(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    int_0 = -1997
    bool_0 = False
    set_0 = {int_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.sub(set_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    str_0 = "v"
    str_1 = "^^\tC"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, list_0)
    module_2.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    int_0 = 816
    none_type_0 = None
    var_0 = module_1.restore(int_0, none_type_0)
    set_0 = {var_0, var_0}
    module_2.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    int_0 = -2225
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    bytes_0 = b"\xc0u\x16\xcb\x01z\x91\xa8\x9d^\xc8\xaf>\xa1\xa4C\x05\xfb\xc9\xcc"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    tuple_0 = ()
    module_6.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0
    )
    module_0.match(bool_0, var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    int_0 = -52
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    list_0 = []
    var_0 = module_1.IS_CHARACTER_JUNK(list_0, list_0)
    dict_0 = {}
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    int_0 = -566
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, fromfiledate=none_type_0)
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_1017():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.unified_diff(
        none_type_1, none_type_1, tofile=none_type_1, fromfiledate=none_type_1
    )
    var_0.__call__(
        none_type_0,
        none_type_0,
        module=none_type_0,
        qualname=none_type_0,
        start=none_type_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bytes_0 = b"\x1e\x0e\xe6\xdd-\x89\xf2\xff\x9b\x7f\xde\xef{Y\xad\x8f\xb9\x81"
    none_type_0 = None
    module_0.finditer(bytes_0, none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    float_0 = -288.1866
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    float_0 = 1524.65182
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bytes_0 = b"\xd9"
    none_type_0 = None
    var_0 = module_1.ndiff(bytes_0, bytes_0, bytes_0)
    var_0.__setattr__(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    int_0 = 870
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    int_0 = 108
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    int_0 = 1024
    none_type_0 = None
    var_0 = module_1.unified_diff(
        int_0, int_0, int_0, tofiledate=none_type_0, n=none_type_0
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    int_0 = 1119
    module_5.Exception(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    str_0 = "nE)"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    int_0 = 785
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    bool_0 = True
    none_type_0 = None
    module_0.sub(none_type_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    str_0 = "A4,#1`/J~SW]#kNahUy"
    set_0 = {str_0, str_0}
    list_0 = [set_0, str_0, str_0]
    module_2.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    var_0 = module_0.purge()
    module_4.nlargest(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    int_0 = -1518
    float_0 = 2863.6487
    module_0.findall(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    bool_0 = True
    float_0 = -3571.0
    tuple_0 = (bool_0, float_0, bool_0)
    module_2.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    int_0 = -1908
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    int_0 = -1573
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    str_0 = "~@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.search(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    float_0 = 62.0
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    complex_0 = -981 + 2668.17j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    str_0 = '1\t"J=|'
    var_0 = module_0.compile(str_0)
    int_0 = -2637
    none_type_0 = None
    module_0.subn(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    bytes_0 = b"\x1a\xa3\xc6\xf3X1\x87\xa8CW/`\xb4"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bytes_0 = b"\xc7\xcd\xeb8w\x7fN4"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    bytes_0 = b"\xd1x\x9d\x96{\x94"
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    var_0 = module_1.restore(dict_0, none_type_0)
    var_0.set_seqs(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    str_0 = "\x0cj\\t=-\x0c\x0cSLp\x0cL0.@"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    str_0 = "M"
    list_0 = []
    module_0.search(str_0, str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1050():
    bytes_0 = b"\x0c\xf1\xe7\x02jJ\xc7\xf9\x02\x9e \xff"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1051():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    none_type_0 = None
    module_0.sub(regex_flag_0, regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    var_0 = module_0.purge()
    none_type_0 = None
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    bytes_0 = b"q\x04Q\xe6\t\xfe\xbcf\xbd\xbe"
    none_type_0 = None
    list_0 = []
    var_0 = module_1.get_close_matches(list_0, list_0)
    var_0.make_file(bytes_0, bytes_0, todesc=none_type_0, charset=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    none_type_0 = None
    bytes_0 = b"&\xfcD\xb5]jC\xf5"
    var_0 = module_1.restore(bytes_0, bytes_0)
    var_0.make_file(
        none_type_0,
        none_type_0,
        todesc=none_type_0,
        context=none_type_0,
        numlines=none_type_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_1061():
    none_type_0 = None
    module_0.escape(none_type_0)


def test_case_1062():
    dict_0 = {}
    exception_0 = module_5.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    int_0 = -1007
    set_0 = set()
    module_2.match(int_0, set_0)


def test_case_1064():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1065():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    float_0 = 3538.0561
    none_type_0 = None
    module_0.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    float_0 = 1501.8
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    bytes_0 = b'VT\x1a")/\x14\xae\x0e\xe5c\xa8\xd4\xb4\x99\xc6J&\xd0\x97'
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bytes_0 = b"Z;\xa8\x08\xb9\xf9\xb3\x84\x91\x8a\x9d\xd9D\xb8^_"
    var_0 = module_1.diff_bytes(bytes_0, bytes_0, bytes_0, lineterm=bytes_0)
    module_1.IS_CHARACTER_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    float_0 = 1794.05
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bytes_0 = b"N\xcf&8\xb5\xb6\x14"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_6.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    float_0 = -623.476317
    set_0 = set()
    module_0.template(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    int_0 = 3403
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    bytes_0 = b"\xcc\xa0\x84i\xba\xd9Y\x0e\xa1\x05<"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    str_0 = "xD0>"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    complex_0 = -759 - 46.506295j
    module_0.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    int_0 = 677
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    int_0 = -579
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    float_0 = 404.156148
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, fromfiledate=float_0, n=none_type_0
    )
    bytes_0 = b"c\x11\x9dm\xff\xe7"
    var_1 = module_1.diff_bytes(float_0, none_type_0, var_0, n=bytes_0)
    module_0.findall(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    int_0 = 496
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.fullmatch(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    str_0 = "\x0blj"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    bytes_0 = b"\xa4Ln\x9d;v{~\x96F\xcfbY\x8b\x9a\x15\xf9b"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    auto_0 = module_6.auto()
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    int_0 = -829
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    set_0 = set()
    none_type_0 = None
    module_0.sub(set_0, set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    bytes_0 = b"9\xc9\x17\x9d=\xd0\xb8X\xf5S"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    none_type_0 = None
    int_0 = -1001
    module_2.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    str_0 = "ch8|DdP\x0c~"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    list_0 = []
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    bytes_0 = b""
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    bool_0 = False
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    auto_0 = module_6.auto()
    module_0.fullmatch(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    tuple_0 = ()
    module_6.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    int_0 = 1577
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bytes_0 = b"\x01ejo\xe5/\xd6w\t"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    float_0 = -81.54102
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    enum_dict_0 = module_6._EnumDict()
    module_0.match(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bytes_0 = (
        b"\x03\xfd\x84\x93\xe5\xe4\xc0\x96\xa2\x1a\x04\x05\t^\x07\x03\xb6\xf9\x16\xaf"
    )
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_2.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    complex_0 = 1866.163477 + 4869j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    bytes_0 = b"\x9c{\x1fh\xb6[\xdb\xd6\xce\x7f\x03\x9clfg\xb2\x14\xc1\xb7="
    var_0 = module_1.IS_CHARACTER_JUNK(bytes_0, bytes_0)
    module_2.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    bytes_0 = b"\xc1\xf9p\xcb\xd0\xe1\\r"
    var_0 = module_1.diff_bytes(
        bytes_0, bytes_0, bytes_0, fromfiledate=bytes_0, n=bytes_0
    )
    module_2.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_1116():
    int_0 = 683
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    bool_0 = False
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.set_seqs(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1123():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1124():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_1.context_diff(
        dict_0, dict_0, fromfiledate=none_type_0, tofiledate=dict_0, n=none_type_0
    )
    set_0 = {var_0, none_type_0}
    list_0 = [set_0, none_type_0]
    module_1.get_close_matches(list_0, dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    str_0 = "(\tV~s&u&0u[2HGg"
    module_2.get_new_command(str_0, str_0)


def test_case_1126():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1127():
    html_diff_0 = module_1.HtmlDiff()
    module_2.get_new_command(html_diff_0, html_diff_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    var_1 = var_0.__dir__()
    module_2.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1129():
    int_0 = 1414
    list_0 = [int_0]
    module_2.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1130():
    bytes_0 = b"i\xca$O\xee\xc3/"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    enum_dict_0 = module_6._EnumDict()
    module_2.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    str_0 = "2+^='!7"
    set_0 = {str_0, str_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    str_0 = "y\\Qta,duxaGz`%"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    str_0 = "lC(b89"
    dict_0 = {str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    complex_0 = 1801.92 + 466.93j
    module_0.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    bytes_0 = b"\xd8\x8fD7\xa6\x9c\xd6\x01\x87d\x93\x17H\xa8!D"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    float_0 = 1746.3
    none_type_0 = None
    module_0.subn(float_0, float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    complex_0 = -3351.753 + 1758j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    int_0 = -1662
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    var_0 = module_0.purge()
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    int_0 = 1162
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    bool_0 = False
    none_type_0 = None
    module_4.nlargest(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    float_0 = -3468.125895
    list_0 = [float_0, float_0]
    module_1.IS_CHARACTER_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_2.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    bytes_0 = b"\xc5'\x0c\x9f$]\x89VE\xd0"
    html_diff_0 = module_1.HtmlDiff(wrapcolumn=bytes_0, linejunk=bytes_0)
    module_2.get_new_command(html_diff_0, html_diff_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, tofile=none_type_0, fromfiledate=none_type_0
    )
    var_1 = module_1.diff_bytes(var_0, var_0, none_type_0, var_0)
    var_2 = module_1.ndiff(var_1, none_type_0, var_0)
    module_0.subn(var_1, var_1, var_0, var_1, var_2)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    str_0 = "G"
    module_1.get_close_matches(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_1.get_close_matches(tuple_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    complex_0 = -1942.1335 - 3189.944j
    none_type_0 = None
    float_0 = -569.329017
    var_0 = module_1.restore(float_0, float_0)
    var_0.make_table(complex_0, complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    bool_0 = True
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    set_0 = set()
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    float_0 = -1424.296183
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    int_0 = -1248
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    bytes_0 = b"\xdb\xf1s\xd0\x8b[\xf2\xe4\xf7\x159\x95\x19W\xd0\x15\xa0\xfb"
    var_0 = module_1.ndiff(bytes_0, bytes_0, bytes_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_1159():
    complex_0 = 751 + 1807.953072j
    module_1.get_close_matches(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    float_0 = 3129.157066
    set_0 = {float_0, float_0}
    module_1.IS_CHARACTER_JUNK(set_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    dict_0 = {}
    module_0.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = sequence_matcher_0.real_quick_ratio()
    module_2.match(var_0, sequence_matcher_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    object_0 = module_5.object()
    module_0.match(object_0, object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bool_0 = False
    differ_0 = module_1.Differ(bool_0)
    module_1.get_close_matches(differ_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.ndiff(set_0, set_0, none_type_1, set_0)
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.fullmatch(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    bool_0 = False
    var_0 = module_1.unified_diff(bool_0, bool_0, n=bool_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    int_0 = 2651
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    complex_0 = -695.17206 - 2216.6j
    module_0.split(complex_0, complex_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    int_0 = 1812
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    bytes_0 = b"\x85\r\x085"
    str_0 = "S?_\rmh% HC%=V:TJy0"
    tuple_0 = (bytes_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bytes_0 = b"u\xb7\xe5\xa7\x8di\xc2\x84L-\x00\xbak\x94!W\xda\xc8"
    module_1.IS_CHARACTER_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    bytes_0 = b"\x8e"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    bytes_0 = b"\x151\xc0\xec\xfe"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    str_0 = "^'Y{8h;N"
    none_type_0 = None
    var_0 = module_0.split(str_0, str_0)
    var_1 = module_1.diff_bytes(
        str_0,
        str_0,
        none_type_0,
        tofile=str_0,
        fromfiledate=none_type_0,
        n=var_0,
        lineterm=none_type_0,
    )
    module_2.match(var_1, var_0)


def test_case_1177():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1178():
    str_0 = ""
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    bytes_0 = b"\x06\x94-=\xf9\xcf@\x13y\xa9>k1"
    dict_0 = {bytes_0: bytes_0}
    module_2.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    bytes_0 = b"\xaaj\x1b\x1e\xfb\x1dP#\x160"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1182():
    int_0 = 2145
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    auto_0 = module_6.auto()
    module_2.get_new_command(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    bytes_0 = b"M\x83\xa6"
    none_type_0 = None
    module_0.split(bytes_0, bytes_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    var_0 = module_0.purge()
    var_0.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    none_type_0 = None
    str_0 = "b"
    var_0 = module_1.unified_diff(none_type_0, none_type_0, str_0)
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    module_1.Match()


def test_case_1191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1192():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_2.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bytes_0 = b"`\xf8\xdf\xed\xc4G2A"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_2.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    int_0 = 307
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    none_type_0 = None
    tuple_0 = ()
    var_0 = module_1.get_close_matches(tuple_0, tuple_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    exception_0 = module_5.Exception()
    none_type_0 = None
    module_0.finditer(exception_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    exception_0 = module_5.Exception()
    module_0.fullmatch(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    int_0 = -457
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    str_0 = ""
    module_2.get_new_command(str_0, str_0)


def test_case_1203():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    bytes_0 = b"\xdff\x98\xfb.\xf2\x17h\x8fC\x8e\xf5"
    module_0.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    none_type_0 = None
    html_diff_0 = module_1.HtmlDiff(none_type_0)
    module_2.get_new_command(html_diff_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    int_0 = 926
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    float_0 = -1496.6
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    bytes_0 = b"%\xe4\xd02"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.subn(set_0, bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    str_0 = "Ln"
    var_0 = module_0.split(str_0, str_0)
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    int_0 = 3410
    module_2.match(int_0, int_0)


def test_case_1211():
    float_0 = 1707.13843
    with pytest.raises(TypeError):
        module_7.namedtuple(float_0, float_0, rename=float_0, defaults=float_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    int_0 = 1519
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    int_0 = 627
    var_0 = module_1.context_diff(int_0, int_0, n=int_0)
    module_2.get_new_command(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    str_0 = ">Gmc*R;Y*\r`7.y({B"
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    str_0 = "\n\\p@\nw6i(\rM|"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    str_0 = "mnqMc9`Vcl\tb]jH)[R>"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, tofile=none_type_0)
    none_type_1 = None
    module_4.nlargest(none_type_1, none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    str_0 = "qCgf\\\nUJ bqe@c)eGtj^"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.search(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    float_0 = -399.20373
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bytes_0 = b"\x13Y\x8b\xb1\x1bF\xb1\xc6\x9a\xe3@\xb7d\xdf\\\x16\xca\xdd\xd3"
    none_type_0 = None
    module_0.finditer(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    int_0 = 194
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    exception_0 = module_5.Exception()
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    complex_0 = -378.286041 + 37.428621j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_2.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    bytes_0 = b"L4\xa5"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, none_type_0, charjunk=none_type_0)
    module_1.IS_LINE_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    none_type_0 = None
    int_0 = -1763
    module_0.subn(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    str_0 = "/c"
    dict_0 = {str_0: str_0}
    bool_0 = True
    module_1.get_close_matches(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    bytes_0 = b"\xd8(\xae\xa3\x8b2\xd8F\xe9\x8fQ\x18\xf6\x15\xbf\x81\xcb\xfc"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    str_0 = "}%"
    var_0 = module_0.fullmatch(str_0, str_0)
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    var_0 = module_1.unified_diff(tuple_1, tuple_1, tofile=tuple_0, tofiledate=tuple_1)
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    int_0 = 1774
    module_2.match(int_0, int_0)


def test_case_1240():
    pass


def test_case_1241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1242():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1243():
    none_type_0 = None
    int_0 = 1667
    module_2.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1244():
    complex_0 = 1125.66416 - 2316.982j
    module_6.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"\x124O\x12\xa7\xde\xc1i\x91\x90P\xdd\xff\xab"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    bytes_0 = b"\xd6\x80\xd7nZ@'Wg\x8bn\xb8wq"
    complex_0 = -3883.606918 - 2693.8j
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bytes_0, complex_0, tofile=none_type_0, fromfiledate=complex_0, n=bytes_0
    )
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_1248():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    bytes_0 = b"\x83\x85F\x90\x91\xa5"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    float_0 = 526.0
    list_0 = [float_0, float_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    int_0 = -2044
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    float_0 = -1186.610348
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1254():
    bytes_0 = b"k#\xe7(\x9e\x83?\xaf"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.find_longest_match(blo=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    dict_0 = {}
    error_0 = module_3.Error(**dict_0)
    none_type_0 = None
    module_2.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    int_0 = 2789
    none_type_0 = None
    module_0.subn(int_0, int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    str_0 = "g"
    var_0 = module_0.match(str_0, str_0)
    module_2.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1259():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bool_0, bool_0, tofile=none_type_0, tofiledate=none_type_0
    )
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bool_0 = False
    var_0 = module_1.unified_diff(bool_0, bool_0, bool_0, bool_0, tofiledate=bool_0)
    none_type_0 = None
    module_1.IS_LINE_JUNK(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    bytes_0 = b"\xf8d1\x95h<"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofile=none_type_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    var_1.__contains__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, none_type_0)
    dict_0 = {var_0: none_type_0, bool_0: bool_0}
    module_2.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    complex_0 = -3499.2 - 1390.08j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    bool_0 = False
    none_type_0 = None
    module_4.nlargest(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    bytes_0 = b"\xe1m\xb4F\xea\xf5\x05\xaa\xca\x0eP"
    var_0 = module_1.restore(bytes_0, bytes_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    str_0 = "]50B`\x0cCS0=5"
    var_0 = module_0.escape(str_0)
    var_1 = module_1.unified_diff(var_0, var_0, tofile=str_0, n=var_0)
    module_0.compile(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    int_0 = -2690
    none_type_0 = None
    module_0.search(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    str_0 = "P7HR`^c;qR=C"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1274():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.context_diff(bool_0, bool_0, none_type_0, n=none_type_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    int_0 = 663
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    bytes_0 = b"j\xd5\xcd\xcf\xa4\x18\xaai\xdd\xc8ha#xD\xf6"
    float_0 = 1547.26
    var_0 = module_1.ndiff(bytes_0, bytes_0, float_0)
    module_2.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    bool_0 = True
    str_0 = "X^e7opRUxiw*@.~3 |g\r"
    module_2.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    str_0 = "/8C:OY<"
    set_0 = {str_0, str_0}
    module_2.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    str_0 = "_Q\x0cZ\n6[L:73l{Q:"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    float_0 = 593.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    int_0 = 2048
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    bytes_0 = b"c\xb2\xc3\xc7\xd7"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bytes_0 = b"w~\x19j\xd9\xf5\xcd}"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    int_0 = 2600
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    exception_0 = module_5.Exception()
    error_0 = module_3.Error()
    module_2.get_new_command(exception_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bytes_0 = b"SZ"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, fromfiledate=none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofiledate=none_type_0
    )
    str_0 = "%5R\x0cOc[7Z_M#baE\rw~"
    var_0.__len__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, n=none_type_0)
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_1294():
    int_0 = -399
    tuple_0 = (int_0,)
    var_0 = module_1.unified_diff(tuple_0, tuple_0, n=tuple_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    float_0 = 1248.46
    module_1.IS_LINE_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    complex_0 = -3554.2275 - 3811.295984j
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        complex_0, complex_0, complex_0, complex_0, n=none_type_0, lineterm=none_type_0
    )
    none_type_1 = None
    module_1.get_close_matches(none_type_1, none_type_1, cutoff=none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    complex_0 = 213.822597 + 1155.1j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    str_0 = ",lJw"
    list_0 = [str_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    bytes_0 = b"\x9b\xa3b\x1b"
    module_4.nlargest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    str_0 = '(Yu"NyGk{j{-[S'
    str_1 = "&[l"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    int_0 = -1301
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    str_0 = "%pGbT|-(TS-8G\tx\t-"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    bytes_0 = b"G\xdd1!\x13\xe0\xa5\xb9"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    int_0 = 615
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    bytes_0 = b"J\xa6t\xe9\xc2"
    none_type_1 = None
    module_4.nlargest(bytes_0, none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    str_0 = "k\nKYa_/"
    none_type_0 = None
    var_0 = module_1.unified_diff(str_0, str_0, str_0, n=none_type_0, lineterm=str_0)
    var_0.ratio()


def test_case_1315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1316():
    complex_0 = -1588.916 - 1249.037j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.findall(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    var_0 = module_0.purge()
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_1319():
    none_type_0 = None
    module_5.BaseException(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.set_seq1(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    str_0 = "\\[2w2ZbG@~RA}(+M>8-"
    str_1 = ">CVdW*BYiW"
    tuple_0 = (str_0, str_1)
    module_2.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    int_0 = -2675
    none_type_0 = None
    var_0 = module_1.unified_diff(int_0, int_0, tofile=none_type_0, lineterm=int_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    enum_dict_0 = module_6._EnumDict()
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    str_0 = "%*4cTZaSEL"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    str_0 = "Llf<kPP"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    complex_0 = -2340.228 - 1115.81943j
    module_0.search(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    bytes_0 = b"\x8d\xa6\x80\xf9\x9d\xe7\x1c%\x10"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, lineterm=none_type_0)
    var_0.__len__(none_type_0)


def test_case_1332():
    bytes_0 = b""
    none_type_0 = None
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0, rename=bytes_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    bytes_0 = b"\xa27\xda\x1f\x8b\xcbb\xb1p\x9a\xc3\xb2"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    complex_0 = -674.808 - 455.49868j
    module_2.get_new_command(complex_0, complex_0)


def test_case_1337():
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        module_7.namedtuple(var_0, var_0, rename=var_0)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    var_0 = module_0.purge()
    var_1 = module_1.restore(var_0, var_0)
    module_2.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    enum_dict_0 = module_6._EnumDict()
    module_0.compile(enum_dict_0, enum_dict_0)


def test_case_1342():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1343():
    var_0 = module_0.purge()
    var_1 = module_1.ndiff(var_0, var_0, var_0)
    var_1.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_1344():
    complex_0 = 206.128074 - 3572.296j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.set_seq2(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1349():
    bool_0 = True
    bytes_0 = b"g\xf8Ku(\xed\xb1\xce\xdb\xe7\x1b\x04V\x9c@\xd6"
    module_2.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    str_0 = "`$T7Y\r.VUyW~\rg00M'X"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    str_0 = "`?ayd\\"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    str_0 = "2=-=E;|>?QwcYSC"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    error_0 = module_0.error(dict_0, none_type_0, dict_0)
    module_4.nlargest(error_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    set_0 = {error_0, error_0, error_0, error_0}
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    bool_0 = False
    float_0 = -542.25
    sequence_matcher_0 = module_1.SequenceMatcher(float_0)
    var_0 = sequence_matcher_0.get_grouped_opcodes(bool_0)
    module_2.get_new_command(var_0, sequence_matcher_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, tofile=none_type_0, n=none_type_0
    )
    set_0 = {var_0, none_type_0}
    var_1 = module_1.unified_diff(var_0, set_0, fromfiledate=set_0, tofiledate=var_0)
    var_1.ratio()


@pytest.mark.xfail(strict=True)
def test_case_1357():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0, none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    int_0 = -2435
    none_type_0 = None
    module_0.match(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.make_file(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    int_0 = 1099
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    bytes_0 = b"l\t\xccz\x96)\xca\xf3\xa92zE"
    complex_0 = -115.1529 + 3262.60515j
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, complex_0: bytes_0}
    module_2.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    int_0 = -289
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.compare(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bool_0 = True
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bytes_0 = b"\xecA\xef[\x94\xaf\x82\xa5\xbe%\x95\x1a\x93"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    bytes_0 = b"\xf8\xa2"
    module_1.IS_LINE_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    list_0 = []
    module_6.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    var_0 = module_0.purge()
    int_0 = 1955
    var_1 = module_1.ndiff(int_0, int_0)
    int_1 = -3410
    var_2 = module_1.unified_diff(int_1, int_1, int_1, n=int_1, lineterm=int_1)
    module_1.IS_CHARACTER_JUNK(var_2, var_2)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    float_0 = 483.3051
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    int_0 = -1745
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1373():
    str_0 = "qt"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    none_type_0 = None
    module_0.compile(none_type_0)


def test_case_1375():
    list_0 = []
    object_0 = module_5.object(*list_0)
    int_0 = -709
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, int_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    int_0 = 439
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    float_0 = -392.254438
    module_2.get_new_command(float_0, float_0)


def test_case_1378():
    float_0 = -2834.62323
    list_0 = []
    with pytest.raises(TypeError):
        module_7.namedtuple(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    bytes_0 = b"\x99\x16$"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    int_0 = 1475
    module_4.nlargest(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0}
    module_2.match(set_0, set_0)


def test_case_1384():
    bytes_0 = b"\xb5\xc1/-"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    bool_0 = True
    module_0.escape(bool_0)


def test_case_1386():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


def test_case_1388():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bool_0 = True
    var_0 = module_1.restore(bool_0, bool_0)
    list_0 = [var_0]
    module_2.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    int_0 = 265
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    str_0 = '"2\x0cfbf0'
    var_0 = module_0.search(str_0, str_0)
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1395():
    complex_0 = -3047.1844 - 218.69j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.set_seq1(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    bytes_0 = b" \xf9\x06D\xceS\x15\xc7\x8c\x98"
    none_type_0 = None
    var_0 = module_1.context_diff(bytes_0, bytes_0, tofile=bytes_0)
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    int_0 = 2759
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    bytes_0 = b"\xd6\xe7\xad\xaa\x9b"
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        bytes_0, none_type_0, bytes_0, fromfiledate=none_type_0, tofiledate=none_type_0
    )
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_1401():
    list_0 = []
    none_type_0 = None
    var_0 = module_1.restore(list_0, none_type_0)
    bool_0 = False
    module_2.match(var_0, bool_0)


def test_case_1402():
    none_type_0 = None
    dict_0 = {}
    var_0 = module_1.restore(dict_0, dict_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    complex_0 = -4334.924 + 1171.2j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    bytes_0 = b"\xbf)O\xbe\xe6\x0f\xc6.\x19\xd2\x80_\xa0\xb56"
    int_0 = 1168
    var_0 = module_1.diff_bytes(
        bytes_0, int_0, int_0, bytes_0, tofiledate=bytes_0, n=int_0
    )
    var_1 = module_0.purge()
    var_1.ratio()


@pytest.mark.xfail(strict=True)
def test_case_1406():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    bool_0 = False
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    var_1.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_1409():
    float_0 = -2589.3
    module_1.IS_CHARACTER_JUNK(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    float_0 = -3720.0
    var_0 = module_1.ndiff(float_0, float_0, float_0, float_0)
    module_1.IS_CHARACTER_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    complex_0 = 1050.918158 - 3860.52j
    none_type_0 = None
    module_2.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    var_0.set_seq1(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    regex_flag_0 = module_0.RegexFlag.MULTILINE
    module_2.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    var_0 = module_1.unified_diff(
        regex_flag_0, regex_flag_0, tofile=regex_flag_0, tofiledate=regex_flag_0
    )
    var_1 = module_1.unified_diff(var_0, var_0, var_0, var_0, n=var_0, lineterm=var_0)
    module_2.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    int_0 = -3611
    var_0 = module_1.ndiff(int_0, int_0, int_0, int_0)
    var_1 = module_1.unified_diff(var_0, var_0, tofile=int_0, tofiledate=var_0, n=var_0)
    module_2.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_2.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1423():
    int_0 = 366
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    bool_0 = True
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    dict_0 = {}
    none_type_0 = None
    module_0.subn(dict_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    str_0 = "N"
    none_type_0 = None
    module_0.finditer(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    bytes_0 = b"\x8e}\x1b&#\xfeD<\xf1d`\xcc\r\xf4*\xb9"
    bytes_1 = b"\xd2\xeb\xf8"
    module_1.get_close_matches(bytes_0, bytes_1, cutoff=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    bytes_0 = b"%"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    bool_0 = True
    exception_0 = module_5.Exception()
    module_2.match(bool_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    base_exception_0 = module_5.BaseException()
    module_6.unique(base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    str_0 = "<31"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bytes_0 = b"\xd2'I\x98\x88(p"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    list_0 = []
    base_exception_0 = module_5.BaseException(*list_0)
    module_2.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    complex_0 = -1471.335908 + 699.38j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    bytes_0 = b"B\xe1\xeb\xc3p\x85\xfew\xdc\t\x01\xb6\x81m\xa2\xcc\x03u"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, tofiledate=none_type_0)
    var_0.make_table(none_type_0, none_type_0, todesc=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    int_0 = 2895
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.fullmatch(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    int_0 = 272
    none_type_0 = None
    module_0.template(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    str_0 = "J~"
    dict_0 = {str_0: str_0}
    module_6.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    int_0 = 683
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    complex_0 = -4096.407 - 1505.9113j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    bytes_0 = b"\x0c([\xb0\x00\x0c|\xb9\xc7\x9e7\x11\x1d\xa48\xb2cx*"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    int_0 = -4510
    module_0.finditer(int_0, int_0)


def test_case_1452():
    str_0 = "83z$+F\nn>"
    var_0 = module_1.IS_LINE_JUNK(str_0)
    with pytest.raises(ValueError):
        module_7.namedtuple(str_0, str_0, rename=str_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    str_0 = "g\n8u"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    list_0 = []
    tuple_0 = (list_0,)
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.make_file(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    int_0 = -3466
    none_type_0 = None
    module_0.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    bytes_0 = b"bF\x16\xfc\xd62\x93\x0f"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    bool_0 = True
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    int_0 = -3639
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_5.BaseException(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    tuple_0 = ()
    str_0 = "a#wA,`xBAG"
    tuple_1 = (tuple_0, str_0, tuple_0)
    none_type_0 = None
    module_0.sub(tuple_1, str_0, none_type_0, none_type_0, none_type_0)


def test_case_1463():
    dict_0 = {}
    with pytest.raises(ValueError):
        module_7.namedtuple(dict_0, dict_0, module=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    int_0 = 2100
    list_0 = [int_0, int_0, int_0]
    base_exception_0 = module_5.BaseException(*list_0)
    module_2.match(int_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    int_0 = 1293
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    int_0 = 1538
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    var_0 = module_0.purge()
    module_4.nlargest(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    complex_0 = -915.58173 - 1114.68j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, tofiledate=none_type_0)
    dict_0 = {var_0: var_0, none_type_0: var_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    int_0 = 1060
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    float_0 = -2440.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_4.nlargest(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


def test_case_1476():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    int_0 = -1979
    var_0 = module_0.purge()
    var_0.__getitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bytes_0 = b""
    var_0 = module_0.escape(bytes_0)
    module_2.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, bool_0, bool_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    complex_0 = -3089.446 + 5011.48j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    int_0 = 2940
    bytes_0 = b"\x1ad"
    dict_0 = {int_0: bytes_0, int_0: bytes_0}
    none_type_0 = None
    module_2.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    bool_0 = False
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    str_0 = '\x0cXHHO"#@h%=>!e'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    bytes_0 = b"\x12j"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    var_0 = module_0.purge()
    tuple_0 = (var_0, var_0, var_0, var_0)
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0, bool_0)


def test_case_1489():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    with pytest.raises(TypeError):
        module_7.namedtuple(var_0, none_type_0, rename=var_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    var_0 = module_0.purge()
    set_0 = set()
    module_2.match(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    bytes_0 = b"\x88\xb1\x9dl\xf0\xe1\x12\xec\xc0\xde\xd0-\xe4\xaeP\x96\xe0q\xc5."
    var_0 = module_1.diff_bytes(
        bytes_0, bytes_0, bytes_0, tofile=bytes_0, fromfiledate=bytes_0
    )
    module_2.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    bytes_0 = b"\xd5\xc8\x81\xe4\xbf\xaa"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bytes_0 = b"\xa9Q\x8b\x07\xfd\x8a\xaf\x9c\xd6%X\x9f"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    bool_0 = False
    none_type_0 = None
    module_1.IS_LINE_JUNK(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, fromfiledate=none_type_0, tofiledate=none_type_0
    )
    tuple_0 = (var_0, var_0)
    module_2.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    complex_0 = -2104.9 - 2865.87j
    module_1.IS_LINE_JUNK(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    none_type_0 = None
    bytes_0 = b"NgP"
    module_2.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    float_0 = -918.51
    var_0 = module_1.context_diff(float_0, float_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_1501():
    int_0 = -730
    set_0 = {int_0, int_0, int_0, int_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    str_0 = "\\?bX"
    str_1 = "[KpEIW,"
    str_2 = "s1}\x0bcd1L\to"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    int_0 = -878
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    float_0 = -629.25
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    bytes_0 = b'\xed8\xfd|gq\xa9-\x0e\xad\x1e}c\x86\xc4"'
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    str_0 = "2M<hPF\x0cdQ\n8p:"
    html_diff_0 = module_1.HtmlDiff(str_0, charjunk=str_0)
    list_0 = [html_diff_0, str_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    str_0 = "Q7 U"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    bytes_0 = b"\x9c\xef2g+\x90\xa1"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.subn(none_type_0, set_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bool_0, bool_0, tofile=none_type_0, fromfiledate=bool_0, tofiledate=none_type_0
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    int_0 = -3995
    module_1.IS_LINE_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bool_0 = True
    var_0 = module_1.unified_diff(bool_0, bool_0, n=bool_0)
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_1515():
    none_type_0 = None
    var_0 = module_0.purge()
    var_1 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        tofile=var_0,
        fromfiledate=var_0,
        lineterm=none_type_0,
    )
    module_0.template(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1516():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_2.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bytes_0 = b"\xcfD\x04%\x04\xb3"
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_1.unified_diff(dict_0, bytes_0, dict_0)
    module_6.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    sequence_matcher_0 = module_1.SequenceMatcher()
    module_2.get_new_command(sequence_matcher_0, sequence_matcher_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    float_0 = 4373.8
    none_type_0 = None
    module_0.findall(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    complex_0 = -3576.8538 + 86.904937j
    module_0.sub(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    int_0 = 2759
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    bytes_0 = b"D\x0b=`1\xd9j\x10\x81\xef\x87\xa8R"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    str_0 = ";~Ar^Gm91L\r\x0c<@:LE$"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.restore(bool_0, none_type_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    str_0 = "kR\tKUF|G;wc(n>YWB"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    str_0 = "j-Sbx:N"
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        str_0,
        none_type_0,
        none_type_0,
        fromfiledate=str_0,
        tofiledate=str_0,
        lineterm=str_0,
    )
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    bytes_0 = b"\n\x01\xe5\xd2-\xf5N.-\x8a\xf6K\xa0"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_2.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    str_0 = "h]\n|H22 ^YH=;er4xE:"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.sub(list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bytes_0 = b""
    none_type_0 = None
    error_0 = module_0.error(bytes_0, none_type_0, bytes_0)
    module_2.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    none_type_0 = None
    int_0 = 1518
    module_2.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    float_0 = 1608.4
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    float_0 = 2589.6082
    dict_0 = {float_0: float_0, float_0: float_0}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    int_0 = -664
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1541():
    set_0 = set()
    none_type_0 = None
    module_4.nlargest(set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    var_0 = module_0.purge()
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    bytes_0 = b"\xb8\xdc\xf2x\xd3\xbb\xc0\x15\x7f\x1c\xc4d\x9f\x80\xe2"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    int_0 = 1465
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    str_0 = "X0)"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    int_0 = -670
    module_2.match(int_0, int_0)


def test_case_1549():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    str_0 = "r]:7^"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    bytes_0 = b"q\x00\x05\xcfT\xef\xbb\xfaSY\x85"
    none_type_0 = None
    module_0.subn(bytes_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    complex_0 = -298.98218 + 302.99664j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    none_type_0 = None
    bytes_0 = b""
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, bytes_0, none_type_0, bytes_0, n=none_type_0
    )
    module_2.get_new_command(var_0, bytes_0)


def test_case_1554():
    error_0 = module_3.Error()
    with pytest.raises(TypeError):
        module_7.namedtuple(error_0, error_0, defaults=error_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    set_0 = set()
    none_type_0 = None
    module_0.compile(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    str_0 = "_?Nn~\r+LWiy\tyvO"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    bool_0 = True
    module_1.SequenceMatcher(a=bool_0, b=bool_0, autojunk=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    bool_0 = True
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    int_0 = -2118
    tuple_0 = (int_0,)
    module_2.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    complex_0 = 4379.85 + 609.2069j
    complex_1 = -2600.2 + 450.6j
    var_0 = module_1.restore(complex_0, complex_1)
    module_2.get_new_command(var_0, var_0)


def test_case_1562():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofile=none_type_0, fromfiledate=dict_0
    )
    var_1 = var_0.__dir__()
    with pytest.raises(TypeError):
        var_1.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    bytes_0 = b"\xa1A\x16\xaf\xeb:\x0f&\xad0\xba\xaf\xc5\x96'\xb1\xdd\x15\xb6\x81"
    tuple_1 = (tuple_0, dict_0, bytes_0)
    none_type_0 = None
    module_2.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    int_0 = -1242
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    int_0 = -730
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    str_0 = "fM"
    none_type_0 = None
    var_0 = module_1.restore(str_0, none_type_0)
    none_type_1 = None
    module_2.match(none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    dict_0 = {}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    str_0 = "5||*P}U%>N97Lme\t9"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    float_0 = 2372.77717
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.Scanner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    var_0 = module_0.purge()
    module_1.get_close_matches(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    float_0 = -1014.6601
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    int_0 = -2204
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bytes_0 = b"}\xc6F \xc7\x7f\xe1k\x02\xf0\xa6LI\xd6"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    int_0 = -792
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_2.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    float_0 = 3286.88
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bytes_0 = b"T\x82&\xd2\x983\xb1y0'\x03"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    float_0 = 1188.5234
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    bool_0 = True
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    int_0 = -3528
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"m\x88\xff\x9a@\x9f\xfe\x87\xb6\x87Ym\xd0*|"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    bytes_0 = b"\xa3\x9b\xce\x15\xfeM\x990Y`&YV"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    int_0 = -2180
    str_0 = "E\x0bZ~}7l\x0bG>;Z"
    list_0 = [int_0, str_0, int_0]
    module_2.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    float_0 = 1837.968845
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    bool_0 = False
    var_0 = module_1.ndiff(bool_0, bool_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    none_type_0 = None
    bytes_0 = b"3\x9d\x0f6%\xa8\xba\x8br\xd1\xe1/u \xab\x0f|\xc0"
    var_0 = module_0.template(bytes_0)
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    complex_0 = 2653.5 + 2140.1116j
    none_type_0 = None
    module_2.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    str_0 = "&0D\tH|sd7h56q"
    var_0 = module_1.IS_LINE_JUNK(str_0)
    module_2.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = ",]hs{*yz_R"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    bytes_0 = b"\x1cc&#$\xf5\xe5\x1f\xc8I\x10;\xfaT\xeb+)\x86\xed\xeb"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bytes_0 = b"\xe3\x8c\xe5\xe1\x08"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    float_0 = -1271.5
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    int_0 = -1377
    module_0.finditer(int_0, int_0, int_0)


def test_case_1599():
    float_0 = 2045.35
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(float_0, float_0, float_0, float_0)


def test_case_1600():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    dict_0 = {}
    object_0 = module_5.object(**dict_0)
    module_2.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    bytes_0 = b"\x99\x86l\x9e"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.restore(bool_0, none_type_0)
    module_1.get_close_matches(var_0, none_type_0, cutoff=var_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    bytes_0 = b"p\xa7"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    list_0 = []
    module_6.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    int_0 = 946
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    float_0 = 385.256
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bytes_0 = b"3C\x97\xb7\xfc,\xf4]\t\x00-"
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    bytes_0 = b"63b%\x85E\tj\x89O\x1eq\xd0\x0b;\x89"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    str_0 = '$vfS\x0c"X4,h;aY\x0b'
    var_0 = module_0.findall(str_0, str_0)
    var_0.__iter__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    int_0 = 1266
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, tofile=none_type_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_1619():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    complex_0 = -568.2 - 206.09j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    str_0 = ""
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    bool_0 = True
    list_0 = []
    module_2.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    list_0 = []
    module_1.IS_LINE_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    str_0 = "\"ZmGM'nw"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    float_0 = -1842.201083
    module_1.IS_LINE_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    bytes_0 = b"\xf6k\x1e>\xb4\xdfB\xabB\xf1\xa5cIQ\xe4MS."
    module_1.get_close_matches(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    bytes_0 = b"O\x81\xc7\x08\x0f\xdc\xfds\xfd\xb6\x0eiP\x81\xc5"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    complex_0 = -5539.139336 - 2251.4j
    var_0 = module_1.diff_bytes(complex_0, complex_0, complex_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_1630():
    str_0 = "}6DS*wGl,\n*5fsvb5S"
    module_4.nlargest(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    str_0 = "jdzv=s|#T_qV\r"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bytes_0 = b")*\x00\xf0\x01\xbc\xfaq\x93"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    str_0 = "QU?5("
    module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, none_type_0, none_type_0)
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_1636():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    bool_0 = True
    none_type_0 = None
    module_2.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    dict_0 = {var_0: none_type_0, none_type_0: var_0}
    str_0 = "?\t-aC?yVD"
    var_0.make_file(str_0, none_type_0, numlines=dict_0, charset=str_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    bytes_0 = b"\x0e\xc8=\xe7\xb9\x9e\x95\xa9\x86\xb4_\xc8\x06?\xe0"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    bytes_0 = b"\xd0\xcc\x85\xd2\x9bM3H\x86!"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    str_0 = '~Zb\rPXK"4NFWcYu=|0|Y'
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    complex_0 = 1958.21 - 519j
    module_0.split(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    bytes_0 = b"C4\x05\x87\xc7"
    var_0 = module_0.compile(bytes_0)
    tuple_0 = (bytes_0, var_0)
    bool_0 = False
    module_0.subn(tuple_0, bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    str_0 = "0SfLqW\x0bTlpW[AK"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    none_type_0 = None
    module_6.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    int_0 = 4528
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    float_0 = 488.0
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    float_0 = -3911.58665
    module_3.Error(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    float_0 = -1344.084528
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    float_0 = 638.27582
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    int_0 = -1031
    error_0 = module_0.error(int_0)
    bytes_0 = b"\xb7\x02\xee\xb0\x1eB5m^\xe0"
    list_0 = [error_0, bytes_0]
    module_2.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1656():
    str_0 = 's/"<_F_1d`IEl'
    none_type_0 = None
    var_0 = module_1.unified_diff(str_0, str_0, str_0, fromfiledate=none_type_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    str_0 = "jtvC&558ob\x0c%%>#K\x0bm"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    int_0 = -874
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1663():
    bytes_0 = b"\xde\xf5\x9bd"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1664():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    int_0 = 1712
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    bool_0 = True
    none_type_0 = None
    module_2.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.split(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    int_0 = 748
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    bytes_0 = b"E\xef7\xce\xc3m(\xc0\x1a"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    float_0 = -1569.9607
    var_0 = module_1.ndiff(float_0, float_0, charjunk=float_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    str_0 = "Ap%aM[;vcezqDQB"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    float_0 = 774.8
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    int_0 = 1435
    dict_0 = {int_0: int_0}
    module_0.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    set_0 = set()
    var_0 = module_1.get_close_matches(set_0, set_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_1679():
    bytes_0 = b"\x97\x13\xad\xf6]"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    float_0 = 2848.364078
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    bytes_0 = b"I\x87\x1b\x0c\xa5\x80\x10\xa3\x02\xe2x\xda\x99"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    bytes_0 = b"\xf5{\x03\x89\xcf\x88B\xa7I\x1e\x9a"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    str_0 = ",BdUp]M?\\~)R,rjINlZ"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    int_0 = -1451
    module_1.IS_LINE_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    none_type_0 = None
    bytes_0 = b"\xf1\x18\xf9_\xc6f;\xebA\xfcS\xc1B\xb9\xa4\xf3\xdc\x9f"
    var_0 = module_0.match(bytes_0, bytes_0)
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    bytes_0 = b"\xe1\xb1\xe9e|\x879\xc6_\x82i\x94"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_2.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    str_0 = "X\rqd*;aiv~q]n\r*%\r"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    str_0 = "0M_jLPsRGeDK\tw^p9}#"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


def test_case_1693():
    pass


def test_case_1694():
    str_0 = "c*I/z4P23~#qx"
    var_0 = module_0.escape(str_0)
    none_type_0 = None
    bool_0 = True
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    int_0 = -4293
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    str_0 = ";-iHQe|4zU"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    bytes_0 = b"zl7\xb1j\xda\xaaO\x87\x7f\x00"
    var_0 = module_1.unified_diff(bytes_0, bytes_0, fromfiledate=bytes_0)
    var_1 = module_1.ndiff(var_0, bytes_0, charjunk=var_0)
    module_2.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    float_0 = 986.641052
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    str_0 = "1bfjC"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    int_0 = -454
    str_0 = "ee]//M+_Dxj^+q"
    module_2.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = 1503
    module_2.get_new_command(int_0, int_0)


def test_case_1703():
    list_0 = []
    with pytest.raises(ValueError):
        module_7.namedtuple(list_0, list_0, defaults=list_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    str_0 = "2*3"
    var_0 = module_0.search(str_0, str_0)
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    bytes_0 = b"\xcf\xe3\x88\xcd<8\x10^}\x96\x9c"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    complex_0 = -1942.11403 + 1784.43087j
    none_type_0 = None
    var_0 = module_1.unified_diff(
        complex_0, none_type_0, tofiledate=complex_0, lineterm=complex_0
    )
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    bytes_0 = b""
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bool_0 = False
    var_0 = module_1.context_diff(bool_0, bool_0, bool_0, fromfiledate=bool_0)
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    float_0 = -2545.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    str_0 = "&)n"
    module_0.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    dict_0 = {}
    none_type_0 = None
    module_1.get_close_matches(none_type_0, dict_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    dict_0 = {}
    error_0 = module_3.Error(**dict_0)
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    int_0 = -4213
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1718():
    var_0 = module_0.purge()
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.finditer(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    int_0 = 3808
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    float_0 = -1568.0
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        lineterm=none_type_0,
    )
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    complex_0 = -3396.145 + 4666.96092j
    list_0 = [complex_0, complex_0, complex_0]
    module_6.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    object_0 = module_5.object()
    module_2.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    str_0 = "<HJDi-%`KC\r"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    bytes_0 = b"\x7f9\xdc4"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    none_type_0 = None
    var_1 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, none_type_0, none_type_0, n=none_type_0
    )
    var_1.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_1730():
    float_0 = 2185.7795
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [dict_0, float_0]
    tuple_0 = (list_0, dict_0, dict_0, float_0)
    module_3.Error(*tuple_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    bool_0 = False
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    dict_0 = {}
    none_type_0 = None
    bool_0 = True
    var_0 = module_1.restore(bool_0, bool_0)
    var_0.__call__(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    str_0 = "]\"]')}BTU6IJ"
    list_0 = [str_0]
    var_0 = module_1.get_close_matches(list_0, str_0)
    module_6.EnumMeta(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    complex_0 = 3584.579414 - 1321.99j
    module_0.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    none_type_0 = None
    complex_0 = -2552.493584 + 3763.507j
    var_0 = module_1.diff_bytes(complex_0, complex_0, complex_0, lineterm=complex_0)
    var_0.set_seqs(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, fromfiledate=none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    int_0 = -1215
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    var_1 = module_1.context_diff(none_type_0, var_0, tofile=var_0, lineterm=var_0)
    module_2.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    bytes_0 = b""
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_2.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    complex_0 = -1418.244548 + 3801.214j
    float_0 = -1971.529849
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: float_0,
        complex_0: complex_0,
    }
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1744():
    enum_dict_0 = module_6._EnumDict()
    module_1.IS_LINE_JUNK(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    var_0 = module_0.purge()
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_1748():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    str_0 = "Q585jV]c "
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.compare(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0, none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1754():
    str_0 = "m{s`J9/&s'!H,"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1755():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    str_0 = "+\n+:Z6=4sI"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    var_0 = module_0.purge()
    float_0 = 1011.62957
    module_0.search(float_0, float_0)


def test_case_1758():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    str_0 = "87"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    float_0 = -5268.271
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    int_0 = 3606
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    float_0 = 123.2531
    module_0.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bytes_0 = b"\xb5>q"
    var_0 = module_0.findall(bytes_0, bytes_0)
    none_type_0 = None
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bytes_0 = b"R}\xb4\xf5\x99$\xe6\\\xd6\xc7\xa5\x9f\xc6JP"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    str_0 = "TaEHgCNZ~"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    bytes_0 = b"\x18\xc3R\x86\xed\x91\xe6%\xf4\xb7\x1c\xcamZJ\xefM\xfc"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1772():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    enum_dict_0 = module_6._EnumDict()
    module_0.split(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_2.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    bool_0 = True
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    bytes_0 = b"\x19\xed\xcbD\xdb\xea\xaf"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    str_0 = "1}j"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    str_0 = "U5O$C"
    var_0 = module_1.get_close_matches(str_0, str_0)
    module_1.IS_LINE_JUNK(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    bytes_0 = b"T7\x14\x05d\xc5\xben\x9e\x94*c\xc0\x89\x0c"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.finditer(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    float_0 = -1459.0
    dict_0 = {float_0: float_0}
    module_1.IS_CHARACTER_JUNK(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    str_0 = "3"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    bytes_0 = b"v\xe4~)\x1bdD\xcan\xb9\xb9\x1d\xca\xff\x0f\xeeRGr "
    module_0.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    int_0 = -2039
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    list_0 = [var_0, none_type_0, var_0]
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    str_0 = "kD0)&BYD3CM,&"
    none_type_0 = None
    var_0 = module_1.unified_diff(str_0, str_0, str_0, str_0, none_type_0)
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_1 = None
    module_0.search(list_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    str_0 = "!^}d}'|F.MR"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1792():
    float_0 = 2308.0
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    complex_0 = 2512.319 - 2352.8431j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    bytes_0 = b"'qh\xf8"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_1798():
    int_0 = 1987
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    var_0 = module_0.purge()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_1800():
    none_type_0 = None
    module_0.escape(none_type_0)


def test_case_1801():
    int_0 = -97
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, none_type_0, rename=int_0, defaults=int_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    complex_0 = 2253.58 - 58.57j
    complex_1 = -4353.3546 - 1280.67535j
    module_0.sub(complex_0, complex_1, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    str_0 = "]5qP9\x0b9"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    float_0 = 2946.848
    module_0.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    int_0 = -1755
    none_type_0 = None
    module_2.match(int_0, none_type_0)


def test_case_1811():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1812():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_1813():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    list_0 = [none_type_0]
    module_6.EnumMeta(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    complex_0 = 497.684161 - 584.42848j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    int_0 = -454
    module_0.sub(int_0, int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    base_exception_0 = module_5.BaseException()
    module_1.get_close_matches(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bytes_0 = b"_a\xa1\xf0~b\x8a\xa3\xd7\n\xfav\x19\x1d\xc8\x8f\xad\xe2n"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    bytes_0 = b"`r\x1f\x04\x852_\x00\xcc\x00\x10\xa9"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    str_0 = "n^'!3T"
    var_0 = module_0.split(str_0, str_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_1823():
    bytes_0 = b"[\xcd\xfe"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    list_0 = []
    bool_0 = True
    none_type_0 = None
    module_4.nlargest(list_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    int_0 = 391
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    var_0 = module_0.purge()
    int_0 = -833
    module_0.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    float_0 = -621.5765
    module_6.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    str_0 = "8~"
    var_0 = module_0.template(str_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_1831():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    set_0 = set()
    bool_0 = False
    module_0.subn(set_0, bool_0, bool_0, flags=set_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_2.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    none_type_0 = None
    module_6.auto(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    bytes_0 = b"1\xfbk\xaaJ&\x0e\x18"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    str_0 = "my8hn"
    module_2.match(str_0, str_0)


def test_case_1838():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    var_0 = module_1.restore(none_type_0, set_0)
    with pytest.raises(TypeError):
        module_7.namedtuple(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    none_type_0 = None
    bytes_0 = b"\x84+\x0f\x1e\xe1\xf9\xb2\xa9\x08"
    var_0 = module_1.ndiff(bytes_0, bytes_0, bytes_0, bytes_0)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    complex_0 = -1682.711756 + 2441j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    bool_0 = True
    set_0 = {bool_0}
    module_2.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    str_0 = "\n-;prz7aPY_"
    set_0 = {str_0, str_0, str_0}
    var_0 = module_0.escape(str_0)
    var_1 = var_0.__dir__()
    list_0 = [set_0, set_0, var_1]
    tuple_0 = (list_0, var_0, var_0)
    module_2.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_1845():
    str_0 = "v|>nnk7\x0bcg0{}[YGhi7"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    auto_0 = module_6.auto()
    bool_0 = True
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    int_0 = 1060
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    str_0 = "3rpPbkxT<"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_1850():
    float_0 = -881.115579
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    none_type_0 = None
    str_0 = "i]aP4"
    none_type_1 = None
    var_0 = module_1.diff_bytes(
        str_0, none_type_1, str_0, none_type_1, fromfiledate=str_0, tofiledate=str_0
    )
    var_0.__call__(none_type_0, none_type_0, qualname=none_type_0, type=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    int_0 = -1863
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    int_0 = -327
    var_0 = module_1.ndiff(int_0, int_0)
    module_2.match(int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    complex_0 = -924.5 + 1919j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_2.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    float_0 = 1786.23308
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.ndiff(none_type_1, none_type_1)
    var_0.make_table(float_0, none_type_0, todesc=float_0, numlines=float_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    int_0 = -1479
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_2.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bytes_0 = b"&KZ\xfb"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    bool_0 = False
    module_0.template(bool_0)


def test_case_1865():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    bytes_0 = b"3\xb5\x0b\xcf\x90\xb8"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    int_0 = -15
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0, none_type_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_1869():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    list_0 = []
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_1873():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_1874():
    tuple_0 = ()
    bytes_0 = b"l"
    module_2.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    bytes_0 = b"\xc1\x1e,\xda\xe4B"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    var_0 = module_1.restore(list_0, none_type_0)
    var_1 = module_1.context_diff(var_0, dict_0, bool_0, fromfiledate=dict_0)
    var_2 = module_0.purge()
    sequence_matcher_0 = module_1.SequenceMatcher(var_2, var_2, autojunk=var_2)
    var_3 = sequence_matcher_0.get_grouped_opcodes(var_1)
    module_2.get_new_command(var_3, var_3)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    str_0 = "7\x0c/<>"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_1879():
    dict_0 = {}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    str_0 = "V47)-BA`"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    int_0 = -1723
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    bytes_0 = b")\xb8Q\xdc\xf3\r<X6\x0b?rf\x9bj\xc0\x90C\xa0"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    str_0 = "0\t"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    str_0 = "C"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        fromfiledate=none_type_0,
        lineterm=none_type_0,
    )
    float_0 = 1813.65
    var_1 = module_1.context_diff(float_0, float_0, n=float_0)
    var_1.compare(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    none_type_0 = None
    bool_0 = True
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, lineterm=bool_0
    )
    module_1.get_close_matches(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    int_0 = 4650
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    int_0 = -971
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        none_type_0,
        tofiledate=none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    int_0 = 1176
    sequence_matcher_0 = module_1.SequenceMatcher(int_0, int_0)
    sequence_matcher_0.find_longest_match()


@pytest.mark.xfail(strict=True)
def test_case_1893():
    str_0 = ""
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.compare(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    str_0 = "&([>/<KgSTtW6"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    bool_0 = True
    var_0 = module_1.ndiff(bool_0, bool_0, bool_0)
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    bool_0 = True
    var_0 = module_1.ndiff(bool_0, bool_0, charjunk=bool_0)
    var_0.compare(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    exception_0 = module_5.Exception()
    var_0 = module_0.purge()
    var_0.__contains__(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    bytes_0 = b"\xcc\xd1]kJ\x16\x90\x06\xd9\x9bL"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    float_0 = 1017.3
    set_0 = {float_0, float_0, float_0}
    module_0.template(set_0)


def test_case_1904():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1905():
    float_0 = 2390.6
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    int_0 = -436
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    int_0 = -4290
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    base_exception_0 = module_5.BaseException()
    none_type_0 = None
    module_0.finditer(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    float_0 = -2291.1063
    list_0 = [float_0, float_0]
    html_diff_0 = module_1.HtmlDiff(wrapcolumn=list_0, charjunk=float_0)
    none_type_0 = None
    module_0.template(html_diff_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    var_0 = module_0.purge()
    set_0 = {var_0}
    module_0.search(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    list_0 = []
    module_1.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    str_0 = "VVwFtva<'"
    var_0 = module_1.diff_bytes(str_0, str_0, str_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    bytes_0 = b"\xfeS\xf8"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    bool_0 = False
    var_0 = module_1.restore(bool_0, bool_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_1917():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    bool_0 = False
    html_diff_0 = module_1.HtmlDiff(charjunk=bool_0)
    module_1.IS_CHARACTER_JUNK(html_diff_0)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    float_0 = -4533.1004
    module_0.template(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    bytes_0 = b"\xde!8\xc4\xeb\xe5\xd6$\x92\xfe\xda\xbe.S\xfaa=\x16\x13\x8b"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    str_0 = "=Q#,\\{A)./o36VSNh2z"
    module_0.finditer(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    complex_0 = -2095.37 - 2172.023569j
    module_4.nlargest(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    str_0 = "j1Ys."
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    exception_0 = module_5.Exception()
    module_0.sub(exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    str_0 = "e5e]jVK3xW@c"
    module_0.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    float_0 = 851.0
    var_0 = module_1.context_diff(float_0, float_0, float_0, float_0)
    module_2.get_new_command(var_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    str_0 = "\\3&$\the]"
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    int_0 = 3132
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_1 = module_1.unified_diff(none_type_0, none_type_0, var_0, tofiledate=var_0)
    module_2.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    float_0 = 422.0
    module_1.IS_CHARACTER_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    float_0 = 1306.88
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    int_0 = 128
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    int_0 = 191
    module_1.get_close_matches(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    str_0 = "&L?;,Ipt5bRnRsi("
    var_0 = module_1.get_close_matches(str_0, str_0)
    tuple_0 = (var_0, var_0)
    module_0.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    bool_0 = False
    list_0 = [bool_0]
    module_2.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_1.context_diff(
        tuple_0, tuple_0, fromfiledate=tuple_0, tofiledate=none_type_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    none_type_0 = None
    bytes_0 = b"8\xe8\xe4\x84\x99B"
    var_0 = module_0.template(bytes_0)
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0, n=none_type_0
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    int_0 = 4078
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    str_0 = "L>VCN#9L."
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    int_0 = -1021
    float_0 = 425.217
    var_0 = module_1.diff_bytes(
        int_0, int_0, int_0, tofiledate=int_0, n=float_0, lineterm=float_0
    )
    var_1 = module_1.unified_diff(var_0, var_0, float_0, lineterm=var_0)
    module_1.IS_LINE_JUNK(var_1)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    float_0 = 1565.4
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    str_0 = '"\n<:&d:C'
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    bytes_0 = b"Jz$\xe8\xe3\xb1b\xb8i\\\x00&\xd0b\x9d\xad\x0e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_2.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    str_0 = "?w[}&rE"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    var_0 = module_0.purge()
    str_0 = "\t=m4KoW;]:#"
    none_type_0 = None
    var_1 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofile=none_type_0, lineterm=none_type_0
    )
    var_1.set_seqs(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    int_0 = 1791
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    int_0 = 1624
    module_0.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bool_0 = False
    var_0 = module_1.restore(bool_0, bool_0)
    list_0 = [var_0, var_0, var_0, var_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    int_0 = -1768
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    str_0 = "eH+`k$"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    bytes_0 = b"/O\x9c\x84\xe7\xdc\xc9M\xbeB\x08"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    float_0 = 2029.0
    list_0 = []
    str_0 = "u@7"
    sequence_matcher_0 = module_1.SequenceMatcher(b=str_0)
    var_0 = sequence_matcher_0.set_seq1(list_0)
    var_0.__reversed__(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    float_0 = -2110.9098
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    str_0 = ""
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    float_0 = 1473.44
    module_0.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    tuple_0 = ()
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    bytes_0 = b"\x1fpm\x83e"
    var_0 = module_1.context_diff(bytes_0, bytes_0, n=bytes_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: var_0, bytes_0: bytes_0, bytes_0: var_0}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    float_0 = 1220.3
    module_0.match(float_0, float_0)


def test_case_1973():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1974():
    str_0 = ",Fi=M?K;r<e\x0c"
    bytes_0 = b"\xbf\xdcp\x06\x84\x96\xcb0\xc5\xe9\xf5\x91\xfb\xe5w\xbc"
    var_0 = module_1.restore(bytes_0, bytes_0)
    var_0.__setattr__(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    int_0 = -2483
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    int_0 = 970
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    bytes_0 = b"\xad:\xdc\xeayk!\x9d\xd8&\xdb"
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bool_0 = False
    module_1.get_close_matches(bool_0, bool_0, cutoff=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    str_0 = "/cb{"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    bytes_0 = b""
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    var_1 = var_0.__dir__()
    module_2.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    int_0 = -1069
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


def test_case_1984():
    bool_0 = False
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    int_0 = 342
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    bytes_0 = b"\xb9\xde8\xc9\xa0\xc2\xca\xd6\xcdTr\x84\x08{fW\x18\x0bv"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    bytes_0 = b"\xb2\x07CHN\xea\x1c\xaf\xba\xce\xf34\xe3"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_2.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    int_0 = -3810
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_2.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    int_0 = 886
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    bytes_0 = b"\x00\xbbv3"
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = sequence_matcher_0.set_seq1(bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    float_0 = 146.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    none_type_0 = None
    differ_0 = module_1.Differ(none_type_0)
    none_type_1 = None
    module_4.nlargest(none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    var_0 = module_0.purge()
    var_0.__delattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    int_0 = -1508
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    bytes_0 = b"5\x89\x7f"
    var_0 = module_0.match(bytes_0, bytes_0)
    complex_0 = 1632.43 + 998.710067j
    tuple_0 = (var_0, complex_0)
    var_0.__delattr__(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    var_0 = module_0.purge()
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_2000():
    str_0 = "bv!KbidJm"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    bytes_0 = b"\xb0G\x9f\x9b[\x01w\xaa"
    module_0.search(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    var_0 = module_0.purge()
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    var_0 = module_0.purge()
    sequence_matcher_0 = module_1.SequenceMatcher(var_0)
    tuple_0 = (sequence_matcher_0, var_0, var_0)
    module_2.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    int_0 = 1250
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    float_0 = -3997.36
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    str_0 = "l_0-NzOtYt~y^)YGZJXO"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    float_0 = -715.0
    none_type_0 = None
    module_0.split(float_0, float_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.Match(*list_0)


def test_case_2012():
    bytes_0 = b"\xcbvuI\x8aT\xbb\x89\xde\xe2[?"
    list_0 = [bytes_0, bytes_0]
    with pytest.raises(ValueError):
        module_7.namedtuple(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    bytes_0 = b"\x84\x04m\xbe\x9d\xdce"
    var_0 = module_0.match(bytes_0, bytes_0)
    module_2.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    str_0 = "xo3<MbNozG1#"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    int_0 = -1503
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    float_0 = -1862.6
    bool_0 = False
    module_2.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2018():
    complex_0 = -680.3 - 195.838505j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2019():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    none_type_0 = None
    float_0 = -1226.695758
    module_2.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    int_0 = 1988
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    int_0 = 836
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    bytes_0 = b"\xda\xf9\xc8r\xb9\x90\xd6C1\xb1M_\x90"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    str_0 = "$8idv4)oA4f3el$k\rT"
    none_type_0 = None
    module_4.nlargest(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    str_0 = "OJu#_k]#RKh'W\x0c$q_mN"
    none_type_0 = None
    var_0 = module_1.unified_diff(str_0, str_0, tofiledate=none_type_0)
    module_1.IS_CHARACTER_JUNK(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    dict_0 = {}
    module_0.sub(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    object_0 = module_5.object()
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    int_0 = -2251
    module_0.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    set_0 = set()
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    str_0 = 'D":u{q/_PVN6\nE1%>!UP'
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    bytes_0 = b"w\xe2\xc3\x98\xc1:\xa5E\xae\xd4l\xbf/\x8c\t\xce"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    int_0 = -740
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    str_0 = "ZhyN1HyRg qi.wv"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    str_0 = 'N_g\nQn"(vf\x0cWBq'
    none_type_0 = None
    var_0 = module_1.context_diff(str_0, str_0, none_type_0, lineterm=str_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    bytes_0 = b"\xd1\xfb\x93\xbbb\xc9Q"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    none_type_0 = None
    tuple_0 = ()
    module_2.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    bytes_0 = b"bDa\xcc)\xb9;\x96eY\xf9\x92\xa7\xdcJ."
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"\xe3\xd9\x0e\xbb\xd8\xdc\xe9\x9f\x7f:*"
    var_0 = module_0.purge()
    var_0.__len__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.search(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    object_0 = module_5.object()
    module_0.compile(object_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    int_0 = -1232
    str_0 = "#"
    bytes_0 = b"\x8c\n\xcc]\x04*"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: str_0, bytes_0: bytes_0}
    module_1.IS_CHARACTER_JUNK(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    bytes_0 = b"~\xbe\xf4=^\xbd\xbb"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    int_0 = 2044
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    set_0 = set()
    none_type_0 = None
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    int_0 = -617
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    bytes_0 = b"G\x10\xbcn\x0fLbH"
    int_0 = -1293
    tuple_0 = (bytes_0, int_0)
    bool_0 = True
    module_2.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    int_0 = -874
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    bool_0 = True
    none_type_0 = None
    module_2.match(bool_0, none_type_0)


def test_case_2065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2066():
    exception_0 = module_5.Exception()
    none_type_0 = None
    module_0.sub(exception_0, exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    str_0 = "pS\x0b2"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    bytes_0 = b""
    tuple_0 = (bytes_0, bytes_0)
    none_type_0 = None
    module_0.sub(tuple_0, bytes_0, bytes_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    float_0 = 1755.0
    module_0.finditer(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, bool_0, none_type_0)
    module_0.compile(var_0, none_type_0)


def test_case_2071():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2072():
    str_0 = "Sive9w"
    int_0 = -598
    module_0.subn(str_0, int_0, str_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    float_0 = -195.525149
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    int_0 = 1509
    none_type_0 = None
    var_0 = module_1.restore(int_0, none_type_0)
    module_1.SequenceMatcher(a=int_0, b=var_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    int_0 = 120
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    str_0 = "\x0c*\n\nCk(NN3zQ"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    str_0 = "o{!G[j6+?x"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    set_0 = set()
    bool_0 = False
    module_2.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    tuple_0 = ()
    module_0.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    str_0 = "&w8XF]"
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    bytes_0 = b"\x84Re\xb3\x88xO"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    int_0 = 532
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    bytes_0 = b"\xec[\xf4_\xbc"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    int_0 = -759
    set_0 = {int_0, int_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    int_0 = -769
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    float_0 = -304.9743
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    float_0 = 1710.79863
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    regex_flag_0 = module_0.RegexFlag.MULTILINE
    module_2.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    int_0 = 802
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    int_0 = -2056
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    int_0 = 521
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "9?hxAm\t/JV&Q-gD?,F6"
    module_0.template(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    complex_0 = 3125.07 + 1477.20744j
    module_4.nlargest(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    dict_0 = {}
    none_type_0 = None
    module_0.subn(dict_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    str_0 = "?0F"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    bytes_0 = b"\xd2\xf60\x13~\x19.\x9f\x15E63"
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    int_0 = -1072
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    tuple_0 = ()
    module_1.IS_LINE_JUNK(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2111():
    set_0 = set()
    bytes_0 = b"\xa4EJKw\xbe\xb0\x1b\xfd-"
    module_2.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2112():
    str_0 = "pjGkb"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_2.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2113():
    str_0 = "kIrAO]P"
    module_2.get_new_command(str_0, str_0)


def test_case_2114():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2115():
    int_0 = 894
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_2.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    bytes_0 = b"\x85m\xe8\xf7{\xd4\xd53(\x19\x8fW\xff\xb3\x08\xdeM\x83\xa9"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    int_0 = 63
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    str_0 = "k`lE5sa-EJ\x0c3s"
    bytes_0 = b"%"
    var_0 = module_1.restore(bytes_0, bytes_0)
    var_0.__repr__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_2122():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    int_0 = 1133
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    int_0 = 1598
    module_1.SequenceMatcher(b=int_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_2.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_2133():
    bytes_0 = b"\x8dl\xbe\x07\xe4G\x8d\x94\xafv\x9e\x94\x12j\xfe\x17"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0, rename=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bytes_0 = b"7Y\xd7I\xb9\xa2\xed2\xf7\xfa\x03\xca\xdd#\x11\xd8Y\x90"
    none_type_0 = None
    module_4.nlargest(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    tuple_0 = ()
    module_0.Scanner(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    int_0 = 343
    list_0 = [int_0]
    module_0.sub(int_0, int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    set_0 = set()
    dict_0 = {}
    object_0 = module_5.object(**dict_0)
    module_0.subn(set_0, set_0, set_0, set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    str_0 = "r/J8|A*~)~iDw~n#y5"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    str_0 = "=Phv3"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bytes_0 = b"Z\xb9\x14\xebf?\xfa"
    tuple_0 = (bytes_0,)
    module_0.template(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    complex_0 = -2053.79 - 3214.889j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    bytes_0 = b"~\xd4\xc1p\x96X\x89\x12\xeft\x93\x98\xc5\x84\x12FN"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_2145():
    int_0 = -2083
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    str_0 = '=t2"`"\neqES`VsDG0('
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    str_0 = "t/7)Rpd\rKC!"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    enum_dict_0 = module_6._EnumDict()
    bool_0 = False
    module_0.escape(bool_0)


def test_case_2149():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    with pytest.raises(TypeError):
        module_7.namedtuple(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    complex_0 = 2197 + 917.13745j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    int_0 = 2729
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    bytes_0 = b"\xa7\x00\xe4\xf9\n\x100Qq\xce\xa0\xbc\x8c\xa3\x95\xd5\x12\x01\x8e"
    module_1.IS_CHARACTER_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    int_0 = -1636
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_2.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    int_0 = 2322
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    var_1 = var_0.__dir__()
    dict_0 = {var_0: var_1, var_0: var_1}
    module_2.match(var_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    float_0 = 2725.92
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    int_0 = 1039
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    complex_0 = 10.5 + 761.53j
    list_0 = [complex_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    int_0 = -2533
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    int_0 = -944
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    str_0 = ""
    none_type_0 = None
    module_0.subn(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    bytes_0 = b"\x96K\x0e\x8dR"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, n=none_type_0, lineterm=none_type_0
    )
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    str_0 = "\n)Af%CL\x0b.>L!U\tiWC-"
    module_1.get_close_matches(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    bytes_0 = b"+\x93\xd6K\x8as\xce\x01\xd0\xaau1\xe9[\xfb\xcc\xa9\x1d\xc9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_2.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    int_0 = 1793
    list_0 = [int_0]
    module_0.search(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    int_0 = -2451
    var_0 = module_1.ndiff(int_0, int_0)
    module_2.match(int_0, var_0)


def test_case_2171():
    bool_0 = True
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    str_0 = "'Uu1"
    none_type_0 = None
    module_0.match(str_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    str_0 = "/!(\x0cjFpS'"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2176():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    complex_0 = -187.62146 + 930.7183j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    str_0 = "\x0b]?8hez,e4M\x0bNsY"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    str_0 = "\rutC^[z[;!{\x0b7^GM"
    bool_0 = True
    module_0.finditer(str_0, bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    none_type_0 = None
    bytes_0 = b"\xd2\x08\xc1<\r\xd5^"
    module_2.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    float_0 = -808.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    bytes_0 = b"\xde\x9c\x11\xea\xddg\xe3\x16\xa5\xe4D\x9d\xab~\xef"
    none_type_0 = None
    var_0 = module_1.context_diff(
        bytes_0, bytes_0, tofile=bytes_0, n=none_type_0, lineterm=none_type_0
    )
    module_2.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    bytes_0 = b"q\xf5L"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    bytes_0 = b'"\x9b\x89\x80\xe1hV\xab4'
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    int_0 = 1264
    none_type_0 = None
    var_0 = module_1.context_diff(int_0, none_type_0, lineterm=none_type_0)
    module_2.get_new_command(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    str_0 = "ML|C^0XcZX"
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    bytes_0 = b"\xd3\xa4\x81\xb8\xf7\x01\xe9\x99v*\x85\x9d\x97\xb4s"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    bytes_0 = b"/\x1b\x0f\xb1\xdf\x9b\x02 \x8a\xb4\x7f\x8dl"
    var_0 = module_0.compile(bytes_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_2200():
    float_0 = -5282.31
    dict_0 = {float_0: float_0, float_0: float_0}
    module_2.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    bool_0 = True
    bool_1 = False
    module_2.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    error_0 = module_3.Error()
    module_2.get_new_command(error_0, error_0)


def test_case_2205():
    bytes_0 = b"\xc6D\x1c\xefWa\xfb\xc7M\xd1\xfd_r\xcd\x1f\x93"
    dict_0 = {bytes_0: bytes_0}
    with pytest.raises(ValueError):
        module_7.namedtuple(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    bool_0 = True
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    bytes_0 = b"$\x9dF\x96~5\x93"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    str_0 = "]G=%:_2L1|ZafQE"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    enum_dict_0 = module_6._EnumDict()
    bool_0 = False
    none_type_0 = None
    module_4.nlargest(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.context_diff(
        none_type_1, none_type_1, none_type_1, none_type_1, tofiledate=none_type_1
    )
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    var_0 = module_0.purge()
    set_0 = {var_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    bytes_0 = b"{\xf1\x12\xe0\x990.W\xae-Z\xdc\x8f"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(none_type_0, none_type_0, none_type_0)
    bool_0 = False
    module_0.findall(sequence_matcher_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    set_0 = set()
    module_1.IS_LINE_JUNK(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(none_type_0)
    module_0.subn(sequence_matcher_0, none_type_0, sequence_matcher_0)


def test_case_2219():
    bool_0 = True
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0, rename=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    str_0 = "X,.:K*Gl"
    var_0 = module_1.diff_bytes(str_0, str_0, str_0, str_0, lineterm=str_0)
    float_0 = -1148.25762
    none_type_0 = None
    var_1 = module_1.context_diff(
        float_0, none_type_0, fromfiledate=float_0, lineterm=none_type_0
    )
    module_0.fullmatch(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    bytes_0 = b"\\\xc4{\x06p\xa9*"
    bool_0 = True
    var_0 = module_1.restore(bool_0, bool_0)
    var_0.scan(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    int_0 = -740
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    bytes_0 = b"d\x9a\x04!\x06\xc6\xad\xda\xb0\xa8"
    set_0 = set()
    module_0.finditer(bytes_0, bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    bytes_0 = b"5\xff\x1ew\x80\x87\xea\x18\x805*\xf4y\x06\xc8\x13\xba(*\x96"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    str_0 = "\x0cHP_hJNuAR/B"
    var_0 = module_0.escape(str_0)
    module_2.match(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    float_0 = 6598.266
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    bool_0 = True
    list_0 = []
    module_0.search(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    float_0 = 4644.983397
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.Scanner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    str_0 = "7ns\r\x0bn!dsZ0:/CC"
    str_1 = "Jw_;"
    str_2 = "!wG"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_0}
    module_5.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    str_0 = "Sp)Hl2`6"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    bool_0 = False
    bool_1 = True
    module_2.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    complex_0 = -1831.7372 - 520.365013j
    module_0.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    enum_dict_0 = module_6._EnumDict()
    module_1.IS_CHARACTER_JUNK(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    complex_0 = 2047.265517 - 433.32j
    module_0.escape(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    bytes_0 = b"\xda\x8ck\xab^!"
    list_0 = [bytes_0, bytes_0]
    module_2.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    complex_0 = 809.854413 - 179.41j
    module_0.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    var_1 = module_1.context_diff(var_0, none_type_0, tofile=none_type_0)
    var_1.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_2240():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    var_1.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bytes_0 = b"X\xd2&o?\xac\xe7`-"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    set_0 = {var_0, var_0, none_type_0, none_type_0}
    module_2.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    str_0 = "=+j<FI{bEm<p"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    var_0 = module_0.purge()
    module_4.nlargest(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    bytes_0 = b"\xee\xc4\x9dA\x06\xb9G\xb4\xe2\xc0\xd934\xf4\xa2"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bool_0 = True
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    none_type_0 = None
    bool_0 = False
    module_2.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    complex_0 = -2671.8 + 1350j
    module_0.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.__iter__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    int_0 = 2622
    list_0 = [int_0]
    module_2.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    bytes_0 = b"\x9c\xab\xe9\xc7q3\xf6\x1e\x8b%\xf4\xe0\xed\xf7\xa2r?\xe8\x85\xfc"
    module_2.match(bytes_0, bytes_0)


def test_case_2253():
    enum_dict_0 = module_6._EnumDict()
    with pytest.raises(ValueError):
        module_7.namedtuple(enum_dict_0, enum_dict_0, rename=enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    int_0 = -814
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    bytes_0 = b"p|\xf5\xe4\xach\x92\xad\xf6@\x08\x9by"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    bool_0 = True
    int_0 = -1224
    var_0 = module_1.unified_diff(int_0, int_0, tofiledate=int_0, n=int_0)
    var_0.make_file(bool_0, bool_0, context=bool_0, numlines=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    int_0 = -2636
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    float_0 = 20.828259
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2259():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_4.nlargest(dict_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    str_0 = "W&Hbx9V2"
    var_0 = module_0.compile(str_0)
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    str_0 = "Mc?uH|&GTx2M|"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    str_0 = "M'S'a)`-?\\/r\x0b68]l+i"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    dict_0 = {}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2268():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    bytes_0 = b"xI\x92\xff\x845\xd4\xe8\xd5\xbb_\xf3"
    none_type_0 = None
    module_0.findall(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    none_type_0 = None
    str_0 = "Z?5Y/o{![qpj#tIP1#\\p"
    module_2.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    int_0 = -547
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    float_0 = -1280.291943
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    bytes_0 = b"z\x99\xf0"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_2.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    bool_0 = True
    var_0 = module_1.context_diff(
        bool_0, bool_0, fromfiledate=bool_0, tofiledate=bool_0
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    str_0 = "A"
    none_type_0 = None
    module_0.sub(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.diff_bytes(bool_0, bool_0, bool_0, lineterm=none_type_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    float_0 = -1793.64913
    module_0.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    set_0 = set()
    module_1.get_close_matches(set_0, set_0, cutoff=set_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    list_0 = []
    module_6.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    str_0 = '8Zmkr"+'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    complex_0 = -3555.207862 + 1805.00317j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    float_0 = -527.3
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    str_0 = "Y8; $'E@;R"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    bytes_0 = b"\x9d\x1b\xa1B\x9eH4h\xf6\xc5[\xc2_\xde"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    int_0 = -2595
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    set_0 = set()
    none_type_1 = None
    module_0.subn(set_0, none_type_1, none_type_1, none_type_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2290():
    bytes_0 = b"\x08\xf31T\xf13\x91\x1c\x11\x8awa+"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2291():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    str_0 = "b\tt7AUl=Dw\x0cmNG`e"
    tuple_0 = (str_0,)
    module_2.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0, none_type_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_2295():
    int_0 = -1065
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    none_type_0 = None
    str_0 = "4pzg1xA|kWb->"
    module_2.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    float_0 = 290.4621
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


def test_case_2298():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2299():
    bool_0 = True
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(
        bool_0, none_type_0, autojunk=none_type_0
    )
    list_0 = [sequence_matcher_0]
    module_0.sub(list_0, sequence_matcher_0, none_type_0, flags=sequence_matcher_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    complex_0 = 341.3478 + 571.66j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    int_0 = -1512
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    int_0 = -2679
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    str_0 = "\n#Z)7g#f3PRlva=D"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.sub(list_1, list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    int_0 = -605
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    dict_0 = {}
    module_0.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    bytes_0 = b"\x83A"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    str_0 = "o\\%L\x0b@6"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    bytes_0 = b"\x14\xdc`"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    int_0 = -1500
    none_type_0 = None
    var_0 = module_1.unified_diff(int_0, int_0, none_type_0, n=none_type_0)
    var_1 = module_0.purge()
    module_0.template(var_1)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    bytes_0 = b"\x7f6\x14c\xc2\xc8!<\xe8\xfc\x84\xef\x91\xa4\xd7"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    bool_0 = True
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bytes_0 = b"\xfa/\x0f"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    str_0 = "1~"
    module_2.get_new_command(str_0, str_0)


def test_case_2321():
    tuple_0 = ()
    var_0 = module_1.restore(tuple_0, tuple_0)
    var_1 = module_1.restore(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    str_0 = ">[W\nK))A&\t8L"
    var_0 = module_1.ndiff(str_0, str_0)
    module_2.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    float_0 = 4403.508
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__setattr__(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    str_0 = "("
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    bool_0 = False
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_2.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    bool_0 = True
    module_1.IS_LINE_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    bytes_0 = b"\xd0\x1a\xff\xb7\xaa)\x0b$e\xd6\xd5S\xecT\x8fdm"
    var_0 = module_1.unified_diff(bytes_0, bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_2.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(none_type_0)
    var_0 = sequence_matcher_0.get_opcodes()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_2335():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    bool_0 = True
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    none_type_0 = None
    int_0 = -2447
    module_0.subn(none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    none_type_0 = None
    module_0.template(none_type_0)


def test_case_2339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2340():
    bytes_0 = b"\xac"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    tuple_0 = ()
    module_0.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    str_0 = "uq;2NZ[qa"
    none_type_0 = None
    module_0.search(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    str_0 = "pre*u`-"
    dict_0 = {str_0: str_0}
    module_5.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_2345():
    list_0 = []
    module_0.match(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    int_0 = -492
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    str_0 = "_dj2y2OtD9]\nA#Gh"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    bytes_0 = b"\x0ef\xbbA\x03\x044\x96AZp"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    str_0 = "n\\>%UR`"
    list_0 = [str_0, str_0]
    module_2.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    tuple_0 = ()
    int_0 = 1140
    none_type_0 = None
    module_0.split(tuple_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_2354():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    int_0 = 207
    module_2.match(int_0, int_0)


def test_case_2356():
    str_0 = "pe#.@@"
    with pytest.raises(ValueError):
        module_7.namedtuple(str_0, str_0, rename=str_0, module=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    none_type_0 = None
    dict_0 = {}
    module_0.subn(dict_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    str_0 = "Y]>z*eHMNP"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    var_0 = module_0.purge()
    var_1 = module_1.restore(var_0, var_0)
    list_0 = [var_0, var_0, var_1, var_1]
    module_2.get_new_command(var_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    tuple_0 = ()
    none_type_0 = None
    module_0.compile(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    bytes_0 = b"j\xedV#U\x7f\x13\xd7\xb2y\xa8|\xe5\xe20\xc2\xaaX\xd1"
    regex_flag_0 = module_0.RegexFlag.DEBUG
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        bytes_0,
        regex_flag_0,
        regex_flag_0,
        tofile=bytes_0,
        tofiledate=none_type_0,
        lineterm=none_type_0,
    )
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_2363():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, tofile=none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    int_0 = -111
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    float_0 = 1082.21
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    list_0 = []
    none_type_0 = None
    module_0.sub(list_0, none_type_0, list_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    str_0 = "k(3g(|=zL\x0bx#<Uh1\t5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.sub(dict_0, str_0, dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    str_0 = "'Q<[W/uVbU "
    var_0 = module_0.escape(str_0)
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    bytes_0 = b"\xd1\x8cRtx\xd4\xd6\x06\xf6z$\x81\xc2r\xdc\xa0"
    var_0 = module_0.match(bytes_0, bytes_0)
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2373():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    none_type_1 = None
    module_0.match(none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    int_0 = -2197
    set_0 = {int_0, int_0, int_0}
    module_2.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    int_0 = 48
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.context_diff(
        none_type_1, none_type_1, none_type_1, fromfiledate=none_type_1, n=none_type_1
    )
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    str_0 = '=we/m)]7"%|it(kX3r='
    tuple_0 = (str_0,)
    module_2.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    bytes_0 = b"\xad\xc5\xda\x8d\x91\xd10\x1a"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    tuple_0 = ()
    module_1.IS_CHARACTER_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    bytes_0 = b"7\x10\xddO\x03\xad\x87;\xdc\xdd\t\xe6\xd8a"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    str_0 = "syPKFsL"
    bytes_0 = b""
    module_1.IS_CHARACTER_JUNK(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    str_0 = "mcjG$"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    complex_0 = -106.5 + 2701.99061j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    tuple_0 = ()
    module_1.IS_CHARACTER_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    bool_0 = False
    tuple_0 = ()
    var_0 = module_1.restore(bool_0, bool_0)
    var_0.scan(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    str_0 = "\rI) )uP2y,CKgjo/."
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    int_0 = -536
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    dict_0 = {}
    none_type_0 = None
    module_0.fullmatch(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    base_exception_0 = module_5.BaseException()
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    str_0 = "R.\x0b(G:'7CB186\""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    int_0 = 4451
    none_type_0 = None
    module_4.nlargest(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    exception_0 = module_5.Exception()
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    str_0 = "|zQN2R0e9wl/o"
    str_1 = "r)n6Y\x0cr\\{xe?l!2P%v"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    float_0 = 2072.5439
    module_1.IS_CHARACTER_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    tuple_0 = ()
    var_0 = module_1.context_diff(
        tuple_0, tuple_0, tuple_0, fromfiledate=tuple_0, n=tuple_0
    )
    module_2.match(var_0, var_0)


def test_case_2404():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0, defaults=bool_0, module=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    str_0 = "A`nt*jz`* 9&h02RX6f"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    bytes_0 = b"\x15vy"
    none_type_0 = None
    var_0 = module_1.context_diff(
        bytes_0,
        bytes_0,
        fromfiledate=bytes_0,
        tofiledate=none_type_0,
        lineterm=none_type_0,
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    float_0 = -1356.38
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    str_0 = ""
    var_0 = module_0.escape(str_0)
    none_type_0 = None
    var_1 = module_1.context_diff(
        str_0, none_type_0, none_type_0, str_0, none_type_0, n=none_type_0
    )
    module_2.get_new_command(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    float_0 = 2384.439061
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    bytes_0 = b"\x9f\x90|#SR?N\x9fz\xf7m"
    set_0 = {bytes_0, bytes_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_2420():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2421():
    str_0 = "\x0cU1)v}'P"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.split(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    int_0 = -681
    int_1 = 1277
    module_2.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    int_0 = -5048
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_2426():
    str_0 = "VeBt[v>$r]DAFDY\nJ;]"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    int_0 = 3019
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    differ_0 = module_1.Differ()
    str_0 = "V&M/3-[o"
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    str_0 = "'Y1GT\r9acfKV6u"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    float_0 = -1511.0
    none_type_0 = None
    module_0.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    tuple_0 = ()
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(
        a=tuple_0, b=none_type_0, autojunk=tuple_0
    )
    sequence_matcher_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_2436():
    str_0 = "Y`k~s^}8!jN^}ofG<dfF"
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, str_0, none_type_0, lineterm=str_0)
    var_0.get_opcodes()


def test_case_2437():
    bool_0 = False
    with pytest.raises(ValueError):
        module_1.get_close_matches(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    bytes_0 = b"\x88-\xea\xc3\xb2\x07\xab"
    module_1.IS_CHARACTER_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    none_type_0 = None
    module_2.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    str_0 = "U6#9gR[\\P"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_1.IS_LINE_JUNK(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    int_0 = 983
    bool_0 = True
    module_2.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    bytes_0 = b"\xa8\x840\x83'\x1d\x87H\xb7\x04\x16"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    bytes_0 = b"\xce\x8c;:\xacm"
    int_0 = 1946
    module_2.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    bytes_0 = b"\xd5(]\xd9D\x16+4\x18SH"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    var_0 = module_0.purge()
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_2448():
    bytes_0 = b"\xc5\xe7$i\x18^"
    float_0 = 862.1441
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bytes_0, bytes_0, fromfiledate=float_0, tofiledate=none_type_0
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    bytes_0 = b"/\xf0(\x81Xl"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_2451():
    int_0 = 1408
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    bool_0 = True
    set_0 = {bool_0}
    module_0.findall(bool_0, set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    str_0 = "_wF\n]$\t't]2\\qW"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    var_0 = module_0.purge()
    float_0 = 2251.34
    module_0.finditer(var_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_2456():
    bool_0 = True
    int_0 = -1619
    int_1 = 273
    var_0 = module_1.restore(int_0, int_1)
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    int_0 = 993
    none_type_0 = None
    module_0.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    var_0 = module_0.purge()
    set_0 = set()
    var_1 = module_1.restore(var_0, set_0)
    module_2.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    str_0 = "Wc7yd}3kV~&}4Ar3!H{"
    str_1 = "I\"}!~Y'Yi:"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    float_0 = 1191.203
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    tuple_0 = ()
    tuple_1 = ()
    module_2.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    bytes_0 = b"e|\\\xb0dy|t\x16~\xd2\xd0s\xbd\xd9"
    module_0.split(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    str_0 = ""
    var_0 = module_1.ndiff(str_0, str_0)
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    float_0 = -280.24
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    str_0 = "i"
    var_0 = module_1.restore(str_0, str_0)
    error_0 = module_0.error(var_0)
    module_0.subn(error_0, error_0, error_0, flags=var_0)


def test_case_2468():
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        module_7.namedtuple(var_0, var_0, rename=var_0, defaults=var_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    bytes_0 = b"*\x9eA\xa4\xa1\xf7G\xdb\xa5\xf9~T\xa9T"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    complex_0 = 516.92 - 1094.7096j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    int_0 = 168
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        list_1, list_0, none_type_0, list_0, tofiledate=none_type_0
    )
    list_2 = [var_0]
    module_2.get_new_command(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    int_0 = 2649
    module_0.subn(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    int_0 = 7
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    none_type_0 = None
    module_0.fullmatch(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0]
    module_2.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    complex_0 = 2604.917 - 29.78j
    none_type_0 = None
    var_0 = module_1.unified_diff(
        complex_0, complex_0, none_type_0, tofiledate=none_type_0, n=none_type_0
    )
    module_0.search(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    float_0 = 1409.8
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    bytes_0 = b"Il\x1c\xc2\xac\xd5\xa6(v\xc3\x15\x0cy^I_"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    int_0 = -1249
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    int_0 = -849
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    float_0 = -226.37
    module_4.nlargest(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(b=none_type_0)
    module_2.get_new_command(sequence_matcher_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    bool_0 = False
    float_0 = -870.0
    module_2.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    bytes_0 = b"Q\xe9\xff\xb7m\xda\x95\x7f[\x1cb\x11\x18\xc9"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    dict_0 = {}
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    float_0 = 56.0
    var_0 = module_1.ndiff(float_0, float_0, float_0)
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    int_0 = -1430
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    var_0 = module_0.purge()
    str_0 = "|8C*;\n.S(+S"
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    str_0 = "\tkPS>=N)iPbF<#A$I"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


def test_case_2496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2497():
    none_type_0 = None
    bool_0 = False
    module_2.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    bytes_0 = b"\xebH\x1cE\xe6\r\xfef\xa2a\x0b\x91\xed\t"
    module_4.nlargest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    bytes_0 = b"\xe6\x1d\xfb\x18z\xa5\xb8"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        tofiledate=none_type_0,
        lineterm=none_type_0,
    )
    module_1.IS_LINE_JUNK(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, bool_0)
    module_0.sub(bool_0, var_0, none_type_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    str_0 = "^]Irfs6Q9\nhbkCY*{b'"
    list_0 = [str_0, str_0]
    module_3.Error(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b"\x8c\xa4p\xfbG\xf7\x89\x88\xf1"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2508():
    int_0 = -2936
    module_0.search(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    str_0 = "0VDG[i=X"
    int_0 = -100
    var_0 = module_1.diff_bytes(str_0, int_0, int_0, tofiledate=int_0)
    var_0.get_opcodes()


def test_case_2510():
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    str_0 = "jkqgTUy*8|"
    dict_0 = {}
    auto_0 = module_6.auto(**dict_0)
    module_2.match(str_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__iter__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    str_0 = "\r)e jw}"
    none_type_0 = None
    str_1 = "]?K:+Q"
    str_2 = "yH\r<"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    bytes_0 = b"28=\xfb\x08B"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    bytes_0 = b'\xbe\x90\xe0\xc5\xf0\xbf\nWV\xa4\xc8b".\xdc\xe9('
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    bytes_0 = b"m\xbc(\xeff\x014\xff"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    bool_0 = False
    sequence_matcher_0 = module_1.SequenceMatcher(a=bool_0, autojunk=bool_0)
    sequence_matcher_0.set_seq2(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_2.match(none_type_0, dict_0)


def test_case_2520():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2521():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, pos=none_type_0)
    module_1.IS_CHARACTER_JUNK(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    int_0 = -749
    sequence_matcher_0 = module_1.SequenceMatcher(int_0, int_0)
    sequence_matcher_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_2525():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    str_0 = "g=Sn.WEa"
    module_0.subn(str_0, str_0, str_0, flags=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


def test_case_2529():
    pass


def test_case_2530():
    base_exception_0 = module_5.BaseException()
    with pytest.raises(TypeError):
        module_7.namedtuple(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    str_0 = "@s 7q@&\te\\v=-N0+$@T`"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    str_0 = "?w,^r]%5aG9"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    int_0 = 6916
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    str_0 = "yHJ\rgv5\t`G{"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


def test_case_2536():
    bool_0 = True
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    none_type_0 = None
    str_0 = "n5p L]\nua~\\<"
    sequence_matcher_0 = module_1.SequenceMatcher(b=str_0)
    var_0 = sequence_matcher_0.set_seq1(none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.diff_bytes(
        none_type_1, none_type_1, none_type_1, lineterm=none_type_1
    )
    var_0.__call__(
        none_type_0,
        none_type_0,
        module=none_type_0,
        type=none_type_0,
        start=none_type_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_2540():
    int_0 = 102
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    float_0 = -841.0
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    str_0 = "=\twL7x]^"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    str_0 = "5392?vF\t&[5d:w;vn%7"
    var_0 = module_1.diff_bytes(
        str_0, str_0, str_0, fromfiledate=str_0, tofiledate=str_0, n=str_0
    )
    var_1 = module_1.diff_bytes(str_0, var_0, var_0, str_0, lineterm=str_0)
    module_0.template(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    bytes_0 = b"\xc9A5\r7\xd9\xe2\x82\xf8\x01\xbe\x91\xd7?\xefy\x18"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bool_0 = False
    module_0.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    int_0 = 3260
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    float_0 = 2609.5
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    str_0 = "]"
    none_type_0 = None
    var_0 = module_1.restore(str_0, none_type_0)
    var_1 = module_1.unified_diff(
        var_0,
        var_0,
        tofile=str_0,
        tofiledate=str_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    module_2.get_new_command(var_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    int_0 = -2628
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    float_0 = 3108.06
    module_2.match(float_0, float_0)


def test_case_2553():
    float_0 = -1078.47
    with pytest.raises(ValueError):
        module_1.get_close_matches(float_0, float_0, cutoff=float_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    module_0.subn(var_0, set_0, var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    int_0 = 188
    none_type_0 = None
    module_0.sub(int_0, int_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    bool_0 = True
    var_0 = module_1.context_diff(bool_0, bool_0, lineterm=bool_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_2557():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofiledate=none_type_0, n=none_type_0
    )
    module_2.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    complex_0 = 1323.44576 - 313.673821j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    str_0 = "2Qf3$4]K"
    str_1 = "Xz4H@0U4)_F/hW"
    str_2 = "*m&%uzcg(a(X7q#"
    str_3 = "Xoceu\rw"
    dict_0 = {str_0: str_0, str_1: complex_0, str_2: list_0, str_3: str_3}
    module_6.EnumMeta(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    var_0 = module_0.purge()
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    base_exception_0 = module_5.BaseException()
    var_0 = module_1.unified_diff(base_exception_0, base_exception_0, base_exception_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_2561():
    float_0 = 1070.214329
    module_0.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    int_0 = 2364
    none_type_0 = None
    module_4.nlargest(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    bytes_0 = b"\xbd\x83"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    float_0 = -2845.0
    none_type_0 = None
    module_0.fullmatch(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    complex_0 = 768.8 + 1870.6j
    module_0.subn(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    bytes_0 = b"\xed|\x98\xd7\x81\xf4\xc9f3*"
    list_0 = [bytes_0, bytes_0]
    error_0 = module_3.Error(*list_0)
    module_0.search(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    int_0 = 2056
    module_0.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    str_0 = "S4.q#\\*NLTQlS"
    list_0 = [str_0]
    module_2.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    bytes_0 = b"\x9b\xb1\x9c"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    bytes_0 = b"\x88\xf2*\x95\xe4P\xd0Be"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, set_0, charjunk=none_type_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    bool_0 = True
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    tuple_0 = ()
    module_0.sub(tuple_0, tuple_0, tuple_0)


def test_case_2578():
    int_0 = -2008
    none_type_0 = None
    var_0 = module_1.restore(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    int_0 = 3
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2581():
    str_0 = "[uoS+\r,T!t|?8h"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2582():
    float_0 = 2052.4
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bytes_0 = b"L~x\x0b\x12\xdf"
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bytes_0, bytes_0, bytes_0, none_type_0, none_type_0, lineterm=bytes_0
    )
    tuple_0 = (var_0, var_0)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, var_0)
    module_2.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    int_0 = -2400
    var_0 = module_1.unified_diff(int_0, int_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    int_0 = 3735
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    bytes_0 = b"-\x83\xe7\x07\x9dXtB\xeb\xf8"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    bytes_0 = b"K\xc6\x08\xcb_L\xc7#\xdd"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    none_type_0 = None
    str_0 = '="'
    var_0 = module_0.findall(str_0, str_0)
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    str_0 = "dvZM.@P:+W\t k"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    str_0 = "^z1CBrCj>w8.v:wrPJ"
    var_0 = module_0.purge()
    var_0.set_seq2(str_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    str_0 = "za9E$2{Gk5!Zf\x0c\x0c71s|"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    int_0 = 23
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    auto_0 = module_6.auto()
    list_0 = [auto_0, auto_0, auto_0]
    var_0 = module_1.context_diff(list_0, list_0, tofile=list_0)
    float_0 = -2235.0
    auto_1 = module_6.auto()
    var_1 = module_1.diff_bytes(
        float_0, float_0, float_0, float_0, float_0, tofiledate=auto_1
    )
    module_1.get_close_matches(var_1, float_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bytes_0 = b"d\xa4\x0f\xa0\x0e\xbc\x89A\xac\xc4"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_2.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    str_0 = "\\zc6t7O{N],kI'T\nKY@_"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    float_0 = 1938.058
    var_0 = module_1.restore(float_0, float_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    bytes_0 = b"-\xdf\x97\r\x15&e\x9d="
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    str_0 = "?=u=G2^4ewo$"
    none_type_0 = None
    var_0 = module_1.context_diff(str_0, none_type_0, none_type_0, lineterm=none_type_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2605():
    str_0 = "]H~r\rdB"
    dict_0 = {str_0: str_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    var_0 = module_1.ndiff(dict_0, none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    int_0 = 88
    set_0 = {int_0}
    module_2.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    bool_0 = True
    bool_1 = True
    module_2.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    float_0 = 712.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_2613():
    int_0 = 2339
    none_type_0 = None
    module_2.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    float_0 = -2506.8594
    module_0.sub(float_0, float_0, float_0, flags=float_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    int_0 = -2228
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bytes_0 = b"\xe1\n\xcd\xc8\xa0"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    tuple_0 = ()
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_2.match(tuple_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    float_0 = -1543.49
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, bool_0, none_type_0)


def test_case_2624():
    bytes_0 = b"R\x10\xba\xfd\x0e\xa8"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0)


def test_case_2625():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2626():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, lineterm=none_type_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    bytes_0 = b"\x82U"
    bool_0 = True
    module_2.get_new_command(bytes_0, bool_0)


def test_case_2628():
    bytes_0 = b"\xa8u\r\x07\xdc\xcf\xd3lL\xdd"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    none_type_0 = None
    bool_0 = True
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, tofiledate=bool_0
    )
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_2630():
    int_0 = -3667
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    float_0 = 714.27
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    int_0 = -4205
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    error_0 = module_3.Error()
    list_0 = [error_0]
    module_0.subn(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    str_0 = ">T-2J!rvI$:1`ZD-P"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    bool_0 = False
    var_0 = module_0.purge()
    module_0.findall(bool_0, var_0, var_0)


def test_case_2636():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


def test_case_2637():
    enum_dict_0 = module_6._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_2638():
    list_0 = []
    error_0 = module_3.Error(*list_0)
    module_2.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    error_0 = module_3.Error(*list_0)
    list_1 = [none_type_0]
    module_2.get_new_command(error_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    complex_0 = -681.9 - 1841.474j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    bytes_0 = b"\xbbN\x02\xa6\x10\xf2\xfb_t\xd8"
    var_0 = module_0.purge()
    var_0.__iter__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    int_0 = 364
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    str_0 = "\\_$x5_N9B6{mgZ"
    var_1 = module_1.unified_diff(str_0, str_0, tofiledate=str_0)
    list_0 = []
    module_0.finditer(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    bytes_0 = b"\xd6\xfe"
    module_0.sub(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.search(none_type_0, dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    int_0 = 1050
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    int_0 = 540
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        int_0,
        none_type_0,
        int_0,
        tofile=none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    float_0 = 23.2
    none_type_1 = None
    var_1 = module_1.context_diff(float_0, none_type_1)
    var_1.make_table(var_0, none_type_0, todesc=int_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    int_0 = 2435
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    complex_0 = 2300.765374 + 1571.169727j
    none_type_0 = None
    module_2.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(none_type_0, autojunk=none_type_0)
    var_0 = sequence_matcher_0.get_opcodes()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_2655():
    bytes_0 = b"\xb6\xba5\xc0\x9c\xfb\x96\x89\xa4\xda\x0eu@\x97\n9\xd2\xf5\xd8"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    none_type_0 = None
    html_diff_0 = module_1.HtmlDiff(none_type_0)
    var_0 = module_1.context_diff(
        html_diff_0, html_diff_0, html_diff_0, fromfiledate=html_diff_0
    )
    module_2.get_new_command(var_0, html_diff_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    str_0 = "NW)If8[A`n'\r^U\\i(my"
    module_0.template(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    int_0 = 3869
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.subn(bool_0, dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    str_0 = "&5I\x0b'2k,`TMo 9t-o%:"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    bytes_0 = b"\xde~u\x00<\xbe\xadH\x1a\xd05\xf9\xe1\xb0"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    str_0 = 'f5/UU-8%5"MC5k#d7 Z'
    var_0 = module_0.escape(str_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    var_0 = module_0.purge()
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    int_0 = -2537
    none_type_0 = None
    module_0.subn(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    float_0 = 4219.6
    tuple_0 = (float_0,)
    module_2.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0
    )
    module_2.match(var_0, none_type_0)


def test_case_2670():
    complex_0 = -1600.29579 - 3434.078501j
    with pytest.raises(TypeError):
        module_7.namedtuple(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    int_0 = 2495
    set_0 = {int_0}
    var_0 = module_1.context_diff(set_0, int_0, lineterm=int_0)
    module_2.get_new_command(var_0, int_0)


def test_case_2672():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0, none_type_0, rename=none_type_0, module=none_type_0
        )


@pytest.mark.xfail(strict=True)
def test_case_2673():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        tofiledate=none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    none_type_1 = None
    module_4.nlargest(none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bytes_0 = b"m\xf9"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_2.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    tuple_0 = ()
    module_0.subn(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    bytes_0 = b"_\xad\xf2\x95"
    module_4.nlargest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    bytes_0 = b"\xb5"
    set_0 = {bytes_0}
    module_2.match(set_0, set_0)


def test_case_2680():
    int_0 = 685
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    int_0 = 1367
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    int_0 = -2402
    none_type_0 = None
    var_0 = module_1.context_diff(
        int_0,
        none_type_0,
        fromfiledate=int_0,
        tofiledate=none_type_0,
        lineterm=none_type_0,
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    str_0 = "47$,a"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    set_0 = set()
    module_0.split(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    int_0 = 1600
    module_0.match(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    var_0 = module_0.purge()
    dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
    var_1 = module_1.unified_diff(
        dict_0, var_0, dict_0, tofiledate=var_0, lineterm=var_0
    )
    var_1.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_2688():
    str_0 = '"FC\x0byna>2gnb!'
    module_2.get_new_command(str_0, str_0)


def test_case_2689():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2690():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    str_0 = "-}KWj>("
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    bool_0 = True
    none_type_0 = None
    bytes_0 = b'\xa1\xd78y"\x1f\xd8\xf9\\\x12w\x80\xbb'
    var_0 = module_0.finditer(bytes_0, bytes_0)
    var_0.__setattr__(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    bytes_0 = b"b\xf8?\xc9\xd2\x19\xac\xdc\xf4\xb1r"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    float_0 = -1847.957
    bytes_0 = b"\x1a\x82m\xf2\x1b^\xc1"
    dict_0 = {float_0: bytes_0}
    module_2.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    list_0 = [var_0, none_type_0, var_0]
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


def test_case_2700():
    str_0 = "+q0v"
    var_0 = module_1.restore(str_0, str_0)
    with pytest.raises(ValueError):
        module_1.get_close_matches(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    bool_0 = False
    var_0 = module_1.restore(bool_0, bool_0)
    int_0 = 1613
    module_2.get_new_command(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    var_0 = module_0.purge()
    module_1.get_close_matches(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    int_0 = 2884
    module_1.IS_CHARACTER_JUNK(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    tuple_0 = ()
    module_1.IS_CHARACTER_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    int_0 = 2257
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    bool_0 = True
    bytes_0 = b"\xdd\xe7\x9b\x00f\xfa2\xd1\x8cu\xb5\xf9\x16$.:\xd49\xec"
    module_2.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    base_exception_0 = module_5.BaseException()
    module_2.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    bytes_0 = b"\xc8"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    module_2.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    float_0 = -3562.27
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_2.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    bytes_0 = b"\xb4\xa0\xc0\xa7\xf1>\xd8\x05D\x9f\xfc\xe3\xc1"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    int_0 = 1589
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    float_0 = 40.2815
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_0.sub(var_1, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__getitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bytes_0 = b"\xb8B\xd1"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    int_0 = -792
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_2.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    int_0 = 701
    bool_0 = False
    module_2.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bytes_0 = b"b\xe1"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    bool_0 = False
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    bytes_0 = b"\xd8\xd6.\xcd"
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_1.diff_bytes(dict_0, dict_0, bytes_0, n=bytes_0)
    module_0.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    float_0 = 32.593
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    bytes_0 = b"\x08\x15\xb7y\x92@k\xc3"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    var_0 = module_1.unified_diff(bool_0, bool_0, none_type_1, lineterm=bool_0)
    var_0.make_table(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    complex_0 = 1084.038995 - 2411.66073j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


def test_case_2733():
    str_0 = "iC\x0cRF>cvu"
    var_0 = module_1.IS_CHARACTER_JUNK(str_0)
    with pytest.raises(ValueError):
        module_1.get_close_matches(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    var_0 = module_0.purge()
    list_0 = [var_0]
    module_1.IS_CHARACTER_JUNK(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    bytes_0 = b"\xd40\x1a`?i\x01\x9c"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    var_0.set_seqs(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    bool_0 = False
    bytes_0 = b"\xdf\xbe\xb12"
    module_2.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    list_0 = []
    module_0.escape(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    str_0 = "_"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    bool_0 = False
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    tuple_0 = ()
    bytes_0 = b"\xe2\xa2G\xd8 ,"
    module_0.sub(tuple_0, bytes_0, bytes_0, bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    differ_0 = module_1.Differ()
    module_1.IS_LINE_JUNK(differ_0)


@pytest.mark.xfail(strict=True)
def test_case_2745():
    int_0 = 1483
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2746():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    bool_0 = True
    html_diff_0 = module_1.HtmlDiff(bool_0, linejunk=bool_0)
    module_1.IS_LINE_JUNK(html_diff_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    none_type_0 = None
    tuple_0 = (none_type_0,)
    module_1.get_close_matches(none_type_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2750():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    float_0 = 820.3
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    complex_0 = -4605.8 + 1976.738j
    module_0.template(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    float_0 = -3190.98
    module_0.compile(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    int_0 = 482
    list_0 = [int_0, int_0]
    module_1.IS_CHARACTER_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_2757():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    bytes_0 = b"\xbd\x1dK\x0b\xbcK]\xf9At=\x1a\xa7"
    bool_0 = False
    var_0 = module_1.diff_bytes(bytes_0, bool_0, bool_0, tofile=bytes_0)
    module_4.nlargest(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    str_0 = "\tR+{O>hb"
    none_type_0 = None
    module_1.get_close_matches(str_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    bool_0 = False
    none_type_0 = None
    module_4.nlargest(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    var_0 = module_0.purge()
    module_0.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    int_0 = 962
    set_0 = {int_0}
    module_6.unique(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    bytes_0 = b"\x80\xcd"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = -161
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    bytes_0 = b"\xbd"
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, bytes_0, fromfiledate=none_type_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_2767():
    complex_0 = -1382 + 1256.771116j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2769():
    str_0 = "\tWcu\x0c'8p4{d]FEK"
    module_2.get_new_command(str_0, str_0)


def test_case_2770():
    bytes_0 = b"\x17\x9cVi"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    complex_0 = 4033 + 657.64j
    set_0 = {complex_0, complex_0}
    module_2.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    bytes_0 = b"\x9f\x97\xfc\x01\n\x12\xb3\x13\x00\xa7\xd42"
    module_2.get_new_command(bytes_0, bytes_0)


def test_case_2773():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    int_0 = -1332
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    bytes_0 = b"\xfcf7\xdcm\xadh\xafFb\xed\xc5\\\xce/\x84\xb4"
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bytes_0, bytes_0, tofile=bytes_0, fromfiledate=none_type_0
    )
    var_1 = module_1.restore(var_0, none_type_0)
    module_2.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    int_0 = -1336
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    exception_0 = module_5.Exception()
    module_0.match(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    int_0 = -1500
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0, flags=var_0)


def test_case_2783():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    bytes_0 = b"~\xd0d\x18\xd5\xa4\xd6\x1ah\x84{"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    int_0 = -885
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    str_0 = "m'\x0blS2SS,Y-#0]$z,f"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    bytes_0 = b"\xb9\xb1\xec\xc5t\x94\x1b\xc6\x92\xb8\xfc,"
    set_0 = {bytes_0, bytes_0}
    module_4.nlargest(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bytes_0 = b"\x92_hT\xec~\xfe\xa3\t\x10"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_2.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    bytes_0 = b"\x88\xde\xfe\xca\xad,@v\r\xd6\xc0"
    html_diff_0 = module_1.HtmlDiff(wrapcolumn=bytes_0)
    set_0 = {html_diff_0}
    module_2.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    int_0 = 2730
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    bytes_0 = b"]\xefY\xe2\t;\xa5\x1f!p\xa3"
    var_0 = module_1.context_diff(bytes_0, bytes_0)
    bool_0 = True
    tuple_0 = (var_0, bool_0, var_0)
    var_1 = module_1.unified_diff(
        var_0, var_0, bool_0, bytes_0, n=bool_0, lineterm=tuple_0
    )
    module_2.get_new_command(var_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    str_0 = "^u (N}7hJdk7}Ri.GR]`"
    none_type_0 = None
    module_0.subn(str_0, str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    bytes_0 = b"\xc1\x8c\xb9 n)\xe6\x08f\xd3"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2800():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    str_0 = "VU&+.^|\\`@`\t"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    int_0 = 859
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    none_type_0 = None
    html_diff_0 = module_1.HtmlDiff(charjunk=none_type_0)
    module_2.get_new_command(html_diff_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    set_0 = set()
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    module_0.Pattern()


def test_case_2808():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0,
            none_type_0,
            rename=none_type_0,
            defaults=none_type_0,
            module=none_type_0,
        )


@pytest.mark.xfail(strict=True)
def test_case_2809():
    bytes_0 = b'\xd6X\xb5\x1e\xdd\x86.\xf3r\xdc\xa8"\xf5z\xa3"]\xffv?'
    none_type_0 = None
    var_0 = module_1.unified_diff(bytes_0, none_type_0, fromfiledate=bytes_0)
    tuple_0 = (var_0, var_0)
    module_1.IS_LINE_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    int_0 = -148
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    set_0 = {var_0, var_0, var_0, var_0}
    module_2.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    complex_0 = 1425 - 29.7598j
    set_0 = {complex_0}
    module_1.IS_CHARACTER_JUNK(set_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    dict_0 = {}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    str_0 = "MbzaMx?naf"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    list_0 = [var_0]
    module_0.compile(list_0, none_type_0)


def test_case_2816():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.context_diff(bool_0, bool_0, bool_0, lineterm=none_type_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_2818():
    str_0 = "map-2lP"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    int_0 = 3101
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    int_0 = 2939
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    complex_0 = -765.887 - 1462.32j
    module_0.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    str_0 = "Bc]6x8}#qZ>%NC'm"
    bool_0 = False
    module_2.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    str_0 = "1-NF0Npl'18nZafJR0G"
    var_0 = module_0.template(str_0)
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    bytes_0 = b"*\xcag"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    int_0 = -5917
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    bytes_0 = b"\xd7'\x91\xdfn;\x1c\xb1\x80\n>\xfd\xb6K"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    error_0 = module_3.Error()
    str_0 = "p6"
    var_0 = module_1.IS_CHARACTER_JUNK(str_0)
    var_0.__len__(error_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    str_0 = "hT"
    float_0 = 454.56
    tuple_0 = (str_0, float_0)
    module_2.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    float_0 = -857.5
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2832():
    str_0 = "P6{8sr!c3qEUZf\t+.'"
    module_4.nlargest(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    int_0 = -808
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    dict_0 = {}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bytes_0 = b'\xdd`\xbf\xef\x98\x85N\xd3&`"\x8b\xb1\r@\x02\x85'
    module_0.match(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    str_0 = "8\\8c9XPEN9.ZYm"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    int_0 = -3533
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    int_0 = -793
    none_type_0 = None
    tuple_0 = (int_0,)
    var_0 = module_1.ndiff(tuple_0, int_0, tuple_0)
    var_0.set_seq1(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_2.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    int_0 = 296
    var_0 = module_1.restore(int_0, int_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_2845():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.fullmatch(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    bytes_0 = b"\x8d\xf0\x91u\xc4\x1ep\x17\xd7\xfb\xbc\x80d\xeac\tn\x1eX"
    module_1.IS_LINE_JUNK(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    base_exception_0 = module_5.BaseException()
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    int_0 = 2382
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bool_0 = True
    none_type_0 = None
    module_1.get_close_matches(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    list_0 = []
    var_0 = module_1.unified_diff(list_0, list_0, tofile=list_0, tofiledate=list_0)
    none_type_0 = None
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    bool_0 = True
    none_type_0 = None
    module_0.split(none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    bytes_0 = b"\xc5\x04u\xda\x00,\x84\xf9p\xf9B\xabn\xad\nunSrO"
    tuple_0 = (bytes_0,)
    module_2.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    bytes_0 = b"w\xc8\xa1\x80\xf9\xf4\xbf\xd2\xb8"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    int_0 = -456
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    str_0 = "]"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    set_0 = set()
    bool_0 = False
    module_2.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    bytes_0 = b"\x178\xd4Z\xff\xa3\xf7\x8b\xef\xfd\xf1"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    str_0 = "fB$}kPC"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


def test_case_2862():
    var_0 = module_0.purge()
    bool_0 = False
    with pytest.raises(ValueError):
        module_1.get_close_matches(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    set_0 = set()
    bool_0 = True
    bool_1 = True
    module_0.subn(set_0, bool_0, set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    str_0 = "(g"
    str_1 = "\n;sT"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0)


def test_case_2866():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    float_0 = 1118.14
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    tuple_0 = ()
    module_0.template(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    str_0 = "yYJiQ\tU$h"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    str_0 = "uv\x0cR/im#%RGHHYa:"
    list_0 = [str_0, str_0]
    module_2.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    str_0 = ">/Sj1_C:Ff"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    str_0 = "V-jtCE/9^"
    var_0 = module_0.subn(str_0, str_0, str_0)
    module_0.subn(str_0, str_0, str_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2878():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, n=none_type_0, lineterm=none_type_0
    )
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_2879():
    str_0 = "%\n{D-/uT$O]]<|pf"
    var_0 = module_1.IS_CHARACTER_JUNK(str_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    str_0 = "RL"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    bytes_0 = b";\xd1\xbd"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    int_0 = -697
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    bytes_0 = b"\xb6V\xc5\xfe\xc4\x9ec\x84"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    int_0 = -1726
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_2.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    float_0 = 128.9
    module_2.get_new_command(float_0, float_0)


def test_case_2888():
    none_type_0 = None
    complex_0 = 960.65 + 2069.45j
    var_0 = module_1.context_diff(
        complex_0, complex_0, tofiledate=complex_0, n=complex_0, lineterm=complex_0
    )
    var_1 = var_0.__dir__()
    with pytest.raises(TypeError):
        var_1.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    bool_0 = False
    var_0 = module_1.restore(bool_0, bool_0)
    module_2.match(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    str_0 = "+<s3mV`wCf3^q,I/\nH"
    list_0 = [str_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    int_0 = 2109
    module_4.nlargest(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    bytes_0 = b'\xbd"#L\xc1s8\x18\x1d\xff\x1f\xa2<\xe0\xd1'
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0, none_type_0)
    enum_dict_0 = module_6._EnumDict()
    module_0.finditer(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


def test_case_2896():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    complex_0 = -309.37 - 654.57j
    none_type_0 = None
    var_0 = module_1.context_diff(complex_0, none_type_0, none_type_0)
    none_type_1 = None
    var_1 = module_1.context_diff(none_type_1, none_type_1, none_type_1, none_type_1)
    var_1.get_grouped_opcodes(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    html_diff_0 = module_1.HtmlDiff()
    none_type_0 = None
    module_2.match(html_diff_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    int_0 = 3262
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    bool_0 = True
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_6.unique(list_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    str_0 = ">Z>\x0cuWR5c%`v.>wcj%"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    float_0 = 2235.3924
    module_0.findall(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    none_type_0 = None
    bool_0 = True
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    str_0 = "%F><\\AV\x0b;fv=SWz>.<"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    object_0 = module_5.object()
    list_0 = [object_0, object_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    set_0 = {regex_flag_0, regex_flag_0}
    none_type_0 = None
    module_0.split(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    float_0 = -1101.006157
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, none_type_0, bool_0)
    base_exception_0 = module_5.BaseException()
    auto_0 = module_6.auto()
    module_0.match(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    var_0 = module_0.purge()
    module_0.match(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(none_type_0)
    module_0.findall(sequence_matcher_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    bytes_0 = b"\xad\xff\x88\xc4\xf6\x1b\x1cFM"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    bytes_0 = b":\xb7\xb4\x1f[\xc9^\x0f0\xc1\xfe\xdf\xbb\xe5"
    var_0 = module_1.context_diff(bytes_0, bytes_0, fromfiledate=bytes_0, n=bytes_0)
    module_2.match(var_0, var_0)


def test_case_2916():
    bool_0 = True
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    bytes_0 = b""
    module_4.nlargest(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    str_0 = "6>\x0c6'o=2RCAz!l>o((Z{"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    str_0 = "^gVybzb`.|;?J\r"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = module_1.context_diff(
        none_type_0,
        sequence_matcher_0,
        tofile=sequence_matcher_0,
        fromfiledate=sequence_matcher_0,
    )
    str_0 = "K"
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    object_0 = module_5.object()
    none_type_0 = None
    module_2.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    set_0 = set()
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    differ_0 = module_1.Differ()
    module_0.findall(differ_0, differ_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    str_0 = '\x0ckn\\C\\2"Mq\nGeE]L'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    int_0 = -3414
    none_type_0 = None
    module_1.IS_LINE_JUNK(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    int_0 = 276
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    bytes_0 = b"Or\xe4\n\xef\x92\x1a;\xb4\xbc\x9f\x97\xafx\xeck"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    int_0 = -267
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    str_0 = "&e\\CK{T%xG%"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    none_type_0 = None
    module_6.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    str_0 = "c[q-`%&i!neTS)Tb2E"
    str_1 = "^2>Dco19SnfGBd5<,"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    module_6.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    float_0 = 2764.40853
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = -4207
    var_0 = module_1.restore(int_0, int_0)
    differ_0 = module_1.Differ()
    module_2.match(var_0, differ_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    complex_0 = 129.45 - 699.216j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    int_0 = -1641
    int_1 = -1290
    module_2.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    none_type_0 = None
    int_0 = -962
    module_0.findall(none_type_0, int_0, int_0)


def test_case_2946():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2947():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    str_0 = "+ZcT\r$EQ^<?("
    module_1.get_close_matches(str_0, str_0, cutoff=str_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    str_0 = "\x0bc*;Wo:"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    int_0 = 3598
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_2953():
    str_0 = "me)b$hpH;hd;~"
    module_0.split(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    none_type_0 = None
    set_0 = set()
    module_0.search(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    complex_0 = -1390.741 + 497.3854j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    int_0 = -151
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    bytes_0 = b"(\xff\xc0O\xddl\x86C\x06I?\xbd\x00(\xd7\x85"
    module_0.subn(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    float_0 = -400.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    int_0 = -6376
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    str_0 = "\x0cGr"
    none_type_0 = None
    module_0.sub(str_0, str_0, str_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    tuple_0 = ()
    html_diff_0 = module_1.HtmlDiff(wrapcolumn=tuple_0)
    none_type_0 = None
    error_0 = module_0.error(tuple_0, html_diff_0, none_type_0)
    module_2.match(error_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    int_0 = -2829
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    int_0 = -2263
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    none_type_0 = None
    float_0 = 2157.433
    module_0.finditer(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    bytes_0 = b"br\xaf\xbf\xc5 \x1b\n\x9c\xf3\x07\xfe"
    module_1.IS_LINE_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    int_0 = 2494
    dict_0 = {}
    var_0 = module_1.context_diff(int_0, dict_0, fromfiledate=int_0, tofiledate=dict_0)
    list_0 = [var_0, int_0]
    tuple_0 = (int_0, list_0, var_0)
    module_2.match(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, none_type_0, n=none_type_0)
    var_1 = module_1.unified_diff(
        var_0, var_0, tofile=none_type_0, lineterm=none_type_0
    )
    module_0.fullmatch(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    bytes_0 = b""
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    str_0 = "\n"
    list_0 = [str_0, str_0, str_0, str_0]
    module_2.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, fromfiledate=none_type_0, tofiledate=none_type_0
    )
    module_6.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    int_0 = 2056
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    bool_0 = True
    none_type_0 = None
    module_4.nlargest(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    str_0 = "GVa,f\nGi||(\ngRKZ"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    int_0 = 1376
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = 186
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    none_type_0 = None
    bytes_0 = b"i\x1dw\xea"
    var_0 = module_1.ndiff(bytes_0, bytes_0, charjunk=bytes_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    bool_0 = False
    error_0 = module_0.error(bool_0, bool_0)
    none_type_0 = None
    var_0 = module_1.ndiff(error_0, none_type_0)
    module_2.get_new_command(var_0, bool_0)


def test_case_2987():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    int_0 = 3343
    var_0 = module_1.ndiff(int_0, int_0)
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    none_type_0 = None
    bool_0 = True
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, fromfiledate=none_type_0, tofiledate=bool_0, n=bool_0
    )
    bool_1 = False
    var_1 = module_1.ndiff(bool_1, bool_1)
    module_2.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    int_0 = 2743
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    str_0 = "6{|<pw]"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    str_0 = "bDPWqQ-Kw<"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    base_exception_0 = module_5.BaseException()
    module_0.match(base_exception_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
        n=none_type_0,
    )
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    int_0 = 1474
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    tuple_0 = ()
    module_0.search(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bytes_0 = b"O~\x99E\x82\xa0q\xdc\x84\xa9"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    float_0 = 983.123
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.subn(list_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    str_0 = "Mc:e=kTM!H\\~}W_-Q#]H"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    str_0 = "1Fkunclt]7"
    none_type_0 = None
    module_0.sub(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    str_0 = "\t_&tw/d"
    bool_0 = False
    module_2.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    int_0 = -1838
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    int_0 = 2202
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    str_0 = "i0^r%O?NAqu*)("
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    base_exception_0 = module_5.BaseException()
    none_type_0 = None
    module_2.get_new_command(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    list_0 = []
    module_1.IS_CHARACTER_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    float_0 = 1389.944108
    bytes_0 = b'"2\xf3\x8aU\n\x0f'
    module_2.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    str_0 = "<%T\n-A.t(f@\tRT=!N0l"
    var_0 = module_1.IS_CHARACTER_JUNK(str_0)
    module_2.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    int_0 = 1338
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3019():
    bytes_0 = b""
    var_0 = module_0.escape(bytes_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3020():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__len__(none_type_0)


def test_case_3021():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = sequence_matcher_0.get_matching_blocks()
    with pytest.raises(TypeError):
        var_0.__new__(set_0, none_type_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_2.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


def test_case_3025():
    none_type_0 = None
    bool_0 = False
    none_type_1 = None
    var_0 = module_1.diff_bytes(bool_0, bool_0, none_type_1, fromfiledate=bool_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    str_0 = "j'3w%"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    int_0 = 2660
    var_0 = module_1.context_diff(int_0, int_0)
    set_0 = {int_0, var_0, int_0, var_0}
    module_0.finditer(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    bool_0 = True
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    error_0 = module_3.Error()
    var_0 = module_0.purge()
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    int_0 = -122
    module_0.fullmatch(int_0, int_0)


def test_case_3032():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0, none_type_0, rename=none_type_0, defaults=none_type_0
        )


@pytest.mark.xfail(strict=True)
def test_case_3033():
    tuple_0 = ()
    var_0 = module_1.context_diff(
        tuple_0, tuple_0, tofile=tuple_0, fromfiledate=tuple_0
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    float_0 = -4795.5
    var_0 = module_1.context_diff(float_0, float_0, float_0, n=float_0)
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    bytes_0 = b"x\x03p#I\x00\x05"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    str_0 = "8braGfrD_IXN5"
    var_0 = module_1.ndiff(str_0, str_0)
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    str_0 = ")TuirUJ"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    complex_0 = -1612.987 + 3644.773051j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    bool_0 = True
    var_0 = module_0.purge()
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    int_0 = -3963
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    int_0 = -461
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0, none_type_0)
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    var_0 = module_0.purge()
    float_0 = 1482.1
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_1.IS_LINE_JUNK(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    str_0 = "_SMb7c|7.M`f+&:\x0cNa"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    int_0 = -1122
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    str_0 = "P6"
    none_type_0 = None
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    bool_0 = True
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    bytes_0 = b"f,\xc8\x8c\x0e\xc2\x14'Fo\xfa\xff\x8d\x89D\xd2"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    complex_0 = -1468 - 724.873j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    var_0 = module_0.purge()
    module_6.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    complex_0 = 438.25828 + 2177j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3058():
    str_0 = "BKBrPF(!Z\x0c (nVFN#|G"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    str_0 = "U((m"
    list_0 = [str_0, str_0]
    dict_0 = {}
    module_5.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    str_0 = '@!S"0|{,'
    var_0 = module_0.template(str_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    bytes_0 = b"\x93\x11z"
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = sequence_matcher_0.quick_ratio()
    var_0.__setattr__(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    float_0 = 1468.80959
    none_type_0 = None
    module_0.sub(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    dict_0 = {}
    module_0.subn(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    float_0 = -1265.12
    module_0.match(float_0, float_0)


def test_case_3069():
    none_type_0 = None
    bool_0 = False
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
        lineterm=bool_0,
    )
    var_1 = module_1.diff_bytes(var_0, bool_0, var_0, tofile=var_0, n=bool_0)
    with pytest.raises(TypeError):
        module_7.namedtuple(var_0, var_0, defaults=var_1)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    int_0 = -1910
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    complex_0 = -3500.498413 - 393.720339j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    str_0 = "?.H,(KBZPvX-G"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    complex_0 = -810.33 + 24.7793j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    int_0 = 466
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    int_0 = 563
    var_0 = module_1.context_diff(int_0, int_0, int_0, tofiledate=int_0)
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_3077():
    str_0 = "l3Ug'4x+dEIDI'}Hn6~"
    module_1.get_close_matches(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    tuple_0 = ()
    none_type_0 = None
    set_0 = set()
    var_0 = module_1.unified_diff(set_0, set_0, set_0, fromfiledate=set_0)
    var_0.__delattr__(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    bool_0 = False
    var_0 = module_1.diff_bytes(bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    float_0 = 827.115888
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    int_0 = 3159
    module_1.IS_CHARACTER_JUNK(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    complex_0 = -3309.44 - 542.5799j
    none_type_0 = None
    module_1.get_close_matches(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    float_0 = 377.467771
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    none_type_0 = None
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    bytes_0 = b"\xaaN\x95\xd4\xd8\xae\x80\x06yI"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    tuple_0 = ()
    none_type_0 = None
    module_0.subn(tuple_0, tuple_0, tuple_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    bytes_0 = b"WOH.\x9a$@\xbd\x1a\x9d(\xb5x"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    str_0 = "E.}@"
    var_0 = module_1.ndiff(str_0, str_0)
    module_2.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    float_0 = -995.912419
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    int_0 = 2548
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    int_0 = 2972
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


def test_case_3095():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3096():
    bytes_0 = b"\x10^"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3098():
    int_0 = 656
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    none_type_0 = None
    module_0.escape(none_type_0)


def test_case_3100():
    dict_0 = {}
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(dict_0, none_type_0, defaults=dict_0, module=dict_0)


def test_case_3101():
    list_0 = []
    var_0 = module_1.get_close_matches(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    int_0 = 1516
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    int_0 = 2433
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_2.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    int_0 = -1271
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    str_0 = "ME1th]\\7G>byAVMG"
    none_type_0 = None
    var_0 = module_1.ndiff(str_0, none_type_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3107():
    bytes_0 = b"\xc0\xae\x83\x95B"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    exception_0 = module_5.Exception()
    int_0 = 912
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bytes_0 = b"\x97'\xae"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_6.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    bytes_0 = b"\xc9l\x05\x10n1"
    var_0 = module_1.restore(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3115():
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    bool_0 = False
    error_0 = module_0.error(bool_0)
    module_2.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    str_0 = "+Xa"
    bool_0 = True
    var_0 = module_1.ndiff(bool_0, bool_0)
    var_0.make_file(str_0, str_0, charset=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    int_0 = -3565
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    dict_0 = {}
    var_0 = module_1.get_close_matches(dict_0, dict_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(a=none_type_0)
    none_type_1 = None
    var_0 = module_1.ndiff(none_type_1, none_type_1)
    var_0.get_grouped_opcodes(sequence_matcher_0)


def test_case_3124():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    bytes_0 = b"1\xf9\xe7\xf7\xf7\xf5\x81"
    module_1.get_close_matches(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    dict_0 = {}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    str_0 = "0$5"
    module_0.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    str_0 = "x?=TiPg%YO`{(y#x"
    none_type_0 = None
    module_1.get_close_matches(str_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    float_0 = 3118.95588
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    bytes_0 = b"\xa5\xa3J\x82#E\xfa\x1eK\xe7\xd5Q\xc8\xd01"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    str_0 = "qP)P!Z3]P\x0b"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0, cutoff=bool_0)


def test_case_3140():
    set_0 = set()
    with pytest.raises(ValueError):
        module_7.namedtuple(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3141():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        fromfiledate=none_type_0,
        lineterm=none_type_0,
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    float_0 = 805.82
    module_0.search(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    bool_0 = False
    module_0.match(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    none_type_0 = None
    bool_0 = False
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, fromfiledate=bool_0, tofiledate=bool_0, n=none_type_0
    )
    tuple_0 = (var_0, bool_0)
    module_2.get_new_command(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    str_0 = "5u8T\x0bZ\ni"
    module_0.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    int_0 = 1122
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    str_0 = "7"
    module_0.subn(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0)
    none_type_1 = None
    var_1 = module_0.purge()
    var_1.scan(none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.restore(none_type_1, none_type_1)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    var_0 = module_0.purge()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_3151():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    str_0 = "@.PyQR[#n8>'W6gW%w"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    tuple_0 = ()
    module_2.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    int_0 = -1855
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    bytes_0 = b"\x1a8\x1aEe\x1c\xbd\x13\\\xce"
    var_0 = module_0.template(bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3156():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    str_0 = 'r>pr{ug:k0%@"'
    var_0 = module_0.finditer(str_0, str_0)
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    tuple_0 = ()
    none_type_0 = None
    module_0.sub(tuple_0, tuple_0, tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    complex_0 = -1532.2 + 4717.5j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    int_0 = -987
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    dict_0 = {}
    module_1.IS_CHARACTER_JUNK(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    str_0 = "?^[,xl\rrg"
    module_1.SequenceMatcher(str_0, b=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    float_0 = -1861.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    set_0 = set()
    none_type_0 = None
    module_0.sub(set_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    none_type_0 = None
    bool_0 = False
    module_1.get_close_matches(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_2.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    none_type_0 = None
    module_5.BaseException(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    bytes_0 = b"\xa1[&\x15\x0c/\xcb+\x86\x14L(\x81\x8b\x9f\x01\x16\x94"
    bool_0 = True
    module_2.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    var_0 = module_0.purge()
    bytes_0 = b"\xa0\xba\x05L=\x96"
    module_2.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    bytes_0 = b"\xea\xde\xe7\xeeB\xc4\xe0XN!"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_3182():
    int_0 = 1550
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    complex_0 = -5425.7 + 2955.784j
    none_type_0 = None
    module_0.subn(complex_0, none_type_0, none_type_0)


def test_case_3184():
    bytes_0 = b"\x07\xd1\xb2\x95\xb4F\x17\xfdJ\xf9\xc8\x0b"
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(b=bytes_0)
    var_0 = sequence_matcher_0.get_opcodes()
    with pytest.raises(TypeError):
        var_0.__setitem__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    bytes_0 = b"\x9f\n\xcf\xbc\x19\x91l"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    bytes_0 = b"\x1aF\xa9\xe6\xa1\xc5\x13\xab\r\xdc\x8bC\x91"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    int_0 = -827
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    exception_0 = module_5.Exception()
    module_0.sub(exception_0, exception_0, exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    int_0 = 728
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    none_type_0 = None
    html_diff_0 = module_1.HtmlDiff(charjunk=none_type_0)
    var_0 = module_1.context_diff(html_diff_0, none_type_0)
    module_2.match(var_0, html_diff_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    list_0 = []
    sequence_matcher_0 = module_1.SequenceMatcher(list_0, autojunk=list_0)
    module_6.unique(sequence_matcher_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    str_0 = "&$"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    int_0 = 2495
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0)
    module_0.fullmatch(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    enum_dict_0 = module_6._EnumDict()
    module_2.get_new_command(enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    var_0 = module_0.purge()
    list_0 = []
    module_0.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    none_type_0 = None
    str_0 = '&F{XcONg\\*"p\t'
    var_0 = module_1.context_diff(str_0, str_0, tofile=str_0)
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3202():
    complex_0 = 177.302 - 5236.65063j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_0.escape(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    error_0 = module_3.Error()
    none_type_0 = None
    module_2.get_new_command(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    int_0 = 1940
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    bytes_0 = b"\x15\\\xa3\x1e\xa6\xf4\x8c/\x17\x9b\xedU"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    complex_0 = -152.562 - 2816.110992j
    module_1.IS_CHARACTER_JUNK(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    var_0 = module_0.purge()
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_3209():
    str_0 = "L}zxuK0KHIqjuM@"
    set_0 = set()
    var_0 = module_1.unified_diff(
        str_0, str_0, str_0, tofiledate=str_0, n=str_0, lineterm=set_0
    )
    var_0.__delattr__(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0)
    var_0.find_longest_match()


@pytest.mark.xfail(strict=True)
def test_case_3211():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    int_0 = 3593
    var_0 = module_1.unified_diff(int_0, int_0, tofile=int_0, fromfiledate=int_0)
    module_0.compile(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bytes_0 = b"\xea\xd3\x88\x05\xc2\x07\x07\xe9"
    tuple_0 = (bytes_0,)
    module_1.get_close_matches(tuple_0, tuple_0, cutoff=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    complex_0 = -3449.7 - 4084.93j
    bool_0 = True
    module_0.finditer(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    bytes_0 = b"\x0b\x0f\xe3l\n\xf1\x9f\xa2S<g\xdf"
    module_1.get_close_matches(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    int_0 = 757
    none_type_0 = None
    module_1.get_close_matches(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    bool_0 = False
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = module_1.restore(sequence_matcher_0, sequence_matcher_0)
    var_0.find_longest_match(blo=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    var_0 = module_0.purge()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_3219():
    complex_0 = -1738.1 - 672.659j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


def test_case_3221():
    var_0 = module_0.purge()
    with pytest.raises(TypeError):
        var_0.__new__(var_0, var_0, var_0, var_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    str_0 = "X|<Z#\nRIm0~`B"
    none_type_0 = None
    var_0 = module_1.diff_bytes(str_0, none_type_0, none_type_0, tofiledate=none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    int_0 = 2157
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    var_0 = module_0.purge()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_3227():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, none_type_0, tofiledate=none_type_0, n=none_type_0
    )
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    str_0 = "#E_}%j\x0c;rX:|I.ZTXd:"
    none_type_0 = None
    module_0.findall(none_type_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    str_0 = ";!:yL gaMFz%"
    var_0 = module_1.IS_CHARACTER_JUNK(str_0, str_0)
    str_1 = "@B<"
    module_0.split(str_0, str_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    complex_0 = 868.8 - 137.32805j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0, n=none_type_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    bytes_0 = b"\xf1$\xffl\xfe\xe6\x8d\x8c\xd4\xce6\x05"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    float_0 = 546.6
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    str_0 = "ES^}gbEmy1\x0c^+ aDD("
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    str_0 = "p]\n3,lsa\\t'}_dX\"{"
    var_0 = module_0.fullmatch(str_0, str_0)
    tuple_0 = (var_0, var_0)
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    bytes_0 = b"\xbd\xb5\xf2P\xd4s\xf8\x1b\x13D\x8b"
    var_0 = module_1.restore(bytes_0, bytes_0)
    module_2.match(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    int_0 = -2876
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    int_0 = -5948
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_2.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    str_0 = "gENQ30[m5ov!"
    set_0 = {str_0}
    module_2.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    int_0 = 1191
    none_type_0 = None
    module_0.subn(int_0, int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    int_0 = -1229
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    float_0 = 1514.0
    bool_0 = True
    module_2.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    int_0 = 2562
    var_0 = module_1.context_diff(int_0, int_0, fromfiledate=int_0, lineterm=int_0)
    var_0.find_longest_match(blo=int_0, bhi=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    int_0 = -3837
    none_type_0 = None
    module_0.match(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    float_0 = -1935.6296
    none_type_0 = None
    module_0.template(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.context_diff(bool_0, none_type_0)
    module_2.match(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    float_0 = 688.6
    str_0 = "w87S{1*r|fZCew3<"
    var_0 = module_1.ndiff(str_0, str_0)
    var_0.find_longest_match(blo=float_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    var_0 = module_1.context_diff(list_0, none_type_0, tofile=none_type_0)
    tuple_0 = (bool_0, list_0, var_0, bool_0)
    module_2.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    int_0 = 461
    list_0 = [int_0]
    module_1.IS_CHARACTER_JUNK(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    float_0 = -1187.4
    module_0.split(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3256():
    int_0 = -327
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    str_0 = '][5\tF"X)oqv/LF'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    float_0 = 1988.885278
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    str_0 = "h^6.\x0cx_sqYGh1"
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, n=none_type_0, lineterm=none_type_0
    )
    var_1 = module_1.unified_diff(var_0, var_0)
    var_1.__iter__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    bytes_0 = b"\x1e\x10\xf3\xb2\xa6\xb8\x1a`\xb3\xd6"
    module_1.get_close_matches(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, none_type_0)
    none_type_1 = None
    module_2.match(none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    float_0 = 1682.503
    module_0.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    tuple_0 = ()
    module_1.IS_LINE_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    str_0 = "g3ytOltO;bbT}fYE"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    float_0 = -2712.96
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    bytes_0 = b"\x98S"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_2.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    dict_0 = {}
    auto_0 = module_6.auto(**dict_0)
    module_2.get_new_command(auto_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    float_0 = 830.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    str_0 = "/hf"
    error_0 = module_0.error(str_0)
    module_0.fullmatch(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    int_0 = -3665
    list_0 = [int_0, int_0]
    none_type_0 = None
    var_0 = module_1.context_diff(list_0, int_0, tofiledate=int_0, n=none_type_0)
    error_0 = module_0.error(var_0)
    module_2.get_new_command(error_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    int_0 = -127
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    float_0 = 2748.21588
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    str_0 = "c"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    var_0 = module_1.context_diff(set_0, none_type_0, lineterm=str_0)
    module_2.get_new_command(var_0, str_0)


def test_case_3279():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    auto_0 = module_6.auto()
    module_0.compile(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    none_type_0 = None
    list_0 = []
    module_2.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    bool_0 = True
    module_0.subn(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    bool_0 = False
    str_0 = "Y&r@Sgzw&8,c{ggzlC%E"
    var_0 = module_1.IS_LINE_JUNK(str_0)
    var_0.make_file(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    int_0 = 1196
    module_1.IS_LINE_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    bytes_0 = b"^\x92\x18\xde\xdf"
    set_0 = {bytes_0, bytes_0}
    module_0.findall(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    bytes_0 = b"l1\xe0\xe5\xc6\xccc?\xea\xa0\xd0'{\x14\xa9nk\xdfne"
    none_type_0 = None
    module_0.sub(bytes_0, bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    str_0 = "ZCBe"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    str_0 = "WY23O\t\r|99ro"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    float_0 = -335.0
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    none_type_0 = None
    str_0 = ""
    module_2.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    none_type_0 = None
    html_diff_0 = module_1.HtmlDiff(linejunk=none_type_0, charjunk=none_type_0)
    module_0.match(html_diff_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    int_0 = -1187
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    str_0 = "}cUXktuPbyCY"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    int_0 = 487
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    bool_0 = False
    none_type_0 = None
    differ_0 = module_1.Differ()
    var_0 = differ_0.compare(bool_0, none_type_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    int_0 = 2453
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    int_0 = -7
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    bytes_0 = b"#P\xde\xd7\x08gjvl+m\xbb\xf7"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3306():
    float_0 = -2433.0
    module_0.fullmatch(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3307():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__iter__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    str_0 = "Ec('.*bh\tmZ\tzTjpr"
    var_0 = module_1.unified_diff(str_0, str_0)
    module_6.EnumMeta(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    int_0 = 401
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_4.nlargest(list_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    bytes_0 = b"\xb0\x94\xbb\xbf\xd4\xd3\xce\xe0\x17\x01"
    none_type_0 = None
    module_1.get_close_matches(bytes_0, bytes_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3312():
    int_0 = -702
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.restore(none_type_1, none_type_1)
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    dict_0 = {}
    var_0 = module_1.diff_bytes(dict_0, dict_0, dict_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    none_type_0 = None
    int_0 = 1213
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        fromfiledate=int_0,
        n=none_type_0,
    )
    html_diff_0 = module_1.HtmlDiff(wrapcolumn=var_0, linejunk=none_type_0)
    module_2.match(html_diff_0, html_diff_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    list_0 = []
    none_type_0 = None
    module_6.auto(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    int_0 = 3338
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    bytes_0 = b"\xfe\xd6\x8d\xac\xff\xd5[rN\xae\x9br\x8f\x8e\x87\xb6\x84N\xea\xe1"
    module_0.finditer(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    str_0 = "RGCx]@K"
    str_1 = ";%v%>kZ"
    str_2 = "1SI}:"
    str_3 = "ZUpFZ:-{CKa"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_3: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    complex_0 = 738.854 - 2286j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    none_type_0 = None
    var_0 = module_0.purge()
    module_0.sub(none_type_0, none_type_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    float_0 = 1515.77764
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {}
    module_6.auto(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


def test_case_3329():
    dict_0 = {}
    with pytest.raises(ValueError):
        module_7.namedtuple(dict_0, dict_0, rename=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    module_0.sub(var_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    str_0 = ' 5b^-Glq"eBTEcy '
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    bytes_0 = b"\xb7\x97@P\xfc\xf4\x84\xf8\xd2\xa3\xf8\xee\xd9\xa6=\x81RH"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bytes_0 = b"\xfe\xcd#\x80\x8d\xe0"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    int_0 = 3476
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    var_0 = module_0.purge()
    var_1 = module_0.purge()
    var_1.__len__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    float_0 = 244.02
    module_0.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    base_exception_0 = module_5.BaseException()
    none_type_0 = None
    module_0.search(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    int_0 = 1572
    bool_0 = False
    module_2.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    str_0 = "#,wMKd7.<"
    var_0 = module_0.finditer(str_0, str_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    str_0 = 'T"0a{\'V>/,%)"|$RT3'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    int_0 = -1620
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    bytes_0 = b"\xea6?\xedA&\x1d\x04C\x02rn"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    int_0 = -926
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    int_0 = 498
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    float_0 = 541.59
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    float_0 = 428.10343
    none_type_0 = None
    var_0 = module_1.unified_diff(
        float_0, float_0, float_0, n=float_0, lineterm=none_type_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    bytes_0 = b"\xd8\x83\xa37\x12X\xa6m\xf0AY\x8c)\x1aw"
    none_type_0 = None
    module_0.subn(bytes_0, none_type_0, none_type_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    str_0 = "H#!&g{7"
    dict_0 = {str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    str_0 = "JD"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    int_0 = 1386
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    bytes_0 = b"\xdeu\xcfV\x01_}@\xb6\xad\x04\xb5"
    var_0 = module_0.split(bytes_0, bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    error_0 = module_3.Error()
    bytes_0 = b"\x00n\xed\xfc\x14\xdd \xc4\xdc\xf0F2f\x87Nxa"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.scan(error_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bytes_0 = b"\x9d~.\x9a\x89\xe4x$[v\x14\xd0l\x8e\xdd\x9f\xe9"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    var_0 = module_0.purge()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_3360():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, tofiledate=none_type_0)
    var_1 = module_1.context_diff(var_0, none_type_0, n=none_type_0)
    var_2 = var_1.__dir__()
    module_2.get_new_command(var_2, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(a=none_type_0)
    none_type_1 = None
    var_0 = module_1.diff_bytes(
        none_type_1, none_type_1, none_type_1, tofile=none_type_1
    )
    var_0.__call__(
        sequence_matcher_0, sequence_matcher_0, sequence_matcher_0, type=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_3362():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    str_0 = "Tr(@;4ejr~Zyz&w!;"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    bytes_0 = b"\x7f\xb4\xefw\xc9\x9eH\xb3\xf8*D\xfe\xad\xe3\xe4}w\xbc\x8a"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    float_0 = -974.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3367():
    float_0 = -1716.69
    module_1.IS_CHARACTER_JUNK(float_0)


def test_case_3368():
    bytes_0 = b"\xef\xb8\xc27\xc7\xcb\x9f\xce\xa69~\xafs\xec\xa0"
    var_0 = module_0.search(bytes_0, bytes_0)
    complex_0 = -2490.8974 + 58.5765j
    none_type_0 = None
    var_1 = module_1.restore(none_type_0, none_type_0)
    int_0 = -501
    int_1 = 3167
    var_2 = module_1.unified_diff(int_0, int_0, fromfiledate=int_1, lineterm=int_1)
    with pytest.raises(TypeError):
        var_2.__new__(complex_0, complex_0, var_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    float_0 = 1143.425
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    str_0 = "Yg9Nh@b+@o_!Bq+?"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    str_0 = "_P?[]!"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    str_0 = "V\t"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    int_0 = 651
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    int_0 = -1243
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    tuple_0 = ()
    module_0.fullmatch(tuple_0, tuple_0)


def test_case_3376():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3377():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.set_seqs(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    set_0 = set()
    none_type_0 = None
    module_0.subn(set_0, set_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    str_0 = "]cg|w)]&gqdz:j"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_5.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    bool_0 = False
    var_0 = module_1.diff_bytes(bool_0, bool_0, bool_0, bool_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    str_0 = "N(D`Ivf?W1R"
    none_type_0 = None
    module_0.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    complex_0 = 570.3568 + 321.32j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    bytes_0 = b"\xccr\xfb\xc1a"
    module_1.IS_LINE_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    bool_0 = False
    var_0 = module_1.restore(bool_0, bool_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    str_0 = ""
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    dict_0 = {}
    module_0.fullmatch(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bytes_0 = b"\xe7\x07D[b1\xe1lN9\xc5\xf9M\x0b\x0bR\x9e\x8e\x11"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    int_0 = -46
    module_1.IS_LINE_JUNK(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    str_0 = "]=l G"
    int_0 = -830
    tuple_0 = (str_0, int_0)
    module_2.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    str_0 = "7D!)JzMttf!|-\\;7+~"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    str_0 = "Ej|@n2&"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    bytes_0 = b"fX1\tZ\xf9@<\xf7\xc2\x88\x876\xb9;\x1c"
    module_4.nlargest(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    set_0 = set()
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.search(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    set_0 = set()
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    bytes_0 = b"\x0e\x86\xe4\xcb\xbd\x19\x03\x07\x99\xcd"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    int_0 = 961
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    int_0 = -1615
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    str_0 = "luEaJ"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    int_0 = -904
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    differ_0 = module_1.Differ()
    html_diff_0 = module_1.HtmlDiff(differ_0)
    none_type_0 = None
    module_2.match(html_diff_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    int_0 = 3177
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    int_0 = -615
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    int_0 = -1759
    none_type_0 = None
    module_0.subn(int_0, int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


def test_case_3417():
    pass


def test_case_3418():
    str_0 = "M5Q\"RS`B'a4Jf"
    with pytest.raises(ValueError):
        module_7.namedtuple(str_0, str_0, rename=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = ".>u^Q)Wcex;P1"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    var_0 = module_0.purge()
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_3421():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.subn(none_type_0, none_type_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    var_0 = module_0.purge()
    var_0.__call__(dict_0, dict_0, qualname=dict_0, start=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


def test_case_3425():
    bytes_0 = b"\x8dI\xd4G-\xd7D\x1f\xd98\xd4"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0, rename=bytes_0, module=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    none_type_0 = None
    str_0 = "D;4T"
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    int_0 = 186
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    float_0 = 89.16595
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    str_0 = "d\x0c>?Q@sk7@&Q M_"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    auto_0 = module_6.auto()
    var_0 = module_1.restore(auto_0, auto_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    str_0 = "\\rCnNRb"
    none_type_0 = None
    module_0.subn(str_0, none_type_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bytes_0 = b"\x86\x87\x8c"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    str_0 = "[J*35\\O\x0bh`a|)\n>Rwx "
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3439():
    bool_0 = False
    module_0.compile(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    str_0 = "Q?"
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        str_0, str_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    float_0 = -2856.039
    var_1 = module_1.context_diff(float_0, float_0)
    tuple_0 = ()
    module_6.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    complex_0 = 1316.48 - 838j
    set_0 = {complex_0, complex_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_2.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    bytes_0 = b"4\xca%.\x16\xed\x05\xfa\x88\xf8\xe4>\x84y"
    module_1.IS_LINE_JUNK(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3445():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3446():
    str_0 = "p|qIKE3G\rlal p%c!Z1"
    set_0 = {str_0, str_0}
    tuple_0 = (set_0,)
    module_4.nlargest(tuple_0, tuple_0)


def test_case_3447():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3448():
    int_0 = -1437
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_2.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    set_0 = set()
    error_0 = module_0.error(set_0, set_0)
    module_2.get_new_command(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    bool_0 = True
    var_0 = module_1.restore(bool_0, bool_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    float_0 = 855.6
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    var_0 = module_0.purge()
    none_type_0 = None
    var_1 = module_1.restore(none_type_0, none_type_0)
    var_1.__contains__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    str_0 = "NETN]hr\n1e"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    bytes_0 = b"M\x10.\xf74>\x01\x93\xd7U\xfa\xc5\xd4\xbfz"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    bytes_0 = b"l"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    str_0 = "QV>p0GPotISY="
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    bool_0 = False
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    bool_0 = True
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    str_0 = "$"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    none_type_0 = None
    int_0 = -361
    module_2.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    str_0 = "DJADs;/"
    var_0 = module_0.finditer(str_0, str_0)
    var_1 = module_1.ndiff(var_0, var_0, charjunk=str_0)
    dict_0 = {str_0: var_0}
    module_2.get_new_command(var_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    none_type_0 = None
    bool_0 = True
    module_0.sub(none_type_0, none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bytes_0 = b"="
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.context_diff(none_type_1, bytes_0, bytes_0, tofiledate=none_type_1)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    str_0 = "?/HL!)zG]uGj\n\r si3V"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    float_0 = -3192.09
    module_6.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    float_0 = 9.18
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    var_0 = module_0.purge()
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_3474():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    var_0.__call__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3476():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    int_0 = -1110
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    float_0 = -2636.33257
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0)
    bool_0 = True
    none_type_1 = None
    module_0.split(bool_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_3481():
    set_0 = set()
    none_type_0 = None
    module_0.split(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3482():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.unified_diff(none_type_1, none_type_1)
    var_0.compare(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    str_0 = "|@z[Pfj4Z?+Dc)ySj"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    str_0 = "=T@>7"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bytes_0 = b"\xe8\x97\xeeM"
    bytes_1 = b";\xb4\xe3]c\xfbe+g\xaf\x01"
    var_0 = module_1.context_diff(bytes_1, bytes_1, n=bytes_1)
    var_0.scan(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3487():
    int_0 = -150
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    none_type_0 = None
    int_0 = 2165
    module_2.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    int_0 = 2534
    set_0 = {int_0, int_0, int_0}
    bool_0 = False
    str_0 = "+ryHn\nU?Y"
    tuple_0 = (set_0, bool_0, str_0)
    module_2.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    str_0 = "f0f*j|tIb("
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0, none_type_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    str_0 = ";\r\\TU:rOCf>V"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    var_0 = module_0.purge()
    var_1 = module_1.unified_diff(var_0, var_0)
    module_0.findall(var_0, var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3497():
    regex_flag_0 = module_0.RegexFlag.VERBOSE
    none_type_0 = None
    module_2.match(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


def test_case_3499():
    int_0 = -1012
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    int_0 = -816
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    exception_0 = module_5.Exception()
    module_2.get_new_command(exception_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3503():
    str_0 = "wpzp%}zUF%AI:*"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    str_0 = ".\x0bQ)Y\te"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    bytes_0 = b"\xd1"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    differ_0 = module_1.Differ()
    none_type_0 = None
    module_2.match(differ_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    bytes_0 = b'{"\x15\x8a\xd3\x1d\x01\xd4\xe9\x18\x83\xd6\xc08\xcb'
    tuple_0 = (bytes_0,)
    module_2.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    float_0 = 80.436
    module_1.IS_LINE_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    int_0 = 2912
    module_0.split(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    list_0 = []
    var_0 = module_1.restore(list_0, list_0)
    module_2.get_new_command(var_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    int_0 = -1372
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    int_0 = -673
    tuple_0 = (int_0,)
    none_type_0 = None
    module_2.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    bool_0 = True
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    bytes_0 = b"_\x1d_\xd1=\x92\xdc\xd9\x8b6\x82\x19\xb1\xd7{\xcc\x90"
    none_type_0 = None
    module_0.match(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    int_0 = -3804
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    str_0 = "r4M[3"
    dict_0 = {str_0: str_0}
    module_6.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    bytes_0 = b"\x82\xf2\xccb!{"
    module_1.IS_CHARACTER_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    var_0 = module_0.purge()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_3522():
    bytes_0 = b"\x94\x98\x88\xa92\xd1\xb2U\x7f\xcdc"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    int_0 = -596
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    float_0 = 464.28492
    none_type_0 = None
    module_0.search(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    dict_0 = {}
    module_6.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    int_0 = 3564
    module_0.finditer(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_3530():
    float_0 = -16.980375
    var_0 = module_1.restore(float_0, float_0)
    module_0.subn(float_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    bool_0 = False
    bool_1 = False
    module_2.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    str_0 = "gy\nfVRi8-"
    var_0 = module_1.unified_diff(str_0, str_0)
    var_0.make_file(str_0, str_0, charset=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    str_0 = "Y1J|ro^\\ "
    dict_0 = {str_0: str_0}
    module_5.Exception(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    auto_0 = module_6.auto()
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    float_0 = -2237.0
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    bool_0 = True
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    str_0 = "+R3Ju@.hWTX)[\x0c2y&%=5"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    complex_0 = -630.2575 + 1264.09j
    none_type_0 = None
    module_2.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    int_0 = -4155
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    complex_0 = -600.9 - 1652.7j
    bytes_0 = b"\xe3\\G\xf0\xd1\xae\xcb\n\xae\xf6\xe5ZJ\xe7\x0bVo\xb6"
    bool_0 = False
    var_0 = module_1.ndiff(bytes_0, bytes_0, bool_0)
    var_0.set_seqs(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    str_0 = "'"
    none_type_0 = None
    module_1.get_close_matches(str_0, str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    float_0 = 2969.2841
    none_type_0 = None
    module_0.finditer(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    bytes_0 = b"T\x0c\xb1\x1d_\x86\xf0u:\xda\xads\xc1O\x97\x8a\xa2\x7fQ"
    module_4.nlargest(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    bytes_0 = b"\xe92\x1bv"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    int_0 = 1321
    set_0 = {int_0, int_0, int_0, int_0}
    var_0 = module_1.unified_diff(set_0, set_0, fromfiledate=set_0, tofiledate=int_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_3548():
    int_0 = -146
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    var_0 = module_0.purge()
    int_0 = 252
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    bool_0 = False
    str_0 = "i{{89EMW!Ni= yH!H"
    var_0 = module_1.diff_bytes(bool_0, bool_0, bool_0, tofile=str_0, tofiledate=str_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    int_0 = 625
    list_0 = [int_0, int_0, int_0]
    module_2.match(list_0, int_0)


def test_case_3552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3553():
    int_0 = -2483
    module_4.nlargest(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = -2040
    module_2.match(int_0, int_0)


def test_case_3555():
    int_0 = -1813
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    with pytest.raises(ValueError):
        module_7.namedtuple(int_0, list_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    bytes_0 = b"\xf4}\xce\xa8I\x12\xa0\x7f8\x99\xcd\xac"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    float_0 = 1840.0
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    int_0 = 732
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    bytes_0 = b"\xed!"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    bytes_0 = b"\xc6\x9a\xb9\xca[h\xca\x12\x8b\xd8\xf1\xe8\xe23\x1d\xcf\x97"
    module_0.split(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    bytes_0 = b"\x12\x90\xcc\xa3\xc3\x08\xa4\x19}\xa6.\xea\xce2\xc1y\x89\x97"
    none_type_0 = None
    module_2.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0, n=none_type_0
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        tofiledate=none_type_0,
    )
    module_0.sub(var_0, var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    int_0 = -2508
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    bool_0 = True
    none_type_0 = None
    module_1.get_close_matches(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    bool_0 = False
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0, tuple_0: bool_0, bool_0: tuple_0}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bool_0 = True
    dict_0 = {}
    module_0.finditer(bool_0, dict_0)


def test_case_3570():
    bool_0 = False
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bytes_0 = b"O\xb4\xd9D\x01\xcf]\x08\x98\x8f#&\xd5\x9a\xc7\x13\x8b\xbe\xff"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    str_0 = "G<LzcXrcMP@\tJ"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    bytes_0 = b"\x8a\x00Z\x0f\x99\xd9Q\x08\x92\xe2"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    bytes_0 = b"\x81\x12\xb3\xd8\x8f\x99\xa7\xeb\x07\xdf\x95L\xc1fn\xaeY\xeb"
    module_1.IS_LINE_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    int_0 = -471
    none_type_0 = None
    module_0.split(int_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    error_0 = module_3.Error()
    module_2.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    bool_0 = False
    module_2.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    bool_0 = True
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    exception_0 = module_5.Exception()
    none_type_0 = None
    module_4.nlargest(exception_0, none_type_0, exception_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    bytes_0 = b"N;U "
    var_0 = module_0.escape(bytes_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    none_type_0 = None
    bytes_0 = b"\x1d"
    module_0.finditer(none_type_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    float_0 = 1563.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    str_0 = "/pouxt3\x0c4+a"
    var_0 = module_1.unified_diff(str_0, str_0, tofile=str_0, n=str_0)
    module_2.get_new_command(str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    int_0 = 2063
    set_0 = {int_0, int_0}
    module_2.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    str_0 = "27M2*6hpV"
    str_1 = "Z\ro#6o<8\r"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    float_0 = -162.895514
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    str_0 = "**}Z\rnUEe6(1\x0c"
    bytes_0 = b"mYM\xa5LI&\x8e\x13\x92\xe1\x80\xe9\x1a\xe6\xbf,\xc2"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.__getitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    var_0 = module_0.purge()
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    complex_0 = -79.876114 + 2903.325154j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    str_0 = "C?(XEArql%I:JSrTJ"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    none_type_0 = None
    float_0 = -3966.145
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0, float_0)
    module_1.IS_CHARACTER_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    str_0 = "\x0b\t~\x0b^~F9Zi4V}9Eik/"
    var_0 = module_1.ndiff(str_0, str_0, charjunk=str_0)
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    str_0 = "4jvBs!gh.KK7Sc^-X"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    bool_0 = True
    none_type_0 = None
    module_4.nlargest(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    bytes_0 = b"\xe1gU\xcf!\x10g\x0b\xf6B\x95"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    list_0 = []
    error_0 = module_3.Error(*list_0)
    module_2.get_new_command(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    str_0 = "mb38M\n5'LZ_mT4N"
    var_0 = module_1.restore(str_0, str_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    str_0 = "\x0bVn?'4g^\"[WHaTx"
    none_type_0 = None
    var_0 = module_1.context_diff(str_0, str_0, none_type_0)
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bytes_0 = b'XY\xbb\xda\xdbo\xcd\xe2"\xb2\x8f'
    none_type_0 = None
    var_0 = module_0.compile(bytes_0)
    var_0.__contains__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, none_type_0, none_type_0, tofiledate=none_type_0
    )
    sequence_matcher_0 = module_1.SequenceMatcher(a=var_0, autojunk=none_type_0)
    var_1 = sequence_matcher_0.set_seq1(list_0)
    module_2.get_new_command(var_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    bytes_0 = b"\xfa`uy\xf3j\x08"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    int_0 = 3706
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.make_file(none_type_0, none_type_0, numlines=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    int_0 = -4969
    list_0 = [int_0, int_0, int_0, int_0]
    module_2.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    int_0 = 1162
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    float_0 = 1021.6
    var_0 = module_1.restore(float_0, float_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_3625():
    str_0 = "t%qYS;|>"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    none_type_0 = None
    str_0 = "iD`,J(2R%!w\\7W#T"
    var_0 = module_0.purge()
    var_0.make_table(regex_flag_0, none_type_0, todesc=str_0, numlines=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    int_0 = -3745
    module_0.split(int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_6.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    float_0 = -770.10473
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


def test_case_3632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3633():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    str_0 = "k_JLcu\tj"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    str_0 = "-I#bR\r\x0bR;l&g_F"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    str_0 = "&<x?NDG]^=F)P%B-Yc"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    tuple_0 = ()
    module_0.escape(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    int_0 = 18
    module_1.IS_CHARACTER_JUNK(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    int_0 = 2111
    module_2.get_new_command(int_0, int_0)


def test_case_3642():
    bytes_0 = b"\xd9\x86e\xa9-,3\x12\xdf{\xf5\xb5@\xb7\xc7\xc2"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    complex_0 = 1551.086 + 2202.09j
    bool_0 = True
    set_0 = {complex_0, complex_0, bool_0}
    var_0 = module_1.ndiff(set_0, complex_0, charjunk=set_0)
    with pytest.raises(TypeError):
        var_0.__new__(list_0, list_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_3645():
    bytes_0 = b"\xf7\xfe\x8d\xe1\x00pI\xb1"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    int_0 = -565
    module_2.match(int_0, int_0)


def test_case_3647():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    float_0 = 2591.721
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    tuple_0 = ()
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    float_0 = -704.30511
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    str_0 = "$S;G}%!tSrSPRH"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    list_0 = []
    module_0.subn(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    float_0 = 374.97735
    set_0 = {float_0, float_0, float_0}
    str_0 = "P<Z&t"
    bytes_0 = b"y\x80{W\x1f\n\xef\xc4\x99\x8a\xf1*\x89\xff\xb1\xfc\xe2"
    tuple_0 = (set_0, set_0, str_0, bytes_0)
    module_2.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    str_0 = "[K1C"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    int_0 = 354
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_1.get_close_matches(list_0, list_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    int_0 = -983
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    bool_0 = True
    none_type_0 = None
    module_2.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    complex_0 = -3141 - 1324.12579j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    int_0 = -3070
    var_0 = module_1.ndiff(int_0, int_0)
    list_0 = [var_0, var_0, int_0, int_0]
    module_2.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    set_0 = set()
    bytes_0 = b"\x18\xe1}\xba\x07"
    var_0 = module_0.findall(bytes_0, bytes_0)
    var_0.compare(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    bool_0 = False
    none_type_0 = None
    module_2.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    bool_0 = False
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    int_0 = 820
    none_type_0 = None
    module_0.sub(int_0, none_type_0, none_type_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    complex_0 = 602 - 1610.5j
    module_1.IS_CHARACTER_JUNK(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    int_0 = 2737
    var_0 = module_1.restore(int_0, int_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_3675():
    float_0 = 475.8
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bool_0, bool_0, fromfiledate=bool_0, tofiledate=none_type_0
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    bytes_0 = b"/F"
    var_0 = module_0.findall(bytes_0, bytes_0)
    var_0.set_seq2(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    int_0 = 512
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    int_0 = 3788
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    bytes_0 = b"x\x0f\xad\x15<\xdf\x12"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    bytes_0 = b"\x88@=\xe8E\x158@R"
    none_type_0 = None
    module_4.nlargest(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    complex_0 = -25.5 - 416.968j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    none_type_0 = None
    module_2.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    bytes_0 = b"v~\xec\x95\r\xd8\x94L"
    module_2.match(bytes_0, bytes_0)


def test_case_3687():
    bool_0 = False
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, tofile=none_type_0, n=none_type_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    int_0 = -1378
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3692():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    bytes_0 = b"R\x8fl\xaeA\x148h\xf4)[\xee\xc8\xfd\x9f\xd0"
    var_0 = module_1.ndiff(bytes_0, bytes_0, bytes_0)
    module_0.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    float_0 = 1412.37117
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    bytes_0 = b"a~\xe0\x06xw\x80\x9dVg0S\x94"
    module_2.match(bytes_0, bytes_0)


def test_case_3696():
    none_type_0 = None
    bytes_0 = b"\x03#\x1dz\x06\x0b\xea"
    with pytest.raises(ValueError):
        module_7.namedtuple(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    bytes_0 = b"G\t+\xb6\t\xff\xb5\x88\xf0u\xd8\xe7\x82\xfe\x1e\x0f\x158\x96"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    int_0 = -66
    var_0 = module_1.ndiff(int_0, int_0, charjunk=int_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    bytes_0 = b"\xa7\xb0\x1f\xf4R<L\x00e\xb8\x8b\xba"
    none_type_0 = None
    var_0 = module_1.restore(bytes_0, none_type_0)
    var_0.set_seq2(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    set_0 = set()
    bytes_0 = b"\xb8<\x8e\xcb4<\xb5\xdeO\xab(\xd8\xc5\x0c\xb6\xe9\x04?\xb8\xae"
    module_0.finditer(set_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    int_0 = -1596
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    str_0 = "a3\ttbu'qK0*"
    var_0 = module_0.split(str_0, str_0)
    var_0.__iter__(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_2.match(set_0, bool_0)


def test_case_3706():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3707():
    float_0 = -1025.471285
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    bool_0 = True
    bool_1 = False
    var_0 = module_1.ndiff(bool_1, bool_1, charjunk=bool_1)
    var_0.__call__(bool_0, bool_0, module=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    bytes_0 = b"\x83\xb9\xcb"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    complex_0 = -816.31853 + 958.9j
    var_0 = module_1.ndiff(complex_0, complex_0)
    module_2.get_new_command(var_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    none_type_1 = None
    module_2.match(none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    bytes_0 = b"\x1fN\x9b4\xd4\xe2\xec5\x18"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_3715():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    str_0 = "\\VNpskb7-cZ(,\n#M?"
    module_4.nlargest(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    bool_0 = False
    module_4.nlargest(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    none_type_0 = None
    str_0 = "Fj~"
    module_0.Scanner(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    none_type_0 = None
    module_0.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    var_0 = module_1.ndiff(none_type_0, none_type_0, list_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_3723():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    bytes_0 = b"*W"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    bool_0 = False
    none_type_0 = None
    module_4.nlargest(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3727():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3728():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    float_0 = 722.0
    module_0.subn(float_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    float_0 = -690.6
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    int_0 = 1224
    none_type_0 = None
    module_1.get_close_matches(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    str_0 = "?pvbyks{r8U|*$qU"
    none_type_0 = None
    module_0.finditer(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    differ_0 = module_1.Differ()
    module_1.get_close_matches(differ_0, differ_0, cutoff=differ_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3736():
    float_0 = 3446.68
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = sequence_matcher_0.get_matching_blocks()
    tuple_0 = (var_0, var_0, var_0)
    module_2.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    float_0 = -1671.31393
    module_4.nlargest(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    bytes_0 = b"\x1e\xc6\x003\xb0A\xaa\x03\x046\x8b"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_3742():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    tuple_0 = ()
    none_type_0 = None
    module_0.sub(tuple_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    str_0 = "ZJ!k"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    complex_0 = -2688.39 + 1579.3j
    module_0.fullmatch(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    float_0 = -1483.979278
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    bytes_0 = b"L\x98L\xc4m\xe3-x3L\x16$\xccU\t"
    var_0 = module_0.template(bytes_0)
    module_2.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    float_0 = -745.0
    module_1.IS_CHARACTER_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    float_0 = -1338.012
    set_0 = {float_0}
    module_2.get_new_command(set_0, set_0)


def test_case_3755():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3756():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    float_0 = -292.41
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    int_0 = 2457
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    float_0 = -4427.76
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    float_0 = 2027.16
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3764():
    str_0 = "6s"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3766():
    float_0 = 675.42
    none_type_0 = None
    module_4.nlargest(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    float_0 = 1373.0
    var_0 = module_1.context_diff(
        float_0, float_0, fromfiledate=float_0, lineterm=float_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    float_0 = 166.0
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    float_0 = 333.89
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    tuple_0 = ()
    module_1.IS_LINE_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    int_0 = 2176
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    int_0 = 89
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.find_longest_match()


@pytest.mark.xfail(strict=True)
def test_case_3777():
    list_0 = []
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    list_0 = []
    bytes_0 = b"6"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.compare(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    str_0 = "$Y6i>\n884Ya6u"
    dict_0 = {str_0: str_0}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.diff_bytes(bool_0, bool_0, none_type_0, none_type_0, none_type_0)
    dict_0 = {bool_0: var_0, bool_0: var_0}
    module_1.get_close_matches(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.compile(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    bytes_0 = b"{"
    var_0 = module_1.IS_CHARACTER_JUNK(bytes_0, bytes_0)
    module_0.sub(var_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    str_0 = ")e%T"
    dict_0 = {str_0: str_0}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    bool_0 = True
    none_type_0 = None
    module_2.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    bytes_0 = b"@"
    module_2.match(bytes_0, bytes_0)


def test_case_3791():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    html_diff_0 = module_1.HtmlDiff(linejunk=set_0)


def test_case_3792():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    bytes_0 = b"7\x8c\xc3-"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.findall(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    list_0 = []
    set_0 = set()
    var_0 = module_1.context_diff(set_0, set_0, fromfiledate=set_0, lineterm=set_0)
    var_0.compare(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3795():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3796():
    str_0 = "1Gx]W9\"3*G'6#"
    var_0 = module_0.subn(str_0, str_0, str_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3797():
    bytes_0 = b"\xc5"
    sequence_matcher_0 = module_1.SequenceMatcher(a=bytes_0)
    var_0 = sequence_matcher_0.quick_ratio()
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_3798():
    dict_0 = {}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    bool_0 = True
    set_0 = {bool_0}
    module_2.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    bytes_0 = b"\xdcc\x84\x07\xd5\xc8\xdf4\x1eMt|\x8dyu\x8f\x010-"
    dict_0 = {bytes_0: bytes_0}
    module_1.IS_CHARACTER_JUNK(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    dict_0 = {}
    module_0.template(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    int_0 = -1790
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    str_0 = ""
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    bool_0 = True
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    int_0 = -480
    none_type_0 = None
    module_0.fullmatch(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    str_0 = "o{FJ'9g4%5V_+4$g[x"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    complex_0 = -2882.0141 + 1511j
    none_type_0 = None
    module_0.sub(complex_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    float_0 = 3862.02
    list_0 = [float_0, float_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    str_0 = "_zE9|&^_F1J\x0bEZS*-zz"
    tuple_0 = (str_0,)
    module_2.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    int_0 = -1341
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    bytes_0 = b"@\xab\xc4\xc5\xa84W\xaa\xee\xb4\xf9>"
    module_4.nlargest(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3814():
    str_0 = '\\k6|8*"'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3815():
    var_0 = module_0.purge()
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    str_0 = "#"
    module_4.nlargest(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    bytes_0 = b"{\xa2\x00\xc2\xc7\x97B"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    int_0 = -803
    error_0 = module_0.error(int_0, int_0)
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    str_0 = "d,(TZ"
    module_0.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3820():
    int_0 = -1501
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_3822():
    complex_0 = -3427.772 - 1444.89j
    module_6.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    bytes_0 = b"%\x85iv\xb9m\xb0\xbfz\xac\t\x13\x13"
    bool_0 = True
    var_0 = module_1.ndiff(bool_0, bool_0)
    module_2.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    complex_0 = 883.84931 - 1492.96j
    none_type_0 = None
    module_2.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    str_0 = "s0},RUlf~TI>"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    bytes_0 = b'r"\xe7\xa0\x7f\x80 \xf3E\x1f\x1f\xab\xa7\x93\x8e\xbd+\xa6'
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.finditer(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_3828():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    list_0 = []
    module_4.nlargest(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    int_0 = 2487
    var_0 = module_1.restore(int_0, int_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    float_0 = 955.1381
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    set_0 = set()
    none_type_0 = None
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    bool_0 = False
    var_0 = module_1.unified_diff(bool_0, bool_0)
    module_2.match(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    bytes_0 = b"\xde\xc4\x87<\x95\xfb\x9c\x12\x9a\x95\xfa"
    bool_0 = True
    module_0.findall(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    str_0 = "}N)*g6@i/"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_2.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    float_0 = -1678.52
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    complex_0 = -716.1479 - 663.6j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    bytes_0 = b"F\xcb\xf5\xb7a\xf9\xc6X\xd6~M\xb6\xb9\xfd_\xfeO\xb7"
    module_4.nlargest(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    str_0 = "Z"
    differ_0 = module_1.Differ()
    var_0 = differ_0.compare(str_0, str_0)
    module_1.get_close_matches(var_0, str_0, cutoff=var_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.unified_diff(none_type_1, none_type_1, lineterm=none_type_1)
    var_0.compare(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    str_0 = "|"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    str_0 = "y\tXa\tB\x0c5i"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    float_0 = 153.1
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    float_0 = 1296.494677
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    regex_flag_0 = module_0.RegexFlag.DEBUG
    var_0 = module_1.diff_bytes(
        regex_flag_0,
        regex_flag_0,
        regex_flag_0,
        tofile=regex_flag_0,
        fromfiledate=regex_flag_0,
    )
    module_0.split(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    int_0 = -767
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    bytes_0 = b"\x92\x86P,\xed\xa1\xb5\x15\xd5\x17\xd6A\xdb\xfb-"
    module_1.IS_CHARACTER_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    str_0 = "@k\t\x0bO\x0c2m{|24l#;r"
    str_1 = "]$[b+5{%s"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_1: str_1}
    module_5.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    int_0 = -2021
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    bytes_0 = b"u\xbc+{J\xee\xfe\x87\xfc\xb1^"
    var_0 = module_1.context_diff(
        bytes_0, bytes_0, fromfiledate=bytes_0, tofiledate=bytes_0
    )
    var_1 = module_1.diff_bytes(
        bytes_0, bytes_0, bytes_0, fromfiledate=bytes_0, tofiledate=bytes_0, n=var_0
    )
    module_2.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    error_0 = module_3.Error()
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.compare(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    tuple_0 = ()
    module_6.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    str_0 = "oU9\\%x?YbEq$"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    bytes_0 = b"\x84\xa6\x85"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    complex_0 = 970.2378 + 37.7j
    str_0 = ",8hh< LS{"
    module_2.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3866():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.context_diff(bool_0, none_type_0, bool_0, lineterm=none_type_0)
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    bool_0 = True
    var_0 = module_1.context_diff(bool_0, bool_0, tofile=bool_0, tofiledate=bool_0)
    module_2.get_new_command(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    complex_0 = 2253.580753 + 2090j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    complex_0 = 223.368 - 4528.5455j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_1.context_diff(
        dict_0,
        none_type_0,
        tofile=none_type_0,
        fromfiledate=dict_0,
        tofiledate=none_type_0,
        n=dict_0,
    )
    set_0 = set()
    var_1 = module_1.diff_bytes(var_0, set_0, dict_0)
    module_2.get_new_command(var_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    float_0 = -3419.55
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.unified_diff(none_type_1, none_type_1, lineterm=none_type_1)
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    bytes_0 = b"\xe6\x91\xfd\x18\xd5ql\xf0\xbc\xf0"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3876():
    none_type_0 = None
    error_0 = module_0.error(none_type_0, none_type_0)
    module_0.template(error_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    var_0 = module_0.purge()
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    int_0 = 485
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    complex_0 = -2743.57846 + 2026.487912j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    str_0 = "~:o"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    int_0 = 573
    none_type_0 = None
    module_0.sub(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, none_type_0, none_type_0
    )
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bool_0 = False
    none_type_0 = None
    bool_1 = False
    var_0 = module_1.context_diff(bool_1, bool_1, bool_1, tofiledate=bool_1)
    var_0.__delattr__(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    int_0 = -642
    none_type_0 = None
    var_0 = module_1.restore(int_0, none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    str_0 = "<.KZ:R+~"
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.get_close_matches(str_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    str_0 = "|3AW*3Nf=t 4i[YbuH"
    var_0 = module_1.restore(str_0, str_0)
    module_2.match(var_0, var_0)


def test_case_3889():
    dict_0 = {}
    with pytest.raises(ValueError):
        module_7.namedtuple(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    int_0 = -27
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.diff_bytes(
        none_type_1,
        none_type_1,
        none_type_1,
        none_type_1,
        none_type_1,
        lineterm=none_type_1,
    )
    var_0.__setitem__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    int_0 = -2628
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    int_0 = -818
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    int_0 = -1419
    int_1 = 473
    module_2.get_new_command(int_0, int_1)


def test_case_3895():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3896():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


def test_case_3897():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bytes_0 = b"\xa2\xaa\x8f\xc8\xc6"
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_3899():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    int_0 = 215
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    float_0 = -2260.0
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        float_0, none_type_0, float_0, tofiledate=float_0, lineterm=none_type_0
    )
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    int_0 = -1754
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    tuple_0 = ()
    module_0.finditer(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    str_0 = "+"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = -2343
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    bytes_0 = b"\t"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    module_2.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    bytes_0 = b"\xdb\xeb\x11mO"
    module_0.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    list_0 = []
    module_0.Match(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    bytes_0 = b"\xc9\xe7{\xe1h\xf2\xae-\xa2\xdd\x18"
    module_0.split(bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    none_type_0 = None
    bool_0 = True
    module_0.finditer(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.ndiff(none_type_1, none_type_1)
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0, none_type_0)
    module_0.compile(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    tuple_0 = ()
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    str_0 = ",C7u;YI}pX:<S"
    var_0 = module_1.diff_bytes(str_0, str_0, str_0, tofiledate=str_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    int_0 = -562
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    var_0 = module_0.purge()
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_3930():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    bytes_0 = b"\xa3\xac\xeb\x00\x82\xa6N\x19\xfe\xdb\x0e \xc8\xc9^k[4"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    bytes_0 = b"\xae_(\x93m\xa8$\xdd"
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.context_diff(
        none_type_1,
        none_type_1,
        tofile=none_type_1,
        tofiledate=none_type_1,
        n=none_type_1,
    )
    var_0.__delattr__(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    bool_0 = False
    none_type_0 = None
    str_0 = '~@K\x0c7#i"c\\/t>cgF"'
    module_0.search(bool_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    var_0 = module_0.purge()
    float_0 = -2302.791
    none_type_0 = None
    module_4.nlargest(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    str_0 = "eA5_X"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    bool_0 = False
    int_0 = -3988
    module_2.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_2.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_3940():
    int_0 = -602
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    str_0 = "jg75u#Bdas?z\x0bG\\+@"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    str_0 = "=t"
    module_4.nlargest(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    str_0 = "b\r{"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    bytes_0 = b"\xf2BW'\x00\xbb\x84m\xad\xc2\xaac\r;\xaa\xab\x8a\xf7"
    var_0 = module_0.escape(bytes_0)
    tuple_0 = (var_0,)
    module_0.template(tuple_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    none_type_0 = None
    str_0 = ".1\n"
    var_0 = module_1.restore(str_0, str_0)
    var_0.__delattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    str_0 = "/|Bv3+r?rw.Jve6I<dNb"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    bytes_0 = b"\x0f\xa0D\xba\nsN\xb3\xaa\xd7\x1d"
    var_0 = module_1.diff_bytes(bytes_0, bytes_0, bytes_0, lineterm=bytes_0)
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    str_0 = "\\fS`\x0c3vu8"
    var_0 = module_0.findall(str_0, str_0)
    var_0.__delattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bool_0 = True
    str_0 = " <`$#yvi"
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1)
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, tuple_0, tofiledate=none_type_0, n=bool_1, lineterm=str_0
    )
    set_0 = set()
    module_0.search(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    float_0 = 3841.24
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__call__(float_0, none_type_0, type=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    bool_0 = True
    var_0 = module_1.diff_bytes(bool_0, bool_0, bool_0, fromfiledate=bool_0, n=bool_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    str_0 = "`\\2"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    int_0 = 1891
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    str_0 = " GE"
    none_type_0 = None
    str_1 = '/:0"18V,@U^'
    str_2 = "+)-D54ICdIKG\rCDH(C.*"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    float_0 = -428.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    str_0 = "}kd<P,*"
    module_2.match(str_0, str_0)


def test_case_3961():
    str_0 = "]yW;\t^\x0bsn\x0c8NDL"
    bool_0 = False
    with pytest.raises(TypeError):
        module_7.namedtuple(str_0, bool_0, rename=str_0, module=str_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    bool_0 = False
    int_0 = -2165
    none_type_0 = None
    var_0 = module_1.context_diff(int_0, int_0, n=none_type_0, lineterm=none_type_0)
    var_0.scan(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    str_0 = "1tC*l$HMUlP\\\\"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    list_0 = []
    var_0 = module_1.unified_diff(list_0, list_0, lineterm=list_0)
    tuple_0 = (var_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    none_type_0 = None
    var_0 = module_0.purge()
    var_1 = module_1.restore(var_0, var_0)
    var_1.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    var_0 = module_0.purge()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_3970():
    int_0 = -553
    none_type_0 = None
    var_0 = module_1.context_diff(
        int_0,
        none_type_0,
        tofile=int_0,
        fromfiledate=int_0,
        n=int_0,
        lineterm=none_type_0,
    )
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_3971():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    float_0 = 4697.0803
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.scan(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    bytes_0 = b"\xcd\xb7\xb7\xc3,\x90/LV\xb4$U\xfd\x18\xf3f\x95\x0c\xe6"
    none_type_0 = None
    var_0 = module_1.ndiff(bytes_0, bytes_0, bytes_0, bytes_0)
    var_0.__setattr__(bytes_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    none_type_0 = None
    bytes_0 = b"\xbe"
    var_0 = module_0.template(bytes_0)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: set_0,
    }
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0, n=dict_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    int_0 = 1554
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    float_0 = -1480.889944
    dict_0 = {}
    list_0 = [float_0, dict_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    none_type_0 = None
    module_5.BaseException(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    int_0 = 1992
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    bytes_0 = b'U"\x8a\xa4\xd0'
    module_2.match(bytes_0, bytes_0)


def test_case_3984():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3985():
    float_0 = -1475.143
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    int_0 = -2210
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    float_0 = -1823.999208
    var_0 = module_1.ndiff(float_0, float_0, float_0)
    module_0.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    float_0 = -3017.89
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    str_0 = "v (e"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    float_0 = -3639.16
    module_1.get_close_matches(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    int_0 = -1787
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    str_0 = '"xvbcl)JT,O\x0ct\tPW$'
    var_0 = module_0.purge()
    module_0.compile(str_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0)
    var_1 = module_1.ndiff(var_0, none_type_0)
    module_2.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    complex_0 = -3322.0721 + 1447.566j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0,
        none_type_0,
        tofiledate=none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    module_0.findall(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    bytes_0 = b"\xc3[\xd8\x1f\x9dS"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.search(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    bool_0 = False
    module_0.subn(bool_0, bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    int_0 = 1453
    module_1.IS_LINE_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    str_0 = "[a/B{RzA#Y:/"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    int_0 = -393
    none_type_0 = None
    module_0.subn(int_0, none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    str_0 = "~pSz\x0bS"
    list_0 = [str_0]
    module_2.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    int_0 = -140
    var_0 = module_1.context_diff(int_0, int_0, int_0)
    var_0.__len__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    float_0 = -846.42645
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, fromfiledate=none_type_0, n=none_type_0
    )
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4016():
    bytes_0 = b"W\x03TQ\xff\xc8\x02"
    var_0 = module_0.sub(bytes_0, bytes_0, bytes_0)
    module_2.get_new_command(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    int_0 = -2720
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    var_0 = module_0.purge()
    bytes_0 = b"\x80[\x96\x90\xd3\xe7\x9c\xcd<It-\x0e\x9ez"
    tuple_0 = (var_0, var_0, var_0, bytes_0)
    module_6.unique(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bytes_0 = b"#\x99\x7f}\xc9\xac\x97h<\xf2[K\xf3\xa5\x1e\x1fo"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    int_0 = -1504
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0, n=none_type_0)
    module_6.EnumMeta(**var_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    complex_0 = 3015.96 - 3701.7j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    int_0 = -3294
    none_type_0 = None
    module_0.sub(int_0, none_type_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    float_0 = -2891.4
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    complex_0 = -65 + 263.79j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    int_0 = -2595
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    float_0 = 1025.834
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    set_0 = set()
    list_0 = [set_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    float_0 = 1157.1
    none_type_0 = None
    module_0.subn(float_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    str_0 = "82p\nx}\x0cX5mIi"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.context_diff(
        bool_0, bool_0, bool_0, none_type_0, lineterm=none_type_0
    )
    var_0.get_opcodes()


def test_case_4036():
    str_0 = "5.&0at`Aa7Mz$xYh3"
    with pytest.raises(ValueError):
        module_7.namedtuple(str_0, str_0, module=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    list_0 = []
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    none_type_0 = None
    bytes_0 = b"\x82\x8e"
    module_2.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    bytes_0 = b"\xf4\x1cRRW\xa0"
    module_0.subn(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    int_0 = 1792
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4041():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4042():
    str_0 = "YzSl"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    str_0 = "Coq"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    bytes_0 = b"8\xcaI\xd5\x18y\x7f\x96\xdbN\x81\xb5~\xe5a"
    var_0 = module_0.compile(bytes_0)
    module_2.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    int_0 = -1467
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (set_0,)
    module_0.findall(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    exception_0 = module_5.Exception()
    module_1.IS_CHARACTER_JUNK(exception_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    int_0 = 268
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    int_0 = -1449
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    tuple_0 = ()
    html_diff_0 = module_1.HtmlDiff(charjunk=tuple_0)
    module_2.match(html_diff_0, html_diff_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    str_0 = '8$+ -+;t+"<;c"@vh~'
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    bytes_0 = b""
    none_type_0 = None
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.__call__(bytes_0, none_type_0, module=none_type_0, qualname=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    int_0 = 761
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    list_0 = []
    none_type_0 = None
    var_0 = module_1.ndiff(list_0, none_type_0, none_type_0)
    module_2.match(list_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    var_0 = module_0.purge()
    html_diff_0 = module_1.HtmlDiff()
    html_diff_0.make_file(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    int_0 = 880
    module_1.get_close_matches(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    int_0 = 3373
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    int_0 = 3479
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    float_0 = -242.9
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    int_0 = 2262
    none_type_0 = None
    module_0.match(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    int_0 = 1593
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b"\xfe\xa2(\x88w\xe7\xcf^\xc5#D\xb6\xc5\xe2wY"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    complex_0 = 21.823237 + 1430.5j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    bool_0 = True
    module_0.escape(bool_0)


def test_case_4066():
    str_0 = "\rE~]"
    var_0 = module_0.split(str_0, str_0)
    bytes_0 = b"\x02\xff\x10\xf1\xee\x07\xd9@\xb7b("
    with pytest.raises(ValueError):
        module_7.namedtuple(var_0, var_0, defaults=var_0, module=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    float_0 = -83.23569
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    complex_0 = -2308.0577 + 2128.892j
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.diff_bytes(complex_0, complex_0, bool_0, lineterm=none_type_0)
    module_1.IS_LINE_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4072():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_2.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    int_0 = 846
    module_1.IS_LINE_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    bytes_0 = b"\x8c\xba\xc0\xec\x1a"
    var_0 = module_1.unified_diff(bytes_0, bytes_0, tofile=bytes_0, tofiledate=bytes_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    str_0 = "^,<d:\n;r^V'N%`m"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.compare(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    none_type_0 = None
    int_0 = 37
    none_type_1 = None
    var_0 = module_1.restore(int_0, none_type_1)
    var_0.__call__(none_type_0, none_type_0, type=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    bytes_0 = b"\x11"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    bool_0 = False
    var_0 = module_1.restore(bool_0, bool_0)
    module_0.finditer(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    str_0 = "'P"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    bytes_0 = b"\xcf\xd26\x99\x84\xb7\xee1"
    var_0 = module_0.findall(bytes_0, bytes_0)
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0, n=none_type_0)
    module_2.match(var_0, var_0)


def test_case_4085():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4086():
    float_0 = -3094.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    list_0 = []
    dict_0 = {}
    object_0 = module_5.object(*list_0, **dict_0)
    module_2.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    str_0 = "XO^nHMdBE/ZQT; h>[Q"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_2.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    str_0 = "??#$5"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    str_0 = "M\t$z=Op.?\x0b,ZZ"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    complex_0 = 927.9 + 1852.20339j
    none_type_0 = None
    module_0.fullmatch(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    float_0 = -125.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    str_0 = "h)N/$)(3KXg8h;[,"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    str_0 = "^;!^~!C_te;&Z{e"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    tuple_0 = ()
    none_type_0 = None
    module_2.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    var_0 = module_0.purge()
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4100():
    int_0 = 214
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(b=none_type_0, autojunk=none_type_0)
    var_0 = sequence_matcher_0.set_seq2(none_type_0)
    module_2.match(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    int_0 = 1205
    module_0.finditer(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        bool_0, bool_0, bool_0, tofiledate=bool_0, lineterm=none_type_0
    )
    var_1 = var_0.__dir__()
    str_0 = "W8{Z9@V}\\|2'mcDrmP"
    module_4.nlargest(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, none_type_0)
    var_1 = module_1.restore(var_0, var_0)
    var_1.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_4107():
    float_0 = 18.27
    int_0 = -3391
    module_2.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    list_0 = []
    error_0 = module_3.Error(*list_0)
    module_2.match(error_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    int_0 = 2755
    module_5.BaseException(*int_0)


def test_case_4110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4111():
    bytes_0 = b"\x99lV\xfa|Q\xb2\x03._\x8e=\xbbw\x8b\xd8@\x19e"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    int_0 = 2683
    module_1.get_close_matches(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    int_0 = -1759
    module_0.subn(int_0, int_0, int_0, flags=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    int_0 = -2178
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bytes_0 = b"k\xe6\x10\xa4\xc7\xceCW"
    var_0 = module_1.ndiff(bytes_0, bytes_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4117():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    int_0 = 3151
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    complex_0 = -1631.94 + 1262.63749j
    none_type_0 = None
    var_0 = module_1.context_diff(complex_0, none_type_0, n=complex_0)
    var_1 = module_1.ndiff(var_0, none_type_0, none_type_0)
    module_0.search(var_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    int_0 = 800
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    complex_0 = 594.508676 - 1438.255j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_4.nlargest(none_type_0, none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    int_0 = 1216
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    str_0 = " pj\\P"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    bytes_0 = b"\xf8\xf5\xcc&\xe4p\xa3A"
    var_0 = module_0.escape(bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    float_0 = -349.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_2.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = False
    module_2.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    str_0 = "(lDV.zFSq"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0, n=none_type_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    int_0 = -60
    none_type_0 = None
    module_0.fullmatch(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    bytes_0 = b"\t\x1e\xbb\x06\xb2/\x8b\xc7w\x9cD\xed\xef\x06\xb7\x8fC"
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    none_type_0 = None
    str_0 = "Q4\x0c;4"
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, n=none_type_0, lineterm=none_type_0
    )
    var_0.find_longest_match(blo=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    int_0 = 610
    list_0 = [int_0, int_0, int_0]
    module_6.EnumMeta(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    int_0 = 2080
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    complex_0 = -3004.12109 - 1205.71j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    bytes_0 = b"\x9d\xaf\xe6N\xf6\xa5FF\xb1\x1c\x8c\xa8\\\xbe"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    list_0 = []
    bool_0 = False
    bool_1 = False
    var_0 = module_1.diff_bytes(bool_0, bool_0, bool_1, tofile=bool_1, lineterm=bool_0)
    var_1 = module_1.restore(var_0, var_0)
    var_1.set_seq1(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    int_0 = 509
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    int_0 = -1560
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


def test_case_4158():
    bool_0 = False
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    bytes_0 = b"\x13@\xad9\xc5\xd1\x1f"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_2.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    float_0 = -3215.819
    module_1.IS_LINE_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    str_0 = "l"
    module_2.match(str_0, str_0)


def test_case_4162():
    str_0 = "`wt.^fx71"
    var_0 = module_0.finditer(str_0, str_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    int_0 = 4267
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    int_0 = -1909
    module_0.sub(int_0, int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    bytes_0 = b"\x9e\x7f\xa3.@\xe8wM\xac\xf7\xb5\x0b"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    float_0 = -4357.858237
    var_0 = module_1.restore(float_0, float_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_4167():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, tofile=none_type_0, n=none_type_0
    )
    var_0.__call__(none_type_0, none_type_0, none_type_0, start=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4169():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    str_0 = "OD=%\x0c?~7eO\x0b("
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    bool_0 = False
    none_type_0 = None
    module_0.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    none_type_0 = None
    str_0 = "-&yUlw"
    var_0 = module_1.IS_CHARACTER_JUNK(str_0)
    var_1 = module_0.purge()
    var_1.__setattr__(none_type_0, str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    int_0 = 1121
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    int_0 = 2873
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    bool_0 = False
    set_0 = {bool_0}
    module_2.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_2.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    str_0 = " 6"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    int_0 = -2524
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4180():
    float_0 = 213.4
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    bytes_0 = b"\x01\x05\xa0QW\xd4o5wW4"
    set_0 = {bytes_0, bytes_0}
    module_2.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    int_0 = 3166
    list_0 = [int_0, int_0]
    module_2.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


def test_case_4184():
    str_0 = "ppbx "
    with pytest.raises(ValueError):
        module_7.namedtuple(str_0, str_0, defaults=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    int_0 = 3339
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    int_0 = -3792
    module_1.get_close_matches(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    bool_0 = True
    module_0.template(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0)
    module_1.get_close_matches(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    dict_0 = {}
    module_1.IS_LINE_JUNK(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    bytes_0 = b"C\x0c,\x99v"
    none_type_0 = None
    var_0 = module_1.diff_bytes(bytes_0, none_type_0, none_type_0, lineterm=bytes_0)
    module_2.match(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    bytes_0 = b"O\xb5=\xa5&)\xd2\xf6%\xfc9\x868"
    none_type_0 = None
    module_0.subn(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, fromfiledate=none_type_0)
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.template(set_0)


def test_case_4193():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4194():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    str_0 = "b\\Z\x0cK|!h IV\trJG"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bytes_0 = b"\xb0\x18)\xa8\x81Z\xec\x03\xe8\x1e\xda\x8f\x94z\xfa\xd6\x98\x1d"
    var_0 = module_0.purge()
    var_0.find_longest_match(blo=bytes_0, bhi=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    list_0 = []
    module_1.IS_CHARACTER_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    str_0 = 'LDJ)b->/K.x"K'
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4200():
    str_0 = "\n0b?v1f\x0bZ\\ox8\x0cA"
    list_0 = [str_0, str_0]
    module_2.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    float_0 = 457.5
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [float_0, dict_0]
    module_2.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, tofile=none_type_0, tofiledate=none_type_0
    )
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


def test_case_4204():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    list_0 = []
    differ_0 = module_1.Differ(list_0)
    module_2.get_new_command(differ_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    complex_0 = 2780.829949 - 302.884j
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0)
    var_0.__contains__(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    int_0 = 1935
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, int_0)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    dict_0 = {}
    module_0.split(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    complex_0 = 2455.9 + 169.3j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    complex_0 = 796.611 - 640.40095j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    str_0 = "j`Uc7K"
    dict_0 = {str_0: str_0}
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    dict_0 = {}
    module_6.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    float_0 = 4751.16
    module_4.nlargest(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    bytes_0 = b"\xbf\x82\xa9q$9l#\xe4\xf2\x9f\n\x966>6-\xb6\x9a\x1d"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    complex_0 = 251.52 - 605.3j
    module_1.get_close_matches(complex_0, complex_0, cutoff=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    bytes_0 = b"H\xeb\xc6V9\xf65\xe1\xcbc6\xc6"
    module_1.get_close_matches(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4222():
    float_0 = -1499.7
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    complex_0 = 613.72407 - 798.590145j
    list_0 = [complex_0, complex_0]
    module_2.match(list_0, list_0)


def test_case_4224():
    bytes_0 = b"\x0c/\xf6\x00f\xaa"
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0, rename=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    str_0 = "an0;ct0;gt>_jr"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    enum_dict_0 = module_6._EnumDict()
    module_0.compile(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4229():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


def test_case_4231():
    bool_0 = False
    exception_0 = module_5.Exception()
    var_0 = module_1.unified_diff(bool_0, exception_0, fromfiledate=exception_0)
    list_0 = [var_0]
    list_1 = [var_0, bool_0, list_0, bool_0]
    exception_1 = module_5.Exception(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, tofile=none_type_0)
    set_0 = {var_0, none_type_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    dict_0 = {}
    module_0.Scanner(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4236():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    bytes_0 = b"\xa3\xc9\xae\xf4W\xc6E\x9d\xdeg"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    var_0 = module_0.purge()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_4240():
    float_0 = -276.26
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    str_0 = "_<\r`\rf08,s`Bbui]2]&-"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4242():
    float_0 = 4197.434
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    str_0 = ",~k@~vI~&YIV6"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_2.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    var_0 = module_0.purge()
    module_1.IS_LINE_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    var_0 = module_0.purge()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bytes_0 = b" ~\x1d\xe7\x02\x89Z94\x18&GW\x02\xeb\x90\x9d\x94\xefg"
    module_4.nlargest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    str_0 = 'f"+B~4'
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    int_0 = 259
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    bytes_0 = b"W\xe5"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    int_0 = 189
    none_type_0 = None
    var_0 = module_1.diff_bytes(int_0, int_0, none_type_0, int_0, n=int_0)
    tuple_0 = (int_0, var_0)
    module_2.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    list_0 = []
    module_0.template(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    bytes_0 = b"]\xeb\xa2"
    module_0.sub(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    float_0 = -236.601376
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    bytes_0 = b"\xab\x9e\x9f^1\xa6\xfbv\x04LC6Q4"
    var_0 = module_1.IS_CHARACTER_JUNK(bytes_0, bytes_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_4259():
    str_0 = "%hZ{y"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, bool_0, none_type_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4261():
    int_0 = -3861
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    bool_0 = False
    none_type_0 = None
    module_1.IS_LINE_JUNK(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    str_0 = "-v"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    int_0 = 3554
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    auto_0 = module_6.auto()
    module_0.finditer(auto_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    str_0 = "]h%V=sE8wj(:XKu+A8V"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    str_0 = "fg\n{2{?fA[.o_f+KWn#\x0c"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    bytes_0 = b"\xaf\r\xc3\x13\x95\xfc"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    auto_0 = module_6.auto()
    none_type_0 = None
    module_2.match(auto_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    int_0 = -3033
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    str_0 = ")5dO"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    var_0 = module_0.purge()
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    var_0 = module_0.purge()
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_4276():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4277():
    bytes_0 = b"N_=x"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4278():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    dict_0 = {}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    dict_0 = {}
    int_0 = -689
    module_2.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    bool_0 = False
    module_0.template(bool_0)


def test_case_4283():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4284():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.context_diff(
        bool_0,
        none_type_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
        n=bool_0,
        lineterm=none_type_0,
    )
    module_2.get_new_command(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    bool_0 = False
    module_0.Scanner(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    int_0 = 3193
    set_0 = {int_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4290():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4292():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    dict_0 = {}
    module_0.compile(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    bytes_0 = b""
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    set_0 = set()
    module_0.finditer(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.ndiff(none_type_1, none_type_1)
    var_0.set_seq1(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    var_0 = module_0.purge()
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    str_0 = '`}x\x0cdh8H8"k16Bu;<'
    module_0.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    int_0 = -1218
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    bytes_0 = b"\x9e\x8a\x92\x88#\xb5r"
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    str_0 = "\n\x0b_u|'j\tB1H\tP"
    set_0 = {str_0, str_0, str_0}
    module_2.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bool_0 = True
    var_0 = module_1.restore(bool_0, bool_0)
    module_0.fullmatch(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    module_0.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    bytes_0 = b""
    var_0 = module_0.finditer(bytes_0, bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    float_0 = 265.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    float_0 = -4075.7
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    bytes_0 = b"\x9d\xca\xdb\x97z\x14\xcc\xd1\xb3\x93\xe9M\xee9\x89Wc"
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        bytes_0, bytes_0, bytes_0, none_type_0, fromfiledate=none_type_0
    )
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    bytes_0 = b"\xddp9\xab)\xb3Gb\xb1F/&\xe1"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    int_0 = -1880
    module_2.match(int_0, int_0)


def test_case_4310():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    bytes_0 = b"\xde\x80{"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    bytes_0 = b"\xf0\x08(_\x05\xc5\xe1\xfbx\xe1\x848D\xb8\xd0\xae"
    module_0.compile(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    int_0 = 2171
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    str_0 = "lXy"
    bytes_0 = b"$\xe5\xcc\xd7\x1e\x16\xc1\x94a\xb2\xc3\x04\xe3\x01Z"
    str_1 = "bkr_$"
    str_2 = ""
    list_0 = [str_1, str_0, str_2, bytes_0]
    float_0 = 2366.950944
    bool_0 = False
    var_0 = module_1.diff_bytes(
        bool_0, bytes_0, float_0, list_0, tofiledate=list_0, lineterm=str_0
    )
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    bool_0 = True
    str_0 = "Vq-IN"
    tuple_0 = (str_0, bool_0)
    var_0 = module_1.diff_bytes(str_0, bool_0, tuple_0, bool_0, tofiledate=tuple_0)
    var_0.__delattr__(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    float_0 = 2481.898385
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    bytes_0 = b'\xcd"\xde\x8d\x0c&\\P\x05\xa1\xe8\xa3\xcc\xbc'
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    str_0 = "e$)9@8Oo.%"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    none_type_0 = None
    enum_dict_0 = module_6._EnumDict()
    enum_dict_0.__setitem__(none_type_0, none_type_0)


def test_case_4326():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4327():
    bool_0 = True
    none_type_0 = None
    module_0.fullmatch(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, none_type_0, tofiledate=none_type_0
    )
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_4330():
    float_0 = -2804.1
    module_2.get_new_command(float_0, float_0)


def test_case_4331():
    enum_dict_0 = module_6._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_4332():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    complex_0 = 3382.282041 + 476.8j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    tuple_0 = (regex_flag_0,)
    error_0 = module_0.error(tuple_0, pos=tuple_0)
    module_2.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    var_0.__iter__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    var_0 = module_0.purge()
    var_1 = module_1.context_diff(var_0, var_0, var_0, var_0)
    module_1.IS_CHARACTER_JUNK(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofiledate=none_type_0, n=none_type_0
    )
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_4340():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4341():
    bool_0 = False
    none_type_0 = None
    module_0.finditer(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    bytes_0 = b"\xcb\x11y\xa6"
    bytes_1 = b"\x1e\xff\xc0\xbai\xa3\xdc\xe6\x1e\xd1\xa1\xf6\xa9"
    var_0 = module_0.finditer(bytes_1, bytes_1)
    var_0.__len__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
        lineterm=none_type_0,
    )
    var_1 = module_1.diff_bytes(
        var_0, none_type_0, var_0, fromfiledate=var_0, lineterm=var_0
    )
    module_2.get_new_command(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    str_0 = "uV7K\rbQv\\%R\tVQ19)"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    complex_0 = -6700.4 - 5319.32j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    int_0 = -685
    module_0.subn(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    none_type_0 = None
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    float_0 = 738.7
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    bytes_0 = b"LO\t\xa9\xc2?wZ"
    list_0 = [bytes_0, bytes_0]
    module_2.match(list_0, list_0)


def test_case_4351():
    none_type_0 = None
    list_0 = [none_type_0]
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=list_0, module=list_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bytes_0 = b"\x04\xea\x8f(\xc7%\x8c\xf4\xab\xe2\xd0\x83\xd0\xc78rG\xf6"
    module_0.findall(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    int_0 = -2886
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    str_0 = '\\pyc1>7(%^2|"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4356():
    bytes_0 = b"\xb9\x1dN\x86"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


def test_case_4357():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4358():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    complex_0 = -1710.23868 + 2477.322j
    module_0.search(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    exception_0 = module_5.Exception(*list_0)
    module_0.finditer(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4362():
    float_0 = 649.85
    module_0.findall(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4363():
    none_type_0 = None
    str_0 = ";M9l>?'f"
    module_2.get_new_command(none_type_0, str_0)


def test_case_4364():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    bool_0 = True
    bytes_0 = b'\xef<\xbf\x92\xda\xbf\xae"eT7\xac\xb7'
    dict_0 = {bool_0: bytes_0, bytes_0: bool_0, bytes_0: bytes_0}
    module_2.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    str_0 = "P\t'\rS%`i:Z8XyJ]|\r>"
    var_0 = module_0.findall(str_0, str_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_4367():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bytes_0 = b"\x14 7w\x84\xbb\x93<\xdf\x04i\x15\x9aM"
    list_0 = [bytes_0, bytes_0]
    module_2.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    html_diff_0 = module_1.HtmlDiff()
    none_type_0 = None
    module_0.split(html_diff_0, html_diff_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    float_0 = 172.7
    bytes_0 = b"\xd3GN\xfc\x91\x0e\xbb\x16M\xbbmr"
    var_0 = module_0.fullmatch(bytes_0, bytes_0)
    var_0.__setattr__(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    float_0 = -153.435
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    int_0 = 1288
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    str_0 = 'O"'
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    bytes_0 = b"\xec\xcb\x85\x91"
    bytes_1 = b"`K\xfd\xb8\xc5#/7\x12,\n\xb6\x06\xc7\x83\xd8<"
    none_type_0 = None
    var_0 = module_1.context_diff(
        bytes_1, none_type_0, none_type_0, fromfiledate=none_type_0, n=none_type_0
    )
    var_0.__reversed__(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    float_0 = 2288.404438
    module_0.compile(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    bytes_0 = b"s\x90\xfb\xd3"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    complex_0 = 1067 + 1750.32305j
    module_0.finditer(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    bytes_0 = b"\x8b"
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, none_type_0)
    var_0.__getitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.subn(dict_0, bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    none_type_0 = None
    dict_0 = {}
    error_0 = module_3.Error(**dict_0)
    module_0.match(none_type_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    bool_0 = True
    str_0 = "i\rh\x0bTzTX!ah#`"
    none_type_0 = None
    str_1 = "b9iB6DV"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_0.Pattern(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    bool_0 = False
    none_type_0 = None
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    float_0 = 394.0
    none_type_0 = None
    var_0 = module_1.unified_diff(float_0, none_type_0, tofiledate=none_type_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4388():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    int_0 = 1600
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    bytes_0 = b"\x9b7*\x06\xf5xu]0=\xa5\xc3\x0b"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    tuple_0 = ()
    module_1.IS_CHARACTER_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    str_0 = "P*:;]."
    module_2.match(str_0, str_0)


def test_case_4395():
    str_0 = "Zxv6 )/"
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, tofiledate=none_type_0)
    var_1 = module_1.ndiff(none_type_0, none_type_0, charjunk=var_0)
    module_2.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, lineterm=none_type_0)
    module_0.sub(var_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    complex_0 = 3867.1 + 2882.16605j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    int_0 = -2686
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    float_0 = 542.405
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    int_0 = -2061
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    str_0 = '58lnD\\=8\tca>Uo{"Mn^'
    module_2.get_new_command(str_0, str_0)


def test_case_4403():
    pass


def test_case_4404():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4405():
    int_0 = -1729
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    int_0 = -2583
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    int_0 = 153
    module_0.split(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    complex_0 = -1033.043241 - 3133j
    module_0.fullmatch(complex_0, complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    list_0 = []
    module_0.fullmatch(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    str_0 = "nWx[E9}TAj9\\D,sq_M2|"
    str_1 = "Cg_ae%\x0bw\\\r"
    module_2.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    int_0 = -1293
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    bytes_0 = b"\xac*\xca\xce0"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    set_0 = set()
    var_0 = module_1.get_close_matches(set_0, set_0)
    var_0.set_seqs(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    float_0 = 2957.767
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    int_0 = 3367
    module_4.nlargest(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    complex_0 = 656.277241 - 1582.9j
    module_2.get_new_command(complex_0, complex_0)


def test_case_4420():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    str_0 = "^]"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    none_type_0 = None
    var_0 = module_1.unified_diff(
        list_0, none_type_0, none_type_0, tofiledate=list_0, lineterm=none_type_0
    )
    module_2.match(var_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_4426():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    module_6.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    str_0 = "mBR"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    str_0 = "7oCm}-\x0ce6"
    bool_0 = False
    module_2.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    int_0 = 1044
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    complex_0 = -4318.140859 + 1680.58j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    bytes_0 = b"<\x06\x0b\xe5]\xcd\x8f\xb9\xa3\xb1c&\x12\xde\x07"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    set_0 = set()
    module_0.fullmatch(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    bool_0 = True
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bool_0 = False
    none_type_0 = None
    module_0.findall(bool_0, none_type_0)


def test_case_4435():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    bytes_0 = b'\xb4\xb8+\xad\x87"r\x00\x8e\xac'
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    str_0 = "p&7x(XJ%-R,2\t\\mY"
    list_0 = [str_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    bytes_0 = b"\xba\x05h\x99*\xe5\xd0+\xec\x06\x99\x04\xfe"
    var_0 = module_0.escape(bytes_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    none_type_0 = None
    module_0.Scanner(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    complex_0 = -1314.214051 + 1721j
    module_2.match(complex_0, complex_0)


def test_case_4442():
    str_0 = '\x0b9Wf}yP4^"'
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofiledate=none_type_0
    )
    with pytest.raises(TypeError):
        var_0.__new__(str_0, str_0, str_0, str_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    bytes_0 = b"d!\x8f\x02\xaa\x91\xb8\x9b\x98o"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    bytes_0 = b"B\xdd\xdb\xe1)\x11\x821\xaas\x80\xaf"
    module_1.IS_CHARACTER_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    bytes_0 = b"'3\xf6\xbfE\xaf\xf3rhj"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    bytes_0 = b"\x0f\x82E^\x97k\x01\xc8\xbaj\xd9"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    int_0 = -916
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = -6308
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    int_0 = -341
    module_0.escape(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    str_0 = "^C[\n\x0c-:08M'2W["
    var_0 = module_1.diff_bytes(str_0, str_0, str_0)
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_4451():
    enum_dict_0 = module_6._EnumDict()
    int_0 = -2313
    none_type_0 = None
    module_0.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    list_0 = []
    str_0 = "XW6hEBR"
    none_type_0 = None
    str_1 = "\x0cPKH_"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
    }
    module_0.Match(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    str_0 = "@S*v]"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    tuple_0 = ()
    module_0.template(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    int_0 = 2450
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    bytes_0 = b""
    var_0 = module_0.search(bytes_0, bytes_0)
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_4457():
    bytes_0 = b"\x93ai"
    module_0.subn(bytes_0, bytes_0, bytes_0, flags=bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_4.nlargest(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    int_0 = 1560
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    int_0 = -2375
    module_1.IS_LINE_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    bytes_0 = b"z\xd3\x9f\xdc-"
    module_4.nlargest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.unified_diff(bool_0, bool_0, none_type_0)
    var_0.__reversed__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    bytes_0 = b"\x88e\xe3Q\xfeB\x8f\xb2\x05\xd0<X"
    module_0.template(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4470():
    none_type_0 = None
    str_0 = "(Tg<"
    var_0 = module_1.diff_bytes(
        none_type_0, str_0, none_type_0, tofiledate=str_0, n=none_type_0
    )
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    str_0 = "FJy9rPIucS)"
    none_type_0 = None
    module_0.search(str_0, str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    int_0 = 1174
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    int_0 = -2008
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    none_type_0 = None
    int_0 = 1270
    var_0 = module_1.context_diff(int_0, int_0, int_0, int_0, int_0)
    var_0.find_longest_match(ahi=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    bool_0 = True
    sequence_matcher_0 = module_1.SequenceMatcher(autojunk=bool_0)
    none_type_0 = None
    module_2.get_new_command(sequence_matcher_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    int_0 = 237
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    str_0 = "dB}Iec7`po.\\|"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    bytes_0 = b"\x15Y\xbe\xf7\x9ce\xebA\x8c\xf2C"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    int_0 = -814
    var_0 = module_1.unified_diff(int_0, int_0, tofiledate=int_0, n=int_0)
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    int_0 = -1134
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    bytes_0 = b"\xb7q\x86\xdajB=.\xbb\xa6c\xa2\x1eN-j\xf46\x9b"
    var_0 = module_0.compile(bytes_0)
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0)


def test_case_4484():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.diff_bytes(none_type_1, none_type_1, none_type_1)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    int_0 = 427
    module_1.IS_CHARACTER_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bytes_0 = b"s\x86@\x98\xfdK\x8ew"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    bytes_0 = b"(O\x8f\x1d\xc1\x0em\xe3\xfd\x97\x99\xaf^\xd4S"
    none_type_0 = None
    var_0 = module_1.restore(bytes_0, none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    bytes_0 = b"N\x15g\x85\x8f\x83\xf04\x0c\x99"
    module_1.get_close_matches(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        tofiledate=none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    list_0 = [var_0]
    bool_0 = False
    var_1 = module_1.diff_bytes(bool_0, bool_0, bool_0, n=bool_0, lineterm=bool_0)
    var_1.scan(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    bool_0 = True
    bool_1 = True
    bool_2 = False
    dict_0 = {bool_2: bool_2, bool_2: bool_2}
    var_0 = module_1.restore(dict_0, bool_2)
    var_0.make_file(bool_0, bool_0, context=bool_0, numlines=bool_1, charset=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bool_0 = False
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    dict_0 = {}
    none_type_0 = None
    module_0.split(dict_0, dict_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    str_0 = "M{b"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    complex_0 = -2615.902044 + 429j
    module_1.IS_LINE_JUNK(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    str_0 = "]M"
    var_0 = module_0.findall(str_0, str_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    float_0 = -1596.02544
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    int_0 = -582
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    str_0 = "hoQr0?"
    module_0.template(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    bool_0 = False
    none_type_0 = None
    bool_1 = True
    var_0 = module_1.unified_diff(none_type_0, none_type_0, fromfiledate=bool_1)
    var_0.__call__(bool_0, bool_0, type=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    int_0 = -419
    var_0 = module_1.context_diff(
        int_0, int_0, int_0, fromfiledate=int_0, tofiledate=int_0, n=int_0
    )
    module_1.IS_LINE_JUNK(var_0, var_0)


def test_case_4504():
    float_0 = -1092.892
    with pytest.raises(ValueError):
        module_1.get_close_matches(float_0, float_0, cutoff=float_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    int_0 = -1785
    var_0 = module_1.context_diff(int_0, int_0, int_0, tofiledate=int_0, lineterm=int_0)
    none_type_0 = None
    module_0.Scanner(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4507():
    float_0 = 877.552
    module_1.IS_LINE_JUNK(float_0, float_0)


def test_case_4508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4509():
    float_0 = 3583.56
    module_6.EnumMeta(*float_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    bool_0 = False
    bool_1 = True
    none_type_0 = None
    module_0.finditer(bool_0, bool_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    complex_0 = 54.15424 + 566.5453j
    module_0.compile(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_4514():
    str_0 = "s(I9C["
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    float_0 = -1873.86554
    module_2.match(float_0, float_0)


def test_case_4518():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    int_0 = -602
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    int_0 = 3081
    none_type_0 = None
    module_0.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    bytes_0 = b"y2U\xfbp\x8dR\x80"
    none_type_0 = None
    module_0.fullmatch(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    bytes_0 = b"\xb1zU\xaf\x8e\xfd\xc0"
    differ_0 = module_1.Differ()
    var_0 = differ_0.compare(bytes_0, bytes_0)
    module_2.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    bytes_0 = b"\xd3d\x08\x19\xe1\x94\xcf|\xa9V\x98\\\x87<\x9b"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    int_0 = -1710
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    str_0 = "[nA^UAapQh/U_<A"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    bytes_0 = b"\xf7\x8ds\x1b#g\x8f\xaa\x9a"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    regex_flag_0 = module_0.RegexFlag.TEMPLATE
    module_2.get_new_command(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    str_0 = "Buf(o'"
    module_2.match(str_0, str_0)


def test_case_4531():
    bool_0 = False
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0, defaults=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    int_0 = 1876
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    float_0 = 835.333
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        none_type_0,
        fromfiledate=none_type_0,
        lineterm=none_type_0,
    )
    var_0.find_longest_match(float_0, blo=float_0)


@pytest.mark.xfail(strict=True)
def test_case_4534():
    str_0 = "P?re"
    var_0 = module_1.restore(str_0, str_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4535():
    str_0 = "JC&\rSH~+QTk"
    var_0 = module_1.restore(str_0, str_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_4536():
    var_0 = module_0.purge()
    var_0.find_longest_match()


def test_case_4537():
    str_0 = "<@a&8zi\tZk"
    list_0 = [str_0, str_0]
    with pytest.raises(ValueError):
        module_7.namedtuple(list_0, str_0, rename=str_0)


def test_case_4538():
    str_0 = "Vgm4$|{$\x0cvFT"
    with pytest.raises(ValueError):
        module_7.namedtuple(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    int_0 = -959
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.context_diff(
        bool_0,
        none_type_0,
        tofile=none_type_0,
        tofiledate=none_type_0,
        lineterm=none_type_0,
    )
    bytes_0 = b"\xf3B\xa1\xe1\xf0\x8c\x18\xd7\x84\n\x1f\xea"
    module_1.IS_CHARACTER_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    list_0 = []
    module_1.IS_CHARACTER_JUNK(list_0)


def test_case_4542():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    int_0 = 524
    none_type_0 = None
    module_0.template(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    str_0 = '"yK=^u%]'
    bool_0 = True
    var_0 = module_1.restore(bool_0, bool_0)
    var_0.compare(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    str_0 = "9"
    set_0 = {str_0, str_0, str_0, str_0}
    var_0 = module_1.context_diff(set_0, str_0, tofile=set_0)
    bytes_0 = b'e\xd7\x15\xc7\xed\xc0\xb3\xad\xc1o\xb2d\x04\x8f"\xd8^\xe7'
    dict_0 = {str_0: str_0, str_0: str_0, var_0: bytes_0}
    tuple_0 = (dict_0, var_0, var_0, var_0)
    module_0.finditer(tuple_0, set_0)


def test_case_4546():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    list_0 = [var_0]
    module_5.BaseException(*list_0, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    var_0 = module_0.purge()
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_4549():
    bytes_0 = b"*\xb5"
    none_type_0 = None
    module_0.template(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, bool_0, bool_0, tofiledate=bool_0)
    var_0.make_file(none_type_0, bool_0, context=none_type_0, numlines=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    int_0 = -322
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    str_0 = ",Cd"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    int_0 = 717
    module_0.Scanner(int_0, int_0)


def test_case_4554():
    int_0 = -1051
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, int_0, rename=int_0, defaults=int_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    str_0 = ";0&r8-?}\x0b"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


def test_case_4557():
    complex_0 = -600.18745 + 1061.904j
    with pytest.raises(TypeError):
        module_7.namedtuple(complex_0, complex_0, defaults=complex_0)


def test_case_4558():
    dict_0 = {}
    with pytest.raises(ValueError):
        module_7.namedtuple(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    bytes_0 = b"\xab\xc0C\x0e\x899(O\xe5\x8bq\x95\xc3\x0c\xb41\x86a"
    module_0.split(bytes_0, bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    bytes_0 = b"\xaa\x9c"
    bool_0 = False
    none_type_0 = None
    var_0 = module_4.nlargest(bool_0, bytes_0, none_type_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: var_0}
    var_1 = module_1.context_diff(dict_0, bytes_0, fromfiledate=none_type_0)
    module_0.escape(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, tofiledate=none_type_0)
    dict_0 = {var_0: var_0}
    error_0 = module_0.error(dict_0, pos=none_type_0)
    module_2.get_new_command(error_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    bytes_0 = b"\xc4b\x16\xc9\xf3\xa4\xd0\x16!\xd0\x9c\xe8\x0e\xc7"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_2.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    var_0.__call__(
        none_type_0, none_type_0, none_type_0, type=none_type_0, start=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_4565():
    float_0 = -4997.982
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    bytes_0 = b"\xa3!\xb8\x19\xcf\xab\xb0\x18\x14\xbf\xb15\xf1\xa8\xbaT\xe8I\x8fg"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    float_0 = -89.17044
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    enum_dict_0 = module_6._EnumDict()
    module_0.fullmatch(enum_dict_0, enum_dict_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    str_0 = "\\&mtVz}\t]a!"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    float_0 = -3309.19
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    str_0 = "1%1xNb:=S& Aki\tRD$a\x0b"
    var_0 = module_0.search(str_0, str_0)
    none_type_0 = None
    var_1 = module_1.restore(none_type_0, none_type_0)
    var_1.make_file(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    int_0 = 5279
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    str_0 = "H"
    none_type_0 = None
    var_0 = module_1.ndiff(str_0, none_type_0)
    list_0 = [var_0]
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    float_0 = -2483.538
    var_0 = module_1.context_diff(
        float_0, float_0, tofile=float_0, n=float_0, lineterm=float_0
    )
    dict_0 = {float_0: float_0, var_0: float_0}
    module_6.unique(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bytes_0 = b"A\x88^7Xf"
    bool_0 = True
    module_1.get_close_matches(bool_0, bytes_0, cutoff=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    module_2.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    str_0 = "$"
    var_0 = module_0.sub(str_0, str_0, str_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    int_0 = 406
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    int_0 = 1252
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    set_0 = set()
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    str_0 = "3]AH"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    str_0 = "b\\YGZPcs+U"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4586():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    none_type_0 = None
    str_0 = "Csv0Q?mGo7G,7"
    bool_0 = False
    set_0 = {none_type_0, bool_0}
    dict_0 = {str_0: set_0}
    module_5.BaseException(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    none_type_0 = None
    str_0 = "=rp"
    dict_0 = {str_0: none_type_0}
    module_5.BaseException(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    float_0 = 3626.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


def test_case_4594():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4595():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = -504
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    int_0 = 1744
    var_0 = module_1.context_diff(int_0, int_0)
    var_1 = module_0.purge()
    var_1.make_table(var_0, int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    none_type_0 = None
    set_0 = set()
    module_2.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.sub(none_type_0, none_type_0, none_type_0, flags=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    list_0 = []
    float_0 = 3289.4294
    var_0 = module_1.unified_diff(list_0, float_0, lineterm=list_0)
    var_1 = module_1.restore(var_0, var_0)
    module_2.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    float_0 = 1858.446164
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    int_0 = 3505
    module_2.match(int_0, int_0)


def test_case_4605():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, rename=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    int_0 = -4718
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    float_0 = 52.70347
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    bool_0 = False
    int_0 = 2276
    module_4.nlargest(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    str_0 = "=w#=P"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    bool_0 = True
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    float_0 = -3691.00669
    module_1.get_close_matches(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    str_0 = "7Dv\rjR'W4t<]$G4{%"
    var_0 = module_0.purge()
    var_0.__getitem__(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    float_0 = -2121.0
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    var_0.make_file(none_type_0, none_type_0, none_type_0, none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    tuple_0 = ()
    module_2.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
    )
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4619():
    float_0 = -448.066301
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    int_0 = 3291
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    str_0 = '23~dpF"'
    error_0 = module_0.error(str_0)
    module_2.match(error_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    float_0 = 3379.2481
    dict_0 = {float_0: float_0, float_0: float_0}
    module_2.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    bytes_0 = b"((G\x1bX\x16\x1a`\xe8H\xfe\x86:\x02E\x9c\x13"
    tuple_0 = (bytes_0,)
    module_0.findall(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    set_0 = set()
    module_0.search(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    int_0 = 337
    list_0 = []
    sequence_matcher_0 = module_1.SequenceMatcher(list_0)
    var_0 = module_0.purge()
    dict_0 = {int_0: sequence_matcher_0, var_0: int_0, var_0: int_0}
    complex_0 = 889.62 - 483.7157j
    tuple_0 = (int_0, list_0, dict_0, complex_0)
    module_2.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    float_0 = -6177.8023
    module_0.findall(float_0, float_0)


def test_case_4630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4631():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    str_0 = "lXC{+dhzNP0Yz$n!<O"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    exception_0 = module_5.Exception()
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.restore(none_type_1, none_type_1)
    var_0.make_file(exception_0, exception_0, todesc=none_type_0, context=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bytes_0 = b"\xc8\xe0\xd1\x01\xd6%Us\xf7g\x98"
    var_0 = module_0.match(bytes_0, bytes_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    bool_0 = True
    none_type_0 = None
    module_0.findall(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_2.match(regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    var_0 = module_0.purge()
    var_0.__reversed__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    int_0 = 1624
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    none_type_0 = None
    list_0 = []
    var_0 = module_1.IS_CHARACTER_JUNK(none_type_0, list_0)
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    int_0 = 1627
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    str_0 = "/r?kX"
    module_0.search(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    float_0 = 1421.0
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    str_0 = "lK''3SR'F"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    bytes_0 = b"\xb4\xe0"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    bytes_0 = b"\xb9\xe4\xe4\xaf\xd7\xe2"
    set_0 = {bytes_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    str_0 = "L(p%Aoa)nn]CN"
    var_0 = module_0.search(str_0, str_0)
    module_2.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


def test_case_4649():
    none_type_0 = None
    tuple_0 = ()
    var_0 = module_1.restore(tuple_0, tuple_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    str_0 = ""
    none_type_0 = None
    module_0.split(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    bool_0 = False
    sequence_matcher_0 = module_1.SequenceMatcher(bool_0)
    module_2.match(sequence_matcher_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    int_0 = 2684
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    float_0 = -16.09
    module_0.finditer(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    bytes_0 = b"\x0c\x84\xfd/\xd3\xa8\xfap\xb3\xb7\xd8\x1bTD"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    bytes_0 = b"~\xf3\xbb"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    str_0 = ">y#2ST0^Dh6i"
    var_0 = module_0.template(str_0)
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    int_0 = -707
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    var_0 = module_0.purge()
    module_0.fullmatch(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    float_0 = -2002.0
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_2.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    float_0 = 505.402
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    int_0 = 3368
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    bytes_0 = b"wY"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_2.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    bool_0 = False
    module_1.SequenceMatcher(b=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    bool_0 = True
    var_0 = module_1.restore(bool_0, bool_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_4670():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4671():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    var_0 = module_0.purge()
    set_0 = {var_0, var_0}
    module_2.match(set_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    str_0 = "]A0aMqj,8W/Ip#"
    var_0 = module_0.search(str_0, str_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    str_0 = "K#GXgm54u=RE@Hv_xXt&"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    set_0 = set()
    var_0 = module_0.purge()
    var_0.__len__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    set_0 = set()
    none_type_0 = None
    module_0.compile(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    bytes_0 = b"\x9f4\xaa\xbc\xf4\x9f\x12\xd4\xa4\x0f\xc3\t"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    str_0 = "{.FLwt;"
    var_0 = module_0.purge()
    var_0.set_seq1(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4680():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(none_type_0, list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    str_0 = "fxa!p"
    set_0 = {str_0, str_0}
    sequence_matcher_0 = module_1.SequenceMatcher(set_0, str_0, autojunk=set_0)
    module_2.get_new_command(sequence_matcher_0, sequence_matcher_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    int_0 = -919
    sequence_matcher_0 = module_1.SequenceMatcher(int_0, int_0)
    sequence_matcher_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_4683():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.__len__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    list_0 = []
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    str_0 = "#{)}<VX6V23o,h(LTUZ"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    bool_0 = True
    none_type_0 = None
    module_0.sub(bool_0, none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    str_0 = "P@=i$0o`W/I"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    bytes_0 = b"\x057\xc3\x8f\x06S\xe9\xc8YA\x94\x1f\xf5\xc3\x0cm\x1e["
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bytes_0,
        none_type_0,
        tofile=none_type_0,
        fromfiledate=none_type_0,
        tofiledate=bytes_0,
    )
    var_1 = module_1.context_diff(var_0, none_type_0, bytes_0)
    module_2.match(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    float_0 = -318.78979
    module_0.escape(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    bytes_0 = b"\r\xd3\xf2^b6\xee\x82i\x10\x8b\xaf\x8e\xc8\xfa\n\xaa"
    none_type_0 = None
    module_0.finditer(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    none_type_0 = None
    str_0 = "1,\\ji\x0bxc[W8\"4]K'"
    module_2.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4694():
    int_0 = 2065
    none_type_0 = None
    module_0.findall(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    bool_0 = False
    module_1.SequenceMatcher(b=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    none_type_0 = None
    bytes_0 = b"\x96\x00\x90J\x08\x89\xd0UB\xc4\xd2\x17\x8a\xac\xe5\x84\x98%B\xb0"
    var_0 = module_1.context_diff(
        none_type_0, bytes_0, none_type_0, bytes_0, lineterm=none_type_0
    )
    module_2.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    int_0 = 519
    module_0.fullmatch(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    none_type_0 = None
    module_0.compile(none_type_0)


def test_case_4700():
    bool_0 = True
    with pytest.raises(TypeError):
        module_7.namedtuple(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    int_0 = 5301
    dict_0 = {}
    none_type_0 = None
    var_0 = module_1.ndiff(dict_0, none_type_0)
    var_0.set_seqs(int_0, int_0)


def test_case_4702():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4703():
    int_0 = -1110
    module_2.get_new_command(int_0, int_0)


def test_case_4704():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        tofiledate=none_type_0,
        lineterm=none_type_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_4705():
    set_0 = set()
    module_4.nlargest(set_0, set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    bool_0 = False
    module_0.escape(bool_0)


def test_case_4707():
    bytes_0 = b"$\x04\x95\xefy\x9d\xf8v+M\x1cn9~%\xf9\xf9"
    var_0 = module_1.IS_CHARACTER_JUNK(bytes_0, bytes_0)
    var_1 = var_0.__dir__()
    tuple_0 = (var_1,)
    with pytest.raises(ValueError):
        module_7.namedtuple(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    bool_0 = False
    var_0 = module_1.unified_diff(bool_0, bool_0)
    set_0 = {bool_0, bool_0, var_0, bool_0}
    module_4.nlargest(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    str_0 = "?$8"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, none_type_0)
    var_1 = module_1.context_diff(var_0, none_type_0, var_0, var_0, none_type_0)
    var_1.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_4714():
    float_0 = 3169.77
    module_0.match(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    float_0 = 1532.66463
    var_0 = module_1.restore(float_0, float_0)
    module_2.match(var_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    int_0 = -168
    none_type_0 = None
    module_0.match(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    str_0 = '9I9?JQK[DnW"Mc3'
    module_0.sub(str_0, str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    tuple_0 = ()
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, tofile=none_type_0, lineterm=none_type_0
    )
    var_0.compare(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bytes_0 = b"\xf2\nW\x1fm\x99\x9a!be3"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    float_0 = -3032.54
    tuple_0 = (float_0,)
    module_0.finditer(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    set_0 = set()
    none_type_0 = None
    var_0 = module_1.restore(set_0, none_type_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4724():
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    dict_0 = {}
    none_type_0 = None
    module_0.split(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    bytes_0 = b"\xedQ\xe8\xb0\xe3\xfd\x93\xf1\x18q\xf7{\x0e3\x1c\xa7\xa53"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_2.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    float_0 = 2084.727
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    float_0 = 2797.3889
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    str_0 = "',g?p8T^40qwe%]"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    str_0 = "G/-+\tX!j@|o- \nVR"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    set_0 = set()
    var_0 = module_1.restore(set_0, set_0)
    module_2.match(var_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    float_0 = -2822.204
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    str_0 = "'Z\x0bUAA7KjQB_"
    list_0 = [dict_0, str_0]
    var_0 = module_1.diff_bytes(
        dict_0, none_type_0, none_type_0, none_type_0, tofiledate=list_0
    )
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        tofiledate=none_type_0,
        n=none_type_0,
    )
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    int_0 = -1284
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    str_0 = "#&OasZ6d&4"
    var_0 = module_0.compile(str_0)
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    bool_0 = False
    var_0 = module_0.purge()
    var_0.compare(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    int_0 = 1027
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    var_0 = module_0.purge()
    int_0 = -1122
    int_1 = -291
    dict_0 = {int_1: int_1}
    none_type_0 = None
    var_1 = module_1.restore(dict_0, none_type_0)
    none_type_1 = None
    sequence_matcher_0 = module_1.SequenceMatcher(none_type_1)
    var_2 = sequence_matcher_0.set_seq1(var_1)
    var_2.set_seq1(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4743():
    float_0 = -617.0
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    float_0 = -457.859118
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    var_0 = module_0.purge()
    none_type_0 = None
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    str_0 = "!;^_EWHKI(&lV"
    str_1 = " Qw&<c0R0]93gXF"
    module_2.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    bytes_0 = b""
    var_0 = module_0.match(bytes_0, bytes_0)
    var_0.find_longest_match()


@pytest.mark.xfail(strict=True)
def test_case_4748():
    int_0 = 1225
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    str_0 = 'E,SR`.?TD%="X6'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    int_0 = -454
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    complex_0 = -974.5 + 170.56j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    int_0 = 3324
    list_0 = [int_0]
    list_1 = [list_0, int_0]
    module_2.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    tuple_0 = ()
    module_0.subn(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    int_0 = -1838
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    float_0 = -118.70572
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    var_0 = module_0.purge()
    var_1 = var_0.__dir__()
    int_0 = -815
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    float_0 = 5836.7
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    bytes_0 = b"0c\\\x95D.\x9c\x07\xb7\x98"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    int_0 = -998
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__setattr__(int_0, int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    bool_0 = True
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    bool_0 = False
    none_type_0 = None
    module_0.split(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    str_0 = "KtO^68:6x{umZAR d"
    module_0.findall(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    float_0 = 4242.8533
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    list_0 = []
    none_type_0 = None
    var_0 = module_1.restore(list_0, none_type_0)
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_4769():
    bool_0 = False
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    none_type_0 = None
    str_0 = "@1'#tA"
    module_2.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    float_0 = -1235.207912
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    int_0 = -835
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    float_0 = -2536.27335
    module_1.IS_LINE_JUNK(float_0)


def test_case_4775():
    int_0 = 2250
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    str_0 = "cXqGC\\M"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    var_0 = module_0.purge()
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    str_0 = "|d`nPmcM"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    bytes_0 = b"\x85 \xf0\xe8\xb0\xc2s\xe6T\xa1\xc6"
    var_0 = module_1.ndiff(bytes_0, bytes_0, charjunk=bytes_0)
    none_type_0 = None
    var_1 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, none_type_0, tofiledate=none_type_0
    )
    var_1.set_seq2(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, none_type_0, n=none_type_0, lineterm=none_type_0
    )
    bytes_0 = b"\x9c\x98QZ(\x8c\xcc\xc6\x95%2+\xc6VC\xa5"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    int_0 = -1344
    var_0 = module_1.unified_diff(int_0, int_0)
    set_0 = {var_0, var_0}
    module_2.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    float_0 = -1002.65
    module_0.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    bytes_0 = b"@\xe9"
    var_0 = module_0.split(bytes_0, bytes_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4787():
    tuple_0 = ()
    module_1.IS_CHARACTER_JUNK(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bytes_0 = b"\xc2\xd4"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    int_0 = -742
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    bool_0 = True
    str_0 = "jFtz`Q*mPmBf(<"
    module_0.search(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    module_2.match(var_0, var_0)


def test_case_4793():
    float_0 = -1014.341781
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    with pytest.raises(ValueError):
        module_1.get_close_matches(dict_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    bytes_0 = b"\xa5\xbc\xb3\xd1\xdd\x0e\xffz[H\xf8\xe9;(+"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    bytes_0 = b"\x84\x95\xd5\x19r\x1f<\x11\x8es\xbb\x89>e\n\x07\xce"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    bool_0 = True
    var_0 = module_1.restore(bool_0, bool_0)
    bytes_0 = b""
    none_type_0 = None
    var_1 = module_1.context_diff(bytes_0, bytes_0, tofile=none_type_0)
    var_2 = module_1.ndiff(var_1, none_type_0)
    var_2.__call__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    str_0 = "qC="
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    float_0 = -2719.0
    bytes_0 = b"\x17O\xe4\x94\xad"
    var_0 = module_1.context_diff(float_0, float_0, tofiledate=bytes_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_4801():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    float_0 = 1858.676512
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    int_0 = 597
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    int_0 = -742
    module_1.IS_LINE_JUNK(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    int_0 = -342
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    complex_0 = 4004.992 - 1048.8j
    tuple_0 = (complex_0,)
    module_2.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    bool_0 = False
    module_0.search(bool_0, bool_0)


def test_case_4809():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.diff_bytes(none_type_1, none_type_1, none_type_1)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    bytes_0 = b"T\xc9\xd8T\xf5\x8f-\xd4\xd8"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    str_0 = "%YS'"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    html_diff_0 = module_1.HtmlDiff()
    none_type_0 = None
    module_0.sub(html_diff_0, html_diff_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    bytes_0 = b"\xe6\xb3\x1c\xb8\xd4\n2c/\xe8?\x8f\x17\xaf"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    str_0 = "x>zPlWg_\r"
    list_0 = [str_0, str_0]
    module_2.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    int_0 = 946
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    bytes_0 = b"8 \x9a\x96\xc5\x9f\x14\xb6\x0e\x83\x8d"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


def test_case_4818():
    none_type_0 = None
    float_0 = -1905.11768
    var_0 = module_1.context_diff(float_0, float_0, tofiledate=float_0)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    bool_0 = False
    var_0 = module_1.restore(bool_0, bool_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_4822():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bytes_0 = b"\xa7Z\xef\x02G\x02\x9c\x82\xb6"
    none_type_0 = None
    module_0.search(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    list_0 = []
    module_5.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    set_0 = set()
    module_0.finditer(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    str_0 = "(q;t&\n)G;/jwcA"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    float_0 = 2568.449625
    module_6.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.IS_CHARACTER_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    int_0 = -1834
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    list_0 = []
    none_type_0 = None
    module_4.nlargest(list_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    str_0 = "a[dd"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    int_0 = -2314
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    int_0 = 1622
    dict_0 = {int_0: int_0, int_0: int_0}
    module_2.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    complex_0 = 1421.154083 - 2384.697182j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    auto_0 = module_6.auto()
    sequence_matcher_0 = module_1.SequenceMatcher(a=auto_0)
    module_2.match(sequence_matcher_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    int_0 = 2491
    bool_0 = False
    var_0 = module_1.ndiff(bool_0, bool_0, charjunk=bool_0)
    var_0.__reversed__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    bytes_0 = b"$\xa3x\xf9\x90\xd2\xc6*\xfd\x10\xe7\x9a\xfc2\x11"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    error_0 = module_3.Error()
    float_0 = 424.3374
    bytes_0 = b"\xcd\xb0\x86"
    var_0 = module_0.findall(bytes_0, bytes_0)
    var_0.find_longest_match(bhi=float_0)


def test_case_4846():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    bytes_0 = b"\xcf\xffE\xa0\x1d\xae\xff\x18"
    float_0 = 415.2
    module_2.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4849():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    str_0 = "x}hO%pN6~+\x0b"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    bytes_0 = b"\xff\xef\xe5\xe5\x8bS\xa6\xfc*\xe3'"
    module_4.nlargest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    str_0 = "}z:-8=snfFM"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.IS_CHARACTER_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    float_0 = 3704.8211
    list_0 = [float_0, float_0, float_0]
    list_1 = [float_0, float_0, float_0, list_0]
    module_2.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    float_0 = -3604.4995
    module_1.get_close_matches(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    bool_0 = True
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    var_1 = module_1.unified_diff(
        var_0,
        var_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
        lineterm=none_type_0,
    )
    float_0 = -562.30742
    module_6.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_2.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    bool_0 = True
    var_0 = module_1.ndiff(bool_0, bool_0)
    dict_0 = {}
    module_4.nlargest(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    float_0 = -2535.219
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    bytes_0 = b"\x08\xdfF_`\x83"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bytes_0 = b"\xd5\xe1\xab\xaf\x96\x96\xd1"
    list_0 = [bytes_0, bytes_0]
    module_0.sub(list_0, bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    int_0 = 868
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    str_0 = "Tp-o"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    str_0 = "<nGZeIkJ/N-LRV)"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    complex_0 = 2596.6917 + 34.535j
    module_0.findall(complex_0, complex_0)


def test_case_4871():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        tofiledate=none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4874():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    int_0 = 2601
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    str_0 = "dEdU1w|u0hA'ZhA\x0b71a\t"
    module_2.match(str_0, str_0)


def test_case_4877():
    int_0 = 1786
    with pytest.raises(TypeError):
        module_7.namedtuple(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    bool_0 = True
    module_4.nlargest(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    bytes_0 = b"\x12\xbb\x98\x9b\x11\xa2"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    bytes_0 = b"\x11\x05\x11\xa9\xb5m\x98Z"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    object_0 = module_5.object()
    var_0 = module_1.ndiff(object_0, object_0)
    module_1.get_close_matches(var_0, var_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    float_0 = -2655.275
    set_0 = {float_0, float_0, float_0}
    module_0.escape(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    bytes_0 = b""
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4885():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    int_0 = -888
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    bytes_0 = b"\xa6\xa60J\xf3V\xec\xbb\xd9\xfb\xa1\xc4\x1f%\xdf\x81\xde^"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    bool_0 = False
    module_1.IS_CHARACTER_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    float_0 = -90.607126
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_2.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    bytes_0 = b"P\x07J\xe6\xa3\x86E;\xa07\xdf\x8d\x94H1+o\x98"
    list_0 = [bytes_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    bytes_0 = b"X\x89,mfd;\xad\xb6\x8d"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    int_0 = 931
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    int_0 = 278
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    float_0 = -2798.65
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    list_0 = []
    var_0 = module_0.purge()
    var_0.__getitem__(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    var_0 = module_0.purge()
    module_1.IS_CHARACTER_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    int_0 = 1850
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4903():
    list_0 = []
    module_0.template(list_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    bytes_0 = b'*`\n\xcd4\x96oLO\xcfZ"c\xb3'
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    dict_0 = {}
    none_type_0 = None
    var_0 = module_1.context_diff(
        dict_0, dict_0, dict_0, dict_0, tofiledate=dict_0, lineterm=none_type_0
    )
    var_0.set_seqs(dict_0, dict_0)


def test_case_4906():
    var_0 = module_0.purge()
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    int_0 = 79
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        tofiledate=none_type_0,
    )
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_4909():
    float_0 = -5698.15998
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    set_0 = set()
    var_0 = module_1.get_close_matches(set_0, set_0)
    module_1.IS_LINE_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    bytes_0 = b"\x86\x02\x0b\xfd\xc1"
    var_0 = module_1.diff_bytes(
        bytes_0, bytes_0, bytes_0, fromfiledate=bytes_0, lineterm=bytes_0
    )
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4913():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_2.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    bool_0 = False
    set_0 = {bool_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0,
        none_type_0,
        fromfiledate=none_type_0,
        n=none_type_0,
        lineterm=none_type_0,
    )
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4916():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, n=none_type_0, lineterm=none_type_0
    )
    set_0 = {var_0}
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    str_0 = 'SRm=d_"!\x0c'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    int_0 = -1159
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
    )
    module_2.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    complex_0 = -3782 - 3754j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_2.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    int_0 = 4510
    var_0 = module_1.restore(int_0, int_0)
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    float_0 = 35.5463
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    int_0 = -4612
    int_1 = -2298
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    var_0.__contains__(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    bool_0 = True
    var_0 = module_1.ndiff(bool_0, bool_0)
    module_0.split(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    int_0 = -3319
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    complex_0 = -2696.9 - 80.0305j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    none_type_0 = None
    list_0 = [none_type_0]
    var_0 = module_1.context_diff(none_type_0, none_type_0, list_0, tofiledate=list_0)
    var_1 = module_0.purge()
    var_1.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4931():
    bytes_0 = b"rP\xc5!r`4j\xc3N\x98\xed\xa6qL"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bool_0 = True
    int_0 = 1508
    module_2.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_0.compile(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_2.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    int_0 = -1088
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    bytes_0 = b"\xa3\xb3\xd8c\xb1\xe0\xc6\xb5bG\x84"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_1 = module_1.restore(var_0, var_0)
    module_0.template(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4941():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0, none_type_0, defaults=none_type_0, module=none_type_0
        )


@pytest.mark.xfail(strict=True)
def test_case_4942():
    str_0 = ">TxPTBeZ15W,a"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(autojunk=none_type_0)
    var_0 = sequence_matcher_0.get_matching_blocks()
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_4945():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofiledate=none_type_0
    )
    module_0.sub(var_0, var_0, none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    int_0 = 3863
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    int_0 = -1406
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.template(set_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        fromfiledate=none_type_0,
        lineterm=none_type_0,
    )
    dict_0 = {var_0: var_0, none_type_0: var_0}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    none_type_0 = None
    module_0.fullmatch(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    int_0 = 1356
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    float_0 = -2366.066
    list_0 = []
    list_1 = [float_0, float_0, float_0, list_0]
    list_2 = []
    var_0 = module_1.IS_CHARACTER_JUNK(list_2, list_2)
    var_0.make_table(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    str_0 = "dVq>@%c{B'3Ds\rpwdgY"
    str_1 = '"B<1)*47DeFd\x0bz'
    str_2 = "/j;\x0bFis#sN\\$'/DOx,g"
    str_3 = "68lzb*0\t|N1@"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1, str_3: str_1}
    module_6.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    str_0 = "%?H/1^n%$8@O3EwffM\n"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    str_0 = "Apqgn\x0bqPC((djK+J<;"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    str_0 = 'gh"Zkoh'
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.ndiff(none_type_1, none_type_1, none_type_1, none_type_1)
    var_0.make_table(none_type_0, none_type_0, numlines=none_type_0)


def test_case_4962():
    int_0 = 336
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = sequence_matcher_0.get_matching_blocks()
    with pytest.raises(AttributeError):
        var_0.__getattr__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_4964():
    int_0 = 203
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    list_0 = []
    error_0 = module_3.Error(*list_0)
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_4966():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        regex_flag_0, none_type_0, regex_flag_0, fromfiledate=none_type_0
    )
    module_2.match(regex_flag_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    int_0 = 3621
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    bool_0 = True
    module_0.split(bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    none_type_0 = None
    bool_0 = True
    module_1.IS_CHARACTER_JUNK(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    str_0 = "yL&"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    int_0 = -1605
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    int_0 = 3485
    set_0 = {int_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    int_0 = 1123
    module_0.sub(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    none_type_0 = None
    str_0 = "Z4~ga"
    module_2.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    none_type_0 = None
    module_2.get_new_command(regex_flag_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    str_0 = ")=+kR9}Z\n-m"
    error_0 = module_0.error(str_0)
    module_2.match(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    str_0 = "E\r+r;"
    none_type_0 = None
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    int_0 = -883
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    enum_dict_0 = module_6._EnumDict()
    str_0 = "=xQa+-ehg7"
    none_type_0 = None
    module_1.get_close_matches(str_0, none_type_0, cutoff=str_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    bytes_0 = b""
    none_type_0 = None
    module_0.findall(bytes_0, bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    bool_0 = False
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    bytes_0 = b" ^9\r"
    dict_0 = {bytes_0: bytes_0}
    var_0 = module_0.purge()
    var_0.compare(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    tuple_0 = ()
    module_6.EnumMeta(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_4989():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    int_0 = 2436
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    error_0 = module_3.Error()
    var_0 = module_1.context_diff(error_0, error_0, fromfiledate=error_0, n=error_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_4993():
    str_0 = "q2O6"
    var_0 = module_0.sub(str_0, str_0, str_0)
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_4994():
    enum_dict_0 = module_6._EnumDict()
    module_0.compile(enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    set_0 = set()
    module_0.finditer(set_0, set_0)


def test_case_4996():
    var_0 = module_0.purge()


@pytest.mark.xfail(strict=True)
def test_case_4997():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    var_0 = module_1.ndiff(none_type_0, set_0)
    int_0 = -1087
    module_0.compile(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    complex_0 = -1919.224829 + 152j
    none_type_0 = None
    module_2.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    str_0 = "%D=G#Gsg|S?#|"
    bool_0 = True
    module_2.match(str_0, bool_0)


def test_case_5002():
    regex_flag_0 = module_0.RegexFlag.DOTALL
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        regex_flag_0, regex_flag_0, regex_flag_0, tofiledate=none_type_0, n=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_5003():
    bytes_0 = b"lw\x0er\x10\xc2\x0f\xc1["
    module_0.template(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    float_0 = -2221.22
    list_0 = [float_0, float_0, float_0]
    module_0.subn(list_0, float_0, list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    str_0 = "2h/k.,O4"
    dict_0 = {str_0: str_0}
    module_5.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    int_0 = 1588
    var_0 = module_1.unified_diff(int_0, int_0, tofile=int_0, n=int_0)
    module_0.finditer(var_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    none_type_0 = None
    bytes_0 = b"6|9D\x80\xf2\x7f\xf3>\x06mKl"
    module_0.search(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bool_0, none_type_0, fromfiledate=none_type_0, tofiledate=bool_0
    )
    module_0.compile(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    float_0 = -206.3158
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


def test_case_5010():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, module=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, none_type_0, set_0)


def test_case_5012():
    enum_dict_0 = module_6._EnumDict()


@pytest.mark.xfail(strict=True)
def test_case_5013():
    bytes_0 = b"\xc7\x80#\x0f\xd4\xf3\x9c\xf6\x0e($|\xad\x8f}o;"
    list_0 = [bytes_0, bytes_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    int_0 = 687
    none_type_0 = None
    module_0.finditer(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    bytes_0 = b"I\x01\x16e\t\xc7A\x80\xa3D\xf0"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    none_type_0 = None
    bytes_0 = b"\xff\x8c\x13+n\xac\x97\xa9"
    none_type_1 = None
    var_0 = module_1.ndiff(bytes_0, none_type_1, none_type_1)
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    str_0 = "Iyt"
    none_type_0 = None
    module_0.template(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    float_0 = 2075.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    var_0 = module_0.purge()
    module_0.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        lineterm=none_type_0,
    )
    module_2.match(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    int_0 = -2597
    dict_0 = {int_0: int_0}
    module_2.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    str_0 = "\x0bFp1:Y"
    var_0 = module_0.fullmatch(str_0, str_0)
    module_1.IS_CHARACTER_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    tuple_0 = ()
    var_0 = module_1.restore(tuple_0, tuple_0)
    list_0 = [var_0, tuple_0]
    module_0.finditer(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    str_0 = "{]7=^ziMn"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, tofile=none_type_0
    )
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    str_0 = "5 oJM{DN^>9rKW4IJ]L"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    str_0 = "#=h\n0;s/c"
    var_0 = module_1.IS_LINE_JUNK(str_0)
    module_0.finditer(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    bool_0 = False
    var_0 = module_0.purge()
    var_1 = module_1.unified_diff(bool_0, var_0)
    module_2.match(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    bytes_0 = b"\xb3o\x9e\x16\xba\xa3\x12J"
    list_0 = [bytes_0]
    module_2.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    float_0 = -1684.0
    module_1.IS_CHARACTER_JUNK(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    dict_0 = {}
    var_0 = module_0.purge()
    module_2.get_new_command(dict_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    enum_dict_0 = module_6._EnumDict()
    var_0 = module_1.restore(enum_dict_0, enum_dict_0)
    differ_0 = module_1.Differ(var_0)
    module_0.template(differ_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    bytes_0 = b"='x\x08#\xda"
    module_2.get_new_command(bytes_0, bytes_0)


def test_case_5035():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5036():
    base_exception_0 = module_5.BaseException()
    none_type_0 = None
    module_2.match(base_exception_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    str_0 = " 3iE|?s"
    str_1 = "yM"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1, str_1: str_1}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    bytes_0 = b'"\x80\x0bk\xeb\x898?rM\xd4\x00:\x07O\xe4\x8aF\x97'
    list_0 = [bytes_0, bytes_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    float_0 = 223.85
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5041():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5042():
    bool_0 = False
    none_type_0 = None
    module_2.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    var_0.__contains__(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    var_0 = module_0.purge()
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.findall(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    int_0 = -2302
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    dict_0 = {}
    none_type_0 = None
    complex_0 = 1019.50204 + 673.66115j
    str_0 = "jr\x0c"
    var_0 = module_1.diff_bytes(
        complex_0, complex_0, complex_0, fromfiledate=complex_0, n=str_0, lineterm=str_0
    )
    var_0.__delattr__(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    int_0 = 5093
    list_0 = [int_0, int_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    enum_dict_0 = module_6._EnumDict()
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    none_type_0 = None
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, none_type_0)
    module_0.search(var_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    dict_0 = {}
    module_0.split(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, charjunk=none_type_0)
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    complex_0 = 1186.394488 - 2578.69j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bytes_0 = b"D\x11\x18\x0fzP\xf4;v~?E\xa4\x87\xe6\xe1\x85\xd3"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    bytes_0 = b"O\xaa\xfaz\x19\xaa\xa3\x88\xaaS\x89\xc3\xd8\xd6\xb8'\n"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    var_0 = module_0.purge()
    module_0.split(var_0, var_0, flags=var_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bytes_0 = b"\xe5\xf1\x04\x0c{\x12P\xb8\x85\x96\xd5\x8ay\xd5"
    set_0 = {bytes_0, bytes_0}
    module_2.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_2.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    bytes_0 = b"k\xf3\x85\x0b>F\xf3JY"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    list_0 = []
    module_0.template(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    int_0 = -4184
    none_type_0 = None
    var_0 = module_1.unified_diff(int_0, int_0, tofiledate=int_0)
    var_0.set_seq1(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    var_0 = module_0.purge()
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_5066():
    bytes_0 = b""
    module_0.Match(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    str_0 = "|>V4gDz5=Pb`y"
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    set_0 = {var_0, var_0}
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    bytes_0 = b"\x0b\xd0\xd4\xaa\xb8\x1c\x1c\xaf\x11\xcc\x93"
    module_6.unique(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    bytes_0 = b"\x95\xce \xfa\x15o\x0f\xd5\x16q\x01\xc6:\xbe\xdd"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    var_0 = module_0.purge()
    set_0 = {var_0}
    module_2.get_new_command(set_0, var_0)


def test_case_5074():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5075():
    bytes_0 = b"\x87\xcb\xdeDnm\xc4\xfd[\x18\x13\x8e\xfa\xcb"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    int_0 = 1386
    auto_0 = module_6.auto()
    module_2.match(int_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    bool_0 = False
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5082():
    float_0 = -8.0
    module_1.IS_LINE_JUNK(float_0)


def test_case_5083():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.restore(none_type_0, none_type_0)
    with pytest.raises(AttributeError):
        var_0.__getattr__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bytes_0 = b"cxD5\xab\xeb\xcd]\xa1\xbd"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    bytes_0 = b"\xbeLl\x1d\xc5\xa3e"
    bytes_1 = b"\xa5f|\x9c]\x8d\x91\xa6\xfd\xcc"
    tuple_0 = (bytes_0, bytes_1)
    none_type_0 = None
    module_2.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    bytes_0 = b"9\xc00\xf9e/[\xdf"
    module_2.get_new_command(bytes_0, bytes_0)


def test_case_5090():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.context_diff(none_type_1, none_type_1, tofiledate=none_type_1)
    with pytest.raises(TypeError):
        var_0.__new__(none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    str_0 = "#fM~FL"
    none_type_0 = None
    str_1 = "ToF\\RGv5"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    int_0 = -3386
    none_type_0 = None
    var_0 = module_1.context_diff(int_0, int_0, none_type_0, int_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    int_0 = 1348
    module_0.search(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    float_0 = 1416.652
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    base_exception_0 = module_5.BaseException(*list_0)
    html_diff_0 = module_1.HtmlDiff()
    none_type_1 = None
    var_0 = module_1.context_diff(
        html_diff_0, html_diff_0, fromfiledate=none_type_1, lineterm=html_diff_0
    )
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_5096():
    bytes_0 = b"\x81\x0f?\x96T\x83\x18|\xee\xed\xebY\xadO7\xe0\xe4\xf9\xb6\xef"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0]
    module_0.search(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        list_1, list_0, none_type_0, fromfiledate=list_0, lineterm=list_1
    )
    module_0.subn(var_0, list_1, var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    str_0 = "#RLG6DX&%\np9ELDCf9RU"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    int_0 = -916
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    var_0 = module_1.context_diff(list_0, int_0, list_0, tofiledate=none_type_0)
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_5100():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    var_0 = module_0.purge()
    float_0 = 2151.4
    none_type_0 = None
    var_1 = module_1.diff_bytes(float_0, float_0, float_0, n=none_type_0)
    var_1.__setitem__(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    bytes_0 = b"\xb3XH\xca"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    bytes_0 = b"\xd5"
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bytes_0, bytes_0, tofile=bytes_0, fromfiledate=bytes_0, tofiledate=none_type_0
    )
    module_2.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    bytes_0 = b"\xa0\x8f\xb0\x1e\xf1^\xebd\x8a\xbf"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    int_0 = 3677
    module_1.IS_LINE_JUNK(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    bool_0 = True
    module_0.escape(bool_0)


def test_case_5107():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5108():
    var_0 = module_0.purge()
    module_0.subn(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    none_type_0 = None
    var_0 = module_0.purge()
    module_2.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    str_0 = "N7CoJj/x([|D,\x0b"
    var_0 = module_1.unified_diff(
        str_0, str_0, tofile=str_0, fromfiledate=str_0, n=str_0
    )
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.diff_bytes(bool_0, none_type_0, bool_0, fromfiledate=none_type_0)
    module_0.search(bool_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    str_0 = "XpA3"
    var_0 = module_0.finditer(str_0, str_0)
    str_1 = '1D#m{x2FJ"\r'
    str_2 = "a\r."
    dict_0 = {str_0: var_0, str_1: str_0, str_2: var_0, str_0: var_0}
    module_1.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    float_0 = -2676.207
    var_0 = module_0.purge()
    var_0.__call__(float_0, float_0, module=float_0, start=float_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    str_0 = '^1nPA3-h9"ZX'
    none_type_0 = None
    var_0 = module_1.restore(str_0, none_type_0)
    module_2.match(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    bytes_0 = b"yR\xf2G\x81\x07\xcc\xb6\xbe\x1d\x9e0"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    enum_dict_0 = module_6._EnumDict()
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, lineterm=none_type_0)
    var_0.real_quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_5118():
    regex_flag_0 = module_0.RegexFlag.IGNORECASE
    module_0.search(regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    bool_0 = True
    module_0.compile(bool_0)


def test_case_5120():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, none_type_0, lineterm=none_type_0
    )


@pytest.mark.xfail(strict=True)
def test_case_5121():
    dict_0 = {}
    module_0.finditer(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    var_0 = module_0.purge()
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_5123():
    str_0 = "<yT+=3He_) n1jT)hV`m"
    tuple_0 = (str_0,)
    list_0 = [tuple_0, tuple_0, str_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    var_0 = module_0.purge()
    var_1 = module_1.diff_bytes(var_0, var_0, var_0, lineterm=var_0)
    module_2.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    float_0 = -1549.5
    module_0.split(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    bytes_0 = b"eq\xbetaGq\xbf\x93\xd3\x88[\x8e"
    module_0.search(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    float_0 = 3022.342
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    int_0 = 2516
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    bool_0 = False
    none_type_0 = None
    module_4.nlargest(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    int_0 = 585
    var_0 = module_1.diff_bytes(int_0, int_0, int_0)
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_5132():
    bool_0 = True
    list_0 = [bool_0]
    module_2.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    int_0 = 2824
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    float_0 = 739.804869
    module_0.search(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    float_0 = 1718.0
    var_0 = module_1.restore(float_0, float_0)
    module_2.get_new_command(float_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    int_0 = -2437
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    bytes_0 = b"R1\xc9:\xf1\xe2\x84\x0f\xbe\xfa\x921dX\xee\x18"
    var_0 = module_1.unified_diff(bytes_0, bytes_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_5140():
    str_0 = "b'4"
    var_0 = module_1.context_diff(
        str_0, str_0, fromfiledate=str_0, tofiledate=str_0, lineterm=str_0
    )
    module_0.fullmatch(var_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    str_0 = "]v_$"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    str_0 = "~Y"
    var_0 = module_0.escape(str_0)
    module_0.finditer(str_0, var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_2.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    var_0 = module_0.purge()
    none_type_0 = None
    module_0.split(var_0, var_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    bool_0 = True
    none_type_0 = None
    module_0.search(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    complex_0 = 1599.24874 - 552.1915j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    str_0 = "k"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    str_0 = "DnZ"
    dict_0 = {str_0: str_0}
    module_2.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    int_0 = 3900
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    bytes_0 = b"1:\tB^\xbb~\xad\x06-I\xe1E\xa2\x1dj\x8a\xb4\x17"
    module_4.nlargest(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1]
    module_2.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5154():
    bytes_0 = b"V\x8b`\xcf\xcd\xb6V\x92\xff\x11J\xa0\xfe \xc5\xb8\x15\xc3o="
    var_0 = module_0.escape(bytes_0)
    var_0.quick_ratio()


@pytest.mark.xfail(strict=True)
def test_case_5155():
    var_0 = module_0.purge()
    var_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_5156():
    bytes_0 = b"\xd4q/\xfdc\xf2\xafRu"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    bool_0 = True
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bytes_0 = b"\x94p\xccDRT-)\xea"
    var_0 = module_0.purge()
    var_0.__setattr__(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    float_0 = 1260.0
    str_0 = ' I7m1M"eK0{Y, v'
    differ_0 = module_1.Differ(str_0)
    var_0 = differ_0.compare(float_0, float_0)
    module_0.match(var_0, differ_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    bool_0 = False
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    str_0 = "-8.{%[pb8$JiO8$o\\|{b"
    var_0 = module_1.ndiff(str_0, str_0)
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    bool_0 = False
    none_type_0 = None
    list_0 = []
    var_0 = module_1.context_diff(none_type_0, list_0)
    var_0.__contains__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    int_0 = 249
    set_0 = {int_0, int_0}
    module_0.sub(set_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    int_0 = 1182
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    var_0 = module_0.purge()
    none_type_0 = None
    var_1 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        none_type_0,
        fromfiledate=none_type_0,
        n=none_type_0,
    )
    var_1.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_5167():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(none_type_0, b=none_type_0)
    sequence_matcher_0.get_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_5168():
    int_0 = -1426
    module_2.get_new_command(int_0, int_0)


def test_case_5169():
    int_0 = -3299
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.ndiff(none_type_1, none_type_1, charjunk=none_type_1)
    with pytest.raises(TypeError):
        var_0.__new__(int_0, int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    float_0 = -1190.7
    module_2.match(float_0, float_0)


def test_case_5171():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(none_type_0, none_type_0, defaults=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    int_0 = 2307
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    bytes_0 = b"E\xe4\xb8\xc5\nv\x94\xab\x183\xa6K\xbc\xa9%"
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0)
    var_0.__contains__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    tuple_0 = ()
    module_2.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    bytes_0 = b"\x87\xe05\xd2"
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        bytes_0, bytes_0, none_type_0, fromfiledate=none_type_0, lineterm=bytes_0
    )
    module_2.get_new_command(var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    bytes_0 = b"q\x8fqu\x1d\x8e\xf1vu\xcf;q-\xb0Q\xce\xea_\x88\xdb"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    int_0 = 674
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_2.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    bytes_0 = b"\xf7|\xd2\x85/\xbe\xbd\x8d\xab\x9b\x0f\xe0"
    var_0 = module_0.template(bytes_0)
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_5181():
    str_0 = "j]"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    str_0 = "B?Zs^F_DV"
    module_4.nlargest(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    bool_0 = False
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    int_0 = 2780
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    var_0 = module_0.purge()
    module_6.unique(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    bool_0 = False
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    int_0 = 3334
    module_4.nlargest(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bytes_0 = b"\xeb+\xdf"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    complex_0 = -3084.93269 - 2750.8j
    list_0 = [complex_0, complex_0]
    module_2.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    float_0 = -2075.0
    module_2.get_new_command(float_0, float_0)


def test_case_5194():
    list_0 = []
    with pytest.raises(ValueError):
        module_7.namedtuple(list_0, list_0, defaults=list_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    tuple_0 = ()
    var_0 = module_1.context_diff(tuple_0, tuple_0)
    var_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5198():
    bytes_0 = b"y!\x84\xb2\xc4l{"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    bytes_0 = b"\xe2\x1eUS\x1c\x87>\xf4%\xe4+G\x07"
    none_type_0 = None
    var_0 = module_1.ndiff(bytes_0, none_type_0, charjunk=none_type_0)
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_5201():
    bool_0 = False
    none_type_0 = None
    module_0.search(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    bool_0 = True
    none_type_0 = None
    module_4.nlargest(bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    str_0 = "xW#.j[cD6?1g"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.context_diff(none_type_1, none_type_1, none_type_1)
    var_0.__reversed__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    str_0 = "Y"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    str_0 = "H `b"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    int_0 = 1189
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0, none_type_0, fromfiledate=bool_0, n=none_type_0, lineterm=bool_0
    )
    tuple_0 = (bool_0, var_0)
    module_2.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5211():
    bytes_0 = b"yf\xed\xd1\x86\x80\xea\r}m\xde\x88\xcc9:B\xf7\x8ds"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    int_0 = -1631
    list_0 = [int_0, int_0, int_0, int_0]
    module_2.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    none_type_0 = None
    str_0 = "!"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
        str_0: none_type_0,
    }
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    int_0 = -1781
    var_0 = module_0.purge()
    var_0.scan(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    bool_0 = False
    var_0 = module_1.diff_bytes(bool_0, bool_0, bool_0, bool_0, bool_0, n=bool_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    bool_0 = False
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    set_0 = set()
    module_0.compile(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    int_0 = -366
    bool_0 = True
    module_2.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    bytes_0 = b"\xb3\x98\x03\xfbP\xfb\x06c\x82[\xa9\xdb\x92\\\xa3\\{"
    list_0 = [bytes_0]
    html_diff_0 = module_1.HtmlDiff(wrapcolumn=list_0)
    module_2.get_new_command(html_diff_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0)
    module_2.get_new_command(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    complex_0 = 2167.92553 - 3775j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    module_0.search(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    int_0 = -1036
    none_type_0 = None
    module_2.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    int_0 = -23
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    bytes_0 = b"l\x0f\x89Z\x03"
    module_2.get_new_command(bytes_0, bytes_0)


def test_case_5228():
    str_0 = "z2|"
    var_0 = module_0.sub(str_0, str_0, str_0)
    var_1 = var_0.__dir__()
    with pytest.raises(ValueError):
        module_7.namedtuple(var_1, str_0)


def test_case_5229():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0, none_type_0, rename=none_type_0, module=none_type_0
        )


@pytest.mark.xfail(strict=True)
def test_case_5230():
    enum_dict_0 = module_6._EnumDict()
    list_0 = [enum_dict_0, enum_dict_0, enum_dict_0, enum_dict_0]
    module_2.match(list_0, enum_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    none_type_0 = None
    error_0 = module_0.error(none_type_0)
    module_0.fullmatch(error_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    str_0 = "%\x0cP"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    int_0 = -3597
    var_0 = module_1.ndiff(int_0, int_0)
    var_0.__repr__(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    int_0 = -1484
    var_0 = module_0.purge()
    var_0.set_seq1(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    int_0 = 2609
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    int_0 = -1418
    module_2.match(int_0, int_0)


def test_case_5237():
    bool_0 = False
    none_type_0 = None
    with pytest.raises(ValueError):
        module_1.get_close_matches(bool_0, bool_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    float_0 = -1099.3
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5239():
    bytes_0 = b"\xda\x12\x1em\xc8\xa0YT\xcd\x15\xc1i*\nUB\xd3G"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    int_0 = -1994
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    str_0 = "\x0b;WlTcT.\\zQU0ur"
    float_0 = -2873.1
    none_type_0 = None
    var_0 = module_1.diff_bytes(float_0, none_type_0, none_type_0, n=float_0)
    var_0.set_seq2(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    float_0 = 1191.5344
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    int_0 = 1369
    none_type_0 = None
    module_4.nlargest(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5245():
    int_0 = 377
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    bool_0 = True
    int_0 = -183
    module_0.split(bool_0, bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    bytes_0 = b"\xb6\xb3\x04Y\xea.\xbf\xa2\x06t\x99\xa9\xaf\xc4-\x82\xb9\x89"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    bytes_0 = b"\xad\xc9WS\xc7s\xbc\x98\r\x88\x18\x11.H\xa0ba\x07v"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_4.nlargest(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    bytes_0 = b"\xdf"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    complex_0 = 1987.8 + 1319.1021j
    module_4.nlargest(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    float_0 = -650.2
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.ndiff(bool_0, none_type_0)
    module_0.findall(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    float_0 = 479.48
    none_type_0 = None
    module_2.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    float_0 = -1409.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_2.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    bool_0 = False
    float_0 = -677.6486
    module_0.subn(bool_0, bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    bytes_0 = b"Y\xef"
    var_0 = module_0.template(bytes_0)
    module_0.match(var_0, var_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    var_0 = module_0.purge()
    str_0 = "U>3Kx"
    var_1 = module_0.subn(str_0, str_0, str_0)
    var_1.get_grouped_opcodes(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    none_type_0 = None
    var_0 = module_0.purge()
    var_0.__repr__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    int_0 = 808
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    int_0 = -1421
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    var_0 = module_0.purge()
    var_1 = var_0.__bool__()
    module_0.findall(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    complex_0 = -627.3 + 1204.376j
    module_0.findall(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    str_0 = "h+4aiI"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    var_0 = module_0.purge()
    int_0 = -3071
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    int_0 = -3326
    list_0 = [int_0, int_0]
    module_2.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    bytes_0 = b"<"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.diff_bytes(none_type_1, none_type_1, none_type_1, none_type_1)
    var_0.scan(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    int_0 = 3472
    none_type_0 = None
    module_0.split(none_type_0, int_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        bool_0, bool_0, none_type_0, tofile=none_type_0, fromfiledate=none_type_0
    )
    var_0.compare(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    bool_0 = False
    none_type_0 = None
    module_0.sub(bool_0, none_type_0, none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    bool_0 = False
    str_0 = "B2_\t?'?_9T)K0$n"
    module_2.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bool_0 = True
    module_3.Error(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    enum_dict_0 = module_6._EnumDict()
    enum_dict_1 = module_6._EnumDict()
    int_0 = -859
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    int_0 = 2007
    module_1.get_close_matches(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    none_type_0 = None
    str_0 = "]ht_\x0b}Ilpn'\t'BQ\t"
    var_0 = module_1.unified_diff(str_0, str_0, str_0)
    var_0.__setattr__(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    str_0 = "\x0b\x0c<Y}_O\rZKi\x0b"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    bytes_0 = b"\xcc\x92\xf0+\xa3\xe4\x94\xd4\x1aar\xd1\xcf\xb0\x97T\xa9y\xd6"
    var_0 = module_0.escape(bytes_0)
    int_0 = -3524
    none_type_0 = None
    module_0.sub(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    bytes_0 = b'\x007\xa1a\xf9\xcc\xd9\xa3R\xbe"5\x87'
    var_0 = module_0.purge()
    var_0.__getitem__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    str_0 = "3z~.-Qr+\nF>Z`>^!"
    dict_0 = {str_0: str_0}
    module_5.BaseException(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    bytes_0 = b"\xae\x96\xbe#"
    module_1.IS_CHARACTER_JUNK(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    exception_0 = module_5.Exception()
    set_0 = {exception_0, exception_0}
    module_1.IS_LINE_JUNK(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    bool_0 = False
    var_0 = module_1.ndiff(bool_0, bool_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    bytes_0 = b"\x87@<\xb5\x87K\xe9\x9b\x15\x01\xd3\r\xa5x"
    module_4.nlargest(bytes_0, bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    bytes_0 = b"<4\xfd\xd1c\xb1\x9b\xe8[(<\x91;="
    dict_0 = {bytes_0: bytes_0}
    module_4.nlargest(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    bool_0 = True
    var_0 = module_1.ndiff(bool_0, bool_0, bool_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    complex_0 = -349.2 - 2151j
    module_6.unique(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    bytes_0 = b"\x95\x9e\xbco\xf2Z\xe0"
    error_0 = module_0.error(bytes_0)
    module_2.get_new_command(bytes_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    dict_0 = {}
    exception_0 = module_5.Exception(**dict_0)
    module_2.get_new_command(exception_0, dict_0)


def test_case_5297():
    bytes_0 = b"o\x06v\x10"
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    bool_0 = True
    var_0 = module_1.unified_diff(bool_0, bool_0, tofile=bool_0)
    set_0 = {var_0, bool_0, bool_0, var_0}
    module_0.finditer(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    int_0 = -1774
    module_2.match(int_0, int_0)


def test_case_5301():
    bytes_0 = b"]v\n"
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    with pytest.raises(ValueError):
        module_7.namedtuple(bytes_0, bytes_0, defaults=none_type_0, module=list_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    module_2.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    str_0 = "3&\rBH[26~<"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    float_0 = -2974.2
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    int_0 = -4603
    bool_0 = True
    module_2.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    int_0 = -2967
    set_0 = {int_0}
    module_2.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    none_type_0 = None
    bool_0 = False
    module_0.sub(none_type_0, bool_0, none_type_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    str_0 = "t}+z\n2?578:u&"
    module_0.match(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, n=none_type_0)
    var_0.set_seq1(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    bool_0 = False
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    set_0 = set()
    none_type_0 = None
    var_0 = module_1.context_diff(
        set_0, set_0, none_type_0, fromfiledate=none_type_0, lineterm=set_0
    )
    var_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_5314():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    str_0 = "Dfv'}9G\n^1L"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    str_0 = ";io\x0b9"
    var_0 = module_0.sub(str_0, str_0, str_0)
    set_0 = {var_0}
    module_0.sub(set_0, var_0, str_0, str_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    float_0 = 4103.5
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    complex_0 = -1179.4896 - 838.38j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    float_0 = 2408.458
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    int_0 = 231
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    float_0 = 4680.2
    module_0.sub(float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    bytes_0 = b"\x8e"
    none_type_0 = None
    module_0.fullmatch(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    dict_0 = {}
    none_type_0 = None
    module_0.compile(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    str_0 = "d4en5&\\G,PW3K;HM/`"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    bytes_0 = b"\x1a{eR\x172\xf6?I\x97\x16"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    float_0 = 868.3
    module_0.Scanner(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    int_0 = -4082
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    bool_0 = False
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    complex_0 = 2737.057 + 3154.668j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    int_0 = 836
    module_0.compile(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    var_0 = module_0.purge()
    list_0 = [var_0, var_0, var_0, var_0]
    module_1.IS_LINE_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    str_0 = "g$P50o+^t\tB"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    int_0 = -1785
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    module_0.Pattern()


@pytest.mark.xfail(strict=True)
def test_case_5343():
    int_0 = 2478
    tuple_0 = (int_0, int_0)
    module_2.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    bool_0 = True
    module_0.split(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    var_0 = module_0.purge()
    module_0.sub(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    float_0 = 206.987466
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    bool_0 = True
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    int_0 = -4581
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    int_0 = 3809
    set_0 = {int_0}
    none_type_0 = None
    var_0 = module_1.unified_diff(none_type_0, none_type_0, n=none_type_0)
    var_0.set_seq1(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    none_type_0 = None
    module_6.unique(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    float_0 = 999.0
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        float_0,
        float_0,
        float_0,
        tofile=float_0,
        fromfiledate=float_0,
        tofiledate=float_0,
        lineterm=none_type_0,
    )
    var_1 = module_1.context_diff(var_0, var_0, var_0, none_type_0)
    module_2.match(var_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    complex_0 = 2692.43 - 2253.26j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    str_0 = "_8i>Bw.:|ejOWF&n3~"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    int_0 = 2746
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    int_0 = 2287
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    bool_0 = False
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    bool_0 = True
    var_0 = module_1.context_diff(bool_0, bool_0, bool_0)
    var_0.__repr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    bool_0 = True
    none_type_0 = None
    module_0.split(bool_0, none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    bool_0 = True
    none_type_0 = None
    module_0.subn(bool_0, none_type_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    int_0 = -295
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    bool_0 = True
    bool_1 = True
    var_0 = module_1.unified_diff(bool_1, bool_1, tofile=bool_1)
    var_0.__setitem__(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    bool_0 = True
    module_0.findall(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    none_type_0 = None
    module_0.template(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    str_0 = "I|bQ%R:T"
    dict_0 = {str_0: str_0}
    module_6.auto(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    bytes_0 = b"G@\xc7{K\xc3\x18"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    bytes_0 = b"h\x04"
    int_0 = 3171
    tuple_0 = (bytes_0, int_0)
    none_type_0 = None
    module_2.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    complex_0 = 515.8293 + 2435.38j
    none_type_0 = None
    module_0.sub(complex_0, complex_0, none_type_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    int_0 = 2521
    var_0 = module_1.ndiff(int_0, int_0, int_0)
    tuple_0 = (var_0,)
    var_1 = module_1.diff_bytes(tuple_0, int_0, int_0, tuple_0, fromfiledate=tuple_0)
    module_2.get_new_command(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0, none_type_0, none_type_0, fromfiledate=none_type_0, n=none_type_0
    )
    module_1.get_close_matches(var_0, var_0)


def test_case_5373():
    list_0 = []
    with pytest.raises(ValueError):
        module_7.namedtuple(list_0, list_0, rename=list_0, defaults=list_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    none_type_0 = None
    module_0.split(none_type_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_5377():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    bytes_0 = b"\x15B\xcb2+y\xd9e\x93\x81\x9d\xcc\x8c-[\x9b"
    none_type_0 = None
    module_2.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    int_0 = -321
    module_0.template(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    float_0 = 3196.01
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    float_0 = 1893.0
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bytes_0 = b"*\xe8#$t\xb2\x1c\x8bQ"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    bytes_0 = b"$"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    list_0 = []
    regex_flag_0 = module_0.RegexFlag.ASCII
    module_2.get_new_command(list_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    bytes_0 = b"\xa4"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, list_0, bytes_0]
    var_0 = module_1.restore(list_1, bytes_0)
    var_1 = module_1.diff_bytes(list_0, list_0, list_0)
    module_2.match(var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.context_diff(none_type_1, none_type_1, none_type_1, n=none_type_1)
    var_0.compare(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    str_0 = "Q)q[_"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0, tofile=none_type_0)
    str_0 = "}*2 0"
    module_2.get_new_command(var_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    none_type_0 = None
    sequence_matcher_0 = module_1.SequenceMatcher(b=none_type_0)
    var_0 = module_1.ndiff(sequence_matcher_0, none_type_0)
    module_0.search(var_0, var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    int_0 = -2811
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5393():
    str_0 = "ZQf<f`3?v>+t}m|+"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    int_0 = -1684
    none_type_0 = None
    module_4.nlargest(int_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5396():
    str_0 = '\x0beJ\t/"(ye]'
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    base_exception_0 = module_5.BaseException()
    error_0 = module_0.error(base_exception_0)
    module_2.match(error_0, base_exception_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    none_type_0 = None
    base_exception_0 = module_5.BaseException()
    module_4.nlargest(none_type_0, base_exception_0, none_type_0)


def test_case_5399():
    dict_0 = {}
    with pytest.raises(ValueError):
        module_7.namedtuple(dict_0, dict_0, rename=dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    complex_0 = -1263 - 2563.373j
    set_0 = {complex_0, complex_0, complex_0}
    sequence_matcher_0 = module_1.SequenceMatcher(complex_0, autojunk=set_0)
    var_0 = sequence_matcher_0.get_grouped_opcodes()
    module_0.template(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    int_0 = -967
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    float_0 = 515.3474
    set_0 = {float_0, float_0, float_0, float_0}
    var_0 = module_0.purge()
    var_0.set_seq1(set_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    complex_0 = -1821 + 1211j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    var_0 = module_0.purge()
    var_0.get_grouped_opcodes()


@pytest.mark.xfail(strict=True)
def test_case_5407():
    str_0 = "voM'oOKG6{4Yi"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    bytes_0 = b"\xfc\x82\xe2\xa8_\xe3IeX\xabQ\x1c"
    tuple_0 = (bytes_0,)
    module_0.search(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    str_0 = "bo"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    bytes_0 = b"<\xa1\xbc*#u\xe0\xcd\x95\xb9{"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5412():
    bytes_0 = b"\xcc"
    list_0 = [bytes_0, bytes_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    int_0 = -9
    none_type_0 = None
    module_0.split(int_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    int_0 = -2444
    var_0 = module_1.ndiff(int_0, int_0, charjunk=int_0)
    bool_0 = False
    module_0.fullmatch(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    list_0 = []
    var_0 = module_1.ndiff(list_0, list_0)
    module_2.get_new_command(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    bool_0 = True
    module_0.template(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    none_type_0 = None
    str_0 = "$\tbRhBUZ;dxjT)%"
    dict_0 = {str_0: none_type_0}
    module_3.Error(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    bool_0 = False
    module_0.escape(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    int_0 = -473
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0)
    var_1 = module_1.restore(var_0, var_0)
    var_1.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_5422():
    int_0 = 677
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    str_0 = "'Wn/-zptIe~!iht"
    none_type_0 = None
    module_0.findall(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    complex_0 = -2670.275 - 2520.0008j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    int_0 = 290
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    bool_0 = True
    var_0 = module_1.unified_diff(bool_0, bool_0, bool_0, bool_0)
    module_2.match(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    str_0 = "$\n%:t'."
    module_2.get_new_command(str_0, str_0)


def test_case_5429():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5430():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    bool_0 = False
    module_2.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    dict_0 = {}
    module_0.search(dict_0, dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


def test_case_5434():
    float_0 = -375.34142
    with pytest.raises(TypeError):
        module_7.namedtuple(float_0, float_0, rename=float_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    str_0 = ">1:\\=M{8Q3H"
    module_1.get_close_matches(str_0, str_0, str_0)


def test_case_5436():
    none_type_0 = None
    with pytest.raises(TypeError):
        module_7.namedtuple(
            none_type_0, none_type_0, defaults=none_type_0, module=none_type_0
        )


@pytest.mark.xfail(strict=True)
def test_case_5437():
    bytes_0 = b'\x17\xafk{"\xd6\xda%'
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    str_0 = "JI"
    none_type_0 = None
    module_2.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    bool_0 = True
    module_0.compile(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    module_1.Match()


@pytest.mark.xfail(strict=True)
def test_case_5441():
    str_0 = "u\"[8Faplg7~>mswv'hN}"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    none_type_0 = None
    module_2.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    int_0 = 1065
    module_1.get_close_matches(int_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    int_0 = 964
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    module_6.EnumMeta()


def test_case_5447():
    error_0 = module_3.Error()
    var_0 = module_0.purge()
    with pytest.raises(AttributeError):
        var_0.__getattr__(error_0, error_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    str_0 = '%IL^N0GTYHnUAzf}"n\t/'
    list_0 = [str_0]
    module_0.subn(list_0, str_0, list_0, flags=list_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    str_0 = '1s"*'
    str_1 = "\nIoO=v6sD"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_6.EnumMeta(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    int_0 = 283
    str_0 = "E0uX%\x0b)MjJ.LRA8X9OD"
    var_0 = module_1.ndiff(str_0, str_0, str_0, str_0)
    var_0.__setitem__(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    none_type_0 = None
    module_6.auto(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    var_0 = module_0.purge()
    dict_0 = {}
    tuple_0 = (var_0, var_0, dict_0, var_0)
    module_2.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    float_0 = 1721.3625
    module_1.IS_CHARACTER_JUNK(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    int_0 = -799
    module_0.template(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    str_0 = "4|d1u`"
    module_6.unique(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    bytes_0 = b"hG\x1d\x0fc\xa9\x18DU\x03"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5462():
    bytes_0 = b"\xec\xdd"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.subn(tuple_0, none_type_0, bytes_0, tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    str_0 = "vn0R|h}V;p"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    complex_0 = 1600.600829 + 1566.7j
    none_type_0 = None
    module_0.split(complex_0, none_type_0, flags=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    none_type_0 = None
    var_0 = module_1.diff_bytes(
        none_type_0,
        none_type_0,
        none_type_0,
        fromfiledate=none_type_0,
        tofiledate=none_type_0,
        lineterm=none_type_0,
    )
    module_2.get_new_command(none_type_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    none_type_0 = None
    module_0.compile(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    none_type_0 = None
    module_4.nlargest(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    var_0 = module_0.purge()
    none_type_0 = None
    module_1.IS_LINE_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    int_0 = -11
    module_0.findall(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    int_0 = 2325
    list_0 = [int_0, int_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    complex_0 = 2497.727 + 863.77j
    module_2.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    none_type_0 = None
    dict_0 = {}
    module_4.nlargest(none_type_0, none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    bytes_0 = b"\xae\xf6"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    bool_0 = False
    none_type_0 = None
    module_2.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    bytes_0 = b"\x9e"
    var_0 = module_1.unified_diff(bytes_0, bytes_0)
    var_0.compare(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    sequence_matcher_0 = module_1.SequenceMatcher()
    var_0 = sequence_matcher_0.quick_ratio()
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    var_1 = module_1.diff_bytes(
        dict_0, none_type_0, bool_0, n=none_type_0, lineterm=dict_0
    )
    none_type_1 = None
    module_0.split(none_type_1, none_type_1, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_5480():
    bool_0 = False
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    float_0 = 764.8356
    none_type_0 = None
    module_0.template(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    int_0 = -445
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_2.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    int_0 = -1249
    var_0 = module_1.unified_diff(
        int_0, int_0, fromfiledate=int_0, tofiledate=int_0, lineterm=int_0
    )
    var_1 = module_1.ndiff(var_0, var_0, var_0, int_0)
    module_0.finditer(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    str_0 = ";D&hkqX)-/Jv4i"
    list_0 = [str_0, str_0, str_0]
    dict_0 = {}
    module_0.Pattern(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_2.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    bool_0 = False
    module_0.search(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    bool_0 = True
    var_0 = module_1.context_diff(bool_0, bool_0, lineterm=bool_0)
    module_2.get_new_command(var_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    none_type_0 = None
    var_0 = module_1.ndiff(none_type_0, none_type_0, none_type_0, none_type_0)
    dict_0 = {var_0: var_0}
    module_2.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    float_0 = 1301.7
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    int_0 = 2210
    bytes_0 = b"\x99\xc4]\xab\xe7\x1dq"
    module_2.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    bytes_0 = b"Fz\x94\xf4S\x04\x93\x85"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    int_0 = -588
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    str_0 = "RJ} {"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    none_type_0 = None
    module_0.findall(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    dict_0 = {}
    module_0.Match(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    none_type_0 = None
    var_0 = module_1.context_diff(
        none_type_0, none_type_0, fromfiledate=none_type_0, lineterm=none_type_0
    )
    set_0 = {var_0, none_type_0}
    module_2.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    str_0 = "\x0b&6"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    int_0 = -798
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    complex_0 = -712 + 494.156j
    module_0.split(complex_0, complex_0, flags=complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    float_0 = 1718.16941
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    int_0 = -3184
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    none_type_0 = None
    module_0.finditer(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    int_0 = 2357
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    int_0 = 3258
    none_type_0 = None
    var_0 = module_1.ndiff(int_0, none_type_0)
    module_0.search(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    int_0 = -205
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    var_0 = module_0.purge()
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_5512():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    str_0 = "\t.44Exj1RJ8POR\x0c5y4"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    str_0 = "VaSi"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    int_0 = 1713
    module_6.unique(int_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    complex_0 = 2311.83 + 2230.95709j
    list_0 = [complex_0]
    module_0.finditer(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    int_0 = -424
    var_0 = module_1.unified_diff(int_0, int_0, fromfiledate=int_0)
    list_0 = [var_0, int_0, var_0, int_0]
    module_2.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    enum_dict_0 = module_6._EnumDict()
    list_0 = [enum_dict_0]
    module_1.IS_LINE_JUNK(list_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    complex_0 = 745.15758 + 54.91j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    regex_flag_0 = module_0.RegexFlag.UNICODE
    module_0.subn(regex_flag_0, regex_flag_0, regex_flag_0, regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    str_0 = "+Sh"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    int_0 = -2324
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    bool_0 = False
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    dict_0 = {}
    module_0.escape(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    set_0 = set()
    tuple_0 = (set_0, set_0, set_0)
    module_2.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bool_0 = True
    module_1.SequenceMatcher(b=bool_0)


def test_case_5527():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5528():
    bool_0 = False
    module_4.nlargest(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    bool_0 = False
    module_0.findall(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    int_0 = 96
    bool_0 = False
    bytes_0 = b"\xf2\xc0\xfa\x08\xb0\xc2\xed\r\xe1\x84"
    tuple_0 = (bool_0, bytes_0)
    module_2.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    bytes_0 = b"\x00\x98\x8b\xa3\xb3\xf0N;\x83\xf8\xe9\x12\xe3\xa6"
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bytes_0, bytes_0, none_type_0, n=none_type_0, lineterm=bytes_0
    )
    var_1 = module_1.restore(var_0, var_0)
    module_0.match(var_1, var_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bool_0 = False
    module_0.sub(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_2.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    regex_flag_0 = module_0.RegexFlag.LOCALE
    module_1.IS_LINE_JUNK(regex_flag_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    bytes_0 = b"J\t$"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    bytes_0 = b"A\x89\xbf\xcb\xe3\xdb\xf5\xdb\xf50\x92\xf3\xab\xbe"
    none_type_0 = None
    module_2.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    bytes_0 = b"\x0b\xc5xk\x91\xa28\x03\xd3\x8c"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    bytes_0 = b"2F\xa15`\xc3\xab\x0f"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_2.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    str_0 = "Qv'M!a<Yn"
    set_0 = {str_0, str_0, str_0, str_0}
    module_2.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    bool_0 = False
    var_0 = module_1.ndiff(bool_0, bool_0, bool_0, bool_0)
    var_1 = module_1.diff_bytes(var_0, bool_0, bool_0, bool_0, var_0, var_0)
    var_1.find_longest_match()


@pytest.mark.xfail(strict=True)
def test_case_5543():
    int_0 = 2758
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, none_type_0)
    module_0.template(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    str_0 = "Qb"
    var_0 = module_7.namedtuple(str_0, str_0)
    var_0.ratio()


@pytest.mark.xfail(strict=True)
def test_case_5546():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_2.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    bool_0 = False
    list_0 = [bool_0]
    module_0.finditer(bool_0, bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    bool_0 = True
    module_1.get_close_matches(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    int_0 = 2495
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bool_0, none_type_0, none_type_0, tofiledate=none_type_0, lineterm=none_type_0
    )
    module_0.split(none_type_0, bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    float_0 = -1796.74
    module_6.unique(float_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    float_0 = -1620.501
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    float_0 = -2472.68026
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    int_0 = -516
    module_0.fullmatch(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    none_type_0 = None
    module_1.get_close_matches(none_type_0, none_type_0, cutoff=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    int_0 = 461
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_2.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    float_0 = 3650.0188
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    set_0 = set()
    none_type_0 = None
    module_0.split(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    none_type_0 = None
    module_0.search(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    int_0 = -4651
    none_type_0 = None
    module_2.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    none_type_0 = None
    module_1.IS_CHARACTER_JUNK(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    float_0 = 896.5
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    bytes_0 = b"\xc9'\xa5\xa2\x1a\xe7 `\xcf\x92\xfe\xafD\xbf\x8d(P\x80\x94"
    bool_0 = True
    module_0.sub(bytes_0, bytes_0, bool_0, flags=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_5568():
    int_0 = -996
    none_type_0 = None
    var_0 = module_1.ndiff(int_0, none_type_0)
    var_1 = var_0.__dir__()
    module_4.nlargest(var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    bool_0 = False
    module_0.finditer(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    none_type_0 = None
    module_0.compile(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    none_type_0 = None
    auto_0 = module_6.auto()
    module_1.get_close_matches(none_type_0, auto_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    str_0 = "v"
    str_1 = "syXV:7SNNkY[y15q\x0b!V+"
    module_4.nlargest(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    str_0 = '}BG4o"\x0c\n#?>H'
    dict_0 = {str_0: str_0}
    module_2.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    var_0 = module_0.purge()
    module_1.IS_CHARACTER_JUNK(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    float_0 = 697.3498
    none_type_0 = None
    module_2.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    bool_0 = False
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    none_type_0 = None
    str_0 = "^gj*1ijMaa`89,[i\nB]."
    var_0 = module_1.diff_bytes(none_type_0, none_type_0, str_0, tofile=none_type_0)
    module_2.match(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    int_0 = -715
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    bytes_0 = b"\x9cW\xe6\x9b\xcf\xc8\x08\x1d\x03d"
    var_0 = module_0.subn(bytes_0, bytes_0, bytes_0)
    str_0 = "L@.*["
    module_0.sub(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    bool_0 = True
    module_6.unique(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    set_0 = set()
    module_2.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    float_0 = -2747.667
    module_2.get_new_command(float_0, float_0)


def test_case_5583():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5584():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.unified_diff(
        bool_0, bool_0, tofile=none_type_0, fromfiledate=bool_0, tofiledate=none_type_0
    )
    module_0.escape(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    float_0 = 1192.17
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    float_0 = 2461.08949
    bool_0 = False
    module_2.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    int_0 = 704
    module_2.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    bool_0 = False
    none_type_0 = None
    module_1.get_close_matches(bool_0, none_type_0, cutoff=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    str_0 = "m[O,T?r}"
    module_0.search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    bool_0 = False
    none_type_0 = None
    module_0.findall(bool_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5591():
    bool_0 = False
    var_0 = module_1.restore(bool_0, bool_0)
    bool_1 = False
    module_2.get_new_command(var_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5593():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    bool_0 = True
    module_1.IS_LINE_JUNK(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    float_0 = 1963.02856
    tuple_0 = (float_0,)
    module_0.compile(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    str_0 = "\r"
    tuple_0 = ()
    module_2.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    module_0.Match()


@pytest.mark.xfail(strict=True)
def test_case_5598():
    none_type_0 = None
    module_0.sub(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    str_0 = "`?]g=,#OF"
    var_0 = module_1.restore(str_0, str_0)
    var_0.make_file(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    module_6.EnumMeta()


@pytest.mark.xfail(strict=True)
def test_case_5601():
    str_0 = "#yC4M\\"
    module_2.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    str_0 = "aA\x0b*\x0b&ruMz@@$9qNd"
    module_2.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    var_0 = module_1.context_diff(none_type_0, tuple_0)
    var_1 = module_0.purge()
    var_1.find_longest_match(tuple_0, blo=var_0, bhi=var_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    str_0 = "NUitK)Pdu`l7F+AV$c"
    str_1 = "4V"
    var_0 = module_1.unified_diff(str_0, str_0, fromfiledate=str_1, n=str_0)
    module_2.get_new_command(var_0, str_0)


def test_case_5605():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5606():
    bool_0 = False
    module_1.IS_LINE_JUNK(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    int_0 = -1666
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    int_0 = 2640
    float_0 = 488.525
    module_2.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    bool_0 = False
    module_2.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    bytes_0 = b"\xccXS\xfc{\x82\xe3Q\x88R\xae\xb9\xed\xe5\x1d\xea[$"
    module_2.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    bool_0 = True
    module_0.finditer(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    str_0 = 'G/-HO2n"$q+L;>'
    var_0 = module_0.fullmatch(str_0, str_0)
    module_0.sub(str_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    bytes_0 = b"\xac@\xac\xab\x8cf\x9e^+\xdd\xf9]gS\xcc\xe3+\xbd\x98"
    module_1.get_close_matches(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    bytes_0 = b"\x8e\xbb"
    module_2.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    str_0 = "xBu~}@\ni1ri#<"
    none_type_0 = None
    module_2.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    bool_0 = False
    module_0.split(bool_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    none_type_0 = None
    none_type_1 = None
    var_0 = module_1.context_diff(
        none_type_1, none_type_1, none_type_1, none_type_1, tofiledate=none_type_1
    )
    var_1 = module_1.restore(var_0, var_0)
    var_1.set_seq2(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    int_0 = 974
    module_2.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    none_type_0 = None
    module_0.escape(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    float_0 = -3009.706847
    module_2.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    float_0 = -108.318846
    module_2.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    none_type_0 = None
    var_0 = module_1.unified_diff(
        none_type_0,
        none_type_0,
        tofile=none_type_0,
        fromfiledate=none_type_0,
        n=none_type_0,
    )
    var_0.__len__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    complex_0 = -1020.5 + 559.274163j
    module_2.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    none_type_0 = None
    module_0.subn(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    bool_0 = False
    sequence_matcher_0 = module_1.SequenceMatcher(bool_0, bool_0)
    sequence_matcher_0.get_matching_blocks()


@pytest.mark.xfail(strict=True)
def test_case_5627():
    none_type_0 = None
    module_2.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    bool_0 = True
    module_0.search(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    none_type_0 = None
    module_0.template(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    tuple_0 = ()
    module_0.finditer(tuple_0, tuple_0, tuple_0)
