# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import configuration as module_0


def test_case_0():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getintdict(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    bytes_0 = b"\x1f\x00\xa4\xb0[\xc8w"
    var_0.getfloat(bytes_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getint(var_0, var_0)


def test_case_4():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    bool_0 = False
    var_1 = var_0.getboolean(bool_0, bool_0, bool_0)
    assert var_1 is False


def test_case_5():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    var_1 = var_0.getint(none_type_0, var_0, none_type_0)


def test_case_6():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    bytes_0 = b"\xc8k>\x0fg\xf9\r'Qa\xa8\x96S\xc13\xb0\xe3\xb1Y"
    var_1 = var_0.get(bytes_0, bytes_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_1) == 1


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    bytes_0 = b""
    var_0.getboolean(bytes_0, bytes_0, bytes_0)


def test_case_8():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    none_type_0 = None
    var_1 = var_0.getintdict(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getintdict(var_0)


def test_case_10():
    bool_0 = False
    luigi_config_parser_0 = module_0.LuigiConfigParser(
        comment_prefixes=bool_0, default_section=bool_0
    )
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0 = luigi_config_parser_0.getintdict(bool_0)


def test_case_11():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(ValueError):
        var_1 = var_0.read_dict(var_0)


def test_case_12():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    with pytest.raises(ValueError):
        var_1 = var_0.read_dict(var_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getboolean(var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    var_0 = module_0.get_config()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "configuration.LuigiConfigParser"
    )
    assert len(var_0) == 1
    assert (
        f"{type(module_0.LuigiConfigParser.add_config_path).__module__}.{type(module_0.LuigiConfigParser.add_config_path).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.instance).__module__}.{type(module_0.LuigiConfigParser.instance).__qualname__}"
        == "builtins.method"
    )
    assert (
        f"{type(module_0.LuigiConfigParser.reload).__module__}.{type(module_0.LuigiConfigParser.reload).__qualname__}"
        == "builtins.method"
    )
    var_0.getfloat(var_0, var_0)
