# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import dry as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"=\xbd\xe0}x\xb2+\xcf\x03Gw\x83x\x91o\xf9#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "&E4\r *d$[EC9f&^,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xe2\x1bpu\xb7\n\xc2\xbc#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xc2)\xd95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x95N\x05]\x03\xc6\x8f\xe0\xbdu\x03L"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    int_0 = 40
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "YT_I~%Ka}B"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "F1`a\x0b[\x0bl!M/(2\r3SKfDv"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    int_0 = -1430
    bool_1 = False
    dict_0 = {bool_0: int_0, bool_1: bool_0}
    tuple_0 = (bool_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "0T]'Y\x0bgO@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "wHI\nU6\x0b|(pc|->"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = -3727
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bytes_0 = b"o\xec\xec\xd9\x93\x04b\xa5\x8b\xad\xfc3K\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    complex_0 = 98.7 - 5265.779961j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    int_0 = -821
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bytes_0 = b"Ge0r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_30():
    float_0 = 129.66186
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "("
    float_0 = -3525.36973
    dict_0 = {str_0: str_0, str_0: float_0, str_0: float_0}
    tuple_0 = (dict_0,)
    tuple_1 = (str_0, tuple_0)
    module_0.get_new_command(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    float_0 = -568.31609
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    int_0 = 403
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "uEoyzh>-M+%HWI(W,@ \n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_39():
    bytes_0 = b"\xd1\xc8\x95$\x86\xf2i.^K\x0fY\x990"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_40():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    float_0 = -2837.770292
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    int_0 = -1292
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    bytes_0 = b"Z\x1f\x1a\xf6a<\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    complex_0 = -944.91 - 2475.6814j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    bool_0 = True
    bytes_0 = b"\xc8\xc8w\xbe\xf7"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    str_0 = "bXbfnq&425JK|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    none_type_0 = None
    bytes_0 = b"[/\x16\xc71\x93y"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    float_0 = -2412.5446
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_52():
    complex_0 = 87 + 831.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    str_0 = "<4=v%PKQ3\r\ru"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_54():
    float_0 = 1594.737
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_55():
    float_0 = 212.449
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    int_0 = 838
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, bool_0)
    int_0 = -1128
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_59():
    pass


@pytest.mark.xfail(strict=True)
def test_case_60():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    list_0 = []
    module_0.match(list_0, list_0)


def test_case_64():
    pass


@pytest.mark.xfail(strict=True)
def test_case_65():
    bytes_0 = b"!|m\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    tuple_0 = (set_0, list_0, bool_0)
    list_1 = [bool_0, bool_0, tuple_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    float_0 = -334.0
    module_0.get_new_command(float_0, float_0)


def test_case_69():
    pass


@pytest.mark.xfail(strict=True)
def test_case_70():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_71():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_72():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    complex_0 = -3976.01802 + 2814j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    float_0 = 751.3196
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    str_0 = "OR3.B32T\x0bIL;p"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_77():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_78():
    float_0 = 4138.20236
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    str_0 = ":5(\x0bA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    bytes_0 = b"P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_83():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_84():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    str_0 = "|u|\\^6f AF9)BY<6af"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    str_0 = "\x0bpf\r~c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    complex_0 = -307.825181 - 2426j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, tuple_0, bool_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    none_type_0 = None
    int_0 = -51
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    bytes_0 = b"\x9b\xbfH}1\xd2M\xa2EA\x02\x93!\x91\xbd(\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_93():
    pass


def test_case_94():
    pass


@pytest.mark.xfail(strict=True)
def test_case_95():
    str_0 = "=sjg<Jn"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    complex_0 = -2405.6 + 1431.93j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    bool_0 = False
    bytes_0 = b"\xb6`ns\xa3[\x8f\xa1\xfb\xd7\xe9u\xc3\x8e"
    list_0 = [bool_0, bytes_0, bool_0]
    tuple_0 = (bool_0, bytes_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    str_0 = "zh9aOm3Co2\x0c7|1o(dC0`"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    complex_0 = -1328.57 + 821.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    bytes_0 = b"1\x143\x12g\xc6|\xc3\x01"
    bytes_1 = b""
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_105():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    float_0 = 2022.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    float_0 = 1579.1485
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    str_0 = "s1B^TOx:PX<o4JPjrM=O"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    float_0 = -596.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    int_0 = -2391
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    bytes_0 = b"8\xa8!D*\x939\x04I\xbf\r\xec?\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    int_0 = 2322
    int_1 = -302
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bytes_0 = b'"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    str_0 = "i/4\r\x0b\n;F&bJm\n 5UW "
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    str_0 = "/]=@,=84eN*59"
    float_0 = 1238.80721
    object_0 = module_1.object()
    tuple_0 = (str_0, float_0, str_0, object_0)
    module_0.match(tuple_0, object_0)


def test_case_119():
    pass


@pytest.mark.xfail(strict=True)
def test_case_120():
    float_0 = 3179.451
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_122():
    float_0 = -759.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    bool_0 = True
    bytes_0 = b"~\xe9=)"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    bytes_0 = b"xY\x95\xac\xc9\x04\xae\xde\x1et\xff\xb7\xa3\xf1\xf5\x97\xfe\x83\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    bytes_0 = b"\xadz+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    str_0 = "\x0bX%wuUv5B9pD3{%B|H;E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    int_0 = -5326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    complex_0 = -509.0485 - 1842.7434j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    int_0 = 1362
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    float_0 = -1130.34
    set_0 = set()
    list_0 = [float_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    str_0 = "sp^gWuh1/u0,kt"
    module_0.get_new_command(str_0, str_0)


def test_case_135():
    pass


def test_case_136():
    pass


@pytest.mark.xfail(strict=True)
def test_case_137():
    bytes_0 = b"!"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    int_0 = 54
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    bytes_0 = b"6\x08h\x88\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    complex_0 = 4410.017 - 14.7503j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    int_0 = 2679
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    int_0 = 1108
    tuple_0 = (int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_144():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    bytes_0 = b'"\xbb\x10\x00'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_146():
    int_0 = 177
    tuple_0 = (int_0,)
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_147():
    bytes_0 = b"=\x11\xf2\xf3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bytes_1 = b"\xf2]?\x91\x8c\xbb"
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_148():
    str_0 = ")3}dg,Nz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    int_0 = 756
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    str_0 = "T-6F)?Z:.l*+!X!_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    int_0 = 1232
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    int_0 = -472
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    bytes_0 = b"\x85\xd9\x81\x97V\x1b\x1a'\x02\x08SLK\xf8^\x0f\xfa\x1b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    str_0 = "Cc!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    int_0 = 365
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_158():
    pass


@pytest.mark.xfail(strict=True)
def test_case_159():
    int_0 = -2708
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    complex_0 = 5965.7 + 1608.42249j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    str_0 = "MLpI jp~\n$7Ickcgd["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    bytes_0 = b"\xa4\xad\x87<\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    bool_0 = False
    int_0 = -2358
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: int_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_164():
    bytes_0 = b"\xde\xff>\xb9\xd9O\xf2\xaf\xd8\xba\xe4\xf6\x87\x92\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_165():
    float_0 = -813.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    module_0.get_new_command(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_167():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    bytes_0 = b"\xca\xd1\x8aJq+\xac*\t\x1e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    complex_0 = -962.83036 - 389.809j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    bytes_0 = b"\xc1uA\x11\x12\xc9\x7f\xe6\xe1\xd1s\x0e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    int_0 = 2742
    module_0.match(int_0, int_0)


def test_case_172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_173():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    int_0 = 1305
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    bytes_0 = b"\xef\x92B\xe0\xa8\xa4\xaf\xae)u\xd6\xa1\x88\x80\x87\xf2\x91\x98\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    int_0 = 4228
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    bytes_0 = b"\xa6\xe7l\xf1\xfc\xf5\xe6,d\xab\x1a\xa2(\xe5\x06\xaa"
    dict_0 = {bytes_0: bytes_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0, dict_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    bytes_0 = b"\x07\xc4Ey\x0e\x1c\xae\xbb\x80\xeb\x05\x00f\x0f\x19"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    complex_0 = -1034.7 - 1927j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    float_0 = -1173.266
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    bytes_0 = b"\xe1\xab\xd5a\x92\x94\x8d\x9ci@("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    int_0 = 3270
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    float_0 = -2323.08033
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    str_0 = "o\tW^"
    float_0 = 1770.655
    str_1 = ".S+ai)fO"
    dict_0 = {str_0: str_0, str_0: float_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_188():
    bool_0 = True
    bytes_0 = b"\xd7u\xa4'\xb9\x82\xa8j_k2\xca\xb3\xb9\x94"
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_189():
    pass


@pytest.mark.xfail(strict=True)
def test_case_190():
    complex_0 = -2932.338 - 509j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_191():
    int_0 = -792
    module_0.get_new_command(int_0, int_0)


def test_case_192():
    pass


@pytest.mark.xfail(strict=True)
def test_case_193():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    bytes_0 = b"\xcbI\xe4\x84y\xe4T1\xad"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    list_0 = []
    float_0 = -1208.879246
    list_1 = [list_0, list_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    int_0 = 2133
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    none_type_0 = None
    int_0 = -1704
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_198():
    bytes_0 = b""
    int_0 = -904
    float_0 = -1311.64
    int_1 = 1605
    tuple_0 = (int_0, int_0, float_0, int_1)
    list_0 = [bytes_0, bytes_0, tuple_0]
    bool_0 = True
    dict_0 = {float_0: int_0, int_1: int_1}
    tuple_1 = (list_0, bool_0, dict_0, dict_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_199():
    str_0 = "n\x0bRGV98jy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    str_0 = "<,i47wN)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    bool_0 = True
    int_0 = 1277
    tuple_0 = (bool_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    bytes_0 = b'_\xc7\xc1\xce\x04\xf8\xa3\xf0"'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_203():
    pass


@pytest.mark.xfail(strict=True)
def test_case_204():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    bytes_0 = b"\x15\xbax_#\xc8B\xe9%\xe3&F\rU\xe5`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    bytes_0 = b"\xbe\x90\xb1\x7f\xdeZbl\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    bytes_0 = b"X\xdc\xdd>Y\x86\xe9\x8a\xa5\xba\xa1zV1\xd2\xc4\xee8t"
    int_0 = 2399
    dict_0 = {bytes_0: int_0}
    list_0 = [dict_0, int_0]
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    bytes_0 = b"9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    bytes_0 = b"\xe1\x07\xd4~^\x15$\x15\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    complex_0 = 316.9 + 82.511039j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_212():
    str_0 = ">[\n$b-ll{YaV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_213():
    str_0 = "s88"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_214():
    bytes_0 = b"\xef\x13zyD\xcbO\x83c\xc7\xa3s("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_215():
    bytes_0 = b"0\x0e\xc4\x85+\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    bool_0 = False
    int_0 = 1268
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    int_0 = -2120
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    complex_0 = 2949 - 13.470874j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    str_0 = "X\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    float_0 = 364.112134
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    str_0 = "NqPNPEe1KXuK+o~bO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    float_0 = 340.018947
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_227():
    pass


@pytest.mark.xfail(strict=True)
def test_case_228():
    bool_0 = True
    bytes_0 = b"E\xf9\xf7m\xc1\xf8}\xd37I\xc8\xff\x87\x9a{^\xb3"
    dict_0 = {bytes_0: bytes_0, bool_0: bytes_0, bytes_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_229():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    list_1 = [list_0]
    int_0 = -7158
    module_1.object(*list_1, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    object_0 = module_1.object()
    bytes_0 = b"(\xfc\x05~\xab\xb3\x99\x97\x87\xe9T$r\xd6C\xde\x16\x95%\x99"
    str_0 = "PYr+`\nfR-@\x0c}5Lw*6"
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (str_0, tuple_0, bool_0)
    dict_0 = {object_0: object_0, bytes_0: object_0, tuple_1: bytes_0, bytes_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_232():
    int_0 = 1703
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_233():
    pass


@pytest.mark.xfail(strict=True)
def test_case_234():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    complex_0 = -836.69 - 3552j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_236():
    str_0 = 'S9/]E"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    str_0 = "\x0cf$<"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    str_0 = ";3KY\n\x0b3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    str_0 = ";UhKElpld29Q@VWHP\n1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    bytes_0 = b"\x88\x90\xbdC-9A\x83J\xf3\xebw\xb4\xcd'\x16\x08"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    int_0 = -3118
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    float_0 = 2277.7
    str_0 = "\nxN"
    dict_0 = {float_0: float_0, float_0: float_0, float_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    bytes_0 = b"z_\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    float_0 = -1122.66977
    tuple_0 = (float_0,)
    str_0 = "je[g/"
    set_0 = {tuple_0, str_0, tuple_0}
    tuple_1 = (set_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    bytes_0 = b"|\xda\xb3\x8a\x8dO7RAt=X\xa3l\xa6\xf5\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    str_0 = "NQdi7_J8d-I$6lYDtuR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    bool_0 = False
    bytes_0 = b'\x13<"\xbe!\x7fx\xd2e\x10'
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    bytes_0 = b"\x18\xbf\xf5\xf7\xa5lk\xad\x18%\xd1\xdf"
    list_0 = [bytes_0, bytes_0, bytes_0]
    int_0 = 1365
    str_0 = "(O^C;/*7uM!JcV1fl"
    tuple_0 = (bytes_0, list_0, int_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    str_0 = "xd6\tV&jIv#!XNh7c-SA"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0, str_0)
    module_0.match(tuple_0, tuple_0)


def test_case_255():
    pass


@pytest.mark.xfail(strict=True)
def test_case_256():
    tuple_0 = ()
    str_0 = "\nvr"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_257():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    complex_0 = 168 + 1511.076361j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    str_0 = "\nUU0#x;:N-`oG4"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    str_0 = ">c\r["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    int_0 = 452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_264():
    pass


@pytest.mark.xfail(strict=True)
def test_case_265():
    float_0 = 2409.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    int_0 = 1462
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    str_0 = "A0ZhG[<K_>4:y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    str_0 = "\r.v5/Jf o.7;`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_269():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bytes_0 = b"\\\xf6sB\x9e\x08"
    tuple_0 = (list_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_270():
    bool_0 = True
    float_0 = -1313.67856
    tuple_0 = (bool_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_271():
    float_0 = 4511.01
    list_0 = [float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_272():
    bytes_0 = b"\xb1\xa8\x13\xa4\xf6\xda`\xa5\xc0\x07\xaa\x8f\xd1\xb5\xc4\x05R\x93\xab"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_273():
    int_0 = -1615
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_274():
    int_0 = -1684
    tuple_0 = (int_0, int_0)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_275():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_276():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_277():
    pass


@pytest.mark.xfail(strict=True)
def test_case_278():
    bytes_0 = b"\xc8\x8c\xa9,\x8c,\xec\xbbt\x9c\xbd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    str_0 = "C\x0ba{E4RlfK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    float_0 = 1230.907971
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    set_0 = set()
    module_0.match(set_0, set_0)


def test_case_282():
    pass


@pytest.mark.xfail(strict=True)
def test_case_283():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    int_0 = 3603
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    int_0 = -1253
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    str_0 = "_\x0b"
    none_type_0 = None
    str_1 = "KOcFWJIB{!ObB=u1$x<e"
    str_2 = "pRF?~+"
    str_3 = "Vy_wc10h/1D!I-\x0c."
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    str_0 = "b\nizvl/v(tY{&\t0F7"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    int_0 = 681
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    bytes_0 = b"\x9a\x82\xb9\x08u\\\x93d7E\x8c^O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    float_0 = -714.5
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


def test_case_291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_292():
    int_0 = -1728
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    int_0 = 505
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    int_0 = 1301
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_295():
    bytes_0 = b"\xab\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_296():
    float_0 = 2620.945
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    bytes_0 = b"2\x9a}\xa5t\xa2n"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    str_0 = "}5tB`Ve\\x{Iv=8\rw"
    module_0.match(str_0, str_0)


def test_case_299():
    pass


@pytest.mark.xfail(strict=True)
def test_case_300():
    none_type_0 = None
    bytes_0 = b"ZK\xa2\x04\x12"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    complex_0 = -1998.9 + 1235.4j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    bool_0 = False
    int_0 = 3077
    str_0 = "{A4\n\n#=9Rw"
    tuple_0 = (bool_0, int_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_303():
    str_0 = "BRn!s;\r/Z\x0bbK']."
    bool_0 = True
    list_0 = [str_0, str_0, bool_0]
    module_1.object(*list_0)


def test_case_304():
    pass


@pytest.mark.xfail(strict=True)
def test_case_305():
    int_0 = -2023
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    str_0 = "\\8eAPgg#?&46\tVhP"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    complex_0 = -2609.0001 + 911.6617j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    float_0 = -470.39847
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    float_0 = 602.694352
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_310():
    str_0 = ""
    str_1 = "&D]k(B?\x0bWgl{*?"
    float_0 = -3060.03819
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = "[cdM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    none_type_0 = None
    float_0 = -0.6
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    bytes_0 = b"W\xea?\x0bM"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    bytes_0 = b"\x81\xe26\xd6"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    int_0 = -1875
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    str_0 = ")\rr&S9rI=NJerw\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_319():
    str_0 = 'tJ>a\r=[\rVo";Qr\t|n'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    float_0 = 1435.79
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_321():
    float_0 = -1896.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    bool_0 = True
    tuple_0 = (float_0, dict_0, bool_0)
    list_0 = [tuple_0]
    list_1 = [list_0, tuple_0, float_0]
    module_0.get_new_command(list_1, list_1)


def test_case_322():
    pass


@pytest.mark.xfail(strict=True)
def test_case_323():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    int_0 = 2909
    list_0 = [int_0, int_0]
    str_0 = "~m@qp\x0c'+M:a "
    str_1 = ",=m>e?N#r\n"
    str_2 = "EIm+N.L^"
    dict_0 = {str_0: int_0, str_1: str_1, str_1: str_0, str_2: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    float_0 = -1564.69
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    float_0 = 1594.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    int_0 = 3966
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    set_0 = set()
    bytes_0 = b"\x12\xce"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    complex_0 = 3029.8 - 4091.59j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    bytes_0 = b"01"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    float_0 = -2608.8
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    int_0 = -4732
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    bytes_0 = b"\xe0\x7f'\xc3.z\x08\xe2k\xa7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    complex_0 = 239 - 1259.43851j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    complex_0 = 376.98854 + 1101j
    int_0 = -4699
    module_0.get_new_command(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bytes_0 = b"o\xb3\xbd}\x11\x84\x03k\x13\x8c\xd8s\x9f}\xb0\xa3"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    str_0 = 'N`Vjjv ]\x0c#.z2u_e->V"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    str_0 = "=~7^x~"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_343():
    str_0 = "@V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_344():
    bytes_0 = b"\x0b\x8a\xf7\x11\xc4\x7f\xfd\x89\xd1\xf3\xb9>\xa97\x9d\x1eG"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    float_0 = -1751.0
    set_0 = {float_0}
    tuple_0 = (float_0, set_0, set_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    str_0 = "8E(C@4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_348():
    str_0 = "U"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_349():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    str_0 = "'M`0fFD35(,nV]\"CmQ"
    tuple_1 = ()
    tuple_2 = (tuple_0, str_0, bool_0, tuple_1)
    module_0.match(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    bytes_0 = b"n%\xaa\xc4\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    float_0 = -1876.126
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_353():
    str_0 = ".t\x0cKCE1O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_354():
    complex_0 = -2548.511706 - 2226j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    int_0 = 345
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    bytes_0 = b"\x17\xb62\x81\x17\x15\x1e5]_\xdfJd-\x95\xfe35\xea"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    int_0 = -889
    bytes_0 = b"\xbeVj\xfd\n\xf2"
    dict_0 = {int_0: int_0, bytes_0: bytes_0, int_0: int_0, int_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    int_0 = 1234
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    bytes_0 = b"\xe0\xa3v\x87\x8e\x013'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    int_0 = 1098
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    float_0 = -1648.86073
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    list_0 = []
    float_0 = 2484.0
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    int_0 = 1885
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = True
    int_1 = -2206
    set_0 = {int_0, int_1, int_1}
    tuple_0 = (dict_0, bool_0, int_1, set_0)
    tuple_1 = (tuple_0, dict_0)
    bytes_0 = b"5\x1f\x84\t\\\x81\x0ec\xeb\xb1\xa0dK%8\x90"
    tuple_2 = (tuple_1, bytes_0, int_0)
    tuple_3 = (tuple_2, dict_0)
    module_0.match(tuple_3, int_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    bytes_0 = b"\xcbr\x8c\xc7\x81\xaa%\xa6\xea\x8euK)6"
    module_0.match(bytes_0, bytes_0)


def test_case_366():
    pass


@pytest.mark.xfail(strict=True)
def test_case_367():
    float_0 = 366.0378
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_368():
    complex_0 = -1389.6692 - 2655j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    complex_0 = 1032.73 + 111.72j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    tuple_0 = (complex_0, complex_0, complex_0, dict_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    bytes_0 = b"\xc7x"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    int_0 = -373
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    int_0 = -2977
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    str_0 = "p>{\rA-f/ZL6[#to"
    list_0 = [str_0]
    bytes_0 = b"\x9do\x85:j\xf8\xff\xd0\r\t\xe8\x0b\xcd\xcf\xa9\xb3 95"
    tuple_0 = (str_0, list_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    str_0 = "ouMEO!&|s~:(&op99"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    bool_0 = False
    set_0 = {bool_0}
    bool_1 = True
    tuple_0 = (set_0, set_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_376():
    pass


@pytest.mark.xfail(strict=True)
def test_case_377():
    complex_0 = -2223.03 - 1216.0375j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    str_0 = "\t5W,3FgRnQ+ ["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    none_type_0 = None
    str_0 = ""
    module_0.match(none_type_0, str_0)


def test_case_380():
    pass


@pytest.mark.xfail(strict=True)
def test_case_381():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    bytes_0 = b"\x8f\xab\xe6\xd3"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, bytes_0, tuple_0, bytes_0}
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    none_type_0 = None
    int_0 = 3547
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    str_0 = "\n{v &7sk5\x0b=vs=@n0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    bytes_0 = b"\\\xf5\xd5\x8aOl)\xb3OW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    str_0 = "\n\"Fjr\t5 D{G{)'>XW"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    bytes_0 = b"\x1b$\xc4\x9b\x94\x86\x80\xa3P\xbd:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    complex_0 = -986.45408 + 1534.5399j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    complex_0 = 842.6926 - 1844.44144j
    dict_0 = {}
    module_1.object(*complex_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    str_0 = 'J\x0b)js2<boG$n|F"a'
    list_0 = []
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    int_0 = -969
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    bytes_0 = b"\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    bytes_0 = b"\xa5\x876"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    str_0 = 'h\nt\\^"$fKlx46Jb'
    module_0.get_new_command(str_0, str_0)


def test_case_399():
    pass


@pytest.mark.xfail(strict=True)
def test_case_400():
    int_0 = 3416
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_404():
    pass


@pytest.mark.xfail(strict=True)
def test_case_405():
    str_0 = "7ra\n0]8_"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bytes_0 = b"\x81\xa9\xd1\x90&\xfd*n\x05T1| ;\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    int_0 = 12
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    bytes_0 = b"\xba\xd2\xb2\xbf\r\x87\xf0e\x9d\xabu\x12j\xe0\x97\x81\x14\x1e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    str_0 = "%-\x0cP4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    float_0 = 324.425
    str_0 = '>\x0cK$"v_+$|o</'
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: float_0, float_0: str_0, bool_0: bool_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    bytes_0 = b"4V{\x0c\xc6\xe2J\x9e%;3G\xa4U\x8b\xab0\x97\xbdw"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_413():
    str_0 = "+TT"
    list_0 = [str_0, str_0]
    list_1 = [list_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    int_0 = -1550
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    str_0 = "H!X?CnS% +#mIHEi"
    list_0 = [str_0, str_0]
    module_1.object(**list_0)


def test_case_416():
    pass


@pytest.mark.xfail(strict=True)
def test_case_417():
    float_0 = 2385.014
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    float_0 = -737.133289
    bool_0 = False
    list_0 = [float_0, bool_0, bool_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    bytes_0 = b":\x93t\xcf7\xca\x1a\xf7\xd5\xfc\xe7\xb4\xda|\xfacR\xca"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_421():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    bytes_0 = b"1S\xd2\xc7\xb1\xf8\xf3\xea`\x18\x06\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    int_0 = 496
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    object_0 = module_1.object()
    set_0 = set()
    tuple_0 = (object_0, set_0)
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    set_0 = set()
    str_0 = "A*2GP}F\x0c*$8\\;I"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0}
    module_1.object(*set_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    int_0 = -575
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_427():
    int_0 = -1836
    module_0.match(int_0, int_0)


def test_case_428():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_429():
    int_0 = 67
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    float_0 = -2780.074
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    bool_0 = True
    bool_1 = True
    bytes_0 = b"2\xdd\xa1\xa7\x9b\xd1G\x9e\xfd"
    tuple_0 = (bytes_0, bool_1)
    tuple_1 = (bool_0, bool_1, tuple_0)
    str_0 = ">nwzuAI q&s]C.g"
    tuple_2 = (tuple_1, bool_0, str_0, bytes_0)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    int_0 = -516
    str_0 = "d\x0bx=2luWv*WNKPOM["
    tuple_0 = (int_0, str_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    complex_0 = -555.611 - 2439.582j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    bytes_0 = b"\xc2\xab?\xcc* \xac\x9a\xc0\xb7NU\xf0"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    str_0 = "80i."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    str_0 = "<\x0btJEi~KJ\n*"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    bytes_0 = b"\x14R\xdfd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    bytes_0 = b"\x8f/|r\xbb\x19\xa1 \xcdo:\x9c3\x8e6O\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_441():
    bytes_0 = b"{\xba\x91\x0c7R\x136\xc5\xacN\x80eO\xdb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_442():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    bytes_0 = b"\xd09\x8e\x91X\xdb7\x03K]\xe8\x1f\xa1"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    bytes_0 = b"\xbah\xf5&\xe4(\x07\xd2B\x8eM"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    list_0 = []
    list_1 = [list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    str_0 = '[r?48"'
    bytes_0 = b"\x87\x1f(\x0f|C\x03\x82.\xe8\xe8\xbe\xd7D\x17<\x19\x0f%\xa8"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    int_0 = 617
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    bytes_0 = b"\xd4SG\xb8\x1e!\xa0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    bytes_0 = b"O"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0, list_0]
    module_1.object(*list_1, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    int_0 = -4087
    float_0 = -292.790504
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    bytes_0 = b"4\x80?\x0c\xf40\xc3\xc7\xb5Q\x1b\x9a\x80\xe6\x0c}w"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    complex_0 = -105.8063 + 1290.2324j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    bool_0 = True
    bytes_0 = b"\x02\xc8Z\x9c>\xcd|\x94p)\x15I\xb5"
    tuple_0 = (complex_0, dict_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    str_0 = ";l'PzSfK"
    str_1 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    str_0 = "[u<s=)|N\\0\tW;QS1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    str_0 = "Q*IqR^"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    int_0 = -3267
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    bytes_0 = b"\x02XoG\x1a"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bool_0: bool_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    bytes_0 = b"D|\x00\xfb\xfd\x12\xa0<\t+0la\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    bool_0 = True
    float_0 = -1360.21205
    set_0 = {bool_0, bool_0, bool_0, float_0}
    tuple_0 = (bool_0, set_0, float_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    bytes_0 = b"W_{\\\x91\xfb\x95\xf3z\xb8]"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_464():
    str_0 = "<~"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    str_0 = "\\\tOI/*lR!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    int_0 = -3454
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    int_0 = 681
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_468():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_469():
    complex_0 = 3257.375337 + 1382.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bytes_0 = b"\xb0,w"
    float_0 = -804.1634
    tuple_0 = (set_0, bytes_0, float_0, bytes_0)
    bool_1 = True
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_471():
    bytes_0 = b"K"
    module_0.match(bytes_0, bytes_0)


def test_case_472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_473():
    bytes_0 = b"O\x9b;\x82\x82\x9c\x10!"
    module_0.match(bytes_0, bytes_0)


def test_case_474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_475():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    complex_0 = 4182 - 1534.88j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    float_0 = -2021.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    bytes_0 = b"i\x00\xdcCtj.\xfc\x91\x15\x95\x96{\n\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    float_0 = 1676.6434
    module_0.match(float_0, float_0)


def test_case_480():
    pass


@pytest.mark.xfail(strict=True)
def test_case_481():
    bytes_0 = b"9\xc1F\x86\xbbb\x14h\x18,\x1c\xd1\xc0:U\x14\xaa\xe8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    int_0 = -278
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    str_0 = "cY9TK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    str_0 = "o;T:N!ee"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    str_0 = "*OvvRz8/nWFl3}QCMz=,"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    int_0 = -5638
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    int_0 = -2847
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    float_0 = -1167.16314
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_493():
    int_0 = -1564
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_494():
    str_0 = "s1 U#$yAl!"
    module_0.match(str_0, str_0)


def test_case_495():
    pass


@pytest.mark.xfail(strict=True)
def test_case_496():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    float_0 = 1008.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    str_0 = "dZACd\tRxd0@I(>Ka"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    str_0 = "jCO:_=]gxu%nA\teB&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_501():
    str_0 = "m}6w|dNPnbD~."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    bytes_0 = b"`\x02\xc0\xdf\xc9Q\xb1\xe3\x08\\\x1f)G\x98\xbd\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    str_0 = "0!EH}3W:l+0d\x0b\\0q4Tb$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    int_0 = -2263
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_505():
    bytes_0 = b"\xfe\x93m\xce"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_506():
    str_0 = "N<Z*hx0R"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    str_0 = ""
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_508():
    none_type_0 = None
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(none_type_0, tuple_1)


def test_case_509():
    pass


@pytest.mark.xfail(strict=True)
def test_case_510():
    str_0 = "8\r#v@]_\\^b@\\zi1O\tY,I"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    bytes_0 = b"\x14\x00\xca\xbaV\x95#\xea3\xbb\xa7"
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bytes_0: bytes_0, bytes_0: bool_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    bytes_0 = b"\x03F\xe6\\."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    complex_0 = -2796.3 - 3633.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    bool_0 = False
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    str_0 = "5h\\~dIkiM=K6Kz],X0#N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_516():
    float_0 = 2716.2199
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_517():
    int_0 = -2812
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_519():
    bytes_0 = b"\x9c\x10\xc1"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_520():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    str_0 = "\x0cpt]bhO0|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    str_0 = "r(.p )>XQ8u2:V~fC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    float_0 = 2599.59
    bytes_0 = b"\xce\xe2\x81W\x83f\xfb"
    str_0 = "IhO>+E"
    tuple_0 = (float_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


def test_case_526():
    pass


@pytest.mark.xfail(strict=True)
def test_case_527():
    int_0 = -1599
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_529():
    complex_0 = 1056.879622 + 2079j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_530():
    float_0 = 2253.441577
    bool_0 = False
    int_0 = -680
    bytes_0 = b"\xa4\xa7)\xec\xa9H\xae'\x96\xda"
    tuple_0 = (float_0, bool_0, int_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_531():
    bytes_0 = b"L\xce\xba\xaa\xe5 V\xe9\xebI\x8c\xa5\xb1\x05\xd7\x81q\x04"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    bytes_0 = b"hx\xfe9\xb9\xa9\x0e.W@\xf4wV\xe9\xed"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    str_0 = "\\9NK?Ly73zl\r"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    int_0 = -1039
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_535():
    pass


@pytest.mark.xfail(strict=True)
def test_case_536():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    bytes_0 = b"\x917\xa5\x9b'^#?\xf8\x98\xc1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    bytes_0 = b"\x98/\xb9\xf7\xbc\xbd\x91\xb1~\x02\xd9\xb1>\xd9M\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    str_0 = "7-TL"
    str_1 = "\nl|!S%HT\ny"
    str_2 = 'lD^3=mzjvT!:+Hs8"'
    str_3 = "/@8z`OBlW 98C+!M"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    int_0 = -1714
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    int_0 = 285
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    bytes_0 = b",\xe9R\xbcGM*\xf9\x80\x9c4MSS\xee\xec\xb7v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    float_0 = 953.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    bytes_0 = b"D\xea\xe7\xe0\x06:?Kc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    int_0 = -857
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    float_0 = 44.49532
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    int_0 = 2160
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_548():
    bytes_0 = b"\x19\xf7\xf7\x93V\r4\xc8KK\x9a\x96\x01\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_549():
    int_0 = 214
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    int_0 = -1315
    dict_0 = {int_0: int_0, int_0: int_0}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    bytes_0 = b'\x12\xa5\xcc"\x83\xd12h@\xfd&\x9b\x9a\xbaOO'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    int_0 = -412
    bytes_0 = b"\xb3\xf2\xf4\x81\x9b"
    tuple_0 = (int_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    complex_0 = 2562.901 - 17j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    bytes_0 = b"\xa6\xae\xf1\x9b\xe4\x00\x9f|\xd4_\x89\x87\xe3\xe8\x96"
    int_0 = 2179
    tuple_0 = (int_0,)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    float_0 = 1044.9062
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    str_0 = "~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    bytes_0 = b"\xc3\x90\x08\xae\xc1\xaf\xd8\xc2\x05\x86w7^\xdc\x19\x18n\x82"
    module_1.object(*bytes_0)


def test_case_560():
    pass


@pytest.mark.xfail(strict=True)
def test_case_561():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    float_0 = -4974.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    int_0 = 1283
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_566():
    int_0 = 2212
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_567():
    bytes_0 = b"\xf6\x8c\xeb\xac\x19#\xb8\x80\x8c\xf8"
    complex_0 = 4932.8 + 1403.70144j
    bool_0 = True
    set_0 = {bytes_0, bytes_0, bool_0}
    list_0 = [complex_0]
    tuple_0 = (set_0, list_0, bool_0)
    str_0 = "'X4E=7\t\n6}"
    tuple_1 = (bytes_0, complex_0, tuple_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    int_0 = -2661
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    str_0 = ")g}||#n/x"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    float_0 = -1126.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    int_0 = 1248
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    int_0 = -2796
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    int_0 = -288
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    bytes_0 = b"\xa96\x87\x19\xb2\xbf\xa4\xb8\xad\xca;vx\xfc`\x87[\xad\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    complex_0 = 2337.747 + 4432.67j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_580():
    int_0 = 605
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_581():
    float_0 = 1062.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    float_0 = -2654.9164
    object_0 = module_1.object()
    set_0 = {float_0, object_0, object_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    str_0 = "}r`,O"
    str_1 = "CV_mo\tw\x0bcU4ZVQV"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    int_0 = 1168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    bytes_0 = b"S\xc5\x1a\xcf\xb2\x99.\x89\xa5\xee\x1e\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    int_0 = 405
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    float_0 = 2322.71179
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_591():
    complex_0 = -1178.7 - 189.35269j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_592():
    str_0 = "Hch s0M4ip]NEfnsD\n!"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    str_0 = '\x0cB|YX$\n"%[^M4NB\x0c'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    complex_0 = 2797.665313 - 1847.283448j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    str_0 = "i]L.'bK@Xkv8{"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    int_0 = -422
    bytes_0 = b"\x9aB1\xed\x94ybM"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    float_0 = -1342.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_1}
    tuple_0 = (bool_0, bool_0, bool_0, set_0)
    list_0 = [set_0, bool_0, set_0, set_0]
    tuple_1 = (bool_1, list_0)
    list_1 = [bool_1, bool_1, tuple_1, set_0]
    module_0.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_599():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    complex_0 = 1027 + 1934.373j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    float_0 = -1403.545
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    bytes_0 = b"'Z\x8a\x85g{8~"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    bytes_0 = b"\xfb\x8c\x94\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    int_0 = -107
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    float_0 = 2230.14797
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    complex_0 = 1962 + 2366.134j
    module_0.get_new_command(complex_0, complex_0)


def test_case_608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_609():
    bytes_0 = b"-\\I{\xd4@\xa8x}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    str_0 = 'y\x0b$oO}45=_"Z:d5'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    int_0 = -1091
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    int_0 = -3716
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    str_0 = "sTX`;>sD)m=@Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_615():
    float_0 = 1849.7646
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    complex_0 = -3324.50958 - 1022.856105j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    str_0 = "(\x0bkh[)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    float_0 = 523.5
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    int_0 = -1565
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_621():
    pass


@pytest.mark.xfail(strict=True)
def test_case_622():
    bytes_0 = b"\xdc\x9b\xe0]r\x0f\xe7\xe5\xb9q\xce\xcag\x91\xc2\x17\xc8\xcf\x13"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    complex_0 = -561.697 + 950j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    complex_0 = 5658.86 + 1719.2563j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    str_0 = "HL{pXQ!YW*qMw\nOi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_626():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    set_0 = set()
    tuple_0 = (bool_0, dict_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_627():
    str_0 = 'OE_"K[\n+V6\\Y9)\rO*M{'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    int_0 = -4402
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    str_0 = "rfLC&AOfsu@*n~dzy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_630():
    list_0 = []
    str_0 = "=N"
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_631():
    float_0 = -3532.18565
    module_0.match(float_0, float_0)


def test_case_632():
    pass


@pytest.mark.xfail(strict=True)
def test_case_633():
    int_0 = 1245
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    bool_0 = True
    bytes_0 = b"\xe5\xbf7\x88\x87$\xe1\xfc\x8f\xf8\xa9Fa\xa0"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_635():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_636():
    bytes_0 = b"\tX\x8fr\x9c\xee*k2\xed\xbf\xcc\xc6F\xb5\x0f0^|\xf3"
    bytes_1 = b"m6\x17\xcb\xd0["
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_637():
    bool_0 = True
    object_0 = module_1.object()
    tuple_0 = (bool_0, bool_0, bool_0, object_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    float_0 = 368.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    str_0 = "Ebcy,rV_2L6TS<pDHU"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    str_0 = '\r+at#|l\t2Z\x0c3l>Up"l'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    bytes_0 = b"\xae\xf1L\xd7\x84JC\x12G^\xd8\x1d\x1fg\x1b\x89"
    str_0 = "!"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_642():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_643():
    float_0 = -2756.36719
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_644():
    int_0 = -2154
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    float_0 = 1901.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    str_0 = "bG<\t3PbQ2|>_-\t"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = True
    tuple_1 = (tuple_0, bool_1)
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_648():
    str_0 = ")&{kU"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_650():
    pass


@pytest.mark.xfail(strict=True)
def test_case_651():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    none_type_0 = None
    str_0 = "edd|<|A\t"
    str_1 = "9Blt5[|;f.m"
    list_0 = []
    object_0 = module_1.object(*list_0)
    dict_0 = {str_0: none_type_0, str_1: str_0, str_1: str_1, str_1: object_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_653():
    int_0 = -822
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_654():
    int_0 = -844
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    int_0 = 2968
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    int_0 = -522
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    str_0 = "mt\t,!H7,"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    int_0 = 1807
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    float_0 = -2010.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    str_0 = "(\x0cWdhT)5wW+2^d>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    bytes_0 = b"\xfeP3\x90y\xcd(\x12\x04"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    bytes_0 = b"yW\xa8\x9fW&\xfb\x1c\xbf\x1f\x00=\xa3c\xff\xd5\x19\x98\xb0\x93"
    str_0 = "t6^ay>hr ,+y?o&"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    bytes_0 = b"{\x9f\x91\x0c\x9f\x9cZ\x94"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_664():
    bytes_0 = b"0\x9a9T\xefAJaglwY\xa9\xc1A"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_665():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    bytes_0 = b"sz\x01>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    str_0 = "M!L.1Bq_\x0b1"
    list_0 = [str_0, str_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    set_0 = set()
    bytes_0 = b"\x9a(t="
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    float_0 = -447.507923
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    complex_0 = -5231.6714 - 321j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_673():
    none_type_0 = None
    set_0 = set()
    bool_0 = True
    tuple_0 = (set_0, set_0, bool_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    int_0 = 283
    module_0.get_new_command(int_0, int_0)


def test_case_675():
    pass


@pytest.mark.xfail(strict=True)
def test_case_676():
    bytes_0 = b"\\\xe2wq\xd2\x1b\x9e8\x82I"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\x84\x93\xcaF\xc9[\x87\x10\xc6q^\xa2q\x7f\x84I"
    bool_1 = True
    bool_2 = False
    str_0 = "KINLy"
    tuple_0 = (bool_1, bool_0, bool_2, str_0)
    tuple_1 = (bool_0, bool_0, bytes_0, tuple_0)
    module_0.match(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_681():
    str_0 = ""
    none_type_0 = None
    str_1 = "<(1[Y7z7_H7Q_jh;5OM"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    float_0 = 75.50492
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    int_0 = 5690
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    int_0 = -514
    complex_0 = -1167.96 - 307.56514j
    dict_0 = {int_0: int_0, complex_0: int_0, complex_0: int_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    object_0 = module_1.object()
    str_0 = "CI7(\x0c?"
    set_0 = {object_0, str_0}
    list_0 = [set_0, set_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    str_0 = "no6v\nvYd}-9l%t\\l"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    float_0 = -942.367216
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    str_0 = "H?NuR6v\x0c\x0bp!C\x0bm&6[FM"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    int_0 = 2842
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    bytes_0 = b"\xb9!\xbai\x05\x94pE\xa5\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    float_0 = 107.143
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    str_0 = "6/[M:Yzj\thD\x0cW9j"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    int_0 = 558
    int_1 = 334
    dict_0 = {int_0: int_0, int_0: int_0, int_1: int_1}
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_694():
    str_0 = "3O"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


def test_case_696():
    pass


@pytest.mark.xfail(strict=True)
def test_case_697():
    str_0 = ")K\ri|v1m\\Ds"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    bool_0 = True
    bytes_0 = b"\xa5#\xd0o)"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    float_0 = 599.69
    str_0 = "q@+Az7'2\n;4> {"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    float_0 = -1.891803
    list_0 = [float_0]
    list_1 = [list_0, float_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_702():
    int_0 = 422
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    float_0 = 2016.1497
    str_0 = "n]wzj|\x0c9JKg]Xbc"
    int_0 = -1610
    tuple_0 = (float_0, str_0, int_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    int_0 = 1460
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_705():
    int_0 = -871
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_706():
    str_0 = "wjGX"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    int_0 = -1776
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    float_0 = 3532.492
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    float_0 = -1739.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    float_0 = 2020.3946
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    object_0 = module_1.object()
    float_0 = 5224.7
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    int_0 = 707
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    bytes_0 = b"!\xe0\x05l(\xe9\xaa\xae\xfc\xeb9\xca\xf3J<j"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    bytes_0 = b"\xfeT\x9e4\x06\xed@\xa1\xbefEi\x83;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    float_0 = 2015.3347
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    bytes_0 = b"1f\x8c\x9e1\x15\xec\x15\x9a\xe9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    bytes_0 = b"\x1b\x1b\x11z\t\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    bytes_0 = b"\xc3i\n\xf0("
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    int_0 = -3069
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    float_0 = 2771.2218
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    int_0 = -1838
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    int_0 = -162
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    complex_0 = -4088.9 + 443.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    str_0 = ';T`?B%ToUD"W(eK{'
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    str_0 = "Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    int_0 = -2120
    bytes_0 = b"-\xdb\xee"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    float_0 = -126.546
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    int_0 = 1504
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    float_0 = -772.1775
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    float_0 = -1075.83229
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    str_0 = "cpd#z)czStf+c'G`Mx7"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    int_0 = 1804
    int_1 = -2249
    list_0 = [int_0, int_0, int_1, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    float_0 = -261.51
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    str_0 = "\\>#@\teIbzI14AsGT_fD"
    module_0.match(str_0, str_0)


def test_case_738():
    pass


@pytest.mark.xfail(strict=True)
def test_case_739():
    str_0 = "l%N+X9x CJU\t("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    str_0 = "jL-zb^d2-kFuj+|\x0bq]FU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    int_0 = 2648
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    int_0 = 465
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


def test_case_743():
    pass


@pytest.mark.xfail(strict=True)
def test_case_744():
    bool_0 = True
    str_0 = 'g"MVZ4s|'
    tuple_0 = (bool_0, str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    complex_0 = 2321.45 - 383.7j
    list_0 = [complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    int_0 = -1800
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    str_0 = "vR/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    int_0 = -2078
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    str_0 = "\x0b"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_751():
    float_0 = -3172.564314
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_752():
    bytes_0 = b"NK\x15\xf4\x0f\xd6\xees"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_753():
    complex_0 = 588.836 + 3976j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    int_0 = 4872
    module_0.match(int_0, int_0)


def test_case_755():
    pass


@pytest.mark.xfail(strict=True)
def test_case_756():
    int_0 = 4962
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    int_0 = -1875
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    list_0 = [object_0, object_0]
    str_0 = "0k5`0?|%oh&"
    tuple_0 = (dict_0, list_0, dict_0, str_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    str_0 = '{GfnJ"XB?5WS>\x0c?Wks'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    complex_0 = 1462 + 926.23j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    str_0 = "9gnkgP\reZmN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    list_0 = []
    complex_0 = -1972 + 4761.76j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    str_0 = "}U!hqEXN^ma?"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    str_0 = ".$v7.6U.?3\\es>r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    int_0 = -750
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    str_0 = "x%.d%"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    int_0 = 1501
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_771():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_772():
    str_0 = "6"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_773():
    pass


@pytest.mark.xfail(strict=True)
def test_case_774():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    complex_0 = 264.49 + 1022.29j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    float_0 = -1343.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    str_0 = "d7~;3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    str_0 = ""
    bool_0 = False
    str_1 = 'J"27?@'
    dict_0 = {str_0: str_0, str_0: bool_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    int_0 = 1819
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    bytes_0 = b"\xd0\xc4\x0b\xe0Xe,\x7f\xfa\x9a\x02[\x8f\t\x0c\xf4"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    int_0 = -945
    set_0 = {int_0, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    int_0 = -2664
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    int_0 = 2348
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    complex_0 = 943.56 + 2924j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    int_0 = 891
    module_0.get_new_command(int_0, int_0)


def test_case_787():
    pass


@pytest.mark.xfail(strict=True)
def test_case_788():
    int_0 = 2209
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    int_0 = -1734
    set_0 = {int_0, int_0, int_0, int_0}
    bytes_0 = b"w\xec\xe7\x99\xd3a\xb1\xac"
    tuple_0 = (set_0, bytes_0)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    bytes_0 = b"f\xca\x02\x1f\xac#\x00\x1e\xc2A:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    int_0 = 942
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_792():
    pass


@pytest.mark.xfail(strict=True)
def test_case_793():
    float_0 = -2112.6035
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    bytes_0 = b"\xb6"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_797():
    pass


@pytest.mark.xfail(strict=True)
def test_case_798():
    float_0 = 1589.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    float_0 = -2039.734871
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


def test_case_800():
    pass


@pytest.mark.xfail(strict=True)
def test_case_801():
    bytes_0 = b"\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    bytes_0 = b":B\xcd\xf40\x17\x86S"
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bytes_0,)
    tuple_2 = (bool_0, tuple_0, tuple_1)
    module_0.get_new_command(bytes_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_803():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    str_0 = ")? \x0bt3^+GN"
    int_0 = 739
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    str_0 = "ZOGj\x0ce3a"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    str_0 = "F\x0b\x0c6eF5cA"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    str_0 = "t'b4<^Q%Kqr2e~Ti:^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    none_type_0 = None
    float_0 = 970.0
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    float_0 = 345.248979
    set_0 = {float_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    bytes_0 = b"W\xd4\x18e\xbd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    set_0 = set()
    list_0 = [set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_816():
    str_0 = "\nCI42dB%\x0b u2~~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_817():
    bool_0 = True
    int_0 = -729
    dict_0 = {bool_0: int_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    bool_0 = False
    str_0 = "irj?T|ZmjkK\ro~[-rf`"
    bool_1 = True
    set_0 = {str_0, bool_0, str_0, bool_0}
    list_0 = [bool_1, bool_1, bool_1, bool_0]
    tuple_0 = (bool_0, bool_1, set_0, list_0)
    tuple_1 = (bool_0, str_0, tuple_0, bool_1)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    str_0 = "d&U[L}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    bool_0 = False
    int_0 = -233
    list_0 = [bool_0, bool_0, bool_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_821():
    pass


@pytest.mark.xfail(strict=True)
def test_case_822():
    str_0 = "T$PI^x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    int_0 = 635
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    complex_0 = -1200.22 + 1782.18326j
    str_0 = "<vm@AVMS\t/Pui-7r\x0b"
    tuple_0 = (complex_0, complex_0, str_0)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, str_0: tuple_0}
    dict_1 = {tuple_0: str_0, tuple_0: str_0, tuple_0: str_0, tuple_0: dict_0}
    list_0 = [dict_1, tuple_0, complex_0, dict_1]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    float_0 = 448.718
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    bytes_0 = b"\xb1h@\xd1\x9b\x17\xd4C{?oM\x93y\x91\xa8\xd1\x19\x96\x7f"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    bytes_0 = b"\xa3\xb6\x18.\n\xb28\x08\xb0\x0e\xa5\x13j\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_831():
    int_0 = 2248
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_832():
    str_0 = '"?\taqTJaYN=#*|SER\\&+'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_834():
    bytes_0 = b"\xf07\nf4\xe0\xa7\xe2\xf3r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_835():
    float_0 = -908.587
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_836():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_837():
    complex_0 = 1264.3 + 1254j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    float_0 = -2151.35262
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_840():
    pass


@pytest.mark.xfail(strict=True)
def test_case_841():
    str_0 = "|dFvy'#q2x6"
    list_0 = []
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    bytes_0 = b"h\x1f70\x10`\x9dt\xea<x\xee\xa7\xd7\xd2\xd8\xaa.\x17"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bytes_0 = b"A\xa9\xde\x93=\x82\xce\xd3\xb98_\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    int_0 = 2504
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_845():
    str_0 = "r!1/ABRDO'^K6_*I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_846():
    bytes_0 = b"8\x9b["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    bytes_0 = b"\x98,7f\x1f_*\xdb='\xb6\xae-\xd7&"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_848():
    str_0 = "~Qzn-/8;W\n}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_849():
    int_0 = 1289
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    int_0 = 2510
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    bytes_0 = b"\xfd\x9d\xf8"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    str_0 = "5\n\x0cw3k~.}EBX_o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    bytes_0 = b"l"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    int_0 = 1036
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_856():
    pass


@pytest.mark.xfail(strict=True)
def test_case_857():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    list_0 = []
    str_0 = "(vr"
    str_1 = "i,+"
    dict_0 = {str_0: list_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    int_0 = 772
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    bytes_0 = b":\xae:\xb2.\x81qk\xca\xac_Mu\xecE\x13\tA%\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    none_type_0 = None
    int_0 = 1037
    tuple_0 = (int_0,)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    int_0 = 4041
    bytes_0 = b"\x9a\x8aXo\xa1/\xb6U\xb5\x07\x9dNg"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    bool_0 = True
    dict_0 = {}
    tuple_0 = (bool_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    bytes_0 = b""
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0, bool_0)
    float_0 = -5015.49
    tuple_1 = (tuple_0, float_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    str_0 = "uP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    str_0 = "4*My+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    bytes_0 = b"U\x0cg\xda"
    module_0.match(bytes_0, bytes_0)


def test_case_871():
    pass


@pytest.mark.xfail(strict=True)
def test_case_872():
    bytes_0 = b"m:f\xb7f\x96\xbeO\xe8"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    float_0 = -1698.804
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    bytes_0 = b"D\xcfI\x06\xbf\xb2&\x04\x9d0\xe8\x98A"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    float_0 = 484.751058
    int_0 = 296
    module_0.get_new_command(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    int_0 = 992
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_878():
    complex_0 = 3313.5 + 5112.825j
    bool_0 = False
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: bool_0,
        bool_0: complex_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    int_0 = -4372
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    bytes_0 = b"2X\x17\xa0\xe4Y\xf1)\x82\xd9\xd1<\xc8\x13\xc8\x02\xc6E"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_882():
    int_0 = -2643
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_883():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    float_0 = 2199.24285
    bytes_0 = b"\x0b\x9a}0\xbc\x10#"
    tuple_0 = (float_0, bytes_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    int_0 = 567
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


def test_case_886():
    pass


@pytest.mark.xfail(strict=True)
def test_case_887():
    str_0 = "!=['*WHQaO"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    bytes_0 = b"\xd3\x1a\xf9\x87\x1c\x93\x93D\xf5\x84G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    bytes_0 = b'U"r\x10F\xab\n\xeb\xc0\x91\xab\x16UU'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    str_0 = "BBY$YR3 ej,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    bytes_0 = b"\xc1\x18\xad?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    int_0 = -664
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    tuple_0 = ()
    bytes_0 = b"\n"
    str_0 = "B?(SD"
    tuple_1 = (tuple_0, bytes_0, bytes_0, str_0)
    set_0 = {tuple_1}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    int_0 = -1300
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    int_0 = 561
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    none_type_0 = None
    dict_0 = {}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    none_type_0 = None
    list_0 = []
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    str_0 = "I\n76k"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    int_0 = -1668
    bool_0 = True
    list_0 = [int_0, bool_0, int_0]
    tuple_0 = (list_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    str_0 = "Wo^12M{qUeabvs/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_903():
    pass


@pytest.mark.xfail(strict=True)
def test_case_904():
    bytes_0 = b"3$m\xce"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bool_0]
    tuple_0 = (bytes_0, bool_0, bytes_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_905():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    int_0 = -386
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    float_0 = -1485.24103
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, float_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    int_0 = -671
    set_0 = {int_0, int_0, int_0}
    int_1 = -1967
    dict_0 = {int_0: int_1, int_1: int_0, int_1: int_0}
    module_0.get_new_command(set_0, dict_0)


def test_case_909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_910():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    str_0 = '+wY()+6sV$!Oq"D }#'
    module_0.get_new_command(str_0, str_0)


def test_case_912():
    pass


@pytest.mark.xfail(strict=True)
def test_case_913():
    str_0 = "/EV4?13"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    int_0 = 2410
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    bytes_0 = b"75\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    str_0 = "Gn7A!+W3:"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    bytes_0 = b"1\xe2\xf7k{C\xfe5n"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_918():
    str_0 = "7nPsm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_919():
    float_0 = -432.021
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    bytes_0 = b"\x05#\xe5\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_921():
    float_0 = 3617.651
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_922():
    str_0 = "pG\x0c>\rjacl!JXmq.7\n\re"
    bool_0 = True
    set_0 = set()
    list_0 = [str_0, bool_0, set_0, bool_0]
    bool_1 = True
    tuple_0 = (bool_0, list_0, bool_1)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    str_0 = "@GR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_924():
    bytes_0 = b"s\x94\xa23b.&\xf9\xe2\xfe\xce\xc6\x86\x17\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_925():
    int_0 = 2740
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    int_0 = 4397
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_927():
    int_0 = 2509
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_928():
    str_0 = "Z(|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    bytes_0 = b'\xf7u\xff\x87\x11\xd4d\xfc"\xaf\xfc\xf5&(\x05\xdd\xaa\xaa'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


def test_case_932():
    pass


@pytest.mark.xfail(strict=True)
def test_case_933():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    bytes_0 = b"\x0c\x82\x10EdM"
    bytes_1 = b"90UizU\xc5\xa8\xc6\x1b-^\xca\x07%\xad"
    float_0 = -362.175
    bool_0 = True
    tuple_0 = (bytes_0, bytes_1, float_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_935():
    pass


def test_case_936():
    pass


def test_case_937():
    pass


@pytest.mark.xfail(strict=True)
def test_case_938():
    int_0 = 1790
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    int_0 = -232
    module_0.match(int_0, int_0)


def test_case_940():
    pass


@pytest.mark.xfail(strict=True)
def test_case_941():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = ()
    set_0 = {bool_0, bool_0, tuple_1, tuple_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    int_0 = 3862
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    set_0 = {tuple_0, tuple_0, tuple_0}
    tuple_1 = (list_0, tuple_0, set_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    int_0 = 1747
    tuple_0 = (int_0,)
    bytes_0 = b"\xd8\x12T\xd0CF\xa7\xb4\r\x81\x07\x83"
    tuple_1 = (tuple_0, bytes_0, int_0, bytes_0)
    int_1 = 563
    set_0 = {tuple_1, int_1}
    none_type_0 = None
    module_1.object(*set_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    float_0 = 858.03
    module_0.get_new_command(float_0, float_0)


def test_case_946():
    pass


@pytest.mark.xfail(strict=True)
def test_case_947():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_948():
    pass


@pytest.mark.xfail(strict=True)
def test_case_949():
    bytes_0 = b"&\x16"
    int_0 = 1193
    tuple_0 = (bytes_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    float_0 = -1625.1187
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    int_0 = 2185
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    int_0 = 3285
    module_0.get_new_command(int_0, int_0)


def test_case_954():
    pass


@pytest.mark.xfail(strict=True)
def test_case_955():
    float_0 = 486.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    int_0 = -866
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    int_0 = -1595
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    float_0 = -2866.480525
    tuple_0 = (float_0, float_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    dict_0 = {tuple_1: float_0}
    str_0 = "TK;uYZv|z\x0c"
    list_0 = [dict_0, str_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    str_0 = "tj+rz_K^D5^}l}kX_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_960():
    int_0 = 1814
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_961():
    bytes_0 = b"\xa3_\x9f\x97w\x07\x8bP\x8b\x89\x98\xcc\x15"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    bytes_0 = b"RJe\x13\x13\xe3\x8f\xaaX\xe2\xebt3\xb3\xcb\xb0\xd3\x08\x02"
    dict_0 = {}
    bytes_1 = b"\xd7\x95\xe2K\xbb"
    tuple_0 = (bytes_0, dict_0, bytes_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_963():
    pass


@pytest.mark.xfail(strict=True)
def test_case_964():
    str_0 = "byph"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    int_0 = -2421
    str_0 = "!8Qbvp`z+/#l]'~"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    bytes_0 = b"\x89\xf6\x1f\xc7\x12\x08!\x83C[\x936;\x15\x8e\xe7\x05\xda\x0e\x8c"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    complex_0 = 177.3916 + 1687.76046j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bytes_0 = b"\x8a\xdaW\xbd\x02\x86N0\xac"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    int_0 = -3612
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    int_0 = 1520
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    bytes_0 = b"\xef\x13xt9($\x1e\x99"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    int_0 = -2657
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_974():
    str_0 = "9\x0be~="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_975():
    float_0 = -2682.472
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    float_0 = 1080.76819
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    str_0 = ",0L"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    int_0 = -529
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_979():
    int_0 = -1105
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_980():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_981():
    float_0 = -2072.62
    list_0 = [float_0]
    str_0 = "<AX2\x0c4a~_ pk+kf"
    str_1 = "/3Kk\x0c\t&5VI#(cfUe"
    dict_0 = {str_0: float_0, str_1: float_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_982():
    bytes_0 = b"\xf5T\xc7pL\t\xc1\x0e\x15\xf9(^ _"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    bytes_0 = b"I\x94-\x9b\xac\xc6\xa3\xe1\x03F^\xb8\xed\xfe"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    int_0 = 1951
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    bytes_0 = b"\x185DEB\x08\x89\x13\xf4+9\xe2\x16\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    int_0 = 395
    bool_0 = True
    dict_0 = {int_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    int_0 = 966
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bytes_0 = b"f\x1a\x10\x9a\x8f\xe8\xe6\x9c\xe6W1\xdc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_991():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_992():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    str_0 = "<\x0b%:"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    str_0 = "0MCH&l9f1(b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    str_0 = "h Yjz|HJm,aHE\tZ9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    none_type_0 = None
    str_0 = ",P[_Vt'|oe>oQ7h*<"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    int_0 = -826
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    float_0 = 2156.815467
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1002():
    list_0 = []
    object_0 = module_1.object(*list_0)
    str_0 = "V|"
    tuple_0 = (str_0, list_0)
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1003():
    int_0 = -890
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    str_0 = "B^CG.3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    str_0 = "!diqvIVe`\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    str_0 = "]=!Vyq]p~ e8W7}*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    int_0 = 798
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    str_0 = "wbo"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    complex_0 = 139 + 1385.18j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    float_0 = 575.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    bytes_0 = b"Te*\x8f\x10\xbc`\x8d\x8co\x8e\xc7k/Q1+O\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    int_0 = 1896
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    bytes_0 = b"z\xe5n\x9b\x7f\x8f\x03\x0e6\x0c"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    none_type_0 = None
    bytes_0 = b"}\xd4\xfe\x10Td\n\xab.3\xb2r\xf5\x81"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    bytes_0 = b"\x9b\x88r\xc2\x86\xec\xe3\x81\xe8\xd3\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    int_0 = 1594
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {}
    module_1.object(*set_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    str_0 = "q*9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1020():
    int_0 = -1501
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    int_0 = -1565
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    float_0 = -1595.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    bool_0 = True
    str_0 = "P8+`j~6K'"
    tuple_0 = (bool_0, bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    str_0 = "2YW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    str_0 = "R*4Q_yby(%[S{l%xLH\x0b"
    str_1 = ""
    dict_0 = {str_0: tuple_0, str_1: tuple_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    float_0 = 1218.255
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    bytes_0 = b"\x1b\xd3\n\x13\xde\x02\xd3\x11\xc0G\xa9\xdd\xd1t\x1d:"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bytes_0 = b"\x91\xaa\xedr6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    str_0 = "^7a0?"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    bytes_0 = b"P\xe9\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    bytes_0 = b"Ik|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    str_0 = "\\1V{6 \x0b~LT&l{l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    int_0 = 4298
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    str_0 = "N\n2L\x0b,!nJ@:XN:SI`FT'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_1040():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1041():
    str_0 = "H\x0bBR"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    str_0 = "P861\t;k04"
    list_0 = [str_0, str_0, str_0, str_0]
    int_0 = -2614
    tuple_0 = (list_0, int_0)
    list_1 = [tuple_0, list_0, int_0]
    module_1.object(**list_1)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1046():
    str_0 = "R]EO@,t,E (CS0xh1d"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1047():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    int_0 = -170
    bytes_0 = b"\xf8\xa9\x14"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    str_0 = "BjA\n \r"
    list_0 = [str_0, str_0, str_0, str_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_1050():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1051():
    bytes_0 = b"\x8d\xe9n\x87;"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1052():
    complex_0 = 566.386 - 2594.67j
    complex_1 = -236.824164 + 488.4j
    module_0.get_new_command(complex_0, complex_1)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    bytes_0 = b"\xb0+\x95<\x9b\x8e\x02\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    bytes_0 = b"\xb0\x1b\xd3\xdfA\xd0\x1e\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    bytes_0 = b"\x81Z\xc0\xff\xa8kr\xc0l\xe4<\xfc,T"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    int_0 = 369
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_1059():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1060():
    bool_0 = True
    str_0 = "9*{N!i"
    set_0 = {bool_0, str_0, str_0, str_0}
    object_0 = module_1.object()
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    int_0 = -2354
    tuple_0 = (int_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    int_0 = -1056
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    complex_0 = -2826.714653 - 1577.28j
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    int_0 = 553
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    str_0 = "@!\nroukPtN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    float_0 = -332.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1066():
    complex_0 = -167.532 + 1242.275j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1067():
    str_0 = "x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    float_0 = -1128.0
    set_0 = {float_0, float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_1070():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1071():
    str_0 = "l1aM4"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (list_0,)
    tuple_1 = (tuple_0, bool_0, tuple_0)
    tuple_2 = (tuple_1, tuple_0)
    module_0.match(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    complex_0 = -795.578279 + 524.88j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    bytes_0 = b'\x15\xd4\xab"'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    tuple_0 = ()
    str_0 = "o@amFxlo~)6"
    module_0.match(tuple_0, str_0)


def test_case_1077():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_1079():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1080():
    float_0 = 1028.94607
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    bytes_0 = b"y\xab\xd8\xcb\xd2E\xb3\xd6\xb4\xeb\xd1\x1f\xabNK`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "abqY+-m\tmF\x0c^|\x0b"
    str_1 = "[oMQl\t"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    int_0 = 2254
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    complex_0 = 3035.322331 + 3999j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    bytes_0 = b"c\x1e\x04\x08"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    bytes_0 = b"\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    str_0 = '"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    str_0 = "g[oy-tfu\x0bXm"
    module_0.get_new_command(str_0, str_0)


def test_case_1091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1092():
    float_0 = -801.240406
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    str_0 = "FI\n9"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    float_0 = -1446.34147
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    object_0 = module_1.object()
    list_1 = [list_0, object_0, object_0]
    module_0.get_new_command(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    float_0 = -45.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    bool_0 = True
    bytes_0 = b'\x86"m\x86z'
    str_0 = 'Xo6z|crlUv"hz'
    tuple_0 = (bool_0, bool_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    int_0 = -1479
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    bytes_0 = b"\xb2\xba\xc3\xdaF6\xac\xf8\xe3\xb0\x99\xeeS\xc5\xc6Z\xca\xd7_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    str_0 = '`-txw,dU/yy"(,X+ki'
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    int_0 = 658
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    bool_0 = False
    int_0 = -626
    tuple_0 = (bool_0, int_0)
    module_0.match(tuple_0, int_0)


def test_case_1103():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1104():
    bool_0 = False
    int_0 = 449
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    int_0 = -506
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    bytes_0 = b"\x1a\xb1\xd2\xd73\xbb\x80\x88"
    tuple_0 = (bytes_0,)
    str_0 = "TTj?\r\n^\x0c<gBj "
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    int_0 = 3708
    list_0 = [int_0, int_0]
    list_1 = [list_0, int_0, int_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    float_0 = 1081.1
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    int_0 = -987
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    int_0 = 2260
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    bool_0 = True
    bytes_0 = b"\xf2;\x18\x88\xc1\xac4xN\xc4V"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    int_0 = 1569
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    str_0 = "\x0b;qj|(12Oc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    str_0 = "3n]%)mcZVqW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    str_0 = "bsRveD?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    str_0 = "5kkV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    bytes_0 = b"\xfdx\x0e\x95\xd3\x9fM\xde\xb6H\xc7:Xz\xac\xe6\xc25"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    int_0 = -1884
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    int_0 = -2233
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    str_0 = "Lm\x0cvgZ!"
    module_0.get_new_command(str_0, str_0)


def test_case_1123():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1124():
    float_0 = 913.0028
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    int_0 = 3131
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    bytes_0 = b"\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    int_0 = 285
    module_0.get_new_command(int_0, int_0)


def test_case_1129():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1130():
    set_0 = set()
    object_0 = module_1.object()
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    bytes_0 = b"\x97[\xce\x0f\xc1\x82\xc5\x16rY\xe8\xa1_V\xa9\x88"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    str_0 = "[yY{B"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    int_0 = -1434
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1135():
    float_0 = -653.503513
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1136():
    int_0 = -2114
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    bytes_0 = b"\xec-\x92,\xae\xb5\xe4\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    int_0 = -1018
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    bool_0 = False
    bytes_0 = b"\x84\\\xc4\xf7\xae\x80\xb8G\x98\x1e\x8d<"
    set_0 = {bytes_0, bytes_0}
    list_0 = [bool_0, bool_0, set_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    float_0 = 441.69
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    bytes_0 = b"z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1143():
    str_0 = "(s8k&yYMxYr3"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1144():
    bytes_0 = b"\x13\x16\xca\x96\xc2l[\x11\xc3\xb8\xc5\xce\xe0M"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    complex_0 = -982.4709 + 2879.18281j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    int_0 = -682
    bool_1 = False
    bool_2 = False
    int_1 = 4525
    tuple_0 = (bool_1, bool_0, bool_2, int_1)
    bytes_0 = b"\x00\x9dV\x1a5Vr\x08X\xad\x10\xf4wY"
    tuple_1 = (set_0, int_0, tuple_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    int_0 = -113
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    str_0 = "[7[B\tbV:&\\KXtmP7p)J8"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, bool_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    int_0 = -1650
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    str_0 = "\t*0^,D9z=L\\=E\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    int_0 = 4666
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1155():
    int_0 = 1837
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1156():
    bytes_0 = b"Zw\xe6\x9a\x10\x08\x12\xd8\x8b\xf6$\x1d\xd9b\xd7\xb8"
    int_0 = -1870
    tuple_0 = (bytes_0, int_0, bytes_0)
    list_0 = [tuple_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    int_0 = 2698
    str_0 = "I;C9<RE)i"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    int_0 = 3089
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    int_0 = 211
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    int_0 = 589
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    int_0 = -583
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    int_0 = -4366
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bytes_0 = b"\x04>=_\x16*\xed\x1b?7~1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    bytes_0 = b'z\xbcy\x19\xc0(\xd6~o\xc1U\xa6"\xe1$'
    list_0 = [bytes_0, bytes_0]
    float_0 = -1164.420602
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    int_0 = 256
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    bytes_0 = b"\xfd)\x16\x89\x1c1eB\r\xeb\x04\x19\\\x8ci!X"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    str_0 = "(z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    int_0 = -2532
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    str_0 = "{Y&#;2fR>g%n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1173():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_1}
    tuple_0 = (dict_0, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    bytes_0 = b",@\x1f\x1e\xa0\xb3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1175():
    complex_0 = -676.760406 - 1511j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1176():
    float_0 = -3078.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    str_0 = "-~D*/0djiu\tZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    int_0 = -410
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    object_0 = module_1.object()
    object_1 = module_1.object()
    dict_0 = {object_0: object_0, object_1: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    list_0 = []
    str_0 = "tBZ(i,v|"
    str_1 = "LtpgfQ<p|S"
    str_2 = "Y:]/9A0X>%-2V='U0`]Z"
    dict_0 = {str_0: str_0, str_1: list_0, str_0: list_0, str_2: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1181():
    int_0 = 1526
    dict_0 = {int_0: int_0}
    list_0 = [dict_0, int_0]
    module_0.match(list_0, int_0)


def test_case_1182():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1183():
    str_0 = " x%<M5aiEAy~R?e9S)m4"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    bytes_0 = b"\x08p\xd4\x91^\x14NB6\x8b\xe6\xe5R"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0}
    list_0 = [tuple_0, set_0, tuple_0]
    tuple_1 = (tuple_0, bool_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    int_0 = 1528
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    str_0 = "\n[B\n"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    int_0 = -2105
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    float_0 = 3853.3407
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    int_0 = 1415
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    int_0 = -3451
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    int_0 = -1728
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    str_0 = "3_FDc>\\B-J"
    bool_0 = True
    str_1 = "w#Aepd}BfL@T-\t"
    tuple_0 = (str_0, bool_0, bool_0, str_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    str_0 = "E}p]d/;tL@6iS"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    int_0 = -1814
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    bytes_0 = b"\xb9\x9b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1198():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1199():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    float_0 = -1598.49
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    complex_0 = -1493.851 - 196.698j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    int_0 = -772
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    complex_0 = 1212.2 - 1555.19j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    complex_0 = -1024 - 379.880975j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    int_0 = 3142
    module_0.get_new_command(int_0, int_0)


def test_case_1207():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1208():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    list_0 = []
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (list_0, tuple_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    complex_0 = -1526.359 - 1669.9987j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    int_0 = 2079
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    tuple_0 = ()
    str_0 = "`\x0c*"
    dict_0 = {tuple_0: str_0, tuple_0: tuple_0, tuple_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_1214():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1215():
    int_0 = 1137
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1216():
    bytes_0 = b"J\xc8\x00\xfa7\xa9c\x95\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1217():
    int_0 = 3357
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    bytes_0 = b"h\xdd\x1a\xb1m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    set_0 = set()
    str_0 = "YX6!i?> <G~S"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    bool_0 = False
    float_0 = -2165.379318
    tuple_0 = (bool_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    none_type_0 = None
    int_0 = -1710
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bytes_0 = b"\xf6\x93\t\x04\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    list_0 = [tuple_0, set_0, set_0]
    tuple_1 = (set_0, list_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    int_0 = -702
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    int_0 = 348
    bytes_0 = b"2T<*(\xbeq\x16\x1f\x1ero"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    int_0 = -435
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    int_0 = 1240
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    bytes_0 = b"\x0c\xa5\xe7\x8c\x94\x87\xee\x1c>\x91\xc1\x96\x96"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1232():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1233():
    bool_0 = False
    int_0 = -575
    tuple_0 = (bool_0, int_0)
    list_0 = [tuple_0, int_0]
    list_1 = [list_0, bool_0, list_0, list_0]
    module_0.get_new_command(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    bool_0 = True
    str_0 = ""
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    complex_0 = -492.79237 - 1935.528j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    int_0 = 281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    float_0 = 1701.4723
    bytes_0 = b""
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b"v\x97vX\x92dQ<k\xcb\x9a\xa3\xe2\xb5?\x10\xde"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1240():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1241():
    object_0 = module_1.object()
    str_0 = "\x0c`\x0c*"
    dict_0 = {str_0: object_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1242():
    float_0 = 1458.3
    str_0 = ">w@mgTs"
    int_0 = 1951
    tuple_0 = (float_0, str_0, int_0, int_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1243():
    object_0 = module_1.object()
    set_0 = {object_0}
    tuple_0 = ()
    int_0 = -1027
    tuple_1 = (tuple_0, int_0, tuple_0, set_0)
    module_0.match(set_0, tuple_1)


def test_case_1244():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1245():
    float_0 = 10.9984
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    str_0 = "7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    str_0 = "{~.*C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    bytes_0 = b"\xef\xb2\xec?\xa6:%\x0f\xcd\xeb\x91\xa0\\\xcd$"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    float_0 = 1964.96
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bytes_0 = b"\xe9\x9a>\xe6=\xec\x11P\x0cv"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1253():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    bytes_0 = b"\xea\x9c"
    str_0 = "Y3"
    tuple_0 = (list_0, list_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1254():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1255():
    str_0 = 'NcH" y\x0b{\n_hPeN%5Ud'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    bytes_0 = b"\x8f\x18\x0f\xfd\x89\xde\x84Y\x03\x04\x91\xbbJ\x8ab\xa3\xd1\xfaov"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1257():
    bytes_0 = b"\x95\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1258():
    bytes_0 = b"\xa1l\xea\xb2\xf8\xd4"
    module_0.match(bytes_0, bytes_0)


def test_case_1259():
    pass


def test_case_1260():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1261():
    bytes_0 = b"\x90\xa4AE"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    str_0 = "._na2y.{VF"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    none_type_0 = None
    str_0 = "6fJJPYG$A=Y{LBI"
    str_1 = "2HD_i|"
    dict_0 = {str_0: none_type_0, str_0: str_0, str_1: str_1}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    str_0 = "-\\y2#=&pkz'n5F"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1266():
    int_0 = 6269
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1267():
    bool_0 = True
    bytes_0 = b"(/\xdc\x84\xbc\xaev\x92\xc3;\xcc\xe1/\x81"
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    float_0 = -551.8
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    str_0 = "@6A@A]0i-\r~~yZVd"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1271():
    int_0 = -135
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    int_0 = 131
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    str_0 = "FI\t;Qjw.>1R1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    bytes_0 = b"\x0e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1275():
    bytes_0 = b"\xa8\xf7\xafn\xd7\xccE2\xd4\xbde\xbc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1276():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    bytes_0 = b"\xb0\x8d\xaa\xdd\xd3g'ZH"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    bytes_0 = b"\x89\xa7\x15@U"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    str_0 = "n5@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    complex_0 = -279.42845 - 2070.8j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    float_0 = -2891.21
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    str_0 = "$,w'~^]Od"
    str_1 = "\x0bSrA)[]Y"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1284():
    float_0 = 673.07108
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1285():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    int_0 = -393
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    set_0 = set()
    complex_0 = 409.9 - 1895.88725j
    float_0 = 1146.788429
    tuple_0 = (set_0, complex_0, float_0)
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    bool_0 = True
    str_0 = "g'QS.\nv] %P}-nA|Mqy"
    set_0 = {bool_0, bool_0, bool_0, str_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_1, bool_0, bool_0}
    bytes_0 = b"\xb7\x16\x13g"
    tuple_0 = (bool_0, set_0, bytes_0)
    str_0 = "43Hg%UbF~\n_o,N}Z9;"
    tuple_1 = (tuple_0, str_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1291():
    str_0 = "_z1^3<~?h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1292():
    bool_0 = True
    complex_0 = -2239.986643 + 1378.26j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    float_0 = -695.174094
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    int_0 = 2847
    str_0 = "`"
    str_1 = "ipL7uU`"
    tuple_0 = (int_0, str_0, str_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


def test_case_1297():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1298():
    bytes_0 = b"\x17l\xddZy\xc0\x06\xf1\xef"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    str_0 = "s\tqd.QA\rk&6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1301():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1302():
    bytes_0 = b"\xde!\xfe=\x8b\xefaoO\xe05\x8f\xca;\x06\x07\xacJ\x94"
    set_0 = {bytes_0}
    list_0 = [set_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    float_0 = -2664.114
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    bytes_0 = b"\xf5\xce\x93\x01\xb8\x1d\xb36\xa9=n\x82}y`I\xd0\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1}
    list_0 = [set_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    bytes_0 = b"^\x99&\xa8\xc8P\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    int_0 = -2333
    int_1 = 2220
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


def test_case_1314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1315():
    float_0 = -1666.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1316():
    bytes_0 = b"\xf9\x06G"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0, set_0]
    bool_0 = True
    float_0 = -762.8
    tuple_0 = (list_0, float_0)
    tuple_1 = (list_0, bool_0, tuple_0)
    list_1 = [tuple_1]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    int_0 = -2020
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    bool_0 = True
    bytes_0 = b""
    tuple_0 = (bool_0, bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    bytes_0 = b"sI\xee\x1c\x94\xa0\xf0"
    set_0 = set()
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    str_0 = "hPG'.{ktm!IQU;#Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    complex_0 = 387.018255 - 3481j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0, complex_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    bool_0 = False
    tuple_0 = (bool_0,)
    bool_1 = True
    tuple_1 = (tuple_0, bool_0, bool_1, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    complex_0 = 548.239 + 2569j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    int_0 = 887
    module_0.match(int_0, int_0)


def test_case_1327():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1328():
    str_0 = '"@FtbV'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    none_type_0 = None
    bytes_0 = b""
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"\x07\x10\xfd$\x1f\xcd\x84\xa7%(\xd2\xb4\x0cI"
    tuple_1 = (tuple_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    none_type_0 = None
    int_0 = 2607
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    int_0 = -994
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    set_0 = set()
    bytes_0 = b"J\x82"
    bool_0 = False
    tuple_0 = (set_0, bytes_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    int_0 = -1965
    module_0.match(int_0, int_0)


def test_case_1336():
    pass


def test_case_1337():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1338():
    str_0 = "-0X4\n\x0clK;/>`"
    set_0 = set()
    int_0 = 883
    bool_0 = True
    tuple_0 = (str_0, set_0, int_0, bool_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    int_0 = 3513
    list_0 = [int_0, int_0]
    dict_0 = {}
    tuple_0 = (dict_0,)
    tuple_1 = (int_0, int_0, list_0, tuple_0)
    tuple_2 = (tuple_1, dict_0, int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    float_0 = -3258.444
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    bytes_0 = b"C\x07Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    str_0 = "tEA]!at("
    module_0.match(str_0, str_0)


def test_case_1343():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1344():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bytes_0 = b"#!vu"
    int_0 = 1269
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    int_0 = 1586
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    complex_0 = -4900 - 629.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    str_0 = "[V"
    int_0 = -591
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    str_0 = "tCku| *TKN("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    int_0 = -553
    str_0 = "=qj[{Yg*qV"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    float_0 = -666.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1353():
    int_0 = -3284
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1354():
    list_0 = []
    int_0 = 3418
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    complex_0 = 4417.8 - 1535.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    int_0 = 3937
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bytes_0 = b"}\xd7\x101"
    set_0 = {bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    int_0 = -4389
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    str_0 = "u_l}S@C)D~qOx{V2Jth"
    dict_0 = {str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1361():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1362():
    int_0 = -5112
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    complex_0 = -625 - 149j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    complex_0 = -5106.765 + 92.602953j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    bytes_0 = b"\xf0(Zf\xceK\xd9\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    bytes_0 = b"%\x8f\x03 "
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    str_0 = "\x0b\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    float_0 = -2180.442684
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    int_0 = -1507
    int_1 = 746
    list_0 = [int_0, int_1, int_0]
    module_0.match(list_0, int_1)


def test_case_1370():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bytes_0 = b"\xfd,\xdd\xf8\x8b\x1c\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1372():
    str_0 = "?2taT^`g"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_1373():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1374():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    int_0 = -210
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (int_0, list_0, list_0)
    module_1.object(*tuple_0)


def test_case_1376():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1377():
    int_0 = -959
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    bytes_0 = b"\x93|\xb0\xaf\xc1[\x1d\x1b\xe6@S\x93\x14-[bnSk\xd9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    str_0 = "\tKI\x0b y8:VA.m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    float_0 = -3321.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    str_0 = "GY6I|cv\\Nu.|_2O"
    bytes_0 = b"\x12\xd6\xfey -q\xb8\xb6q"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    bytes_0 = b"1y\x8b\x84b\x98\xc2\x06=2\x82\xc3XJ"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    float_0 = 71.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    int_0 = -920
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1386():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1387():
    str_0 = "GBqE\\,sm%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    float_0 = -1420.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    set_0 = set()
    list_0 = [set_0, set_0]
    list_1 = [list_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    str_0 = "oEvp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    int_0 = -1603
    module_0.match(int_0, int_0)


def test_case_1394():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1395():
    int_0 = -477
    tuple_0 = (int_0,)
    list_0 = [int_0, int_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    str_0 = "\x0c1/i/"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bool_0 = True
    bool_1 = False
    bool_2 = True
    tuple_0 = (bool_0, bool_1, bool_2)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    str_0 = "\tB"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    object_0 = module_1.object()
    bytes_0 = b"b]\xb8e0go$\xd4\x99\xcf\xb8\x140\xa6"
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: bytes_0,
    }
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    none_type_0 = None
    int_0 = 533
    module_0.get_new_command(none_type_0, int_0)


def test_case_1401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1402():
    str_0 = ",v8]-($p! n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    str_0 = "D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    complex_0 = -3661.5775 + 161.77j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    int_0 = -257
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    int_0 = -365
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = ()
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    int_0 = -4287
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    set_0 = set()
    int_0 = 635
    list_0 = [set_0, int_0]
    tuple_0 = (set_0, int_0, list_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    bytes_0 = b"\x7f\xc2\xb5\xf6z\x198\xb4d\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1413():
    int_0 = -30
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1414():
    float_0 = -4851.9
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_1415():
    str_0 = "\nN\n,~;[FV\x0cNy:L"
    list_0 = [str_0]
    float_0 = 2275.56782
    complex_0 = 1164 + 124.454086j
    tuple_0 = (list_0, float_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    bool_0 = False
    float_0 = 1588.2
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    str_0 = "A)&m{v}j2:ugysG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1418():
    str_0 = '1IGsJ"KMu'
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1419():
    int_0 = 2492
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    float_0 = -573.4678
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    complex_0 = 5278.149737 + 1686.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    int_0 = 976
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    float_0 = -628.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    bytes_0 = b"\xd6\xc0A\xfb\xca\x86\x11\x94f."
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    complex_0 = -2422.945049 - 645.6764j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    str_0 = "T60~~]/]hw"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0, str_0: tuple_0, str_0: tuple_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    bytes_0 = b"\x85\xd1\x90\xbej\xa4\x003.!g"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    complex_0 = -487.6 - 2182.0202j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    bool_0 = True
    bytes_0 = b"\x87\xb9l@"
    complex_0 = -3549.771476 + 510.60354j
    list_0 = [bool_0, bytes_0]
    tuple_0 = (bool_0, bytes_0, complex_0, list_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    bytes_0 = b">\xb3!\xfc\xe6n\x8a\x89\xa4\xc1T5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    int_0 = -3013
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    str_0 = "I\x0bh=J~(*!7"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0, dict_0, dict_0, dict_0)
    bytes_0 = b"\x81\x8ef\x80\xea\xa5*S\xe8\x826\x93F"
    tuple_1 = (bool_0, tuple_0, bytes_0)
    dict_1 = {str_0: bool_0, str_0: tuple_1}
    list_0 = [str_0, str_0, str_0, dict_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    float_0 = -736.45425
    module_0.match(float_0, float_0)


def test_case_1440():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1441():
    object_0 = module_1.object()
    str_0 = "R"
    module_0.get_new_command(object_0, str_0)


def test_case_1442():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1443():
    int_0 = -727
    bool_0 = False
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    bytes_0 = b'N#\xed{\x99$\x1a"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    str_0 = "^x$vABu d1o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    int_0 = -732
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    float_0 = 1798.7
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_1448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1449():
    bytes_0 = b";\xa3y\xe4\xdfDa\xad"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    int_0 = 4491
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    bytes_0 = b"\xdd\x83\xa0\x98\x17\xb5g"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    bytes_0 = b"\xac\xf9\x04"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = '*_u?8bQeGNo}"GC'
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    complex_0 = -2229.921 + 742.985493j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    float_0 = -2880.0
    list_0 = [float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    int_0 = -1735
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1457():
    bytes_0 = b"\xe9T\x89[\xec\xc1H"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1458():
    bytes_0 = b"\xa4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    str_0 = "E#Z}:'\n3QB2orCqI"
    str_1 = "y!Dt#P|9 5D0;\n"
    float_0 = 255.84
    str_2 = "3%xv-~+NFfNDM"
    dict_0 = {str_0: str_0, str_1: float_0, str_2: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    str_0 = "stm~\\e/wKj\teD\\k\nL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    str_0 = "y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    bytes_0 = b"\xc2\xfft\xa3\xd8\x18\xb4C\xa5\x18@\xab\x1e\xc9\xded"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    str_0 = "<T)-9V/"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1464():
    complex_0 = -2340.17 + 2091.0471j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1465():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0}
    bool_2 = False
    set_0 = {bool_1, bool_1}
    float_0 = -2402.344
    tuple_0 = (float_0,)
    tuple_1 = (dict_0, bool_2, set_0, tuple_0)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    str_0 = "'di>d\rUV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    bytes_0 = b"\xca3\x03V\xd1\x03\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    float_0 = 2086.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    float_0 = 528.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    int_0 = -824
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    bool_0 = False
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    int_0 = 2982
    str_0 = "N~=UNz\tU`NN:\x0bS"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    str_0 = '*+cG*P\nT`|0r"&;\r'
    set_0 = {str_0}
    dict_0 = {str_0: set_0, str_0: set_0, str_0: set_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    none_type_0 = None
    bytes_0 = b"|\xfc\xe5\x0b4\x01\x16\xe9\xab\x02+\xf0\xe4\\"
    module_0.get_new_command(none_type_0, bytes_0)


def test_case_1477():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1478():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = True
    tuple_0 = (bool_1,)
    tuple_1 = (list_0, list_0, tuple_0)
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    str_0 = "te"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1480():
    int_0 = -3325
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1481():
    complex_0 = 635.815 - 2176j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    tuple_0 = ()
    int_0 = 3643
    tuple_1 = (tuple_0, int_0, int_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    int_0 = -827
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1485():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1486():
    int_0 = -5354
    str_0 = ":$C,\x0c3\rz\r721\r"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    str_0 = "Sz:bofJy3i'TW) Tc}J"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    int_0 = 3584
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    int_0 = 962
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    int_0 = 877
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1492():
    str_0 = "!qm)9.Gt>gs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1493():
    dict_0 = {}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0, dict_0]
    module_1.object(*list_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    complex_0 = -1926 + 220.966871j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    str_0 = "k`I~3k_e!Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    str_0 = "3eL-pv%cr\x0b^yihj9^$"
    none_type_0 = None
    str_1 = "KI8+"
    str_2 = "NC"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    int_0 = 442
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    str_0 = "K>iuZq,gZ>zAT&/"
    str_1 = "kFJkl<[P\\hFV-r`"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    bytes_0 = b"\xec\x00\x9f\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    bytes_0 = b"\x994\x04\xfb\xdf?/6R"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    float_0 = -2719.9487
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    int_0 = -1662
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    bytes_0 = b"}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1507():
    str_0 = "Mxru[),aje2Ro;@"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1508():
    bytes_0 = b"\xdd\x16\xb8\xaa\x8f\xba\x83\xcd\xda|\x9e\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    str_0 = "/D#H^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    bytes_0 = b"\xf5"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    str_0 = "5kA cTIB\\`jfez%,B"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    int_0 = -1949
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    float_0 = 42.37
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    str_0 = "CIW"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1515():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1516():
    str_0 = "902]3cnaR*$Is$xy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1517():
    bytes_0 = b"&z\x14\x15\xcfr\x814B\x13\xee,\x91\x1f\xfa\xfa]\x14N\xd7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    int_0 = 2096
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    bytes_0 = b"ja&F#Hj\xf6\x06oSI\x8f\xde\x904\xd03J\x8b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1520():
    bytes_0 = b"\x17\x9b\xfaK5\xfc@\x1e\x02\x14\xa4\x07\xec\x028"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bytes_0 = b"\xc3\x13\x0e\xe1\xe7"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0]
    module_0.match(list_1, bytes_0)


def test_case_1522():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1523():
    float_0 = 654.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1525():
    bytes_0 = b"`8\xae"
    int_0 = 418
    tuple_0 = (bytes_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    complex_0 = 4573.2 + 280.03j
    tuple_0 = (complex_0, complex_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1528():
    str_0 = "9UA/>)h2q"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1529():
    str_0 = "Z\x0cBRcamryqx4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    bytes_0 = b'N"\x06'
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


def test_case_1531():
    pass


def test_case_1532():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1533():
    list_0 = []
    bytes_0 = b"2\xec\xe9h\x03\x06\x88\xdf\xdc\xe8\x01\xf1\xbd\x8b\x06"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    bytes_0 = b'h\xde\x91\x88\xaf\xa6Z\xe4"S\xd3\x16\xbe,\xd0\xe5\xa2'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bytes_0 = b"\xdb\x04\xcc\xf0u"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    float_0 = -1043.259259
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    bool_0 = False
    str_0 = "G"
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_1539():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1540():
    str_0 = "|EbW})tSVaLGr^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    int_0 = 16
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    int_0 = 1921
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    bytes_0 = b"\xa7\xf91m\xda\x119\xcc,\x06:\xeb\xe4x\x8dY"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    bytes_0 = b"`\x08\xc4m\xf8\x05\xc8Z\xea\x10(\xab\xdb\xc8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bytes_0 = b"2\xec\xc58\x82\x08\x08\x90\xeag\xbc\xb7"
    tuple_0 = ()
    int_0 = -2283
    object_0 = module_1.object()
    dict_0 = {bytes_0: bytes_0, tuple_0: tuple_0, int_0: object_0, object_0: object_0}
    list_0 = [bytes_0, bytes_0, bytes_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    float_0 = -17.77
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    int_0 = -790
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    bytes_0 = b"\tgw_\xcb\xff\x1f\xe2\xfe\x0e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1551():
    bytes_0 = b"\xf8`1T=\xf3\xa1\xb6\xb2\x9c\xea\x08a\xc0^R\xf0\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1552():
    int_0 = 1692
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    float_0 = 1208.98
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    complex_0 = 416.991 + 1980.3174j
    bool_0 = False
    tuple_0 = (complex_0, bool_0)
    tuple_1 = (tuple_0, tuple_0)
    bool_1 = False
    list_0 = [tuple_0, tuple_0, tuple_0, bool_1]
    tuple_2 = (complex_0, tuple_1, list_0)
    module_0.get_new_command(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    int_0 = 283
    bool_0 = True
    module_0.match(int_0, bool_0)


def test_case_1557():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1558():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    int_0 = -886
    str_0 = "pZz(a/+;]-(\nhF"
    set_0 = {int_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1561():
    str_0 = "T4[g\rs(/84`8M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1562():
    int_0 = -1030
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1563():
    float_0 = -1069.4
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1564():
    complex_0 = -92.478603 - 2555.2211j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    float_0 = 2889.8801
    set_0 = set()
    tuple_0 = (float_0, set_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    int_0 = -5071
    bool_0 = True
    dict_0 = {int_0: bool_0, bool_0: int_0}
    float_0 = 2237.609
    tuple_0 = (int_0, dict_0, int_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    bool_0 = True
    float_0 = -2059.12
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    str_0 = "Rh' `(yPO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    bytes_0 = b"2\xdeZc;z\x1b"
    list_0 = [bytes_0]
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    int_0 = 448
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    str_0 = "XYI&|EH.pf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1574():
    bytes_0 = b"\x80H\xa6n\xd6@\xd2\x14\xfc\x99\xb1L\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1575():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    int_0 = 5294
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    int_0 = 2381
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    float_0 = -939.01631
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    str_0 = "r\\j\n\\|y^l6^\r3OR"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = "s=]}0D"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1581():
    int_0 = 1605
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1582():
    str_0 = ":`)qV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    float_0 = 2054.4801
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_1585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1586():
    bytes_0 = b"\xe9q\x05|o\xdc\x0c\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    float_0 = -373.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    int_0 = 1554
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    bytes_0 = b"\xee\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bytes_0 = b"C\xd4\x1fT\xc9\xdaB\xb9\xf8\xfb\x1fI\r&d\x0e"
    bytes_1 = b"\xf4@3\x8d\x9b\x87\xfa\xdfV\xce\x10"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_1: bytes_1, bytes_0: bytes_0}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    int_0 = 1765
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1592():
    int_0 = 1217
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = "+hGE8.FAY@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    dict_0 = {}
    bool_0 = False
    tuple_0 = (dict_0, bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    none_type_0 = None
    str_0 = "@Rl"
    str_1 = "96%>V`@}Yg"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    object_0 = module_1.object()
    str_0 = "4T\t]]gm&4B6a[Ktu^b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    int_0 = 1596
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    bytes_0 = b"\xa9\xbe\xb7\x12\x7f\xfe"
    int_0 = 3380
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    bytes_0 = b"\x9c\xa6\x04\x17\x83\x13\xa7\xb3k"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    bytes_0 = b"\xa7"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = -1315
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    int_0 = -4180
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    int_0 = 1286
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    int_0 = -1352
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_1608():
    pass


def test_case_1609():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1610():
    str_0 = "!*\x0ckZ$K"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    int_0 = -355
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    float_0 = 1937.78678
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    str_0 = "W\rxa5Eo;0_`\x0cI&k%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    int_0 = 1342
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    set_0 = {tuple_0, bool_1}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    float_0 = 2224.84
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    float_0 = -3175.695688
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    bytes_0 = b"\xcb\xa8\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    int_0 = -1012
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    int_0 = -1172
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    int_0 = -2456
    str_0 = "Id(8CMuW@+p>!}/(i"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    str_0 = "o~9\x0c1Ji\x0c-s[TtGR"
    list_0 = [str_0, str_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    str_0 = "o<0pyaQTbPF"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    str_0 = "hWFG+!#H=w<ra0l"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    str_0 = "0sZ@C`?5J??"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    bytes_0 = b"\xc2p\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    complex_0 = 1863.171012 - 961.25846j
    list_0 = [complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    float_0 = -1744.12
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    bytes_0 = b"y\xf8qI\xf0\xf4\xdc\xd9M\xda\x10"
    complex_0 = -105.3144 + 3106j
    bool_0 = True
    tuple_0 = (bytes_0, complex_0, bool_0, complex_0)
    tuple_1 = (tuple_0, bool_0)
    dict_0 = {tuple_1: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    int_0 = 381
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bool_0 = False
    str_0 = "u$+1}45$"
    str_1 = "y>8x3N"
    dict_0 = {str_0: bool_0, str_1: bool_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    list_0 = []
    tuple_0 = (list_0,)
    bool_0 = True
    bytes_0 = b"f!)\x94 \x81\x19'\x12T0\xbc\x1c\x1e\x9b\xb6\xa1 "
    tuple_1 = (tuple_0, bool_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    complex_0 = -864.864119 - 1698.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    str_0 = "z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    str_0 = "I\x0btg0L1"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    bytes_0 = b"A\xd7\xae\xcf\x80\x95\xdc\xf8\xc8\xc8f\xab\x0c\x8f\x82\x18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    bytes_0 = b"\x9b\xb0:y\x9e\xb2=\x06\xd3\x82\xa7e.fG\xcb\x93\x98\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    float_0 = 428.0
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    none_type_0 = None
    bytes_0 = b"`\xa4#t\x87JE\xd8\xf3tc/\x86\xc6\xdb\x0e\xe8&{"
    int_0 = -2589
    tuple_0 = (none_type_0, bytes_0, int_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    float_0 = 3044.5071
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    float_0 = 2538.279779
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    dict_0 = {bool_0: set_0, bool_0: set_0}
    module_0.match(set_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    bytes_0 = b"v\x01e\xd3p\rc=\xbe,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    int_0 = 958
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_1647():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1648():
    str_0 = "X[\x0b|A66?HE\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bool_0 = False
    float_0 = 1262.33
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    bytes_0 = b"\x9b\x88\xb9\xe36\xcdV\xdaw\x92\x8a\x8cB\x02\xb4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_1651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1652():
    bytes_0 = b"/\xa7\xab\x9bJv"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


def test_case_1653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1654():
    str_0 = "?_t]JWo3"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    complex_0 = -2483 - 2082.724j
    module_0.match(complex_0, complex_0)


def test_case_1656():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1657():
    float_0 = 447.5492
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    bytes_0 = b"\xb1\x81\x80Gl\xae\x8cf\r\xb4\x12\xc5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1659():
    complex_0 = -490.626876 - 172.275j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bytes_0 = b"\xa8\xafls\xc3\xf8\x16q\x14\xe2\xe1\xf7\xb8v'og\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    int_0 = -637
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_1663():
    object_0 = module_1.object()


def test_case_1664():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1665():
    int_0 = -2159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    int_0 = -1557
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    bytes_0 = b"\xb6H"
    list_0 = [bytes_0]
    str_0 = 'j"o2K'
    list_1 = [str_0, bytes_0]
    list_2 = [list_0, bytes_0, list_1]
    module_0.get_new_command(list_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    float_0 = 227.4
    set_0 = {float_0, float_0, float_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


def test_case_1669():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1670():
    float_0 = 662.80214
    set_0 = {float_0, float_0, float_0, float_0}
    bytes_0 = b"\xe1\xe7\x86}\n\xdc\xba\x19(3\x16Z\xac"
    tuple_0 = (set_0, bytes_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1671():
    int_0 = 1553
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1672():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bytes_0 = b"^\x84%^k\x12N"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    str_0 = "_^AE@7\"'\x0b&$cK\ro"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    int_0 = 1940
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    int_0 = 335
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    str_0 = "_hT_$m\nR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    complex_0 = 1565.837768 - 2498.092915j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    set_0 = set()
    int_0 = 637
    str_0 = "4nN~"
    tuple_0 = (int_0, str_0, int_0)
    bytes_0 = b"L\x03\x01\xeb2\xa6%i"
    tuple_1 = (tuple_0, str_0, bytes_0)
    module_0.get_new_command(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    float_0 = -1709.809
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    complex_0 = -36.536358 + 522.22j
    str_0 = "c"
    module_0.get_new_command(complex_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    bool_0 = True
    complex_0 = 516.602624 - 3530j
    list_0 = [bool_0, complex_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    str_0 = "{{Ss7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    bytes_0 = b"x\xb9\x0f\xc0t\x9d%\xd0\xc1d\x850&\x1czW\xc6\xa8\xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    int_0 = -1208
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    int_0 = -760
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    bool_0 = True
    list_0 = []
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    bytes_0 = b"S\x83?\xdb\x13x~\xd6s \xcf\x1f\xca\xdd\xe5\xc9u\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    bytes_0 = b"\xa9\x11\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    float_0 = -2220.4064
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    bytes_0 = b"\t>\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    complex_0 = -1752.182588 - 300.50037j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    int_0 = 961
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1697():
    int_0 = 1806
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1698():
    none_type_0 = None
    module_1.object(**none_type_0)


def test_case_1699():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1700():
    bytes_0 = b"r:N\xd5 $\xec^Q\xfa\xc0v\x85M\xfe"
    str_0 = "5=zH!iyzX53W}"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    int_0 = -2077
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    complex_0 = 857.32491 + 1947j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    str_0 = "]\n>7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    bytes_0 = b"?}\xade\x95\xec\xae\x9d\xc8\xbcf\xa5\x9fW\xed\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    int_0 = -4593
    str_0 = "K>qk\x0b:h[8TrIn'bIz"
    dict_0 = {str_0: int_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    int_0 = 367
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    bytes_0 = b"\x1dlgl\x80\x89\x1eX\x973\xc0"
    tuple_0 = (bytes_0,)
    str_0 = "z:4[LAit4W"
    set_0 = {tuple_0, str_0}
    int_0 = -2211
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, dict_0, dict_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bytes_0 = b"\x97\xf1\xb6%P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    float_0 = 2702.80405
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    str_0 = "q+3np@pn&.-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    int_0 = 983
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    str_0 = "&`G:\x0c`/8RUy'8`5!"
    str_1 = "#O/Q<K`F\n_;SzOk5]UT"
    dict_0 = {str_0: str_1, str_1: str_1}
    module_0.get_new_command(dict_0, str_1)


def test_case_1715():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1716():
    int_0 = -823
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    int_0 = -1032
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    int_0 = 2674
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    complex_0 = 475.483 + 1660j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    bytes_0 = b"\xbaB"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    int_0 = 3369
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    str_0 = "\\^=^xI^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    float_0 = -2184.1788
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    int_0 = 2513
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    int_0 = 2224
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    str_0 = "F'FL\\`$A4 g5}8[DZ"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    int_0 = 43
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    object_0 = module_1.object()
    int_0 = 1038
    list_0 = [int_0, object_0]
    list_1 = [object_0, int_0, object_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1729():
    int_0 = -698
    module_0.get_new_command(int_0, int_0)


def test_case_1730():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1731():
    str_0 = '1ch09U}0"oo'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1732():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    float_0 = -3628.76867
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    bytes_0 = b'\x05\x90,\xf1["\x8a\xfd\xb5\xee\xb2\x1b\xac-\xe5'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    int_0 = -2877
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    str_0 = "eYS`\tt$H3*p<;Q`"
    bytes_0 = b"<\x8eBE\xd5:"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    float_0 = 792.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    str_0 = "\t#LmT= -P?TV+"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    tuple_0 = ()
    bool_0 = True
    set_0 = {bool_0, tuple_0}
    str_0 = "S\x0c=I5KnqE!}g"
    tuple_1 = (set_0, str_0)
    module_0.get_new_command(tuple_0, tuple_1)


def test_case_1743():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1744():
    str_0 = "'yE\x0c.7x#Vw]]@+'\n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1745():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    bytes_0 = b"\x8f\xcf\xbdy"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    int_0 = 1121
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    bytes_0 = b"\x02\x13#\xbf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    object_0 = module_1.object()
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    complex_0 = -1577.01113 + 1042.40297j
    bool_0 = True
    int_0 = -1358
    str_0 = "\x0bP%7NA{\x0c?dg"
    tuple_0 = (complex_0, bool_0, int_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    bytes_0 = b"\xbe`_<\x1b\x14"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


def test_case_1754():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1755():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    bytes_0 = b"\x94\xf2\xab\xc9\xaf?\xa7@\xb6\xb0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    complex_0 = -1479 + 291.7j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    list_1 = [complex_0, list_0]
    int_0 = 1162
    tuple_0 = (complex_0, complex_0, list_1, int_0)
    module_0.match(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    bytes_0 = b"\xc0\x04"
    bytes_1 = b""
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    bytes_0 = b"x8i*\xb2w\xb9\xf1\xc9Xb\x88\xd6^\x96\x1c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    str_0 = "qyOK/\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    bytes_0 = b"\x1c\xdd\x9f\x16x`\xd2\x84\x14}n\x87*\xd6\xd3"
    module_0.match(bytes_0, bytes_0)


def test_case_1763():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1764():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1765():
    int_0 = 449
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1766():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    bytes_0 = b"\xd6\xcc4[mH\xb0\xef\x98\xb3\xa8("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    bool_0 = False
    list_0 = [bool_0]
    dict_0 = {bool_0: list_0}
    tuple_0 = (dict_0, list_0)
    list_1 = [list_0, list_0, tuple_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    int_0 = 3037
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    str_0 = '\x0cVP9"iK9~ZNYd$M\\\r$B<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    str_0 = "p=3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    bytes_0 = b"\xa2\xed\xb2\xba\xb2D\xc8\xf0L\xef\xd5\xefJ\x95\x1ac"
    list_0 = [bytes_0]
    set_0 = {bytes_0}
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    str_0 = "MAD\n7h\tT$F6f?71NoVAb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    float_0 = 939.0
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    str_0 = "/;h!N"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    float_0 = -2054.771
    module_0.get_new_command(float_0, float_0)


def test_case_1783():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1784():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {object_0: dict_0}
    module_0.get_new_command(dict_1, dict_0)


def test_case_1785():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1786():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0, bool_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1788():
    bytes_0 = b"\xee\xa40\x17\xe0\xae!Y\xbdce"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1789():
    str_0 = "FQP61"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    bool_0 = True
    int_0 = 1921
    dict_0 = {bool_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    complex_0 = -1143 + 308j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1792():
    int_0 = 2392
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1793():
    int_0 = -418
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1794():
    float_0 = 4128.544927
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    str_0 = "#[lHsJf;/\x0c"
    bytes_0 = b"\xf9\x87Y\x18\x9aO"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    int_0 = 633
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bytes_0 = b'x\xdcy.\x8d"\x8e\x00\x00\x01\xfd`'
    module_0.match(bytes_0, bytes_0)


def test_case_1798():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1799():
    bytes_0 = b"gF\xbc\xefp"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    bytes_0 = b"J\xc9\x1d\xa9\x1b*gp\x8f\xf7c\x07\x13\x89;v\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    bytes_0 = b"\xc0\x11L\x88?n\x1dL\x03' \xf94\x93\xea2\""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    str_0 = "jOk-5oE+5VQ\t.rBZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    str_0 = 'f+vXao ?"7$Z\\Zb'
    module_0.match(str_0, str_0)


def test_case_1804():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1805():
    bytes_0 = b"\x85\x9c\x05\x1a'\xff\x88\xf7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    int_0 = 1184
    int_1 = 2686
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    bytes_0 = b"\x01\x99\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1808():
    int_0 = 2644
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1809():
    int_0 = 719
    dict_0 = {int_0: int_0, int_0: int_0}
    dict_1 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: dict_0}
    module_0.get_new_command(dict_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    complex_0 = 1814.14374 + 1127.1742j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    float_0 = 1359.42
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    int_0 = -2187
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = []
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    int_0 = 645
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    float_0 = 4019.4467
    int_0 = 75
    set_0 = {float_0, float_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    str_0 = "$ZEN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    str_0 = "\x0cO(r]}1.Ct"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    complex_0 = -4599.689 - 3474.247j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    float_0 = 4461.4
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    str_0 = "!PiMHFClpM"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0}
    str_1 = "hN>lG`V4JA"
    module_0.get_new_command(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1824():
    str_0 = "(s\\$fY`eYA}.yZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1825():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    int_0 = 1716
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    list_0 = []
    str_0 = "zu="
    str_1 = "SOTc!hOVuL"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    bytes_0 = b"'\xd8%\xc8\x91\xa0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    str_0 = "->4]06qcD&J@"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    complex_0 = 1115.6686 - 3921.98j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1832():
    bytes_0 = b"bq\xe8\x17\x90s\x87\xad\xf4j\xde\xa1\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1833():
    float_0 = 957.654823
    str_0 = "`@~\x0ba\\$#N"
    dict_0 = {float_0: float_0, float_0: float_0, float_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    int_0 = 1327
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    float_0 = -1959.2436
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1837():
    str_0 = ">h#?$2\t%dvO~x/zuQuIt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1838():
    bool_0 = True
    int_0 = -42
    set_0 = {bool_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    float_0 = -1298.260757
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    str_0 = "V=Ls08p,N[\tMK\t#Ro7R2"
    int_0 = 1425
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    float_0 = 1290.304
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    str_0 = "pk8x{B<\r{HxP"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    int_0 = -256
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    bytes_0 = b"\xb1x\xdc)\x89VW\xe5}y\x9a"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    bool_0 = False
    set_0 = {bool_0}
    bytes_0 = b"XX"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    int_0 = 1461
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    float_0 = 3674.5941
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    int_0 = -722
    module_0.get_new_command(int_0, int_0)


def test_case_1853():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1854():
    str_0 = "QuNZOtX'h[CUm2"
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0)
    list_0 = [tuple_0, tuple_0, str_0, str_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    str_0 = '_?PBazw~S-\\F98P"i\n'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1856():
    complex_0 = -1085.18 - 2275.307j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1857():
    int_0 = 928
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1858():
    str_0 = "o'ab~bR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1859():
    bytes_0 = b"\xa5wo\xc6z\xc1I\x84\x82>\x12\x07\xea!\x8d\xad"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    int_0 = 1460
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    str_0 = "QE\tJ"
    tuple_0 = (bool_0, bool_0, list_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    bytes_0 = b")"
    complex_0 = 1561 - 213.888117j
    module_0.match(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    str_0 = "3^'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    str_0 = "ErZrgw5ULJ/x~s]h>?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_1867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1868():
    int_0 = -1937
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    float_0 = 902.955
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    str_0 = "]/ZjFeTP"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    float_0 = -262.2
    tuple_0 = (float_0,)
    list_0 = [tuple_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    str_0 = "Xkzl']=>s0N#cy\rcAS]\x0b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    str_0 = "*4UUtY6kD'0hpg]}2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    set_0 = {object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    str_0 = "c!:.\r#_7}+|*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    str_0 = ';n3#o"jJ~R&Bv(X`W\\~'
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    bytes_0 = b"N\x9fJ>\xc5-\xb6M\x00"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    float_0 = 289.34041
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    int_0 = 1642
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    int_0 = 2037
    int_1 = 781
    dict_0 = {int_0: int_0, int_0: int_0, int_1: int_1}
    object_0 = module_1.object()
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    int_0 = -3110
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    int_0 = -1163
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1883():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    bool_0 = False
    bytes_0 = b"}\xab\xdc\x17A\xfe\xe6X\xe7\xc9\xfd\xdd"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    int_0 = 2610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    bytes_0 = b"\xdaq\xcb\x82\xcd"
    str_0 = "ofl8A&?"
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, str_0: str_0, bool_0: bool_0}
    list_0 = [dict_0, bytes_0, bytes_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    bytes_0 = b"\xbe\xc6\x96\xe0\xa6\x8dL\xab\xb2\xcb^&$!\x8b\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    bytes_0 = b"9\x93Z\xd9p\x11\xb3\xe1\xa0\x91\x16K\x82\xaac8\xa9\xce\x8e$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    str_0 = 'z)mB"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    int_0 = -5332
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    str_0 = "y{\x0c\t#"
    bytes_0 = b"\xf3\x8f*\x8c\xe7"
    tuple_0 = (str_0, bytes_0, bytes_0)
    dict_0 = {tuple_0: str_0, str_0: str_0, tuple_0: tuple_0, str_0: str_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    str_0 = "\t[\x0b/|nr;j`#igeps"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    object_0 = module_1.object()
    list_0 = []
    tuple_0 = (object_0, object_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    str_0 = "uXFwwJxnQY3"
    tuple_0 = (str_0,)
    list_0 = [tuple_0, tuple_0, str_0]
    module_0.get_new_command(list_0, tuple_0)


def test_case_1896():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1897():
    str_0 = "K/_=|@w7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    bool_0 = False
    complex_0 = 2578.43717 - 4951.030978j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    int_0 = 9
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    float_0 = -392.6845
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    bytes_0 = b"\xba\xc3\t\xc2\x96\xbc\xc5\x88\xda"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bytes_0 = b"Y\xa8\xba\xe7\xcc\xc5\xf7W\t\xfb<[j\xa8d^&\xe9\xf5"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    str_0 = "P\x0byEB\\Kx9?*a>E"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    int_0 = 3634
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    str_0 = "\nDqr]_#=zw7xP)/s-/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    bytes_0 = b"\xf9\x81Fz\xbe\x97c\xd6\x9c\x8e@<\xc42~\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = -4105
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    int_0 = 3582
    module_0.get_new_command(int_0, int_0)


def test_case_1911():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1912():
    str_0 = "JZi9kL-PE2L9rvWIu_55"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    list_0 = []
    str_0 = "CM7\n]Q.-slx7X"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1915():
    float_0 = -2720.11
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1916():
    int_0 = 1538
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    str_0 = "0laioO+ToY"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    complex_0 = -1230 - 1209.99073j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    str_0 = "k,\nIV"
    tuple_0 = (str_0,)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0)
    module_1.object(*tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1920():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    bool_0 = False
    set_0 = set()
    bytes_0 = b"'IO\x86L\xd2\xcc\x80\xe8\xc0\xc7\x07`\xaa\xcfS"
    tuple_0 = (bool_0, set_0, bytes_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_1922():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1923():
    str_0 = "xxzr"
    str_1 = "+9z?v^\x0bx"
    bool_0 = False
    str_2 = ""
    dict_0 = {str_1: str_1, str_1: bool_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    float_0 = -1692.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    str_0 = "7!c xGGkdrVQQgTFUN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    str_0 = "~XU0Ww$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1928():
    bytes_0 = b"\xb1C\xe5\xedz\x89\xab\x93\x92"
    int_0 = 3324
    tuple_0 = (bytes_0, int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1929():
    str_0 = "VV^fG\")[ R3z'kvl8\rai"
    module_0.match(str_0, str_0)


def test_case_1930():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1931():
    str_0 = "6pi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    int_0 = -1095
    bool_0 = False
    int_1 = -3165
    tuple_0 = (int_0, bool_0, int_1)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    str_0 = "u7$Gk+H?`4^\rG&'"
    str_1 = "TLW ,3#tsKV]U"
    str_2 = 'rnLm~Q9%>M&=\r]h-"%va'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    bytes_0 = b"\x81]\xc8LjQ@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    str_0 = "J\neP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    bytes_0 = b"X\xdb*\xd8("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1939():
    complex_0 = 967.847524 - 3466.3j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1940():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1941():
    bytes_0 = b"\xf8\x9c\x90\xb8\xc49\x11?\xc432\xc8\xd4\xc2t\nH"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1942():
    int_0 = -3595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    int_0 = -1510
    bytes_0 = b"\xa5X\t\x81\x7f\xf5\x9e"
    tuple_0 = (bytes_0, int_0)
    module_0.match(int_0, tuple_0)


def test_case_1944():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1945():
    bytes_0 = b"\xae\xf5l\xdez\x9f\xba\xf5\xdd\x80\x0e\x1c\x9e\xe9Z\x9cfk"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    int_0 = -2359
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    bytes_0 = b"\xd2\x93\x9c\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    complex_0 = 673.26512 + 2814.489j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    int_0 = 1866
    int_1 = -512
    bytes_0 = b"\x90t"
    tuple_0 = (int_0, int_0, int_1, bytes_0)
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    float_0 = 4083.2
    list_0 = [float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1953():
    int_0 = 1806
    object_0 = module_1.object()
    dict_0 = {int_0: int_0, object_0: object_0, int_0: object_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1954():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    str_0 = "c*L4\x0b\n+|5}VTeM$c\x0b3"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    str_0 = "0e2AL#.*cmO_^x$P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


def test_case_1961():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1962():
    str_0 = "Ks);"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    float_0 = 601.0
    str_0 = ""
    dict_0 = {str_0: str_0, float_0: str_0, float_0: float_0, float_0: str_0}
    tuple_0 = (float_0, str_0, dict_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0, bool_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    complex_0 = -3815.858 - 2835.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_1, bool_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    float_0 = 1770.46
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    bytes_0 = b"\xd3\x81#\xf7A\xaf(\xfc\xd3\xbc\xf4lq\r\xb9\xd4\xeb"
    bytes_1 = b"\xe2;_@>Rs\x93gm\xa5\xb7!\xab\xba\x93\xeb~;Z"
    tuple_0 = (dict_0, list_0, bytes_0, bytes_1)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    str_0 = ":G$#O\n+%+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    complex_0 = 4018.17 + 1385j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1971():
    bytes_0 = b"\xd3Z\x8a\x98\xbdU~Tr\xbc\x803\x85<?\x86\x881"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1972():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    float_0 = 3406.899
    list_0 = [float_0]
    tuple_0 = (float_0, float_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    bytes_0 = b"M\xb3V%Z\x0c9\xdc\xe1\x19"
    bool_0 = True
    str_0 = "(tk"
    tuple_0 = (bytes_0, str_0)
    tuple_1 = (bool_0, tuple_0, bool_0)
    module_0.get_new_command(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    str_0 = "{x2*/w"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    int_0 = 863
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    float_0 = 4.1578
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    str_0 = "ttTq$DTO<7g?P0hie"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    int_0 = -428
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    int_0 = 950
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    int_0 = -268
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    bytes_0 = b"\x04z\xcf\rP\xc4o\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    float_0 = 787.0
    module_0.match(float_0, float_0)


def test_case_1985():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1986():
    float_0 = -1488.11903
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1987():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1988():
    int_0 = 523
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    bytes_0 = b"\xacW\x8d\xa0'\xd2\xd6\xe3\x88\x90P\x15\xfc\x1cR"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    str_0 = "(2'3wV@vwjx"
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    int_0 = 1017
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    float_0 = -744.0
    float_1 = 1395.3
    list_0 = [float_0, float_0, float_0, float_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_1994():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1995():
    str_0 = '"d'
    module_0.get_new_command(str_0, str_0)


def test_case_1996():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1997():
    float_0 = 2321.663
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    str_0 = "k.cb5>C8d "
    module_0.get_new_command(str_0, str_0)


def test_case_1999():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2000():
    int_0 = -3220
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2001():
    str_0 = "}e5}&1+\to}cJ"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2002():
    int_0 = 2922
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    int_0 = -289
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    float_0 = -790.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    int_0 = -1744
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    str_0 = "2Njo-\t )"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    int_0 = 3046
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    bytes_0 = b"\x13\xfe\x14\x9cv-\xfd\x89\xaf\x1e\xa4\x886\x1e\x0e."
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    int_0 = -3925
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    bytes_0 = b"\xbd\xb9[\xae\x12"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    int_0 = 2015
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    str_0 = "/HAJ{"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    int_0 = 1886
    bool_0 = True
    dict_0 = {}
    tuple_0 = (int_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2018():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2019():
    int_0 = 5219
    int_1 = -30
    dict_0 = {int_0: int_1, int_0: int_0}
    str_0 = "m/#~\n#Q'`o:'[\"wz]^"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    int_0 = 5628
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    int_0 = 3480
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    set_0 = set()
    int_0 = 1769
    list_0 = [set_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    int_0 = -362
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = 2190
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    int_0 = -147
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    int_0 = 317
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    str_0 = "\r@fu^MUi"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    bool_0 = False
    float_0 = 5071.2728
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    complex_0 = 3524.28 + 216.13j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    str_0 = "I.p^m(iJAPZp)V"
    module_0.get_new_command(str_0, str_0)


def test_case_2032():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2033():
    int_0 = -595
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    float_0 = 538.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    int_0 = -239
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    bytes_0 = b"\x11-\xf8V\xa3-\x8b\xc7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_2039():
    str_0 = "S4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2040():
    float_0 = 202.489
    module_0.match(float_0, float_0)


def test_case_2041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2042():
    str_0 = "\\\x0bk'9/vT$-2ZD:"
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    bytes_0 = b"\xbe\x95\x0b\xe7I\xdc\xfa?\xca5l\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    float_0 = 1520.298405
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    bytes_0 = b"\xc6\xb6\xce\x8e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    bytes_0 = b"R\x80+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    str_0 = "/N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    int_0 = -1644
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    float_0 = 2988.156
    module_0.match(float_0, float_0)


def test_case_2054():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2055():
    int_0 = -2342
    tuple_0 = (int_0, int_0)
    tuple_1 = (int_0, tuple_0, int_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    bytes_0 = b"/\x06;D_.\x93F\xe5\x17A\x95/A\xfc\x17\xeb5\x9f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2058():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_1}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2059():
    str_0 = "$2\tv"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2061():
    bytes_0 = b"\x97\xa2\xe0\x9b\xc1\xacg\tl\xa8\x87\xa1\xf3"
    int_0 = -7281
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2062():
    object_0 = module_1.object()
    str_0 = "FR@^\x0bcs?|)\x0c=aa:=`\rm "
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    int_0 = 4550
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    list_0 = [dict_0]
    object_1 = module_1.object()
    module_0.match(list_0, object_1)


def test_case_2065():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2066():
    int_0 = 2217
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    bytes_0 = b"\xb1@\x88\x9b\xc0r\x1f\xbb"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = ()
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    int_0 = 1657
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    int_0 = -412
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    int_0 = 2434
    str_0 = "23n; `}DVn"
    bool_0 = True
    tuple_0 = (int_0, str_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2073():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2074():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    list_0 = []
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    float_0 = -1236.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    float_0 = -2297.232
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    str_0 = "{wfyj4\x0b#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    int_0 = -494
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    complex_0 = -965.930939 + 487.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    bytes_0 = b"\x1d\x9dO=R\x93!\x84\x15\x95\x80A5\xf9,LNNJ"
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    int_0 = 668
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    list_0 = [set_0, object_0, set_0, object_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    bool_0 = True
    str_0 = "]mV^[\x0by}fy#BT;:T}T"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    float_0 = 1762.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    int_0 = -565
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    str_0 = ",._r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    str_0 = "V\nHyF=CiyzC\n\x0bku"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    float_0 = 4964.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    int_0 = 2445
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    bytes_0 = b"\xacj\xf5$\xc6\xf0\x188)\xd8\xc2\r\xf2\xde\x92\x1ds\xb7"
    module_0.match(bytes_0, bytes_0)


def test_case_2094():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2095():
    bool_0 = False
    str_0 = "\x0c\np63o1~7zh+:8S"
    bytes_0 = b"\x95\xc4\xfe$\x16\xcf\xe9\x1d\xe6\x10\xce\x9e\x0b\x976\x8as"
    bytes_1 = b"\xda@\x94LL\x01\x04\xd3"
    tuple_0 = (bytes_0, bytes_1)
    set_0 = {bool_0, bool_0, str_0, tuple_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    int_0 = 138
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    none_type_0 = None
    int_0 = 1522
    module_0.get_new_command(none_type_0, int_0)


def test_case_2101():
    pass


def test_case_2102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2103():
    bytes_0 = b"8\xf0\xd2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    int_0 = 789
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    str_0 = "71XTh_AT"
    float_0 = -1710.83
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    bytes_0 = b"\x02\x80->\x94\x93^nbT'f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    float_0 = 1402.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    set_0 = set()
    module_1.object(*set_0, **set_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    int_0 = -475
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2110():
    bytes_0 = b"\xb0`\xf1P\x9f\xb3Y"
    module_0.match(bytes_0, bytes_0)


def test_case_2111():
    pass


def test_case_2112():
    object_0 = module_1.object()


def test_case_2113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2114():
    str_0 = "9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    int_0 = 653
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    int_0 = 5705
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    str_0 = " 'S?LnT}`"
    int_0 = 912
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    int_0 = -436
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    int_0 = 494
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, dict_0, dict_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    complex_0 = 1526 + 415.79j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    str_0 = "PV#\rT[<y]mO6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    str_0 = '`hRp>\nIn!"'
    bool_0 = True
    set_0 = {str_0, bool_0, bool_0}
    tuple_0 = ()
    bytes_0 = b"\xb80\x80\x9dgm]\xff\x15\xefiS\x1e=\xd6k\xd3"
    tuple_1 = (tuple_0, bytes_0)
    tuple_2 = (str_0, bool_0, set_0, tuple_1)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    float_0 = 758.6
    bytes_0 = b'r"\x12\n4\x91\x95\xf7'
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, bytes_0: bytes_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    float_0 = 1083.643579
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2130():
    bytes_0 = b"\xb6\xd5\xe2D\xe3\xc6\xeaj\x02AQ\x1b\xba\x18p\xeaM\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2131():
    int_0 = -1667
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    dict_0 = {}
    str_0 = "M"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    str_0 = "^\x0c4Z|jc"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    bytes_0 = b"\x08\x87:\x90\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2136():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    int_0 = -857
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    str_0 = "uNH!u~{WxgN/6l`{"
    list_0 = []
    tuple_0 = (str_0, list_0)
    module_0.match(tuple_0, tuple_0)


def test_case_2139():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2140():
    str_0 = "a:\x0cn?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    bytes_0 = b"\x80\xd9c\xcb\x9e\xc1\xe3s\x00\x88%n\xcc\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    bytes_0 = b'm\xd2\x83:\x04\xd8\x1d\xcb\x87rC"'
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    int_0 = 2205
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


def test_case_2144():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2145():
    float_0 = -622.63196
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    str_0 = "7~c>,j`b\r:8n#|29("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    int_0 = -2010
    int_1 = 602
    dict_0 = {int_0: int_0, int_1: int_1, int_1: int_1}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    float_0 = -862.4
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    none_type_0 = None
    str_0 = "[ek:"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    float_0 = 2330.0297
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    str_0 = "\n)&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    bool_0 = False
    int_0 = -813
    int_1 = 1049
    tuple_0 = (bool_0, int_0, int_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_2155():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2156():
    float_0 = 2875.28547
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    int_0 = 1241
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2158():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2159():
    str_0 = "MbXn?x:~B?!p\x0clYs\x0b3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    bool_0 = True
    str_0 = '"j`CRNMz@#pPas?DgW'
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    none_type_0 = None
    float_0 = -2090.113
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2165():
    bytes_0 = b"Ag\x8e\xd7"
    dict_0 = {bytes_0: bytes_0}
    str_0 = "kQ14TFmo]aY"
    tuple_0 = (dict_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2166():
    bytes_0 = b"@\xb1\x16V\xbf\xb0\xae\x8c7\xe7@\x01\xc1\xe3\x9a\x1bD\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    str_0 = "ltGHc}S[%,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    int_0 = 381
    bytes_0 = b"\xe3\xd8\x8b.\xa5\x11\xc4s\x0f\xbf"
    dict_0 = {int_0: int_0, int_0: int_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    int_0 = -346
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    bytes_0 = b"\xf2(\xca!\xc0\xe6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    int_0 = -818
    module_0.get_new_command(int_0, int_0)


def test_case_2174():
    pass


def test_case_2175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2176():
    int_0 = 2256
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2177():
    str_0 = "vORnFIT}$|4I|;pCl"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    str_0 = "jY?$6kTn. 2,E^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    str_0 = "lWj*f+*fX"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    str_0 = "|Sy6>ntF$>~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    int_0 = -564
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    bool_0 = False
    bytes_0 = b"\xee\xc9\x00\xa0\x8f^E\x14"
    int_0 = 1060
    str_0 = "QIFVM,^L>!{^4"
    tuple_0 = (bool_0, bytes_0, int_0, str_0)
    list_0 = [bool_0, bytes_0, str_0, str_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    str_0 = "Csn,"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    float_0 = -3128.4
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    int_0 = -732
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    float_0 = 4843.233
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    complex_0 = -184.67401 + 631.2075j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    bytes_0 = b"G\xa1:m\xf0\xf3\x01\x18\xa5\x8d\t\xd7}"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    int_0 = -1136
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0}
    tuple_1 = (int_0, set_0, bool_0, int_0)
    bytes_0 = b"\xa2\xae\x9c\x9f\xb6\x19\x12"
    tuple_2 = (tuple_1, bytes_0)
    bytes_1 = b"Ff\xc1\xe6<"
    module_0.get_new_command(tuple_2, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    int_0 = -1730
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    str_0 = "Tw`cg&bP\x0bckiCT-/B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    int_0 = 4005
    bytes_0 = b"3X\xf6\x80x)\xb58#\x91\xb8P\xdb\xe1X\xb6"
    tuple_0 = (int_0, bytes_0)
    int_1 = 990
    module_0.get_new_command(tuple_0, int_1)


def test_case_2194():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2195():
    str_0 = 'IrRJ?>"65.0\tPvE'
    module_0.get_new_command(str_0, str_0)


def test_case_2196():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    int_0 = 656
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    str_0 = "\x0bhOF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2201():
    str_0 = ","
    tuple_0 = (str_0, str_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2202():
    complex_0 = 1785.19675 - 861.74627j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = "-\t"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    int_0 = 2173
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    float_0 = -1667.494
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    int_0 = -604
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    str_0 = "fW,_*\r+lK.zo7ZhO>I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    none_type_0 = None
    bool_0 = True
    list_0 = [none_type_0, none_type_0, bool_0, bool_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    object_0 = module_1.object()
    int_0 = -681
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    int_0 = -160
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = '\t&+9zUel"8N:j\\h-'
    tuple_0 = (set_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    bytes_0 = b"\x17\xcd\xa3\xb0\xdb\x1c\xe9\xf2\xb9~\xfc\\\xadD"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    float_0 = 1355.81477
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    float_0 = -1868.33
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    int_0 = 2578
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    complex_0 = 3210.64 - 775.07j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    int_0 = 666
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    str_0 = 'p_xMXq^A\tw"5rCPVY'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    bytes_0 = b"\xd8\x97"
    bytes_1 = b"\xa5"
    str_0 = "^-#.E\\`X"
    float_0 = -1114.68143
    tuple_0 = (bytes_0, bytes_1, str_0, float_0)
    int_0 = 2073
    complex_0 = 3122 - 503j
    bytes_2 = b"\x19\xcb$\x00\xc5$\x9d\xfd\xa5\xed"
    bool_0 = False
    tuple_1 = (int_0, complex_0, bytes_2, bool_0)
    set_0 = {tuple_0, str_0, tuple_0, tuple_1}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = 1314
    tuple_0 = (int_0, int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    int_0 = -1033
    float_0 = -183.0
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    tuple_0 = ()
    object_0 = module_1.object()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    bool_0 = True
    int_0 = 1530
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    int_0 = 845
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


def test_case_2230():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2231():
    float_0 = -4144.4
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    complex_0 = -1878 + 1569.394104j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2233():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2234():
    int_0 = -503
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    bytes_0 = b")\x1c_&\xb2\xb0\xb5U\xd3e\xdf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    bytes_0 = b"\xbc+h\xf3v"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2237():
    int_0 = 2277
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2238():
    float_0 = -1318.442312
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2239():
    str_0 = "HEr'e_|G6=\x0bo"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2240():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    int_0 = -1318
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    int_0 = -1593
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2243():
    bytes_0 = b"\xdct\x94\xb5D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2244():
    bytes_0 = b"\xa9\xa0\xe2m\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    str_0 = 'g:TqM>r"'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    int_0 = 629
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    int_0 = 941
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    str_0 = ">oCxx<(oVH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    bytes_0 = b"\xf8Om;\xc6Y\xfef\xa0\xd4<a"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    str_0 = "2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    int_0 = 4122
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    complex_0 = 428.247 + 3178.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    bytes_0 = b'M\xf5\x0c\xdeB"V\xd8\x93\xffJ_O\xf9"\xd2x'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    float_0 = -2848.61
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    str_0 = "\r7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    complex_0 = -1317.44726 + 2194j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2258():
    int_0 = 2031
    module_0.match(int_0, int_0)


def test_case_2259():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2260():
    int_0 = 200
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    int_0 = -394
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    bytes_0 = b'\x85"\xf5\x07\x83\x0b'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    int_0 = -590
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    bytes_0 = b"t\x0bO`\xf79\xee\xf6"
    float_0 = -2152.04404
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    bytes_0 = b"\x01\xfa\x18Y_s\xec\xbf\x0c\xbc\xe6\xf6o@"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    complex_0 = -1626.273346 + 1442.752896j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2267():
    list_0 = []
    object_0 = module_1.object(*list_0)


def test_case_2268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2269():
    bytes_0 = b"\xbf\x83"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    complex_0 = -2219.9 + 24.4j
    tuple_0 = (bytes_0, dict_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    bytes_0 = b"\x1eFrZ\t\xccY\x7f"
    list_0 = [bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    bytes_0 = b'\xe8\xc8Z.\xe6\xbc\xda\x08\xea"\x90\xf4'
    list_0 = [bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    str_0 = "\\~\tXq/~Zn)Bk\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    int_0 = 561
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    bytes_0 = b"(4\x82\xa1t\xef\xc1Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    int_0 = 324
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    float_0 = 3150.773
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    str_0 = "Pu_;c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    str_0 = "av\x0bBa\rDhSx2Crbz>O:WM"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    str_0 = "7Ky57m'c~Ls.ob%']\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    bytes_0 = b"\xb0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    bytes_0 = b"\xfe8\xfcL\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    int_0 = -3250
    tuple_0 = (bool_0, set_0, set_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    int_0 = 1418
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2287():
    float_0 = -613.3
    str_0 = ")bx74eG~.[~\\pNvfn"
    set_0 = {float_0, float_0}
    tuple_0 = (str_0, set_0)
    dict_0 = {float_0: float_0, float_0: float_0, float_0: tuple_0}
    list_0 = [dict_0, set_0, tuple_0, dict_0]
    bytes_0 = b"\x7fP\xe2Bp\x03\xe3\x9dK"
    tuple_1 = (list_0, bytes_0, dict_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2288():
    float_0 = 1068.743
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    str_0 = "**S0"
    module_0.match(str_0, str_0)


def test_case_2290():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2291():
    str_0 = 'D\x0c":UZ},'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    str_0 = "\t\\L(cogFAt\n?"
    bytes_0 = b"GE\xe4' \xf4\xe3;g"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    bool_0 = False
    str_0 = "T/k"
    dict_0 = {str_0: str_0}
    tuple_0 = (bool_0, str_0, dict_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    none_type_0 = None
    bytes_0 = b"\x9f\xec?\xfc\xbbY\xf83"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    int_0 = 257
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    float_0 = -5392.3488
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    tuple_0 = ()
    float_0 = -1555.078193
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    int_0 = 78
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    bytes_0 = b"\xd9(\xbc\xacu9\xe7w,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    bytes_0 = b"x\xb1oLq1\x07\xe8\r`r\xc3\x90\xb3"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    int_0 = 1736
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    bool_0 = True
    int_0 = -869
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    str_0 = "5"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    float_0 = 1211.21206
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    bytes_0 = b"P"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    str_0 = "f2"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    int_0 = 1182
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    int_0 = -3062
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2316():
    bool_0 = False
    str_0 = "%<j_MRWAG(MFZb><l"
    tuple_0 = (bool_0, bool_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    bool_0 = True
    str_0 = "C"
    int_0 = -3519
    tuple_0 = (bool_0, str_0, int_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    str_0 = "^G.O\rDmG"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    str_0 = 'k>"lk;Lc^'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    int_0 = 3625
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    float_0 = 2006.0
    module_0.match(float_0, float_0)


def test_case_2325():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2326():
    bytes_0 = b"\xd0!6\xd7Tg&0\x9c\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    int_0 = 862
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    complex_0 = 1691.07001 + 1153.68j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    bytes_0 = b"\x14\xe9\xec\xc5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    bytes_0 = b"\x14mcke%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    str_0 = "\x0cmXB24#F2GO~K8RTOt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    str_0 = "g[nDP a,&\x0cB9m%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    bytes_0 = b"\xcc`\xf0\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2335():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2336():
    int_0 = -1783
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    str_0 = "/ei;fK]1VRa*KegQp"
    complex_0 = 1838 + 161.304j
    module_0.match(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    bool_0 = True
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


def test_case_2339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2340():
    int_0 = -2769
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    complex_0 = -3314.18 + 5013.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    float_0 = -1898.4109
    bytes_0 = b"\x84\x84\n8!{\x98\x1b|m\x06"
    dict_0 = {}
    tuple_0 = (float_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    float_0 = 1548.31
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    complex_0 = 464.07608 + 2837.6j
    module_0.get_new_command(complex_0, complex_0)


def test_case_2345():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2346():
    complex_0 = -1009.865 - 226.441j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    int_0 = -551
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    complex_0 = 244.382716 - 1233.571j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    complex_0 = -2715.33 + 2643.67j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    none_type_0 = None
    tuple_0 = ()
    module_0.match(none_type_0, tuple_0)


def test_case_2355():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2356():
    bytes_0 = b"\xf3\x0f\x97\x9f\x8d^!\x9cpy"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    int_0 = 2197
    int_1 = 843
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    str_0 = "?\t:ITI3!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    str_0 = "\x0bB)\\,RDIcx\x0b"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    bool_0 = True
    str_0 = "a"
    dict_0 = {str_0: str_0, str_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    float_0 = -214.6817
    bool_0 = False
    int_0 = -1349
    list_0 = [bool_0, float_0, bool_0, int_0]
    tuple_0 = (float_0, bool_0, list_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2363():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2364():
    float_0 = -389.840359
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [bool_0, tuple_0]
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    none_type_0 = None
    bytes_0 = b"Xx\xe4\xfdEL\xd1\x1e\xf1\x14\xf8\xe4\xf7\xe4\x89\xd1BRI\xb2"
    tuple_0 = (bytes_0,)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    none_type_0 = None
    int_0 = 1250
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    int_0 = 1933
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    bytes_0 = b"\xd44\x9f\x86\x9d\x89"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    str_0 = "`|?=0QZZ&\x0cWK.)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    int_0 = 1427
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    complex_0 = 3635.47 + 1657j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    bytes_0 = b"\xa9r\x92\xb2\xb9\x80\x96"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    str_0 = "IkTGh.^=9fm'G=m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    bytes_0 = b"\xd7\x00\xceV\xfe\t"
    tuple_0 = (bool_0, set_0, bytes_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    float_0 = 627.802
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bytes_0 = b"\x91\xe7\x0b>\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    str_0 = "<.9Cd3W"
    str_1 = "~2'>#\tHV?1z5rIr'-Y?o"
    str_2 = "d<6/zL&"
    dict_0 = {str_2: str_1, str_1: str_2}
    dict_1 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: dict_0}
    module_1.object(**dict_1)


def test_case_2382():
    pass


def test_case_2383():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2384():
    str_0 = "Qv\r^Pkt'7\nM*"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    bytes_0 = b"7fS]3\n\x80V}\xb8#\x00"
    bytes_1 = b"\xad\xaf\xdab=\x84t\xe2o\xc0x{"
    list_0 = [bytes_0, bytes_1, bytes_0, bytes_1]
    tuple_0 = (list_0,)
    tuple_1 = (bytes_0, bytes_1, tuple_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    complex_0 = -922.4 + 3526.08j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    bytes_0 = b"[w\xed/\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    int_0 = 924
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    float_0 = -1680.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    bytes_0 = b"\x98\xc3QG\x8f\xd8\x17=r*i\x04|\xdd\xde\xe0\x01\xe6\x853"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [list_0, bool_0]
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    float_0 = -4010.122797
    bytes_0 = b"\x7f\x13!"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    str_0 = 's"m'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    object_0 = module_1.object()
    str_0 = "\rJ9^Tn{lI\n[%f\x0bGI\r9b"
    module_0.match(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    complex_0 = -1288 + 142.81j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    bytes_0 = b"\xf8Ql $\x06\x1e\xd3\x08\xd7'\x9d8\xc9\t\xa6"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_2399():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2400():
    none_type_0 = None
    float_0 = 3377.263
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0, none_type_0: float_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2401():
    float_0 = 1823.57783
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    bool_0 = True
    str_0 = 'tN2{}@"X.DM['
    object_0 = module_1.object()
    dict_0 = {bool_0: str_0, bool_0: object_0, str_0: object_0, str_0: str_0}
    list_0 = [bool_0, str_0, dict_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_2403():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2404():
    bool_0 = True
    int_0 = 1418
    tuple_0 = (bool_0, bool_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    str_0 = "iD1"
    set_0 = {str_0, str_0}
    tuple_0 = (str_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    float_0 = 1953.46
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    str_0 = "29_`ufT#$d01vh"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    str_0 = "Lcv>pD\x0cr2U\nc:uEd%"
    str_1 = "ltA\x0bnM&|F1#\no0[9hf"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


def test_case_2409():
    pass


def test_case_2410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2411():
    str_0 = "{~CV\x0cU(-CYtE"
    str_1 = "\\s*&o_]g\x0cd_G}kSQ%FU+"
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    str_0 = "^PCrMF6p1pl!uwoR2"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    complex_0 = 1345 + 740j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    bytes_0 = b"\xf4\xbcsf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    bytes_0 = b"A*\x02s\xf3\xd0G\x8d\x0b\xae\xb4q\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    int_0 = 927
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bytes_0 = b"\x96d\x8e\x7fB\xe2H\x93k\xbf\xf0\x9bvc\x8el\xe6\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    bytes_0 = b">E\xc5tP\xb6^R\xb9\x14(\x18\x81\xb4\xe9>\xef\xb5\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    int_0 = 748
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    str_0 = "weY\n&o?w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    bool_0 = True
    complex_0 = 2683.6 + 1252.317807j
    dict_0 = {bool_0: bool_0, bool_0: complex_0}
    str_0 = "a=>76gJL*+F(LJ"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    int_0 = -1044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    str_0 = "'O3`|!e2$75\t>vOI{`"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    float_0 = 2009.604
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    int_0 = -2564
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    bytes_0 = b"6\xa5\x03\xdchy\xf7\xafV\x7f\xa3\xb3\x90\xdf\xb8\x90\x91"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    float_0 = -1860.75766
    list_0 = [float_0, float_0, float_0, float_0]
    list_1 = [float_0, float_0, float_0, list_0]
    module_0.match(float_0, list_1)


def test_case_2431():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2432():
    float_0 = 57.0
    module_0.match(float_0, float_0)


def test_case_2433():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2434():
    int_0 = 527
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    str_0 = "y"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    complex_0 = 699.5468 - 4051.948j
    int_0 = 948
    tuple_0 = (int_0, complex_0)
    module_0.match(complex_0, tuple_0)


def test_case_2437():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2438():
    int_0 = 710
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    int_0 = -2688
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    dict_0 = {}
    bytes_0 = b"1\xdcl*\x89\xa5\xd7\x8cE\xbd0,\xa8?\xb9\x1e\x04\xfe"
    bool_0 = False
    tuple_0 = (dict_0, bytes_0, bool_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    str_0 = ")I:?D:Ow|ISy,A'|>"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    dict_0 = {}
    complex_0 = -1558.279 - 275j
    dict_1 = {}
    list_0 = [dict_0, complex_0, dict_0, dict_1]
    list_1 = [dict_0, dict_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    float_0 = -939.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    complex_0 = 834 + 1877.081j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    float_0 = 154.034929
    tuple_0 = ()
    tuple_1 = (float_0, tuple_0)
    set_0 = {tuple_1, tuple_1}
    module_0.match(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    bytes_0 = b"\x8b\xda~_\xf7\xe1:\xd5;\xa5\xe2.\xf1\x1fP"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    bytes_0 = b"h\xcd\xb4\xb0.q"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = False
    bool_2 = False
    tuple_0 = (dict_0, bool_1, bool_2)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    complex_0 = -485.19 + 823.2j
    list_0 = [complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    bytes_0 = b"\xfb"
    bool_0 = False
    bool_1 = True
    tuple_0 = (bytes_0, bool_0, bool_1)
    list_0 = [tuple_0, bool_0, bool_1]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    str_0 = "*D8*%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    str_0 = "k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    float_0 = -3012.37
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    float_0 = -5886.31219
    set_0 = {float_0}
    tuple_0 = (set_0, float_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2459():
    str_0 = "H&*xr>G,r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2460():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    int_0 = -491
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


def test_case_2463():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2464():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_1: list_0}
    tuple_0 = (list_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    int_0 = 1558
    str_0 = "\\="
    str_1 = "|'$;e\rCg\rt.W~R|2x"
    float_0 = -6125.50526
    dict_0 = {str_0: int_0, str_1: str_0, str_0: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2466():
    str_0 = "r28@bX,j`%VS20YJ"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2467():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_2468():
    pass


def test_case_2469():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2470():
    list_0 = []
    bool_0 = True
    module_0.get_new_command(list_0, bool_0)


def test_case_2471():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2472():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    int_0 = -906
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    str_0 = " tZ\r,s\x0b+y{@"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    str_0 = "qgZ,;\rT1s[{<3z]bE#c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    bytes_0 = b"M\xc9\xcd\x85o=H\xf7a^\xed\x12\x199\xa6\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    dict_0 = {}
    bytes_0 = b'\x80#n\xf1\x9c\x85\xd2\xcf"\xfeC\xc0jA\xc7%\xa0\x1d'
    str_0 = ",|;"
    tuple_0 = (dict_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    bytes_0 = b"\x93\x91\xeel\x13\xda\x16{N\x1a\x80B"
    str_0 = "[ho $*"
    tuple_0 = (bytes_0, str_0)
    set_0 = {tuple_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    bool_0 = True
    bytes_0 = b""
    float_0 = -1197.004834
    bytes_1 = b'\x87\x10\x1d\xd4"2\xeb&'
    tuple_0 = (bool_0, bytes_0, float_0, bytes_1)
    dict_0 = {tuple_0: bytes_0}
    module_0.match(dict_0, bytes_0)


def test_case_2485():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2486():
    str_0 = "#\\"
    str_1 = "%,f'\x0bm1u"
    str_2 = '3Ynm%(A30"\x0bJ'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    str_0 = '_O<eERpR|\x0cUj5":O\n'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    str_0 = "+zPqXFqc2"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2489():
    bytes_0 = b"\xf4*"
    str_0 = "*grw57*Zq^]()&\\ .0@F"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    set_0 = {bytes_0, tuple_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2490():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    bytes_0 = b"\x82c\x0c*\x8a\x98\xfc5\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    float_0 = -1611.5853
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2493():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2494():
    bytes_0 = b"\xe7\x9c\xb9\\\xa2\xfc\xab=\x00\x0fG*"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    bool_0 = False
    bytes_0 = b"\xb8\xb9\xc7|\x05\xa3\xb8\xaa\xb5\x88\xcb\xd4\x117"
    tuple_0 = (bytes_0, bool_0)
    tuple_1 = (bool_0, bytes_0, tuple_0, bytes_0)
    dict_0 = {tuple_1: tuple_1, bytes_0: bytes_0}
    module_0.match(dict_0, tuple_1)


def test_case_2496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2497():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = ()
    str_0 = "=BD_c:\nG(fae"
    tuple_1 = (dict_0, bool_0, tuple_0, str_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    int_0 = -1941
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    bytes_0 = b"~\x13\xb5\x93P\xf4L\xa8\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    str_0 = "."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    str_0 = 'y^\rtW7AxS"/ \nF7f'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    bool_0 = True
    bytes_0 = b"\x07yw4"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    bytes_0 = b"\xf2\x84`v\xa1\x02\x97P\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    bytes_0 = b"\x14'\xfd\xa1\xe0\xa3\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bool_0 = False
    int_0 = 2818
    tuple_0 = (bool_0, int_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    bytes_0 = b"\xcc\x9e\xacb\xf1\xbbb\xf9\xa0k"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    int_0 = 781
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    bytes_0 = b'\xb1>\x1b8I\xaa\xc1\x91\xb9\xa1\xff\xb0+\xeee\xa3"\x05\xfc.'
    bytes_1 = b'QB\xa0\x85,\x01\xb9jN"\xe1\xc9\x1c'
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    int_0 = 840
    str_0 = "A=*yu^d7;PO\x0c'["
    tuple_0 = (int_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    dict_0 = {}
    int_0 = 638
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    int_0 = -790
    list_0 = [int_0]
    str_0 = "_\nir]J2O*~efI"
    dict_0 = {str_0: list_0, str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    complex_0 = 2728.8943 + 760.5973j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    bytes_0 = b"l7\x171$,JH\x10\xde>\x1c\xfc\x18\x1c\x97\x05\x9e\x10\xcc"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    str_0 = "&(=\\YP6im*3"
    bool_0 = False
    set_0 = {bool_0, bool_0, str_0, str_0}
    tuple_0 = (str_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    tuple_1 = (tuple_0,)
    str_0 = "`KAKv:@`K X;W,~"
    list_0 = [tuple_1, str_0, str_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    str_0 = "\x0cIKH"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    float_0 = 1473.993536
    module_1.object(**float_0)


def test_case_2524():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2525():
    int_0 = -958
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_2526():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2527():
    complex_0 = -2044.6 + 337j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    int_0 = 2812
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    bytes_0 = b"\x7f(=\x1a{\xe9\x1b\xa5\x13X\x8c\xcdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    float_0 = -2903.0
    module_0.get_new_command(float_0, float_0)


def test_case_2531():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2532():
    float_0 = -566.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    bytes_0 = b"\xbb\xe1\xa7Ky\xc8\xa4`\x9a\xe4}\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    list_0 = []
    none_type_0 = None
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    str_0 = "{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    str_0 = '"s"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    bytes_0 = b"\x88\x8f[o\x12\xc6\x8a\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    float_0 = -125.366555
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    bool_0 = True
    int_0 = 2965
    tuple_0 = (int_0,)
    bool_1 = True
    tuple_1 = (bool_0, tuple_0, bool_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    float_0 = 2780.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    bytes_0 = b"\xb9A\xa4\xfd\x8c\xca_\xb5C\xbd\x81\x7f?\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    str_0 = "iu7]~m}K"
    tuple_0 = ()
    dict_0 = {str_0: tuple_0, str_0: tuple_0, str_0: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    bytes_0 = b"\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    int_0 = 637
    set_0 = set()
    dict_0 = {}
    tuple_0 = (int_0, int_0, set_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    str_0 = "Da$?|"
    int_0 = 1255
    module_0.get_new_command(str_0, int_0)


def test_case_2547():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2548():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0]
    tuple_0 = (bool_0, bool_0, list_1)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    str_0 = "F,`1!w]P;k"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    int_0 = -426
    module_0.get_new_command(int_0, int_0)


def test_case_2552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2553():
    float_0 = 842.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2554():
    bytes_0 = b'\xc2\xcac\x89F9\x04o\x83\xd9\x16"\xbd\x0e\xae1\x0e\xd92'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2555():
    int_0 = 403
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    int_0 = -422
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    str_0 = "W\n\n'VP&<vDQoKh)T"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    int_0 = 1372
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    bytes_0 = b"\xce\xad\x84i\xffE\xa7\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    float_0 = -2767.88612
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    float_0 = 1457.0565
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    float_0 = 2089.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    bool_0 = False
    dict_0 = {}
    module_1.object(*bool_0, **dict_0)


def test_case_2564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2565():
    str_0 = "aIyGEJM^{E"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    int_0 = -1810
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    float_0 = -1995.528943
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2570():
    str_0 = "j3+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2571():
    complex_0 = 1918.302314 - 857.0255j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    str_0 = "a\x0bx\\"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    int_0 = 5178
    module_0.get_new_command(int_0, int_0)


def test_case_2574():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2575():
    bytes_0 = b"u9\xbd\xf3 \xd2\xf2\t\x96\xfb\x04\xb5$f\xb6\xad\xee"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    int_0 = -3732
    bytes_0 = b"\x9b\x80*\xc7\xe0\x06\x1f\x86RQbjP\xff\x90"
    tuple_0 = (int_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    int_0 = -33
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    str_0 = "T\x0b\r\t kA29"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    bytes_0 = b'\x88r\x89\x12B)\x1e\x10\x14\x135"\x1a\rfM\\'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2580():
    int_0 = -630
    module_0.match(int_0, int_0)


def test_case_2581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2582():
    float_0 = 2089.355
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2583():
    float_0 = 837.670383
    module_0.get_new_command(float_0, float_0)


def test_case_2584():
    pass


def test_case_2585():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2586():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    complex_0 = 912.31496 - 1940.2j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2588():
    str_0 = "x|/\\zk$G0"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2589():
    float_0 = -3680.60889
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    bytes_0 = b"\xbec\xc7~\xeb\x1a\xbf\xba\xab\x01\xcc\xbdN%\xd5e\xa6"
    float_0 = 636.34
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, float_0: float_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    float_0 = -3364.39
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    str_0 = "*@_n<fTb"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    bytes_0 = b"\xc0aK$\xe5\xa4\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2594():
    str_0 = "v&=RI&S "
    float_0 = 2783.0
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2595():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    complex_0 = 1714.699 + 2161.3944j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    complex_0 = 1334.51808 + 348.75j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    int_0 = -1843
    module_0.get_new_command(int_0, int_0)


def test_case_2601():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2602():
    bytes_0 = b"\x0f]\xa6\x82\xce\xc2\x82\xd4\x07K\x0b\x1b"
    int_0 = 55
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: int_0, int_0: bytes_0}
    list_0 = [bytes_0, bytes_0, dict_0, int_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    str_0 = "qy4j8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    bytes_0 = b"\xbc\xff>\xe4\xb5\x1b#b\xb2\x07\xbc\x1bx\x7f>s\x82"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    bytes_0 = b"\x87?\xa5\x86\xbc\x94\x9bs\x10\x1e\xb6!x\xe0I"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    str_0 = "s;/!@m0UGY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    str_0 = "<_"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    int_0 = -2018
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    bytes_0 = b"4f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2614():
    set_0 = set()
    int_0 = 1082
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2615():
    float_0 = -2635.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    bytes_0 = b"U;\xab\xe3\x1d\x84\xc9\xfa\t\x12\xeb\xb1\xfe\xa9\xd5\xec\xfdb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = True
    tuple_0 = (bytes_0, dict_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    int_0 = 1872
    list_0 = [int_0, int_0, int_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    str_0 = "!h9G[GiE"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bytes_0 = b"t\x97"
    int_0 = -1414
    list_0 = [bytes_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    str_0 = "Y,1-?ck5lB\n;G~\x0b)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    bytes_0 = b"\x88\xa0\xf1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    int_0 = 1084
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    bytes_0 = b"\xcf\xa0\x15\xaf\x81\x1e\x927\xb2\xe5\xec\xb0\x0c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    int_0 = 854
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    bytes_0 = b"\x98\xbd\xe1.\xb1\xb2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    bytes_0 = b"5\xed\xb7\xa6\x18m\xee}\xf5\xe5\xea\x84Sr)"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    bytes_0 = b"h\xc6&a\xef\x0f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"\x96"
    list_0 = []
    tuple_0 = (bytes_1, list_0)
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bytes_0 = b"\x0f\x85 _"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    complex_0 = -343.91677 - 337.684j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    bool_0 = True
    int_0 = 421
    set_0 = {bool_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    str_0 = '9~"By{gFN.SizJ%mk'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    str_0 = "m#4x(K=:,kqv6&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    int_0 = -1042
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "g>]"
    str_1 = "O3{1OEj#1,k'"
    tuple_0 = (str_0, str_1)
    list_1 = [list_0, list_0, list_0, tuple_0]
    module_0.get_new_command(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    int_0 = 776
    bytes_0 = b"R\xc9f\xa2\x01XT\xaa\x80i\x945\xf9\x89\x049\xe0\x86"
    list_0 = [bytes_0, int_0, int_0]
    tuple_0 = (int_0, bytes_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    int_0 = -2953
    module_0.get_new_command(int_0, int_0)


def test_case_2639():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2640():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    int_0 = -3164
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    float_0 = 2280.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    int_0 = 3244
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    bytes_0 = b"\xe9\xbb'\x80\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    str_0 = 'g]Btf(;o"{q[fd,mf'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    bytes_0 = b"\xee]\x82\x00PX\x14\xe2e\xc8\xe4\xc0&n4\xd8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    float_0 = -599.375781
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2650():
    str_0 = "Y3pQ 63bad~3y<({A*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2651():
    bytes_0 = b'\x8dfq<%\x96\x8eV"(MZ'
    int_0 = 835
    object_0 = module_1.object()
    int_1 = 94
    tuple_0 = (bytes_0, int_0, object_0, int_1)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2652():
    bytes_0 = b"\x02u\xa6\x93q<\xc6\x0e\xf1\x9f\xc6\xfd\x1f\xe4\x850"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    str_0 = "@uq2}w{;5X"
    tuple_0 = (str_0, str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    int_0 = 954
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    complex_0 = -968.13215 - 465.2952j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    float_0 = -912.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    int_0 = -469
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    bytes_0 = b"|MzuI\xa5\xbe\xfbz\xcbVy\xf1\xe3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    bytes_0 = b"\x86t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    list_1 = [tuple_0, list_0, tuple_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    str_0 = "G8W"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    bytes_0 = b";\xf9\x16x\x1f\xd0\xb31\xd5Hk\xcb\xf9X\xe1s\xf9\n\xc6\x86"
    tuple_0 = (bytes_0,)
    tuple_1 = (dict_0, tuple_0)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    bytes_0 = b")\x0f\xea\xfa\xf1\xc7\x13}D;2^\xb7\xe8\x16\x01\xbd-\x97"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    int_0 = -1326
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2664():
    int_0 = -406
    str_0 = "Z?=y.trxB]q$`'|"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bool_0 = True
    str_0 = "ErH0lmh#;o+>t"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_2667():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2668():
    int_0 = 2388
    set_0 = {int_0, int_0}
    bool_0 = False
    list_0 = [int_0, bool_0, int_0, set_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    str_0 = "9vc4=C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    int_0 = -1658
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    bytes_0 = b"};\n/|,#\xf7\xd9\x98m"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    int_0 = 1863
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    str_0 = "p*vv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    bytes_0 = b"\xe3?28X\xd8#eS\x1a\x18\x0f:\xd5\xaau"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bytes_0 = b"\x99\xe2\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    int_0 = -1338
    bool_0 = False
    set_0 = {int_0, bool_0, int_0, int_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    float_0 = 3192.121896
    tuple_0 = ()
    module_0.get_new_command(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    str_0 = "Y^8XD\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    bytes_0 = b"\xc4\xd2\x03;\x8dd9\x99\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    str_0 = "i!=XolB;6V\nagT(G1E"
    bytes_0 = b"\x94\xa0$\xccN\x0c\xc6\xa8\xa8mCA\x887m\x07{\xce]\x00"
    bool_0 = False
    tuple_0 = (str_0, str_0, bytes_0, bool_0)
    set_0 = {tuple_0, bytes_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    str_0 = "*ugMD"
    module_0.match(str_0, str_0)


def test_case_2682():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2683():
    bool_0 = False
    bytes_0 = b"\xf3A\x0f\xff\x8bO"
    list_0 = [bool_0, bool_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    bytes_0 = b"\x18\xb0$=\x82%\xad\xc8\x1dM_\xe9\xbe1\xaf\x80\x98\xbf\r"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    bytes_0 = b"\xf6%\xf5\x16\xe5\xb77\xc0"
    module_0.match(bytes_0, bytes_0)


def test_case_2686():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2687():
    float_0 = -165.63877
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1, bool_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    bytes_0 = b"\xf5[\xdc"
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    dict_0 = {bytes_0: bytes_0, bytes_0: tuple_1}
    module_0.get_new_command(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2690():
    int_0 = 1579
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2691():
    str_0 = ""
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_2692():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2693():
    str_0 = "XTc}Z|CX,^lq1@\r!2$"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    bytes_0 = b"\xaea,\xb0\x9b\x10\xd3\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    complex_0 = -2273.7 + 1930.409213j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    str_0 = "R#=uA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    float_0 = 3363.72
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    str_0 = "sKEDNa"
    str_1 = "j>(Oc1ECU\x0cSqh9"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    str_0 = "Tz\\/c[dg|QDiT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    bytes_0 = b"\x98\x07\xfdP\xb4\xc6\xbdm;\x84\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    float_0 = 3591.097531
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    bytes_0 = b"\xec>\xa6\x8e>\xc6\xea\xd0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_2703():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bytes_0 = b"\xf8\x8fa\xac\x0b~\x02\x0e"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    str_0 = "xu&sQl78p#iY>"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    str_0 = "|S0\x0c&F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    float_0 = 2739.428
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    int_0 = -2345
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    str_0 = "K6\\F"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2710():
    int_0 = -845
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2711():
    int_0 = -3044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    complex_0 = 92.9746 + 1394.781j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    complex_0 = 1034.4 + 261.59j
    list_0 = [complex_0, complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bool_0 = True
    str_0 = "5\x0b''\t\"}Vpf#`\n"
    dict_0 = {bool_0: str_0, str_0: str_0, str_0: bool_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2715():
    set_0 = set()
    str_0 = "^xre+HyY(F>c"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2718():
    int_0 = -589
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2719():
    bytes_0 = b"M\x13\xc9"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    int_0 = 429
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    int_0 = 2997
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    float_0 = 84.25742
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    complex_0 = 505.828 + 1667.641112j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    str_0 = "])hctV&4%hQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    bool_0 = True
    int_0 = -540
    dict_0 = {int_0: bool_0, bool_0: int_0, int_0: int_0, bool_0: int_0}
    tuple_0 = (bool_0, int_0, dict_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    str_0 = '9x[SWJ10_$#p"5Ci'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    int_0 = 891
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = True
    tuple_0 = (int_0, dict_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    float_0 = 4326.0
    module_0.match(float_0, float_0)


def test_case_2729():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2730():
    complex_0 = -2035.536098 + 160.401j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    int_0 = -483
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    bytes_0 = b"\xdf\xceI\x06)\xaf\xbb\xda\xce\x972\x02\x13V}\x00\x80\xe15 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    int_0 = -1785
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2735():
    int_0 = -3210
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2736():
    complex_0 = -3.7368 + 2895j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    int_0 = -2007
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    int_0 = 610
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    none_type_0 = None
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    str_0 = "d;^|E\x0cxRIv02]\rpB@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2742():
    float_0 = 1258.844
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2743():
    float_0 = -860.7
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_2745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2746():
    float_0 = -1374.0
    bytes_0 = b",\xa6\x96\xc2\xef\x82z o\xea"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    bytes_0 = b"\xa1\x17\x0b\x87"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2749():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2750():
    bytes_0 = b"\xd6\xf6\xbc\xf6\x88#!\x05\xbb\xdd\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2751():
    str_0 = "~\\J)x@`o<r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2752():
    bool_0 = True
    float_0 = 443.9021
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    none_type_0 = None
    bytes_0 = b"\xa4\xe3"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    int_0 = 1315
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    int_0 = -1117
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_2758():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2759():
    int_0 = 2250
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    int_0 = 890
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    float_0 = -498.0
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: bool_0}
    tuple_0 = (dict_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_2762():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2763():
    float_0 = -400.623492
    str_0 = "Dv}h|/Fg;MT;M,w%Oy{a"
    float_1 = 2862.0651
    dict_0 = {float_0: float_0, float_0: str_0, float_1: str_0}
    list_0 = [dict_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    bytes_0 = b"\xe0\xec*\xa3s\xc5\xc7\xb3\xc7#\x939\xf3"
    list_0 = []
    tuple_0 = (list_0,)
    bytes_1 = b"HQ\x95\xcf\x80_\x95\xbdv"
    tuple_1 = (tuple_0, bytes_1, list_0)
    module_0.match(bytes_0, tuple_1)


def test_case_2766():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2767():
    float_0 = 3720.545909
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2768():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    int_0 = -1017
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    bytes_0 = b"\xff\x8c\x07\x94\xf8\x84\xd9&\x89\r\r\xcb\x1d\x0e\x15\xf9"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    int_0 = 2249
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0, list_0]
    module_0.get_new_command(object_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    int_0 = 3261
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    complex_0 = 2188 - 210j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    int_0 = 4024
    module_0.match(int_0, int_0)


def test_case_2776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2777():
    bytes_0 = b"e\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    int_0 = 2743
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    str_0 = "cz\\PgHSI\x0c>|}'=(A"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    complex_0 = -1081.378 - 2459.58j
    dict_0 = {}
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    bytes_0 = b"\x92\x1a"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    int_0 = -424
    float_0 = -2150.2
    dict_0 = {}
    bool_0 = True
    tuple_0 = (float_0, dict_0, bool_0)
    bytes_0 = b"[n\xddQ\x19\xcc"
    tuple_1 = (int_0, tuple_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    bool_0 = True
    float_0 = -65.49
    tuple_0 = (bool_0, float_0, bool_0)
    tuple_1 = (tuple_0,)
    dict_0 = {tuple_1: tuple_0, float_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    bytes_0 = b"\xbf\xc2U\xd1\x0e\xdbO/\xa5\xe6\xe9\x1b*"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    str_0 = "o 0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    dict_0 = {}
    bool_0 = True
    list_0 = [dict_0, dict_0, bool_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    int_0 = -771
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    bytes_0 = b"U\xce\x81L\xb0\xaa\x9c\xf6jW\xf2uo\xd9\x10\xf2\xc7\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    str_0 = "m8q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    bytes_0 = b".\xa9\x9a\xf6`\xda\x84\xd5a\xb6h\x8b#\x17\x84"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2793():
    bytes_0 = b"\xe0\xb2q\x86\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2794():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    str_0 = "8}fe\n@3Vvrn\n|\nuGWe"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    int_0 = 2756
    tuple_0 = (int_0,)
    str_0 = "f"
    int_1 = 2740
    bytes_0 = b"\xa8"
    tuple_1 = (tuple_0, str_0, int_1, bytes_0)
    list_0 = [tuple_1, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    bytes_0 = b"\xa9vJ^\x8b\xe1\xacqc\xcb{W\x88\xe3\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    bool_0 = True
    complex_0 = 2380.717 - 2225.95j
    module_0.match(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bool_0 = False
    complex_0 = 4850.9 - 77.3385j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    int_0 = 137
    list_0 = [int_0, int_0, int_0, int_0]
    list_1 = [list_0, int_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    object_0 = module_1.object()
    float_0 = -1171.4408
    module_0.match(object_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    bytes_0 = b"\xa2\xcbtu"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    bytes_0 = b"w\x15\x05jZ\xcdQ\x070\xee5vI\xc2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = 2498
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    str_0 = "]h<|_)#DoDA"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    bytes_0 = b"\xe1\xae\x07H \xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    complex_0 = 1882.2 - 666.189274j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    bytes_0 = b"Q+\xce\xb46\xc7>y\x9b\xca\r(\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    int_0 = -279
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2810():
    bytes_0 = b"\xde\xb7\x93\xb5{\xaet/e\x94\xef\x89"
    float_0 = -713.93571
    set_0 = set()
    list_0 = [float_0, bytes_0, bytes_0, set_0]
    tuple_0 = (float_0, list_0, list_0)
    dict_0 = {bytes_0: tuple_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2811():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    float_0 = 457.900003
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    bool_0 = False
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_1}
    tuple_0 = (bool_0, set_0)
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    str_0 = "vM!\tJ5Sn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    float_0 = 1554.40749
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bytes_0 = b"\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    bytes_0 = b"\xc2\x17\xc5\x19\x96T\xd3+\xb8\xe6\xeb7\x08\xfb\x91"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    str_0 = ".\\|P)wiR\\WoC]gsy0 s4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    complex_0 = -1142.115 + 37.253322j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    int_0 = 594
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    str_0 = "k+H4nuY -\ti)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_1}
    bool_2 = True
    module_0.match(set_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    int_0 = -812
    set_0 = {int_0, int_0, int_0}
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    str_0 = ">-j[S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    complex_0 = -1668 - 603.76j
    module_0.match(complex_0, complex_0)


def test_case_2831():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2832():
    bytes_0 = b"\xbe"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2833():
    complex_0 = 4549.417 - 985.9666j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2834():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    int_0 = -5130
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    bytes_0 = b"\xf2\xd5\xf7iur2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0, bool_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    int_0 = 994
    module_0.match(int_0, int_0)


def test_case_2840():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2841():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    int_0 = 3523
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    str_0 = "q%t(>dw\x0c./bybUa)b4"
    complex_0 = -2328.971384 + 283j
    module_0.get_new_command(str_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    int_0 = -241
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_2846():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2847():
    str_0 = "P.j\r!H{Yv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    bytes_0 = b"\xbf|JC\xd6A\x1e@\x82\xbeW\x11\xbf\xd5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bytes_0 = b"\r\x04\xea\xe6\xad\xf4\xa1\xc8\x8e0\xa1h\xba\xeb\xe2\x8a\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    float_0 = -1838.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    int_0 = 1864
    int_1 = -166
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    float_0 = 556.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    float_0 = -779.3195
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    complex_0 = -1403.256 + 2769.38053j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    int_0 = -2303
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    list_0 = []
    float_0 = -2951.0
    tuple_0 = (list_0, list_0, float_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    bytes_0 = b"J"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    bytes_0 = b"!\xd22\x8am"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    set_0 = set()
    bytes_0 = b"S\xba"
    dict_0 = {bytes_0: set_0, bytes_0: set_0, bytes_0: set_0}
    tuple_0 = (bytes_0, dict_0)
    list_0 = [set_0, tuple_0, bytes_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    int_0 = -402
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    int_0 = 417
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    complex_0 = -1710.405974 - 3775.84669j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2867():
    int_0 = 379
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2868():
    bool_0 = True
    str_0 = 'WG{}~a)_kW#*\t"q'
    dict_0 = {str_0: bool_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    int_0 = 2821
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    int_0 = -54
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    str_0 = "\tQ*#\n\x0bv&P7/d+$SgW}r$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    int_0 = 1684
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    str_0 = "u)fL3C=WYaM`1&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    bytes_0 = b"\x18\x00"
    tuple_0 = (bytes_0, bytes_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    int_0 = 1514
    module_0.match(int_0, int_0)


def test_case_2877():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2878():
    complex_0 = 1817.94058 - 774.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2880():
    float_0 = 2291.01
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2881():
    float_0 = -1337.212
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    float_0 = 528.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    float_0 = -400.889
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2884():
    float_0 = 314.1085
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2885():
    complex_0 = -524.744 + 562.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    none_type_0 = None
    float_0 = 667.728
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    str_0 = "%vH0,@TUy$<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    none_type_0 = None
    int_0 = -1809
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    str_0 = "T&{9xBHwoG\nd_^\ngmq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2890():
    int_0 = -2383
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2891():
    bytes_0 = b"\x87\x02\xc9E\xf2\xd9\xee\xbfy\x10\x94\xb7\x81$c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    float_0 = -1721.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    bytes_0 = b"\x13\x9bs\x1c\xc2\xf2\x97\x0f\xd7\xd3\xaf\x06\x00\x97\xc0H\r\x90\x89r"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    float_0 = 845.852
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    int_0 = -2745
    module_0.match(int_0, int_0)


def test_case_2896():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2897():
    float_0 = 910.133
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    bytes_0 = b"V\xca#\x8e/i\x02\x8aW"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    int_0 = 1310
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    str_0 = "s"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    bytes_0 = b"6\xe8\x8e\xb4\xa22+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    str_0 = "Kq04<"
    int_0 = 976
    tuple_0 = (str_0, int_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_2903():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2904():
    int_0 = -1009
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    bytes_0 = b"\xa7[\xee\xbb\xb5\xfe\x1f\x7f\xcc\xe6\xea\x854W`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    bytes_0 = b"\x95\xac\x1a~p\xfc\x0fH\xc4\x16\x99\x84/\xe0\x87\xc3\xd5."
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_1,)
    set_0 = {bytes_0}
    tuple_1 = (tuple_0, set_0)
    tuple_2 = (bytes_0, bool_0, bool_0, tuple_1)
    module_0.match(bytes_0, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2907():
    int_0 = 3468
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2908():
    float_0 = -1913.63
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    int_0 = -2289
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    bytes_0 = b"{\xff\xd9\xa7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    bytes_0 = b"{=$\x16\xcb\x13\xc4"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    int_0 = -1480
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


def test_case_2914():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2915():
    bytes_0 = b"\xeb}\xba\xbbr\x8atP\x8c\xc4\xce\x89\\\x9d\xd6\xee\x12+\xfa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0)
    list_0 = [tuple_1, tuple_1, tuple_1, tuple_0]
    module_0.match(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    int_0 = -625
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    int_0 = -2419
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    str_0 = "98p*=xCa1Wi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    str_0 = "Y\tC6ck\x0cyCi\n"
    none_type_0 = None
    str_1 = "cK'8oOKr1 u"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    str_0 = 'A;f"*'
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    float_0 = -3082.0
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


def test_case_2923():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bytes_0 = b"\xb7;\xb3"
    list_0 = [bytes_0]
    list_1 = [list_0, bytes_0, bytes_0, bytes_0]
    complex_0 = -176.24219 + 1028.7j
    module_0.match(list_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    bytes_0 = b'"u\xd9\xc0;\xbd\x95D\xe9\xd2\x11\xd1v\t\xd6\x0b\x90'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    str_0 = "T-X{bEJ1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    complex_0 = 1519 - 214j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    str_0 = "MM;]#w$"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    str_0 = "m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    str_0 = "B]P"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    str_0 = "\\|0ai%dw`k"
    bytes_0 = b"\xf6"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_2935():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2936():
    int_0 = 1686
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    list_0 = []
    str_0 = "\x0br&H2~`0{)5A3#'tpr!E"
    none_type_0 = None
    str_1 = "8ku$"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


def test_case_2939():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2940():
    str_0 = ""
    float_0 = 782.20333
    list_0 = [float_0, float_0, str_0]
    dict_0 = {str_0: str_0, str_0: list_0, float_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    float_0 = -1630.16111
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    str_0 = "y,([).fWa5W<tC4W1Lu"
    int_0 = -3012
    dict_0 = {str_0: int_0, int_0: str_0, str_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    int_0 = -612
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    bytes_0 = b"\xca\xcc\xcf4\x89\x13\x86\xc5\xb8\xe6D\x99"
    bool_0 = False
    str_0 = "JLW`i+EvAAG*,{lq(.YO"
    dict_0 = {bytes_0: bool_0, bytes_0: bool_0, str_0: str_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    int_0 = 587
    bytes_0 = b"p\xf9\xc1\xc4d\x05"
    set_0 = set()
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    str_0 = "\x0bn*n"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    str_0 = "0Uqk@#o5J6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    str_0 = "%nD0HZ,%oK?4L"
    module_0.get_new_command(str_0, str_0)


def test_case_2949():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2950():
    int_0 = 1018
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    int_0 = -1462
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    bytes_0 = b"\xad}}\xae\xb4(\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    float_0 = 406.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    bytes_0 = b'<\x17t\x02\xc0\xeb\xf3\xea\xfe\xcc"\x11 '
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    list_0 = []
    str_0 = "|{9t-G(TX,j YL6]\tWb"
    str_1 = "&\x0c7P\x0c"
    dict_0 = {str_0: list_0, str_1: str_1, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    bytes_0 = b"\xa9G\xd6\xe2\xfb\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    str_0 = "=kP{s/)t0>I@ =WI8Rx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    str_0 = "M?VR\"'8 <;uG_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    int_0 = -4251
    float_0 = -952.421
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    bytes_0 = b"\x99\x16d\xd9\x13\xaa%\xac\xb1\xbe\xdb\xc6Y\xb2Z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    bytes_0 = b"\x19\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    str_0 = "AE\x0bh<Qu3=l9ogqf\x0b0k<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    complex_0 = -999.9 + 486.69386j
    set_0 = {complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    bool_0 = True
    str_0 = "yZ\rnBo]PH!M"
    dict_0 = {str_0: bool_0, bool_0: bool_0, str_0: str_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    list_0 = [bool_0, bool_0, dict_0]
    tuple_1 = (bool_0, str_0, tuple_0, list_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    int_0 = -1546
    set_0 = {int_0}
    list_0 = [set_0, int_0, int_0, set_0]
    list_1 = [list_0, int_0]
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    bytes_0 = b"y\xa9\xdf\xccz\xd8\xf1>\xf4U\xe4lp\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2972():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2973():
    int_0 = 1458
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    int_0 = -2214
    bool_0 = True
    set_0 = {int_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    complex_0 = 3073.51 + 1283.739498j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    str_0 = '"_\t)P./F-Z#B'
    set_0 = {str_0}
    tuple_0 = (set_0, set_0)
    list_0 = [tuple_0, set_0, tuple_0, set_0]
    float_0 = -1517.162
    list_1 = [list_0, list_0, float_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2977():
    int_0 = -96
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2978():
    float_0 = 800.32127
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    float_0 = -4680.0
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2980():
    str_0 = "\x0bGCb$J{NAx.&D"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = -2923
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (int_0, dict_0, int_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2982():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2983():
    bytes_0 = b'\xc2\x81\xe0\xc4\xfe\xc7"\x9c\xb6>\x06'
    set_0 = {bytes_0}
    dict_0 = {}
    module_1.object(*set_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    bytes_0 = b"\x14\xfb?N\xf2\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    complex_0 = -1170.287514 - 3360j
    bytes_0 = b""
    module_0.get_new_command(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2987():
    float_0 = 1227.15271
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2988():
    int_0 = -1952
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2989():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_1, bool_0: bool_0}
    tuple_0 = (dict_0,)
    bool_2 = True
    module_0.match(tuple_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_2990():
    bytes_0 = b"\xf7\xab\xf3\x9d\xb7\x94\x1eO0\xf0\r\xfa\x1f\x1c\xef\x8a["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    bytes_0 = b"\xf79\xcb\xc8\xf7\x8a\xa7\xd0\xfb<f\x80\xb4\xc2\xed\xfd\xe6\xe0\xbc"
    list_0 = [bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    bytes_0 = b"\xf7\xbb\xa9\x80\x973*\nm!\x0b^q"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    str_0 = ");)s["
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2995():
    str_0 = "V^V"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2996():
    bool_0 = True
    bytes_0 = b"\x97\x0c\xcbE#\xa8"
    list_0 = [bool_0, bytes_0]
    tuple_0 = (list_0,)
    tuple_1 = (bool_0, bytes_0, tuple_0, bool_0)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    str_0 = "*U-P"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    none_type_0 = None
    bytes_0 = b"\xfe\x12\xa7i\xach\x14\xe1\xca\x87\xd5B\x1dD\xab"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bytes_0 = b"qbo\x80\xb9\x82 u]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    float_0 = 1049.6538
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


def test_case_3001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3002():
    bytes_0 = b"\x94\xec\n\xa8\xf2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = False
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    int_0 = 373
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    float_0 = 1309.9
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3006():
    object_0 = module_1.object()
    str_0 = "*yL9Hu(3G3t"
    tuple_0 = (object_0, str_0)
    set_0 = {tuple_0, object_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3007():
    int_0 = 2205
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    int_0 = -602
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    float_0 = -1335.2199
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    int_0 = -509
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    int_0 = -1226
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    int_0 = 2009
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    bool_0 = False
    float_0 = 2010.0657
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: float_0, bool_0: bool_0}
    module_1.object(*dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3014():
    bytes_0 = b"\xdf\xb3|\xdd\xce'\xfd\x12\xe19\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3015():
    bytes_0 = b"\x1f\xd8\x85\x1c\xb6\x9c\xeaG\x05w\xbd\x9e\xf0"
    module_0.match(bytes_0, bytes_0)


def test_case_3016():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3017():
    bytes_0 = b"\x80\xa1\xc9\xfbl\x89\xb3\x98jH4>6\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    float_0 = 1782.97769
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_3019():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3020():
    str_0 = "1tGY"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    float_0 = 630.3559
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    float_0 = -2286.538
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    bytes_0 = b"\x9eP\xff\xf7\xd7%B0\xeb\xa4\xac\xd3\xd5\xf3\xe1\x13'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = ()
    module_0.match(dict_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    bytes_0 = b"\x15\xd49\xb0\x0b\xdb\x82"
    float_0 = 752.86701
    set_0 = set()
    tuple_0 = (bytes_0, float_0, set_0, set_0)
    module_0.match(tuple_0, tuple_0)


def test_case_3028():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3029():
    complex_0 = 1355.7425 - 3205.09j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    bytes_0 = b"\xa5\xf9J\xa0\xf2`\x19u\x98c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    bytes_0 = b"\xa2\x8c,6\xf6\x10\x05|\xbew\xb4j"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    int_0 = -742
    dict_0 = {int_0: int_0, int_0: int_0}
    float_0 = 991.35693
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    complex_0 = 740.8 + 397.894j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    str_0 = "\x0bop\rpv6,\nfGUK_\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    none_type_0 = None
    str_0 = "ge:G41r\rbQs\tw\t@P^"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    complex_0 = 2102.59 - 1082.814201j
    list_0 = []
    module_0.match(complex_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    object_0 = module_1.object()
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    int_0 = -301
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    str_0 = "\\y`kq\nP2a~esOt"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    str_0 = "*cT{3N"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    bool_0 = True
    bytes_0 = b"\x84\x84\xe4\xe6\xca\x81m\xc7Q\xac\x1f\x99\x08"
    dict_0 = {bool_0: bool_0, bool_0: bytes_0, bytes_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    str_0 = "NerP:qF\x0cu\x0cx\x0b9R@;/aPn"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    int_0 = 276
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: bool_0}
    complex_0 = -2546.2 - 1893.8206j
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    float_0 = 449.8
    module_0.get_new_command(float_0, float_0)


def test_case_3045():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3046():
    bytes_0 = b"\x01\xff@\xf5\xef-\x91\xd3;\xac\x97I\x14"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    dict_0 = {}
    float_0 = -675.75
    bytes_0 = b""
    set_0 = {float_0, bytes_0}
    tuple_0 = (dict_0, float_0, bytes_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    float_0 = 653.7
    list_0 = [float_0]
    list_1 = []
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    bool_0 = True
    float_0 = -1185.574
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    int_0 = 113
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    int_0 = 270
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    float_0 = -1668.0923
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    complex_0 = -3609.915 - 1203.01j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    str_0 = "dO<h7W&Uzi)~fK"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    bytes_0 = b"\x17\x88U\x7fOH\x99\x1e\xdf\x00~"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    int_0 = -1146
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    bytes_0 = b"\xfbi\xaa\xe5\xed\xd7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3059():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3060():
    int_0 = -702
    list_0 = [int_0, int_0]
    list_1 = [list_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    bytes_0 = b"\xd4\x0bN\xc5\xcb\x9dm}\xfd\xfaIN\xa9\x8d\x18)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    int_0 = -2617
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3064():
    bytes_0 = b"\x0e\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3065():
    str_0 = "b?w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    float_0 = -497.0052
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bytes_0 = b"\x16\xea\x11\xd9]C\x0c\xf2Us8\xecO\xf8\xa3<\xbc\xf6"
    bytes_1 = b"\xd7"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    str_0 = 'Y+"XSGGiL?2\rb=Q;o;J'
    bool_0 = False
    set_0 = {str_0, str_0, str_0, bool_0}
    bool_1 = True
    str_1 = "p}0@jY@Vq\r"
    tuple_0 = (set_0, bool_1, bool_1, str_1)
    list_0 = [str_0, tuple_0, bool_1, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    bytes_0 = b"\xae\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    bytes_0 = b"v\xd1\x85m\xbfe_\xa0\xf8\xcb^O\xdd\x92\x8cenU\xb0\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    complex_0 = -1807.766797 - 1121.8j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    int_0 = 1081
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    str_0 = "tBo\r._seQy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    bytes_0 = b"0\xa2\xd3\x02\x01\xd7\x98\xcd \xe3W\xf6C"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    bytes_0 = b"\x1c\xb3\x83\xc1\xe3\x95\xba\xd5a\x9b\x95\xd6\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    int_0 = 2917
    complex_0 = 137 + 1299j
    float_0 = -721.6082
    tuple_0 = ()
    set_0 = {complex_0, float_0, tuple_0, tuple_0}
    tuple_1 = (complex_0, set_0, set_0, complex_0)
    module_0.match(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    bool_0 = True
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    bytes_0 = b"O\x06Y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    str_0 = '}\t<sO;\tzZ-V%}Eitr"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    bytes_0 = b"3"
    dict_0 = {bytes_0: bytes_0}
    str_0 = "+Nsz7JNv~ctFz6,/0"
    tuple_0 = (bytes_0, str_0)
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3083():
    str_0 = "1n(!G4X4IC"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3084():
    bytes_0 = b"\xe0\xc0\xbe\xcbkj\x00\xf3\x88\rBu\x15BQ\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3085():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = True
    tuple_0 = (bool_0, set_0, bool_1)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


def test_case_3087():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    str_0 = "tE=a1\x0cn"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    bytes_0 = b"\xc0@\x9b\xff\x1b\x1d\xe1\x1c\x1aU"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    float_0 = -1442.522
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    bool_0 = True
    tuple_0 = (bool_0,)
    bytes_0 = b"\x87\xd3\x00*\xed\xef\xe3E`"
    set_0 = {tuple_0, bool_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    int_0 = -1013
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    bool_0 = True
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    bytes_0 = b"\xb1\x11YlbZ\xa6g\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    bool_0 = False
    int_0 = -1270
    dict_0 = {int_0: int_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    int_0 = -2991
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    bytes_0 = b"-\x0b\xd1\xa6KX'?\xfaN\xb2\xc6D\xa8\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_3101():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3102():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    str_0 = 'o@b">F\\>^l|'
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    str_0 = "^\\Q>4G|b1J\\5R"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    int_0 = 2847
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    int_0 = 799
    float_0 = -1148.88
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bool_0 = False
    int_0 = -738
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    bool_0 = True
    bytes_0 = b"\xe2v|M\xfe\x7fx7\xfe\x07\x1e"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    str_0 = '_y[Xj"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    int_0 = -635
    set_0 = {int_0, int_0, int_0}
    list_0 = [int_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    float_0 = 1207.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    str_0 = '=%Zpe!@G8"J'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    bytes_0 = b"\x98T\xd3"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = "B,VqI/,;<QNZI`"
    str_1 = ".o"
    int_0 = -538
    tuple_0 = (list_0, str_0, str_1, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    bytes_0 = b"\x7f\xb0\xec\xdd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3116():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3117():
    str_0 = ",T`z1;M5*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    bool_0 = True
    dict_0 = {}
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: dict_0}
    module_0.match(dict_1, dict_1)


def test_case_3119():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3120():
    bytes_0 = b"\x9c\xea\x12sx"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    str_0 = "]AhC wTLWQp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    float_0 = 276.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, object_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_3126():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3127():
    str_0 = "HT]LU<D'|22kK,4"
    module_0.match(str_0, str_0)


def test_case_3128():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3129():
    bytes_0 = b"\x835$i\xfe"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    int_0 = 2543
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    none_type_0 = None
    int_0 = -254
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    float_0 = 866.997
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    complex_0 = 1004.82 + 153j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    int_0 = 2670
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    bytes_0 = b"\xa2\xfcU\xa0]\x87\x02f\xf1\x99\xec\x8e\xbe\xa4"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    str_0 = "6fMoCx"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    int_0 = 736
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    int_0 = -2109
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_3140():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3141():
    float_0 = 253.138957
    bytes_0 = b"RU0\xc8\x0f\x1b\xb0}\xe3\xf0\x96"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    str_0 = "_Bhw[h?heFn,\r"
    str_1 = "VZ"
    list_0 = [str_1]
    str_2 = '[H,h]3Vx*"@\\PQ'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: list_0, str_2: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    int_0 = -1334
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    float_0 = -2610.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    str_0 = "<4jwtgW"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    int_0 = -944
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    bytes_0 = b"\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    int_0 = 1670
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    float_0 = -3762.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    str_0 = "E_=c|H9U]k-c_1t$(("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    float_0 = -715.2176
    bytes_0 = b"\xb0\xd9\x83\xadL\x972\x00"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    str_0 = "D`O:)'a]y.(<E?N o}f>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    bytes_0 = b"\x10\x81IG\x05\xe8h8\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_1,)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0, bool_1: bool_1}
    tuple_1 = (dict_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    bool_0 = False
    int_0 = -2519
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    bytes_0 = b"k\xac\xe4"
    module_0.match(bytes_0, bytes_0)


def test_case_3159():
    pass


def test_case_3160():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3161():
    int_0 = -140
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    int_0 = -2486
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    bytes_0 = b"@\xf9\xd9\xf6\x91H\x0f\xef\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3166():
    float_0 = 365.5939
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3167():
    str_0 = "xPCR/ffr\rwp\n??"
    list_0 = []
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    str_0 = "OXDu{\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    float_0 = 3243.455
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    float_0 = 257.6898
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3171():
    bytes_0 = b":W"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3172():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0, dict_0, tuple_0]
    list_1 = [list_0, list_0, dict_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    int_0 = 108
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    float_0 = 4057.56
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    str_0 = "u!];FsZ(|9sXh\tvXMd"
    module_0.match(str_0, str_0)


def test_case_3176():
    pass


def test_case_3177():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3178():
    bytes_0 = b")\xd0|"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3179():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3180():
    complex_0 = 167.294 + 2196.559j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    int_0 = -3655
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    bytes_0 = b"\x1a"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    str_0 = "6\tb"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    bytes_0 = b"_"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    int_0 = 999
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    complex_0 = -1208 - 1415.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    float_0 = 1737.62
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    bytes_0 = b't\x98\xcfN\x9f\xd3\xea"\xce\xaeG\xe5\xaf?2J\xe5\x8f\xfa'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    bytes_0 = b"\x97\xc6z\xf4\xf5\x8e"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    float_0 = 2787.584
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    bytes_0 = b"\xdf\xc2?\x8f(!@\xe9\xe3\xf0yj\xc1"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    bytes_0 = b"\xb2"
    complex_0 = 1520.43988 + 397j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    int_0 = 216
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3195():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3196():
    bytes_0 = b"A\x0f\x12(@\xe8-\xb7g\xdcd"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_3197():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3198():
    int_0 = -1917
    module_0.match(int_0, int_0)


def test_case_3199():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3200():
    bytes_0 = b"\x1b\x99\x98\xe5T\x1c\xc1hV"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    str_0 = "}6lo"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [str_0, dict_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    int_0 = 457
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    str_0 = "r"
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    int_0 = -1579
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    bytes_0 = b'"\xcbW\xfd_'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    str_0 = "!G*"
    str_1 = 'Z$"vfk9p?EyJ<yAR.'
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    int_0 = 4183
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    float_0 = 1592.585
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    int_0 = 2494
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    bytes_0 = b'"\x0c\xb4\xc3\xc7'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    bytes_0 = b"\xe5\xc7/\xe8\x13#\xd4\x0c\x10A\xb0\x86\x15}\x0ce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    float_0 = -3121.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    bytes_0 = b"\xde\x13\xb4(\x05y\x96\xcfbW\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    str_0 = "6t1ymxz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    int_0 = -1445
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    str_0 = "{\\("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    set_0 = set()
    bool_0 = True
    list_0 = [bool_0, bool_0, set_0]
    tuple_0 = (set_0, bool_0, list_0, bool_0)
    list_1 = [tuple_0]
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    str_0 = "ujR9R_FB,aL|;eFz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    bytes_0 = b"\xe9,\x95\xa0\xc2I\xbd\x15t\x01\x1b\xa4\xae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    int_0 = 1842
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    str_0 = "tTkQVR8a\tJsT0"
    list_0 = [str_0, str_0, str_0]
    bytes_0 = b"\xb3\xfe\x8a\xd4\x1c\xb9_\xcb\x10\x1f\x13l\x15\x1e\xb5"
    module_0.match(list_0, bytes_0)


def test_case_3225():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3226():
    list_0 = []
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    bytes_0 = b"\xf4O0,\xb5\x81\xd8\xe3y\xfe\xc2h\xdd\xf6\xc2|\xf8J\xab\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    int_0 = -1082
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    str_0 = "0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    float_0 = -339.495
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    int_0 = -379
    module_0.get_new_command(int_0, int_0)


def test_case_3233():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3234():
    float_0 = -322.83
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    set_0 = {tuple_0, tuple_0, bool_0}
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    bytes_0 = b"\x99\x85"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    complex_0 = -1081.88202 + 608.37623j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    float_0 = -2488.207692
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    complex_0 = -1779.698853 - 1226.244j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    bytes_0 = b"\xb4\x9bK\xe01J\x929z|\xcf\xd8 @ "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    str_0 = "O2xqzQl_U.\\#.0+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    str_0 = "G@\\M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    tuple_0 = ()
    set_0 = {tuple_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    int_0 = 313
    bytes_0 = b",\x88\xfb/\xea"
    dict_0 = {int_0: int_0, int_0: int_0, bytes_0: bytes_0}
    int_1 = 599
    module_0.get_new_command(dict_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    str_0 = "QI(QtV\x0c\x0c-OweK"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    float_0 = 2026.12
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    int_0 = 1446
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    bytes_0 = b"MQ\x01^u\xb1PK\x81\x8a"
    bool_0 = False
    bytes_1 = b"\x10\xd6\xdb\xfa"
    tuple_0 = (bytes_0, bool_0, bytes_1, bool_0)
    bytes_2 = b"E\xd1UT0j\xf8?\xdd"
    str_0 = 'Mi7or"Sn=Z)U=(V'
    tuple_1 = (tuple_0, bytes_2, str_0)
    dict_0 = {bytes_0: tuple_1, bytes_0: tuple_1, bytes_1: tuple_0}
    dict_1 = {bytes_2: str_0}
    module_0.get_new_command(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3254():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3255():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    float_0 = 1883.784834
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    complex_0 = 983.69 - 3168.682j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    str_0 = "?VPO5ngzaNpq"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    str_0 = "i\\\rU2|XCN@;W:(<q\nuq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    str_0 = ".:I)-Hh /xW<0"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    object_0 = module_1.object()
    int_0 = 1679
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    bytes_0 = b"#:j\xb5K\xbb:\xf7\x9a\x04"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    str_0 = '$Go ^SAp\t%k<>RDcq"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    complex_0 = 519.6474 - 758.63449j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    int_0 = 1603
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    str_0 = "_\\M<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    float_0 = -321.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3268():
    bytes_0 = b"\xec\xf4\xdd\x12o\x1f+"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3269():
    int_0 = 1335
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    float_0 = 3264.38
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    int_0 = -2626
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3273():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3274():
    str_0 = ":;#x{'>\x0cH%bvT$` 8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    int_0 = 4041
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    int_0 = -2767
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    bytes_0 = b"\x84Q\x10\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3280():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3281():
    bytes_0 = b"j"
    list_0 = []
    tuple_0 = (bytes_0, list_0)
    str_0 = "X8$i"
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = -136
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    int_0 = 3271
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    float_0 = 115.04
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    complex_0 = -3425.703 + 795.06j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bytes_0 = b"\xddZ\x1e.4\x9c\x0c!j_:\xc3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    float_0 = 387.700494
    list_0 = [float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    int_0 = 1197
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    int_0 = 1513
    str_0 = "y1TU7PY}"
    tuple_0 = (int_0, str_0, int_0)
    module_1.object(*tuple_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    float_0 = 1677.67
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_3294():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3295():
    bytes_0 = b"\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    int_0 = 55
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    str_0 = '=oCVW:"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    complex_0 = 840.0424 - 1474.1528j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    bytes_0 = b"\xa9\xdb+\xbc;\x8f\xbf\xea^\xbdi\x92^\xe8"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    str_0 = "MbDZ/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    str_0 = "QP;"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    str_0 = "0:rE{106gD<"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    str_0 = "c2)Mg/\x0bi}"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    float_0 = -858.1524
    list_0 = [float_0, float_0]
    bytes_0 = b""
    tuple_0 = (list_0, list_0, bytes_0, bytes_0)
    tuple_1 = ()
    tuple_2 = (tuple_0, tuple_1, list_0)
    list_1 = [tuple_2, list_0, tuple_2]
    list_2 = [list_1]
    module_0.match(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_3306():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3307():
    float_0 = -1704.9699
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    bytes_0 = b"\x95 \x15\x8a\xa7p\xa1\x0c\xfdc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    bytes_0 = b"\xf9\x07M\xd1"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    bytes_0 = b"\xa0\xfcT\xe3f\x1eA\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3311():
    bool_0 = False
    int_0 = 3269
    dict_0 = {bool_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3312():
    int_0 = -614
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3313():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3314():
    str_0 = "("
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3315():
    str_0 = "-#oSB\t]^t-!]L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3316():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    bytes_0 = b"$\x10\xb5i\x1d\xe7\xd9PH"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    str_0 = ",A"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    bytes_0 = b":|\x95\x04\x94\xc5\xf0\xd0\xc0\x1f\x19"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    int_0 = 1501
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    int_0 = -986
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bytes_0 = b"\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    float_0 = -779.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    int_0 = -486
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    str_0 = "`\r[KN@l.MNG?ARR"
    int_0 = 1742
    tuple_0 = (int_0,)
    float_0 = 2631.670163
    dict_0 = {str_0: str_0, tuple_0: int_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    float_0 = -579.2072
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    float_0 = -3948.49
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bytes_0 = b"H\xc7&\x87T"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    str_0 = "7'lOBd2xmh^BV#Du\\TgL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3330():
    complex_0 = -2308.4684 + 1636j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3331():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    set_0 = set()
    tuple_0 = ()
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    str_0 = ",EoI4TUFb:7%{}Xo2iJM"
    bool_0 = True
    bytes_0 = b"\xd14"
    tuple_0 = (bytes_0,)
    tuple_1 = (str_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3334():
    bytes_0 = b"\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3335():
    str_0 = " g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    float_0 = 2248.4589
    module_0.get_new_command(float_0, float_0)


def test_case_3337():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3338():
    bytes_0 = b"\x14\xd0\xfd\x12"
    set_0 = {bytes_0, bytes_0}
    tuple_0 = (set_0, set_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    bytes_0 = b"'"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    complex_0 = 635 + 55.8915j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    bytes_0 = b"\xb7\xf9#\xcb\xc7\xd776\x13\x0fi\xe8\xc9\xd7j"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    float_0 = 2078.17532
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    float_0 = 837.5
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    bytes_0 = b"'eR\x0f~\x96l\x8b_b\xb4\x0em7eW[\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    int_0 = 1154
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    str_0 = "+R.',36HOrXi^P|\rm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    float_0 = 1371.66
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    bytes_0 = b"\x16\x1cF\xb1H\xeaX\x84O|\x1a\xa6\x84\x11\x12\xe5+_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    float_0 = 3053.16
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    object_0 = module_1.object()
    int_0 = -202
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    bytes_0 = b"\xa8\xb4\x8cT\xb6\xc8\x9b\x82\xf1\xf8,\xa2\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    bytes_0 = b"\x14\xad%\xbf\xf4~\xa3\xdb\x90]\xfa\xde/\xabG"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    float_0 = -37.88699
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    str_0 = '+L)6Wy1\t "\x0b!IfPzK'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    int_0 = 1970
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    str_0 = "(fx"
    dict_1 = {str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    str_0 = "Bs7s"
    tuple_0 = (str_0, str_0)
    complex_0 = 2928.073178 + 1992.462j
    dict_0 = {tuple_0: tuple_0, str_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    int_0 = 663
    list_0 = [int_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3360():
    int_0 = -99
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3361():
    float_0 = -176.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    str_0 = "+J%lcT "
    str_1 = "{%W*h^SZ5`VjOCq44e"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    str_0 = "2#(ogT*rtkK\ty]"
    float_0 = -1248.70032
    tuple_0 = (float_0,)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3364():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3365():
    float_0 = -1967.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    float_0 = 838.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    bytes_0 = b"\xb8\x96\xe8I5d*c8m\xb3\x1d\xa1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    float_0 = 2899.2061
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    bytes_0 = b"\x0f"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    bytes_0 = b"5\x03~m\x87\x04\xac\x8e\xa9I"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    str_0 = "IL[rF#GI`t="
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, list_0, str_0, str_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    int_0 = -2136
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    bytes_0 = b"\xde\x8c\x00W\xc0L\xef\x97"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    int_0 = -1878
    tuple_0 = (int_0,)
    bytes_0 = b"VS\xa0\x06fK\x99\xde\xd9}"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    str_0 = ")yKPVm$~QxN"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    str_0 = "qg`=B9-_M1)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    bytes_0 = b"\x9a\x1d\xbailT\xb5\xc7\x8d\x1c\xdb\x18\xa6*\xb7]\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    float_0 = 3963.933755
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    int_0 = -1656
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    str_0 = "nt&jCx/#0Fi(=B4OW"
    dict_0 = {str_0: str_0, str_0: str_0}
    tuple_0 = (str_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    str_0 = "wI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    bytes_0 = b"\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    complex_0 = -2127 + 182.084j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    int_0 = 673
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    str_0 = "X&ZNlp\t~!#hBx,6"
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, str_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    bytes_0 = b"\xf5\x94.B\xec\xa1\x8f\x08p"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    int_0 = -1622
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    str_0 = "iWyDl"
    int_0 = 1244
    bool_0 = True
    tuple_0 = (str_0, int_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    bytes_0 = b"8\x01\xb8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    bytes_0 = b"\x1a\x1a\x8f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    none_type_0 = None
    float_0 = -706.7
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    str_0 = "V\rSPl\\"
    str_1 = "@J<\r8"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    float_0 = 1516.0
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    str_0 = "GB@Z|sE7^#"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    int_0 = -776
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    complex_0 = 998.831639 + 781.38j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    complex_0 = -1861 - 301.98723j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    float_0 = -236.3871
    dict_0 = {float_0: float_0, float_0: float_0}
    list_0 = [dict_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    float_0 = -866.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    str_0 = "{"
    bool_0 = True
    set_0 = {str_0, bool_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3407():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3408():
    float_0 = 1013.447
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    float_0 = -1648.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    int_0 = 1651
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    str_0 = "=w\reW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3412():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3413():
    int_0 = 771
    module_0.get_new_command(int_0, int_0)


def test_case_3414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3415():
    str_0 = "b5f[%\x0c4%z"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    bytes_0 = b"\t\xc5\xab2_!R\xc6^o\xa2T\xdav{\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bytes_0 = b"\x7f\xa5@G\xb5\xa5}\x0bM\xc0\x99\xbcr\x88\x13\x9a\xfc\xe42"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    float_0 = -3120.32959
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = "Nx@8f-f8["
    module_0.get_new_command(str_0, str_0)


def test_case_3420():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3421():
    complex_0 = -1461.9585 + 402.116581j
    set_0 = {complex_0, complex_0}
    bytes_0 = b"eG\x87\x92\x80\xc0m\xe6\x913+\xd9z\xf9\xe9\xba."
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3422():
    bytes_0 = b"\x9c\xddG\xa3\xce'\xc6Zp\xad\xaf\xa2\xd7\xe0\xd8\xaf\x1ej"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3423():
    bytes_0 = b"k\x11\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3424():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3425():
    bytes_0 = b"\xdbL\xc2B+\xf9Mx\x9e\xc1\xf6\xe9A"
    list_0 = [bytes_0, bytes_0]
    str_0 = "KcX\"'bvZsB4t2+JNQ"
    str_1 = "@wV&"
    dict_0 = {str_0: list_0, str_1: list_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3426():
    int_0 = -501
    tuple_0 = ()
    dict_0 = {int_0: tuple_0}
    module_0.match(dict_0, dict_0)


def test_case_3427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3428():
    int_0 = 1518
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    int_0 = 407
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    int_0 = 315
    tuple_0 = ()
    int_1 = -1328
    tuple_1 = (int_0, tuple_0, int_1, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3431():
    bytes_0 = b"\xf5i\xe7\xcb\xebj\xc5q\xb7\x17\xd4`\x15\x10,k"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    int_0 = -720
    set_0 = {bytes_0, int_0, int_0}
    tuple_0 = (list_0, set_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3432():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    int_0 = -4070
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3434():
    bytes_0 = b"a\x01\x94\xf3\x15\xc7\xae\x8e\xcd\xef\x10"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3435():
    bytes_0 = b"\xdf\x04\x14\x96\x0c\x93\x02\xa6\xfa#\x01>)"
    str_0 = "Q$jliUzgdSJfq:|2"
    bytes_1 = b"A=]7\x94\x95\x0fM"
    tuple_0 = (bytes_0, str_0, bytes_1)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    int_0 = -2694
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    bytes_0 = b"\x8dP\xc8\xa9\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    complex_0 = 3773.03 + 1524j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    float_0 = 1696.0
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    float_0 = 4461.50024
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    bytes_0 = b"\xf5lW\xf4\xf4J\xe7\xa3\xef}\xff3\xbb\x07\xf0qX\x8a@\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    float_0 = 1015.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    complex_0 = 424.5 - 1988.9529j
    module_0.match(complex_0, complex_0)


def test_case_3445():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3446():
    str_0 = "U!#TN^\rOe\rmAv3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    tuple_2 = (bool_0, set_0, tuple_1)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    bytes_0 = b"&\xab\x17\xb9\xff\x13\xa7\xe1\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    str_0 = "|wV<"
    int_0 = 2667
    str_1 = "U85Z"
    list_0 = []
    tuple_0 = (int_0, str_1, int_0, list_0)
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    bool_0 = True
    bytes_0 = b"z\x98\xea\x11;\xeb\xd9\xec\xd51\xfd}\xcb?\x13\xf6\xa8\xc0\r"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    float_0 = 3751.83033
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    tuple_0 = ()
    bool_0 = True
    list_0 = [tuple_0, bool_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3454():
    int_0 = -1505
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3455():
    float_0 = -919.31
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    int_0 = -3099
    bool_0 = True
    list_0 = [int_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    bytes_0 = b"\xe9R\x82\x98h\xf2\x0cL1Tg-\x85\x95\rR\xba\xad\xe9"
    list_0 = [bytes_0, bytes_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    bytes_0 = b"NH;\x05W}\x85\xb3\xb6\xa0D\xbe\xcc\r6O"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


def test_case_3460():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3461():
    bytes_0 = b"\x904\xf6\xe9n\x05\xd4Uu`\x12\xe3\xe1.$|"
    int_0 = -534
    list_0 = [bytes_0, int_0, int_0, bytes_0]
    set_0 = {int_0, int_0}
    tuple_0 = (list_0, list_0, set_0, int_0)
    tuple_1 = (bytes_0, int_0, tuple_0)
    list_1 = [tuple_1, tuple_1]
    module_0.match(list_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    int_0 = -1479
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    bytes_0 = b"\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    bool_0 = True
    str_0 = "[>M\nFGoG"
    bool_1 = True
    tuple_0 = (bool_0, str_0, bool_1, bool_0)
    dict_0 = {tuple_0: str_0}
    module_0.match(dict_0, tuple_0)


def test_case_3468():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3469():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    bytes_0 = b"\xb5Af\x94\xa5\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    complex_0 = 1115.057627 - 816.684568j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    int_0 = 1590
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    str_0 = "\r 5m\rLo&mm|%X/?P["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_3476():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    float_0 = 208.082
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    int_0 = -1240
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    bytes_0 = b"\x85\xe2\xfb{\x8b\xa0"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (list_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_3481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3482():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    bytes_0 = b"\xd2Y\r\xd2\x1b\xf2\x1a\xf6\xcecI/\xbeL\x1a\x8d="
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    float_0 = 566.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    int_0 = -1429
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    int_0 = -2855
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    bytes_0 = b'\xd4;C\xb7\x80\x92\x98V"\xf2\x0ffbq>'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    int_0 = -902
    float_0 = -728.0
    module_0.match(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    str_0 = "\r>D"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    int_0 = 352
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    bytes_0 = b"wG\xe6\t\x8fx\x9f"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    int_0 = 1331
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    float_0 = -2110.0106
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3494():
    str_0 = "}g)X`D3~M2"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3495():
    bytes_0 = b"\x93P\x02\xfa\xe94f\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3496():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3497():
    bytes_0 = b"Y\xc9Q^\xba\x05\xa9\x1c\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3498():
    bytes_0 = b'\x07\x82J\x02\x97 \x8evtk3"k\x0fq\x95\xfc\xfe'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    float_0 = -3529.96355
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    float_0 = 1163.9
    module_0.get_new_command(float_0, float_0)


def test_case_3501():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3502():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    float_0 = -2422.73112
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    str_0 = "A_Mk,s"
    bytes_0 = b"4\xd7\xd3U"
    tuple_0 = (str_0, bytes_0, str_0)
    str_1 = "D^\x0c"
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    bytes_0 = b"C>\x81/\x1d\xf4\xcf\xcd\x00\xc2\xb0Rt\xd5a\xe4=\x17\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    str_0 = 'j8$+6"/Bx{#*9fcrI0N'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    int_0 = 7136
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    float_0 = -1414.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    str_0 = "2U8SQ4.B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    bytes_0 = b"d\xf4\xe5\x94\xaf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    float_0 = 481.09731
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    str_0 = 'c_"\n)fk'
    module_1.object(**str_0)


def test_case_3514():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3515():
    str_0 = "'6\\nYo"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    bytes_0 = b",\xcb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    float_0 = 564.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    str_0 = "*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    object_0 = module_1.object()
    str_0 = "[g;"
    bool_0 = True
    str_1 = "~0"
    dict_0 = {str_0: bool_0, str_0: object_0, str_1: str_1, str_0: str_1}
    module_1.object(*object_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3520():
    bytes_0 = b'\x94pN4"'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3521():
    bytes_0 = b"\xd4\\\xc8zO\xea\xceP\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    int_0 = -327
    int_1 = -2605
    dict_0 = {int_0: int_0, int_0: int_1}
    list_0 = [dict_0, int_0, int_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    bytes_0 = b"\xf3\x8b\x8b~\xf2\t{N\x85b\xdb&\xd7o\xb1\x9ea\x8d\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    bytes_0 = b"\xac_\xc95"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    str_0 = "M{)#[S7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    int_0 = 3568
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    str_0 = "h\x0b_xO1g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    int_0 = 6279
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    int_0 = 1975
    dict_0 = {}
    list_0 = [int_0, int_0, int_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    float_0 = -1945.7144
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    bool_0 = True
    set_0 = set()
    list_0 = [bool_0, bool_0, set_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    float_0 = 312.008
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3535():
    int_0 = 3646
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3536():
    bytes_0 = b'\x16f\xef"y\xa6G\x9e\xe3\xac\x95\x1d'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3537():
    float_0 = 2374.574719
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    bytes_0 = b"#\x8a"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    str_0 = 'Ni\t" xctErl'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    int_0 = -3
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    int_0 = 1307
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    str_0 = "L+1-@11\\<Ou9CYXWm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    float_0 = -745.9309
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    int_0 = -14
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    str_0 = "ARMm}Kn("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bytes_0 = b"I\xeb\xd5\xfa\x1e\xcb\xe9\xb0\xaaK-=}Y\xe8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3549():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3550():
    float_0 = 2346.326209
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    float_0 = 3026.35107
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


def test_case_3552():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3553():
    str_0 = "4,N'M~TuM6O"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = 2530
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [dict_0]
    tuple_0 = (list_0,)
    complex_0 = -1332.532337 - 4707.189708j
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    float_0 = 643.5748
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    int_0 = 1045
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    int_0 = -2896
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    str_0 = "6\tT\neBOK4H$bjK!/nUma"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    bytes_0 = b"\x9f\x02\xb6`\xb4T1?"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    float_0 = 403.6235
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    float_0 = 1711.80644
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3566():
    str_0 = "h\\Ls*\r{!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3567():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    str_0 = "\n2\tJ$"
    none_type_0 = None
    str_1 = "\\KPOP>"
    str_2 = "o{*U-"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    str_0 = '6(\x0b|p}^"P#ca|nRjU'
    object_0 = module_1.object()
    dict_0 = {str_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    bytes_0 = b"\x95hN"
    float_0 = 179.86
    set_0 = {bytes_0, bytes_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    int_0 = 346
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    str_0 = "vFS =]3 "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = []
    tuple_0 = (dict_0, list_0, dict_0, dict_0)
    tuple_1 = (bool_0, tuple_0, list_0)
    tuple_2 = (tuple_1, tuple_1, dict_0)
    module_0.get_new_command(tuple_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3575():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3576():
    bytes_0 = b"Zb\xaclv\x1a\x17\xc2\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    bool_0 = True
    bytes_0 = b"e\x1a\xd0\x80\xe6A\xa4\x1d\xbaC\xe6\x1a'\xc6\x8d\xe6\xd6\xe1\xc5\x1d"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    bytes_0 = b"\x8b\xdfi\xfd"
    bytes_1 = b"\xf1D\xaa["
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    str_0 = "q(Kv3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    str_0 = 'FhrB8\rm@-n7\nQ0+"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    str_0 = "R"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    str_0 = "y/=\x0b+~{B*?rs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    list_0 = []
    str_0 = "LBrI"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    bytes_0 = b"\x89\x9b 4\\0\xf1\xbcq\x1f\xc8\xf7\x92\x14\x17;"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    dict_0 = {}
    float_0 = 1137.855
    tuple_0 = (dict_0, float_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3586():
    int_0 = -1872
    bool_0 = False
    dict_0 = {bool_0: int_0, int_0: int_0, bool_0: bool_0, int_0: bool_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3587():
    float_0 = 1047.92345
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    int_0 = 3530
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    str_0 = "N{+a'KJnXS"
    int_0 = 2499
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    int_0 = -349
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    int_0 = 605
    module_0.get_new_command(int_0, int_0)


def test_case_3593():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3594():
    float_0 = -52.38
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    int_0 = 3214
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    float_0 = -1820.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    object_0 = module_1.object()
    bytes_0 = b"I\x1d2UTe\x03\x0c\x99K\x88Ul,\xce"
    dict_0 = {object_0: object_0, object_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


def test_case_3598():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3599():
    bool_0 = False
    bytes_0 = b"\xb1\x88d\x0bi\xb9\xfc\x116\xdb\x1a"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    str_0 = "UUU\\[%z<>/_<v).*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3601():
    str_0 = "J$nn!GVT+sl#O(;>Z"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bytes_0 = b"$\x84\xf1\x9d\xfc\xe4\x93\xebQ\xb0\xb5\xfb\xd9\x9f\xb6\xb4lD\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [bool_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    float_0 = -3246.28554
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    bytes_0 = b"\xfey\x96\x92\xec\x9a\xed"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    bytes_0 = b"^(i\xf5i\x9c,\xb4:\xa4e\x8eg\xad"
    str_0 = ""
    int_0 = -1779
    dict_0 = {str_0: bytes_0, bytes_0: str_0, bytes_0: int_0, bytes_0: str_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    str_0 = ">1f],yF$/L5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    float_0 = -3994.8341
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    float_0 = -3099.59
    tuple_0 = (float_0, float_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    bytes_0 = b"&TH\x91\xa3-mO\xee"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = True
    tuple_0 = (list_0, list_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3613():
    str_0 = "^!FW$c["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3614():
    str_0 = "r9M0t^QpyP,J'aiN*h\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    str_0 = "_;SPu&vL3,y\x0bWV~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    bytes_0 = b"D\xf1\xaa\xa3nk\x08\xde\xd9\xb5\x97VY\x80\x17)\xf5\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    str_0 = "|h#IFI0<=u \x0b$P2"
    str_1 = "}?p"
    tuple_0 = (str_0, str_1)
    int_0 = -1075
    tuple_1 = (str_0, tuple_0, int_0)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    str_0 = ",f!xV\\VSHYb)4O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    bool_0 = False
    bytes_0 = b"b>mjod\xdb\x05\x0c\x13?\x0b\xa0\x7f:m\x98"
    set_0 = {bool_0, bool_0, bool_0, bytes_0}
    bytes_1 = b"\x8f\x06,p\x9f-\xc5\xf9\xfd\x12\xc8*\xe1\xba"
    list_0 = [bytes_1]
    tuple_0 = (bytes_0, set_0, list_0)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    bytes_0 = b">-\xfa0\x84\xc5:\xc7\x7f]\xfb\xbd!\x8c\xdbh\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    str_0 = "_Xz.dzO\t^7\n/PvnEH _Z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    none_type_0 = None
    complex_0 = -1663.109 - 1499.983j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    str_0 = "\nM5"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    int_0 = -3750
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    int_0 = -2911
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    bytes_0 = b"\xbd\xb2\xf3\x0c;\xae\xe1\x8b\x12\xa6\x84\xce\xc2\xa5\x95\x8e\x02\xb6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    bool_0 = True
    set_0 = set()
    dict_0 = {bool_0: set_0}
    tuple_0 = (bool_0, set_0, dict_0)
    list_0 = [tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    int_0 = 1252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    complex_0 = -3029.59 - 1504.1j
    list_0 = [complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


def test_case_3634():
    pass


def test_case_3635():
    pass


def test_case_3636():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3637():
    str_0 = "e;q,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    bytes_0 = b"\x94I\xaa|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    str_0 = "ute"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    int_0 = 2278
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [bool_0, bool_0, bool_0, set_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    float_0 = 1297.084
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    float_0 = -649.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    str_0 = "A^!Jt(O?y_Nw"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    str_0 = "znk.\\\r>fj-9 WM"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    str_0 = "],eqUS["
    int_0 = -25
    list_0 = []
    tuple_0 = (str_0, int_0, str_0, list_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    float_0 = 678.963
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    str_0 = "z"
    str_1 = "ofTP?v\x0c C4RAvzqNGh"
    str_2 = "Bs:%(wwK1Fe\n(m_CeW"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    int_0 = -1575
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    float_0 = 2138.0
    module_0.match(float_0, float_0)


def test_case_3652():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3653():
    int_0 = 1243
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    str_0 = "\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    int_0 = -1397
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    bytes_0 = b"\xd4|"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    str_0 = "~:SWeY"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    str_0 = "i?)QZ_8,qz\tK,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_3660():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3661():
    float_0 = -185.39475
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3662():
    str_0 = ".$ob\x0c?"
    str_1 = "`zkITjPb\\@\x0bjRY iu"
    dict_0 = {str_0: str_1, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3663():
    str_0 = "fX/)<v;W3PsQ (Y,@"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    int_0 = 745
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_3665():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3666():
    str_0 = "c"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    list_0 = []
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    bytes_0 = b"T\xa5\xa4\xdd\xc5\x9c\xee^\xbb\xbc\xda\x8d\x1c\x11\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    int_0 = 2211
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    str_0 = ";("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    str_0 = '1"`B [(6W'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    bytes_0 = b"\xd6\x87\xd08\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    int_0 = 1778
    bool_0 = True
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    str_0 = "TGSS@]O3XA"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    str_0 = "w!\x0cgc;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    float_0 = 1921.2885
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    bool_0 = True
    bytes_0 = b"g 5pr\xfb\xcd\x18uT\xbeW"
    module_0.get_new_command(bool_0, bytes_0)


def test_case_3679():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3680():
    float_0 = -267.38
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    str_0 = "&O#"
    dict_0 = {}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    bytes_0 = b"\x18@SQ\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3683():
    int_0 = -2484
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3684():
    int_0 = 1270
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    float_0 = -834.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    str_0 = "\x0cE$x}m|lg5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    bytes_0 = b"\xa4\tw#\xb9\x95\x1f5\xdc\x1c\x9en\xd2$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    float_0 = 1183.732196
    module_0.match(float_0, float_0)


def test_case_3689():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3690():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3691():
    int_0 = 490
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3692():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3693():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    bytes_0 = b"]\xf5r;`\x01\x81"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    float_0 = 2724.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    float_0 = -2029.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    str_0 = "Wj/k5lKb"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    complex_0 = 3123.915 + 858.24j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    int_0 = 1631
    float_0 = 2660.7768
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    int_0 = 278
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    float_0 = 1485.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    bytes_0 = b"\xb0\xe2\xe5\x15-s8\xdd\xeb\x8f\x85\xa4\x81\x10\x121\x92\x19xc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    int_0 = 642
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    bytes_0 = b"\xc1\xceig\n)\x831\x95\xe1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    str_0 = "GR!^<RiFi+L3"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    str_0 = "!o2<)zNGDBL,qi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    int_0 = 64
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    str_0 = '"vA\x0c\\`Bf<+"D# S\tV=\x0cv'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    bytes_0 = b"yi\x87\x95R\xde\xe0F\xe7\x8f\xf4\xf1 \xac+\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    int_0 = 1519
    bool_0 = True
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    tuple_0 = (int_0, bool_0, bool_0, object_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    int_0 = 2180
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    float_0 = -1022.107
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    bool_0 = False
    bytes_0 = b"\xc5\\\x07\x98\x8cS\x81\x11\xa3C\x03\xcbqB?\x84g$~9"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    int_0 = 10
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    float_0 = 3533.688
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    int_0 = -1996
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    complex_0 = -3448.5 - 1502.631j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    int_0 = 1700
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    bytes_0 = b"<ML\xc9\x90\x1e<\xa1\x08,\x1c&\x87`\t\xec"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    none_type_0 = None
    object_0 = module_1.object()
    list_0 = [none_type_0, object_0, object_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    int_0 = 1738
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    str_0 = "];u,e\rMepRl"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    int_0 = 752
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    bytes_0 = b"\xaf\x8c\xb2\xf0\xf4\xb4l (F\x9c\xc9lZ\x92\xd6\x13}"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    int_0 = 1110
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


def test_case_3727():
    pass


def test_case_3728():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3729():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3730():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3731():
    int_0 = 1251
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3732():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3733():
    str_0 = '^)A*)n*+aG"F!t:'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3734():
    bytes_0 = b'Z_B\xa4\xab\xb9\x86\xde"a)\x04.c\xccR\xba'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3735():
    str_0 = "2Qzuq+C#_WZf7j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    str_0 = " n,ve2QCf\tEz4Om3Fd+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_3737():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3738():
    int_0 = -377
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    bytes_0 = b"\x9c9'\x95E\xbfKH\xee\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3740():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3741():
    int_0 = -2625
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    int_0 = 231
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    str_0 = " 3uxq1YL.{QVHTi."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    float_0 = 3155.5
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_3745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3746():
    int_0 = 1286
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    int_0 = 566
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    complex_0 = -4916.2 + 238.4527j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    bytes_0 = b"\n}K\xfd\xbe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    str_0 = "!V\rD"
    list_0 = [str_0, str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    bytes_0 = b"i\xf8>\x93$Oq<Ga"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    float_0 = 1772.233405
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    str_0 = "hF1CZe=|'ZObLxY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    str_0 = "sTu32\r5sY>SMg\rf\x0cJY@3"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    complex_0 = -599.0696 + 737.3959j
    dict_0 = {}
    dict_1 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: dict_0,
    }
    module_0.match(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    int_0 = -323
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    bytes_0 = b"v\xf1\xea\xea\x947\xfa\x93&\xa2|!>"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3761():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3762():
    int_0 = 2023
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3763():
    bool_0 = True
    str_0 = "7|U{{H<]~S_i"
    module_0.match(bool_0, str_0)


def test_case_3764():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3765():
    str_0 = "A~;!j6?)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    int_0 = 44
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    float_0 = -238.59
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    float_0 = -1825.9486
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    str_0 = "&~K0k#Y~3B612>8Xlto"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    str_0 = "5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    complex_0 = 1885.2 - 1560.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    int_0 = 966
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    str_0 = "{D;\t7{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    float_0 = 945.96108
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    int_0 = -608
    module_0.get_new_command(int_0, int_0)


def test_case_3776():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3777():
    int_0 = 285
    list_0 = [int_0, int_0]
    tuple_0 = ()
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    float_0 = -903.9273
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3780():
    float_0 = -1017.51568
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3781():
    bytes_0 = b":"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    bytes_0 = b"\xe5\xc6\xdbs)\xe6\xef\xb4~G"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    bytes_0 = b"\x88G\\\xb1\xd5\x9b2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    int_0 = -547
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    int_0 = 1330
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    int_0 = 2299
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    int_0 = 1253
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    dict_0 = {}
    float_0 = -2488.3945
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    int_0 = 2539
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    complex_0 = 233.4 - 782.9653j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_3795():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3796():
    complex_0 = -1698.0594 - 969.2154j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    list_1 = [list_0, list_0, complex_0, complex_0]
    bytes_0 = b"\xef|\x99\x91Sx%\xdf\xecx\xc7mY"
    list_2 = [list_1, list_0, bytes_0]
    module_0.match(list_2, list_2)


def test_case_3797():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3798():
    int_0 = -1087
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3799():
    bytes_0 = b"\x03\xb5_m\xcc8\xb5?\x7f\xaa\x92\xc4"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    bytes_0 = b"Pb\x95\xe4)\xf7\x0b\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    str_0 = "ul"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    float_0 = 199.0
    list_0 = [float_0, float_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    bytes_0 = b"^P\xff\xb3hZ\xff\x88\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3807():
    bytes_0 = b"\x06ET&\x98\xaec\x85$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3808():
    tuple_0 = ()
    complex_0 = 249.7 - 2623.2j
    tuple_1 = (tuple_0, complex_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3809():
    int_0 = -1324
    tuple_0 = (int_0,)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3810():
    bytes_0 = b"\xc0\x8fG\t,\x91T+\xa1^\xc0\xe5i0k)\xe8"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_3814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3815():
    bytes_0 = b"\xe7\x9fl8\xbe\xfe\x06\tN\x95\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    str_0 = "2j&oq}TVS8\tmrv6i.M9M"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    str_0 = "0\x0bGg:\tg\tn3Q!iQ\x0b"
    int_0 = -2045
    dict_0 = {str_0: str_0, str_0: int_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    float_0 = 604.55
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3819():
    int_0 = 565
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3820():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3821():
    str_0 = " "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    bytes_0 = b"\t\x94\x87\x8c\rh\xbd^\xa1\t\xc8J{\xb0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    int_0 = 2201
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    complex_0 = -1449.3255 + 2474j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    int_0 = -790
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    float_0 = -1254.0183
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    str_0 = "x$[k-+3\rF\nq(T988jXu"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    int_0 = -1409
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    bytes_0 = b"\xd5\x00\xea\xa4\xc0\x99E"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    bytes_0 = b"\xbb\x88\xb9 \xa4\x12\xce\xb0\x0b\r9`\x16"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    int_0 = -581
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    float_0 = -1207.2142
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    bytes_0 = b"\x88\xf7Lpi"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    bytes_0 = b"\xde\xe3\x94\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    str_0 = "C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    bytes_0 = b"\xa1\x1dv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    int_0 = -407
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    bytes_0 = b"0\x8e\xf2I\xa8i\xfd8\x93\xb9F\xf3;\x92i2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    bytes_0 = b"|\x16v\x1d\xe4a\x84\x0e\x9aH\xa1\xad\xce)\xd52N"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    bytes_0 = b"\xee6\x88\xf2\x10\x93Yp\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    int_0 = -893
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3845():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3846():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    list_0 = [dict_0]
    tuple_1 = (tuple_0, dict_0, list_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    object_0 = module_1.object()
    str_0 = "#G<,-2<!2,'0!\" "
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    float_0 = 825.833782
    bytes_0 = b"\xf4Zw\xe7\x9bn\xb8\xea\xf5'\n\xc8\x06\xbf\x8c\xae\xea"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    str_0 = "l};\\(lf1Dri.M:S|O"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    str_0 = "6DZ)ue1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3852():
    complex_0 = 1701.71 - 45.014366j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3853():
    int_0 = 4622
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    str_0 = "hl#@r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    int_0 = -5363
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    int_0 = -642
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    float_0 = 1832.53
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    str_0 = "\t_1fs-LKHT7IkA>,}Ud"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    bytes_0 = b"\xa9\x9a}\xe1\x14Jk"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    int_0 = -1034
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    bytes_0 = b"\x8aW\xc7\xcf\xc9\xf1pB\xee\xb3r\xe93\xb4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3865():
    int_0 = 1928
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: int_0}
    tuple_1 = (dict_0,)
    module_0.get_new_command(tuple_1, int_0)


def test_case_3866():
    object_0 = module_1.object()


def test_case_3867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3868():
    int_0 = 1944
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3869():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3870():
    dict_0 = {}
    int_0 = 1970
    module_0.get_new_command(dict_0, int_0)


def test_case_3871():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3872():
    str_0 = "tq\x0b-h@@uZEUhN*l6"
    str_1 = "Q"
    str_2 = ' C:mV|"NPM+Tp9'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    int_0 = 1351
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    int_0 = 3033
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    str_0 = "xauCTw.\\qo6"
    int_0 = -620
    set_0 = {str_0, str_0, str_0, int_0}
    module_0.match(str_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    str_0 = "x\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    float_0 = -2061.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    bytes_0 = b""
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    int_0 = -1741
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    float_0 = -3744.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_3881():
    pass


def test_case_3882():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3883():
    str_0 = "t:\t#=_D\re,wg2."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, bool_0]
    list_1 = [set_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    bytes_0 = b"\xa7yZ\xe4\x1e\xc6>2\x84\xae\xeb!L"
    float_0 = 623.6
    str_0 = ">Ng*\n%g\rlSx!gt$"
    tuple_0 = (bytes_0, bytes_0, float_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    bytes_0 = b".`\x02y\xdf0\xceO"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    str_0 = "lZ\nd\\( +b*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    float_0 = 1085.49
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    bytes_0 = b"*dZ\x07s\xf5Q\xfd\xce\x97S\xc15g=%w\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    list_0 = []
    int_0 = -632
    tuple_0 = (list_0, int_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    int_0 = 725
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    bytes_0 = b"a\xeb\x82\x9b\x96\xae:"
    str_0 = "Rtl=$"
    list_0 = [bytes_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    int_0 = -4051
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    int_0 = 2430
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    none_type_0 = None
    float_0 = 796.75401
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    int_0 = -1513
    str_0 = ";^cR([w{xjY^"
    set_0 = {str_0, str_0, str_0, int_0}
    tuple_0 = (int_0, str_0, set_0)
    bytes_0 = b"\xa9P\xd1\x0b9\x87\x11\xc4\x7f\x98\x99 ct\x04"
    bool_0 = True
    tuple_1 = (set_0, bytes_0, bool_0)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3897():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3898():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    none_type_0 = None
    bytes_0 = b"dL\x96\xdd\xbb\x0eq\x99\x8a"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    bytes_0 = b"\xd3\\\x90^"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    complex_0 = -1527.69661 + 3132.4586j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    int_0 = 4091
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    bytes_0 = b'\x93i2\xdd\xad\xb9\x1c\x02\xe8\xfc\x98\xb2\xf0\xf8k"iU.N'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bytes_0 = b"E"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    tuple_0 = (list_0, list_0, bool_0, dict_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3906():
    int_0 = 2691
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3907():
    str_0 = "p:Pt\n\tGhfzfM7X9sSc"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    int_0 = -1181
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    float_0 = -5219.77365
    list_0 = [float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    bytes_0 = b"\xda52W\xbaG\xf5\xe3x\xf8\xe4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3911():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3912():
    str_0 = "'btdil,]\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    float_0 = 725.8141
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = -1641
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    int_0 = -1564
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    int_0 = -3852
    float_0 = 3885.5
    set_0 = {int_0, int_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    str_0 = "'g3y;+<kvJ\nZV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    str_0 = "goeixvdNyD\t2,]R:Nq"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    float_0 = -2267.834185
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    str_0 = "U qIfr"
    bytes_0 = b""
    list_0 = [str_0, str_0, bytes_0]
    tuple_0 = (str_0, bytes_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    float_0 = -2687.22987
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    float_0 = -3.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    int_0 = -4587
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    str_0 = "~$Ylm;;Qi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    int_0 = -1056
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    float_0 = 953.7237
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    str_0 = "5v(c\\A~UZL5EwL!~"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    int_0 = -625
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    float_0 = -693.536375
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    bytes_0 = b"\xe0\x89le\xf786\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    int_0 = 340
    list_0 = [int_0]
    list_1 = []
    module_0.get_new_command(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    str_0 = "0[R6]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    str_0 = "4b$IG]',QH"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    int_0 = -1182
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    int_0 = -1726
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    int_0 = 786
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    int_0 = -3319
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    str_0 = ">i"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    str_0 = "Tb9zri>uM\x0cd"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    str_0 = "KG)"
    bytes_0 = b"\x8c\xf6*\x855\x927\x11h"
    complex_0 = 4837.90654 + 1345.2497j
    bool_0 = False
    tuple_0 = (bytes_0, complex_0, bool_0)
    dict_0 = {
        str_0: tuple_0,
        complex_0: complex_0,
        complex_0: tuple_0,
        bytes_0: tuple_0,
    }
    tuple_1 = (str_0, tuple_0, dict_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    float_0 = 2188.046
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    none_type_0 = None
    bytes_0 = b"r"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    bytes_0 = b"\xbf\xce\xdc\xa5\x1e\xd5\x8e\x8e\x99\xf5)/"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    str_0 = "_y4mLFU6QsVxi"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    int_0 = 223
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    int_0 = -593
    list_0 = [int_0]
    tuple_0 = (int_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    complex_0 = 1580.5 - 4200.393j
    module_0.get_new_command(complex_0, complex_0)


def test_case_3952():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3953():
    str_0 = ""
    list_0 = [str_0]
    dict_0 = {str_0: list_0}
    list_1 = [dict_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    bytes_0 = b"\x86-x\xbb\x113\xdc\xedr"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


def test_case_3955():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3956():
    str_0 = "&4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3957():
    bytes_0 = b"rJ\x98\xc6\xd0"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3958():
    int_0 = 966
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    int_0 = -5457
    module_0.match(int_0, int_0)


def test_case_3960():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3961():
    bytes_0 = b"\xc6$\xdd\xd2\xd4\x15\x97\xff\x88w\xcf\xd5\xfa&\xe7\xb1\x1a6\x02A"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_3964():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3965():
    int_0 = 203
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    str_0 = "]+=^Y^Q_"
    str_1 = "J#rCkwt3wxo3"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    bool_0 = False
    int_0 = 746
    dict_0 = {bool_0: bool_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    int_0 = 1120
    tuple_0 = ()
    list_0 = [tuple_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    float_0 = 3922.87
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    bytes_0 = b"\xe2\xd5?\x13\x18-"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    bool_0 = True
    int_0 = -4546
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    int_0 = 2658
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    complex_0 = 3033.4 - 3085j
    str_0 = "`Z&\\E b"
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        str_0: str_0,
    }
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3975():
    bytes_0 = b"\x16\xa37d\xbb\xfc\x06\x11\xf9c\xe7\xfe\x84S\x16\xa0\xf6\xae"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3976():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = 839
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    int_0 = 348
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    float_0 = -542.0366
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    str_0 = "zT#$-_&q!>5WPG"
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (str_0, bool_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_3981():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3982():
    float_0 = 30.3476
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    bytes_0 = b"\x888\xff\x92\xa9w\x94\xd7\xff\xb16H\xf1\x85'4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    bool_0 = False
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    int_0 = -2452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    int_0 = -3020
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    int_0 = -4748
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    int_0 = 1659
    object_0 = module_1.object()
    dict_0 = {int_0: object_0, int_0: int_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    int_0 = -1000
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    str_0 = "q~\x0c32-%,#"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    float_0 = 1907.25
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    bytes_0 = b"M@v\x91s\x8ec)\xddT\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    str_0 = ""
    bool_0 = False
    bool_1 = True
    tuple_0 = (str_0, bool_0, bool_0, bool_1)
    set_0 = {tuple_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    bytes_0 = b"\xd5\x193\x82&m\xe5\xe0"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    bytes_0 = b"\xc2\xbbQ\x02\x10%\xd0R7\xa7\xa7\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    bytes_0 = b"GE\x9fOQ\t\xe0,\x1e,G{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    int_0 = -1100
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4003():
    bytes_0 = b"\xacQ7\x85\x1e\x14\x94\xa1\xea\xae}vS\xe2)\x0e\x18qX\x0b"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4004():
    str_0 = 'k_*v]6h#o~L\\Lf_">'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    bytes_0 = b"\xd3\x8e\x0e\xe99\xbe\x970\x98\x17\x1c\xa5$<x[c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    int_0 = -771
    bytes_0 = b"\x97*\x9a\x9c#za0b\xc5\xc9"
    tuple_0 = (int_0, int_0, bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    bytes_0 = b"\r\xaaUy&0\xae\xab^"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    float_0 = -3662.4554
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    int_0 = 3533
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    str_0 = "+)b\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4011():
    float_0 = 13.416
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4012():
    bool_0 = False
    complex_0 = -212.806955 + 2952.6951j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    str_0 = "Hv>*\n\t!nZ\x0cvcdd>"
    float_0 = -142.2885
    dict_0 = {}
    tuple_0 = (str_0, float_0, float_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    int_0 = 1220
    int_1 = 446
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    int_0 = 1364
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    complex_0 = -2958.8 - 1953.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    int_0 = -101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    bytes_0 = b"\xb71\x91C"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    bytes_0 = b"B\x1b\xbb\xc9\xe9\xd4\xe3"
    str_0 = "EiO8L4v- X-"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, bool_0: tuple_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    str_0 = "%zb9g >aQeh\x0b<"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


def test_case_4024():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4025():
    float_0 = 1568.0
    list_0 = []
    tuple_0 = (float_0, list_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    int_0 = -1236
    module_0.get_new_command(int_0, int_0)


def test_case_4027():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4028():
    set_0 = set()
    bool_0 = False
    module_0.match(set_0, bool_0)


def test_case_4029():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4030():
    str_0 = "+n`Ul@ng2552Zu&?>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    complex_0 = -1119 - 111.1011j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    int_0 = 688
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    int_0 = -640
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    str_0 = "O=={1"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    int_0 = 2701
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    complex_0 = 2062.77371 + 1104.9796j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    complex_0 = 895.769026 + 3755.3j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    bytes_0 = b"Um\x88\x90f\xeb\x17L\xbf;!w\xaf\xe2\xb2E"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bytes_0 = b"T\x9bN1MOi"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4042():
    str_0 = "w"
    none_type_0 = None
    str_1 = "AvU}GKNG;3c5"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    float_0 = -488.0076
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    float_0 = -115.241
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    str_0 = '3J.`q"y|y*\r\tiL}'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    int_0 = 2038
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4048():
    bytes_0 = b"[\xf8g\xf4\x13er"
    set_0 = {bytes_0, bytes_0, bytes_0}
    list_0 = [set_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4049():
    bool_0 = False
    str_0 = "4]s?7E6%"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4050():
    bytes_0 = b"bfS\xcez\x90"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    float_0 = -164.85204
    set_0 = {float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


def test_case_4053():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4054():
    str_0 = "J!~~Vh9~O`2GI-?"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    str_0 = "s2Kf^~ ;\x0ck\x0bmERZNu"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    bytes_0 = b"e\xf2\x8b"
    int_0 = -317
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    str_0 = "?\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    bytes_0 = b"(\x0e\x88>\x93o\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    float_0 = -1008.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    bytes_0 = b"Xd\xf9\x86\xac\xe7k\xe1\xc9\x19"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    int_0 = 1658
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4062():
    bytes_0 = b"*|\xd3?%\x8fF\xcf\x1a8\x91<\xed\x19\x01}\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4063():
    str_0 = "5<kgZm)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    bytes_0 = b"\x16\xc2\x12\\h\x04\xc3U\xe51\xe9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4067():
    bool_0 = True
    bytes_0 = b"\x1e$ \x93\xe0\xb2/"
    set_0 = {bool_0, bytes_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4068():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    int_0 = 2965
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    bytes_0 = b"?\xbc\xb6\xbf@\xf9\x8exE\xbf\xac\xe4\xd9\xf5`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4072():
    int_0 = 3023
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4073():
    float_0 = 820.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bytes_0 = b"\x82\xc2\x14\xfaV!\xcb\xed\x82\xf4\xac\xf0&"
    list_0 = [bytes_0, bytes_0]
    float_0 = 130.0
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    int_0 = 156
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    int_0 = 3321
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    bytes_0 = b"|"
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    int_0 = 3071
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    str_0 = "=R 'xXk8PEJu(i|+w"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    int_0 = 3869
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    bool_0 = False
    str_0 = "6z4d"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    str_0 = "1F:"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    float_0 = 2603.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4084():
    none_type_0 = None
    str_0 = "_oSdYgF7#"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4085():
    float_0 = -2027.79038
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    list_0 = [float_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    float_0 = -1483.2938
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    float_0 = 740.1
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    str_0 = "}"
    int_0 = -616
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    str_0 = "n-`qC9PJx>56>nE&jQqx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    dict_1 = {bool_0: dict_0}
    module_0.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    str_0 = ";tg%(]6:R)e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    float_0 = 2450.328709
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


def test_case_4094():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4095():
    bytes_0 = b"f\xef\x85\x16\x08"
    str_0 = "k[74g16DdZ?+0<\\aQ"
    list_0 = [bytes_0, str_0, bytes_0, bytes_0]
    bool_0 = True
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    float_0 = -2835.450706
    module_0.match(float_0, float_0)


def test_case_4097():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4098():
    str_0 = "sNO#G \r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    int_0 = -1167
    module_0.get_new_command(int_0, int_0)


def test_case_4100():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4101():
    str_0 = "wGa^9{K)\x0bLA"
    str_1 = "\t0aL(Irmx"
    str_2 = "}@O)t!fQ{hqNU581"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    bytes_0 = b"5\xe8<#\x13\x9d~\xd3g\xe6\xa6tu\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, bool_1, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    int_0 = -3667
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    str_0 = "V/3.MaM3]s*e"
    bool_0 = False
    int_0 = -2546
    dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: bool_0, bool_0: int_0}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = "-!&!j?B:Ml%66AJP4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    str_0 = "Td(f,_Xq"
    module_0.match(str_0, str_0)


def test_case_4109():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4110():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    str_0 = ':yego^`AI\nz!K"}-{20X'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    str_0 = "XHS!.<qt) y(lno^M"
    module_1.object(*str_0)


def test_case_4113():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4114():
    float_0 = -6034.487
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    int_0 = -3214
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    str_0 = "J,\ra\rQh#^-#&0F\x0cq6\\DU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4117():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bytes_0 = b"\xf0\xaf\xe0\xfcy!>8\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    int_0 = 2862
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4122():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4123():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (object_0, bool_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, tuple_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    str_0 = "\rv&;Xb#+Z\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    float_0 = -2332.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4127():
    str_0 = "25w$\r\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4128():
    str_0 = "o(e.< b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    bool_0 = False
    str_0 = "%\x0cMpJ"
    tuple_0 = (bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    bytes_0 = b"\xfa\x06\x9d*\xd1\x13siS0a\xe0\xa9\x84\xde\x9ct"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    float_0 = -465.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    object_0 = module_1.object()
    list_0 = [object_0]
    list_1 = [list_0]
    module_0.match(list_1, object_0)


def test_case_4133():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4134():
    str_0 = "\x0b9'.j0NP<BCp@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    int_0 = -2441
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    str_0 = "aXI6K^ i-^_']fjFed$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    int_0 = -2033
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4138():
    float_0 = 3589.208638
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4139():
    str_0 = "U?J"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    str_0 = 'spEz!Nz0->kRk%p-"c'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    int_0 = -1293
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    int_0 = 1578
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    none_type_0 = None
    str_0 = "w%SV}|\\{G6Q3\r>*Api"
    dict_0 = {str_0: none_type_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    int_0 = -1210
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    int_0 = 2258
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    str_0 = '".5\'\rWGS3]ZU"#RLq'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4147():
    str_0 = "*W5[Gf}vwGK6v3x??sSS"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4148():
    str_0 = "o+}i\n@].l\nQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    int_0 = 2036
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    complex_0 = 1792.2 + 5465.2j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    int_0 = 367
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    str_0 = ")R&v-\nPc<D<|Af*:"
    set_0 = {str_0, str_0, str_0, str_0}
    str_1 = "$.}?ha;\rqL]5<)*\x0cER"
    dict_0 = {str_0: set_0, str_1: str_0, str_1: set_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    int_0 = 2578
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    int_0 = -3139
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    int_0 = -349
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    str_0 = "'G&+{~K"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    bytes_0 = b"m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    str_0 = "U\r>,(]'ii\n/"
    module_0.get_new_command(str_0, str_0)


def test_case_4162():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4163():
    str_0 = ""
    bool_0 = False
    int_0 = 618
    dict_0 = {str_0: str_0, str_0: str_0, bool_0: str_0, int_0: str_0}
    list_0 = [dict_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    float_0 = -90.0
    list_0 = [float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    none_type_0 = None
    complex_0 = 1636.23259 - 1525j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    float_0 = -3474.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    bytes_0 = b"\xaa\x0b\x9fL\x15\xc2\xf9N:\xf0\xd2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_4169():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4170():
    int_0 = 1612
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    tuple_0 = ()
    complex_0 = -1302 - 1883j
    tuple_1 = (tuple_0, complex_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    float_0 = 530.58
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    bool_0 = False
    float_0 = -1437.0903
    str_0 = "(Y!m\rD!:\x0cL\r.KE!*G%~"
    tuple_0 = (str_0,)
    tuple_1 = (bool_0, bool_0, float_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4174():
    bytes_0 = b"\n\xef,c\xffN\xc3Wm[\xc8\xa0\xc3\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4175():
    int_0 = 472
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    str_0 = "vms%/\x0bD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    int_0 = 2107
    bytes_0 = b"\x06\xcd\x8d\xaf\r\xdd\xed\x05%\rx"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    complex_0 = -313.1657 + 2742.5994j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    str_0 = "c#pl"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    int_0 = 2811
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [int_0, set_0, set_0]
    tuple_0 = ()
    tuple_1 = (list_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    str_0 = "@;\n-8cMx\r<DW"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    int_0 = -441
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    int_0 = -2193
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    str_0 = "F6{-_4o(lk\x0bH+"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    float_0 = -2958.01682
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4186():
    float_0 = -4161.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4187():
    float_0 = -1453.64594
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = 3934
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    int_0 = -4861
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    bytes_0 = b"\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4192():
    str_0 = "VWYaT(j3pWZ|.z\x0b.aE>>"
    bytes_0 = b"\x07\xf5a\xde\x9a\x8d7\x91H\xa8\x99"
    object_0 = module_1.object()
    dict_0 = {str_0: str_0, str_0: bytes_0, bytes_0: str_0, str_0: object_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4193():
    int_0 = 1146
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    bytes_0 = b"\x15\xcf@\x8e\x94~[f\xf1:<\xd1/\x9c\x00\x11\xfbN\xd9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    none_type_0 = None
    complex_0 = -585 + 1892.2j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    int_0 = 2519
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    int_0 = -3199
    str_0 = "i5\t#\x0cN-OF+"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    int_0 = -687
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    int_0 = 3339
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    bytes_0 = b"LH p\x81\xf4\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    bytes_0 = b"\xa3\xcc\xcf\xfdO\xd0,(\x0c\xe92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    bytes_0 = b"\xca\x7fY\x80"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    complex_0 = -2492.942998 - 2329.44j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    bytes_0 = b"mp\x8cJ~\xbb@\xa6\xfe\xeb\x84"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    int_0 = 1084
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    float_0 = 1121.311577
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    complex_0 = -661 - 4376j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4208():
    bytes_0 = b"(\x190\xc9\xca"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4209():
    float_0 = 1051.11
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    str_0 = "Y*Ns\x0c0QGJW9)"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    int_0 = 1538
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    bytes_0 = b"#3\x16m\xacB\x1b\x83\x18\xae\x93"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    str_0 = ")mCu\\^AKe#o"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0, bool_0, bool_0}
    bool_1 = False
    tuple_1 = (tuple_0, set_0, bool_1)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    bool_0 = True
    int_0 = 280
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    complex_0 = -1269.6 - 3069.1875j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    str_0 = ",:w2kI\\"
    list_0 = [str_0]
    module_1.object(*list_0)


def test_case_4219():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4220():
    int_0 = 989
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4221():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4222():
    str_0 = "_K(WQ}z}h"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4223():
    float_0 = -1576.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    str_0 = '7Gs93"gb@y"G\rn#p'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    int_0 = -271
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    float_0 = 2517.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    bytes_0 = b"<R\xb0\r\x1d<"
    dict_0 = {}
    list_0 = [dict_0]
    str_0 = "-bRb}\tZ"
    bool_0 = True
    tuple_0 = (list_0, str_0, bool_0)
    tuple_1 = (bytes_0, dict_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


def test_case_4228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4229():
    str_0 = "xM:Tmu0!9r"
    list_0 = [str_0, str_0, str_0]
    list_1 = [str_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    int_0 = -2425
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    int_0 = 705
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    int_0 = 11
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4235():
    bytes_0 = b"\\\x8a\x8ag\x99\xd3\x03}\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4236():
    float_0 = -449.239
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    bool_0 = True
    float_0 = -1244.912
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    float_0 = -366.15938
    module_0.get_new_command(float_0, float_0)


def test_case_4239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4240():
    int_0 = 1408
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4241():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


def test_case_4242():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4243():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    str_0 = "NDp,Bz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    bytes_0 = b"\xc2Vb\xb8~"
    float_0 = 1253.43278
    set_0 = {bytes_0, bytes_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    str_0 = "5?;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    int_0 = -1959
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    str_0 = "|7C%\rRG3IX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    float_0 = -500.55377
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    int_0 = -277
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    str_0 = "bj\x0c&j5tT6wC-u"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    object_0 = module_1.object()
    bool_0 = True
    str_0 = "RU( tWF/0)}R5[S9"
    tuple_0 = (object_0, bool_0, bool_0, str_0)
    list_0 = [tuple_0]
    bool_1 = False
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    str_0 = "\x0cn{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = '8dRQ<N"<F+^'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    int_0 = -3564
    str_0 = "0s'(39%"
    tuple_0 = (int_0, str_0, str_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    str_0 = "7_S#\n1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bytes_0 = b"\xde\xea\xcd\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    set_0 = set()
    bytes_0 = b"\xf2Ns\t(\xe7\xc0\x0e\x93\x8b;\xd2m\x0f\xa4\xf3q\xdf\x1f"
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    str_0 = "`yCe7v)S8s\t\n|zg\\"
    bool_0 = True
    tuple_0 = (str_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    str_0 = "q;q>~K]yws,E+Z{"
    complex_0 = -1074.0202 - 91.63j
    tuple_0 = (str_0, complex_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    complex_0 = 37.2 - 52.36j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    int_0 = -237
    int_1 = -2036
    bytes_0 = b">\xe5B\xae\x8c\xb7\xc8|\xear"
    bool_0 = True
    tuple_0 = (int_0, int_1, bytes_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    int_0 = 981
    tuple_0 = (int_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    complex_0 = -972.1 + 3516.24j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4269():
    int_0 = -3447
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    int_0 = -1215
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    complex_0 = 2175 - 1200.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    bytes_0 = b"\x13"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    float_0 = 157.672214
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    bool_0 = True
    str_0 = "S@"
    str_1 = "SV^"
    tuple_0 = (bool_0, str_0, str_1)
    tuple_1 = (tuple_0, bool_0)
    bool_1 = True
    list_0 = [tuple_1, bool_1]
    str_2 = "]}2"
    tuple_2 = (list_0, str_2, bool_0, tuple_0)
    module_0.get_new_command(tuple_2, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    str_0 = ":5^F"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    bytes_0 = b"\xd7\xc7c\x93\xc9eL\xca\xf0\x08\x1e"
    module_0.match(bytes_0, bytes_0)


def test_case_4277():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4278():
    bytes_0 = b"\xf7}\xa4\xf4\x04\x01[\x94\xc6l\n\x1dU\xff\xd8\xbb\x13\x84="
    int_0 = 92
    int_1 = 885
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0, int_1: int_0}
    tuple_0 = (bytes_0, dict_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    str_0 = "Y<me)xED\n"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    bool_0 = False
    str_0 = "A]"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    str_0 = "E[D,,T?{*\rb#D"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    str_0 = "<\n78WM1,8,7tD6a5Z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    str_0 = "t]@oA5"
    int_0 = 1065
    tuple_0 = (int_0,)
    tuple_1 = (str_0, tuple_0, int_0)
    bytes_0 = b"9\x13\xb7\xf9\xa0\xfb,\xecHN\xf6\xc3\xe2"
    tuple_2 = (tuple_1, int_0, bytes_0)
    module_0.get_new_command(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    none_type_0 = None
    str_0 = "ue\n\x0c2v],M=\x0bm"
    str_1 = ":b"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


def test_case_4285():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4286():
    float_0 = -3344.460051
    bytes_0 = b"c\t-q"
    set_0 = {float_0, bytes_0, bytes_0, bytes_0}
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    complex_0 = 225.77 + 2215.08145j
    tuple_0 = (complex_0,)
    bytes_0 = b"Y}\xf6}\xb9\xe8\xf4\x98*\x06gZUZ\x01\x8e\xdf^\xd0\xbc"
    list_0 = [tuple_0, tuple_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0, bool_0, bool_0, tuple_0}
    int_0 = 12
    tuple_1 = (set_0, int_0, set_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    bool_0 = False
    bool_1 = False
    dict_0 = {}
    tuple_0 = (bool_0, bool_1, dict_0)
    dict_1 = {bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0, bool_1: bool_0}
    module_0.get_new_command(dict_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    int_0 = 2099
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4294():
    int_0 = 3435
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4295():
    str_0 = "U0YJ *[f'WRs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    str_0 = "\x0bu\rR1c"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4297():
    str_0 = "y[{cH,1Rn"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4298():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    bool_0 = True
    bytes_0 = b"\xa4\xf3\x12\x81\xbd?\xc2\x7f"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    int_0 = 1257
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    float_0 = -1057.358963
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bytes_0 = b"\xb7\x1a\xc9W@)\xcd\xcf\x10\xe5$\xbe\x0c\x00_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    int_0 = 992
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    float_0 = 243.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    bytes_0 = b"R \x05J\xe0"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4306():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4307():
    float_0 = -3017.01946
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    str_0 = "im^\tw^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    int_0 = -2147
    float_0 = -4150.2273
    bool_0 = True
    str_0 = "Ue"
    tuple_0 = (int_0, float_0, bool_0, str_0)
    bytes_0 = b"h"
    tuple_1 = (tuple_0, bytes_0, tuple_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    int_0 = -1062
    int_1 = 661
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    int_0 = 459
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4314():
    float_0 = -4727.0
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4315():
    int_0 = 12
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    bytes_0 = b"\r\x99\x87."
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    str_0 = "\x0b;DFc\rE|rg\rV;{\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    bytes_0 = b"\xc6"
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, list_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    bytes_0 = b"\xd9\xd6\x00]9g\xa9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    str_0 = "`'b]l8C'cea?,Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    bytes_0 = b"L\x9b\xa6\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    str_0 = "r"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    bytes_0 = b"\x1f\xe0@\x1c\xcc\x8bv\xe7\n\nl4\xc8\xf3t\xa1\x96"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    bytes_0 = b"\xd6b\x94\x9dJk"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    str_0 = "oI)#"
    tuple_0 = (str_0,)
    bytes_0 = b"\x1a\xdd\x9d\xf5A"
    dict_0 = {bytes_0: str_0, tuple_0: bytes_0}
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    complex_0 = 1042.1 - 355j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    int_0 = -965
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    bytes_0 = b"\x9b\th\x16\x8c\xfe+d\xbc\x15\x16\xf0\x83\xf6\xf9\xe6}N"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    int_0 = 2557
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    int_0 = -3755
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    complex_0 = -781.1 - 334j
    set_0 = {complex_0}
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    str_0 = "f\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    str_0 = "q+"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    str_0 = "m`b"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    str_0 = ""
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    bytes_0 = b"\x1c\xb0\x01\xbe^\x1f\x06[\xed\xdb\x8b\x84E"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4339():
    int_0 = 2703
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4340():
    float_0 = -799.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    set_0 = set()
    bytes_0 = b"[)"
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    int_0 = 1909
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    int_0 = -1292
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    bytes_0 = b"\xa5Y\x01\xea\xccW\x86X\x14.\xac\xc8\xa0@"
    int_0 = -863
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    bytes_0 = b"\xa8\xe5\x07\x7fZ"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


def test_case_4347():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4348():
    str_0 = "{SK+iL=^;?wAjcVjY"
    module_0.get_new_command(str_0, str_0)


def test_case_4349():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4350():
    bytes_0 = b"5\xd1.\x0c\xb9g\xf4u[\xa5sg\x0f@\xaf'"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    dict_0 = {}
    bytes_0 = b":\xa6\xad\xef\xc5"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    float_0 = 558.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    str_0 = "Y)V2m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    int_0 = 357
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4355():
    str_0 = "vyPGK"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, str_0)


def test_case_4356():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4357():
    int_0 = 1771
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4358():
    bytes_0 = b"\xa0\xees\xd2\xd8Q\xae\xf0\xee\xa3D\xb7Z\x1c"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    str_0 = "OIE#2I*u\x0c_H~y+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    str_0 = '30c"tDJ|6G.\r\n]n>;\\'
    module_0.get_new_command(str_0, str_0)


def test_case_4361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4362():
    str_0 = "C[.7g9i%O"
    module_0.match(str_0, str_0)


def test_case_4363():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4364():
    bytes_0 = b"\xbd8\xf3\x17"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    float_0 = 3443.4164
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    int_0 = -2884
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    none_type_0 = None
    float_0 = 812.8212
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    float_0 = 1351.0
    list_0 = [float_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    list_0 = []
    int_0 = -1001
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    bytes_0 = b"\xa1"
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4371():
    int_0 = 3495
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4372():
    float_0 = -4194.3
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    float_0 = 2869.82764
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    str_0 = "&8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    float_0 = -1692.9
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    bytes_0 = b'$\xcc\x88R\xd6\xc8\x0e\xdb"\x80\xae\xca'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    bytes_0 = b"\xf8\xe7\x90Rl\xbb\xb2\x89t\xeaZ\x85\xc4F\x1b\xc3\xec\x81\x013"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = ()
    set_0 = {bytes_0}
    tuple_1 = (list_0, tuple_0, set_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    bytes_0 = b"\xfb\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    float_0 = -2146.0
    float_1 = -2470.45
    dict_0 = {float_0: float_0, float_1: float_1, float_0: float_1}
    module_0.get_new_command(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    float_0 = -2101.67
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    complex_0 = 3112.04802 + 291j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    int_0 = 2523
    bool_0 = False
    dict_0 = {int_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    float_0 = 1618.317
    str_0 = "&\rJ"
    dict_0 = {float_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    complex_0 = -1082.3 - 486j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    str_0 = '1B"AP(N#'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    int_0 = 681
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    float_0 = -175.1708
    module_0.get_new_command(float_0, float_0)


def test_case_4389():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4390():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    set_0 = set()
    tuple_0 = (dict_0, set_0, set_0, dict_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    bytes_0 = b"\x1c\x06Slg&\xa6\x0c\xe4\x83}\xeay-\xbc\xe6\x0e!t\xf7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    bytes_0 = b" *\x02\xa2~\xef\xc4\x1c\xe6\x8fV\xaeM"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    float_0 = 1587.3501
    set_0 = {float_0, float_0, float_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    int_0 = -756
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    int_0 = -1621
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    int_0 = 2106
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    bytes_0 = b'\xc2\xe6a\x0f\x1ec\x9f\x93H\xd2\x7fc\xb7"'
    list_0 = [bytes_0]
    str_0 = "4"
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    float_0 = 315.7339
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    str_0 = "[d9+\\\x0cE+[ MW)Tw_m"
    bytes_0 = b"\xb87\xa2L\x85\x83Z\x90o9\x06\xc2\x1d"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    bytes_0 = b"\xb0\xc0>\x01\xe1\x04\x93\x8c\x91\x94VO\xfc\x88\xd9W\xbc-\x15"
    set_0 = {bytes_0, bytes_0, bytes_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


def test_case_4401():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4402():
    int_0 = 677
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    bytes_0 = b"`>"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    bytes_0 = b"\x91D\xb62\x98 \xcd\x8b\xe2\x99\xe8|\xfe\x01p\xda"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4405():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4406():
    none_type_0 = None
    complex_0 = 956.595 + 968.26j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    int_0 = 1250
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    int_0 = 390
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    bytes_0 = b"\xdf`\xc3\xcd+"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    bytes_0 = b"B\x90{\xe0&o;\xf2["
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    int_0 = 1309
    set_0 = {int_0, int_0, int_0, int_0}
    str_0 = "}\ng~q2LFI"
    tuple_0 = (int_0, set_0, str_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    bytes_0 = b"\xdc\xa4\xb7\xfbde\xe9c\xf3\xe9Bj\xb6"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    bytes_0 = b"\x89\xcf8LD\xe8\x00\xd2"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    str_0 = "1)uE:4H7/D"
    bytes_0 = b"\xbf\x95\xe9\xc05\x18NM"
    tuple_0 = (str_0, str_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    str_0 = "N=P8s-}xF8"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    int_0 = 2426
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    str_0 = "V@(J(^vXK{BpML{Wz,[8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    bytes_0 = b"m(\xec?9\xd1\x07\xfa\x06*W\x92i\xc6*"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, dict_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    int_0 = 3452
    module_0.match(int_0, int_0)


def test_case_4422():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4423():
    int_0 = 200
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    set_0 = set()
    bool_0 = False
    list_0 = [set_0, bool_0, bool_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    str_0 = "\n=wF?\x0cp$N9tN0<b\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    str_0 = "r\\A$B\rG;hC\x0ca:v,3CD"
    module_0.get_new_command(str_0, str_0)


def test_case_4427():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4428():
    complex_0 = 2789.5 + 4511j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0, complex_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    float_0 = 1552.0228
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    bytes_0 = b"\x87\xb9\xaa\xfdI\x1e\x9e\x18\x15d\xfc\x1e,A\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    bytes_0 = b"g\x19T\x88\x84\xf1\x80\xa3\xec\xfd#[kU\x0e\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    bytes_0 = b"\x9aq\x81\xe9"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    str_0 = "\\f5/`]3:LRE7\n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    bytes_0 = b"\x13\xa84a\x1f\xee}\xd3\xe8\xa4\xd0r\x88\xafJ\x1b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    int_0 = 1833
    tuple_0 = (int_0, int_0)
    list_0 = [tuple_0, tuple_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    str_0 = "HZl]LF\n]n+D$i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    str_0 = '#t"X\\xNE~*'
    module_0.get_new_command(str_0, str_0)


def test_case_4438():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bytes_0 = b"yG"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    complex_0 = -2589.6 - 932.8j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    int_0 = -1185
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    str_0 = "t#g*4:eYMkfYaLs="
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    str_0 = "A"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    str_0 = "Wz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4445():
    bytes_0 = b")g\xb8\xca"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4446():
    str_0 = "R^L"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    str_0 = "YGqY\n3i"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


def test_case_4448():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4449():
    int_0 = 6
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    str_0 = "36w\\CeP~o(w%WJj~Qp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    bytes_0 = b"5\xde\xa9\xb7'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    int_0 = -1763
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    int_0 = -191
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    tuple_0 = ()
    set_0 = {tuple_0}
    tuple_1 = (set_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    str_0 = "yMcl"
    str_1 = "@G#1.F1E"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


def test_case_4458():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4459():
    str_0 = "1"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    float_0 = 916.256
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    int_0 = -307
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    str_0 = "$^ymJCT1"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    bytes_0 = b"\xc5\x8aU\xeb5H\x13#k\x04\x04\xb4\x0f\xb6\xac\xce\xe3\x8e\xc7\x16"
    str_0 = "q "
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: tuple_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    str_0 = ')-*1^hZ&XAB"]'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    bytes_0 = b"\xec\xb1o\xd4?\xc5\xab\xc7\r>\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    bytes_0 = b"\x0f\x02\xd2\x95\xd5\xf8\xeb\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    float_0 = -342.9965
    module_0.get_new_command(float_0, float_0)


def test_case_4469():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4470():
    complex_0 = -136.4 - 295.3j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(complex_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4471():
    bytes_0 = b"\x0f\xfe\x87\xf2\x1fY\x0c"
    str_0 = "J!Q8\x0c%e3Y?N*D7"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4472():
    bytes_0 = b"d\xcd\xeb\x17\xa2T\x072\x18_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4473():
    str_0 = "TB\x0b`jl9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    object_0 = module_1.object()
    bool_0 = False
    set_0 = {object_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    int_0 = 1511
    set_0 = {int_0, int_0, int_0}
    list_0 = [int_0, int_0, set_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    int_0 = 1000
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    bytes_0 = b"h\xc7\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    str_0 = "MT?DBlbqCBhYS2AX"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    str_0 = "vzG>H&V"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    int_0 = 1916
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bytes_0 = b"W\x92\x04\xcc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    bytes_0 = b"?\xfa\x1f\xf8C\xbb\xef"
    bool_0 = True
    bytes_1 = b"\xf2\xf9\x0c\xc1>%\xd6\xe5\xeb\xc3\xc8"
    tuple_0 = (bytes_0, bool_0, bool_0, bytes_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    int_0 = 3282
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    float_0 = 2769.9
    list_0 = [float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bytes_0 = b"\xbc\x98"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


def test_case_4487():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4488():
    int_0 = 1043
    module_0.get_new_command(int_0, int_0)


def test_case_4489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4490():
    bytes_0 = b"\xf3\xb5<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    str_0 = "w=CfC,jO"
    module_0.match(str_0, str_0)


def test_case_4492():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4493():
    float_0 = -1298.61728
    int_0 = 139
    list_0 = [float_0, int_0, float_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    int_0 = -484
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    bytes_0 = b"\xbb~Om\xdaP|:T`\xc0\xf6\xbf\x8e\x06\xd31"
    list_0 = [bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    bytes_0 = b"\xeci\t\x17"
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(bytes_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    int_0 = 2440
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4498():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4499():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4500():
    str_0 = "iecg#)pn1HWwp=+._"
    float_0 = -1454.9
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4501():
    int_0 = 936
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.match(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    str_0 = "gp)gX*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    str_0 = "1x"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    float_0 = 2004.2438
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    complex_0 = 169.4 + 2000.9563j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    float_0 = -2600.91
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    int_0 = -1493
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    float_0 = 4915.71
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    complex_0 = 1625.7 - 136.311j
    module_0.match(complex_0, complex_0)


def test_case_4512():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4513():
    int_0 = 1585
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    complex_0 = 127.6 - 2700.75776j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    bytes_0 = b"\xd8\xce\xae\xed__:\xdb\x0c\xca`\x0b'@\x81\x02P\xf5\x08r"
    dict_0 = {}
    tuple_0 = (bytes_0, dict_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    str_0 = "<!Q#.og-m4phMJad"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    str_0 = "kd<xTTNwu,'_l"
    module_0.get_new_command(str_0, str_0)


def test_case_4519():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4520():
    bytes_0 = b"\xd4\x98"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    bool_0 = False
    set_0 = {bool_0}
    dict_0 = {bool_0: set_0}
    tuple_0 = (set_0, dict_0, set_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    int_0 = -2458
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    int_0 = 613
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    int_0 = -2264
    float_0 = 292.96931
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    str_0 = "q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    str_0 = "v ASk&L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    bytes_0 = b"r\xde\xea=_\x9b"
    int_0 = -815
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    str_0 = "uY{psU[\\|ObO4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    str_0 = "6 j81NA3Vf,\\#0x17Q|/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4533():
    bytes_0 = b"(\x99\x15\x7f\x8ey\xfdt\xa9Gk\r\x8d\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4534():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4535():
    complex_0 = 665.36166 + 2214.32723j
    str_0 = " Z'W!!\r:5q,2)=\"xQ"
    bytes_0 = b"B\x00:\xf8\x8f\xafA\xf9P\xca\x83&p\x7f\x1f-Z"
    tuple_0 = (complex_0, str_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    dict_0 = {}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    str_0 = "DmgeEjZ&+y"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    float_0 = 636.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    str_0 = "~fd\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    bytes_0 = b"\xf6n\x0c`\xb2\xe1\xea)\xa8\xe8\x90\x00\xee\xe2m\x84\xd5)\xff"
    str_0 = ":t"
    dict_0 = {str_0: str_0, str_0: bytes_0, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4544():
    float_0 = -1681.2
    bool_0 = True
    dict_0 = {float_0: bool_0, bool_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4545():
    tuple_0 = ()
    bool_0 = False
    dict_0 = {tuple_0: tuple_0, bool_0: tuple_0, tuple_0: tuple_0, bool_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4546():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    float_0 = -421.4
    tuple_0 = ()
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    float_0 = -1268.31156
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    int_0 = -801
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    bytes_0 = b"i\x9f=,\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    float_0 = 1974.416377
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    int_0 = 3612
    tuple_1 = (list_0, int_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    list_0 = []
    str_0 = "tBGllI^\x0b%|py~\nL?$"
    dict_0 = {str_0: list_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1}
    bool_2 = False
    module_0.match(set_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    str_0 = "ySu#oiO~S23B\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    bytes_0 = b'\xa2\x81KH\xc0\x98"\x97\xc9\x01th\x90r'
    float_0 = -1055.4126
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4559():
    bytes_0 = b""
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    set_0 = {tuple_0, bool_0, bool_0, tuple_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4560():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    int_0 = 1905
    list_0 = [set_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    complex_0 = -1556 + 328.9562j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_4562():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4563():
    complex_0 = -975.149404 + 1933.352075j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4564():
    complex_0 = -64.1502 + 185.840808j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4565():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    object_0 = module_1.object()
    int_0 = 306
    set_0 = {object_0, object_0, int_0, int_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    float_0 = -2311.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    str_0 = "q:s.D\x0b^7v.]lw%"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    str_0 = "jJ@UfBO=OxkgnKaX_+,"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    float_0 = -1203.87576
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    complex_0 = -1240.3811 - 815.132442j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4573():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4574():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    list_0 = [bool_0, dict_0, bool_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    bytes_0 = b"\x81h"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    float_0 = -756.0
    module_0.match(float_0, float_0)


def test_case_4577():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4578():
    int_0 = 784
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    bytes_0 = b"\x1e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    str_0 = "`48+N!WFp"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    bool_0 = True
    bytes_0 = b"\x9f\x19\xc6-\xb1@8\x94\xd9y\xb8"
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    bool_0 = True
    str_0 = ">"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    float_0 = 1771.20455
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4585():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4586():
    bool_0 = True
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    str_0 = "t@Z:B~d{;IpRF.Ky][<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4588():
    float_0 = 602.44482
    bool_0 = True
    tuple_0 = ()
    list_0 = [bool_0, float_0]
    tuple_1 = (float_0, bool_0, tuple_0, list_0)
    str_0 = ""
    tuple_2 = (tuple_1, str_0)
    module_0.match(tuple_2, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4589():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    float_0 = -873.581
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    int_0 = -3105
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    int_0 = -4607
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    bytes_0 = b"\x9f%\t\xcdR\x13\xd5.\x0c\x03\x0b\xc9\x16\xea\xa8j\xf6"
    str_0 = "vxdnLJ\x0cvf"
    list_0 = [bytes_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    int_0 = 2172
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    str_0 = '";~\x0b+\r,-&={m>_\x0cD'
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    bytes_0 = b"cM^\xe0\xa6\x923\xdfo\x96=L\x18>\xc8\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    int_0 = 2077
    module_0.get_new_command(int_0, int_0)


def test_case_4598():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4599():
    none_type_0 = None
    bytes_0 = b"z\xbc"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bool_0 = True
    str_0 = "A:cA+"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    float_0 = 1530.659
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    bytes_0 = b"X}\x16\xf2g\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    bytes_0 = b"\xdc\xcd\xd2Q\xe4\xf2\xf84a$\x8a"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    int_0 = 843
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    str_0 = "ELc31<$Nr|B\\$Q$!j"
    tuple_0 = ()
    list_0 = [str_0, dict_0]
    tuple_1 = (dict_0, str_0, tuple_0, list_0)
    bytes_0 = b""
    list_1 = [tuple_1, bytes_0, tuple_1]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    str_0 = "\r8:!k-?LM>T(%AaNm"
    module_0.get_new_command(str_0, str_0)


def test_case_4608():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4609():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [bool_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    bytes_0 = b"\xb9\xa4Z\xbd\xd9x\xb8y\x16\xd4]\x003\xb3V7\xaf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    str_0 = "\x0bv`FdwE\\u\r=eH$\x0b@l<X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    str_0 = "<w,"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    bytes_0 = b"X\x86e\xdf_%&\x02\xe1\xcc\xc8\x1b%"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    float_0 = 231.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    str_0 = "Zt"
    set_0 = set()
    bool_0 = True
    dict_0 = {}
    tuple_0 = (str_0, set_0, bool_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    complex_0 = 4514.67 + 223.9j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    bytes_0 = b"\xd5\xc2\xa5O\x18\xb9{"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    str_0 = "BgEZ;oFfp{"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    int_0 = -3240
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    bytes_0 = b"\xd8\xa3U"
    float_0 = -997.89
    tuple_0 = (bytes_0, float_0)
    tuple_1 = (tuple_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    str_0 = "N13w\\:J|#KTJRTM\nH"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    str_0 = "D|wO50L%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    int_0 = -4062
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    complex_0 = -3414.3908 - 2003.8877j
    bool_0 = False
    tuple_0 = (complex_0, bool_0)
    module_0.get_new_command(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    bytes_0 = b"\x0c\x03\xc7a\x8d\xa9\xec\xc2\xa6\xd1\r>\xc3\xf5G\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    str_0 = "'"
    module_0.get_new_command(str_0, str_0)


def test_case_4627():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4628():
    int_0 = 66
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    int_0 = 1089
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bytes_0 = b"(\xbc\x11\t\x93"
    module_0.match(bytes_0, bytes_0)


def test_case_4631():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4632():
    str_0 = "\rEt]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    int_0 = 1015
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    bool_1 = False
    module_0.get_new_command(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    float_0 = 1030.999235
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    int_0 = 1766
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    int_0 = -988
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    bytes_0 = b"@\xbdkJ\xbc\xb0\xc66\xe5\xb8K\xac9\x87\xc8ms"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    bytes_0 = b"\xa3\xe1g\x83\xb5]l\xd8O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    int_0 = -1611
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    complex_0 = -1432.871977 - 3270.65757j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bytes_0 = b"\xea>\xf1\x8d\xcb\xf4\x9d\x9bZY]\xb9\xc9\xe4\x07\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    str_0 = "("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    complex_0 = 1471.2 - 459.82j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    int_0 = -215
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    complex_0 = -3486.821542 - 1548.961606j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4648():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4649():
    int_0 = -2180
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4650():
    float_0 = -7.0924
    set_0 = {float_0, float_0, float_0, float_0}
    bool_0 = True
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    tuple_0 = (bool_0, dict_0, list_0, float_0)
    bool_1 = True
    bool_2 = True
    tuple_1 = (set_0, tuple_0, bool_1, bool_2)
    module_0.get_new_command(float_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    str_0 = 'eP"kRq !&L3<xJ'
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: str_0, str_0: tuple_0, str_0: str_0}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    str_0 = "UP7 3_=3LB}"
    module_0.get_new_command(str_0, str_0)


def test_case_4653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4654():
    str_0 = '>.XGg"d{.'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    int_0 = 2813
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    int_0 = -2059
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    tuple_0 = ()
    str_0 = "B.h{wd|\x0cqJAGFg"
    tuple_1 = (tuple_0, str_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    dict_0 = {}
    bytes_0 = b"\xaf\xa9\xa2\xd1"
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    float_0 = 1381.125
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    str_0 = "V5M4bMic%fXTgPr$<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    int_0 = 1956
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    str_0 = '3bp_A"T3l/'
    str_1 = "ihbh?0\x0b.cT#WIV!<m3"
    dict_0 = {str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    str_0 = "F\x0b7?(eku>]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4666():
    str_0 = "\t7rw"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4667():
    complex_0 = 1677.49 - 2136.372j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    float_0 = -685.057235
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    float_0 = 2405.151865
    list_0 = [float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    bytes_0 = b"t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4673():
    int_0 = 21
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4674():
    bytes_0 = b"\x84\xe8>\xfa:\xc8\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bytes_0 = b"eE\x01\xda\x8dJcj\x1e\xda\xc7E\x9e\x15"
    int_0 = 1489
    tuple_0 = (bytes_0, int_0)
    bytes_1 = b"\xa5Z{\xb5\r\xd3']\xb3\xce\xe8>f\xbdm\x9dS\x87N"
    tuple_1 = (tuple_0, bytes_0, bytes_1, tuple_0)
    dict_0 = {tuple_1: tuple_1, int_0: bytes_1, tuple_1: bytes_0, bytes_0: tuple_1}
    module_0.match(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    bytes_0 = b"n\xdb\xa4\x08K\x81\xde\x8f\xb5\x85O\x84\x89\xf8\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    int_0 = -2862
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4678():
    complex_0 = 481.48454 + 833.5j
    float_0 = -2368.967
    dict_0 = {}
    list_0 = [float_0, dict_0, dict_0]
    tuple_0 = (list_0,)
    tuple_1 = (complex_0, list_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4679():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_4680():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4681():
    str_0 = "A`(AvmSjc(l7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4682():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4683():
    str_0 = "6zLdgUm*U\ng4^6"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    complex_0 = -634.879 + 4139.489j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    bytes_0 = b"\xee\xdc\r\xfe\x98e\x07\xc4\x17\x8f\xf8mTg`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    float_0 = -472.683673
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    float_0 = 2546.54
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    complex_0 = 1335 - 868.337j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    int_0 = 484
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    float_0 = -21.67749
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_4693():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4694():
    bytes_0 = b"\xcc\x03\xaf\xb0\xb7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4695():
    bytes_0 = b"`\xf9\x87\xaa,\xce\xe2\xcfO\x0cv"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    int_0 = -656
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    float_0 = -1964.04
    set_0 = {float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    int_0 = 2048
    complex_0 = -114.2589 + 4723.9j
    set_0 = {int_0, int_0, complex_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    float_0 = 1127.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    bytes_0 = b"\x93\xd1S\xce\xb8\xba2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    str_0 = ",5-+^zQc;)oh.v9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    bytes_0 = b"\xfc*\x02\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    bytes_0 = b"FR\xfd\xce/\x1b"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    bytes_0 = b"\x0c\xd1=\xec\x14\xa6@\xb2\x07\x10\xbfm\xaa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    str_0 = "bb~r:?HU>!"
    int_0 = 126
    tuple_0 = (str_0, int_0)
    set_0 = {tuple_0, int_0, int_0}
    tuple_1 = (tuple_0, set_0)
    list_0 = [set_0]
    tuple_2 = (tuple_1, int_0, list_0, list_0)
    module_0.match(tuple_2, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4708():
    str_0 = "fj$,<$L!N:."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4709():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    int_0 = -247
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    str_0 = "G&dqXp=1I"
    module_0.match(str_0, str_0)


def test_case_4714():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4715():
    int_0 = -79
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, tuple_0, tuple_0]
    bytes_0 = b"T0\xb9\xd8E\x1d\xd5"
    tuple_1 = (tuple_0, list_0, bytes_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bytes_0 = b"\xc0\x98\x1f\x02\xf88[\x95\x8dv\xf7\xe4"
    str_0 = "E2p|"
    tuple_0 = ()
    tuple_1 = (str_0, tuple_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, tuple_1: tuple_1}
    int_0 = 265
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    float_0 = 847.34
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    int_0 = 1563
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    str_0 = " QTg(lx+6NR4e3"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    complex_0 = 2177.2 + 1702.966j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    bool_0 = False
    dict_0 = {}
    bool_1 = True
    tuple_0 = (dict_0, bool_1, dict_0)
    bytes_0 = b"\xca\x97\x8b\x0c\xa3\xacGh\x18\xd3\x0f\xa1\xc4\x9a\xcf"
    tuple_1 = (bool_0, tuple_0, bytes_0)
    module_0.match(tuple_1, dict_0)


def test_case_4723():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4724():
    bytes_0 = b"\xd6-\x98\x02\xc5\xe9\x1bB\xb9>\xee\x8d)&\xf0s\xbe"
    module_0.match(bytes_0, bytes_0)


def test_case_4725():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4726():
    str_0 = "Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    str_0 = 'zFn"A)'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    str_0 = "d9Go!Udt$N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    str_0 = '&,Q5\\^$p\r"TQe8yc/d'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    bytes_0 = b"\x02\xf9\x03F\x80\xae|\xb6&\xb7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    bytes_0 = b"&\x95\x8d\xc7\x96\xe8R\xa6\xcf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    float_0 = 4550.7407
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4735():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4736():
    int_0 = 909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4737():
    str_0 = "5d,P+s"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bytes_0 = b"k\xb6\x0b+H7D\xfa\x1b\x07h\x17u"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    str_0 = "\\:"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    str_0 = "wbWyW1W\\p\r]"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    bytes_0 = b"\x87\x08\xb4\xfa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    bytes_0 = b"M\x89\xcb\xaa@o\x01U\xd8$DO"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4744():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4745():
    bytes_0 = b"\x19\x97p\x81\xfd\xe3\xa2\xf2\xe0w\x0cs\xfb\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    str_0 = ":."
    bytes_0 = b"*\xeb\xba\x80\x05\xadF9\xf8\x02\xd8\xbf"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0, dict_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    bytes_0 = b"|\x93\x9e\xdbj\x8d\xf8*\x8d.\xb39\x15\x91\xa9?\x08\xc6\t\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    str_0 = "2Y#D~}.*Y~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4751():
    str_0 = ":s#\tD=C-ZA?nK:$[@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4752():
    str_0 = "]`%s#>`!,]:Ar*H&)Wk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    int_0 = 1745
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    str_0 = "(<\\Fu.)J77.o jx(P.{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    int_0 = 433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    int_0 = 1933
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    none_type_0 = None
    int_0 = 1273
    module_0.match(none_type_0, int_0)


def test_case_4759():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4760():
    float_0 = 2265.796
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    bytes_0 = b"\x9f\xcf3\xd6"
    str_0 = "Z<|Z$"
    bool_0 = False
    dict_0 = {}
    tuple_0 = (bytes_0, str_0, bool_0, dict_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    bytes_0 = b"o\xa3H|\x91G"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    str_0 = "95N }%sW2RE*/"
    float_0 = 339.016
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    bytes_0 = b"\x8b\xa8\xdco;nx\x89)\xb0\x94\xaf2\x9cCO"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    bytes_0 = b"B\xc9\x82\x87'\x03\x18\x9a\xc5,\xb7"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    float_0 = 196.719
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    complex_0 = -4708.916502 + 1710.2747j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    complex_0 = 1860.0779 - 2799.24j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4771():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4772():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    str_0 = "X\x0b"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    bytes_0 = b"\xff8\xa7_\xe5\x10\xd7\xd2\xe0l{\x17Nj\x99e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    str_0 = "6v0zM\t[:uw]4KK\rQ_>-!"
    module_0.match(str_0, str_0)


def test_case_4777():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4778():
    int_0 = -480
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    int_0 = 2406
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    float_0 = -6756.48
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    float_0 = -3349.84
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    list_0 = []
    set_0 = set()
    bool_0 = True
    tuple_0 = (bool_0, list_0)
    bool_1 = True
    tuple_1 = (list_0, set_0, tuple_0, bool_1)
    tuple_2 = (list_0, tuple_1)
    tuple_3 = (tuple_2,)
    module_0.match(tuple_3, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    str_0 = '}OoT]k=M".h3}0#Wln\\Z'
    set_0 = {str_0, str_0}
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    bytes_0 = b";\x8bBj\x05\xb7\xbc\x95d\x86\xbd,\xeb\xd7\xfe"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    float_0 = -2572.32016
    set_0 = set()
    bool_0 = True
    tuple_0 = (float_0, set_0, bool_0)
    tuple_1 = (dict_0, tuple_0, float_0, float_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4785():
    str_0 = "V?ug|j2-WI)xi3BF2w9}"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4786():
    complex_0 = 1565.3 + 2521.239j
    list_0 = [complex_0, complex_0]
    float_0 = -1182.9615
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    module_0.match(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [bool_0, list_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    int_0 = -2178
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    bytes_0 = b"\x985\xa3>\x9b\xa8\xa4"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    str_0 = "Fu|zjciU}xs\t@w)+=(ji"
    dict_0 = {bytes_0: bytes_0, bytes_0: set_0, str_0: bytes_0, str_0: set_0}
    module_0.get_new_command(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    str_0 = "\t_nA/o7.g^J?_$k=L`1C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    str_0 = "wTd`$~HP"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    float_0 = 1083.7973
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    int_0 = -3
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    int_0 = 103
    str_0 = '\n"Ntqt'
    set_0 = {int_0, str_0, str_0}
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    complex_0 = 273.993316 + 1390.03j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4797():
    int_0 = 929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_1, bool_0]
    module_1.object(*list_0)


def test_case_4799():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4800():
    str_0 = "A5A"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    int_0 = 1055
    module_0.get_new_command(int_0, int_0)


def test_case_4802():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4803():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    set_0 = set()
    bool_0 = True
    list_0 = [set_0, set_0, set_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    float_0 = 1895.12387
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    int_0 = -1559
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    int_0 = -5471
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    bool_0 = False
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    complex_0 = 3692.46 + 3221j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    str_0 = "\rf5729~v?qJWsA3"
    list_0 = [str_0, str_0]
    str_1 = "Y=Z$\t"
    str_2 = "zr>g<WUU*w'6"
    dict_0 = {str_0: str_1, str_2: list_0, str_1: str_2}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    str_0 = "(go9s# bxaw<>$Lap"
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    set_0 = {str_0, tuple_1, bool_0}
    dict_0 = {str_0: tuple_1, tuple_1: bool_0}
    module_0.get_new_command(set_0, dict_0)


def test_case_4813():
    pass


def test_case_4814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4815():
    str_0 = " x!5G6C[@D4$~alM}M'"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    bytes_0 = b"\xf9\n\x8f@\xbd\x9f\xcc\xe6)x6\x00ta\x17"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4817():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4818():
    str_0 = "1%0w{%SK8@B@aFJ"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    tuple_0 = ()
    bool_0 = True
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    bytes_0 = b"\x8aez\xd0c\x8fU\xda=\x8c0\x8a\xd7\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    str_0 = "{Qd/keL!\t="
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    int_0 = 1627
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    bytes_0 = b"\xd0\xb1\x83\xa2\xf2\xd8\xeb\x04:\xc9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    bytes_0 = b"\xb5,\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    bytes_0 = b"\xd1\xc2\xd3\xbd]\x0e"
    set_0 = {bytes_0}
    dict_0 = {bytes_0: bytes_0, bytes_0: set_0, bytes_0: set_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    int_0 = -530
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    bool_0 = False
    str_0 = "^<{<@/X[yK(,\t,YB "
    bytes_0 = b""
    tuple_0 = (bool_0, str_0, bytes_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    bool_0 = True
    bytes_0 = b"\xa2\x99\x1d\x8a\x99\xbeYC\xd2\xda"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    int_0 = 2222
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_4830():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4831():
    str_0 = "i)\t1e98Y1:h\x0bI P"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [str_0, str_0, set_0, set_0]
    str_1 = "dCA#O(7EJCA"
    str_2 = "T}S)9j3N"
    dict_0 = {str_1: str_0, str_0: str_0, str_2: str_2, str_2: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    str_0 = "k|q/'?<O<XPosj"
    set_0 = {str_0, str_0}
    dict_0 = {}
    tuple_0 = (set_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    str_0 = "=$l\r8T"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    bytes_0 = b"/E\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    bytes_0 = b"=\x8d_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    float_0 = -121.5823
    module_0.match(float_0, float_0)


def test_case_4837():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4838():
    complex_0 = -2847.0325 + 2900.6j
    tuple_0 = (complex_0,)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    bytes_0 = b"W\xaa\x95E<^\x15\xe7$Z\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    bool_0 = False
    bytes_0 = b"\x91V"
    dict_0 = {bool_0: bool_0, bytes_0: bool_0, bytes_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    int_0 = -1262
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    str_0 = "_l\x0cl'zkQC<P1>~y%\"\n[9"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4843():
    int_0 = 2342
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4844():
    str_0 = "A1O+#oaH5"
    str_1 = ' Dv5\nQhe"$m'
    str_2 = 'I\x0cc=i$%90j\x0b"$\t\\VhzW$'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    float_0 = -1591.68217
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_4846():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4847():
    bytes_0 = b"\xe7\x97|"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4848():
    int_0 = 961
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4849():
    str_0 = 'jr\x0bS*W"v\x0b7`f!X>8ggV'
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4850():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    str_0 = "CQwTyH,P1N"
    float_0 = 929.03
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    int_0 = 1794
    bytes_0 = b"\xc8\xde@\x13\x9b\xbf\xa4"
    dict_0 = {int_0: int_0, int_0: int_0, int_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    str_0 = "\rS/$kY|(("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    int_0 = -538
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    bytes_0 = b"\xe1q\x15\x9b\\\x9f\xe3\xb7\xaa\xec\xc1{\xdd\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    bytes_0 = b"\x9d\xc4\x81\xf1\xe1\x17~\xa0\x044\t\x15\x8aJ\xd2\x8d\xca\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    str_0 = "[o`"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4858():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4859():
    float_0 = -1198.98
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4860():
    int_0 = -2450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4861():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    bytes_0 = b"#\x16\x1bX\x042\x05"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    int_0 = 539
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, bool_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bool_0 = True
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    complex_0 = 3896.557308 - 1652.742j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    int_0 = -1922
    set_0 = set()
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (int_0, set_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    int_0 = 2791
    module_0.match(int_0, int_0)


def test_case_4869():
    pass


def test_case_4870():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4871():
    str_0 = "Beum%}U06$ B+T`!J5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4872():
    bytes_0 = b"\xcd\xb3-\x02u\xbc\x1e1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    int_0 = -3352
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4874():
    bytes_0 = b"0\xc1~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4875():
    int_0 = -1113
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    float_0 = -90.213713
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    str_0 = ",Y#:b/Xu\x0bVWl`V];!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    int_0 = -1689
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    float_0 = -2589.59853
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    str_0 = 'KRABDE"/9h'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    str_0 = "wU)p"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, dict_0, str_0]
    module_0.match(list_0, dict_0)


def test_case_4883():
    pass


def test_case_4884():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4885():
    int_0 = 1884
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4886():
    str_0 = "8&~t[K<>\trsV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    bytes_0 = b"\x88\x84N0\xe7\xc6\x06\xdc\xcc\xda\xad\xa0\xbex\xdd\xa6m\xb3/\x81"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4889():
    tuple_0 = ()
    float_0 = -22.6713
    bytes_0 = b"\xce\xd1\x0bl\xa1Y\xf2\xdb\xf8\x80\xec"
    tuple_1 = (float_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4890():
    float_0 = 3181.76909
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    str_0 = "R5@oF|bf"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    int_0 = -1208
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    str_0 = "\x0c'=RP|(=a@/py["
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    float_0 = -17.987763
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    str_0 = "V$FxTM:\n_J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    int_0 = -618
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    int_0 = -3058
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    int_0 = 271
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    float_0 = 1842.875906
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    bytes_0 = b"\xdd\xcbx"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4902():
    float_0 = 1058.39
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    list_0 = [tuple_0, float_0, tuple_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_4903():
    pass


def test_case_4904():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4905():
    bytes_0 = b"\x9eW\xdd\xb1\xce\x7f\xcd\x80\x1c%Q\x12\xe6\x7fR{~t\xc4\x07"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    str_0 = "N\n*yeJN@\neP\x0czG"
    str_1 = "'M7RSb3:[,~+"
    str_2 = "|4#k$\x0c)znpNJ`s*Jq=,"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    str_0 = "hiO\x0c-fmRsE\nO\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    complex_0 = 1044.231159 - 3508j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    float_0 = 739.24546
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    int_0 = 487
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    float_0 = 182.7
    object_0 = module_1.object()
    dict_0 = {float_0: float_0, float_0: float_0, float_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    float_0 = 800.237
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    int_0 = -922
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    complex_0 = -2695.6669 - 3247.3j
    dict_0 = {complex_0: complex_0}
    int_0 = -2910
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    bytes_0 = b"U\xcf\xaf\xe9\x94CQ\xe9E\xf7"
    bool_0 = False
    module_0.get_new_command(bytes_0, bool_0)


def test_case_4918():
    pass


def test_case_4919():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4920():
    float_0 = 1617.0719
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    int_0 = 3074
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    bytes_0 = b"\xf7\x06c\xab\xd9\xc4\x90\x9a/\x0f\xf6\x82"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    bytes_0 = b"2\xe2\xdf"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    bytes_0 = b"O|Jz\xc3\xd6\xcb\xd5\xdb&0P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    float_0 = 3961.74
    tuple_0 = (float_0,)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    str_0 = "Guf{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    bytes_0 = b"R?\xa0\x1ewso\xe5\x13"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    dict_0 = {}
    object_0 = module_1.object()
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    bytes_0 = b"\x8e=\xc6\x81\xc9\x0f\xfd\x04.\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    int_0 = -7
    str_0 = "{{K:O{$F\t"
    dict_0 = {str_0: int_0, int_0: int_0, str_0: str_0}
    tuple_0 = (str_0, dict_0, int_0, int_0)
    tuple_1 = (int_0, tuple_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    bool_0 = True
    str_0 = "r"
    str_1 = "\n*"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    int_0 = -1405
    list_0 = [int_0]
    bytes_0 = b"\r\t\xaa\x08"
    bool_0 = False
    tuple_0 = (int_0, list_0, bytes_0, bool_0)
    list_1 = [tuple_0, tuple_0, bool_0, tuple_0]
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    str_0 = "UOXZ("
    str_1 = '2`ut1uwqraL\t"'
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    float_0 = -1200.02
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    int_0 = -3481
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    int_0 = -1074
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    str_0 = "Fjs2,9pe$7i [oug+"
    str_1 = "VQck4GfoTQh[}t{"
    str_2 = ">\t7d\t=D6Qkm:(G`"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    str_0 = "u)Puudk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    int_0 = -180
    list_0 = [int_0, int_0]
    str_0 = "\nUm'E6T>Udk1A\x0bAn-|E\x0b"
    tuple_0 = (list_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4942():
    none_type_0 = None
    bool_0 = False
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        bool_0: bool_0,
    }
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4943():
    str_0 = ""
    complex_0 = -1603 - 2730.6j
    str_1 = "e"
    str_2 = "\x0b1`C}:8\r"
    dict_0 = {str_0: complex_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    str_0 = "Z\rH@**#,u({1\r}~10"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    str_0 = "/\\VgqJ26[#CXXj3Ti"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    int_0 = 1927
    bytes_0 = b"\xd0\xf6\xc1="
    list_0 = [bytes_0]
    complex_0 = -2368.58031 - 1157.496j
    tuple_0 = (complex_0, bytes_0)
    tuple_1 = (list_0, int_0, tuple_0)
    module_0.get_new_command(int_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    str_0 = "c8!f \\$IOK[r,EQ3XS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    set_0 = {tuple_1, tuple_0, tuple_1}
    dict_0 = {}
    tuple_2 = (set_0, dict_0)
    module_0.get_new_command(tuple_2, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    float_0 = -245.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(set_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    int_0 = 833
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    str_0 = "~y`*sSGDAp'd"
    dict_0 = {str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "d'.T%Lra+-hj%cJi"
    str_1 = "_"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    bytes_0 = b'G\xe7\xd8\x05\xf2\xe3\xbc\x80M\x9a\x1b\xba\x9b\xee"\xe6\x808\x14\x10'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4957():
    bytes_0 = b"\x8b\xd2\xb4Lz\xb2~\xfd\x04\tU\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4958():
    int_0 = 487
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    bytes_0 = b"\xf3\xfa\xd2\xfe\xe60\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    str_0 = "9}\x0ca6k`.Tw7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    str_0 = "]u'3>LA!cQn]40`\tcB"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    int_0 = 624
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    int_0 = 229
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    int_0 = -1922
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    str_0 = "~uG89ax=!|L\x0c+GNyd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    int_0 = 831
    tuple_0 = (int_0, int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    int_0 = -230
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4968():
    str_0 = "J\\ca"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4969():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    float_0 = 173.170327
    tuple_0 = (bool_0, set_0, float_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    str_0 = "]"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    bytes_0 = b"\xb0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    int_0 = 1929
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    float_0 = -1495.298963
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    float_0 = -939.361384
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    int_0 = 1315
    int_1 = 456
    tuple_0 = (int_1,)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    int_0 = -1724
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    none_type_0 = None
    bytes_0 = b"hBx\xbb\x00\x1a\xfa"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    float_0 = 1890.4201
    set_0 = {float_0, float_0}
    list_0 = [set_0, float_0, set_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    bytes_0 = b"\n\xd9D5\xf4#\xe4yZ\xc2\x14\r_\r\xc5\xb7H"
    str_0 = "{*p"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    bytes_0 = b"\x18y\x10\xb1\xcf\x8b\xfarJ\x89\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    str_0 = "&4{s=\x0cl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    float_0 = -253.008
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    int_0 = 2168
    str_0 = "uq@t]\nF&)(\\1"
    dict_0 = {int_0: str_0, int_0: int_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    bytes_0 = b"\xea\x9e\xd5.\x0e\xb8\xa2Y\x85Z\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    str_0 = "nM|9o\x0b<DaoVk;bhuZ"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    str_0 = "S\x0b\n\x0ciSG:T%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4987():
    bytes_0 = b"\xdd/\xf9Kj\r\xdf\xe48\x12\x18fpv+)\x82"
    str_0 = "J/kA\x0b~y"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4988():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    bytes_0 = b"%\x93\xa6\xe5\xd9X\x8e\x9c\x8bl\xb3\xc9(\xbc=#"
    set_0 = {bytes_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    int_0 = 1629
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    complex_0 = -4213.0948 - 2845.45666j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4993():
    bytes_0 = b"]\x0b&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4994():
    bytes_0 = b"\xa2`'\xd1\x118\xdajDs\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    complex_0 = -411.241 - 17.70574j
    set_0 = {complex_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    bool_0 = True
    float_0 = 3654.8218
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    int_0 = -1683
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    str_0 = "GA:N:(R-G9wV]O9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    int_0 = -2421
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    int_0 = 2134
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    bytes_0 = b"\x04\x83\xc3@\x05\xbb\xe8R\xf6\x16\xa6\xcc\xc0\xec\x17;e?e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    bytes_0 = b"\xf8\xa52\x9f\x1b\x92u\xa3R\xb6\xfc\xd8D\t"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    int_0 = 3963
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    str_0 = "\x0czs7\nff|i<o9&."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_5006():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5007():
    int_0 = 1913
    tuple_0 = (int_0,)
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, tuple_1, tuple_0]
    module_1.object(*list_0, **int_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    str_0 = "]iA{bgQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    none_type_0 = None
    bytes_0 = b"g\x94|\t\xf4\t{\x93o-\xc5\xc5"
    module_0.get_new_command(none_type_0, bytes_0)


def test_case_5010():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5011():
    int_0 = -2340
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    int_0 = -1612
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    bool_0 = True
    bytes_0 = b"\x03"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


def test_case_5014():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5015():
    int_0 = -627
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5016():
    str_0 = "Iv3M9;q^*@56'_&[\r"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5017():
    str_0 = "\t|n9JL-%{0yu'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    int_0 = -1375
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    float_0 = 2308.78
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    int_0 = -516
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    str_0 = "V8>o{T~+FfBsTaP;a\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    list_0 = [set_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    int_0 = 4432
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    int_0 = 327
    bool_0 = True
    list_0 = [int_0, int_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    bool_0 = False
    bytes_0 = b"\x0f\xca+"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5028():
    float_0 = 1553.40649
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5029():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = 226
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    int_0 = -1553
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5033():
    int_0 = 4719
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5034():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    str_0 = "E^sF\t"
    tuple_1 = (set_0, str_0)
    list_0 = [tuple_0, tuple_0, tuple_1]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    str_0 = "\x0bTCKq$eO|L\x0b_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    int_0 = -2782
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    bytes_0 = b"(G-\xbf\xe5v\xf1\xaa \xa3\xae"
    bytes_1 = b"\xbc\x85b\xa1\xf7Dg\x13\xdfS6\x84"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    str_0 = "I"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    float_0 = -2766.664
    int_0 = -1399
    module_0.match(float_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = []
    bytes_0 = b"\t\x9e\x98^\x06c\x9ff\x88\r\xe8"
    tuple_0 = (set_0, list_0, bytes_0, set_0)
    module_0.get_new_command(bool_0, tuple_0)


def test_case_5041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5042():
    float_0 = 4498.931
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    bool_0 = False
    bytes_0 = b"\xf9\xa1\x1fg\xd9u\xe4\x15i\x01w"
    tuple_0 = (bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    float_0 = -1574.9
    set_0 = {float_0, float_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    bytes_0 = b"\x8e\xd13\x9bo'\x9f*/iI\x1d\x97"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    complex_0 = -4084.04 - 2730j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    int_0 = -4021
    list_0 = [int_0]
    tuple_0 = (int_0, list_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5049():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    list_0 = []
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5050():
    int_0 = 1620
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    str_0 = "j6cDx|U9kA}C(_-\r"
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [str_0, str_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    float_0 = -2444.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5054():
    int_0 = 4113
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5055():
    int_0 = -2947
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    str_0 = "D,UsjkY\\W)3}G"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    str_0 = "pTk72iS\\o'6pi,?1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bytes_0 = b"\x07\xeb>_\x83"
    module_0.match(bytes_0, bytes_0)


def test_case_5060():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5061():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    int_0 = 2182
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_5064():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5065():
    str_0 = "BEg#ln?4%br\x0b/tgCT"
    int_0 = -3193
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    bool_0 = True
    bytes_0 = b"x"
    set_0 = {bool_0, bool_0, bytes_0, bool_0}
    tuple_0 = (bool_0, set_0)
    tuple_1 = (bool_0, set_0, tuple_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    str_0 = "<T`c`%K!,vTX|;pt&"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    str_0 = "eh@KmF(+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    str_0 = "E"
    tuple_0 = (str_0, str_0)
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5071():
    bytes_0 = b"\x0ewH\xde'9\xd5\x04\xc4\x89\xb3\xb4\xbf\x1f\xf2\xbfwM"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    set_0 = {bytes_0}
    tuple_0 = (list_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5072():
    bytes_0 = b"N`\xd9MGS \x9f\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    bytes_0 = b"\xd5\xc9A\x93\x8c\xe53=\xed\xb9\xa5\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    object_0 = module_1.object()
    int_0 = 2193
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    float_0 = -547.9873
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    str_0 = "F)wM IYXEA?r3<"
    module_0.get_new_command(str_0, str_0)


def test_case_5077():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5078():
    complex_0 = 344.9 - 251.4749j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    str_0 = "sb(L^pqG~uc xA6\x0czCs/"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5080():
    int_0 = -1659
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5081():
    int_0 = 374
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    str_0 = "\ne^s\rS"
    str_1 = "r&aX*eh"
    str_2 = "9"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    bytes_0 = b"g\xcb\x15\x03\x0f\xd7\n\x1d0y"
    int_0 = -2359
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    complex_0 = 72.78 + 2007.52012j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    str_0 = ",4yV\ty&7!?"
    bool_0 = True
    list_0 = [str_0, str_0, bool_0]
    module_1.object(*list_0, **list_0)


def test_case_5087():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5088():
    str_0 = "F+D$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    float_0 = -2220.33
    module_0.match(float_0, float_0)


def test_case_5090():
    object_0 = module_1.object()


def test_case_5091():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bytes_0 = b"\xc7\xf6\xd3\x84>I\xa0\x15X\x80WJ\x06YW!"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    int_0 = 372
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    float_0 = -2515.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5095():
    bytes_0 = b"5\xe7\x90\x11\x80\xd7O\xc99\xa5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5096():
    str_0 = "x\x0cE8*h"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    list_0 = []
    str_0 = "||h"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_5099():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5100():
    complex_0 = 901.55946 + 1731.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    str_0 = "tZwqJtBdj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5102():
    int_0 = -118
    set_0 = {int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5103():
    object_0 = module_1.object()
    str_0 = "=4>+P\ry5O(3\x0baa"
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (str_0, set_0)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    int_0 = 2963
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    str_0 = "0wRP'I:bsRB1R7\t0\"S"
    complex_0 = -1529.44 + 997.5j
    list_0 = []
    tuple_0 = (list_0,)
    tuple_1 = (str_0, complex_0, tuple_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    bytes_0 = b"\xcd|+l\xe1\x08h"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5107():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5108():
    str_0 = "\\dD2*\nV#x3zs*@\rE(`"
    bool_0 = True
    dict_0 = {str_0: bool_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    str_0 = "uK\r[.Kg12+`,l"
    set_0 = {str_0, str_0}
    str_1 = "R\r;UF"
    str_2 = "q(qaoHXj!c"
    str_3 = "Bvnm)*/tad?EO%GSx}y"
    dict_0 = {str_1: str_3, str_0: str_0}
    bytes_0 = b"\x8f\x0e\x15\xd0I\x9aG\xfa\xb9\xef"
    tuple_0 = (str_2, set_0, dict_0, bytes_0)
    dict_1 = {str_1: set_0, str_2: str_2, str_3: tuple_0, str_2: str_0}
    module_1.object(*str_0, **dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    int_0 = 3105
    tuple_0 = (int_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    bool_0 = False
    int_0 = 4396
    tuple_0 = (bool_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    float_0 = 3285.94
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    str_0 = "NaA.'CXST$7["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    int_0 = 5660
    set_0 = {int_0, int_0, int_0, int_0}
    int_1 = -3786
    tuple_0 = (int_1,)
    tuple_1 = (set_0, tuple_0, int_1)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    int_0 = -1168
    str_0 = "h8CipMBOgy^acbDJ"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    bytes_0 = b"\x8b\x05n9\x05\xb9O\x99\x1b\xae\xc5\xa4n\xfa\x81\x98\xeb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    float_0 = 22.18
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    int_0 = 1209
    bool_0 = False
    list_0 = [int_0, int_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    str_0 = ">dF|XR^Q{7+h3F\n1kZ"
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    str_0 = "Iif_D\n%;gg}ST"
    str_1 = "<~)Y9s"
    dict_0 = {str_0: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    str_0 = "n'I$l\n\x0bA\x0b'M(nd}"
    str_1 = "y"
    list_0 = [str_0, str_0, str_1]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    int_0 = 1631
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    str_0 = "h*4;?Zy_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    float_0 = 2072.37045
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    str_0 = ':3H"flr{.~Dci'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    int_0 = 830
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5128():
    bytes_0 = b"\x90\xba\t\xb4$\xc11\xffF\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5129():
    bytes_0 = b"\xd4%n\x10$\xbfl\x1c\xd4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    dict_1 = {bytes_0: bytes_0, bytes_0: dict_0, bytes_0: dict_0, bytes_0: bytes_0}
    module_0.match(bytes_0, dict_1)


def test_case_5130():
    pass


def test_case_5131():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5132():
    str_0 = "nx5Mix=2Ilq"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_5133():
    complex_0 = 1655.17 - 1011.221j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    str_0 = "M<Rkp0$O@pZ1R;|Y4`F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    str_0 = "N~2^$i"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    str_0 = "=Uy_>\n=\x0cHA',+O#G:(<"
    bool_0 = True
    set_0 = {str_0, str_0, bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_5138():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5139():
    bytes_0 = b"\xdc\xdf\xf0\xf5y\x89,x\xadr3S\x18@"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    float_0 = 1298.004
    str_0 = "K)CaDl"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    complex_0 = -811.2 - 3240.96j
    module_0.get_new_command(complex_0, complex_0)


def test_case_5142():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5143():
    float_0 = 1378.688
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    str_0 = "KEh4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    float_0 = -1131.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    bytes_0 = b"-!7XR"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = True
    set_0 = {bool_1, bool_0}
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    str_0 = "VL'?V"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    int_0 = -169
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    int_0 = -3200
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = "FNDmu}R/ta7"
    dict_0 = {str_0: str_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    str_0 = ""
    str_1 = "JvoVV=}~O"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5153():
    float_0 = -420.00125
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


def test_case_5154():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5155():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0]
    set_0 = set()
    tuple_0 = (list_0, list_1, set_0, set_0)
    module_0.get_new_command(tuple_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    str_0 = "(PG"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    complex_0 = -2539 - 3211.091j
    int_0 = -725
    module_0.match(complex_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    bool_0 = True
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    dict_0 = {}
    bool_0 = False
    list_0 = [dict_0, bool_0, bool_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    float_0 = -1719.65
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    str_0 = "8"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    int_0 = -1522
    module_0.match(int_0, int_0)


def test_case_5164():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5165():
    bytes_0 = b"S\rG\x01\x88\\\xe2>\xd0d5\xe2U\x91"
    float_0 = -2734.088847
    list_0 = [bytes_0, bytes_0, bytes_0, float_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    bytes_0 = b"\x82^\x16\xc8\xff:\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    bool_0 = False
    dict_0 = {}
    bool_1 = False
    tuple_0 = (bool_0, dict_0, bool_1)
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    complex_0 = 2336.0596 - 3369.966j
    tuple_0 = (complex_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    float_0 = -1695.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    int_0 = 4177
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    int_0 = -3979
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5172():
    bytes_0 = b"\xeaKv\xe8>\xc6"
    list_0 = [bytes_0, bytes_0]
    tuple_0 = (list_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5173():
    int_0 = -1554
    list_0 = [int_0, int_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    bytes_0 = b"Hm\x97\x19\xa2\xb65\x90z\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    float_0 = -1575.34808
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    str_0 = "`},"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    tuple_0 = ()
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5179():
    bytes_0 = b"t\xcey=\x19\x98\x19)\xda>"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5180():
    int_0 = -1174
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    bytes_0 = b"`\x01\xb1\x08+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    complex_0 = -2106.066393 - 1879j
    tuple_0 = (complex_0,)
    set_0 = {tuple_0, complex_0, complex_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    str_0 = "=DYHR]tn"
    float_0 = 2250.3
    tuple_0 = (float_0,)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    str_0 = ";y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5186():
    bytes_0 = b"x\x18%\xe33\xe2\xfb\xf3\x1aUa\xbc\x95\x1d\xa2\xfd\xd3@`,"
    bool_0 = True
    set_0 = {bytes_0, bytes_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5187():
    int_0 = -2248
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5188():
    str_0 = '\rB\rQ,dV7DY%\r=i"g'
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5189():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    bytes_0 = b"\x13\xec\x8a\xfb>)\xcc\x81\x1a\x05\xaf\xcf\xb5\xa9R>\x1d\x9c"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    int_0 = -1282
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    bool_0 = False
    int_0 = -269
    list_0 = [bool_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    bool_0 = False
    tuple_0 = (bool_0,)
    int_0 = 4623
    set_0 = {tuple_0, bool_0, int_0}
    tuple_1 = (set_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    str_0 = "z\x0cqb_OB>Yu8j\\=>&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    int_0 = -2526
    bytes_0 = b"\xa38\x95\xb2\x93\xdc6\x8f)c\xbb\xa8\xe5"
    tuple_0 = (int_0, int_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    str_0 = ";3B\r|Cu"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    int_0 = 857
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    str_0 = "(pr8KBfTgkkFJ"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    float_0 = -532.4713
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    str_0 = ":VDh\rXF?M="
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    str_0 = "h}j{z-bv)zPlX&p<v]"
    module_0.match(str_0, str_0)


def test_case_5206():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5207():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    complex_0 = -369 - 2416.426269j
    list_0 = [dict_0, bool_0, complex_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    bytes_0 = b"#\x94"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    int_0 = -1994
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    str_0 = 'KJ1"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5212():
    float_0 = 2396.068828
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5213():
    float_0 = -791.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    float_0 = 5064.476
    str_0 = "r"
    list_0 = [float_0]
    int_0 = -4845
    tuple_0 = (str_0, list_0, int_0)
    list_1 = [float_0, tuple_0, list_0]
    str_1 = "Yf0&."
    dict_0 = {str_1: str_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    int_0 = -173
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    int_0 = -2174
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    str_0 = "S"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    bytes_0 = b"h\xcb\x00\xad\x18\xae\x97XO\x80\xb3\x8e[\x81\x86<@\x89\xdb^"
    tuple_0 = ()
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    str_0 = "s"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    bytes_0 = b">"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    float_0 = 3135.416799
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    int_0 = 1955
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    float_0 = -686.33
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    int_0 = -1680
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    bytes_0 = b" R\xa2 .j\x94#U\x18c\x1a\xa5"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    int_0 = -983
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    bytes_0 = b"N\x9eS\xebh\xff\x0b\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    str_0 = "k'H1)?Cp@2R.@yOC8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    none_type_0 = None
    complex_0 = -4500.794 + 296.112761j
    module_0.match(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    int_0 = -2553
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    bool_0 = True
    int_0 = -1965
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    float_0 = -1894.91
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    bytes_0 = b"\x17@\xfb\xe9\xb9K\xfe\x01U8\x81\x06y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5238():
    str_0 = "pA"
    tuple_0 = (str_0,)
    dict_0 = {}
    list_0 = []
    float_0 = -1275.98
    tuple_1 = (tuple_0, dict_0, list_0, float_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


def test_case_5239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5240():
    str_0 = "Jc5\nh^I;R)Sj0%d!\x0b"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    int_0 = -2074
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    bytes_0 = b"b\x1f\xdc\xd5\xca\xd7S\xea"
    list_0 = [bytes_0, bytes_0, bytes_0]
    dict_0 = {}
    bool_0 = True
    tuple_0 = (list_0, dict_0, bool_0)
    list_1 = [tuple_0, bytes_0, list_0]
    module_1.object(*list_1, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


def test_case_5244():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5245():
    float_0 = 947.97
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5246():
    int_0 = -1331
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    float_0 = -1080.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    bytes_0 = b"m\x99\xc6\x16\x15\xd2\xe1\x8f\x8e\xf1\xa6\x07H\x0b\x1d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    set_0 = set()
    bool_0 = False
    list_0 = [set_0, bool_0, set_0]
    bytes_0 = b"\x11"
    tuple_0 = (list_0, bytes_0)
    tuple_1 = (set_0, bool_0, tuple_0, bool_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    str_0 = "2V+a\rak\r3!:1wJK"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    str_0 = "<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    int_0 = -1302
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    int_0 = -1776
    list_0 = [int_0, int_0, int_0]
    str_0 = "J1S*0/3"
    tuple_0 = (int_0, list_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    float_0 = 3357.79
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    str_0 = "K:"
    module_0.match(str_0, str_0)


def test_case_5257():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5258():
    float_0 = 4562.863
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    bytes_0 = b"\xa5\xf9\x99\x93w.^YcU\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    float_0 = 14.0435
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    str_0 = "z#,Fhj,Zg).lF"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    float_0 = -954.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    str_0 = "\tu,=D'reW)LD&|A]"
    list_0 = [str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    int_0 = 699
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0,)
    set_0 = {bool_0, bool_1, tuple_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    int_0 = 1788
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    int_0 = -3459
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    float_0 = -4559.528893
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    complex_0 = -72.779935 + 2673.276199j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    str_0 = "\x0c*qex-l?\tO(<"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    tuple_1 = (str_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    str_0 = "L@}^P-|M0_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    int_0 = 1434
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    int_0 = 455
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5275():
    int_0 = 1297
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5276():
    int_0 = 1680
    bytes_0 = b"\x07\xbc*F@\n\xc1\xc6:\xc4\x1c"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    str_0 = "WG/of!^tu dm]^3OUo!m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    int_0 = 1687
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    float_0 = -1274.127
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    str_0 = "_Du!\t2&d\n$LS/"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    str_0 = "m'FSk7GWU`$kZ=p(C$$<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    list_0 = [object_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    bytes_0 = b"\x03T\xdd \x19\xdd\xc5\xfd\xcew\xc1\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    str_0 = "rm4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    int_0 = -983
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5288():
    bool_0 = True
    bytes_0 = b"@\x8e\xee\x96"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5289():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    int_0 = 1365
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    str_0 = "j"
    float_0 = -288.39
    tuple_0 = (str_0, float_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    bytes_0 = b"\xa6\x0c\xec\xcc\x8b\x16~'\\\xbfuZ\n\x84L\x04B\xfd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    none_type_0 = None
    bytes_0 = b"\xf6\xdc \x1b\xa1k\xa8\xc3f\x1f"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    none_type_0 = None
    int_0 = -932
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    bool_0 = True
    str_0 = 'PPGi@i}2<f+}:"6"'
    dict_0 = {bool_0: bool_0}
    complex_0 = 365.23 + 1579.980021j
    tuple_0 = (bool_0, str_0, dict_0, complex_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1)
    bool_2 = False
    bytes_0 = b"\xf1UC\xee\x92\xb3\x06l\xd9\x98\xa0\x07;\x926\x8d}\xfd"
    bool_3 = True
    tuple_1 = (tuple_0, bool_2, bytes_0, bool_3)
    dict_0 = {tuple_1: bool_0}
    list_0 = [dict_0, tuple_1, bytes_0, bool_3]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    str_0 = "\\0\x0bA@)="
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    bytes_0 = b"\xfe\x14dr9\x1a\x1a\x94\xcae\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    str_0 = 'wfY\\+8&YR]"U\t_bIhT1'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    bytes_0 = b"\xb9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    int_0 = -2373
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    int_0 = -2391
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    float_0 = -1524.175079
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5307():
    str_0 = ""
    set_0 = {str_0, str_0, str_0, str_0}
    module_1.object(**set_0)


@pytest.mark.xfail(strict=True)
def test_case_5308():
    float_0 = 3.9
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    int_0 = -3366
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    complex_0 = -757.024393 - 2419.171j
    tuple_0 = (complex_0,)
    set_0 = set()
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    str_0 = "Ybx5'"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    str_0 = ";iWXb/V?SN<bB"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    float_0 = 1599.216868
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    bytes_0 = b"b\xca\xc37D\x18\xbb\x19\x84\xb5(%\x97\xce"
    float_0 = 582.0
    tuple_0 = (bytes_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    complex_0 = 1400.023518 - 372.6351j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    tuple_0 = ()
    object_0 = module_1.object(*tuple_0)
    list_0 = [object_0]
    tuple_1 = (list_0,)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    str_0 = "P'h0~($w9Af"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    str_0 = "limxKjB%,sG+D<%L"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    bool_0 = True
    bytes_0 = b"^\x90\r\xe6\x8a\xbe=\xa7\xb7\x92\x82\xb4"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    float_0 = -1112.996
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    bool_0 = False
    bool_1 = False
    list_0 = []
    tuple_0 = (bool_0, bool_1, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    complex_0 = 2899 + 4053.12757j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    int_0 = -442
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    bytes_0 = b"\xcb\xd1\x89\xec\xfaa?\xd0\x83\r\xca\x90\xe5]\xdf\x85\x17\x99"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5326():
    int_0 = 336
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5327():
    bytes_0 = b"L\x9c\x86V\x9fwr\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    float_0 = -3920.53
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5329():
    complex_0 = -109.69 - 2650.9019j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5330():
    complex_0 = 303.25416 - 2854.58j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    bytes_0 = b"gz{?\xe5\xf4\x8b\xf218\xdb\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    int_0 = 2649
    none_type_0 = None
    object_0 = module_1.object()
    dict_0 = {none_type_0: none_type_0, int_0: none_type_0, none_type_0: object_0}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    float_0 = 1067.874
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    int_0 = 45
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    int_0 = -2409
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    str_0 = "+*Z2q<J-k\t6x,p9x}b3"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    int_0 = 2560
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    bytes_0 = b"^\x99LS\xe8\x0e\xb6\n9\x82\x8b\x90K"
    list_0 = [bytes_0]
    str_0 = "n\tQz Kihp"
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5340():
    int_0 = 2288
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5341():
    bytes_0 = b"J\x8d\xd4\\\x8f\xd4\x9c\xd1\x99\xf9En\xfc\xc7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    str_0 = "+<=O"
    module_0.match(str_0, str_0)


def test_case_5343():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5344():
    str_0 = "y(0AHysSvOdf4D"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    str_0 = "'GYz1pW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    float_0 = 421.8812
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    int_0 = -699
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    bytes_0 = b"A\xa54\xd3\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5349():
    str_0 = "|]LfA1UwSw5iMC(X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5350():
    str_0 = "a8\rTW6j4p"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    bytes_0 = b"\xfcBx\xd2\x02\xf0\x918h\x1b\xdf\xc3\x15\xcam\xaf\xa8D"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: list_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    str_0 = "Z_@Wb>5}KnOyton"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    str_0 = "yqc"
    module_0.match(str_0, str_0)


def test_case_5354():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5355():
    str_0 = "v{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5356():
    str_0 = "mzTH>=LkGJ\rK2mY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5357():
    bytes_0 = b"\xad\x9a-\xd8&\xb7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    str_0 = "PvO+\nv)6VL-6F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    int_0 = -1365
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    str_0 = "+00]GHI\nJ"
    str_1 = "h"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


def test_case_5363():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5364():
    bytes_0 = b"[\x8bv"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    int_0 = 4472
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    str_0 = "Z-\\BlIv,{Km(x`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    str_0 = "Fb"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    bytes_0 = b"\xfb\x8b\x80$\x80\x06\xcd"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    int_0 = -60
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    int_0 = 1476
    int_1 = -317
    tuple_0 = (int_0, int_1, int_1)
    set_0 = {int_0, int_0, int_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    bytes_0 = b"\xfc[\\H\x8dUqT\x05"
    module_0.match(bytes_0, bytes_0)


def test_case_5373():
    pass


def test_case_5374():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5375():
    list_0 = []
    list_1 = [list_0, list_0]
    module_0.match(list_1, list_0)


def test_case_5376():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5377():
    int_0 = -379
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, bool_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    bytes_0 = b"B\xd8\xfe\xc6{\x1b\x1c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    dict_0 = {tuple_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    float_0 = 3931.625
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    bytes_0 = b"\x98\x86%\xb9\xc0\xa0D"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    int_0 = -330
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    int_0 = -1192
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    bool_0 = True
    bytes_0 = b"\xf4:\xc2\xcf\xd1\x1d<\xfdV\xa7 \xac\xfe\xc3T"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    int_0 = 1080
    bool_0 = False
    set_0 = {int_0, int_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    int_0 = -2414
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    int_0 = -131
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    int_0 = -941
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5392():
    none_type_0 = None
    str_0 = "M.rv"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5393():
    float_0 = 2412.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    complex_0 = 2899.98 + 3227.870109j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    int_0 = -1041
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    str_0 = "_pGyZS\x0bz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    str_0 = ""
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5398():
    str_0 = "T-Vh\x0bM~D\x0c\n$X`>f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5399():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    str_0 = "&?2Hc~_+NRT,^"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    str_0 = "j_a}IN"
    module_0.match(str_0, str_0)


def test_case_5402():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5403():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    str_0 = "KyU\nq~F*\tzEY=,N"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    complex_0 = 2391.71 + 2378.00379j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    int_0 = -880
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    bool_0 = True
    bytes_0 = b"?\x0e\t}Ql"
    float_0 = -460.527531
    dict_0 = {bytes_0: bytes_0, bool_0: float_0}
    tuple_0 = (float_0, dict_0)
    tuple_1 = (bytes_0, bool_0, tuple_0)
    bool_1 = False
    tuple_2 = (bool_0, tuple_1, bool_1)
    module_0.match(tuple_2, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    int_0 = -111
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    bytes_0 = b"\xeb\x15i\xad"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5410():
    str_0 = "kM]q@T6[x]p3U(Y2NU"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5411():
    int_0 = -529
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    str_0 = "y!gj,A"
    tuple_0 = (str_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    str_0 = "QwjA}U`x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    float_0 = 3545.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    str_0 = '1MUu{"05'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    bytes_0 = b"H4\xe2v\x03\x7f\x8dP\xb9\xcb\x02nh\xa9\x13\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    bool_0 = True
    set_0 = {bool_0}
    list_0 = [set_0, bool_0, bool_0]
    list_1 = [list_0, set_0, bool_0, set_0]
    list_2 = [list_1]
    module_0.get_new_command(list_2, list_2)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    bool_0 = True
    str_0 = "C"
    tuple_0 = (bool_0, str_0)
    int_0 = -1719
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    float_0 = 4169.94008
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    int_0 = 367
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_5423():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    int_0 = -183
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    float_0 = -5825.31
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    bytes_0 = b"\xfd\x83\x1d\xad\xdeoC0W\xfbHHTad\xfcm\x92\xfej"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    int_0 = 1812
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    str_0 = "\tl2MhKwht|BwAk]Ju9"
    module_0.match(str_0, str_0)


def test_case_5429():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5430():
    str_0 = "-u+NB2_0(%>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    str_0 = "W%"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    int_0 = 1531
    bytes_0 = b"\x0f\xc6\x87\x12\x19\x1fs*\xde\xfe\xbd\xc1\xb4\xd9\x95\x9d5\xf9Y#"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    float_0 = -31.408
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    float_0 = -2485.87
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    float_0 = 1553.53685
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    str_0 = "=>(Fiu"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    int_0 = -786
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    str_0 = "-SHwSOEaNEy&Y5.\x0b"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    float_0 = -1484.9277
    int_0 = 3787
    set_0 = {float_0}
    tuple_0 = (float_0, int_0, set_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    float_0 = -1424.346
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    bytes_0 = b"\x12\xaf\xc2\xeb\xbf3hf\xa9\xd5\xda}M#m\xc1\x80\xd2D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    float_0 = 1280.890124
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    int_0 = -1122
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    float_0 = 1716.23918
    str_0 = "^T|xh*NtqQ8]C%XQ,3<"
    int_0 = -3059
    str_1 = ""
    dict_0 = {str_0: int_0, str_0: str_0, str_1: float_0}
    module_1.object(**dict_0)


def test_case_5447():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5448():
    bytes_0 = b"@\xb2\x9e\xfd\x19\xf9SaKa:"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    bytes_0 = b"\xc1\xa3\xc1\x185\x91\xbe\xb6\xcc\\\x8b\xbb\xaf\xcbFk"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    bytes_0 = b"|\xcb"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    int_0 = -5524
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    bytes_0 = b"\xb3\xd9;\xab\xd0\x13\x0f)\xfd\x016k\xad\xf0"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    complex_0 = -2298.3 - 438.551771j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    str_0 = "@</-HE[,1hb\reFDB4lIP"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    str_0 = "]"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    int_0 = 2221
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    int_0 = -2322
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    bytes_0 = b"_>\xb5\xd9\x9c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    bytes_0 = b"\xc3\xb0;\x19G\x99\xc1\x1d\xee\xc1\xb2\xbb_B6F >"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    int_0 = 3777
    list_0 = [int_0]
    str_0 = "x,\x0c8K=45E^SZu Tax6"
    bool_0 = False
    tuple_0 = (list_0, str_0, bool_0)
    int_1 = -294
    module_0.get_new_command(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    int_0 = 654
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    bytes_0 = b"\xa9$\xe9W\xdc["
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    list_0 = [set_0, object_0, set_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    complex_0 = 307 - 499.6j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    str_0 = "56(iXoxd!/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5470():
    int_0 = 3155
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5471():
    str_0 = 'Q\r(J(eD.`Uv7b"'
    bytes_0 = b"Xn\t\xaa\xed\x08\xbe\xd5Sxo,\xb7"
    list_0 = [str_0, str_0, bytes_0]
    tuple_0 = (list_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    bytes_0 = b"\xcc\xa4r\xa5\xac\xad\xc3\x86~\xe9e\xad\x7fd\x11\x10"
    tuple_0 = (bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    int_0 = 3957
    module_0.match(int_0, int_0)


def test_case_5474():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5475():
    bytes_0 = b"\xd1\x9a\xc9!\xa1\xc0\xeaGd\xf8u"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5476():
    int_0 = -1075
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5477():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    bool_0 = True
    str_0 = ""
    tuple_0 = (str_0,)
    dict_0 = {bool_0: tuple_0, bool_0: tuple_0, str_0: tuple_0, str_0: str_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    str_0 = "M!|L[ (G,Knc^O\r$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    bytes_0 = b"\xa4\xbe\x1e\x9fM\xcc?X"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5481():
    float_0 = 1261.76
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5482():
    int_0 = -193
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    float_0 = -288.41916
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    int_0 = -1705
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    complex_0 = -4796.2 - 1876.1j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    bytes_0 = b"\xc4V\xb7A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    int_0 = 977
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    bytes_0 = b"@\x97\x86\x82\xdb\x81)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5490():
    int_0 = -730
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5491():
    str_0 = "%w\\\rV{*\x0c3#Oy)~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    bytes_0 = b"\x7f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5493():
    float_0 = -763.377
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5494():
    complex_0 = -4177.76 + 1030.13122j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    int_0 = 2370
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    int_0 = -44
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    int_0 = -1390
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    bytes_0 = b"w\xd8^-\x89\x87\x80"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    bytes_0 = b"\x0er\xf3O\xaf\x04\xe1\xdc$\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    bytes_0 = b"\x05\xef\x06\x14\xce\xde5\x11Yn\xfaV"
    list_0 = [bytes_0]
    module_1.object(*list_0, **bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5501():
    str_0 = "a0u>uy\x0bSRX&=;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5502():
    str_0 = "Z{;|~\tdMdPjGAq]"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    bytes_0 = b"\x08\x94\xfe\xfc\xf4;a\xdb$r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    int_0 = -2636
    str_0 = "BX%#T0m=oB>CgxPr#n"
    list_0 = [int_0, int_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0, **object_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    int_0 = 2518
    bytes_0 = b"\x12Z\xe5\xe6Z\x87\xae\xa3<_r\x10N\xb5\xfe"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    bytes_0 = b"\x8f#\xff\xaa7\x0fs\xaa\x01\xae"
    bytes_1 = b"\xbb\x88\x149W\xbfy.F\xbf\xd9\\\x18"
    list_0 = [bytes_0, bytes_1, bytes_1]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_1,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    str_0 = "Yq3G"
    str_1 = "o/"
    object_0 = module_1.object()
    list_0 = []
    dict_0 = {str_0: str_0, str_1: object_0, str_1: list_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    bytes_0 = b"\x97\x0f\xbe\xca\xee\\\x00\r"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    float_0 = 2423.9616
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    bool_0 = True
    str_0 = "w:/s2zIG.\td\x0cljU6G'\r"
    int_0 = 36
    set_0 = {str_0, int_0}
    bool_1 = False
    tuple_0 = (bool_0, str_0, set_0, bool_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    bytes_0 = b"Z\xf0\x84=NUj\x88Rp\xda5h\xaaE\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    dict_0 = {tuple_0: tuple_0}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    int_0 = -832
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    bytes_0 = b"\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    float_0 = -1570.3
    list_0 = [float_0]
    module_1.object(*list_0)


def test_case_5520():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5521():
    str_0 = "yC1K\tWYv#Sge5FYjD"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    str_0 = "Q|Cgg\x0c "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    float_0 = -4756.152
    list_0 = []
    dict_0 = {float_0: list_0}
    list_1 = [dict_0, dict_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    int_0 = 1245
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    complex_0 = -2300.979448 - 741.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    int_0 = -1871
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5529():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5530():
    bytes_0 = b"{_\xc3\x97\xaa\xdb.e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    str_0 = "q(/7}i-5XCyrnVT\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    bytes_0 = b"\xd3\xcc$\x93\xc2'\x85\x0eG\xccP\x98\x83\xb1H<\xc9-"
    list_0 = [bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    float_0 = 307.8
    str_0 = "#x=gGn)6!\tamVb=]\x0ciJ"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    str_0 = "}-K\\`+"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    int_0 = 3208
    tuple_0 = ()
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    bytes_0 = b"\t\xc98\xad\xf2\tj\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    int_0 = -4
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    float_0 = 482.0
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    str_0 = "8"
    float_0 = 843.47213
    module_0.get_new_command(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    bytes_0 = b"\x1c9zi\xb6\x95\xa4\x19\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    int_0 = -879
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    bool_0 = False
    int_0 = -3175
    list_0 = [bool_0, bool_0, int_0]
    int_1 = -503
    list_1 = [int_0, list_0, int_1, bool_0]
    tuple_0 = (list_0, int_1, list_1)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5545():
    bytes_0 = b"\xdb\xe8\x02"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5546():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    complex_0 = 3153 - 1911.132j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    bool_0 = True
    bytes_0 = b"\xeb"
    str_0 = ">Z4l"
    tuple_0 = (bytes_0, bool_0, str_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    int_0 = 997
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    bytes_0 = b"f\xc6$OHg|\xfbx\xb9\xd5\x116_\xa3"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    bytes_0 = b'\xf0M"\xf2W\xe7\xcfW\xc0\xc1\tDf\xe3P'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    str_0 = "#7[}1j9-OeXOt"
    str_1 = "70~-<?<|@y:Fz"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    none_type_0 = None
    str_0 = "@T fM,G=X%'h|%}Y"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    int_0 = -1902
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    bytes_0 = b"+\xed\x8e\x1e%$$\x8c==Q\x8d\xf4\xf5\xbf\xcb]\\\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    bytes_0 = b"\x8f\x99\x8bJ\xcbQ\x879\xcd\x94\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    str_0 = "{(N0nyv_h-7@j\rIe"
    list_0 = [str_0, str_0, str_0, str_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    float_0 = -707.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    str_0 = "+E!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    bytes_0 = b"v\\\x1c\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    int_0 = -2667
    set_0 = {int_0, int_0, int_0, int_0}
    str_0 = "+(_% \\O?"
    tuple_0 = (int_0, set_0, str_0)
    module_0.match(tuple_0, tuple_0)


def test_case_5562():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5563():
    int_0 = -622
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5564():
    complex_0 = 1141.6557 - 1070.69161j
    bytes_0 = b"\x9b\xe4\r\x8cX\xf4\x99\xc1\x88\x06\xd0\xf5\x89\xc0}6.\x1c\xd9"
    module_0.match(complex_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5565():
    str_0 = "l3fGmrHA?%fP3]MXW"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    int_0 = 1062
    set_0 = {int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_5567():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5568():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    bytes_0 = b"\x08\x05\xf2({B\xfcEr0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    bytes_0 = b"v\xa9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    int_0 = 471
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    str_0 = "*4)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    bytes_0 = b"\x12\xd0\xf2\xa7\x155\xfeP\x02\x9e\xaai\xd4k\xf8\t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    str_0 = "\nD-$1G 4!|-t/wT"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    bytes_0 = b"\xac"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    int_0 = 4830
    bool_0 = True
    list_0 = [int_0, int_0, int_0, bool_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    int_0 = -1380
    dict_0 = {int_0: int_0, int_0: int_0}
    str_0 = "FEt_W3MZ\t~+"
    tuple_0 = (int_0, dict_0, int_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    bytes_0 = b"\xf2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    int_0 = -359
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5581():
    str_0 = "'pElF"
    set_0 = {str_0, str_0, str_0, str_0}
    str_1 = ")mO(E*\t86jR&"
    module_0.match(set_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5582():
    bytes_0 = b"\x9b\x96\xdf\x14t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    float_0 = 1234.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5584():
    int_0 = -122
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5585():
    float_0 = -1079.0
    int_0 = -379
    bool_0 = True
    bool_1 = True
    int_1 = -529
    dict_0 = {float_0: float_0, int_0: int_0, int_0: bool_0, bool_1: int_1}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5586():
    str_0 = "b 45`JeJ4:ZAnv)"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5587():
    str_0 = "MhP8I+NrCw^8lqm\x0c\x0cG9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    int_0 = 1044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    tuple_0 = ()
    float_0 = 569.8
    list_0 = [tuple_0, tuple_0, tuple_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    bytes_0 = b"!D\xc1<=X\x82e\xe3"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5591():
    bytes_0 = b"J\xf6\xa7\xe3x\x08\x07+"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5592():
    bytes_0 = b"\xf2\xed\xbdJ\xd0\xbe\xf8"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5593():
    bool_0 = False
    int_0 = 264
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    str_0 = "5gMC,wY+YS[cT\r[3cZ!x"
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    bytes_0 = b"6\xb9\xfc\xea\xcf\xf4\x9f\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    int_0 = 1249
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    complex_0 = -367.207 - 1706.246j
    list_0 = [complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    str_0 = "QV)_#Yr+%1/-~6y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    int_0 = -246
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    bytes_0 = b"\xc1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    str_0 = "\x0cF\\v19dJ*NK"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    str_0 = '\x0c*3Kfu\x0cGr"Z'
    str_1 = "{~YU35Mw7pP*a"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    int_0 = -729
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    complex_0 = 2534.857 - 701.23j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5606():
    str_0 = "VTnp+c^B9F-Z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5607():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5608():
    str_0 = "k3"
    str_1 = "O`7f-[>\t7:\\_gq"
    dict_0 = {str_0: str_0, str_0: str_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    int_0 = -4974
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    float_0 = -3041.039129
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5611():
    bytes_0 = b"\xbc\xd6u\xef\x0e\x91\xcbX\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5612():
    int_0 = 1950
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5613():
    int_0 = -590
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5614():
    float_0 = -14.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    complex_0 = 3183.704 - 2875.5919j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    bytes_0 = b"\xe1\x0f\xd4{ig\r=\x15)\xf8\x0f\x01\xa5\xc6\xa0$\xcd\x1a"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5617():
    str_0 = "hO$X0xZoi+M5N:y >"
    str_1 = "J"
    bool_0 = False
    bytes_0 = b"sq.\x1b\x80"
    dict_0 = {str_0: str_0, str_1: bool_0, str_0: bytes_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5618():
    str_0 = "g\x0bnPE\x0c\nXsHy\x0bP]"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5620():
    float_0 = 233.040715
    bytes_0 = b"\xa0\x83\x83E\x9eX\x84\xa8[\x88*\xb7\x8b"
    tuple_0 = (float_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5621():
    int_0 = -1133
    set_0 = set()
    tuple_0 = (int_0, set_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    int_0 = -237
    module_0.get_new_command(int_0, int_0)


def test_case_5623():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5624():
    bool_0 = True
    bool_1 = False
    list_0 = [bool_0, bool_1]
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    int_0 = 470
    str_0 = "bx-O8jFa\\@\rL1{#'W"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    int_0 = 4296
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    bytes_0 = b"=<G\xf6 \x17\xae\x9e\xe5\xff?\xde\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    complex_0 = 2604.33 - 544.65j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5631():
    float_0 = 478.42
    bool_0 = False
    bool_1 = True
    int_0 = 747
    set_0 = {int_0, bool_1, bool_0, bool_1}
    tuple_0 = (bool_0, bool_1, int_0, set_0)
    tuple_1 = (float_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    bool_0 = True
    int_0 = 2024
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    complex_0 = 211.5 + 1685.819998j
    module_0.match(complex_0, complex_0)


def test_case_5635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5636():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    bytes_0 = b"\xbe&\xac2"
    set_0 = {bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    bytes_0 = b"3\xe9o\xdcs\x1c\xb8\xa8`\x0e\xad8N\xe1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    bytes_0 = b"<\xeb\x7f\x8f\xf9\xb0i[\xf2\xec\xd7\xd6k\xb1\x04\\\xb5g\xa0\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    bytes_0 = b"\xd7\xd6\xee\x86\x8a\x19E\x84\xefw\xa7?M"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5641():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5642():
    complex_0 = -3258.48202 + 1090.6754j
    str_0 = "\nU}C-ym,XGib2"
    set_0 = {complex_0, complex_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5643():
    str_0 = "qIuODn:ZV@)\r)ftzJ_"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5644():
    float_0 = -3180.46
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    int_0 = 1522
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5646():
    float_0 = 2191.979
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5647():
    str_0 = '\\DE\t=HyD",.HMm'
    none_type_0 = None
    str_1 = "8(~H"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_0: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5648():
    float_0 = 1407.39
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    float_0 = 1143.7959
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    int_0 = 1115
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    list_0 = []
    set_0 = set()
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5652():
    bytes_0 = b"TkM\xc8\xa2o\xae\xfd\xca\\\xb9\xbd\xebB\x07\xcc\xc5;"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5653():
    str_0 = "/O46lHoAF~'6A"
    none_type_0 = None
    str_1 = "H?l<iVS qJwq qyN\nhG"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5654():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5655():
    complex_0 = -2259.69754 - 363.5356j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5656():
    str_0 = "nR\x0cszKxjbpP>$`mB"
    str_1 = "-jDd#1/Mu7]bzt>V\x0b=G"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5657():
    int_0 = -1066
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5658():
    str_0 = "()V\tW$?%8[@~u="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5659():
    bytes_0 = b"P\xeb\xfa\x1c\xc9\xe00\xdd\x12\xc3\xbdz"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    str_0 = "O3IPo6{:l7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5661():
    str_0 = "*hX;&yp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5662():
    none_type_0 = None
    list_0 = []
    bool_0 = False
    dict_0 = {
        none_type_0: list_0,
        bool_0: none_type_0,
        bool_0: list_0,
        none_type_0: list_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5663():
    str_0 = "{KoN$TP[s@kz2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5664():
    bytes_0 = b"\x9e\xa4\x1b\x98[;j\x8a*z^\xe7\xc1\x9e\\\xf8\xbb!\x92"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5665():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5666():
    tuple_0 = ()
    bool_0 = True
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5667():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5668():
    str_0 = "XV@#n@zzU\t.'<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5669():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_5670():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5671():
    complex_0 = -2014.0899 - 313j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5672():
    int_0 = -1964
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5673():
    str_0 = "~&9Du`.SXJ*<\n5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5674():
    float_0 = -1757.307
    str_0 = "mfaRUagsx"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5675():
    float_0 = -3136.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5676():
    float_0 = 1456.27246
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5677():
    bytes_0 = b"\xa7RI\\D"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5678():
    bytes_0 = b"\x97q\xf0\xdb\x1a\xeb\x0b\x10\xec\xd7&kW\x95\x00\xbb\re\x95\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5679():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5680():
    int_0 = -613
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5681():
    int_0 = 974
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5682():
    int_0 = 639
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5683():
    str_0 = "}gj,w\nE1&c&bNC^mTHC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5684():
    str_0 = "33=lb1KV^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5685():
    bool_0 = False
    str_0 = "_"
    none_type_0 = None
    str_1 = "q\\P}:s"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_0: none_type_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5686():
    complex_0 = -2261.5412 - 1696j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5687():
    int_0 = -3769
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5688():
    bytes_0 = b"D\x0fL"
    bool_0 = True
    int_0 = -2554
    tuple_0 = (bytes_0, bool_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5689():
    int_0 = -157
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5690():
    float_0 = 4552.4
    str_0 = "/y0d\n(G?"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5691():
    set_0 = set()
    object_0 = module_1.object(*set_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5692():
    str_0 = "WSsi("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5693():
    str_0 = ".#"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5694():
    str_0 = "^<"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5695():
    int_0 = -1477
    bool_0 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: object_0, object_0: bool_0, bool_0: int_0}
    str_0 = "#I[)W:{2"
    tuple_0 = (int_0, dict_0, str_0, str_0)
    module_0.get_new_command(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5696():
    str_0 = '"h2b 7N)+[r*RAC)>\r'
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (set_0,)
    list_0 = [set_0]
    tuple_1 = (set_0, str_0, tuple_0, list_0)
    module_0.get_new_command(str_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5697():
    set_0 = set()
    int_0 = 3054
    list_0 = []
    dict_0 = {int_0: int_0, int_0: set_0}
    tuple_0 = (int_0, list_0, dict_0, list_0)
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5698():
    float_0 = 744.1
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5699():
    object_0 = module_1.object()
    list_0 = [object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5700():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5701():
    float_0 = 405.45697
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5702():
    int_0 = 2050
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5703():
    str_0 = '2^5G">Pd'
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5704():
    bool_0 = True
    str_0 = "}&{Luamw\x0c"
    tuple_0 = (bool_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5705():
    str_0 = '!7up#"@oq!$y'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5706():
    bool_0 = True
    float_0 = 1742.6
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5707():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bytes_0 = b"H\xfd\xa3T\xe2\x0f\x9d\xe6\xad\xfa\xdb\xc3\xc6*^\xae"
    tuple_0 = (dict_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5708():
    str_0 = "\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5709():
    list_0 = []
    str_0 = ""
    dict_0 = {str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5710():
    str_0 = 'F[W"=*GVKDF5N,0'
    list_0 = [str_0, str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5711():
    str_0 = "Ima,YUgk72KT_Lb6m"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5712():
    str_0 = "9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5713():
    int_0 = -446
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5714():
    complex_0 = -513.52 + 1848.91j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5715():
    int_0 = -727
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5716():
    complex_0 = -1984.957 - 1509.06j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5717():
    bytes_0 = b"2\xe4(\x8f\x8e\x96\xb5x\x82\xa5\xe7\x8f\xa3|\xb7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5718():
    str_0 = "l%IAM\rKVR|\n"
    bytes_0 = b"\t\x9b\x01\xdaf\xec\xfe\x0f\n\x15>\xd7"
    tuple_0 = (str_0, bytes_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5719():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5720():
    int_0 = -3460
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5721():
    str_0 = "{\tiX79oAi~"
    module_0.get_new_command(str_0, str_0)


def test_case_5722():
    pass


def test_case_5723():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5724():
    bytes_0 = b"\xeb\xcf\xc8\x93T\xce\x99\x8b"
    str_0 = "0m\r!!kQ4n1"
    tuple_0 = (str_0, str_0, str_0)
    tuple_1 = (bytes_0, tuple_0)
    set_0 = {tuple_1}
    int_0 = 422
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5725():
    int_0 = -1689
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5726():
    float_0 = 2429.28
    set_0 = {float_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_5727():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, tuple_0, bool_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5728():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    object_0 = module_1.object()
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5729():
    int_0 = -3760
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5730():
    set_0 = set()
    bool_0 = True
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5731():
    str_0 = "Rh\n>M\nfT%=6"
    str_1 = 'KZ)+Bt`KSWw"4'
    module_0.get_new_command(str_0, str_1)
