# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import man_no_space as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "7ahH\t{U,bd?}#"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = ">GnbXI8`|?N~"
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\x00\xaa\xe9\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    float_0 = -490.189337
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    int_0 = -200
    dict_0 = {bool_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "er;S$' vJ'+a"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = ":K*4G3dN3)bde(?%Ei<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_1}
    module_0.match(set_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = -1762
    object_0 = module_1.object()
    set_0 = {int_0, int_0, int_0, object_0}
    module_0.match(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    float_0 = 1488.088
    bytes_0 = b"\x93\x84\x8e"
    float_1 = 1145.156934
    dict_0 = {bytes_0: bytes_0, float_0: float_1, bytes_0: float_0}
    tuple_0 = (float_0, bytes_0, float_1, dict_0)
    module_0.get_new_command(tuple_0, float_1)


def test_case_27():
    pass


@pytest.mark.xfail(strict=True)
def test_case_28():
    bytes_0 = b"\x82\xee.\x04\xb3\x7f\xc6\x86"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    int_0 = 816
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "z{\\~fwv[[Y_8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    complex_0 = -2325 - 165.901733j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = "T0Gwm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    bool_0 = False
    bytes_0 = b"\x18m"
    set_0 = {bool_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_37():
    bool_0 = True
    list_0 = [bool_0]
    int_0 = -1455
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


def test_case_40():
    pass


@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = "\x0c"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = "uayfuK\x0b"
    module_0.get_new_command(str_0, str_0)


def test_case_44():
    pass


@pytest.mark.xfail(strict=True)
def test_case_45():
    bool_0 = True
    bool_1 = True
    bytes_0 = b"\xc6,j_5\x1c\xb9"
    dict_0 = {bool_0: bool_1}
    tuple_0 = (bool_0, bool_1, bytes_0, dict_0)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    bytes_0 = b"\xd0x\xc9\x8ab\xa9\x11\xc5\xf0a\xad\x00\x93\x7f\x03\xc5e\x98\xe9$"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    bytes_0 = b"-\x8c8\xe6\xf9\xbe1\xd6$\xae"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    str_0 = "}i"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_49():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_50():
    bytes_0 = b"\x08H~\x8b\x86\xabS\xe3\xdf\x0b40\xc6\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, bool_0, dict_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_52():
    pass


def test_case_53():
    object_0 = module_1.object()


def test_case_54():
    pass


@pytest.mark.xfail(strict=True)
def test_case_55():
    bytes_0 = b"Iv\xe0\xf0\xde>\xbb\x12"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    int_0 = 1
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    set_1 = {bool_0}
    module_0.get_new_command(set_0, set_1)


@pytest.mark.xfail(strict=True)
def test_case_58():
    bool_0 = False
    bytes_0 = b"\xd4"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_59():
    str_0 = "xiUhSYRc\n`2&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_60():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_61():
    float_0 = -946.69
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_62():
    int_0 = 1788
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_63():
    int_0 = -997
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_64():
    complex_0 = 1044.382 + 2408.4j
    set_0 = {complex_0}
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (set_0, tuple_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_65():
    none_type_0 = None
    bytes_0 = b"k\xbd$\xef\xf2\xd7}\xe8\x13-\xe3"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_66():
    bytes_0 = b"\xf0\xb8X\xc0\x02\xd8\xc1+\x84"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_67():
    float_0 = 2158.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_68():
    complex_0 = 58.276 - 1605.44j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_69():
    bytes_0 = b'K\xc1"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_70():
    float_0 = 126.66816
    module_0.get_new_command(float_0, float_0)


def test_case_71():
    pass


@pytest.mark.xfail(strict=True)
def test_case_72():
    float_0 = -2854.0
    set_0 = {float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_73():
    str_0 = "_C)\rX#?0 ?f[=jI;w=x"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_74():
    float_0 = 2620.37
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_75():
    bytes_0 = b"H\x85=\xbe\xf7\xa6\xfbx\x82A\x0e9\xbe\xc4O\xad\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_76():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_77():
    pass


@pytest.mark.xfail(strict=True)
def test_case_78():
    complex_0 = 1289.8696 + 875.02622j
    list_0 = []
    object_0 = module_1.object(*list_0)
    tuple_0 = (complex_0, object_0, complex_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_79():
    bytes_0 = b"\x1d\x10?4\xc7\xa9"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_80():
    str_0 = "(t"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_81():
    int_0 = -483
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_82():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


def test_case_83():
    pass


@pytest.mark.xfail(strict=True)
def test_case_84():
    complex_0 = 2397.124571 - 623.007042j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_85():
    bool_0 = True
    float_0 = -33.269
    dict_0 = {bool_0: bool_0, bool_0: float_0, float_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_86():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_87():
    int_0 = -885
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_88():
    bytes_0 = b"\xf0\x08\xf2\x0f"
    tuple_0 = (bytes_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_89():
    float_0 = -1334.89823
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_90():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_91():
    str_0 = "*K9,H="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_92():
    str_0 = "nxfnT2$v?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_93():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    str_0 = "')7O=8Od:j]"
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_94():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_95():
    bytes_0 = b"\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_96():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_97():
    float_0 = 2857.471
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_98():
    complex_0 = -1530.201 - 2312.82213j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_99():
    int_0 = 248
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_100():
    float_0 = -3663.435
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_101():
    float_0 = 3715.0
    set_0 = {float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_102():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_103():
    str_0 = "U)SC]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_104():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_105():
    int_0 = 456
    dict_0 = {int_0: int_0, int_0: int_0}
    str_0 = "QQ;0\n/?.}g\n"
    tuple_0 = (int_0, dict_0, str_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_106():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_107():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_108():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_109():
    str_0 = "M"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_110():
    float_0 = 699.0921
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_111():
    bytes_0 = b"\x82j0\x8f\xa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_112():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_113():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_114():
    bytes_0 = b"\x14q6y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_115():
    bytes_0 = b"\xaf_x\x14\xc1(\x02\xb7\t&Y\xe2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_116():
    str_0 = "\x0cP$F \t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_117():
    none_type_0 = None
    str_0 = "YC#"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_118():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0)
    list_0 = [tuple_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_119():
    float_0 = -347.033885
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_120():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: tuple_0, bool_0: tuple_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_121():
    int_0 = 1639
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_122():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_123():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_124():
    float_0 = 684.05
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_125():
    str_0 = "ko'o's'ld0viK\t\r:XMhg"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_126():
    bytes_0 = b"\x12"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_127():
    tuple_0 = ()
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_128():
    str_0 = '"oGUaw=x&14+\x0b'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_129():
    tuple_0 = ()
    module_1.object(*tuple_0, **tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_130():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_131():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_132():
    str_0 = "_${B4{0\t{8V$~TAV2o("
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_133():
    float_0 = 2129.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_134():
    none_type_0 = None
    complex_0 = -2969.07394 - 1599j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_135():
    float_0 = 234.880349
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_136():
    float_0 = -1938.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_137():
    bytes_0 = b"Lb${"
    float_0 = -2747.6
    module_0.match(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_138():
    bool_0 = False
    float_0 = 329.4
    dict_0 = {bool_0: bool_0, bool_0: float_0, float_0: bool_0, bool_0: float_0}
    tuple_0 = (dict_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_139():
    str_0 = "&=S!.+"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_140():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_141():
    int_0 = -2060
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_142():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_143():
    int_0 = 3640
    int_1 = 1026
    set_0 = {int_0, int_1}
    module_0.get_new_command(set_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_144():
    int_0 = 3238
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_145():
    bytes_0 = b"\x9c\x8a\xdb"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_146():
    pass


@pytest.mark.xfail(strict=True)
def test_case_147():
    bytes_0 = b"\xa7\x93\xa9\xc1\x0e\xb8\xf1\xea\x9a_@\xda\x83\xb0\xaf\xb2\n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_148():
    int_0 = -2921
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_149():
    int_0 = 1439
    list_0 = [int_0]
    str_0 = "{cx0"
    none_type_0 = None
    str_1 = "!x`S"
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_150():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_151():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_152():
    bytes_0 = b"2fP$V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_153():
    str_0 = "G}Cv."
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_154():
    bytes_0 = b"\x15\xaa\xf1O"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_155():
    int_0 = 604
    bytes_0 = b"\xc9\xb2\x9b\xd2[\x9a\x9bU\x84\xa8\x895"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_156():
    bytes_0 = b"\x18\xd7\xcc![\x98U\xd0ns#\x8d\xf8\t\xa1\x10\x8f\x13\xdd"
    bool_0 = False
    dict_0 = {bytes_0: bool_0, bool_0: bytes_0, bool_0: bool_0, bool_0: bytes_0}
    list_0 = []
    tuple_0 = (bytes_0, bytes_0, dict_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_157():
    int_0 = 1926
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_158():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_159():
    bytes_0 = b"\xfdK\x0c\xa6\x046\r\xc7\x8f\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_160():
    str_0 = '^$F");Ea1'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_161():
    float_0 = -1811.903353
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_162():
    str_0 = "^\x0b.cpswMgk$tmv`3b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_163():
    bytes_0 = b"-\xa3\xdar\x11"
    module_0.match(bytes_0, bytes_0)


def test_case_164():
    pass


@pytest.mark.xfail(strict=True)
def test_case_165():
    bytes_0 = b"\xbf[\x92\x93\x8d\xf0\xcf\t\xbb\x92L\xf6"
    complex_0 = -2229.95 - 1343.299145j
    dict_0 = {bytes_0: bytes_0, bytes_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_166():
    float_0 = -451.4084
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_167():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_168():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_169():
    float_0 = -2674.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_170():
    complex_0 = -1768.3 + 1086j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_171():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_172():
    bytes_0 = b"O\xc0\n\x1e\x92\x9d\x0b\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_173():
    int_0 = 1989
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_174():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_175():
    str_0 = 'c"u6a(t45Z@S^bsJ+_'
    str_1 = '*/5l"IlH\x0b>[pwz'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_176():
    int_0 = 2268
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_177():
    str_0 = "_\tN;uN.7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_178():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_179():
    none_type_0 = None
    bytes_0 = b""
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_180():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_181():
    bytes_0 = b"L\x17>`\x1aj\x90H\xe2$sp2u\x1e"
    list_0 = [bytes_0, bytes_0, bytes_0]
    set_0 = set()
    tuple_0 = (list_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_182():
    complex_0 = -1682 + 268.8j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_183():
    int_0 = -2865
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_184():
    str_0 = "tmO8`7B2M\t.VW"
    none_type_0 = None
    str_1 = "e2!$Ft\tAs){*v=a"
    str_2 = "\\w;'AV"
    str_3 = "l>\r8F!Nce#.ZC(0>FZ"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
        str_3: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_185():
    none_type_0 = None
    str_0 = "<ih=U6bE"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_186():
    bytes_0 = b"\x18\xce\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_187():
    int_0 = 395
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_188():
    pass


@pytest.mark.xfail(strict=True)
def test_case_189():
    int_0 = -2301
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_190():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_191():
    pass


@pytest.mark.xfail(strict=True)
def test_case_192():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_193():
    bytes_0 = b'8\xbe"1\xa7\xb5px\xd4\xb5K\x8b\x8f\xfe\xa0\xe5'
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_194():
    int_0 = 100
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_195():
    int_0 = -101
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_196():
    tuple_0 = ()
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_197():
    int_0 = -932
    int_1 = -1362
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_198():
    bytes_0 = b"\x92\xcc\xa3C\xe4\xba\xa0!s\xf5$`O"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_199():
    bool_0 = False
    float_0 = 327.1
    tuple_0 = (float_0,)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_200():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_201():
    str_0 = "7FPbL="
    set_0 = {str_0, str_0}
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_202():
    bytes_0 = b"DA$\xfc\x82"
    module_0.match(bytes_0, bytes_0)


def test_case_203():
    pass


@pytest.mark.xfail(strict=True)
def test_case_204():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_205():
    bytes_0 = b"\xcdBC\xb5\xe7\xfe\x12\xbb\xd4`\x81b\xa5\xa3\xc9Lt\xa3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_206():
    float_0 = 2066.0
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_207():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_208():
    complex_0 = -5334.5 + 1776.417268j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_209():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_210():
    str_0 = "8c#@/HJ~1r9|\x0b%'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_211():
    complex_0 = -1063.64963 + 1909.067101j
    dict_0 = {}
    list_0 = [complex_0, dict_0, complex_0]
    module_0.get_new_command(list_0, list_0)


def test_case_212():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_213():
    str_0 = "@Q"
    module_0.match(str_0, str_0)


def test_case_214():
    pass


@pytest.mark.xfail(strict=True)
def test_case_215():
    int_0 = -158
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_216():
    bytes_0 = b"!\xdclU\x96*"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_217():
    dict_0 = {}
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    tuple_0 = (dict_0, bool_0, list_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_218():
    complex_0 = 3514 - 541.375j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_219():
    int_0 = 3461
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_220():
    str_0 = "s&yV]L 90|Y  5\x0c_,,7"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_221():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_222():
    int_0 = -1457
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_223():
    float_0 = 3321.0
    list_0 = [float_0, float_0]
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_224():
    float_0 = 2318.93159
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_225():
    bool_0 = True
    complex_0 = 1172.8148 - 991.521871j
    list_0 = [bool_0, bool_0, bool_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_226():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_227():
    float_0 = 5612.91
    module_0.get_new_command(float_0, float_0)


def test_case_228():
    pass


@pytest.mark.xfail(strict=True)
def test_case_229():
    str_0 = 'B*HChv{%C6lr";{1{e'
    str_1 = "TKNHO6MX7<'BbjSa~>W"
    bytes_0 = b"JV\xaf\x1e\x87W%k\x07\xd6\xa1\xfch\xe5\xb3\xe1\xcd\xd7Ox"
    tuple_0 = (str_0, str_1, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_230():
    float_0 = -2542.352
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_231():
    bool_0 = False
    set_0 = {bool_0}
    module_1.object(**set_0)


def test_case_232():
    pass


@pytest.mark.xfail(strict=True)
def test_case_233():
    str_0 = "0"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_234():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_235():
    object_0 = module_1.object()
    complex_0 = 4664.54 - 2309.48425j
    tuple_0 = (object_0, complex_0, object_0)
    tuple_1 = (object_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_236():
    complex_0 = -1111.5 - 814.560165j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_237():
    float_0 = -1933.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_238():
    int_0 = -180
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_239():
    str_0 = " J [gs0q6b+yft"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_240():
    str_0 = "rm,!~530qdK6@"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_241():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_242():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_243():
    str_0 = "h!Yoqa!t^!>43 "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_244():
    str_0 = 'A({"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_245():
    bytes_0 = b"\xf1\xd0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_246():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_247():
    bytes_0 = b"\x0ea+\xb3\xc0\xa8\xce\xb82T\xda\xca\xbbQ\x8a?\xf3\xa5g#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_248():
    complex_0 = 2305 - 2649.154j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_249():
    int_0 = -1864
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_250():
    bool_0 = True
    bytes_0 = b"\xaa\xe3\xe1\xac\xfb(\xc9\x96+\x9bPmg\xc5L<\xce\xf1"
    tuple_0 = (bool_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_251():
    str_0 = "p5<fygTmEk?B+sR"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_252():
    bytes_0 = b"L\x8b\x8f\xc9\xa8\xc1\xe01\xe96\x9bL\xa8h\xec\x1c"
    bool_0 = False
    list_0 = [bytes_0, bool_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, bool_0, bool_0, list_0)
    tuple_1 = (bytes_0, bool_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_253():
    str_0 = 'c&p ~"\x0bX3zI%x5C!)'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_254():
    int_0 = 796
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_255():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


def test_case_256():
    pass


@pytest.mark.xfail(strict=True)
def test_case_257():
    int_0 = 1229
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_258():
    float_0 = 2166.00189
    bool_0 = False
    bytes_0 = b"\x0fj\x83^\x98\x16\xe9\x0fZ\xae\x02"
    tuple_0 = (float_0, bool_0, bool_0, bytes_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_259():
    complex_0 = -1351.10432 - 2567.162j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_260():
    complex_0 = 127.6 - 1393.632j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_261():
    str_0 = "`|3@h\\W9vsW!`{`"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_262():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_263():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_264():
    str_0 = ";"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_265():
    int_0 = -1801
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_266():
    str_0 = ""
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_267():
    bytes_0 = b"\xcf=\x0b\xe1\x16kU\xa6R\x12\xc1\x98\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_268():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_269():
    pass


def test_case_270():
    pass


def test_case_271():
    pass


@pytest.mark.xfail(strict=True)
def test_case_272():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_274():
    str_0 = "v~i"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, str_0, str_0, str_0]
    module_1.object(*list_1)


def test_case_275():
    pass


@pytest.mark.xfail(strict=True)
def test_case_276():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_277():
    pass


@pytest.mark.xfail(strict=True)
def test_case_278():
    bytes_0 = b"\xfa\xf0\xaa\xfe3\x07\xff$\xdb\xf4h\xf0%\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_279():
    str_0 = "j;DdD>N)wW"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_280():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_281():
    none_type_0 = None
    module_1.object(*none_type_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_282():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_283():
    int_0 = -1892
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_284():
    float_0 = 119.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_285():
    str_0 = "U\x0bH/0LiK8Nsk9pBz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_286():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_287():
    int_0 = -575
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_288():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_289():
    float_0 = 2757.5339
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_290():
    float_0 = 486.4692
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_291():
    str_0 = "\rqE4B:_8@ jKKaseBuW\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_292():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_293():
    bytes_0 = b"e\xe1\x1e\xd9=Z\xa9\xc0=?\xc6\xceH\x0e}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_294():
    float_0 = 1813.2
    module_0.get_new_command(float_0, float_0)


def test_case_295():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_296():
    int_0 = 195
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_297():
    float_0 = 2493.436105
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_298():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_299():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_300():
    str_0 = "\rYM }R,E+bN62F"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_301():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_302():
    str_0 = "_&cvaO"
    str_1 = 'S9hDB"c '
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_303():
    float_0 = 5034.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_304():
    str_0 = "ipw\x0bHfRfz#f"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_305():
    int_0 = -2928
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_306():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_307():
    complex_0 = 2618.55462 + 519.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_308():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_309():
    int_0 = 926
    module_0.match(int_0, int_0)


def test_case_310():
    pass


@pytest.mark.xfail(strict=True)
def test_case_311():
    str_0 = "^>ZkI;W<vS//4\\"
    float_0 = 767.8794
    list_0 = [str_0, float_0, str_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_312():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_313():
    int_0 = -700
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_314():
    float_0 = -12.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_315():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_316():
    complex_0 = 2302.38724 - 1400.684j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_317():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_318():
    bool_0 = False
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_319():
    bytes_0 = b"?i\xcbT\x0e9\xca\xe5*\x7f7i\x15"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_320():
    int_0 = 729
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


def test_case_321():
    pass


@pytest.mark.xfail(strict=True)
def test_case_322():
    float_0 = 346.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_323():
    str_0 = "l\\\t\roq"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_324():
    int_0 = -1440
    set_0 = {int_0}
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_325():
    str_0 = "#uo%mv[W[;g<;h{\\\n"
    bytes_0 = b"\x83&\xe20\xfeC\xd6"
    set_0 = {str_0, str_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_326():
    str_0 = "yzN?4AOJ]H]A4aSo&\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_327():
    int_0 = 2194
    int_1 = -4054
    dict_0 = {int_1: int_1}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_328():
    str_0 = " V{cL8I"
    bytes_0 = b"\x82\xda"
    dict_0 = {str_0: bytes_0, str_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_329():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_330():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_331():
    float_0 = -2320.4
    bytes_0 = b"\xf5\x0c\xcazz\x91\x831\x1b\x91y\xa5!\xf2"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_332():
    str_0 = ""
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    bool_1 = False
    dict_0 = {bool_1: str_0, bool_1: tuple_0}
    tuple_1 = (tuple_0, bool_1, dict_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_333():
    object_0 = module_1.object()
    int_0 = -2276
    str_0 = "\x0c>O6F"
    tuple_0 = (object_0, int_0, str_0)
    list_0 = [tuple_0, tuple_0, str_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_334():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_335():
    tuple_0 = ()
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_336():
    bytes_0 = b"2\x01|\xd8\x15\x18cq\x82\xcd\xc9\xc0u\xf2\x08C\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_337():
    bytes_0 = b"c\x1a\xb3\xa3\x9cK\n\xe7\xc5fG\xbe\xe0z5eP\x9f"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_338():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_339():
    bool_0 = False
    list_0 = [bool_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_340():
    str_0 = "x18 >"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_341():
    str_0 = ">7g8;rmj~C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_342():
    bytes_0 = b">\xa7\xe1\xf4\xa4\xeb\x0b&\xaa"
    module_0.match(bytes_0, bytes_0)


def test_case_343():
    pass


@pytest.mark.xfail(strict=True)
def test_case_344():
    bytes_0 = b"\x00=\x80\xec\xcc"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    tuple_0 = (dict_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_345():
    bytes_0 = b"\xb177\x8es\xd2\xe8\x90\xa6\xede=,\xc9\x92>\xc3*\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_346():
    int_0 = 429
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_347():
    complex_0 = 4929.785445 - 2254.6396j
    object_0 = module_1.object()
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: object_0,
        complex_0: complex_0,
    }
    module_0.match(dict_0, dict_0)


def test_case_348():
    pass


@pytest.mark.xfail(strict=True)
def test_case_349():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_350():
    str_0 = '5:{[F"_dvwk6'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_351():
    str_0 = " \x0c=P+Wu]:SI/@!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_352():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


def test_case_353():
    pass


@pytest.mark.xfail(strict=True)
def test_case_354():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_355():
    float_0 = -5146.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_356():
    bytes_0 = b"OO`-\xd7\xaaG\xca2\xf6\xf3\xdd\x97\xb3\x0bVC"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_357():
    set_0 = set()
    int_0 = 4883
    bytes_0 = b"\xbf\xcf\xdd4\xf1P\xdd\x7f\xb2waQpk"
    tuple_0 = (set_0, int_0, bytes_0, set_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_358():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_359():
    str_0 = "\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_360():
    bytes_0 = b"c\xde\xa7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_361():
    bytes_0 = b"/\xb3\xa6\xa8L\xc3\xffX\xceH\ru\xba\xa3\xe1>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_362():
    str_0 = 'T{R)4"3=R1/OHT^}vw'
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_363():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_364():
    float_0 = 1582.55
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_365():
    float_0 = 2201.796
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_366():
    bytes_0 = b'\xcd\xd1"\xb7\xf7\xa2\xa8\xc2~\x17\xd0\xeb$\xee\xd7\x19&\xdf>'
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_367():
    pass


@pytest.mark.xfail(strict=True)
def test_case_368():
    float_0 = -1295.536376
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_369():
    tuple_0 = ()
    float_0 = -1510.6958
    tuple_1 = (tuple_0, float_0, float_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_370():
    complex_0 = -1033 - 1605.8999j
    bool_0 = True
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_371():
    int_0 = 212
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_372():
    str_0 = "}`s[3X(-iS\\]t\\/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_373():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_374():
    bytes_0 = b"\xdf\xef3\x16v\xd3n\xcc"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_375():
    str_0 = "SY2}5[{y3d9{\\%kxNO8w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_376():
    str_0 = "AhT\rE"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_377():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_378():
    int_0 = -1617
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_379():
    bool_0 = False
    complex_0 = 653.271895 - 975.52j
    module_0.get_new_command(bool_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_380():
    bytes_0 = b"\x08\x12E\xfc\xb5\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_381():
    str_0 = "Ph\\@"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (str_0, list_0, list_0, str_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_382():
    bytes_0 = b"\x0f(~\x11\x10\xfb\xd0)\xcbc\xe8\xefT\x14|"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_383():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_384():
    bytes_0 = b"I\xd33\x8c\xcf\xc4_\xe0\x9f7\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_385():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_386():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_387():
    str_0 = "z~N0g$b`q\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_388():
    str_0 = "\x0bA$IPx:!"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_389():
    int_0 = 1201
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_390():
    int_0 = 1059
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_391():
    float_0 = -542.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_392():
    str_0 = ">-(udgW<;^j\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_393():
    bool_0 = False
    bytes_0 = b"A\x1fN\xf7\xa8#"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_394():
    int_0 = -1504
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_395():
    str_0 = "uj^:yB[G%hp+%9r(KD8"
    bytes_0 = b"\xbc\xdb,\xdaZ\xe47YT\xeb'\xcdU\""
    list_0 = [str_0, bytes_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_396():
    int_0 = 1463
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_397():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_398():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_399():
    str_0 = "G"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_400():
    int_0 = 261
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_401():
    complex_0 = -397.732311 + 364.51585j
    int_0 = -1941
    set_0 = {complex_0, int_0, int_0}
    tuple_0 = (complex_0, complex_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_402():
    int_0 = -2846
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_403():
    int_0 = 891
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_404():
    complex_0 = 1514.768 + 670.615j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_405():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_406():
    bytes_0 = b"\xa7\x95m\xd8J\xa0\n\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_407():
    int_0 = 2572
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_408():
    bool_0 = True
    bool_1 = True
    int_0 = -933
    list_0 = [bool_0, bool_1, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_409():
    int_0 = -2829
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_410():
    str_0 = "\x0b?Rln}+~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_411():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_412():
    bool_0 = True
    int_0 = 126
    dict_0 = {bool_0: int_0}
    dict_1 = {int_0: int_0}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_413():
    str_0 = "I|"
    set_0 = set()
    tuple_0 = (str_0, str_0, set_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_414():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_415():
    float_0 = -1796.992
    bool_0 = True
    bytes_0 = b"\x18\xb5-Z\xcf/\xad<\xde\x1fz("
    tuple_0 = (float_0, bytes_0)
    dict_0 = {float_0: bool_0, float_0: bool_0, bool_0: tuple_0}
    tuple_1 = (float_0, dict_0, tuple_0)
    list_0 = [tuple_0, bytes_0, float_0, bool_0]
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_416():
    int_0 = -456
    bytes_0 = b"B\xdc\xc6^4\xcb\x8a,\xda_\x8f\xdeZ\xed"
    tuple_0 = (int_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_417():
    complex_0 = 1684.795 + 195.29j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_418():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_419():
    str_0 = "xl."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_420():
    bytes_0 = b"\xc5g"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_421():
    bytes_0 = b"V[\xe1\x14\xefi\xf33\xa14\x15\xbd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_422():
    bytes_0 = b"\xb8\xaa4\xe6T~\xceI5\x88\xb4\xe1"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_423():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_424():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: object_0, object_0: bool_0, object_0: object_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_425():
    str_0 = "eg\"'dV$g<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_426():
    float_0 = 214.6
    module_0.match(float_0, float_0)


def test_case_427():
    pass


def test_case_428():
    pass


@pytest.mark.xfail(strict=True)
def test_case_429():
    complex_0 = -736.532 + 186.150852j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_430():
    str_0 = ":@ZVW\rK'd"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_431():
    int_0 = 295
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_432():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_433():
    str_0 = "/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_434():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_435():
    int_0 = -1300
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_436():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_0: bool_1, bool_1: bool_0}
    list_0 = [bool_0, bool_1]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_437():
    bytes_0 = b"\xf2.\xa3\xbc\xf5\xec#b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_438():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_439():
    int_0 = 1761
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_440():
    float_0 = 542.87
    module_0.match(float_0, float_0)


def test_case_441():
    pass


@pytest.mark.xfail(strict=True)
def test_case_442():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_443():
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = False
    set_0 = {bool_1}
    tuple_0 = (list_0, list_0, set_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_444():
    bytes_0 = b"\xa7Lu\x8a\xe6\xf7\xc5B\x7f\x82\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_445():
    int_0 = 2781
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_446():
    bool_0 = False
    list_0 = [bool_0]
    tuple_0 = (bool_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_447():
    complex_0 = 1628.67672 - 1490j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_448():
    str_0 = "XR'.F\tyXz.Bum|>[jT~^"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_449():
    bool_0 = True
    set_0 = {bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_450():
    str_0 = "FLN7zmvrPt,GYm/}X@Cy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_451():
    int_0 = 4335
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_452():
    int_0 = 2887
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_453():
    bool_0 = True
    int_0 = -374
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_454():
    int_0 = -2011
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_455():
    str_0 = "j.p.YEW|9|e=PU4q\\1"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_456():
    int_0 = -1372
    set_0 = {int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_457():
    int_0 = 1907
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_458():
    bytes_0 = b"\x95*\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_459():
    int_0 = -151
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    str_0 = "V"
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_460():
    str_0 = "[uql'R"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_461():
    int_0 = -745
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_462():
    bytes_0 = b'fh$\xda\xc8\xc2\xee\xd0.\x1c\xb3"6x'
    complex_0 = -2406 + 1823.699559j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_463():
    int_0 = 3743
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_464():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_465():
    none_type_0 = None
    float_0 = -271.49
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_466():
    bytes_0 = b"+\xb8\x03\xdaQ"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_467():
    complex_0 = -1730.4948 + 1136.69375j
    module_0.get_new_command(complex_0, complex_0)


def test_case_468():
    pass


@pytest.mark.xfail(strict=True)
def test_case_469():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_470():
    int_0 = 442
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_471():
    bytes_0 = b"\xce;\x0f\x85h\xc7\xfb\x82\x83o\xc9\xe08\xf3\x05]\x81\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_472():
    int_0 = -1306
    module_0.get_new_command(int_0, int_0)


def test_case_473():
    pass


@pytest.mark.xfail(strict=True)
def test_case_474():
    int_0 = -1240
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_475():
    bytes_0 = b"\xdc\xc0\xc8\x9a\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_476():
    complex_0 = 3596.89 + 2628j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_477():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_478():
    int_0 = -1091
    str_0 = '|"ot\\Uf\rEc\rp/,'
    dict_0 = {int_0: str_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_479():
    float_0 = 2041.370599
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_480():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, bool_0, tuple_0)
    tuple_2 = (tuple_1,)
    dict_0 = {}
    module_0.get_new_command(tuple_2, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_481():
    int_0 = 2648
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_482():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_483():
    float_0 = 1351.15
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_484():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_485():
    bytes_0 = b'J\xee\xf1\x10\x17\xd0\xf1\xeb\xa2"\xca\\}\xe6\xfc\x16\x95\xe9\xecy'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_486():
    bytes_0 = b"\xc8\x01\xc5kD\xf2\xa4\xb7u\x84\xa7Z\xb6g\xb1\x07u\x02\x8c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_487():
    none_type_0 = None
    list_0 = [none_type_0]
    str_0 = ""
    str_1 = "vCE59FD*F"
    str_2 = "#?.bmS\tnE_f"
    dict_0 = {str_0: list_0, str_1: str_1, str_0: list_0, str_2: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_488():
    int_0 = -1443
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_489():
    bytes_0 = b"\xc5\x92\xa2y\x9f{N\xce+\xb8\x19\xcc5"
    str_0 = "M~'_wNr\x0c<\t5C/e"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_490():
    float_0 = -2206.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_491():
    int_0 = -1932
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_492():
    bytes_0 = b"#^\xeam\xae\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_493():
    pass


@pytest.mark.xfail(strict=True)
def test_case_494():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_495():
    int_0 = -749
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_496():
    float_0 = -1121.032
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_497():
    int_0 = -2625
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_498():
    str_0 = "\x0bDk\r~s%Aw;?aGB^+;L"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_499():
    int_0 = 104
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_500():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    str_0 = 'y+:@ "pNQYmcU;8'
    list_0 = [tuple_1, tuple_1, tuple_0, str_0]
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_501():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_502():
    bytes_0 = b"\xcf\x07+J<T\xa1\xba\xb0\xa2\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_503():
    tuple_0 = ()
    float_0 = 2114.87
    tuple_1 = (tuple_0, float_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_504():
    bytes_0 = b"\x93\x8cT:_"
    module_0.match(bytes_0, bytes_0)


def test_case_505():
    pass


@pytest.mark.xfail(strict=True)
def test_case_506():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_507():
    int_0 = 1988
    set_0 = {int_0}
    tuple_0 = (int_0, set_0, int_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


def test_case_508():
    pass


@pytest.mark.xfail(strict=True)
def test_case_509():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_510():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_511():
    int_0 = -1801
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_512():
    float_0 = 1862.59
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_513():
    bytes_0 = b"\xedwd\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_514():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_515():
    bytes_0 = b"=\x97&GZ\x14\xf0\xf3\xf1@\xa0"
    module_0.match(bytes_0, bytes_0)


def test_case_516():
    pass


@pytest.mark.xfail(strict=True)
def test_case_517():
    int_0 = -100
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_518():
    int_0 = 1658
    module_0.match(int_0, int_0)


def test_case_519():
    pass


@pytest.mark.xfail(strict=True)
def test_case_520():
    str_0 = "o$q6S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_521():
    int_0 = -1210
    bytes_0 = b"B\xd3\x8c\x1e-\x95"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_522():
    str_0 = "4P4YT#A+YzOD32P}$K*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_523():
    bytes_0 = b","
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_524():
    int_0 = -200
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_525():
    int_0 = -1952
    float_0 = -2036.33838
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_526():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_527():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_528():
    str_0 = "|0=m~d8Itu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_529():
    bool_0 = False
    list_0 = []
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


def test_case_530():
    pass


@pytest.mark.xfail(strict=True)
def test_case_531():
    str_0 = "+!P\\QVD#0,_gc3%sH}Q"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_532():
    int_0 = 1762
    str_0 = "Yf@hki$\rCCV"
    bytes_0 = b"r\x040\xaf\xe5y"
    tuple_0 = (int_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_533():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_534():
    str_0 = "[Fk)G=KWl"
    module_0.get_new_command(str_0, str_0)


def test_case_535():
    pass


@pytest.mark.xfail(strict=True)
def test_case_536():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_537():
    str_0 = "]-yBd*85$Y9fU\rO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_538():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_539():
    complex_0 = 3500.99 - 1637.563j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_540():
    complex_0 = 512.65507 + 2465.1854j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_541():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_542():
    int_0 = 225
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_543():
    bytes_0 = b"K!4\xe4\xfev\xb0\\.\xe5v0\x8b\xc0<0"
    tuple_0 = (bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_544():
    bytes_0 = b"\xfe\x10^u\x19"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_545():
    str_0 = "q*wU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_546():
    int_0 = 2597
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_547():
    int_0 = 1324
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_548():
    pass


@pytest.mark.xfail(strict=True)
def test_case_549():
    bytes_0 = b"*7\xf5\xcaC!-\xff\x16\xcd\xca\x815)#{O(\x1d\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_550():
    int_0 = -481
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_551():
    str_0 = "Yex&dU"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_552():
    float_0 = 315.536
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_553():
    str_0 = "H6_PzDFd};wHJb["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_554():
    int_0 = 473
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_555():
    int_0 = 3774
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_556():
    str_0 = "XEQyh%oRzl\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_557():
    str_0 = "E)!`>JGr{D9T9E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_558():
    bytes_0 = b"\xe2\x1e\x8bEE`\xc7\x1f)p\x89"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_559():
    str_0 = "^YY%;NY3^YJ\x0bBbMq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_560():
    bytes_0 = b"E\xbb\xc4\xa3T"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_561():
    float_0 = 604.92
    set_0 = {float_0, float_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_562():
    float_0 = 215.18647
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_563():
    bytes_0 = b"\x89\xca@?\xd3\x11\xb4\x9a\x1b\xd4|\xc3\xf2\x08C\xf4\x15\xf6\xcc\xb7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_564():
    bytes_0 = b"/nw\xd4\x8cc\x13\xf6\x80\xc2{\xdal#$-\xb9"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_565():
    int_0 = 4143
    module_0.match(int_0, int_0)


def test_case_566():
    pass


@pytest.mark.xfail(strict=True)
def test_case_567():
    bytes_0 = b"\xd8\xf2\xa3dW\xe8\xdas!\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_568():
    float_0 = 1725.76822
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_569():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_570():
    int_0 = 1182
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_571():
    float_0 = -455.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_572():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_573():
    float_0 = 315.587262
    str_0 = "M/c\x0bP)3U?Eky"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_574():
    float_0 = -3811.07203
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_575():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_576():
    complex_0 = -217.88259 - 2897.87j
    object_0 = module_1.object()
    module_0.get_new_command(complex_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_577():
    float_0 = -731.39561
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_578():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_579():
    float_0 = -97.693692
    module_0.get_new_command(float_0, float_0)


def test_case_580():
    pass


@pytest.mark.xfail(strict=True)
def test_case_581():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_582():
    bytes_0 = b"e\xad\xcc\x8dPJ\xf0n\x16';\x94\x13\x1er\xe1\xf5\xa5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_583():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_584():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_585():
    bytes_0 = b"\xc3Q\x06z\x02"
    str_0 = " +h]0cO7Y|P"
    set_0 = {bytes_0, bytes_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_586():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_587():
    bytes_0 = b"2\xe4\x05S\x038\xfb\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_588():
    bytes_0 = b"AZ\xba\xdf'z}\xb9ed\x15\xdeu\xa4\x88\x0by"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_589():
    str_0 = "n+'#<%\n__pE[0FT_MI("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_590():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_592():
    bytes_0 = b"\xf4\xd7bT"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_593():
    int_0 = 1182
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_594():
    int_0 = -2118
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_595():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_596():
    float_0 = -1615.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_597():
    bytes_0 = b"\xc5\x9bTF\x00x\xc3$n\x84=\xf2\x9d\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_598():
    str_0 = "p\r*7:FO>Du)0v8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_599():
    int_0 = -276
    bytes_0 = b"\xfa\xfe\x97]"
    tuple_0 = (int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_600():
    int_0 = -1478
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_601():
    bytes_0 = b"<\x84\\\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_602():
    int_0 = -1529
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_603():
    int_0 = 1332
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_604():
    list_0 = []
    bytes_0 = b"\xd19\x7f\xacn\x1f\xa6\xf0\xd8\x8f\xf5"
    bool_0 = True
    tuple_0 = (list_0, list_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_605():
    bytes_0 = b"\x14\xd0N\\\xca\x12\xb9B\x99\xce\x1e\x1d\xe1\x8d\xcde\xe9"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_606():
    str_0 = "jCOsMkSo?=\\\te"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_607():
    bytes_0 = b"\x1a\xfe\xceN^\xefzN!\xbcM\xf0\xa80\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_608():
    int_0 = -734
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_609():
    str_0 = "\r`\x0b4dtIO=_N5\tNm^%bi7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_610():
    bytes_0 = b"I\x80.&\xd8\xb9{\xd6K,\xc8\xcd\xeb\xfcs\x92:\x9c\xec"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_611():
    int_0 = -2548
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_612():
    int_0 = 1402
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_613():
    str_0 = '="pE@cat'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_614():
    str_0 = "xvh#wD"
    list_0 = [str_0, str_0, str_0, str_0]
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_615():
    str_0 = "uk\n8b9(VF"
    bytes_0 = b"\x99\xc0"
    float_0 = 122.89678
    list_0 = [str_0]
    tuple_0 = (bytes_0, float_0, list_0)
    str_1 = "{s'C1K%|GEa*"
    tuple_1 = (str_0, tuple_0, str_1)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_616():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_617():
    bytes_0 = b"K\x02\x88\x10sSDT\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_618():
    int_0 = 1053
    set_0 = {int_0, int_0}
    list_0 = [set_0, int_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_619():
    float_0 = -1844.674514
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_620():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_621():
    int_0 = -76
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_622():
    str_0 = "j\\2Ie"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_623():
    int_0 = -2134
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_624():
    float_0 = -2107.5139
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_625():
    str_0 = 'hKw"x;A4Voe<U\t4RpH3H'
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


def test_case_626():
    pass


@pytest.mark.xfail(strict=True)
def test_case_627():
    bytes_0 = b"\x1c\xd6\x9f"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_628():
    str_0 = "=NyLO!%]>?YPw>aga"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_629():
    bool_0 = False
    bytes_0 = b"\xdb\xbf\x90\x15Y\xa23\xb0+\xbf\xa1\xa4"
    tuple_0 = (bool_0, bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


def test_case_630():
    pass


@pytest.mark.xfail(strict=True)
def test_case_631():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_632():
    str_0 = "#^vpxBV1+ UIk#ynjV"
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_633():
    bytes_0 = b"\xc9\x17\x1f\xdaC\xc3(&3k\x1a"
    bytes_1 = b"\xdb\xe7G\xbe\x86\x12\x9f\xe1a\x1a\x16\xd1*z"
    tuple_0 = (bytes_0, bytes_1, bytes_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_634():
    bytes_0 = b"\xa0\xc4\xc5\xf1P\xdc/\xb8\xc0\xe0\x82\xb2\xd1\x14"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_635():
    pass


@pytest.mark.xfail(strict=True)
def test_case_636():
    bytes_0 = b"S\x16D\xd6b08VLu\x7f\xc6\xaf\xde\x96k\xd0\x03\xbd"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_637():
    float_0 = 2527.02287
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_638():
    dict_0 = {}
    int_0 = -2998
    tuple_0 = (dict_0, int_0, int_0, int_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_639():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_640():
    float_0 = -1362.743
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_641():
    object_0 = module_1.object()
    object_1 = module_1.object()
    module_0.get_new_command(object_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_642():
    int_0 = 937
    module_0.match(int_0, int_0)


def test_case_643():
    pass


@pytest.mark.xfail(strict=True)
def test_case_644():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_645():
    complex_0 = 869 - 1522.2j
    tuple_0 = (complex_0,)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_646():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_647():
    str_0 = "\"phs'\r\t,y`n\x0c?]'1"
    tuple_0 = (str_0, str_0)
    bytes_0 = b"\xdd\xac\x99Pv\xf9\xd4\x17\xbco\x12"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_648():
    str_0 = "#FI{L'(M&F~Y3WIQ#4/"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_649():
    none_type_0 = None
    float_0 = 65.379252
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_650():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_651():
    bytes_0 = b"+a\x1f9\xd7\xbe\xb6\xfefDC\xda,V=\xafE"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_652():
    float_0 = -693.27939
    module_0.match(float_0, float_0)


def test_case_653():
    pass


@pytest.mark.xfail(strict=True)
def test_case_654():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_655():
    int_0 = 486
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_656():
    str_0 = "/X\\z(B8deW'X;[(B+JW^"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_657():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_658():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_659():
    str_0 = '^PC+&,"cT'
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_660():
    bytes_0 = b"]:Q\xca\x89\x86\n\x97\xf7\x13Gm"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_661():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_662():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_663():
    str_0 = "@$@X}/?QAW4\\(,^"
    module_0.match(str_0, str_0)


def test_case_664():
    pass


@pytest.mark.xfail(strict=True)
def test_case_665():
    bool_0 = False
    int_0 = -1287
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_666():
    int_0 = 2111
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_667():
    int_0 = -437
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_668():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_669():
    int_0 = -120
    list_0 = [int_0, int_0]
    str_0 = ""
    bool_0 = True
    dict_0 = {str_0: bool_0, str_0: int_0, str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_670():
    int_0 = 1753
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_671():
    int_0 = -1507
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_672():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_673():
    bytes_0 = b"\x86\xc1Y\x85\xd3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_674():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


def test_case_675():
    pass


@pytest.mark.xfail(strict=True)
def test_case_676():
    str_0 = "%cS}`)]"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_677():
    float_0 = 2950.48873
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_678():
    list_0 = []
    complex_0 = -1899.6 - 264.391585j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_679():
    float_0 = -2943.056421
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_680():
    bytes_0 = b"b\xa5\xa5\x99\xc3b+\x93\xcd\n\xad\xb7\xeeP\xf3\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_681():
    float_0 = 2720.6613
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_682():
    str_0 = "O\ntvu"
    int_0 = 2082
    set_0 = {str_0, int_0, str_0, str_0}
    tuple_0 = (str_0, set_0, int_0)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_683():
    str_0 = "174\tK{,I6L~NkH'}s"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_684():
    complex_0 = -1107.912286 - 646j
    dict_0 = {complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_685():
    int_0 = -1337
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_686():
    bytes_0 = b"\x81H\xc9\x85\r\x17nH\x1d\xdbA\xed7(\xbcW\xe0\xde"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_687():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_688():
    bytes_0 = b"\r\xe6\x81T&"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_689():
    str_0 = "*Ql\nZ$Ym@J"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_690():
    str_0 = "p@<(;KZ|\\tyW}W+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_691():
    int_0 = -883
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_692():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_693():
    bytes_0 = b"\xf7x?"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_694():
    float_0 = 3979.29
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_695():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_696():
    complex_0 = -4855.761613 - 185.188j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_697():
    bytes_0 = b"\xfe\x19s\x7f\x95%\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_698():
    int_0 = -1307
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_699():
    bytes_0 = b"\xf0F,|H\x94`\x19&\xde\x86\x98\x7f"
    int_0 = 2486
    bool_0 = True
    dict_0 = {int_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0}
    tuple_0 = (bytes_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_700():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_701():
    int_0 = 1708
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_702():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_703():
    bytes_0 = b"/\xd4\xa3\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_704():
    complex_0 = 3535.17612 - 3163.049j
    module_0.get_new_command(complex_0, complex_0)


def test_case_705():
    pass


@pytest.mark.xfail(strict=True)
def test_case_706():
    dict_0 = {}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_707():
    str_0 = "L<iVhwhN3"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_708():
    int_0 = 881
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_709():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_710():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_711():
    bytes_0 = b"!_/\xbc\x98~C=\xb1Yg\xa4\xbd\xe3\xc5<"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_712():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_713():
    bool_0 = False
    str_0 = "m."
    none_type_0 = None
    str_1 = ","
    str_2 = "S\x0bBRRf6/GUxluPmQjX$"
    dict_0 = {
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_714():
    bytes_0 = b"/\x89\xe4\x92\x1e4\xc2\x90\xb2|\t\xa52Q"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_715():
    str_0 = " T=_OjH*M@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_716():
    complex_0 = 693.799 - 726j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_717():
    bytes_0 = b'\x17\x07\xdd^<d\xaa"\xe4p'
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_718():
    float_0 = -2033.0
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_719():
    str_0 = "4]p@@[EH^}C36hKW0.*,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_720():
    int_0 = 2009
    int_1 = -1457
    bytes_0 = b"\x93v\x1a.\xaa\x9f\x9b"
    dict_0 = {int_0: int_1, int_0: int_0, int_0: int_1, bytes_0: int_1}
    list_0 = [int_1, dict_0, int_1, int_0]
    int_2 = -894
    tuple_0 = (dict_0, list_0, int_2)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_721():
    bytes_0 = b"\x07\xec\xfd\xd4G\x85g\xbfv\xfb\xa2\xf9\xa9\x14\xf7n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_722():
    str_0 = ""
    str_1 = "hA22N(w`]by"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_723():
    complex_0 = 1085.025 + 3385.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_724():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_725():
    int_0 = -4017
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_726():
    float_0 = 468.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_727():
    int_0 = 3666
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_728():
    str_0 = ":g},Q"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_729():
    bytes_0 = b"Q\xf9\\(\xe7"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_730():
    bytes_0 = b"\x89\xb7\x08G\x9aA<b\x1f\xc2P\xbe\xbd\\\x9f"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_731():
    bytes_0 = b"\xac\xe0G9\xa2+y\x95\x03\x9fP\x12\x83\xf1\xf3"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_732():
    bytes_0 = b"\xe3P\x86\x11\x8dp\x817\xb9\x93\x15q\x07\xb3\xc8\x05"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_733():
    bytes_0 = b"%\xd4\x00jC\xfaL\xbb\x05"
    str_0 = "b[^:~StH+A1XZy8JJo"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_734():
    int_0 = 1240
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_735():
    int_0 = -324
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_736():
    complex_0 = 489.073 - 540j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_737():
    str_0 = "/1\tq<\tOp"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_738():
    bytes_0 = b"\x85\x9fm\x9f\x9a05\x9eE\x1fY"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_739():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_740():
    none_type_0 = None
    int_0 = -3571
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_741():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_742():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_743():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_744():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_745():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_746():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_747():
    bool_0 = True
    bytes_0 = b"\xa0F\xa57\x1a^\xe1\xbe\xa2U\xd8\xd8o\xaa`\xf9"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_748():
    int_0 = 3075
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_749():
    bytes_0 = b"\xee\x1d\xb6\xdeyG]N0\xc2{\x88\xb7\xd0V\x00)TW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_750():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, bool_0)


def test_case_751():
    pass


def test_case_752():
    pass


@pytest.mark.xfail(strict=True)
def test_case_753():
    dict_0 = {}
    bool_0 = True
    list_0 = [dict_0, bool_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_754():
    str_0 = "$\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_755():
    bytes_0 = b"\xbb +`\x1a\x985\xc1\xbb\xc8\xdc_gW\xbb\xf2\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_756():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_757():
    bytes_0 = b",\xb6\x14\xee"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_758():
    int_0 = -518
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_759():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_760():
    str_0 = "Aq6@NR.y-qhv'"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_761():
    str_0 = "y^jkUqsv"
    int_0 = 10
    str_1 = "Jx;8u\x0bhxwjly]ri"
    bool_0 = True
    int_1 = -3021
    dict_0 = {str_0: int_0, str_1: bool_0, str_0: int_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_762():
    complex_0 = -9.5624 - 4411j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_763():
    float_0 = 471.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_764():
    int_0 = 3245
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_765():
    int_0 = -2770
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_766():
    complex_0 = -6100.191 - 432.0906j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_767():
    bool_0 = False
    bytes_0 = b"C~\x92E"
    str_0 = "[A]yNvk1oG=iP"
    tuple_0 = (bool_0, bool_0, bytes_0, str_0)
    list_0 = []
    list_1 = [tuple_0, list_0, list_0, bool_0]
    module_0.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_768():
    int_0 = 356
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0]
    list_1 = [list_0, set_0, list_0, int_0]
    str_0 = "v;f{m5Dm"
    str_1 = "\x0c+9o6\tpTOF"
    dict_0 = {str_0: list_1, str_1: list_0}
    module_1.object(*list_1, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_769():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_770():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


def test_case_771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_772():
    float_0 = 178.758
    list_0 = [float_0, float_0]
    str_0 = 'ld"t!bI\\/FX`)\x0b1\\@'
    bytes_0 = b"T\x8dD\x1e3\xddTe\x8f\x08\x1d"
    tuple_0 = (list_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_773():
    str_0 = '9XB:1\t"1'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, str_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_774():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_1: bool_0, bool_1: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_775():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_776():
    int_0 = 2524
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_777():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_778():
    none_type_0 = None
    str_0 = "q*\tlh K$c]n[LS"
    list_0 = [str_0]
    str_1 = '"nK^\n-=G&nJ1f'
    dict_0 = {str_0: list_0, str_0: str_0, str_1: none_type_0, str_0: str_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_779():
    float_0 = -340.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_780():
    bytes_0 = b"\xa6\x04]>s\xc6N\xd3\xbe0\x14Qr\x8a\x88\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_781():
    bool_0 = False
    str_0 = "Ioia:3\x0b\\q\nE=~#\rD{l6L"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_782():
    float_0 = -2166.1577
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_783():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_784():
    float_0 = -413.809
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_785():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_786():
    int_0 = 2673
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_787():
    bool_0 = False
    float_0 = -2402.384
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_788():
    int_0 = -1487
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_789():
    int_0 = 769
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_790():
    object_0 = module_1.object()
    bool_0 = True
    str_0 = "F$gbF0LaTqh8lOP\nE0J"
    int_0 = 65
    tuple_0 = (object_0, bool_0, str_0, int_0)
    dict_0 = {tuple_0: int_0, object_0: object_0, object_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_791():
    float_0 = 1442.51433
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_792():
    str_0 = "&,8-r`Z1Q4."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_793():
    str_0 = '"'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_794():
    int_0 = -497
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_795():
    bytes_0 = b"\x01\xe1R(\xaa\x1e\xd9y]\x8c\x8f\x89\xf7\x02\x1c+\xe2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_796():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    float_0 = 3150.47
    tuple_0 = (dict_0, list_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_797():
    bytes_0 = b'|\xaa\x83"\xc7L}g\xb9\x05\xbb[\x92d\x840\t\xdf\x19'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_798():
    float_0 = -320.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_799():
    int_0 = 2532
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_800():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_801():
    bytes_0 = b"\xda\x0fml\x04\xfb\xa8\xaeV\x8f\x89"
    float_0 = 2528.8342
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_802():
    float_0 = 2284.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_803():
    int_0 = -2076
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_804():
    object_0 = module_1.object()
    dict_0 = {}
    list_0 = [dict_0]
    tuple_0 = (object_0, dict_0, list_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_805():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_806():
    bytes_0 = b"z#Q{<VZ\xe9\xa4\n\x90w\x10"
    set_0 = {bytes_0}
    list_0 = [bytes_0, bytes_0, set_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_807():
    int_0 = 1710
    dict_0 = {}
    float_0 = 116.36682
    tuple_0 = (int_0, dict_0, float_0, dict_0)
    str_0 = "=0`2i$Dc%lIZ"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_808():
    bytes_0 = b"\xc5!\xed\xa6\xc2\xbc\x0f\xaf}\x0c\xd8\xa1D\x96qej\xb68\x07"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_809():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_810():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_811():
    str_0 = "B/o!~YTT+Yu"
    bool_0 = False
    list_0 = [str_0, bool_0, bool_0]
    dict_0 = {str_0: list_0}
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_812():
    str_0 = "0/8=fL>uya/u5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_813():
    str_0 = "YZ7t:?V_KBK'\x0b;`\\\\\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_814():
    float_0 = -2071.636313
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_815():
    bytes_0 = b"\xc5\xe8B8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_816():
    pass


@pytest.mark.xfail(strict=True)
def test_case_817():
    int_0 = -1395
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_818():
    dict_0 = {}
    bool_0 = False
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_819():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_820():
    float_0 = -777.960498
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_821():
    float_0 = 3449.32421
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_822():
    complex_0 = 1159.149 - 2415j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_823():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_824():
    str_0 = "sPED"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_825():
    str_0 = "isD\\J\x0bqGEz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_826():
    float_0 = 191.7
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0]
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_827():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_828():
    bytes_0 = b"aS\xe3J:\xb0\x9e"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_829():
    str_0 = "!*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_830():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    dict_0 = {}
    module_0.get_new_command(set_0, dict_0)


def test_case_831():
    pass


@pytest.mark.xfail(strict=True)
def test_case_832():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_833():
    bytes_0 = b"\xbb^#'J"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_834():
    pass


@pytest.mark.xfail(strict=True)
def test_case_835():
    float_0 = 402.7564
    str_0 = "<K1G!KT\r0J"
    module_0.match(float_0, str_0)


def test_case_836():
    pass


@pytest.mark.xfail(strict=True)
def test_case_837():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_838():
    int_0 = -2367
    tuple_0 = (int_0,)
    dict_0 = {tuple_0: tuple_0}
    bytes_0 = b"2\xb8\xe5\xf1\xd4)~\xd6t\xa6\x11\x8a\x87A"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_839():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_840():
    bool_0 = True
    str_0 = "(<WBuuSLes\x0b&\x0c>AG7]mg"
    list_0 = [bool_0, str_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_841():
    str_0 = "c\x0c4C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_842():
    str_0 = "i\rOH/C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_843():
    bytes_0 = b"\xef\x05<"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_844():
    bytes_0 = b"\x8d\x8f=5\\\xbd\x9e (\x83\x17"
    module_0.match(bytes_0, bytes_0)


def test_case_845():
    pass


@pytest.mark.xfail(strict=True)
def test_case_846():
    int_0 = 2892
    bool_0 = True
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_847():
    str_0 = "L"
    module_0.get_new_command(str_0, str_0)


def test_case_848():
    pass


@pytest.mark.xfail(strict=True)
def test_case_849():
    str_0 = "O-C_4ri>ar3&Z@$n"
    set_0 = {str_0}
    bytes_0 = b"?\x89\x91\xf3\x11\xda\xb0\xbc\xdf\xeb\x16\xa3\\\xf8\x8c"
    tuple_0 = (str_0, set_0, bytes_0)
    float_0 = 1821.051
    list_0 = [tuple_0, float_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_850():
    complex_0 = 145.5013 + 2313j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_851():
    str_0 = "2y"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_852():
    bytes_0 = b"\x91\xb2p<\x95\xc0[\xa5\x95_"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_853():
    str_0 = "T"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_854():
    bytes_0 = b'\x8a\x9b"\xbf'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_855():
    str_0 = ""
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_856():
    bool_0 = False
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_857():
    complex_0 = -307.18288 + 500.3j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_858():
    object_0 = module_1.object()
    str_0 = 'N"Alh%N,i\rp04'
    bool_0 = True
    tuple_0 = (object_0, str_0, bool_0)
    bytes_0 = b"&."
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_859():
    int_0 = -1417
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_860():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_861():
    int_0 = 3852
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_862():
    int_0 = 1328
    dict_0 = {int_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_863():
    int_0 = -492
    object_0 = module_1.object()
    dict_0 = {int_0: int_0, int_0: int_0, object_0: int_0}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_864():
    int_0 = 3598
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_865():
    str_0 = "?Bh\txG-{{y@a\x0b<RnTU"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_866():
    float_0 = -2146.556
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_867():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_868():
    str_0 = "uuBB\rK8ULm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_869():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_870():
    int_0 = -283
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_871():
    int_0 = -2753
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_872():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_873():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_874():
    str_0 = ")\t"
    bool_0 = False
    str_1 = "[=r*LLH!`8)\x0b8\nse0FY"
    str_2 = "v0_m&?M\x0b\n"
    dict_0 = {str_0: bool_0, str_0: str_0, str_1: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_875():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_876():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_877():
    bool_0 = True
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    set_0 = {tuple_1, tuple_0, tuple_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_878():
    bytes_0 = b""
    float_0 = -1661.295
    tuple_0 = (bytes_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_879():
    str_0 = "TY5"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_880():
    bool_0 = False
    bytes_0 = b"\x98\xc5 (\xc3y\xce]B\x9a\x18\xb4g\xf7\x94"
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bytes_0: bool_0, bytes_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_881():
    int_0 = -509
    module_0.match(int_0, int_0)


def test_case_882():
    pass


@pytest.mark.xfail(strict=True)
def test_case_883():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_884():
    int_0 = -2324
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_885():
    int_0 = 2783
    list_0 = [int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_886():
    bytes_0 = b'\x06\xd2\x01"\xdc\x08<\xa9\xfe\x87\x1fG'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_887():
    bytes_0 = b""
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_888():
    str_0 = "*"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_889():
    str_0 = "!%'Kh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_890():
    bytes_0 = b"\xcd\x1e\xa3\x87\x19qe\xc0x"
    bytes_1 = b"\xf5\xc4\xb23\xe9\x0cT\xb2\xf1e\x83S+\xf9z["
    tuple_0 = (bytes_1,)
    tuple_1 = (tuple_0, bytes_0)
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, tuple_1: tuple_0, tuple_1: bytes_1}
    tuple_2 = (bytes_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_891():
    str_0 = "D3 7=g<Q\nS\x0c'7dMW*dw"
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (str_0, bool_0, tuple_0, bool_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_892():
    int_0 = -941
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_893():
    bytes_0 = b"{\xb3\x9e\n^"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_894():
    str_0 = "[\x0bb=fWz\x0ctvkN!~"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_895():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_896():
    int_0 = -167
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_897():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_898():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_899():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_900():
    int_0 = 563
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_901():
    bytes_0 = b'\x1b\xd3"a\x81/\xea\xe2\x8a'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_902():
    none_type_0 = None
    bool_0 = True
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_903():
    complex_0 = -703 - 195.628213j
    module_0.get_new_command(complex_0, complex_0)


def test_case_904():
    pass


@pytest.mark.xfail(strict=True)
def test_case_905():
    int_0 = -2737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_906():
    int_0 = -585
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_907():
    bytes_0 = b"\xae\xf7\xbb \xd2u\x0b\xb0\\\xc4L'[\x1c\x81\xa6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_908():
    float_0 = -2821.0
    module_0.get_new_command(float_0, float_0)


def test_case_909():
    pass


@pytest.mark.xfail(strict=True)
def test_case_910():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_911():
    float_0 = 2967.007
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_912():
    str_0 = ">Q749M\x0cAJt\n("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_913():
    float_0 = -882.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_914():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_915():
    float_0 = -580.385
    set_0 = {float_0, float_0, float_0, float_0}
    list_0 = [set_0, float_0, set_0, set_0]
    tuple_0 = (list_0, list_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_916():
    float_0 = -3434.68314
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_917():
    str_0 = "&nT|K}U0m"
    module_0.get_new_command(str_0, str_0)


def test_case_918():
    pass


@pytest.mark.xfail(strict=True)
def test_case_919():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_920():
    object_0 = module_1.object()
    str_0 = "5)3q\\BkE,\\Nel\t"
    list_0 = [object_0, str_0]
    module_0.match(list_0, object_0)


def test_case_921():
    pass


@pytest.mark.xfail(strict=True)
def test_case_922():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_923():
    int_0 = 507
    module_0.get_new_command(int_0, int_0)


def test_case_924():
    pass


@pytest.mark.xfail(strict=True)
def test_case_925():
    str_0 = "e<:\rc"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_926():
    str_0 = "9EKj8S2&JseC\ts"
    module_0.get_new_command(str_0, str_0)


def test_case_927():
    pass


@pytest.mark.xfail(strict=True)
def test_case_928():
    bytes_0 = b"\xbf-\xcc]\t\xd3\xd6D)\xc1\xf2"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    str_0 = "epj-s\x0c7/X2)_=ZvS+j#'"
    list_0 = [dict_0, dict_0]
    bytes_1 = b"\x91U\x13\x81hJ\xd8\x17\xe9\xf4<\x16=p\xb4\xf9\x98\xe6"
    tuple_0 = (dict_0, str_0, list_0, bytes_1)
    list_1 = [tuple_0, tuple_0, tuple_0, dict_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_929():
    str_0 = "rPC=M*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_930():
    float_0 = -2732.67352
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_931():
    str_0 = "=J''*&}\n>8]^C+/Q`m\n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_932():
    float_0 = 2979.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_933():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    bool_0 = True
    tuple_0 = (object_0, set_0, bool_0)
    list_0 = [tuple_0, bool_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_934():
    str_0 = "E*mA%yM1+F%!3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_935():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_936():
    float_0 = -901.981476
    list_0 = [float_0]
    str_0 = "WqVLol[kzy"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_937():
    int_0 = -943
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_938():
    str_0 = "uO|U>\x0bAkx"
    str_1 = "_1HB(G\nNQwsF"
    str_2 = 'Ex1[=X^w5.(<"@*&MQ'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_939():
    int_0 = -840
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_940():
    complex_0 = -298.82 - 3458.85j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_941():
    float_0 = -436.83156
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_942():
    int_0 = -3049
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_943():
    float_0 = 1953.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_944():
    int_0 = 718
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_945():
    str_0 = "xqMhv)eT_c\x0b+t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_946():
    str_0 = "+EL{Belv,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_947():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_948():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_949():
    str_0 = "A\ngKV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_950():
    float_0 = -4447.876
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_951():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_952():
    int_0 = 4097
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_953():
    int_0 = -1166
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_954():
    str_0 = "[*J^b*yGI uS3zN"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_955():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_956():
    str_0 = '(="(x=I5>QRMx\x0c:^qC\nS'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_957():
    bool_0 = True
    bytes_0 = b"\x00\xc3\xcf\x1f\x0c=T\x8a\t99\x1f\xf4\x83d#\x86\x84\xe2"
    set_0 = {bytes_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_958():
    float_0 = 2028.028
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_959():
    str_0 = "\r\x0c"
    module_0.match(str_0, str_0)


def test_case_960():
    pass


@pytest.mark.xfail(strict=True)
def test_case_961():
    str_0 = "Bw!7\tjaN6Lw %aS:~%q8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_962():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    bytes_0 = b"\xe1\x17\xeb\xd2p\x04q\x0c\xdf\xa8\x1e5"
    bytes_1 = b"o\xa6\xce*Gd\nP\xbdM\xe46N"
    tuple_1 = (dict_0, bytes_0, dict_0, bytes_1)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_963():
    float_0 = -1305.11742
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_964():
    int_0 = 1973
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_965():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_966():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_967():
    str_0 = "=%w\x0cz"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_968():
    str_0 = "/AW\x0cF6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_969():
    bytes_0 = b"["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_970():
    str_0 = ".CN"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_971():
    bool_0 = True
    dict_0 = {}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_972():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_973():
    bytes_0 = b"\x8al\x80\xad:\x97\xee\xdb\\\x93`V\x1e\xc5\xf25\x12\x93(\xc2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


def test_case_974():
    pass


@pytest.mark.xfail(strict=True)
def test_case_975():
    float_0 = -328.0
    list_0 = [float_0, float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_976():
    tuple_0 = ()
    bytes_0 = b"\xbdNE\xe6\xab\x9e\xbe\x8e\xc2\xb3b\x8a?"
    set_0 = {tuple_0, tuple_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_977():
    none_type_0 = None
    float_0 = -1660.0
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_978():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_979():
    pass


@pytest.mark.xfail(strict=True)
def test_case_980():
    str_0 = "T\t"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_981():
    pass


@pytest.mark.xfail(strict=True)
def test_case_982():
    int_0 = -4600
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_983():
    float_0 = 755.852
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_984():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_985():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_986():
    bytes_0 = b"\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_987():
    float_0 = 3104.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_988():
    bytes_0 = b"\x8b\xa5O\xe5S#\x95\xf5#\x9dg\xe6l\xf4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_989():
    bool_0 = False
    str_0 = "r\t"
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_990():
    bytes_0 = b"\x16\xd3uy\xe6\xd8\xf4\xd9n"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_991():
    pass


@pytest.mark.xfail(strict=True)
def test_case_992():
    bytes_0 = b"\x07\x7f\xc4\x91\xc8\xab*\x15\n\x0c\xc0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_993():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_994():
    bool_0 = True
    str_0 = "pCZ>EQn/%C|YZa\r1"
    tuple_0 = (bool_0, str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_995():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_996():
    bytes_0 = b"R("
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_997():
    bytes_0 = b"\xf3-\xae\x81yO\xc7\x80\xe9\xa9\x0f\xed\xd1\x94\x07\xb5\x11\xe0\x03#"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_998():
    str_0 = "oA~u0cf*_A gvq_e)W"
    set_0 = {str_0}
    list_0 = [set_0, set_0, set_0]
    str_1 = "5k;Hek,i\x0b\rDS7`/L"
    dict_0 = {str_0: str_0, str_0: set_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_999():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1000():
    str_0 = "A["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1001():
    bytes_0 = b"tJ\xa1"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = [list_0, bytes_0, bytes_0, list_0]
    module_0.get_new_command(list_1, list_0)


def test_case_1002():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1003():
    int_0 = -2304
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1004():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1005():
    bytes_0 = b"\xc7~G\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1006():
    float_0 = 7.784319
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1007():
    complex_0 = 163 - 2917.720812j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1008():
    int_0 = 693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1009():
    set_0 = set()
    str_0 = "qo4p<U-#D`'*SSi('ZnX"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1010():
    str_0 = "!2hv-Lpe2g?5"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1011():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1012():
    str_0 = "TPyNji9dM)Ma<wH"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1013():
    complex_0 = -1739.648044 - 2105.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1014():
    int_0 = 3360
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1015():
    bytes_0 = b"P\xe824\x9f\xd3\x99\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1016():
    int_0 = 1705
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1017():
    str_0 = 'nj(cGT\te`MY{\x0cKd~ T"@'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1018():
    bytes_0 = b"\xdb|\x0b\x8fF>dA"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1019():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


def test_case_1020():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1021():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1022():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1023():
    str_0 = "sdJ4_qk}Fl*KS')do"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1024():
    int_0 = -2912
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1025():
    int_0 = 68
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1026():
    str_0 = "%nO"
    bytes_0 = b"L\x94\xb3\xc8\x89\x03$"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1027():
    bytes_0 = b"\x06\xdd\x87?\x12Q\xb7"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1028():
    bool_0 = False
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1029():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1030():
    int_0 = -2407
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1031():
    bool_0 = True
    bool_1 = False
    bool_2 = False
    tuple_0 = (bool_0, bool_0, bool_1, bool_2)
    str_0 = ",]cU+ZiS}"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1032():
    bytes_0 = b"i\xadX\x90"
    bytes_1 = b"2]\xa99\xc2\xa7\xa7\xf3-\xbeY\x9d\xe7\x97+\x0bb"
    bytes_2 = b"u\x0c"
    tuple_0 = (bytes_0, bytes_1, bytes_2)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1033():
    complex_0 = -3280.813 - 293.994j
    bool_0 = True
    dict_0 = {
        complex_0: complex_0,
        bool_0: complex_0,
        complex_0: complex_0,
        complex_0: bool_0,
    }
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1034():
    int_0 = -1170
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1035():
    int_0 = 2256
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1036():
    str_0 = ":XeTKp*Q#Cj)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1037():
    int_0 = -1697
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1038():
    int_0 = 1272
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1039():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1040():
    bytes_0 = b"\xe5A\x15\xc9\xd62\xd1\xc5\x9c\xba\xa1\x9a\xdc\x87?\xf0\x83z\x8b<"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1041():
    float_0 = -2625.959554
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1042():
    int_0 = 883
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1043():
    int_0 = -692
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1044():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1045():
    str_0 = "h9OsX"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_1046():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1047():
    str_0 = "uf&n\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1048():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1049():
    int_0 = 961
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1050():
    int_0 = -1686
    set_0 = {int_0, int_0}
    bool_0 = True
    list_0 = [set_0, bool_0, int_0]
    list_1 = [int_0, int_0, set_0, list_0]
    module_0.match(list_1, bool_0)


def test_case_1051():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1052():
    str_0 = "m0Yo79bOkoxx8ckO"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1053():
    float_0 = 1558.05
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1054():
    bool_0 = False
    float_0 = -839.373
    tuple_0 = (bool_0, float_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1055():
    bytes_0 = b"\xd4]\x05\xdb\x88\xa59\xdb\xe2\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1056():
    int_0 = 1596
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1057():
    int_0 = -573
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1058():
    object_0 = module_1.object()
    bool_0 = True
    bool_1 = True
    str_0 = "%$\r(GckPIfVD~pj+CgE"
    tuple_0 = (bool_0, bool_1, str_0)
    set_0 = {tuple_0, bool_0, tuple_0}
    tuple_1 = (tuple_0, set_0)
    module_0.match(object_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1059():
    str_0 = "Xk)\r^$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1060():
    int_0 = 1170
    bytes_0 = b'\x93\x07\x96\xc5" \xf3\xd7\\\x1c\\\xcc\x17\x1a\x8b\xa8'
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1061():
    complex_0 = -1651 - 3247.2761j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1062():
    bytes_0 = b"bx\xa04\x8dl\xd5\x83\xb7\x10V\x9a\x0c_"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1063():
    str_0 = "T=\x0bbQ++#"
    list_0 = [str_0, str_0]
    str_1 = "ol0;0>^W|DFHl*"
    module_0.get_new_command(list_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1064():
    str_0 = "Wm=.DSuW9|,a"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1065():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_1066():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1067():
    str_0 = "LKFn-ua#Ik\x0c}\\Ee"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1068():
    str_0 = "s5Zs<4[Ia}8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1069():
    set_0 = set()
    bool_0 = True
    bytes_0 = b"\xf0\x90_\xbd\xd9\x0c\x85"
    tuple_0 = (set_0, bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1070():
    bool_0 = False
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1071():
    float_0 = -690.655887
    complex_0 = -380.061 - 195.829j
    tuple_0 = (complex_0,)
    module_0.match(float_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1072():
    float_0 = -195.472
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1073():
    int_0 = 156
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1074():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1075():
    complex_0 = -2467.513 - 1126.176j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1076():
    float_0 = 2953.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1077():
    int_0 = -3827
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1078():
    bytes_0 = b"\xb7"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1079():
    bytes_0 = b"\xc1\xc6\xc5\xdd\x01\xa4\xc1\x1e\xadb\x91\xdd\x05\xdb\xe4\xc6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1080():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1081():
    str_0 = "!0V)\t=nnu~\x0c,?["
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1082():
    str_0 = '"U},J-J[e}\r#^TZ:|W|'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1083():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1084():
    float_0 = 2071.65327
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1085():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1086():
    str_0 = "h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1087():
    float_0 = 531.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1088():
    int_0 = -450
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1089():
    bool_0 = False
    float_0 = -1637.328
    bytes_0 = b"2752\xc5~\x0fE\xab"
    tuple_0 = (bool_0, float_0, bytes_0)
    dict_0 = {tuple_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1090():
    bytes_0 = b"\xa2\x16\xc9\x8ab\xea|\x9aM\xa0w\xd9\xeaP\xb1\x19"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1091():
    bytes_0 = b"\xc8g\x88\xec\xb9\x1a\xc7D\xda\x82\x84<Z\x1dv"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1092():
    str_0 = "|u ieY"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1093():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1094():
    float_0 = -505.43
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1095():
    set_0 = set()
    list_0 = [set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1096():
    str_0 = "cf(,C6530qpEa7(HIQ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1097():
    str_0 = "I$O:SMC8h~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1098():
    bytes_0 = b"\x13\x16\x97\x9dR\x0cV\xbf\xe2\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1099():
    bytes_0 = b"v"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1100():
    int_0 = -341
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1101():
    str_0 = "e]X[~ra) xf`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1102():
    int_0 = -265
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1103():
    str_0 = "67CZ0"
    str_1 = "7`EQTy'G5R$;'5:zK`A"
    int_0 = 302
    tuple_0 = (int_0,)
    str_2 = "YWZc{O$\\]+C,wCw1j\x0cb*"
    float_0 = 239.0
    dict_0 = {str_1: str_0, tuple_0: tuple_0, str_2: float_0}
    dict_1 = {str_0: str_0, str_0: str_0, str_1: tuple_0, str_2: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1104():
    str_0 = 'L\x0c\t9H+Mk"$G'
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1105():
    str_0 = "=-IC8qX6Vk4;6uk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1106():
    str_0 = "$Q*uaJQj"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1107():
    complex_0 = 1334.72 + 2249.019913j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1108():
    int_0 = 485
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1109():
    float_0 = 1387.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1110():
    str_0 = "*U3_80pZ\tn"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1111():
    float_0 = 4673.904
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1112():
    float_0 = 1137.9
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1113():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1114():
    bytes_0 = b"Q\xbf\xfa"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1115():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    tuple_0 = (set_0, list_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1116():
    complex_0 = 766.171 - 5595.74j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1117():
    float_0 = -1694.545
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1118():
    int_0 = -1780
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1119():
    str_0 = "2t\x0c/<{L3.JT?\n{Fo?"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1120():
    int_0 = -1601
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1121():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1122():
    bytes_0 = b"\xce\x0b+\x99\xf7\x91\xd5Wv\x19\xb4"
    module_0.match(bytes_0, bytes_0)


def test_case_1123():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1124():
    int_0 = 2417
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1125():
    int_0 = -1040
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1126():
    str_0 = "^MP'=}{\x0c5G).whlAq["
    list_0 = []
    bool_0 = True
    tuple_0 = (str_0, list_0, str_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1127():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1128():
    str_0 = "R~C\t\n"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_1129():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1130():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1131():
    bytes_0 = b'p\x01"\x89H\x7f\xe9'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1132():
    bytes_0 = b"\xd0aK\x15\xf5\xb1\x9f{K\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1133():
    bytes_0 = b"P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1134():
    str_0 = "#+2.hn@73Xy)u\n"
    module_0.match(str_0, str_0)


def test_case_1135():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1136():
    bytes_0 = b"\xfd\x0b\xfb[\xfb\xef\x136j\xad}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1137():
    bytes_0 = b"~\x7f\xf3\xe2\x02"
    dict_0 = {bytes_0: bytes_0}
    bytes_1 = b"\n\x8fi`\\1\xa86\x00\x1b\xa3\xde\\\xc0j\xaa4\xf0\x99\xd2"
    module_0.get_new_command(dict_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1138():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1139():
    int_0 = -882
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1140():
    bytes_0 = b"\xe6\xcd./\xc1;s\xd7\x1b\x1a\xfb\x14V\x7f\x923]\x86\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1141():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1142():
    int_0 = 2441
    module_0.match(int_0, int_0)


def test_case_1143():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1144():
    int_0 = -249
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1145():
    list_0 = []
    str_0 = "OwEgB"
    none_type_0 = None
    str_1 = "qByD!7k7"
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_1: none_type_0,
    }
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1146():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1147():
    none_type_0 = None
    set_0 = {none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1148():
    int_0 = -1408
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1149():
    int_0 = -171
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1150():
    str_0 = "uL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1151():
    bytes_0 = b"}\xd3\xfa\xd6"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1152():
    str_0 = "CjA32"
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1153():
    float_0 = -1036.57
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1154():
    str_0 = "*:!"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_1155():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1156():
    list_0 = []
    str_0 = "0US}isrwJxv"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1157():
    bytes_0 = b"\xda\xcac3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1158():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1159():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1160():
    float_0 = -1762.77384
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1161():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1162():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1163():
    str_0 = "\r\\3b\rk\\G+xS\x0bj0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1164():
    bool_0 = False
    str_0 = "Y#[D`(|Ib{Z*k}g"
    list_0 = [bool_0, bool_0, bool_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1165():
    float_0 = 3431.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1166():
    str_0 = "8`Pi;}w[UHCV0?X.8)m"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1167():
    tuple_0 = ()
    list_0 = [tuple_0]
    list_1 = [list_0, tuple_0, tuple_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1168():
    int_0 = -3118
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1169():
    none_type_0 = None
    float_0 = 355.582347
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1170():
    dict_0 = {}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1171():
    bytes_0 = b".\xcc!\x1d\xae0d\x08\x0c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1172():
    str_0 = " ?a"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1173():
    int_0 = -532
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1174():
    float_0 = -3506.277
    module_0.match(float_0, float_0)


def test_case_1175():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1176():
    bytes_0 = b"\x14\xe2\x90\x13\x9c\xab("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1177():
    int_0 = 1495
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1178():
    complex_0 = 3707.4 + 697.636j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1179():
    str_0 = "C&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1180():
    str_0 = "0 \n"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_1181():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1182():
    float_0 = 3774.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1183():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1184():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1185():
    str_0 = 'y"4<YS3h'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1186():
    bool_0 = False
    set_0 = {bool_0}
    list_0 = [set_0, set_0, set_0, set_0]
    int_0 = -618
    tuple_0 = ()
    tuple_1 = (int_0, tuple_0, set_0, bool_0)
    module_0.get_new_command(list_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1187():
    float_0 = 986.47
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1188():
    str_0 = '21y\\7;Q1Bh|GjDpaO"'
    int_0 = -2434
    tuple_0 = (str_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1189():
    float_0 = -2522.8554
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1190():
    float_0 = 467.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1191():
    str_0 = "_2pcX"
    float_0 = -3251.0
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1192():
    complex_0 = -1407.7 - 776j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1193():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1194():
    bytes_0 = b"\xb8\x02j:\xdf\xd3\xce\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1195():
    bytes_0 = b"\xd4<\xc53 sgL\xd0\x8d\xde\xaf\x94"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1196():
    int_0 = -1645
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1197():
    int_0 = -774
    module_0.get_new_command(int_0, int_0)


def test_case_1198():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1199():
    int_0 = -89
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1200():
    bytes_0 = b"\x9a\xee\xac\xfc\x8d'\x7f\xec\x88\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1201():
    bytes_0 = b"/m\x9co\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1202():
    int_0 = 1127
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1203():
    set_0 = set()
    bool_0 = False
    str_0 = "ythgvfYnBGReYXzUkQ#$"
    tuple_0 = (set_0, bool_0, set_0, str_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1204():
    none_type_0 = None
    str_0 = "=wz2}"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1205():
    int_0 = 1614
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1206():
    complex_0 = 471.95 + 1851.11j
    str_0 = "io3w{*?.-\\7SZ2 z_Y:+"
    bytes_0 = b"\xde?r9\x17|\x16\x17M9"
    dict_0 = {str_0: bytes_0}
    tuple_0 = (complex_0, str_0, bytes_0, dict_0)
    tuple_1 = (tuple_0, str_0, bytes_0, complex_0)
    module_0.get_new_command(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1207():
    bytes_0 = b"\x97\x02/GA"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1208():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1209():
    bytes_0 = b"\xe6d:\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1210():
    none_type_0 = None
    int_0 = 2827
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1211():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, bool_0, bool_0, list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1212():
    int_0 = -597
    int_1 = -88
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1213():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1214():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1215():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1216():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1217():
    bool_0 = True
    str_0 = "C+6Wg]b["
    tuple_0 = (str_0,)
    list_0 = [bool_0, bool_0, tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1218():
    complex_0 = 1483.3466 + 6211j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1219():
    none_type_0 = None
    list_0 = []
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1220():
    str_0 = "18"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1221():
    int_0 = 2593
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1222():
    str_0 = "+J9Y\x0cA3\x0c<Lxh-X$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1223():
    bytes_0 = b"\xc8.\xdf\xe2\xe9\xb1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1224():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1225():
    str_0 = "*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1226():
    str_0 = "J(s3:n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1227():
    int_0 = 1017
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_1228():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1229():
    str_0 = "e\t1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1230():
    str_0 = "\nh0K\r<+;:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1231():
    int_0 = 129
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1232():
    int_0 = -2233
    set_0 = {int_0, int_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1233():
    int_0 = 250
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1234():
    int_0 = -670
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    bool_0 = False
    list_0 = [dict_0, dict_0, bool_0]
    tuple_0 = (dict_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1235():
    float_0 = 1617.254
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1236():
    int_0 = -1575
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1237():
    str_0 = "jHb~?sf<vBe\\X-%!"
    str_1 = ")1%\x0c$X1CV3_^WA]"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1238():
    float_0 = 201.9602
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1239():
    bytes_0 = b""
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1240():
    int_0 = -1612
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1241():
    bytes_0 = b"\xdc?\x1d\xe5us\x90$\x96\x80`^"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_1242():
    pass


def test_case_1243():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1244():
    bytes_0 = b"\xfc\xec\xef/\x82\x9e8\x08e~Fq\x17\xee|\xb5\x0cG\xd4"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1245():
    bytes_0 = b"\xf3\x13\xbbX\xe4\x8a\x88\t\xeb.\x7f\t=\xf3\x08\x95["
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1246():
    int_0 = -1853
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1247():
    float_0 = -1133.71994
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1248():
    bytes_0 = b"Sb\xd4\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1249():
    float_0 = 2392.58305
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1250():
    float_0 = -348.442119
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1251():
    str_0 = ">iLfvC\\K^A(|q<0%HE$"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1252():
    bytes_0 = b"\x91\xde\xb0V\x13 \x03I\x8fX\x91\xd5\x0c@\x80\x19\xcc\xf4E."
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


def test_case_1253():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1254():
    str_0 = "1OO\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1255():
    float_0 = -1755.315
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1256():
    none_type_0 = None
    bytes_0 = b",\xf3\xfd\xdf^\xc3\xd7\xe8B\xf4\xff\x1c"
    module_0.match(none_type_0, bytes_0)


def test_case_1257():
    pass


def test_case_1258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1259():
    str_0 = "P02u{\x0cJC"
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1260():
    bytes_0 = b"J\xff\xc0\x8d9Hz\xd1l\xeb2\t\x03\xadBa&"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1261():
    str_0 = "1zg|\\)Dx&<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1262():
    bytes_0 = b"\x19\x9c\xfe0\x91"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1263():
    bytes_0 = b"\x93\xec\x18.=\x82\x1d\x10\xff\xfe\xa9\xa5\x830j\x1a\x0etK\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1264():
    bytes_0 = b"2\x88"
    set_0 = {bytes_0}
    list_0 = [set_0]
    list_1 = [list_0, set_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1265():
    int_0 = -1400
    module_0.get_new_command(int_0, int_0)


def test_case_1266():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1267():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1268():
    float_0 = 1062.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1269():
    str_0 = "MY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1270():
    int_0 = 606
    module_0.match(int_0, int_0)


def test_case_1271():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1272():
    str_0 = "tQi\x0c5y\x0b08&GY)T~"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1273():
    int_0 = -766
    object_0 = module_1.object()
    dict_0 = {int_0: object_0, object_0: object_0}
    str_0 = "czNcnuw ON#[0lo"
    tuple_0 = (dict_0, int_0, str_0, dict_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1274():
    complex_0 = 919.110969 + 3175.353j
    module_0.get_new_command(complex_0, complex_0)


def test_case_1275():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1276():
    int_0 = 1337
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1277():
    bytes_0 = b"\xee\x05\xc0\xb0\xd0\xda"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1278():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1279():
    bytes_0 = b"\xcb\xa7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1280():
    int_0 = 3319
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1281():
    int_0 = 2028
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1282():
    bytes_0 = b"\xab\xae\xa6G\xe7\xa9\x17_;"
    list_0 = [bytes_0, bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1283():
    set_0 = set()
    list_0 = [set_0]
    module_0.get_new_command(list_0, set_0)


def test_case_1284():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1285():
    str_0 = "m9^Z'H+*CShu}^?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1286():
    object_0 = module_1.object()
    bool_0 = False
    bool_1 = True
    dict_0 = {object_0: bool_1}
    tuple_0 = (dict_0, dict_0, dict_0)
    tuple_1 = (object_0, bool_0, bool_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1287():
    bytes_0 = b"h\x89\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1288():
    str_0 = "Of7P**W%("
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1289():
    float_0 = -1811.24802
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1290():
    bytes_0 = b""
    list_0 = [bytes_0]
    bool_0 = False
    module_0.match(list_0, bool_0)


def test_case_1291():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1292():
    bool_0 = False
    bytes_0 = b"=JU`\x1eAw\xb8"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0, bytes_0, tuple_0, tuple_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1293():
    float_0 = -2785.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1294():
    bytes_0 = b"\xf4\xac\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1295():
    float_0 = -188.998
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1296():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1297():
    int_0 = 1878
    list_0 = []
    tuple_0 = (int_0, int_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1298():
    str_0 = "<=9s8.KG,\x0c|\x0cG C;c"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1299():
    int_0 = 2699
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1300():
    int_0 = -2198
    module_0.match(int_0, int_0)


def test_case_1301():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1302():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1303():
    int_0 = 2280
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1304():
    bytes_0 = b"\x0b\xabe)\xd2{\xb7\x80\xe4\x1c-v \x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1305():
    str_0 = 'mb"*6/V\x0cC/{8A&JFgg'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1306():
    float_0 = -1529.988
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1307():
    str_0 = "1>Y(}#~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1308():
    int_0 = 194
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1309():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1310():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0, object_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1311():
    str_0 = ""
    list_0 = [str_0, str_0, str_0, str_0]
    bool_0 = True
    tuple_0 = (str_0, list_0, list_0, bool_0)
    bool_1 = True
    module_0.match(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1312():
    int_0 = -751
    bool_0 = False
    str_0 = ";tJn8"
    tuple_0 = (int_0, bool_0, str_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1313():
    int_0 = 828
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1314():
    float_0 = 166.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_1315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1316():
    int_0 = -92
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1317():
    bytes_0 = b"hk\x1ee\xc6'\xc0\xb4H\xd5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1318():
    str_0 = "{3:)(3S\r_Sd>:[z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1319():
    complex_0 = 623.757428 + 7.29j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1320():
    str_0 = "n"
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1321():
    none_type_0 = None
    str_0 = "~&Y"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1322():
    bytes_0 = b"\x93\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1323():
    bytes_0 = b")\xcb,\xea\xc4\xc4V"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1324():
    str_0 = 't&`d?VsY":\x0c\\O.UqW'
    str_1 = "qM"
    tuple_0 = (str_1,)
    list_0 = [str_0, tuple_0, str_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1325():
    none_type_0 = None
    int_0 = 501
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1326():
    bytes_0 = b"\xdf\\\xef\x16O&'\x85x\xcd\x9b\xb7\xab)\x9b\xec"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1327():
    none_type_0 = None
    bytes_0 = b"\x82Z\xf7\x19\xbd\x00>z\xf1\xd9"
    int_0 = 1323
    tuple_0 = (bytes_0, int_0)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1328():
    int_0 = -1149
    str_0 = "2y<hC#!&-+"
    bytes_0 = b"\x13\xe7\xb9\x00\xb3\x9d\x8d\xb4^\xac\xe4\x17#\x0e\xd5("
    tuple_0 = (bytes_0, int_0)
    tuple_1 = (int_0, str_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1329():
    complex_0 = 192.44 + 230j
    list_0 = [complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1330():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1331():
    str_0 = "c08RdGKsB>&\t0L\njk-u "
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1332():
    int_0 = 998
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1333():
    float_0 = 2061.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1334():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1335():
    float_0 = 3131.61488
    str_0 = "r>zy\\pt{w=6*8"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1336():
    complex_0 = 2053.3154 - 1472.89009j
    tuple_0 = ()
    module_0.match(complex_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1337():
    bytes_0 = b""
    bool_0 = False
    complex_0 = 27 - 1067.167j
    dict_0 = {}
    dict_1 = {bool_0: bool_0, complex_0: dict_0, bool_0: bytes_0}
    bool_1 = False
    set_0 = {bytes_0, bool_0, bool_0, bool_1}
    tuple_0 = (bool_0, dict_1, bytes_0, set_0)
    dict_2 = {bytes_0: tuple_0}
    module_0.get_new_command(dict_2, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1338():
    str_0 = " 4I\r#e`}#tlm2ro/Oh]"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1339():
    str_0 = "c[>\t,jNlWGQ~=kAj"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1340():
    str_0 = "istYARj]ZMI.dv"
    float_0 = -527.000618
    bytes_0 = b"_E\x93\x9f\x9c\x8a\x0b\xb4x\xa1\xd9"
    tuple_0 = (str_0, float_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1341():
    complex_0 = -243 - 120.91j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1342():
    bytes_0 = b"\xe2\x83\xa3\xdd\x01\x1c\xdc\xdaD\xe4\xcc\xe8\x88.\xb4U"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1343():
    str_0 = "4"
    bytes_0 = b"_2\x1fX\xc4\xf5\x1c\xf1A\xf0\x95"
    module_0.get_new_command(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1344():
    bytes_0 = b"h\xbc\xf0\xf2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1345():
    bytes_0 = b"\x1e\xd4\x1c\xd4\xe4\x0b\xc1\xc3\xc5b\xb8\xcau<\xf7\xb8\xa4\xd4M!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1346():
    str_0 = "+]qjN*q({rW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1347():
    str_0 = "_'4l^w_8+=1,@O0"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1348():
    bool_0 = True
    float_0 = 3566.24
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1349():
    object_0 = module_1.object()
    int_0 = 2128
    module_0.get_new_command(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1350():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1351():
    bytes_0 = b"\xdb\xf3\x0c\t\xb3*A0z\xdd2\x16 \xa2\x08\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1352():
    str_0 = ""
    list_0 = [str_0, str_0, str_0]
    int_0 = 2132
    tuple_0 = (list_0, str_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_1353():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1354():
    str_0 = "OE^\n,y1\x0cd\r:4)phg_"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1355():
    str_0 = "}+7W\t\tk2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1356():
    str_0 = "PV{Q^#4!kMr\td-YZqWR|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1357():
    float_0 = -1088.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1358():
    bytes_0 = b"\x96rg"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0}
    list_0 = [set_0, bytes_0, tuple_0, tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1359():
    bytes_0 = b"\x8c\xd4/\xbfFo\xcb\x96#\xcb\xa6\xe4\xfdo1"
    list_0 = [bytes_0]
    bytes_1 = b""
    set_0 = {bytes_0, bytes_1}
    tuple_0 = (set_0,)
    str_0 = "vM2Zp~gv]C#wMc7\x0c0t^"
    tuple_1 = (list_0, tuple_0, str_0, set_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1360():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


def test_case_1361():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1362():
    int_0 = -626
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1363():
    bytes_0 = b"\xcd\x0f3j\xc0\xbf%\x11WO,+\xa8~\xa5"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1364():
    bytes_0 = b"\x08,ru0k\xe9\x92qja"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1365():
    complex_0 = 515.30868 - 535.313368j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1366():
    bytes_0 = b"`\x8d\xd8z\x1c\x1eI\xac\x16\xbd@DJ"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1367():
    bytes_0 = b"\xa0\x9f*/\x8f\xd2\xa8\xfe\xe9\\\xb4\xb4$\xbc"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1368():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1369():
    int_0 = 4298
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1370():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1371():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\x94"
    module_0.get_new_command(list_0, bytes_0)


def test_case_1372():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1373():
    str_0 = ")Qhb`Bj%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1374():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1375():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1376():
    bytes_0 = b"J%\xdam\xd2$\x91\x8fM\x0f82\xeb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1377():
    str_0 = "`VxZkTSHN4qQ"
    list_0 = [str_0, str_0, str_0, str_0]
    int_0 = -745
    bool_0 = True
    bytes_0 = b"\xad\x8cF\x08~\xd1\xb9\x12Y\x06\x8a1O\xf7\x19"
    tuple_0 = (list_0, int_0, bool_0, bytes_0)
    module_1.object(*tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1378():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    complex_0 = -280 - 386.76j
    str_0 = "w3^,`Z"
    tuple_0 = (set_0, complex_0, str_0, set_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1379():
    int_0 = -1902
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1380():
    int_0 = 3340
    dict_0 = {int_0: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1381():
    bytes_0 = b"5i\xd2p\xe3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1382():
    int_0 = -2309
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1383():
    int_0 = 3093
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1384():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1385():
    float_0 = -1628.243811
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_1386():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1387():
    bytes_0 = b"\xd5\xa3`\xf1\x00\xf3}fq\xdc\x95\xf1\xbb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1388():
    bool_0 = True
    object_0 = module_1.object()
    tuple_0 = (bool_0, bool_0, object_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1389():
    bytes_0 = b"\\\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1390():
    str_0 = "c+>uD4T\n?L3Ay%L/n\t0"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1391():
    bytes_0 = b">c\xd2\x0f\x90L\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1392():
    str_0 = "&C@{i/U>6l\t3RO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1393():
    bytes_0 = b"\xd7\xce\xb5\xc6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1394():
    bytes_0 = b"\xc3hi\x08\x96T_c\xfdO;\x8c\xee\xc7\xa4\xb2l~L"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1395():
    int_0 = 411
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1396():
    str_0 = "b:,{|CZ?/#SQ.^d%@%X)"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1397():
    bool_0 = True
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1398():
    str_0 = "GwCHD::*N\\wj{P]m7;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1399():
    str_0 = "D_7l\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1400():
    str_0 = "-H@\\ow4!%XOuVu"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1401():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    tuple_0 = (object_0, set_0)
    module_0.match(tuple_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1402():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1403():
    bytes_0 = b"\xcfl"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1404():
    int_0 = -327
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1405():
    int_0 = -1783
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1406():
    int_0 = 828
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1407():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1408():
    int_0 = 6439
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1409():
    complex_0 = 2614 + 1058.019981j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1410():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1411():
    int_0 = 3994
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1412():
    int_0 = 1229
    module_0.match(int_0, int_0)


def test_case_1413():
    pass


def test_case_1414():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1415():
    str_0 = "Rxz|Y?2gj/F(%9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1416():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1417():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    float_0 = 1305.7548
    module_0.match(dict_0, float_0)


def test_case_1418():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1419():
    str_0 = "d]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1420():
    str_0 = ",Km>N$^bM<%2uw.2%t\\z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1421():
    str_0 = "<+bncJD$"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1422():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1423():
    bytes_0 = b"j\t\xba\xc4*Q\x04\x1f\x00\xb6\xbb\x8c9\xab\xc3\x8c\xda\xc6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1424():
    complex_0 = -749.299566 + 224.5j
    set_0 = {complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1425():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    tuple_0 = (set_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1426():
    bytes_0 = b"x\x8d4oB\x1c\xcd\x05\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1427():
    str_0 = "@u\\Txv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1428():
    int_0 = 470
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1429():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1430():
    str_0 = "EyN5>ubL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1431():
    float_0 = 2638.791
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1432():
    str_0 = "vtqwT\\+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1433():
    bool_0 = True
    str_0 = "G}6~%`"
    float_0 = 532.916
    list_0 = [float_0]
    dict_0 = {bool_0: bool_0, str_0: bool_0, bool_0: str_0, str_0: list_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1434():
    bytes_0 = b"*b\xcf\x13,+\xdd\xea0@N*@\x1f%"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1435():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1436():
    str_0 = "MA~5NZR|a_X;x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1437():
    bytes_0 = b"+"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1438():
    str_0 = "iuln~IF\t;o&@:c\x0cAY(X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1439():
    float_0 = 2216.424569
    int_0 = 146
    dict_0 = {int_0: float_0}
    list_0 = [float_0, float_0, int_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1440():
    bytes_0 = b"\x10\xaa\x13#\x7f\n\xcc;\x11\xab\xbdeu\x92c\x88\x03n&\x9e"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1441():
    int_0 = 776
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1442():
    int_0 = 372
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1443():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1444():
    complex_0 = -874.3397 + 73.7465j
    dict_0 = {complex_0: complex_0}
    list_0 = [dict_0, complex_0, complex_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1445():
    bool_0 = True
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    bool_2 = False
    tuple_1 = (tuple_0, bool_2, bool_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1446():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1447():
    bytes_0 = b"\x84/\x1fx)f\xb6\xe1t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1448():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1449():
    float_0 = 2276.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1450():
    float_0 = -819.22
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1451():
    bytes_0 = b"'\xdf\xa3\x93\xc2V\x94MR-5\x92\xee\xd39Spt"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1452():
    bool_0 = False
    bytes_0 = b"\xd8\xbb\x9f\xf4\xa8 T\xd3NC\xd8\xe5\x00p\xdd\xc4{"
    dict_0 = {bool_0: bytes_0, bool_0: bytes_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1453():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1454():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1455():
    int_0 = -5390
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1456():
    int_0 = -319
    module_0.get_new_command(int_0, int_0)


def test_case_1457():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1458():
    float_0 = 1572.149442
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1459():
    str_0 = "{"
    bool_0 = False
    str_1 = "Fv.34L^+^aJ0|,\\^r_"
    dict_0 = {str_0: str_0, str_0: bool_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1460():
    str_0 = "~J1l,!),]o&&\t@~J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1461():
    str_0 = "D\t!FqG]s"
    set_0 = {str_0, str_0, str_0, str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1462():
    int_0 = -3126
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1463():
    int_0 = -1959
    module_0.get_new_command(int_0, int_0)


def test_case_1464():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1465():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1466():
    bool_0 = False
    int_0 = -873
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1467():
    float_0 = -1962.888253
    list_0 = [float_0, float_0]
    list_1 = [list_0, float_0]
    module_1.object(*list_1, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_1468():
    str_0 = "dL[\rZ@q'eT\r^e\n-QH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1469():
    bytes_0 = b"\x9bj\xff\xc2\x90\xc8\xf5p\x82\xa7\x89f\xae\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1470():
    str_0 = "DSU2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1471():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1472():
    float_0 = -2715.2333
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1473():
    float_0 = -3435.65415
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1474():
    float_0 = -2223.313
    set_0 = set()
    module_0.get_new_command(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1475():
    str_0 = "!Q0D,B"
    str_1 = "\n}r_"
    bool_0 = True
    dict_0 = {str_0: str_0, str_1: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1476():
    int_0 = -3261
    int_1 = -3490
    bool_0 = True
    tuple_0 = (int_0, int_1, int_1, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1477():
    float_0 = 2190.894
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1478():
    int_0 = -812
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1479():
    int_0 = -2184
    module_0.match(int_0, int_0)


def test_case_1480():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1481():
    int_0 = -410
    bytes_0 = b"v\xbfE\xb4b^\x0e,\xd7\x9f\xf7aP9\xddl\xac"
    list_0 = [bytes_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1482():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1483():
    float_0 = -2702.9702
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1484():
    str_0 = ""
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1485():
    str_0 = "Ta5LbiRT,7!"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1486():
    str_0 = "q;O^"
    set_0 = {str_0}
    int_0 = -874
    tuple_0 = (int_0,)
    bool_0 = True
    tuple_1 = (set_0, tuple_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1487():
    float_0 = 1350.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1488():
    str_0 = "By<6c/\t,(]i"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1489():
    int_0 = -2946
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = "ID7\n[LS9~ox)].>:Yc[S"
    str_1 = "[mi2DcUj\nssL:7,\x0c$-"
    dict_0 = {str_0: int_0, str_1: str_0, str_0: str_0, str_0: int_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1490():
    float_0 = 1093.942496
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1491():
    float_0 = 1278.2
    bool_0 = True
    bytes_0 = b"1a\x9dIM\xee\xa9p\xff\xa49\xce"
    tuple_0 = (float_0, bool_0, bytes_0)
    list_0 = [bool_0, bool_0, bytes_0]
    module_0.match(tuple_0, list_0)


def test_case_1492():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1493():
    int_0 = 669
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1494():
    bytes_0 = b"_\xa4Q\x7f&\xf5]\xc1\xe2_\xde\x05\xbb\xbf\xd7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1495():
    str_0 = "V;z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1496():
    complex_0 = 1511 + 1605.35401j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1497():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1498():
    complex_0 = -2423.1845 + 1555.862j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1499():
    bytes_0 = b"\x17'"
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {bytes_0: bytes_0, tuple_0: bool_0, bytes_0: bytes_0, bool_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1500():
    str_0 = "U\tQ:b!'wUOBMl"
    int_0 = 1781
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1501():
    int_0 = 623
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1502():
    float_0 = -82.89636
    int_0 = 913
    tuple_0 = (int_0,)
    bool_0 = True
    tuple_1 = (float_0, tuple_0, int_0, bool_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1503():
    complex_0 = 928 - 3710.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1504():
    int_0 = 1305
    float_0 = -4436.0
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1505():
    str_0 = "An4"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1506():
    str_0 = "H /d2"
    module_0.get_new_command(str_0, str_0)


def test_case_1507():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1508():
    bytes_0 = b"\x19R\x96\xff\x94a\x93\x13\x85\xe4\xc1\xe1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1509():
    str_0 = "ZC=IA^\x0b"
    list_0 = [str_0, str_0, str_0]
    list_1 = [list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1510():
    bytes_0 = b"\xee\xaa"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1511():
    str_0 = "\x0cU\nt\rG-v\r$KQ[T\x0cc"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1512():
    float_0 = 144.2
    str_0 = "f3h`&]scc!\\o\x0c:]Qx\r,"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1513():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1514():
    bytes_0 = b"n=\x82\xea"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1515():
    float_0 = 4416.0
    bool_0 = False
    dict_0 = {float_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


def test_case_1516():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1517():
    str_0 = "V;"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1518():
    float_0 = -1937.16
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1519():
    int_0 = -2742
    module_0.get_new_command(int_0, int_0)


def test_case_1520():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1521():
    bytes_0 = b"%["
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1522():
    int_0 = 742
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1523():
    complex_0 = 700.6154 + 1425j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1524():
    bytes_0 = b"\xde1\xf6\xf4\xf4"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bytes_1 = b"\xc9\xadq\x1f\x89\x83i\x0c\x97W\xcekW"
    module_0.get_new_command(dict_0, bytes_1)


def test_case_1525():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1526():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1527():
    bytes_0 = b"h'\xb3\x93j\x1c\\="
    module_0.match(bytes_0, bytes_0)


def test_case_1528():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1529():
    float_0 = -450.7278
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1530():
    int_0 = 94
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1531():
    bytes_0 = b"\xfc5\x0c\x7f]Z\xe6\x0em\xf47\x97m6\xf3\xcb}\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1532():
    float_0 = 797.5
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1533():
    str_0 = "(@GU|"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1534():
    none_type_0 = None
    str_0 = "E!.eD\x0co|O!\x0blD~th`~!"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1535():
    bytes_0 = b"aUH\xebN\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1536():
    float_0 = 3187.674537
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1537():
    dict_0 = {}
    bool_0 = False
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1538():
    int_0 = 4170
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1539():
    bytes_0 = b")4\xf2\xf0\xc1|T:\x9cl\x7f\xf4)\x0c\x9a\x97\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1540():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1541():
    bytes_0 = b"\xe1,%5\xf1\xe6\xe6\xa4\x8e\xa5NO\x8c\xe9\x1b*\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1542():
    bool_0 = False
    bytes_0 = b"\xc3R\xb2\xbc\x7f"
    tuple_0 = (bool_0, bytes_0, bytes_0, bool_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1543():
    str_0 = "fkV"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_1544():
    none_type_0 = None
    float_0 = -588.5
    set_0 = {none_type_0, none_type_0, none_type_0, float_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1545():
    str_0 = "|\x0c_k5$xwJ[2J\\.{wI~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1546():
    bool_0 = True
    tuple_0 = ()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: tuple_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1547():
    complex_0 = -1249 - 2536.443j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1548():
    int_0 = -1564
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1549():
    bytes_0 = b"\x02\xd8\xe9%h\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1550():
    int_0 = -801
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


def test_case_1551():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1552():
    float_0 = 615.0
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1553():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1554():
    float_0 = -975.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1555():
    bytes_0 = b"Az>d.V\x9a\x04\x180\xe1%"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1556():
    int_0 = 865
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1557():
    int_0 = -324
    bool_0 = True
    int_1 = -1522
    dict_0 = {}
    tuple_0 = (bool_0, int_1, dict_0)
    int_2 = 1855
    tuple_1 = (bool_0, tuple_0, tuple_0, int_2)
    tuple_2 = (int_0, tuple_1, int_2, tuple_0)
    module_0.match(tuple_2, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1558():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1559():
    float_0 = -1603.05778
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1560():
    str_0 = "+Y?rIY\"#pe'D"
    set_0 = {str_0, str_0}
    bytes_0 = b"t\xbc\x8cq\xc9\x15%"
    tuple_0 = (str_0, set_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_1561():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1562():
    bytes_0 = b"\xff\xb09k\xa4\xd6C\x88\xf13"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_1563():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1564():
    int_0 = 3707
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1565():
    bytes_0 = b"\xab\xbb]mt/\xfb1\x88H\xed"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1566():
    float_0 = 1992.7297
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1567():
    float_0 = 601.35879
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1568():
    str_0 = "ug'1"
    list_0 = [str_0]
    dict_0 = {str_0: list_0, str_0: list_0}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1569():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1570():
    int_0 = -996
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1571():
    str_0 = "k_ s!,4r#jwrau}$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1572():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1573():
    int_0 = 2625
    list_0 = []
    tuple_0 = (int_0, list_0, list_0)
    module_0.match(tuple_0, list_0)


def test_case_1574():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1575():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1576():
    str_0 = "h.8[LM=/uf*XAv:hD?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1577():
    bytes_0 = b"\xfe\xd5\xb3e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1578():
    int_0 = -1421
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1579():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1580():
    float_0 = -3720.7
    module_0.match(float_0, float_0)


def test_case_1581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1582():
    str_0 = "k:K=,O@J@1xa!\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1583():
    str_0 = "z"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1584():
    bytes_0 = b"^\x11\xc0\xb9\xe5\xc0\xcd{\x08\xc3x\xa9=\x10\x80\xa9i\xd2\x86"
    str_0 = "io!.y\rc]W6N{w."
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1585():
    bytes_0 = b"\xf8^W\x9dl"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1586():
    complex_0 = 1060.3 + 3535.47683j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1587():
    float_0 = 2101.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1588():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1589():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1590():
    bytes_0 = b"\x1a\xad\nd\xad\xb8`\xa4\xf0\x84yS6\xb8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1591():
    int_0 = -849
    set_0 = {int_0}
    module_0.match(set_0, set_0)


def test_case_1592():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_1593():
    str_0 = "'\n4&\x0b!A[|}/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1594():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1595():
    str_0 = "Gb h/^N>..u.P~:W$57t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1596():
    bytes_0 = b"\xcf\x1d\x96\x98\xf2\x9c\xb2"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1597():
    bool_0 = False
    bytes_0 = b"\xea%[N\xb5c:\x8b\xbe ]\xff\xc1-W\xc9\rz\xf9"
    dict_0 = {bool_0: bytes_0, bytes_0: bytes_0, bool_0: bytes_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1598():
    bytes_0 = b"\x8f\r\xe8\xd39!!\x18\x12y~\xbaX8\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1599():
    str_0 = "vP."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1600():
    str_0 = "9k+kL`NQ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1601():
    complex_0 = 1022.4 + 450.026j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1602():
    bytes_0 = b"u\xedd&\x1e\xfb*\xb5\xac!`y\x98"
    list_0 = [bytes_0, bytes_0, bytes_0]
    tuple_0 = (bytes_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1603():
    bool_0 = False
    int_0 = 1900
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1604():
    int_0 = -2142
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1605():
    int_0 = -375
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1606():
    bytes_0 = b"\x1f\xed\xee&P\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1607():
    bytes_0 = b" :.\xae\xda\x1c\n\xbc\xf9K\x93\x84|0\xffG\xf7P"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1608():
    str_0 = "\\5#G$"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1609():
    object_0 = module_1.object()
    float_0 = -2050.788209
    set_0 = {object_0, object_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1610():
    str_0 = "CHN\x0b'AYIr\x0b/)1"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1611():
    str_0 = "]L}U8$\\M$+|DhR+Asd)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1612():
    bytes_0 = b"_U\xd2\xe6P\xca\xb50\xb9\xe1Bs"
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bytes_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1613():
    bytes_0 = b"Yq"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1614():
    float_0 = -1315.65745
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1615():
    str_0 = "Y`<i\x0cm_(oc$db"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1616():
    int_0 = -3735
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    bytes_0 = b"\x07\x8c\x1f-\xff8,\x01^\xa8"
    set_0 = {bytes_0, bytes_0}
    list_0 = [dict_0, bytes_0, set_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1617():
    int_0 = 119
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1618():
    complex_0 = 218.095335 + 314.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1619():
    int_0 = 714
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1620():
    int_0 = -2066
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1621():
    int_0 = 3159
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1622():
    complex_0 = -1931.55 + 2118.6766j
    bytes_0 = b"\x82\x7f\x80\x14@Hk\x0c\x99\xd8\xea@"
    tuple_0 = (bytes_0,)
    str_0 = ":p$2~D*q7\rocx\x0c*yEpW"
    object_0 = module_1.object()
    list_0 = [str_0, object_0]
    tuple_1 = (tuple_0, list_0)
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: tuple_1,
        complex_0: bytes_0,
    }
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1623():
    str_0 = "@NyF:Zbz."
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1624():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (set_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1625():
    float_0 = -1491.9
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1626():
    float_0 = 1769.27
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1627():
    complex_0 = 1543.2 + 190.518849j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1628():
    int_0 = 3256
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1629():
    int_0 = -1397
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1630():
    str_0 = "WA_^~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1631():
    float_0 = 2150.54687
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1632():
    bytes_0 = b"\xb56\xaa\xbd3\x03Hk\xd2Q\xeb\x94\x19\x9f\x1b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1633():
    str_0 = "jI"
    complex_0 = -672.712 - 2672.25108j
    int_0 = 581
    tuple_0 = (str_0, complex_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1634():
    str_0 = "oZYPpJQ ?u+DZ3tIUHA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1635():
    bool_0 = False
    float_0 = 795.7
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1636():
    bytes_0 = b"\xad\x12o\x97z\xf1\x8f{\xa2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1637():
    float_0 = -2025.07479
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1638():
    bytes_0 = b"\xa2\xb2-\xb2\xf0\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1639():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1640():
    float_0 = 390.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1641():
    bytes_0 = b"E!\xb3|'\xdcd\xe8\xc3s\xfc\x17s\\\x88\xcd\x98\xebV"
    tuple_0 = ()
    dict_0 = {bytes_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1642():
    bytes_0 = b"\n\x84\xbf\x080\xd7\x1f\r\xcaR\xf6\xa8\xfeN\xd1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1643():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1644():
    bytes_0 = b"\x87X\xd7EX\xd4\xaaH\x0e\xff\xb0\xed\x9e\x83\xa9"
    bool_0 = True
    tuple_0 = (bytes_0, bytes_0, bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1645():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1646():
    str_0 = "yNw'37mR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1647():
    bytes_0 = b"j\xb9\xa3\x9d\x00U\xee\xf1]\x14i\x82\x04A\x05\xdf"
    object_0 = module_1.object()
    module_0.match(bytes_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1648():
    bytes_0 = b"\xc0\x07\x86\xae\xe1\t[%6~\xe6\x8b-lI:Y\x93]\xdd"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1649():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1650():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1651():
    bytes_0 = b"\xc0\x16\xf7\xeb\x90P/"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1652():
    int_0 = -2520
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1653():
    float_0 = 515.07083
    dict_0 = {float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1654():
    int_0 = 595
    set_0 = {int_0}
    list_0 = [set_0, set_0, set_0]
    tuple_0 = (set_0, list_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1655():
    int_0 = -924
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1656():
    int_0 = -189
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1657():
    int_0 = -3742
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1658():
    str_0 = "_E{6?3U1\t"
    dict_0 = {str_0: str_0, str_0: str_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_1659():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1660():
    bytes_0 = b"o\xc8T3e3\xe4\xbcY\x18\x8dX\xb6\xe6\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1661():
    bytes_0 = b"U\xeb2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1662():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1}
    int_0 = 68
    tuple_0 = (set_0, bool_1, int_0)
    tuple_1 = (tuple_0, bool_0, bool_0, bool_0)
    module_0.match(tuple_1, bool_1)


def test_case_1663():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1664():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1665():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1666():
    str_0 = "|3\n*\nxU)^\tp^zVvDA|"
    bool_0 = True
    set_0 = {str_0, str_0, bool_0, str_0}
    str_1 = "\rN- \x0cU"
    tuple_0 = (set_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1667():
    bool_0 = True
    list_0 = []
    str_0 = "u[j:8"
    set_0 = {bool_0}
    tuple_0 = (bool_0, list_0, str_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1668():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1669():
    str_0 = "LU\\G3?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1670():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


def test_case_1671():
    pass


def test_case_1672():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1673():
    bytes_0 = b"\xad"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1674():
    float_0 = -1877.33
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1675():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1676():
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (tuple_0, bool_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1677():
    bytes_0 = b"\x1a\x80\xcd\xebvf\x98\xb8\x82<\xd8R\x14\xb3Mb\x17(\x84"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1678():
    complex_0 = 2186.9293 + 2552.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1679():
    int_0 = -3084
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1680():
    complex_0 = 1335 + 1288.179j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1681():
    int_0 = 1768
    str_0 = "\x0c$BL="
    tuple_0 = (int_0, str_0, str_0, str_0)
    dict_0 = {tuple_0: str_0, str_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1682():
    complex_0 = -61 + 1192.665j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1683():
    bool_0 = False
    str_0 = "~e?qDt)[c-v^"
    set_0 = {bool_0, bool_0, str_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1684():
    int_0 = 29
    set_0 = set()
    list_0 = [int_0, int_0]
    tuple_0 = (int_0, int_0, set_0, list_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1685():
    bytes_0 = b"R\xc32TX"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1686():
    bool_0 = False
    bytes_0 = b"\x14\x9ec\x9f\xa9\x05\x95E\xf3\x03,\x9a;\xee\xa8g8\x88\xec\xb6"
    tuple_0 = (bool_0, bytes_0)
    bool_1 = False
    bytes_1 = b"\xef#b\xe2&r\xce\x80+\xb1\xb1\xcd\xea\x1d"
    dict_0 = {bool_0: bytes_1}
    tuple_1 = (tuple_0, bool_1, dict_0)
    module_0.match(tuple_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1687():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1688():
    str_0 = "J"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1689():
    int_0 = 2278
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1690():
    str_0 = "&0MJ|w"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1691():
    float_0 = 855.86895
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1692():
    float_0 = -864.3065
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_1693():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.match(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1694():
    bytes_0 = b"\x9c\x1e\xfc]\xa8\xcb\xac\x18F.\xed\xe7\xb2\x89\xa5g"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1695():
    int_0 = 1038
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1696():
    float_0 = 1513.0
    module_0.match(float_0, float_0)


def test_case_1697():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1698():
    str_0 = " cR[#{\tW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1699():
    str_0 = " u~1}x!7?}*sflf2nr\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1700():
    str_0 = "1.^5/,eJ$\n^o"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1701():
    int_0 = -5130
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1702():
    bytes_0 = b">A\xeba\x11\xdd`\xd8c\x84I\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1703():
    complex_0 = 1302 - 1453.452493j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1704():
    bytes_0 = b"\xf0&g,\x02\xf4I\xb9k\xcb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1705():
    float_0 = -2210.0524
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1706():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    list_2 = [list_1, list_0, list_1]
    module_0.match(list_2, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1707():
    bool_0 = False
    bytes_0 = b"\x86\xf8\x1b\xa6\x11\x08\xb4\x10\x1e\x9b\x00\x95]\xbb:\x9e\xa8\x1c"
    tuple_0 = (bool_0, bytes_0)
    set_0 = {tuple_0, bool_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1708():
    int_0 = 2363
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1709():
    bytes_0 = b";"
    int_0 = 2013
    dict_0 = {bytes_0: bytes_0, bytes_0: int_0, int_0: bytes_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1710():
    bool_0 = True
    str_0 = '6ffj" }A$1!VnR "'
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: str_0, str_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1711():
    complex_0 = -4173.022615 + 408j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1712():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1713():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1714():
    str_0 = ";"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1715():
    float_0 = -323.0
    list_0 = [float_0, float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1716():
    bytes_0 = b"\x93\xbaZ\xba\xc6\xf9A5\xb1\xc6\x17Z"
    set_0 = {bytes_0, bytes_0}
    str_0 = "l\n'cuSk\rZelY&;z"
    float_0 = 3168.518
    list_0 = [str_0, set_0, float_0, str_0]
    list_1 = [set_0, str_0, bytes_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_1717():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1718():
    bytes_0 = b"\xb4\x9bSR\xe7\xbd\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1719():
    bytes_0 = b"q\xcb\x14\x0c*+\xc6\x05\xaa\xc6t\xd7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1720():
    int_0 = 727
    int_1 = 2068
    list_0 = [int_0, int_0, int_1, int_1]
    object_0 = module_1.object()
    set_0 = {object_0, int_1, object_0, int_1}
    tuple_0 = (list_0, set_0, set_0)
    module_0.match(tuple_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_1721():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1722():
    str_0 = 'TnFq)\x0b\x0cjR]U`);\\fAk"y'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1723():
    str_0 = "AH|h^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1724():
    float_0 = -1886.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1725():
    str_0 = ">j1No$#|\r8@gN|d9Y\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1726():
    int_0 = -629
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1727():
    float_0 = 3663.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1728():
    int_0 = -2810
    module_0.match(int_0, int_0)


def test_case_1729():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1730():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1731():
    float_0 = 1782.6022
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1732():
    bool_0 = False
    int_0 = 902
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1733():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1734():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1735():
    str_0 = "u4N&Q5\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1736():
    dict_0 = {}
    bool_0 = True
    bool_1 = True
    tuple_0 = (dict_0,)
    tuple_1 = (dict_0, bool_0, bool_1, tuple_0)
    module_0.match(tuple_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_1737():
    int_0 = 867
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1738():
    float_0 = 1938.0
    tuple_0 = (float_0,)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1739():
    bytes_0 = b"\xea\xfe\x13*k\xaa\xbe>\xf4V\x88bn\xde\x9e!fk"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1740():
    int_0 = 35
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1741():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1742():
    str_0 = ";\x0b<YC]\x0bHn8oyh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1743():
    str_0 = "<O\x0b6M;8H"
    module_0.match(str_0, str_0)


def test_case_1744():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1745():
    int_0 = 616
    bool_0 = True
    set_0 = {int_0, bool_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1746():
    bytes_0 = b" \xd8\xb7C8'\xe0H\x19\xd5\x83\x1f\xf2m\x9eD\xb5\x04"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1747():
    int_0 = 901
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1748():
    bytes_0 = b"BnW\xb0q\x951zr\xb7t\xaf\xfd\x82\xd1\xddxx"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1749():
    tuple_0 = ()
    list_0 = [tuple_0]
    tuple_1 = (list_0,)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1750():
    complex_0 = 311.416 - 2291.521j
    list_0 = [complex_0, complex_0, complex_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1751():
    str_0 = 'HEkL"@^'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1752():
    float_0 = 750.0
    int_0 = 113
    list_0 = [float_0, float_0]
    bool_0 = False
    tuple_0 = (int_0, list_0, bool_0)
    tuple_1 = (float_0, float_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1753():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


def test_case_1754():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1755():
    int_0 = -234
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1756():
    int_0 = -1411
    set_0 = {int_0}
    bool_0 = False
    list_0 = [set_0, bool_0, bool_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1757():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1758():
    str_0 = "(X;OuG"
    str_1 = '~~6jT{9J"x?'
    tuple_0 = (str_0, str_0, str_1)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_1759():
    tuple_0 = ()
    list_0 = []
    tuple_1 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_1760():
    float_0 = 123.11926
    none_type_0 = None
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1761():
    none_type_0 = None
    str_0 = "o)$S\x0bd*@%\tj~9U],KQEo"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1762():
    bytes_0 = b"4Z\xeb\x1bE\xe6\x98 \xbdw\x89\xf2<\xa0\x10\x86\xa9"
    set_0 = {bytes_0, bytes_0}
    float_0 = -2642.874946
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1763():
    bytes_0 = b"AO\x03\x84\xdd\xe9\x06\x9c2p\xea"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1764():
    float_0 = -4324.431
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_1765():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1766():
    str_0 = 'E"J#tTT/ZnA\\41}=U'
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1767():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_1,)
    bool_2 = True
    tuple_1 = (bool_0, tuple_0, bool_2)
    list_0 = [tuple_1, bool_2, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1768():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1769():
    bytes_0 = b"b\x9e\x0b\xebI\xd1R\x9c\xdbY"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1770():
    int_0 = -2884
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1771():
    object_0 = module_1.object()
    dict_0 = {
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
        object_0: object_0,
    }
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1772():
    str_0 = "5(\tm%Uvw$!5"
    bool_0 = False
    int_0 = -242
    dict_0 = {bool_0: bool_0, bool_0: int_0, str_0: str_0, str_0: bool_0}
    dict_1 = {str_0: bool_0, str_0: str_0, str_0: str_0, str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1773():
    int_0 = 2944
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1774():
    int_0 = 1213
    tuple_0 = (int_0,)
    complex_0 = -2370 - 2066.036j
    bytes_0 = b"\x10%U!g\x8c\x12\\\xb8`\xaa\xa2:"
    tuple_1 = (tuple_0, complex_0, bytes_0, int_0)
    bool_0 = False
    list_0 = [tuple_1, bool_0, int_0]
    bytes_1 = b"?dE\xcb\xb0E\xa3\xee\xdb\x0f\xf6\xd5\n"
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_1775():
    float_0 = 120.69
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1776():
    bytes_0 = b"!\xa2~\x94\xb1\xfb\x02G\xf4\x13\x0f "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1777():
    str_0 = "Hx<u\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1778():
    float_0 = -617.358996
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1779():
    none_type_0 = None
    float_0 = -1183.961857
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1780():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1781():
    bytes_0 = b"\x17\xe9\xad\xeb\xda\xcc)q&\x03\xf3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1782():
    float_0 = -327.58642
    str_0 = "#?"
    module_0.match(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1783():
    int_0 = -1810
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1784():
    bytes_0 = b"\x91"
    tuple_0 = (bytes_0,)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1785():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1786():
    str_0 = "g4n5J B"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1787():
    bool_0 = False
    float_0 = -2952.5
    list_0 = [bool_0]
    tuple_0 = (bool_0, float_0, bool_0, list_0)
    module_0.match(tuple_0, bool_0)


def test_case_1788():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1789():
    int_0 = 2296
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1790():
    str_0 = ';."Mer7Ur'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1791():
    bytes_0 = b"?jZ\x87\xaaMJ\xd8\x8fw6f\x1b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(bytes_0, list_0)


def test_case_1792():
    pass


def test_case_1793():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1794():
    float_0 = 57.00468
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1795():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1796():
    tuple_0 = ()
    list_0 = [tuple_0]
    list_1 = [list_0, list_0, tuple_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1797():
    bytes_0 = b"[\xd7\xee\x01\xec3\xee\xa0\xcb\x9bQ\xdc\x18\xb6\xd0#\x14"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1798():
    none_type_0 = None
    dict_0 = {}
    module_0.match(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1799():
    float_0 = -1277.2
    list_0 = []
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1800():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1801():
    set_0 = set()
    str_0 = "mt`${wL];%&"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1802():
    str_0 = "`^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1803():
    str_0 = 'jc"$Y6Ix+bCdn'
    list_0 = [str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1804():
    str_0 = "[#[=xbK.r\x0b6"
    tuple_0 = (str_0,)
    list_0 = [tuple_0]
    complex_0 = -1465 - 1254.9882j
    int_0 = 6734
    int_1 = 1230
    tuple_1 = (list_0, complex_0, int_0, int_1)
    module_0.match(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1805():
    str_0 = "I`j"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1806():
    str_0 = "}+<8 Quui"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1807():
    int_0 = -3405
    module_0.match(int_0, int_0)


def test_case_1808():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1809():
    str_0 = '\rpqv"w4d`-][i'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1810():
    int_0 = -283
    list_0 = [int_0]
    int_1 = -3123
    tuple_0 = (int_0, list_0, int_1)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1811():
    bytes_0 = b"\xf7r\xe8\xffG\xb3\xec\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1812():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1813():
    bytes_0 = b"c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1814():
    complex_0 = -1361.383926 - 89.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1815():
    none_type_0 = None
    int_0 = 687
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1816():
    none_type_0 = None
    str_0 = 'l:)KTyj"<#4$N]H"DQ'
    dict_0 = {str_0: str_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1817():
    str_0 = "NZ}KS\rA?6Q04myb<"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1818():
    int_0 = -3335
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1819():
    tuple_0 = ()
    list_0 = [tuple_0]
    complex_0 = -2354.42753 + 368.5782j
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1820():
    dict_0 = {}
    dict_1 = {}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_1821():
    int_0 = 1794
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1822():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    list_0 = [tuple_1, tuple_0, tuple_1, tuple_1]
    tuple_2 = (list_0, list_0)
    module_0.match(tuple_2, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1823():
    float_0 = -259.174
    bool_0 = True
    module_0.match(float_0, bool_0)


def test_case_1824():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1825():
    int_0 = 907
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1826():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1827():
    str_0 = "5jP=SvR&"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1828():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    str_0 = "SUl]Y\x0cY@>&8@:xq_l\n\t"
    tuple_1 = (dict_0, str_0)
    module_0.get_new_command(tuple_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1829():
    str_0 = "stGm^ZOUp0Z\ra6O\x0cN"
    tuple_0 = (str_0,)
    bool_0 = True
    tuple_1 = (tuple_0, tuple_0, bool_0, bool_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1830():
    str_0 = "?"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1831():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_1832():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1833():
    int_0 = 3251
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1834():
    str_0 = "s\t4:g(?5H}70[>o~@uU"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1835():
    bytes_0 = b'\xc8^R\xb6\x1b\x18"*\xb8tM\xae'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1836():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


def test_case_1837():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1838():
    bytes_0 = b"\x18\xf8\xd5\xdf\x0foY\xdd\xab\x85\x82UN\xfb\xc4C\x99"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1839():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1840():
    bytes_0 = b'\xc46u\xdb\xfd\xf4\x8b]\xbc<\x1d)"'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1841():
    int_0 = 1338
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1842():
    str_0 = "</AmK "
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, str_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1843():
    int_0 = 1300
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1844():
    int_0 = 2261
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1845():
    bytes_0 = b"\xaez\xef%[\r5\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1846():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1847():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1848():
    str_0 = "1'E&j]w;*8so-|3"
    list_0 = [str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1849():
    str_0 = "hsrf''#twR1s:\x0c,n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1850():
    bool_0 = False
    set_0 = set()
    str_0 = "PM"
    tuple_0 = (bool_0, set_0, bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1851():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1852():
    bytes_0 = b"\xff\x96)\xb0\xb5\xbb$\xd4x\xa9t\xbd,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1853():
    int_0 = -1926
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1854():
    str_0 = "'ErLy#W;4:=t]8Di%g"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1855():
    int_0 = 525
    module_0.get_new_command(int_0, int_0)


def test_case_1856():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1857():
    bytes_0 = b"Y`\xbc\xc4r\x1dF\xdb"
    module_0.match(bytes_0, bytes_0)


def test_case_1858():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1859():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1860():
    float_0 = 2511.3887
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1861():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    bool_1 = True
    list_0 = [dict_0, bool_0, bool_0, bool_1]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1862():
    float_0 = -1086.9472
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1863():
    int_0 = 1903
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1864():
    str_0 = "~ry+A1R<<5 C."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1865():
    int_0 = 1626
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1866():
    str_0 = "m0}1OBGWdMZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1867():
    bytes_0 = b"\x96\x1au\xd3c\xb0K\x1d\xcd9?\x8e\xbd\x88\x9e1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1868():
    bytes_0 = b"\xdc"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1869():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1870():
    str_0 = "*M"
    set_0 = {str_0, str_0}
    list_0 = [set_0, str_0, str_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1871():
    int_0 = 1057
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1872():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_0.match(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1873():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1874():
    bool_0 = True
    str_0 = "wke}]x"
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1875():
    str_0 = "vvO$'tHsy>\x0caWeW$\x0b0&"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1876():
    str_0 = "Syr,'NfyKoMF@("
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1877():
    float_0 = -682.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1878():
    bytes_0 = b"\xb3\xa3\x10;"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1879():
    int_0 = 1001
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1880():
    str_0 = "=7:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1881():
    int_0 = -3747
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1882():
    str_0 = "d'kAbA-/n-6J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1883():
    bytes_0 = b"\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1884():
    float_0 = -286.064
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1885():
    complex_0 = -350.9023 + 548.9j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1886():
    str_0 = "&Cb7 ;F\t6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1887():
    float_0 = 2963.7
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1888():
    none_type_0 = None
    bytes_0 = b"\x8b\xe5-\xb9\xa4"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1889():
    float_0 = 287.835
    bool_0 = True
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1890():
    str_0 = "13X_B2Ohg$6?pxq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1891():
    complex_0 = -1296.711535 - 1257.161j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1892():
    bytes_0 = b"\ry\xd8z%\xb4j`x*\xf9=\x96\x82"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1893():
    int_0 = 4478
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1894():
    float_0 = -1588.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1895():
    int_0 = 2537
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1896():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1897():
    str_0 = "X["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1898():
    bytes_0 = b"X\xef\x19;\x87kqH\x9egH[\xf9\x8f\xf3\xa3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1899():
    bytes_0 = b"q\x88\x00y"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1900():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1901():
    int_0 = -3203
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1902():
    bytes_0 = b"\x1c\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1903():
    bytes_0 = b"\xe0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1904():
    float_0 = 2227.75
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1905():
    int_0 = 1231
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1906():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0, none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1907():
    bytes_0 = b"|\x13\xaaev\x9f\xf1\xde\x03\x9e\xf7\xe2[\x91\r\x03\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1908():
    complex_0 = 2757.9411 - 2353j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    list_1 = [complex_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_1909():
    int_0 = -2294
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1910():
    bytes_0 = b'\xbf\x02\xdcr\x01\xb5}|")\x11\xc1'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1911():
    complex_0 = -491.8 + 2069.841842j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1912():
    bytes_0 = b"\xce\xd4\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1913():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_1914():
    bytes_0 = b".\x92\xfa\x867@\xa6\xd3?\xcd\xdb\x07\x07\xe7\xbb\xf5r"
    module_0.match(bytes_0, bytes_0)


def test_case_1915():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1916():
    float_0 = -2204.8
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1917():
    float_0 = 1008.59
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1918():
    str_0 = 'v;D\x0byBZoOoQag\x0c$b"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1919():
    str_0 = "?*yz)7}C\"v'c3"
    module_0.get_new_command(str_0, str_0)


def test_case_1920():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1921():
    set_0 = set()
    bool_0 = False
    tuple_0 = (set_0, bool_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_1922():
    bool_0 = True
    complex_0 = -462.91 + 1077.01641j
    tuple_0 = (bool_0, bool_0, complex_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1923():
    int_0 = 1238
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1924():
    bytes_0 = b"+\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1925():
    bytes_0 = b"e\xa4\xf6\x1f\xb5:\x9f"
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_1926():
    str_0 = "daFB>:<1"
    float_0 = 2320.73
    str_1 = ")7;/}V"
    str_2 = ""
    dict_0 = {str_0: str_0, str_0: float_0, str_1: float_0, str_2: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1927():
    float_0 = 1657.9
    module_0.match(float_0, float_0)


def test_case_1928():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1929():
    str_0 = "2<Y~Y\tbx_- 9d)qJRX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1930():
    list_0 = []
    bytes_0 = b"\x1do\xb1l\xe2\xcf\x03\xd8\xb6O*m\xc3~"
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1931():
    int_0 = 995
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1932():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1933():
    float_0 = 1992.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1934():
    bytes_0 = b"\x9a\xdb\x1d\xd1\xa8G\x01\x02\xc5\tzL\x89\xc2l\x15\xd8\xf2\x83\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1935():
    float_0 = -3606.58383
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1936():
    bool_0 = False
    set_0 = {bool_0}
    tuple_0 = (set_0, set_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1937():
    complex_0 = -227.2938 - 3535j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1938():
    str_0 = "L[br1U75!q&E,vpE7B.?"
    module_0.match(str_0, str_0)


def test_case_1939():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1940():
    int_0 = -503
    module_0.get_new_command(int_0, int_0)


def test_case_1941():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1942():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1943():
    float_0 = -20.55
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1944():
    int_0 = -2723
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1945():
    int_0 = -2609
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1946():
    bytes_0 = b"\xfd^\xcam\xd4\x9c\xfa\x89\x8a\xf9\xd6\xd3h\x13\xa5\xad(\xa9"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_1947():
    int_0 = -513
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1948():
    float_0 = 1053.8233
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1949():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1950():
    str_0 = "@,~u1c4P"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1951():
    int_0 = 5415
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1952():
    int_0 = -625
    module_0.match(int_0, int_0)


def test_case_1953():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1954():
    str_0 = "g7@J'Q<V~%404$up-K"
    bool_0 = True
    tuple_0 = (str_0, str_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1955():
    str_0 = "S1b\r\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1956():
    bytes_0 = b"\xb4\xaf\x83?\x827\x19J\r5\xdc\x84"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1957():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1958():
    int_0 = -1197
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1959():
    complex_0 = -2069.910804 + 3411j
    dict_0 = {
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
        complex_0: complex_0,
    }
    tuple_0 = (dict_0, complex_0)
    bool_0 = True
    tuple_1 = (tuple_0, bool_0, bool_0)
    module_0.get_new_command(tuple_1, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1960():
    bytes_0 = b"\xc6>\xb3\xdct\x18\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1961():
    bool_0 = False
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1962():
    float_0 = -1561.6
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1963():
    int_0 = -283
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1964():
    none_type_0 = None
    int_0 = 275
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1965():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1966():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1967():
    float_0 = 3559.89
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1968():
    str_0 = "H1hO]dt[8\txxGo%c"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_1969():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1970():
    int_0 = 2477
    module_0.get_new_command(int_0, int_0)


def test_case_1971():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1972():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_1973():
    float_0 = 1277.6203
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1974():
    str_0 = "D,B>wY#Zl5 7"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1975():
    bytes_0 = b"\x91\x10\x98\xfa]l,\x9dC\x9b<i\xa5H|\xb5\x03\x07\x9b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1976():
    str_0 = '>vs`l=y"?ZX6v?6f7<'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1977():
    float_0 = -626.901148
    int_0 = 109
    list_0 = [float_0, int_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1978():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1979():
    bytes_0 = b'\x10+"=p0'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1980():
    str_0 = "g~D3W9N}oJwG8{t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1981():
    bytes_0 = b"\xc8\x84m $\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1982():
    list_0 = []
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_1983():
    int_0 = -929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_1984():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1985():
    str_0 = ":*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1986():
    int_0 = -2570
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_1987():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1988():
    bytes_0 = b"\xca\xe4\xa3\x93W\x11\xae(\xcb\x04\x12\xbeijN\xc1\xe0\x84g\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1989():
    bytes_0 = b"R?\xf5\xd7f\xbf\x1fE\x06\x87\x04\xa9\xcbH\xdb9|o"
    list_0 = [bytes_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1990():
    float_0 = -884.895508
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1991():
    int_0 = -3132
    tuple_0 = (int_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1992():
    complex_0 = 1598.812775 - 5946j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1993():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1994():
    bytes_0 = b"\xddh0\xdf__\xdfKa\xee\x15$\xfe\xb7<\x1bWe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1995():
    complex_0 = 328.54023 - 1662.9569j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_1996():
    float_0 = 4537.212141
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_1997():
    str_0 = "JcSAvMNnx\"s'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1998():
    bytes_0 = b"f\xa7f\x12=l\xf6\xc1\xcf\xfa"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1999():
    bytes_0 = b"\x84,\xa1c\x9e\x01A\xea\xa7\xe5z\x98\xca\xdb\xb7c\x04"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_2000():
    pass


def test_case_2001():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2002():
    int_0 = 3285
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2003():
    bytes_0 = b"m\xb3\x88\xa9\x1f\xafK\xe3gI\x01*\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2004():
    int_0 = -1493
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2005():
    bool_0 = True
    list_0 = [bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2006():
    float_0 = 2844.6
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2007():
    str_0 = "\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2008():
    bytes_0 = b"\xbf\xfc\xb5\xcc\xcd\xc4\xeb\x96n\xdbW\xb5M\xc3o"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2009():
    float_0 = -781.93
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2010():
    bytes_0 = b"G\xf7H\x00\xbb\x8f\x1a\xda\x86\xda\xaa)\x8e!"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2011():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2012():
    float_0 = -3529.30844
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2013():
    str_0 = ";19H*^s}r9X/{+sg"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2014():
    int_0 = 821
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2015():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2016():
    str_0 = "m5F"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2017():
    bytes_0 = b"\xbe\xac\xd9\x96\xe2\xb4\x17\x9c\xcd\xe7\xf0L\x7f\x91\xe6C\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_2018():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2019():
    float_0 = 877.80045
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2020():
    str_0 = "+}4\x0bF"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2021():
    int_0 = 5260
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2022():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2023():
    str_0 = "tn-gl9'n3."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2024():
    int_0 = -1611
    bytes_0 = b"\xfb@tO\x9f\x14r\xfeJJ"
    set_0 = {int_0, int_0, bytes_0}
    list_0 = [set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2025():
    bytes_0 = b"[\xf8\x11k\x1e$+\x8c]"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2026():
    int_0 = -3069
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2027():
    bytes_0 = b"U\xfc\xfa\x85\xeeKF\xaaT\xf8\xe4\x00"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2028():
    str_0 = "WExOf^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2029():
    str_0 = "5j_Q\r3\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2030():
    str_0 = "0"
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2031():
    bytes_0 = b'%\xf1?\xe9jx\x96\x94\xb8,\xd2\xa0\x94"\xe8\xb3'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2032():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2033():
    int_0 = 1454
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2034():
    str_0 = "S?'\"6HRkq2O!O|x"
    tuple_0 = ()
    module_0.get_new_command(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2035():
    bytes_0 = b"\xf8\xbe?AX}9\xa4\xd0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2036():
    complex_0 = -379.616 + 2571.957065j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2037():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2038():
    str_0 = "#`q,BKc\x0cVE3{ea$o7`"
    module_0.get_new_command(str_0, str_0)


def test_case_2039():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2040():
    float_0 = 146.0752
    list_0 = [float_0, float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2041():
    str_0 = "9"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2042():
    bytes_0 = b"\xb6\x00\xf0\xcbNk\x97\xd6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2043():
    int_0 = -1373
    bytes_0 = b'qd\xc4\x9a\x9c"'
    list_0 = [int_0, bytes_0, int_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2044():
    int_0 = 2694
    dict_0 = {int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0]
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2045():
    str_0 = "(JSY[,GVU<ax\\_Gel;"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2046():
    int_0 = 4254
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2047():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2048():
    str_0 = "\x0bYG/`od6Bt^<my=p46'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2049():
    bytes_0 = b"\xfa\xe3\xc3\xc9\x85&\xc0"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2050():
    bytes_0 = b"\xd57i\xfdrj\xae\x02\x83\x8b"
    int_0 = -472
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2051():
    int_0 = 758
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2052():
    str_0 = "Q4eyis^s+"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_2053():
    str_0 = ",Nv4~pa"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2054():
    str_0 = "^m0JnV5>\x0c"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2055():
    int_0 = 1538
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2056():
    none_type_0 = None
    tuple_0 = ()
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2057():
    int_0 = -88
    module_0.match(int_0, int_0)


def test_case_2058():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2059():
    bytes_0 = b"\x9ez.\xeaAM\x87\x80\x02!"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2060():
    float_0 = -2024.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_2061():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2062():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2063():
    object_0 = module_1.object()
    bool_0 = True
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2064():
    float_0 = -3.9
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2065():
    int_0 = -2752
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2066():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2067():
    str_0 = "S;"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2068():
    bytes_0 = b"\x1b\x187"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2069():
    int_0 = 50
    dict_0 = {int_0: int_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2070():
    str_0 = "yr h26Q%q!(b57=t&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2071():
    bytes_0 = b"\xa0t\x08\xcb)\xf7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2072():
    float_0 = 2263.72723
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2073():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0}
    tuple_0 = (object_0, set_0, set_0)
    str_0 = '|D\\U}Mh\\_"vi67z\x0b'
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2074():
    int_0 = -528
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2075():
    bool_0 = False
    set_0 = set()
    list_0 = [bool_0, bool_0, set_0]
    list_1 = [bool_0, list_0, set_0, list_0]
    list_2 = [list_0, bool_0, list_1, list_0]
    none_type_0 = None
    module_0.match(list_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2076():
    complex_0 = -2493.963 + 2625.0826j
    bool_0 = False
    module_0.match(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2077():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2078():
    str_0 = ']N MFx"ib*Wz,X'
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2079():
    complex_0 = 1793.73 - 1681.872j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2080():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = True
    tuple_0 = (set_0, bool_1, set_0)
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2081():
    str_0 = "\nmx;#fo2Kw-vc:-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2082():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2083():
    str_0 = "m%My?>N^M$cq+ju[m"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2084():
    list_0 = []
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_2085():
    bool_0 = False
    str_0 = "~~eTM?&j !7b0(X\x0cd"
    tuple_0 = (bool_0,)
    tuple_1 = (bool_0, str_0, bool_0, tuple_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2086():
    bytes_0 = b"Dd\xc9\xe2\xe3:KN;\t\x1az\x8a\xc5\xc8a\x1c"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2087():
    bytes_0 = b",\xeb/,mB\xccW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2088():
    float_0 = 1375.3
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2089():
    str_0 = "CLFdV`\x0be8TY"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2090():
    str_0 = "dk8NM(l"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2091():
    bytes_0 = b"\xbba"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2092():
    float_0 = 351.12
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2093():
    bytes_0 = b"QN\xe7\xf0\xb7x2\xc1\x87{?\x9e\x96\x0by<"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2094():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2095():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2096():
    str_0 = "r(?\\?\r~Bh@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2097():
    bytes_0 = b"pP"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2098():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2099():
    float_0 = 2164.094
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2100():
    int_0 = -716
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2101():
    str_0 = "Md"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2102():
    dict_0 = {}
    bytes_0 = b"\xa0\x18\\SA\xce\xf0\r\xe2\x97i"
    tuple_0 = (dict_0, bytes_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2103():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2104():
    bytes_0 = b"?\xf8\xa0.^\x94\xae\xdf\xfd3\xbf\xf9-\xc6\xef\xf6\x0c\x95"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2105():
    int_0 = -875
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2106():
    int_0 = 16
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2107():
    str_0 = "I#@[yhScm"
    str_1 = "]B!Cy1Q4\nzO,-9<F^%"
    int_0 = 3934
    dict_0 = {str_0: str_0, str_1: str_0, str_1: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2108():
    bytes_0 = b"\x926=\rk\xc7\x1e4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2109():
    int_0 = -973
    module_0.get_new_command(int_0, int_0)


def test_case_2110():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2111():
    float_0 = 497.0
    module_0.get_new_command(float_0, float_0)


def test_case_2112():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2113():
    str_0 = "Tz]\t."
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2114():
    complex_0 = -4628 - 920j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2115():
    float_0 = 1835.5397
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2116():
    float_0 = -666.73755
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2117():
    str_0 = "7lAf+lHPI_=A;Sh\tsz%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2118():
    complex_0 = -958.11635 - 2133.053716j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2119():
    bytes_0 = b"\x8e\xda\x87\xfc\r\xdb\xed\xc5\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2120():
    int_0 = 909
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2121():
    none_type_0 = None
    int_0 = -676
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2122():
    int_0 = -2251
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2123():
    float_0 = 2522.549
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2124():
    int_0 = -3553
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2125():
    complex_0 = 1995.6 - 1157.7927j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2126():
    str_0 = "ma,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2127():
    bytes_0 = b"m\xbc!!\xb8\x82\xe0\xc7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2128():
    float_0 = 1519.2797
    str_0 = "F8)\x0c,]HTOpi6oIP\ns&|"
    tuple_0 = (float_0, str_0)
    bytes_0 = b"M\xb8\xf1X?][\x0e\xe6"
    bool_0 = True
    str_1 = "-n"
    dict_0 = {tuple_0: str_0, tuple_0: float_0, bool_0: str_1, bool_0: float_0}
    tuple_1 = (tuple_0, tuple_0, bytes_0, dict_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2129():
    int_0 = 641
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_2130():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2131():
    str_0 = "k.4zSpFY`s'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2132():
    str_0 = "v\n6jy]-\x0c9GBC<w"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2133():
    int_0 = 3207
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2134():
    str_0 = "hH[\tVrPZ;M@TgH_n{B~"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2135():
    float_0 = 4443.0
    float_1 = -9.0
    str_0 = "_548"
    tuple_0 = (float_0, float_1, str_0, float_1)
    complex_0 = 371.3842 - 3467.672267j
    set_0 = {float_0, str_0}
    dict_0 = {str_0: tuple_0, str_0: complex_0, str_0: set_0, tuple_0: set_0}
    tuple_1 = (float_0, tuple_0, dict_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2136():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    module_0.match(bool_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2137():
    str_0 = "[Xu6ijAi,W3?.<vSH7$"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2138():
    complex_0 = -942.53231 + 1284.54085j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2139():
    str_0 = "wK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2140():
    str_0 = "'(s[.sf`\x0b:i!$\x0cE\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2141():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2142():
    bytes_0 = b"d\xdd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2143():
    float_0 = -4421.856796
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2144():
    bytes_0 = b"\x92\xb6\xd0\xe0\tB1_y\x92\x1b\r\x1a"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2145():
    int_0 = -1369
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2146():
    complex_0 = -50.28938 + 1965.473j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2147():
    int_0 = -3296
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2148():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2149():
    int_0 = 750
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2150():
    bytes_0 = b"\x88\xa8\xa4P\xfa\xd1\xf5\x8d\xaf"
    str_0 = "zCu7,0^"
    module_0.match(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2151():
    str_0 = "g+y{"
    tuple_0 = ()
    set_0 = {str_0, tuple_0, tuple_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2152():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2153():
    bytes_0 = b"<\x96Z \x10B\x86\xc3] `\xb4}\xf5j\xbd"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2154():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2155():
    bytes_0 = b"\x1f$?\xb7\xf4?\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2156():
    str_0 = "/cBvIH`&UQx^4`/}fI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2157():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2158():
    int_0 = -1416
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2159():
    str_0 = "8{1&etd O,,^9` gg.\\"
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0, bool_0: str_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2160():
    bytes_0 = b"\xcd\xee"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2161():
    int_0 = -396
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2162():
    list_0 = []
    str_0 = "U^o8}T;f\x0c64"
    bytes_0 = b"\x85V\xaae3n\xeb\xa8V\xb7\x80"
    int_0 = 814
    tuple_0 = (bytes_0, list_0, int_0)
    tuple_1 = (str_0, tuple_0)
    tuple_2 = (list_0, tuple_1)
    module_0.match(tuple_1, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_2163():
    object_0 = module_1.object()
    object_1 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_1}
    tuple_0 = (object_0, dict_0)
    module_0.match(tuple_0, object_1)


@pytest.mark.xfail(strict=True)
def test_case_2164():
    float_0 = -1988.45
    module_0.match(float_0, float_0)


def test_case_2165():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2166():
    bytes_0 = b"!\xfc+m\xe1\xbb\xfe\x1fb\xa3U\x88=\xd4"
    float_0 = -7.4344
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2167():
    float_0 = -2616.7
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2168():
    int_0 = -2808
    bytes_0 = b"E\xc2"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2169():
    str_0 = "|'_F2\x0cF.pH;E-!"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2170():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2171():
    float_0 = 4969.677
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2172():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2173():
    float_0 = 541.7
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2174():
    str_0 = "d|x_P*q+P"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2175():
    int_0 = 59
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_2176():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2177():
    bytes_0 = b'"\xf7\xa5\xddd\x0e\xb3|\x1f'
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2178():
    bool_0 = True
    str_0 = "p\x0cjI%Hw3Q\n%g\x0bPvZ"
    dict_0 = {str_0: bool_0, str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2179():
    str_0 = "7Qj6Y[dqr{^[3 v"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2180():
    int_0 = 2554
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2181():
    str_0 = "%oltV5 \x0c/&"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2182():
    int_0 = 994
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2183():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2184():
    complex_0 = 1840.7 + 2389.62j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2185():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2186():
    complex_0 = -2163.94281 + 2541.115041j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2187():
    int_0 = 2935
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2188():
    float_0 = 4382.6
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2189():
    complex_0 = -490.2846 + 945j
    set_0 = {complex_0, complex_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2190():
    complex_0 = -3585.672475 - 1377j
    set_0 = {complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2191():
    int_0 = -1224
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2192():
    bytes_0 = b"\xb6\x92\xc1\xa5\xb6\x02\xf0h\x15\xddL"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2193():
    str_0 = "&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2194():
    str_0 = 'QQfaHkg0z6;tg",&'
    int_0 = -3304
    dict_0 = {str_0: str_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2195():
    bytes_0 = b"}\xa3\xcd\x9c\xe6\x14A\xeb\x9c\x9a\x82\x8f\x9d\xf00\xb9M#\xf2"
    int_0 = -237
    tuple_0 = (int_0,)
    module_0.match(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2196():
    bool_0 = False
    bytes_0 = b"\xdby\x8b\x16\xc4\xa1\xf0\xf9\x18"
    set_0 = {bool_0, bool_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2197():
    bytes_0 = b'"\xac=\xb5_\xb6\x82"\xaav+n'
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2198():
    str_0 = 'EyyJ&5\x0c4E[\tqBN"U\x0b.#'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2199():
    str_0 = 'lO3S6\r"\t9)1T(\r;]y'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2200():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_2201():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2202():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2203():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2204():
    float_0 = -2257.7
    dict_0 = {float_0: float_0, float_0: float_0}
    set_0 = set()
    tuple_0 = (set_0, set_0, float_0, set_0)
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2205():
    int_0 = 2371
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2206():
    float_0 = 1415.2378
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2207():
    complex_0 = -323.645307 + 561j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2208():
    complex_0 = -381.521816 + 787.208804j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2209():
    int_0 = 3380
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2210():
    bytes_0 = b"\xeeL+\xef\x90\x82\xca;u\x1d\xec\x08\xc7\xfa\xf7\xc2\x11\x9bX\xff"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2211():
    str_0 = "ad}%-. "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2212():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2213():
    int_0 = 2730
    list_0 = [int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2214():
    float_0 = 1653.65052
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2215():
    bytes_0 = b"\xdd\x93\x85u\t\xaf\xc2\xfc\xa2\xf3bH"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2216():
    str_0 = 'F1n^e"N<o&'
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2217():
    str_0 = "wRE8X C\x0bDrBQ%q<| "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2218():
    int_0 = 1901
    dict_0 = {}
    module_0.match(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2219():
    int_0 = 8
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2220():
    str_0 = "QS=a\x0b?9J$ |Ym;5W"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2221():
    int_0 = 387
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2222():
    str_0 = "T`lC|F<\\fu~@jIk"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2223():
    float_0 = 1071.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2224():
    none_type_0 = None
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2225():
    float_0 = -2218.653
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2226():
    float_0 = 3693.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2227():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    list_0 = []
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2228():
    object_0 = module_1.object()
    int_0 = -364
    module_0.match(object_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2229():
    str_0 = "\nBU_c"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2230():
    str_0 = "bvL\tNF\t2E<>2-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2231():
    complex_0 = 1732 - 603.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2232():
    float_0 = -1958.830795
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2233():
    str_0 = "O,X~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2234():
    float_0 = 2387.08
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2235():
    int_0 = 475
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2236():
    list_0 = []
    tuple_0 = (list_0, list_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


def test_case_2237():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2238():
    float_0 = 4646.61448
    none_type_0 = None
    module_0.match(float_0, none_type_0)


def test_case_2239():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2240():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2241():
    bytes_0 = b"\xf0\xee'Fy5OP\xe66\xb5+\xc7\xfd\x13\xecL\xcd"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2242():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    float_0 = -665.3
    tuple_0 = (dict_0, bool_1, float_0)
    module_0.get_new_command(tuple_0, bool_1)


def test_case_2243():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2244():
    float_0 = 1011.49
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2245():
    int_0 = 383
    set_0 = {int_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2246():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2247():
    float_0 = -1588.3557
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2248():
    str_0 = "qcbdV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2249():
    set_0 = set()
    bool_0 = True
    list_0 = [bool_0]
    tuple_0 = (set_0, set_0, bool_0, list_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2250():
    float_0 = 320.2
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2251():
    complex_0 = 2878.84 + 1562.82j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2252():
    set_0 = set()
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2253():
    float_0 = 5082.1747
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2254():
    float_0 = -19.26925
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2255():
    list_0 = []
    str_0 = "f&ylBy:"
    str_1 = "m4"
    dict_0 = {str_0: list_0, str_0: list_0, str_0: str_0, str_1: str_1}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2256():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2257():
    bytes_0 = b"/\xdb\xe3\x90"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(bytes_0, list_0)


def test_case_2258():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2259():
    int_0 = -2204
    set_0 = {int_0}
    list_0 = []
    tuple_0 = (int_0, set_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2260():
    str_0 = '()"5Jz69m?am>Z LeW'
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2261():
    bytes_0 = b"\xfd\x9b\x06\x04AZ"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2262():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2263():
    float_0 = 2033.12
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2264():
    list_0 = []
    int_0 = 2212
    dict_0 = {}
    tuple_0 = (list_0, int_0, dict_0, list_0)
    str_0 = "MqmzWC*\x0bC>D"
    set_0 = {int_0}
    bytes_0 = b"\xe3"
    tuple_1 = (tuple_0, str_0, set_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2265():
    str_0 = "\\Tzmz{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2266():
    complex_0 = 1635.32 - 316.808j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2267():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xc5C\xec\x03\xd3D\xf1\xd1\x12\x1d\xed\xefA\x03\xe3\xc3\x9d\xc8\xde"
    tuple_0 = (bool_0, bool_0, dict_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2268():
    bytes_0 = b"\xaf\xc0Z\xe1\xb7\xdd/0\x93\xa8\x1b"
    bool_0 = True
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2269():
    int_0 = 2737
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2270():
    str_0 = "{#i_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2271():
    str_0 = "B@2]wj!]d{\n?N?X4n"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2272():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2273():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, set_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2274():
    str_0 = "zb'Xka1kZW\x0c<\rdg}B^"
    dict_0 = {}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2275():
    str_0 = "W53&5sU!S{bqyg8D."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2276():
    float_0 = -580.27246
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2277():
    float_0 = -555.329
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2278():
    str_0 = "\\?6-F/Y\nGF5q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2279():
    str_0 = "ZNWu{^"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2280():
    int_0 = 2606
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2281():
    bytes_0 = b"\xfa"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2282():
    str_0 = "5A=j81AGc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2283():
    str_0 = "t!Q#;4@Rjg!.]:}JT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2284():
    float_0 = 1714.68934
    list_0 = [float_0, float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2285():
    bytes_0 = b"\xa9\x0b\xe6sa\xd8\xdd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2286():
    float_0 = -919.471
    module_0.get_new_command(float_0, float_0)


def test_case_2287():
    object_0 = module_1.object()
    object_1 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2288():
    int_0 = 1518
    set_0 = {int_0, int_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2289():
    bool_0 = True
    bytes_0 = b"\xcb\xb1\xb8 \x8f\x98"
    module_0.get_new_command(bool_0, bytes_0)


def test_case_2290():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2291():
    bytes_0 = b"\x1d{\x0e^\xaf\xa6\xb1\xf2\xac\xdaD\xec\xa0m7\xbc\x83\x15"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2292():
    bool_0 = True
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2293():
    int_0 = -2913
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2294():
    str_0 = ".+#"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2295():
    float_0 = 426.80048
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2296():
    str_0 = "6{|?TE1>\x0bp!:xxJgy+f{"
    list_0 = [str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2297():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2298():
    str_0 = ")q"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2299():
    int_0 = 1470
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2300():
    bytes_0 = b"\x93\xf1\x94>\xf3\x9d\x8ay2\x1b\xef\x1e\xb5\x8e\x19\xc3\xc7R\x9b"
    float_0 = 292.509
    tuple_0 = (bytes_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2301():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2302():
    int_0 = 1371
    set_0 = {int_0, int_0}
    module_0.get_new_command(int_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2303():
    str_0 = "JW\x0b;]^O^"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2304():
    int_0 = 3466
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2305():
    str_0 = 'fCn"mgaE\nveA '
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2306():
    bytes_0 = b"r\xf7\xf9\x95\x908@\xd7\xba&v[UR"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2307():
    complex_0 = -1685.9423 + 2784j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2308():
    bytes_0 = b"\x84\x1d\xbfi\x15\x1a)/Z\x01\xab\xdd\xfaN\x8a\xb3V"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2309():
    bool_0 = False
    list_0 = [bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2310():
    str_0 = "3@w(G"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_2311():
    int_0 = -512
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2312():
    int_0 = -7
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2313():
    int_0 = -1467
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2314():
    str_0 = "*\\ErC0+y\ti"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2315():
    int_0 = -369
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2316():
    int_0 = -2031
    bool_0 = True
    bool_1 = False
    set_0 = {bool_1}
    tuple_0 = (int_0, bool_0, bool_1, set_0)
    list_0 = [tuple_0, bool_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2317():
    int_0 = 1686
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2318():
    int_0 = -1498
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2319():
    bool_0 = True
    str_0 = "k\x0c4{dk"
    str_1 = "]?&1W>\tC6.{]5J]Q"
    str_2 = "vRKXx0GMJY;"
    dict_0 = {str_0: str_0, str_1: str_1, str_2: bool_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2320():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2321():
    str_0 = "d\r0B9>"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2322():
    complex_0 = -56.356754 + 928.105291j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2323():
    int_0 = 1014
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2324():
    dict_0 = {}
    bool_0 = False
    list_0 = [dict_0, dict_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2325():
    bytes_0 = b'I\xa3\x84\x7f\x7f\xb4\x1eY\xe1"%\x83\xf6\x95\xedB'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2326():
    str_0 = ";`Dvzf^W2@uy{"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2327():
    str_0 = ".-_Kq;V<DH]N<M\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2328():
    bytes_0 = b"\x1b\xf5\xf6P\xf7y"
    int_0 = -2757
    set_0 = {bytes_0, bytes_0, bytes_0, int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2329():
    float_0 = 341.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2330():
    bytes_0 = b"\x14U\xca\xcf\x035 \xf9\xd92\xb5RN-K\xb4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2331():
    str_0 = "1\r5Ch\r2jF"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2332():
    str_0 = "_ZP$"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2333():
    str_0 = "|C~RvL+"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2334():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2335():
    bool_0 = True
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2336():
    float_0 = 3715.267768
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2337():
    bool_0 = True
    str_0 = "hLKuT"
    tuple_0 = (bool_0, str_0)
    set_0 = {tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2338():
    str_0 = ">8ZgW*cb10@x*cRc5-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2339():
    int_0 = -2879
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2340():
    str_0 = " [r\rF\tp,h99P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2341():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2342():
    bytes_0 = b"\xdd\xda\xb9\xff\xf2\xee\xfaI&\x10\xccS\xcf\xc0\x03$\xe6B\xcc"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2343():
    int_0 = -1146
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2344():
    float_0 = -1835.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2345():
    str_0 = "Bz#l4t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2346():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2347():
    complex_0 = 1518.6158 + 678j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2348():
    int_0 = 1856
    str_0 = "-Ne6D'tXE"
    bool_0 = True
    list_0 = [str_0, bool_0, bool_0]
    tuple_0 = (str_0, int_0, bool_0, list_0)
    list_1 = [int_0, tuple_0]
    none_type_0 = None
    module_0.match(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2349():
    str_0 = "4VPZK="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2350():
    int_0 = -495
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2351():
    bytes_0 = b"\xcc\xff\t\xfc:\xa0})\x04\x05\x07\x03 \xbe\xdb\xbf"
    tuple_0 = ()
    str_0 = "\nG:;+{3S($"
    tuple_1 = (bytes_0, str_0, bytes_0)
    tuple_2 = (bytes_0, tuple_0, tuple_0, tuple_1)
    none_type_0 = None
    module_0.get_new_command(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2352():
    int_0 = 1823
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2353():
    str_0 = 'g03+/"[&1D[I J'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2354():
    int_0 = 75
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2355():
    str_0 = "\x0c(Zv"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2356():
    str_0 = ".f(9~X70C.oF9"
    float_0 = 2902.4
    tuple_0 = ()
    tuple_1 = (str_0, float_0, tuple_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2357():
    tuple_0 = ()
    str_0 = "'-H<q7t|HJ[\x0bJ~"
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2358():
    bool_0 = True
    list_0 = [bool_0]
    str_0 = " Y9u&PaV0lI/am"
    str_1 = "ba@(SkAhGQ1\n9'9b"
    tuple_0 = (bool_0, list_0, str_0, str_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2359():
    int_0 = 1427
    str_0 = "uYbm"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2360():
    bytes_0 = b"S\xca>y\xc3\x17\xc2\x03\xba\xda\xc6\x83\x164\xd4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2361():
    int_0 = 956
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2362():
    str_0 = "2 _X*D1){!\t5"
    module_0.get_new_command(str_0, str_0)


def test_case_2363():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2364():
    bool_0 = False
    int_0 = 1859
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2365():
    str_0 = "8/T8,I"
    set_0 = {str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2366():
    float_0 = -1761.834
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2367():
    bytes_0 = b"\x89\x07 \xc9J%\xa9\x1f\n\x1a\x17\xf6n\xd2\xcd"
    tuple_0 = ()
    int_0 = 1322
    tuple_1 = (bytes_0, tuple_0, int_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2368():
    bytes_0 = b"\xd9\x8eT/\x80\xbb\xe9\xb4\x0c\xa0\x07d\x1b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2369():
    str_0 = "Xs}$VXJ8sH%WjNR5;|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2370():
    float_0 = 471.0
    list_0 = []
    module_0.get_new_command(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2371():
    str_0 = "1S="
    list_0 = [str_0, str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2372():
    complex_0 = 6002.17 - 656.317j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2373():
    int_0 = 929
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2374():
    bytes_0 = b'N\x00\x89\xc1\xf7\xd4\xd6\xe4&@t\xde"p'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2375():
    list_0 = []
    dict_0 = {}
    object_0 = module_1.object(*list_0, **dict_0)
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2376():
    str_0 = "]Qah9?_)Kjym1E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2377():
    str_0 = "B~'bEeY3\"`N:>"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2378():
    float_0 = -2829.14
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2379():
    bytes_0 = b"\x18@dn"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2380():
    bool_0 = False
    bytes_0 = b"\x02\xb0\xb9\xec\x94g"
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2381():
    int_0 = -1039
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2382():
    str_0 = "zjz:e}k_fa6H8"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2383():
    bytes_0 = b"\xb7Xn\xdf\xf6\xfbtxGQr\xc5\xe8T`\xd0oIZ\xec"
    tuple_0 = (bytes_0,)
    set_0 = {tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2384():
    str_0 = "*sme;N\\"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2385():
    str_0 = "wsW+Qvdx,\x0cOlML"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2386():
    int_0 = -752
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2387():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2388():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2389():
    str_0 = "E"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2390():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2391():
    str_0 = "t)pdNFcf$w~"
    str_1 = "_Ib4+u7v?\n\n"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2392():
    str_0 = ";"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2393():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_1, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2394():
    str_0 = "oy$N0~Z$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2395():
    int_0 = -1517
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2396():
    int_0 = 983
    list_0 = [int_0, int_0, int_0, int_0]
    str_0 = 'wMGF6=m5X0EiLw"B'
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2397():
    tuple_0 = ()
    str_0 = ";jrt"
    list_0 = [tuple_0, tuple_0, str_0, tuple_0]
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2398():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2399():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    tuple_1 = (tuple_0, list_0)
    module_0.get_new_command(tuple_1, tuple_0)


def test_case_2400():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2401():
    str_0 = "Y"
    str_1 = "c2Vl\x0c7"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2402():
    bytes_0 = b"\xae"
    float_0 = 3787.981158
    set_0 = {bytes_0, bytes_0, float_0}
    tuple_0 = (bytes_0, float_0, set_0)
    tuple_1 = (tuple_0, float_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2403():
    str_0 = "7P%1|,e\\\n3KTZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2404():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2405():
    bool_0 = False
    float_0 = 330.4688
    set_0 = {float_0, float_0, float_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2406():
    str_0 = "x=u-R7QJ1O56q"
    set_0 = {str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2407():
    bytes_0 = b"7"
    str_0 = "I\x0b/fc~lRi'"
    set_0 = {str_0, str_0}
    tuple_0 = (bytes_0, str_0, bytes_0, set_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2408():
    complex_0 = 269.5 - 1073.2065j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2409():
    bool_0 = False
    list_0 = [bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2410():
    complex_0 = -706.8742 - 928.93j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2411():
    list_0 = []
    int_0 = 3791
    list_1 = [list_0, int_0, int_0]
    module_0.get_new_command(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2412():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2413():
    float_0 = 702.0
    float_1 = 164.0
    bool_0 = False
    tuple_0 = (float_0, float_1, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2414():
    dict_0 = {}
    str_0 = "/$"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2415():
    int_0 = 256
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2416():
    bytes_0 = b"5\xbd\xee\xbc"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2417():
    float_0 = -607.867577
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2418():
    str_0 = "Ja;\x0cf-osjPhO(@"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2419():
    bytes_0 = b"G\xf6q\x06"
    set_0 = {bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2420():
    float_0 = 1077.48467
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2421():
    bool_0 = True
    int_0 = -480
    tuple_0 = (bool_0, bool_0, int_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2422():
    int_0 = -47
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2423():
    int_0 = 724
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2424():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2425():
    int_0 = 1078
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2426():
    float_0 = 1756.51
    set_0 = {float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2427():
    float_0 = -1329.24747
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2428():
    bytes_0 = b"U"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2429():
    int_0 = 2278
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2430():
    str_0 = "lZ-?KlR3Ht]At+}6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2431():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2432():
    int_0 = -1218
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2433():
    bytes_0 = b"G"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2434():
    int_0 = 598
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2435():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2436():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2437():
    int_0 = -2318
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2438():
    int_0 = -420
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2439():
    bytes_0 = b").\x12:\x17~\xa3[\xb1\x97\n@"
    bytes_1 = b"\xb8"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2440():
    bytes_0 = b"ME<\xb5\x00l\x96\x88\xd2\xd4\xefP\xe7\x0bV\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2441():
    int_0 = -2198
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2442():
    int_0 = 1065
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2443():
    complex_0 = -2833 + 326.0393j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2444():
    int_0 = -637
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2445():
    complex_0 = 2658 + 1645.11809j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2446():
    str_0 = "E}]L/v4^za.uZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2447():
    bytes_0 = b"\xe1\xac\xd5\xf0u)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2448():
    int_0 = -3700
    tuple_0 = (int_0,)
    module_0.get_new_command(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2449():
    str_0 = "4gDcq\nCeA{#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2450():
    int_0 = 631
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2451():
    str_0 = "^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2452():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2453():
    str_0 = "D \np=[rm\tzDYXlz4T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2454():
    str_0 = ""
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2455():
    int_0 = -4593
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2456():
    bytes_0 = b"\x9f\xa3\x0f\xdcPprt|GB^K\xa3\x15\xacL\xc0D"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2457():
    str_0 = "lwyt~d]MQQ~xB'/;["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2458():
    str_0 = "83E1>k"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2459():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2460():
    float_0 = 259.29247
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2461():
    int_0 = -508
    bytes_0 = b"T\xcd\x10\xaf\xd7\xc2"
    bytes_1 = b"e'cU\xcfk\\}H\x17#\x9f]\xba\n"
    dict_0 = {int_0: int_0, bytes_0: bytes_0, int_0: bytes_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2462():
    str_0 = "~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2463():
    float_0 = 3742.9637
    dict_0 = {float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2464():
    str_0 = "|h\x0cL"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2465():
    tuple_0 = ()
    module_1.object(**tuple_0)


def test_case_2466():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2467():
    float_0 = 3313.2308
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2468():
    float_0 = -2902.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2469():
    bool_0 = True
    tuple_0 = (bool_0,)
    bool_1 = True
    list_0 = [tuple_0, bool_1, bool_1, tuple_0]
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2470():
    str_0 = "75^{0.>{PV'(|\";OR1<"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2471():
    bytes_0 = b"\xd759v\xabsy\xeb\x9do\x88\xcc\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2472():
    int_0 = 4303
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2473():
    bytes_0 = b"\xce\xd2\x90Gt\x84\x89X_\xb4\xf4\xd6p6tB,\x02"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2474():
    bytes_0 = b"\xeeQ\x01\xc7c\xa2\x0c\x03\xc1{\xf8\x1e\xee\xc7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2475():
    str_0 = "9SKdBY(?9qU5r\x0b-"
    bytes_0 = b""
    bool_0 = False
    float_0 = 271.672591
    int_0 = -59
    list_0 = [str_0, float_0, int_0]
    tuple_0 = (list_0,)
    list_1 = [int_0, tuple_0]
    tuple_1 = (str_0, list_1, bytes_0)
    tuple_2 = (float_0, int_0, tuple_1, str_0)
    tuple_3 = (str_0, bytes_0, bool_0, tuple_2)
    module_0.get_new_command(tuple_3, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2476():
    int_0 = -2558
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2477():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2478():
    float_0 = 358.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2479():
    int_0 = -25
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2480():
    float_0 = 111.0516
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2481():
    bytes_0 = b"\xaf`\x9cf\xf7!~q\xb0\x92"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2482():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2483():
    float_0 = 1291.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2484():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2485():
    str_0 = "!G%ev>HJoS"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2486():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2487():
    str_0 = "s\ra-OAX1}OI9w_+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2488():
    str_0 = "7*!E8"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


def test_case_2489():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2490():
    bytes_0 = b"|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2491():
    int_0 = -537
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2492():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_2493():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2494():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2495():
    int_0 = -2107
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2496():
    bytes_0 = b"\x1f\xe3&X$\x1f\xef>\xa9\xcc\xdc"
    int_0 = -677
    list_0 = [bytes_0, bytes_0, int_0, bytes_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2497():
    complex_0 = -1296 - 1368.75401j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2498():
    bytes_0 = b">\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2499():
    float_0 = 770.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2500():
    bool_0 = True
    set_0 = set()
    tuple_0 = (bool_0, set_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2501():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2502():
    none_type_0 = None
    bool_0 = False
    float_0 = 459.0
    bool_1 = True
    tuple_0 = (bool_0, float_0, bool_1)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2503():
    str_0 = "q3:/Dq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2504():
    str_0 = "~a$Qpu&S(!Zu&F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2505():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2506():
    bytes_0 = b"\xeb{(q\x93\x93\x82W\x17\x0c`\x0b^\xc9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2507():
    bytes_0 = b"<\x07\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2508():
    str_0 = "mD^0xWp2+<1DuI#z*z^"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2509():
    bytes_0 = b"\x01\x0e\xea\n\x94\x9f["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2510():
    int_0 = -258
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2511():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = "5hIqlfej{j"
    tuple_1 = (tuple_0, str_0)
    set_0 = set()
    tuple_2 = (bool_0, tuple_1, set_0, set_0)
    int_0 = -777
    module_0.get_new_command(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2512():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2513():
    int_0 = -1786
    str_0 = "OW=RJ9:#,/"
    module_0.match(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2514():
    str_0 = ")*jGHII`A2"
    list_0 = [str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2515():
    float_0 = 5265.0
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2516():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    dict_0 = {}
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2517():
    complex_0 = -3508.4486 - 987.96j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2518():
    int_0 = -2071
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = (dict_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2519():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2520():
    bytes_0 = b"S`_"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2521():
    int_0 = -40
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2522():
    int_0 = 949
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2523():
    str_0 = ',AhH<Gc.\rm\\xr";b\nS'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2524():
    str_0 = "\x0b\\dwZ\t\nI*?P( NI5'\t"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2525():
    bytes_0 = b"\xa9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2526():
    complex_0 = 1403.8 + 4458j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2527():
    list_0 = []
    tuple_0 = (list_0,)
    str_0 = "SBr![XZ(.~\x0clMu"
    tuple_1 = (tuple_0, str_0)
    module_0.get_new_command(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2528():
    int_0 = -1595
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2529():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2530():
    str_0 = ";m t6a8\x0bN4*#h\x0b\x0c}UR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2531():
    str_0 = "Xqh~cQ6M\x0bE'\x0bP\x0bU*k"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2532():
    float_0 = -1533.2
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2533():
    str_0 = ".mvmb"
    str_1 = "-6Lz\x0cZy'GWk<y `J"
    str_2 = "P\tG\rc[3zh_\x0c-h%P9D]6]"
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2534():
    float_0 = 3619.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2535():
    int_0 = 2448
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2536():
    bytes_0 = b"\r\x16Z\xbar"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2537():
    int_0 = 368
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2538():
    bytes_0 = b"QG\xcf\xa0L\xdf+\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2539():
    str_0 = "RS3jGc?\x0b|'o"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2540():
    int_0 = -445
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2541():
    float_0 = 264.9
    str_0 = ""
    list_0 = [float_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2542():
    int_0 = 1071
    complex_0 = 507.7825 - 95.46j
    float_0 = 1893.71
    tuple_0 = (complex_0, float_0)
    bytes_0 = b">\nr3\x18\x12\xa1\x9az<\xb6\x87a\xdb\x16\xf3U\xc4\xf7a"
    tuple_1 = (int_0, tuple_0, bytes_0)
    module_1.object(*tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2543():
    int_0 = 1990
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2544():
    float_0 = 826.72
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2545():
    float_0 = -134.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2546():
    bytes_0 = b"\x15\xf5\xcd\xde\xd3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2547():
    str_0 = "%;4c-=w5 \r"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2548():
    int_0 = -520
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2549():
    int_0 = 3369
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2550():
    bytes_0 = b"Eo\rM\xc9\xa8(\xeay,\xb0>"
    list_0 = [bytes_0, bytes_0]
    str_0 = "N:rJn_"
    dict_0 = {bytes_0: bytes_0, bytes_0: list_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2551():
    bytes_0 = b""
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2552():
    bytes_0 = b"\xb0\xe6\x1cIX\xe4\xd1\x108\xa2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2553():
    str_0 = "x\\8>!3%6~oYK\x0chG"
    module_0.match(str_0, str_0)


def test_case_2554():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2555():
    bytes_0 = b"\xef\x9c\xee\xd0\xb2\xdeU"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2556():
    int_0 = -1026
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2557():
    bytes_0 = b"\xb1\x16#\xed\xe9\x98n\xdf\xc8\xe2\x0cB3\xf2\xc4#\xf0\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2558():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2559():
    bytes_0 = b"\xc1\x93\x91\x18\xb9G\x89\x17{`\x1f\xe0\xca$39\xee\xe3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2560():
    float_0 = -3009.0221
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2561():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2562():
    bytes_0 = b"~\xc2\x9eO"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2563():
    str_0 = "']K%9]`P[2*\\iu=W/QDl"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2564():
    bytes_0 = b"\xef\xb9&\xf0\xe4\x8c\xaf"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2565():
    int_0 = 2109
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2566():
    bytes_0 = b"v\x16^\x12\x1dW"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2567():
    int_0 = 161
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2568():
    float_0 = 2730.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2569():
    int_0 = -2073
    module_0.get_new_command(int_0, int_0)


def test_case_2570():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2571():
    bytes_0 = b"wA$\x13M%I\xf1\xae"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2572():
    complex_0 = 150.8413 - 4245.198863j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2573():
    bytes_0 = b"\xdc\x87\xc3\xd0)"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2574():
    int_0 = -2333
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2575():
    int_0 = -2850
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2576():
    str_0 = ".$-%H$3YZt#^"
    str_1 = "^R.}{m+:*%}K"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2577():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2578():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2579():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0]
    list_2 = [list_1, bool_0]
    module_0.match(list_2, list_0)


def test_case_2580():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2581():
    int_0 = -612
    module_0.match(int_0, int_0)


def test_case_2582():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2583():
    bool_0 = True
    list_0 = [bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2584():
    bytes_0 = b"\xe4I:\xce\x12\x8f\xc9zLD`j\xa21~\xcc\xfc\xba'\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2585():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2586():
    str_0 = "'@xY8Ye|BI* "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2587():
    int_0 = -4008
    module_0.get_new_command(int_0, int_0)


def test_case_2588():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2589():
    str_0 = "Q4i'9]>$0w$"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2590():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2591():
    bytes_0 = b"\xbc\x8d\x022"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2592():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2593():
    float_0 = 813.55871
    list_0 = [float_0, float_0, float_0]
    module_0.get_new_command(list_0, float_0)


def test_case_2594():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2595():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2596():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2597():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2598():
    float_0 = -754.134
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2599():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2600():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2601():
    complex_0 = 1305.3 + 1276.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2602():
    float_0 = 3321.0
    list_0 = [float_0, float_0, float_0, float_0]
    module_1.object(*list_0, **float_0)


@pytest.mark.xfail(strict=True)
def test_case_2603():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = "yMRkIMrb_"
    bytes_0 = b"XH\xe8\x8cf\xbc"
    tuple_0 = (bool_0, list_0, str_0, bytes_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2604():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2605():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2606():
    float_0 = -3261.29804
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2607():
    float_0 = 2184.2
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2608():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2609():
    bytes_0 = b"\xae\xbe\xecg\xb5\x9e\x9b'\x94\x05\x11\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2610():
    complex_0 = -673.1724 + 1358.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2611():
    int_0 = -320
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2612():
    str_0 = "h)3@qB6\\\r]%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2613():
    complex_0 = -4203 + 256j
    list_0 = [complex_0]
    list_1 = [list_0]
    module_1.object(**list_1)


def test_case_2614():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2615():
    bytes_0 = b"\x18\xed$\xa5\xf0y\xaa\xe3\x07_\xb3Z$>\x01}M\xb9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2616():
    float_0 = -17.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2617():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2618():
    bytes_0 = b'`m\xd2v\xb1\xfc\xb5\xda\xc9\xe0@\xe33\xa6"D\xa9g\xbd'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2619():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2620():
    int_0 = -330
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2621():
    bytes_0 = b'/]\xad\xc5M\xd9\xde8\xf4\xe2"\x8f\x12\xfaX'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2622():
    str_0 = "sd%>&#H`UK_L@<;"
    bool_0 = False
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2623():
    float_0 = -3433.826
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2624():
    str_0 = "gdz1/h>\n~j+%n!do1"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2625():
    bytes_0 = b'E\x8d"\x94\xf4h.3'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2626():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2627():
    set_0 = set()
    list_0 = [set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2628():
    float_0 = -1534.492366
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2629():
    bytes_0 = b"k\x87\x16d-\xc5\xd8J\x9b\xf2a \xe2\xc87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2630():
    bytes_0 = b"\xce\x1a\x90M\x83\xfa\xbc\x8bS\x975\xd0D\xbd\x02\r\x93"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2631():
    float_0 = 1053.33637
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2632():
    float_0 = -11.6
    bool_0 = False
    set_0 = {float_0, float_0, float_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2633():
    int_0 = -5008
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2634():
    int_0 = -3163
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2635():
    bytes_0 = b"g\xba\xb5\x9d(f\xe3\xfb&\xafg"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2636():
    int_0 = 3877
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2637():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2638():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2639():
    int_0 = -1614
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2640():
    int_0 = -1821
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2641():
    float_0 = -223.733
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2642():
    str_0 = "D"
    set_0 = {str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2643():
    bytes_0 = b"-k\xf27]7\xfa\xb0"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2644():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2645():
    bytes_0 = b"\x1a\xee\x08O\xbcO\x87\x9f=\xffX4.\xc6\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2646():
    float_0 = -2808.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2647():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2648():
    str_0 = "]lSKXxr)u<X#$ORIIyu"
    set_0 = {str_0, str_0}
    int_0 = -1012
    tuple_0 = (set_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2649():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    module_1.object(*list_1, **list_0)


def test_case_2650():
    pass


def test_case_2651():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2652():
    int_0 = 560
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2653():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2654():
    int_0 = 2622
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2655():
    bool_0 = False
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2656():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2657():
    int_0 = -2476
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2658():
    str_0 = "MxOo8D"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2659():
    object_0 = module_1.object()
    module_1.object(**object_0)


@pytest.mark.xfail(strict=True)
def test_case_2660():
    str_0 = "-1{E\nlzC\r>%"
    int_0 = 184
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2661():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2662():
    bytes_0 = b"\xaf\xb6n\xaa+\x11Y\x89\x97\x86CA\xa7\xab1\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2663():
    int_0 = -386
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2664():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2665():
    bytes_0 = b"\x06nG\x8bE"
    str_0 = "cL~c#/$"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: str_0, str_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2666():
    tuple_0 = ()
    list_0 = []
    list_1 = [tuple_0, tuple_0, list_0]
    list_2 = [list_0, tuple_0]
    list_3 = [list_1, list_2]
    module_0.match(list_3, list_1)


@pytest.mark.xfail(strict=True)
def test_case_2667():
    str_0 = "'X]f:_#\x0bD<MC2"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2668():
    bytes_0 = b"\xcd"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2669():
    complex_0 = -2287.75 + 543j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2670():
    float_0 = 2382.239274
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2671():
    int_0 = 3269
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2672():
    int_0 = 1118
    bytes_0 = b""
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2673():
    str_0 = "Rwf0\x0crMvBkuR5s?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2674():
    int_0 = -676
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2675():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2676():
    str_0 = "n3gHQ|1},)8u4fW7pS"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2677():
    bytes_0 = b"\x8f\xb9\xa7V\x96[M\xdc,\x9a\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2678():
    float_0 = -1948.722
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2679():
    bytes_0 = b"$\xe3\xb2\xb8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2680():
    float_0 = -3494.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2681():
    complex_0 = 1717.6005 - 771.673754j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2682():
    float_0 = -1487.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2683():
    float_0 = 561.7913
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2684():
    int_0 = -930
    list_0 = [int_0]
    tuple_0 = (int_0, int_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2685():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2686():
    str_0 = "(eggm*5\\%4^"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2687():
    bytes_0 = b"eC\xf9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2688():
    dict_0 = {}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2689():
    int_0 = 887
    list_0 = [int_0, int_0, int_0]
    list_1 = [list_0, int_0, list_0, list_0]
    module_0.match(list_1, list_0)


def test_case_2690():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2691():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0]
    bool_0 = False
    set_0 = {bool_0}
    tuple_1 = (list_0, set_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2692():
    int_0 = -1224
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2693():
    bytes_0 = b"B\x1c\xdeW\xff\xb1\xe6\x95\x86\xc2\xa1SD\x9f*7\x89\x9b\xf7\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2694():
    float_0 = -3949.04628
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2695():
    complex_0 = 2526.42 - 3959.6208j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2696():
    int_0 = -719
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2697():
    float_0 = -478.00554
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2698():
    complex_0 = -470.05 - 2112.42659j
    dict_0 = {complex_0: complex_0}
    float_0 = 911.87661
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2699():
    str_0 = "km:\n)\\kQ>"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2700():
    str_0 = "Y<Y\x0cE.C\t+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2701():
    int_0 = -813
    int_1 = 608
    tuple_0 = (int_0, int_1)
    str_0 = "T%y\n\\7`\n\x0crqNhGv`DB"
    dict_0 = {tuple_0: int_1, tuple_0: int_1}
    list_0 = [tuple_0, str_0, tuple_0, dict_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2702():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2703():
    bool_0 = True
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2704():
    bytes_0 = b"\xee\xc3#*\xefE\xd3\xbb\x17\xbe\x07\x16\x97M^"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2705():
    bytes_0 = b"<J"
    set_0 = {bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2706():
    bytes_0 = b"xm\xb3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2707():
    bytes_0 = b"\x7fy\x8b\x86\x86\xb8"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2708():
    str_0 = ",6F.E'h"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2709():
    bytes_0 = b"9b\xe7[\xeb\x0b\x04\xe4\xff"
    module_0.match(bytes_0, bytes_0)


def test_case_2710():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2711():
    bytes_0 = b"\x9fe|\r\x83o~"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2712():
    bytes_0 = b"\xe2\x7fS\xc5\x1c=\xea\xce8\x02\x0f\xe9\xb3\x17\xcaJ\x9e\x12\x8a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2713():
    int_0 = -1072
    bool_0 = False
    tuple_0 = (int_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2714():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_2715():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2716():
    bool_0 = True
    int_0 = -792
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2717():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


def test_case_2718():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2719():
    str_0 = "2+!eR2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2720():
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {bool_0, bool_0}
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2721():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2722():
    bytes_0 = b">\x1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2723():
    float_0 = -1568.37
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2724():
    bytes_0 = b"\xe8R\xa8\\\xf2\x05\xdaV\xb9\x9f\xf8\xfe\xcc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2725():
    int_0 = 6139
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2726():
    complex_0 = 525 + 474j
    bool_0 = True
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2727():
    float_0 = -434.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2728():
    int_0 = 2588
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2729():
    str_0 = "KnXpUa)_N\x0b%_uvYEoyl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2730():
    float_0 = 2528.0232
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2731():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2732():
    float_0 = 2037.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(float_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2733():
    bytes_0 = b"~\xb3\xda=\x15\xc2=o:,\x84\xf1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2734():
    bool_0 = False
    tuple_0 = ()
    module_0.match(bool_0, tuple_0)


def test_case_2735():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2736():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    bytes_0 = b"Du\xd7\xf4\xb0\x03X9\xfbL\x9d8\xffqM:"
    float_0 = 2329.68276
    tuple_1 = (tuple_0, dict_0, bytes_0, float_0)
    list_0 = [tuple_1, tuple_1]
    dict_1 = {tuple_0: tuple_1, float_0: dict_0, float_0: list_0, bytes_0: dict_0}
    module_0.get_new_command(dict_1, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_2737():
    str_0 = "P@gW"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2738():
    float_0 = -977.31614
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2739():
    str_0 = "=s2-/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2740():
    bytes_0 = b'\x9e\x08"\xc9]7Eb"?\xea\x9ba\xf2'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2741():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_2742():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2743():
    none_type_0 = None
    int_0 = 523
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2744():
    str_0 = "~\nN8p3UD<@;"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_2745():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2746():
    str_0 = "^P+K<:bKg13f>\rY\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2747():
    int_0 = 3386
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2748():
    bytes_0 = b'\x87bU\x84\xad\xed\xd5"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2749():
    int_0 = -2870
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2750():
    pass


def test_case_2751():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2752():
    bytes_0 = b"\xafX\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2753():
    bool_0 = True
    str_0 = "mErKr^`-AMB,"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2754():
    str_0 = "nS4GA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2755():
    int_0 = 653
    list_0 = [int_0, int_0, int_0]
    str_0 = "\\V]\\q,)\tNXl&\x0b"
    bool_0 = True
    tuple_0 = (int_0, list_0, str_0, bool_0)
    tuple_1 = (tuple_0,)
    object_0 = module_1.object()
    module_0.get_new_command(tuple_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2756():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2757():
    int_0 = 4580
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2758():
    int_0 = -40
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2759():
    int_0 = 2003
    bool_0 = True
    bytes_0 = b"\t\xbd\xe6\xba"
    tuple_0 = (int_0, bool_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2760():
    str_0 = "gtl}"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2761():
    int_0 = 2576
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2762():
    complex_0 = 2500.8921 + 536.7j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2763():
    str_0 = ""
    dict_0 = {str_0: str_0}
    float_0 = 2577.0
    tuple_0 = (dict_0, dict_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2764():
    str_0 = "*\tI'\\H3c8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2765():
    int_0 = 1891
    str_0 = "*"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2766():
    int_0 = -687
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_2767():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2768():
    tuple_0 = ()
    set_0 = {tuple_0}
    list_0 = [tuple_0, tuple_0, set_0, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2769():
    none_type_0 = None
    bool_0 = False
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2770():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2771():
    str_0 = "YeU^"
    bool_0 = False
    dict_0 = {str_0: bool_0, bool_0: str_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2772():
    complex_0 = -362.2555 + 322.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2773():
    bytes_0 = b"\x9eB\xe7\xa6^C%\x99\xae\xdb\x86u3\xc3\xff"
    set_0 = {bytes_0, bytes_0}
    module_0.match(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2774():
    str_0 = "m8m[5* k@Kh)@q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2775():
    bytes_0 = b"&\xf4\x01K\xb3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2776():
    int_0 = 931
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2777():
    float_0 = -2910.9
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2778():
    bytes_0 = b"\xdf\xca}uF1\n"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2779():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2780():
    bytes_0 = b"e\x9a_p:\xd1\xd5\xce]\xf0$p\xbf}f\xdc;w"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, bytes_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2781():
    int_0 = -3341
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2782():
    str_0 = "(\x0cV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2783():
    float_0 = 49.34779
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2784():
    float_0 = -119.9529
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2785():
    bool_0 = False
    bool_1 = False
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_2786():
    bytes_0 = b"\xd1P\x86\xaf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2787():
    int_0 = -1782
    list_0 = [int_0, int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2788():
    float_0 = -3619.36434
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2789():
    str_0 = ""
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2790():
    str_0 = "T*|8\nU&4@M)d;p96#}c3"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2791():
    int_0 = -1841
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2792():
    str_0 = "f4+@WXA(B}77+A\x0b"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


def test_case_2793():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2794():
    bytes_0 = b"\x8bKC\xd7\x1a\t\x89aSj\xd4\xf6"
    bool_0 = True
    set_0 = {bool_0, bytes_0, bytes_0}
    tuple_0 = (bytes_0, set_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2795():
    tuple_0 = ()
    bytes_0 = b"]>\xf0\n\xd8\xf0c7"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2796():
    int_0 = 457
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2797():
    float_0 = -1329.6481
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2798():
    str_0 = "\x0b=^7rsE~I*\r7&64`D3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2799():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2800():
    bytes_0 = b"n\xf4\xe3\xb1(R\xa4\xa2=*"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, dict_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2801():
    bytes_0 = b"J\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2802():
    int_0 = 337
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2803():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2804():
    str_0 = "X"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2805():
    str_0 = "z5j!Klvb RI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2806():
    str_0 = " P%X"
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2807():
    bytes_0 = b"u\x92"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2808():
    int_0 = -175
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2809():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_2810():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2811():
    float_0 = 369.9
    tuple_0 = (float_0, float_0)
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2812():
    int_0 = -1367
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2813():
    none_type_0 = None
    dict_0 = {none_type_0: none_type_0}
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2814():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    str_0 = ",[z21"
    bool_1 = False
    tuple_0 = (str_0, bool_1, bool_1)
    module_0.match(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2815():
    bool_0 = True
    float_0 = -1775.561
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2816():
    bytes_0 = b"\nB\x99\xd8\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2817():
    bytes_0 = b""
    list_0 = [bytes_0]
    dict_0 = {bytes_0: list_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2818():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2819():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2820():
    str_0 = "c\x0c"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2821():
    float_0 = 2032.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2822():
    str_0 = "iCm"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2823():
    bytes_0 = b"\x95\x8f"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2824():
    float_0 = 3924.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2825():
    bytes_0 = b"S\x1b_B\xa7\xf8\xedN\x8c1_\xcb\x16\xd3\xede"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2826():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2827():
    complex_0 = 1812.9 + 49.1592j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.get_new_command(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2828():
    complex_0 = 716 - 1374.38j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2829():
    bool_0 = False
    tuple_0 = (bool_0,)
    set_0 = {tuple_0}
    bool_1 = True
    tuple_1 = (set_0, bool_1)
    module_0.match(set_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2830():
    float_0 = -1244.2271
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2831():
    str_0 = 'MH\r-zyK"'
    module_0.match(str_0, str_0)


def test_case_2832():
    pass


def test_case_2833():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_2834():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2835():
    str_0 = "QJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2836():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2837():
    complex_0 = -240.124068 + 1506j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2838():
    str_0 = "\x0c\x0b\\<\t0k"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2839():
    bytes_0 = b"\x81\xe0!\x82\xed'\xd8\xb1<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2840():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2841():
    str_0 = "jj3yCR.w8*\x0b:g5;&Ehv"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2842():
    float_0 = -641.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2843():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2844():
    bytes_0 = b"\x85\xddl\x85\x8c\x8b\xe4\x12"
    bytes_1 = b"C\xdaZ\xbb:\xb6_\xc2\x07z\xf4m\xed{\x1cP,\x15\x1e"
    module_0.match(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_2845():
    int_0 = 890
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2846():
    none_type_0 = None
    float_0 = -1206.72078
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2847():
    int_0 = 816
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_2848():
    bytes_0 = b"\xce\xa0\x05H8\x9c\x88\xc2\xb3P."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2849():
    bytes_0 = b"[\x86M5\xb5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2850():
    bytes_0 = b"c\xe6\xcb:\x06\xa8K\xfc\t5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2851():
    str_0 = "L1=4S*\r|H\\>S"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2852():
    int_0 = 117
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2853():
    complex_0 = 1479.98552 - 5079.464187j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2854():
    float_0 = 47.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2855():
    bytes_0 = b"\xd7\xab"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2856():
    bool_0 = True
    int_0 = -1186
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2857():
    str_0 = "GhSPnz\rc%8"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2858():
    bytes_0 = b"\xd7\xef\xb4,O\x03\xcd\xb1V\x10\x82\xb7\xe4\x8d\xad\xea\xf5(\x90"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2859():
    float_0 = 122.1
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2860():
    bytes_0 = b"\x1e\xc9\xa5\xd7\xc4\xd3p\xcf\xe9\xa3A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2861():
    int_0 = 3087
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2862():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2863():
    complex_0 = -1223.5 - 43.74516j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2864():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2865():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_0, bool_1)
    list_0 = [tuple_0, bool_0, tuple_0]
    list_1 = [list_0, bool_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_2866():
    float_0 = 701.22
    module_0.get_new_command(float_0, float_0)


def test_case_2867():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2868():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2869():
    bool_0 = True
    int_0 = 1610
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2870():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2871():
    float_0 = 278.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2872():
    str_0 = "`Y!Gs3GaVWz\tTf1?B?<X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2873():
    bytes_0 = b"\xfc\xc16\x0c\xc5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2874():
    bytes_0 = b"\x016\xe1\xd1\xbe`\xbar\x83\xe2K\x17\xf5\xac\xdfW1\xbe\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2875():
    str_0 = "J:DiDk!OA=:,:F "
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2876():
    str_0 = "($c\x0c?\n\x0b"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2877():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2878():
    int_0 = -2103
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2879():
    int_0 = -888
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


def test_case_2880():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2881():
    int_0 = 1305
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2882():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2883():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    list_0 = [tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_2884():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2885():
    int_0 = 2993
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2886():
    bytes_0 = b"\xf5\x9a\xdc\xe5"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2887():
    str_0 = "x"
    int_0 = -5533
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2888():
    bytes_0 = b"_\xa4\xaf#\x9b\xb7\x9d\x9d7\xee\xea<z\xa8\x12(%\x8f\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2889():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_2890():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2891():
    float_0 = -2156.52402
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2892():
    str_0 = "#C:QY-+!"
    str_1 = "1$k8>@"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_2893():
    bytes_0 = b"X\xdb\x89"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2894():
    int_0 = 341
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_2895():
    int_0 = 3664
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2896():
    str_0 = "Vj<$T6O'sF\nLPXdv@P&"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2897():
    bytes_0 = b"\xba\nJ_\xa3\x03;.\x11\xf9\xb1a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2898():
    float_0 = 476.405368
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2899():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2900():
    float_0 = -1732.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2901():
    bool_0 = True
    set_0 = {bool_0}
    tuple_0 = (bool_0, bool_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2902():
    int_0 = 2239
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2903():
    float_0 = -3367.1
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2904():
    str_0 = "(H=[d'd\x0b}$.~,Nxo.HC"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2905():
    float_0 = -906.32519
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2906():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.match(list_0, object_0)


def test_case_2907():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2908():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2909():
    int_0 = -1444
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2910():
    str_0 = "j4LN#5?"
    float_0 = 1742.0
    dict_0 = {str_0: str_0, str_0: str_0, str_0: float_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2911():
    int_0 = -2665
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2912():
    float_0 = 1792.728
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2913():
    str_0 = ")0c57@\tAb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2914():
    int_0 = 472
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2915():
    int_0 = -459
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2916():
    int_0 = -693
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2917():
    int_0 = 5
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2918():
    str_0 = ";j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2919():
    float_0 = -6133.0
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2920():
    str_0 = "lVKx"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2921():
    int_0 = 609
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2922():
    str_0 = "T@$!_st"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2923():
    bytes_0 = b"\xb1\xcd\x96\x1c\x17r\xf3\xd1w\xb0\x7f\xc2\r\xeb\x06\xe7&c"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2924():
    bool_0 = True
    float_0 = -2483.52954
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2925():
    bytes_0 = b"\x92\x0b,\x1a\xe3i"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2926():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2927():
    int_0 = 930
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2928():
    tuple_0 = ()
    bytes_0 = b"\xf1\x19v\x99\x81e\xe0\x10d\x9d\x03\xe8>\x83X"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2929():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_2930():
    str_0 = "#sN.Es!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2931():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2932():
    str_0 = "9n_BI @px"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_2933():
    bytes_0 = (
        b"\xbe\x81\xb1\xb9\xc8\xf2\x87\x12\x8a\xaa\xf4\xf2\t\x16\x1e\xa2\xcd\x8e^\x0b"
    )
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2934():
    str_0 = "@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2935():
    float_0 = -1001.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2936():
    str_0 = ""
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2937():
    str_0 = ",;ynz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2938():
    bytes_0 = b"\xab\xf8:\xfd\x15_\xd1\x11L\x9d6\x9d\x9d\x83"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2939():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2940():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    bool_0 = False
    int_0 = -1443
    tuple_1 = (set_0, bool_0, int_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2941():
    int_0 = -1101
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2942():
    bytes_0 = b",\xf7\xd5M\x13"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2943():
    bytes_0 = b";\xe1\xc0+\x83\x0b[0&\xff\x87z\xb5\xafT\xfb\xa6\xe3\x00K"
    bool_0 = True
    dict_0 = {bytes_0: bool_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2944():
    complex_0 = -3784.095 - 631.55897j
    bool_0 = False
    module_0.get_new_command(complex_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2945():
    str_0 = "h(\x0bKrXAIsNj!P;\nUs"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2946():
    int_0 = 505
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2947():
    str_0 = "4>aF?)pwD/T"
    int_0 = 1933
    dict_0 = {str_0: str_0, str_0: str_0, str_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2948():
    bytes_0 = b"`(L\xf2\x7f:j}\xe0\xb1@"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2949():
    str_0 = "*2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2950():
    int_0 = 2294
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2951():
    str_0 = "d5KzxYi "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2952():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2953():
    int_0 = -2004
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2954():
    object_0 = module_1.object()
    str_0 = "~"
    dict_0 = {}
    tuple_0 = (str_0, dict_0)
    module_0.match(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2955():
    int_0 = -3683
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_2956():
    none_type_0 = None
    dict_0 = {}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2957():
    complex_0 = -4575.001033 + 1307.979267j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2958():
    str_0 = ".C\n(wFj\\=0r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2959():
    str_0 = "TJ#ZlXl2"
    tuple_0 = (str_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2960():
    object_0 = module_1.object()
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(object_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_2961():
    str_0 = "RYZ.I,DWWc<wE"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2962():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2963():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    tuple_0 = (list_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2964():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2965():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bytes_0 = b"\xa3\n\x16\xbaV`\xf2}\xe6"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2966():
    str_0 = "b F`=8*fY#B\tO,"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2967():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (dict_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2968():
    float_0 = 2401.29008
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2969():
    int_0 = 2146
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2970():
    int_0 = -838
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_2971():
    bytes_0 = b"1,\x03\x07\xe9u\xe0'P\xa0`[\xa3\xcf\xc3\xf2\xd9s"
    module_0.match(bytes_0, bytes_0)


def test_case_2972():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2973():
    bytes_0 = b"'[\xe4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2974():
    bytes_0 = b"\xc0\xdc\x98\x19{\x83l\xe3\xe0\xa1t\xf6#K\x7f(\x81Qn"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2975():
    str_0 = "ht;*/X'B"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2976():
    int_0 = 3745
    module_0.match(int_0, int_0)


def test_case_2977():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2978():
    set_0 = set()
    bool_0 = False
    str_0 = "x$8`uz5MoB=I"
    tuple_0 = (set_0, bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2979():
    list_0 = []
    bytes_0 = b"Z\x06\xc9\x0bpzO\xc7\x82{\xc3\xb6\xbb\x81\xdc\x91\xccK\x1c"
    module_0.match(list_0, bytes_0)


def test_case_2980():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2981():
    int_0 = -400
    module_0.match(int_0, int_0)


def test_case_2982():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2983():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2984():
    float_0 = -1971.3
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2985():
    complex_0 = -2593.77 + 2220j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2986():
    complex_0 = -2439.08 + 2231.918j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


def test_case_2987():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2988():
    str_0 = "B"
    module_0.get_new_command(str_0, str_0)


def test_case_2989():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2990():
    str_0 = '\nf)oItj"U1AA"//>'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2991():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2992():
    float_0 = 1211.01
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2993():
    tuple_0 = ()
    bytes_0 = b"\xba\x9a\xea\x07\xc5\x1d\xf1r\xb94\xba\x02>\xff\xd5$\xaf.K\xc9"
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_2994():
    bytes_0 = b"\xdb\xad\xd2$\x8a\x0e\xee^\xce\xb3\x9e\x1e\xe1dM\xe9hh\xf4t"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_2995():
    pass


@pytest.mark.xfail(strict=True)
def test_case_2996():
    complex_0 = 1480.3 + 2409.6406j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_2997():
    bool_0 = True
    bool_1 = False
    bytes_0 = b"i\xa5\xc5\x8f\xa6F\xde\xb2\x9b\x8c5\xben\x0c\xc1\x1eOB"
    tuple_0 = (bool_0, bool_1, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2998():
    bytes_0 = b"\xc7@\xbdi*\n"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2999():
    bytes_0 = b"\xe8\x91\x98=\x9d*\xdf\xab\xc6\x0b\xf5\n\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3000():
    float_0 = 342.931362
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3001():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3002():
    str_0 = "YD]H#p7~.~RG "
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3003():
    bytes_0 = b"7"
    tuple_0 = (bytes_0,)
    bool_0 = False
    dict_0 = {tuple_0: bytes_0, tuple_0: tuple_0, bool_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3004():
    object_0 = module_1.object()
    bytes_0 = b""
    module_0.match(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3005():
    int_0 = -3193
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


def test_case_3006():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3007():
    dict_0 = {}
    list_0 = [dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3008():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3009():
    bytes_0 = b"G\x8a\xe5F\x15p\xf0\x16\xb0\xb5M\xe0\xcd\xa3\x06\x99k("
    object_0 = module_1.object()
    dict_0 = {bytes_0: bytes_0, bytes_0: object_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3010():
    str_0 = "`7A$X\t%1s&ZT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3011():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3012():
    bytes_0 = b"z\xa2\x03\x11\xa1\x88\xad\x02O"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3013():
    int_0 = 1738
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3014():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3015():
    str_0 = "p%F/uK|P*YgtYSFl@3\x0b"
    bytes_0 = b"\x83\xf0y\x1d\xc4n00\xca2i"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3016():
    float_0 = 2071.172
    bytes_0 = b"\xa7q\xe8\x96l\xf3\xe9}\xfc"
    float_1 = 2541.0
    tuple_0 = (float_0, bytes_0, float_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3017():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3018():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


def test_case_3019():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3020():
    int_0 = 1301
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3021():
    int_0 = 2039
    bool_0 = True
    tuple_0 = ()
    list_0 = []
    tuple_1 = (int_0, bool_0, tuple_0, list_0)
    tuple_2 = (tuple_1,)
    module_0.match(tuple_2, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3022():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3023():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3024():
    bytes_0 = b"WB\xd0\xb8f\xcak\xc7}\xdb"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3025():
    str_0 = ""
    set_0 = {str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3026():
    int_0 = -767
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3027():
    float_0 = 2037.44
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3028():
    str_0 = "I[b5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3029():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3030():
    bytes_0 = b"A\xe8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3031():
    bool_0 = True
    bytes_0 = b"\x1d\x1c\x9c(\x85;\xc2\x19e\xb7\xc2V{WD\x17"
    str_0 = 'Y\n4[Ok`\x0b\\"i!R'
    tuple_0 = (bool_0, bool_0, bytes_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3032():
    str_0 = "s"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3033():
    bytes_0 = b'\xee)_e"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3034():
    float_0 = -2343.2507
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3035():
    bool_0 = True
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3036():
    int_0 = -2454
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3037():
    int_0 = -1500
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3038():
    complex_0 = 580.787 - 2103.3833j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3039():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3040():
    bytes_0 = b"\xe5\xcfB<"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3041():
    str_0 = "Se'0?Vl]~wA\tYL.v)]c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3042():
    int_0 = -1401
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3043():
    complex_0 = -439.47523 - 1439.6521j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3044():
    float_0 = -1194.9
    none_type_0 = None
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3045():
    bytes_0 = b"AN\x06\x13l\xda\xb3\xa5\x90\xaa,\x14\xcd\xf3\xd5\xb7"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3046():
    float_0 = -739.490558
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3047():
    float_0 = 2805.69
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3048():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3049():
    int_0 = -2029
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3050():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3051():
    str_0 = "G\rd>G*)LVP6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3052():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3053():
    bytes_0 = b""
    bytes_1 = b"}\x8b\xa7\x0b\xcd\xb5o\x08t"
    tuple_0 = (bytes_0, bytes_1, bytes_0)
    module_0.get_new_command(tuple_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3054():
    int_0 = 539
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3055():
    complex_0 = 1543 - 1893.566j
    bytes_0 = b"\xd0\x17\x98P\xe7QJ\xeaF\xad\x04\xed\xa3\xf8\xe5\x05\xc3\xcaNN"
    set_0 = {complex_0, complex_0, complex_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3056():
    int_0 = -526
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3057():
    int_0 = 1473
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3058():
    bytes_0 = b"'\xfeK\x10\xa0\xf9@ \xf6\xe9\x9e\x89\xc1h"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3059():
    int_0 = -39
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3060():
    int_0 = -3173
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3061():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3062():
    bytes_0 = b"\xaf"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3063():
    int_0 = -1573
    module_0.match(int_0, int_0)


def test_case_3064():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3065():
    int_0 = 443
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3066():
    int_0 = 4650
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3067():
    str_0 = "4j@Aau}-X2VoSB0D&"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3068():
    float_0 = 738.3458
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3069():
    bytes_0 = b"\xbf("
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3070():
    float_0 = -1613.072232
    tuple_0 = (float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3071():
    str_0 = "hw]XG27b\t~o``'p"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3072():
    bytes_0 = b"i\xfd\x97,\x91\xa7\xf1\xa9\x98\x8b\xfe\xe4<0\x83\xab3"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3073():
    int_0 = 64
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3074():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3075():
    complex_0 = -2466.5321 + 4335.291j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3076():
    float_0 = -2458.49
    bytes_0 = b"\xa5"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.match(float_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3077():
    str_0 = "segU(n+$(C"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = 901
    tuple_0 = (dict_0, int_0, dict_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3078():
    str_0 = "j'\"ef\\1.vh8\x0cW\nUy/OSC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3079():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3080():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3081():
    complex_0 = 739.72 + 5192.6813j
    module_1.object(**complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3082():
    float_0 = -712.57807
    bool_0 = True
    list_0 = [bool_0, bool_0, float_0, bool_0]
    tuple_0 = (float_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


def test_case_3083():
    object_0 = module_1.object()


def test_case_3084():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3085():
    bytes_0 = b"\xc3\x90D\xe7\x10\x0b=}#\xad\xf3\x84\t\x03\x8bB\xad\xacn\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3086():
    float_0 = 2564.98
    tuple_0 = (float_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3087():
    str_0 = "9D>Jr\t:"
    int_0 = -755
    set_0 = {str_0, int_0, str_0}
    float_0 = 3598.0
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3088():
    str_0 = "{L0\n!u\\DTWc"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3089():
    str_0 = "\n/8kK XFU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3090():
    int_0 = 1912
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3091():
    str_0 = "<.wk.k\ruT2+(mN\\7w$6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3092():
    bytes_0 = b"ZFlm\x9bY\xf3b"
    bool_0 = True
    list_0 = [bytes_0, bytes_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3093():
    bytes_0 = b"\x81\xe6}\x19-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3094():
    bytes_0 = b"\xd8\xaa\xa69\xb3"
    tuple_0 = ()
    tuple_1 = (bytes_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3095():
    list_0 = []
    float_0 = -3403.316034
    list_1 = [list_0, float_0, float_0, float_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3096():
    bytes_0 = b"VM'\x08\x1d\xee@7["
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3097():
    int_0 = -287
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3098():
    int_0 = -159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3099():
    float_0 = 681.07
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3100():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3101():
    int_0 = 984
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3102():
    str_0 = "P\n~u"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3103():
    complex_0 = 2688.779 - 936.05205j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3104():
    int_0 = 1531
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3105():
    int_0 = -314
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3106():
    str_0 = "^yp@LmhlA<W0"
    list_0 = [str_0]
    list_1 = [list_0, str_0, str_0, str_0]
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3107():
    float_0 = -1624.496147
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3108():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, bool_0]
    module_0.match(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3109():
    bytes_0 = b""
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3110():
    bytes_0 = b"\xf6\xce\xfe\xd7\xdd\x8d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3111():
    int_0 = -177
    float_0 = 442.616
    module_0.get_new_command(int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3112():
    float_0 = -972.33
    set_0 = {float_0, float_0, float_0, float_0}
    list_0 = [set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3113():
    float_0 = 477.41
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3114():
    float_0 = 4965.244
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3115():
    int_0 = 3209
    tuple_0 = (int_0, int_0, int_0, int_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3116():
    int_0 = 1815
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3117():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3118():
    str_0 = ":goZdRY\\\nC;_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3119():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3120():
    bytes_0 = b"\xd3\xf6\x82\x8b\xdd\xdbD3\x82\xf8\x18x\xd7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3121():
    tuple_0 = ()
    tuple_1 = (tuple_0,)
    dict_0 = {tuple_1: tuple_0, tuple_1: tuple_0, tuple_0: tuple_1}
    int_0 = 2023
    tuple_2 = (dict_0, tuple_0, int_0)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3122():
    bytes_0 = b"G\x0f\x9c,\x87/\xbd_\xc0\xc4\x14.L\x14\x92g\xd9"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3123():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3124():
    bytes_0 = b"\x07`\x99\xa7\x82]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3125():
    int_0 = -2074
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3126():
    float_0 = -2867.71
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3127():
    none_type_0 = None
    int_0 = -42
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3128():
    bool_0 = True
    tuple_0 = ()
    set_0 = {bool_0, tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3129():
    bytes_0 = b" \xb3\x8f\x11\xf9\xbf\xad\x87\xcdu\x172"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3130():
    str_0 = "4lKRyLe#%J_i<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3131():
    int_0 = -1418
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3132():
    float_0 = -1190.39
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3133():
    str_0 = "-oP#UW3"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3134():
    str_0 = "Aw'feuiV"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3135():
    str_0 = "t<{{e\tvK\\FZ}nX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3136():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3137():
    int_0 = 588
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3138():
    float_0 = -40.0
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3139():
    complex_0 = -2197.78 + 503.67j
    set_0 = {complex_0}
    module_0.match(set_0, complex_0)


def test_case_3140():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3141():
    str_0 = "4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3142():
    str_0 = "E%INsT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3143():
    float_0 = -266.03
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3144():
    int_0 = -724
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3145():
    bytes_0 = b"y\xb2U\xff\xb6,!"
    tuple_0 = (bytes_0,)
    str_0 = "'\"\"k||Cv8tlU=GIi'"
    list_0 = []
    tuple_1 = (tuple_0, str_0, list_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3146():
    bytes_0 = b"\xbd\xea\xba\x96&\xfa\xe6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3147():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3148():
    float_0 = -1814.119981
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3149():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3150():
    str_0 = "KcJ%y`8\n:70oW6F|"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3151():
    int_0 = -89
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3152():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3153():
    bytes_0 = b"\x12"
    bool_0 = True
    set_0 = {bytes_0}
    complex_0 = 849 + 176j
    tuple_0 = (bytes_0, bool_0, set_0, complex_0)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3154():
    int_0 = -1917
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3155():
    float_0 = -1579.1458
    dict_0 = {float_0: float_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3156():
    bytes_0 = b"\xdbW\x83"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3157():
    bytes_0 = b'\xc2\xae\xc6B\xa9Z\x08\xbc\xb7\xcc\x0e\x1d\xa30\xbb\xbb"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3158():
    str_0 = "\x0c|(%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3159():
    int_0 = -227
    int_1 = 870
    dict_0 = {int_0: int_1, int_0: int_1, int_0: int_1}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3160():
    str_0 = '3cVvl{~X"\tD'
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3161():
    str_0 = "!Rd(i{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3162():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3163():
    complex_0 = -939 - 2216.6344j
    list_0 = [complex_0, complex_0]
    str_0 = "aZ,R([N<"
    bytes_0 = b"\x0e\x8b\x07A\x1f\xb4\xa1;\x04\xb0\xf8\xe3\xa6_\xe2\xe4\x87"
    str_1 = "Gw35*VaIf;M O\r\\$j"
    dict_0 = {str_0: complex_0, str_0: str_0, str_0: bytes_0, str_1: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3164():
    int_0 = 1122
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3165():
    int_0 = -902
    str_0 = "X_?jD2G'BkRp-1~/>"
    module_0.match(int_0, str_0)


def test_case_3166():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3167():
    int_0 = -3528
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3168():
    int_0 = -410
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3169():
    int_0 = -1074
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3170():
    str_0 = "r}o;uX@7u\n+M4^Ts?"
    module_0.get_new_command(str_0, str_0)


def test_case_3171():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3172():
    str_0 = "qjz]EZ?%E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3173():
    bytes_0 = b"#\xdeXms"
    bool_0 = False
    module_0.match(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3174():
    int_0 = -3736
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3175():
    float_0 = 72.3665
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3176():
    float_0 = 388.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3177():
    object_0 = module_1.object()
    none_type_0 = None
    module_0.get_new_command(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3178():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3179():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3180():
    str_0 = "^IxeQ"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3181():
    int_0 = -2273
    set_0 = {int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3182():
    str_0 = "d+u9+Y=V:Eu\x0b"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3183():
    int_0 = 563
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3184():
    int_0 = 3030
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3185():
    str_0 = "bCxeavELr?Ga"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3186():
    int_0 = -359
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3187():
    int_0 = -296
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3188():
    str_0 = "&T'\"1w`u-/(wvx"
    str_1 = "vLB]kVaL8}8dK!PG1b.\\"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3189():
    float_0 = 2880.0789
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3190():
    bool_0 = False
    float_0 = -1115.39035
    module_0.match(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3191():
    str_0 = "v^\t."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3192():
    bytes_0 = b"\xeaR"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3193():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3194():
    int_0 = -691
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3195():
    complex_0 = -2961.45221 - 1926.058069j
    set_0 = {complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3196():
    int_0 = 3463
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3197():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3198():
    bytes_0 = b"\xc8\xb0\x04\xf2\x0e\x93_\x02\x0f\xa1\xa8\x9a]"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3199():
    int_0 = -1770
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3200():
    int_0 = -482
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3201():
    str_0 = ">}wR_NA73"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3202():
    float_0 = 660.365
    int_0 = -1093
    list_0 = [float_0, int_0, int_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3203():
    str_0 = "F)I:esJX D\x0cA5\x0bRT"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3204():
    int_0 = 904
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3205():
    float_0 = 1422.102
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3206():
    float_0 = -2857.1763
    list_0 = [float_0, float_0]
    int_0 = 141
    tuple_0 = (float_0, list_0, int_0, int_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3207():
    int_0 = -1163
    int_1 = -1464
    module_0.get_new_command(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_3208():
    int_0 = 1894
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3209():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3210():
    int_0 = -529
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3211():
    str_0 = "'_[Rfq"
    dict_0 = {}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3212():
    str_0 = "2=?F<J"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3213():
    complex_0 = 1963.9 + 3124.952648j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3214():
    bytes_0 = b"\xbf\xef\xe2b\n\x11K\xa8\xcb\x81\xd2\xa1\xc2\x7fk\xc2"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    str_0 = "z1i-OW{Ag$[F]2Y?qZi7"
    dict_0 = {str_0: list_0, str_0: list_0, str_0: str_0, str_0: list_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3215():
    int_0 = 575
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3216():
    int_0 = -486
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3217():
    str_0 = "WGn%7H|a\x0chp|IE$"
    str_1 = "abY6ZguDWF=<5"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3218():
    str_0 = "-59Ikvst^% -2,\rB{\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3219():
    float_0 = 2427.479014
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3220():
    complex_0 = 1298.81 - 1332j
    none_type_0 = None
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3221():
    int_0 = -3359
    set_0 = {int_0, int_0, int_0}
    module_1.object(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_3222():
    str_0 = "%\\.KQ*&0U+.2zN^$Pz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3223():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3224():
    bytes_0 = b"za\xd2\xfb\xbb\x07\xd4\x95\xe35BO\xab\xb5\xdfWSU\x1f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3225():
    bool_0 = True
    bool_1 = True
    list_0 = [bool_0, bool_0, bool_1, bool_0]
    module_0.get_new_command(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3226():
    int_0 = -419
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3227():
    str_0 = "2MK.\r1Dd](6yCS]2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3228():
    int_0 = 1562
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3229():
    str_0 = "S*_tL|9X,Cq9{9!H"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3230():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3231():
    complex_0 = -146 + 141.9971j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3232():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3233():
    float_0 = -2353.41202
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3234():
    int_0 = -2025
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3235():
    float_0 = -1333.42921
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3236():
    str_0 = "SX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3237():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3238():
    bytes_0 = b"\x98\xe8\x82[2\xaao"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3239():
    bytes_0 = b"d\xd1\xb9\xbc\x85l\xb3z\xff~"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3240():
    bytes_0 = b" \xc4\xbfA\x9a\xa2\xd28\xb2\xcd\xd9\xd3\xc3\x96D^\x01%\x9e"
    int_0 = 2729
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3241():
    bool_0 = True
    bool_1 = False
    tuple_0 = (bool_1, bool_0)
    list_0 = [bool_1, tuple_0]
    tuple_1 = (bool_0, tuple_0, list_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3242():
    float_0 = -1978.5
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3243():
    str_0 = "i#"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3244():
    str_0 = ' 4;3F]">\\'
    dict_0 = {str_0: str_0}
    list_0 = [str_0, str_0, str_0, dict_0]
    tuple_0 = (str_0, str_0, list_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3245():
    str_0 = '[6dp[k3\r"fFUg@YM'
    bool_0 = True
    str_1 = ')"L{'
    tuple_0 = (str_0, bool_0, bool_0, str_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3246():
    bytes_0 = b"=\xbf\xd5d\xa0v="
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3247():
    str_0 = "ZJWGmy>R=bN-"
    tuple_0 = (str_0,)
    list_0 = [str_0, str_0, tuple_0, str_0]
    list_1 = [list_0, list_0, tuple_0, list_0]
    module_0.match(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3248():
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = False
    list_1 = [bool_0, list_0, bool_1, list_0]
    module_0.match(list_1, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3249():
    int_0 = 1103
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3250():
    bool_0 = False
    bytes_0 = b"\xad\x94\x8f*\xf5J\xa5}v\xcc\xee"
    tuple_0 = (bool_0, bytes_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3251():
    int_0 = 188
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3252():
    float_0 = -691.5
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3253():
    int_0 = 780
    module_0.match(int_0, int_0)


def test_case_3254():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3255():
    str_0 = "~?/eTl\x0b~ ~)4sK\n!T"
    list_0 = []
    tuple_0 = (str_0, str_0, str_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3256():
    str_0 = "GIQ>vm!~\t"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3257():
    str_0 = "O"
    int_0 = -1810
    set_0 = {str_0, str_0, int_0, int_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3258():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3259():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3260():
    int_0 = 1447
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3261():
    list_0 = []
    dict_0 = {}
    bool_0 = True
    tuple_0 = (dict_0, list_0, bool_0, list_0)
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3262():
    bytes_0 = b"\x97\xe4t\x836\xae\x83P?\x04\xcc'\xd5\x0f"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3263():
    bytes_0 = b"K\xb9\xbb1\xeaq\x9c\xcfq\xe1]Y\x90w\xdc`\xc2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3264():
    int_0 = 2558
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3265():
    str_0 = "mTB`|wo+$byy'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3266():
    int_0 = 4360
    list_0 = [int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3267():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, bool_1)


def test_case_3268():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3269():
    str_0 = "4I\r,y.A"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3270():
    str_0 = "v$>Jj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3271():
    bool_0 = False
    list_0 = [bool_0]
    int_0 = -787
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3272():
    str_0 = "]uk"
    module_0.match(str_0, str_0)


def test_case_3273():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3274():
    bytes_0 = b"\xe7SW*\xc3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3275():
    float_0 = -1330.291
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3276():
    int_0 = -735
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3277():
    str_0 = "{?"
    list_0 = [str_0, str_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3278():
    str_0 = "2nwi@1Uk"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3279():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3280():
    str_0 = '8Ze\rD2*\x0b""'
    dict_0 = {str_0: str_0}
    list_0 = []
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3281():
    int_0 = -451
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3282():
    int_0 = 1477
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3283():
    int_0 = 2722
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3284():
    bytes_0 = b"bk>z\xae\xec;\x8a\xe7a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3285():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3286():
    bytes_0 = b"\x92\xea\x15\xca;X\n\x81\x1d89_\xce\x89\x1c\xe8(Q\xb1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3287():
    str_0 = "apu`i?omCJ%B_p"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3288():
    bytes_0 = b"\x90\x19\x17&\x00\xc3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3289():
    float_0 = 3656.4946
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3290():
    int_0 = -762
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3291():
    str_0 = "nM,*H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3292():
    complex_0 = -1166.977185 + 923.6788j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3293():
    str_0 = "d$\n6W'QIP3blCrG5j@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3294():
    float_0 = -451.2167
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3295():
    int_0 = 3722
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3296():
    str_0 = ""
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3297():
    object_0 = module_1.object()
    str_0 = "Hm7MtKr>6vy*<.)D>"
    bool_0 = False
    dict_0 = {object_0: object_0}
    tuple_0 = (str_0, bool_0, dict_0)
    dict_1 = {object_0: tuple_0}
    module_0.get_new_command(dict_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3298():
    str_0 = "P@&>dQx5V80A}\x0b#-$D"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3299():
    float_0 = -1329.98374
    list_0 = [float_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3300():
    complex_0 = 2753.02 - 3594.290823j
    list_0 = [complex_0, complex_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3301():
    bytes_0 = b"\x11\t\xf6\x81Q{\x8a]y\x99\xd1"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3302():
    complex_0 = -2389.6678 - 1648.2j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3303():
    int_0 = -703
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3304():
    complex_0 = 479.4 + 701.737j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3305():
    tuple_0 = ()
    str_0 = "ed^azq5a'\n\"=SWX}!"
    dict_0 = {str_0: tuple_0}
    module_1.object(**dict_0)


def test_case_3306():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3307():
    complex_0 = 2032.45 + 71j
    set_0 = {complex_0, complex_0, complex_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3308():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3309():
    int_0 = -820
    int_1 = -2773
    set_0 = {int_0, int_1, int_0, int_0}
    tuple_0 = (int_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3310():
    none_type_0 = None
    set_0 = {none_type_0, none_type_0, none_type_0}
    module_0.get_new_command(none_type_0, set_0)


def test_case_3311():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3312():
    int_0 = -1725
    module_0.match(int_0, int_0)


def test_case_3313():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3314():
    float_0 = -623.925
    module_0.get_new_command(float_0, float_0)


def test_case_3315():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3316():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    none_type_0 = None
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3317():
    bytes_0 = b"\xc5\xbd\x9d\xe3\xcc\xd3"
    tuple_0 = (bytes_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3318():
    bytes_0 = b"\x1c\xfa(A\xc8\xc2\xc1\xef\n/g4-\xdd\xa7\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3319():
    int_0 = 293
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3320():
    float_0 = 1012.73
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3321():
    str_0 = "Zvz4?B_x(W01o 3$ellq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3322():
    bool_0 = False
    bytes_0 = b"\xa8\xe8\xc5\xb4\xec\x87\xf9\nf\xa2\x93\xd7\xa2\x08~"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3323():
    float_0 = 1201.4938
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3324():
    int_0 = -3154
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3325():
    bytes_0 = b'"M\x96'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3326():
    complex_0 = 535.6 - 298.969j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3327():
    bytes_0 = b""
    dict_0 = {}
    module_0.match(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3328():
    bytes_0 = b"\xe1/8\xa1\xfc\xfa\xa5\xdc@m"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3329():
    str_0 = "es-}"
    module_0.match(str_0, str_0)


def test_case_3330():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3331():
    none_type_0 = None
    str_0 = "xNEiOYY9E"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3332():
    bytes_0 = b"\xe0g\x9a\x87\xd5\xc0\xda\x81"
    dict_0 = {bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3333():
    str_0 = "\x0coX5L!e<!I`?X>\\M\r"
    module_0.match(str_0, str_0)


def test_case_3334():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3335():
    float_0 = -2533.1557
    str_0 = ')8"Iz}e\n'
    bytes_0 = b"\xd5@w\xd9"
    tuple_0 = (float_0, str_0, bytes_0)
    set_0 = {tuple_0, float_0, str_0, tuple_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3336():
    int_0 = 550
    bool_0 = True
    tuple_0 = (int_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3337():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3338():
    str_0 = "IS|/Di[:T3^"
    str_1 = "v'$ofrokrV(QMe8~,"
    dict_0 = {str_0: str_1, str_1: str_0, str_0: str_0}
    module_0.match(dict_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3339():
    bytes_0 = b"\x0c\x81Wd@\xa6\x8c\x0bFX+\xec\xdf\xfa:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3340():
    bytes_0 = b"\xdc\xc0\x81\xec\x03\x13\x1b\xbf\x1fDr\xa1"
    set_0 = {bytes_0}
    list_0 = [set_0, set_0, bytes_0]
    list_1 = [list_0, list_0, list_0]
    module_0.match(list_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3341():
    str_0 = "dKV"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3342():
    bytes_0 = b"*\xaf|Ff\xdd\xb6\xa8\x08\x1eq\xbf\x07\xc8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3343():
    str_0 = "{2U"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3344():
    float_0 = -689.52679
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3345():
    bytes_0 = b""
    str_0 = "V)Y^6\ti's#JjQB\t*"
    list_0 = [bytes_0, bytes_0, str_0, bytes_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3346():
    bool_0 = True
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3347():
    int_0 = -711
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3348():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3349():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    int_0 = -78
    tuple_1 = (dict_0, dict_0, int_0)
    module_0.match(tuple_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3350():
    str_0 = "}v dBS'iPF["
    none_type_0 = None
    str_1 = "w|vc'AL@tRkO,S,MpWM{"
    str_2 = "\t:Tm_Y8%#!R"
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_2: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3351():
    bytes_0 = b"\x97\x06\xa8\x8ct\x0e\xab\x97'"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3352():
    float_0 = 2188.21
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3353():
    int_0 = -3109
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3354():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3355():
    int_0 = 1238
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3356():
    str_0 = "PGM}8j0,"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3357():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3358():
    str_0 = "_:*7t6A[XXmk"
    bytes_0 = b"\x88V(\x83\xcb\xfe@\xf1"
    set_0 = {str_0, bytes_0, str_0, bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3359():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_3360():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3361():
    bytes_0 = b"\xa3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3362():
    int_0 = 1364
    none_type_0 = None
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3363():
    str_0 = ""
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    module_0.match(tuple_0, dict_0)


def test_case_3364():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3365():
    bool_0 = False
    bytes_0 = b""
    dict_0 = {bool_0: bool_0}
    tuple_0 = (bool_0, bytes_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3366():
    dict_0 = {}
    bool_0 = True
    list_0 = [dict_0, bool_0, bool_0, dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3367():
    bool_0 = False
    bool_1 = True
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_3368():
    bytes_0 = b"\x04K\xd6P#N\xb0b\xa5m\x01\xc6\xd1\xc2H"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3369():
    bytes_0 = b"^\x1f4\x1f\x9d71\xf0\x0f\xea\x91@\xec>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3370():
    float_0 = -2758.3
    list_0 = [float_0, float_0, float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3371():
    bytes_0 = b"\xe4\xe2\x10\xfev\x19l"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3372():
    complex_0 = 2467.6782 + 621.59j
    float_0 = 3593.0
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: float_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3373():
    int_0 = 3156
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3374():
    float_0 = 1664.878
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3375():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3376():
    complex_0 = -699.56 - 1332.7289j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3377():
    str_0 = "MWqiBUZ{{X5j7"
    list_0 = [str_0, str_0]
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3378():
    bytes_0 = b"\x8a\xf5"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3379():
    bytes_0 = b"\xe0\x1b\xf7\x8e\xb6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3380():
    int_0 = 4418
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [int_0, dict_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3381():
    str_0 = "9-%."
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3382():
    bytes_0 = b"\xf4? \xc5\xd7\xfb\xd9x\xc97"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3383():
    complex_0 = -1369.913595 + 4295.61j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3384():
    str_0 = "\x0c`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3385():
    str_0 = "#r"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3386():
    str_0 = "tGx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3387():
    str_0 = "\\&~2\x0b7|#f1m\x0c#\rEY}N~"
    bool_0 = True
    list_0 = [bool_0]
    set_0 = set()
    int_0 = 1509
    tuple_0 = (str_0, list_0, set_0, int_0)
    list_1 = [tuple_0, set_0, bool_0]
    module_0.get_new_command(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3388():
    int_0 = 2665
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3389():
    int_0 = 1983
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3390():
    str_0 = "JRQB \r&sk@{~>"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3391():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3392():
    bytes_0 = b"\xe5%\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3393():
    str_0 = ",!T~?y4fm/A5V=rJ@[vj"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3394():
    int_0 = -433
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3395():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    bool_0 = True
    tuple_0 = (list_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3396():
    int_0 = -1384
    tuple_0 = (int_0, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3397():
    str_0 = "b7Q)h7{\rf2){'D\n<j&-"
    list_0 = [str_0, str_0]
    module_0.match(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3398():
    float_0 = 1528.519
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3399():
    int_0 = 1050
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3400():
    str_0 = "\re|\x0bSZtE7v@i_Dx["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3401():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3402():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3403():
    none_type_0 = None
    bytes_0 = b"\xd2\x82\x175yN\xcf\x08\xde\x18\x07\xb4Y$5I"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3404():
    str_0 = "=5dS"
    str_1 = "2\tfQ?tr\x0b&bTc0&g."
    dict_0 = {str_0: str_0, str_0: str_1, str_0: str_1}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3405():
    bytes_0 = b"]\xcc\xb5\x9e`\x05\n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3406():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3407():
    str_0 = "I&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3408():
    complex_0 = -1173 + 311.41716j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3409():
    bool_0 = False
    int_0 = 1516
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3410():
    object_0 = module_1.object()
    bytes_0 = b""
    int_0 = -268
    int_1 = 1093
    tuple_0 = (object_0, bytes_0, int_0, int_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3411():
    str_0 = "3$H\t0Z<*Ci\x0c?EqF"
    module_0.get_new_command(str_0, str_0)


def test_case_3412():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3413():
    int_0 = 1102
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3414():
    float_0 = 2835.92
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3415():
    int_0 = 938
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3416():
    str_0 = "m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3417():
    bool_0 = False
    bytes_0 = b"\xac\xc3jO\xd7H(\xe1O3\xff\xd4"
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3418():
    bytes_0 = b".\xbcw\x19\xf0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3419():
    str_0 = "niy4(trH,yLs8rmNJ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3420():
    str_0 = "b[`:\rF\\es:dJ)2"
    tuple_0 = (str_0,)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3421():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_3422():
    pass


def test_case_3423():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3424():
    int_0 = 3769
    module_0.match(int_0, int_0)


def test_case_3425():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3426():
    bytes_0 = b"\x06{\x9ea\xf9\x05\x83\x99\x0f\x0e\x85^DJ"
    float_0 = 320.9
    str_0 = ""
    tuple_0 = (bytes_0, float_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3427():
    bytes_0 = b"\xe3\x9fG\x9e\x10i\xa6\xb9q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3428():
    int_0 = -1009
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3429():
    str_0 = "/7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3430():
    bytes_0 = b"\x04)\x83\xca\xdad\xc6N\xad\t\x8e"
    module_0.match(bytes_0, bytes_0)


def test_case_3431():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3432():
    str_0 = "`?5:pHrzyU~$8\r"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3433():
    float_0 = 425.0
    list_0 = [float_0, float_0, float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


def test_case_3434():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3435():
    bytes_0 = b",\x16yHV\xe15\xec\x81\xb0ii\x0eY\x827\x00\x14"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3436():
    str_0 = ":irKZTq%l"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3437():
    str_0 = "HAKeTkb%V\tj"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3438():
    complex_0 = -791 + 4920.934393j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3439():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3440():
    str_0 = "3Nm'ulT&D24N"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3441():
    int_0 = -1949
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3442():
    complex_0 = 635.524324 - 2824j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3443():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3444():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (set_0,)
    module_0.match(tuple_0, set_0)


def test_case_3445():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3446():
    str_0 = "gZwC{`Gs}58M\rool"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3447():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3448():
    tuple_0 = ()
    str_0 = "R"
    tuple_1 = (tuple_0, str_0)
    set_0 = {tuple_1}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3449():
    str_0 = "sJ<8(agI^Vf=9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3450():
    int_0 = 825
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3451():
    int_0 = 871
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3452():
    str_0 = "[85(E.=dSEPKd\\c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3453():
    int_0 = -3730
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    list_0 = [dict_0, dict_0]
    bytes_0 = b"\xc2\xb4\x8250!D4\xf8\x80\x87\xdc\x9b0\x06h\x13"
    tuple_0 = (list_0, bytes_0, list_0)
    tuple_1 = (int_0, dict_0, tuple_0)
    int_1 = 459
    module_0.match(tuple_1, int_1)


def test_case_3454():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3455():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3456():
    int_0 = 276
    tuple_0 = ()
    tuple_1 = (int_0, tuple_0, int_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3457():
    float_0 = 810.73
    str_0 = "bbrgY,\\]~\x0b l9[8-%"
    list_0 = [float_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3458():
    float_0 = 889.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3459():
    str_0 = "+UVZlr%"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3460():
    bytes_0 = b"vQ\x0e\xe9\xcetDA;\x15\xa1\x17L\xd5*"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3461():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    dict_1 = {}
    module_0.match(dict_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3462():
    complex_0 = 2063.9 + 1062.9j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3463():
    float_0 = 122.1
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3464():
    int_0 = 1408
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3465():
    float_0 = -1833.9553
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3466():
    float_0 = -1128.0
    set_0 = {float_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3467():
    complex_0 = -2266.16883 - 3991.398054j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3468():
    bytes_0 = b"\x835\xf3k\xd1\x08\x07>j\xf4p\x04,x\xb7C\x7f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3469():
    str_0 = "IRl]P\tA\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3470():
    bytes_0 = b"$\xc39>E\xbb\x8d\x9a,v\x85\xd1b"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3471():
    bool_0 = True
    list_0 = [bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3472():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3473():
    float_0 = -156.6594
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3474():
    str_0 = "^!iT0lF9E"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3475():
    bool_0 = True
    str_0 = "^rk[W"
    dict_0 = {bool_0: bool_0, str_0: bool_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3476():
    str_0 = 'Q"XEs !)c7'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3477():
    bytes_0 = b"\xcaU\xc1\xd1"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3478():
    str_0 = "Ht$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3479():
    bytes_0 = b"5\xef\x9e\x16\xbcb\x9d\xd4J\x96\x1f\x93\xea\xc5\xf153"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3480():
    str_0 = "irVfvsxve;~y\n\x0c"
    bool_0 = False
    module_0.get_new_command(str_0, bool_0)


def test_case_3481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3482():
    bytes_0 = b"\xe3\xa9\x00\xddX"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3483():
    int_0 = 2559
    int_1 = -789
    dict_0 = {int_0: int_0, int_0: int_0, int_1: int_0}
    module_0.get_new_command(int_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3484():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3485():
    bytes_0 = b"8I'ho\x99\x8f\x19\x02\x89\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3486():
    int_0 = 543
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3487():
    str_0 = "Jx?\nM886\\ST$f%+E"
    set_0 = set()
    tuple_0 = (str_0, str_0, set_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3488():
    int_0 = 903
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3489():
    bytes_0 = b"/\x9e\x98\xb8\x19\x85\x12\xc7g\xbf\x82\x10\x83\x1bZ\xdd3\x93\xa7\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3490():
    bytes_0 = b"\x1e\xbc{\xabz"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3491():
    bool_0 = True
    str_0 = "5q]\\N)(Dtu\x0cP6p^@k=+B"
    tuple_0 = (bool_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3492():
    float_0 = -31.108
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3493():
    str_0 = "=3%\rb#R&"
    module_0.match(str_0, str_0)


def test_case_3494():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3495():
    int_0 = 3182
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3496():
    bool_0 = True
    str_0 = "`zc?@DL.wtHO{l\x0bz,"
    tuple_0 = (str_0,)
    tuple_1 = (bool_0, bool_0, tuple_0)
    module_0.match(tuple_1, str_0)


def test_case_3497():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3498():
    float_0 = 1847.5
    list_0 = [float_0, float_0, float_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3499():
    bytes_0 = b"\xf5\x96G\xf6\xc0\x01h\x13\xd5_\xc0PY\xf7\xdb\x0f\xf3\xd3\xf6"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3500():
    bytes_0 = b"\xee\x86i\xc5\x19\xd6\xf4w\x92\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3501():
    int_0 = 401
    dict_0 = {int_0: int_0, int_0: int_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3502():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3503():
    str_0 = "Y\\Ib%oD- \nX/m'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3504():
    float_0 = 1101.174
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3505():
    str_0 = "[\t /VJwHtU|Q9kP5&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3506():
    float_0 = -613.63
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3507():
    bytes_0 = b'+\x91\x0e\x16\xa1\x8c@\x10e\x99"*\x1b\xea'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3508():
    float_0 = 376.612242
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3509():
    float_0 = 1236.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3510():
    int_0 = -1217
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3511():
    bytes_0 = b"\x1f\xb4\xafQ\xb5`\r\xf2S"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    int_0 = -979
    tuple_0 = (bytes_0,)
    tuple_1 = (dict_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3512():
    str_0 = '=!E"J\\.i5#_'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3513():
    str_0 = "mSB~?E?"
    str_1 = 'c}k"kGypU&Q0%!ck`~wa'
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_0: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3514():
    str_0 = 'jo`[0@ZVff6+:um"mI'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3515():
    str_0 = ""
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3516():
    str_0 = "|<?Ik)8|N;\rW%9m"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3517():
    bytes_0 = b"\xf4%V\xa5\x15K\x96\xa9\xdd\xf0D\x98#\\"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3518():
    int_0 = 1744
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3519():
    int_0 = -53
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_3520():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3521():
    str_0 = "@/"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3522():
    complex_0 = -839.14 - 659.5j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3523():
    float_0 = 254.13
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3524():
    str_0 = " ]4|"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3525():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3526():
    bytes_0 = b"\xc1l\x85o|\x85\xa6\x9fQ"
    dict_0 = {bytes_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3527():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3528():
    str_0 = "YE2G($"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3529():
    str_0 = ":SO2L*'"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3530():
    bytes_0 = b"b7t\xb6@\xdfye\xf8\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3531():
    float_0 = -2233.0
    tuple_0 = (float_0, float_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3532():
    str_0 = "X7lo+pvLZY*/KnT6x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3533():
    set_0 = set()
    str_0 = ")0wyvm'[s1Lnw15"
    tuple_0 = (set_0, str_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3534():
    bytes_0 = b"\xf5\xcd\x8b\xbf\xf4\x18Qzaq\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_3535():
    pass


def test_case_3536():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3537():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3538():
    int_0 = 6172
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3539():
    complex_0 = -1804.686399 + 1664.3j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3540():
    bool_0 = False
    str_0 = "\"pv_'*!"
    dict_0 = {str_0: bool_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3541():
    str_0 = "R\\3\x0b2=C"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3542():
    bytes_0 = b"*\xab\xd0\x9e\x101\xf1\xf3\r\xe7\xfb\xd8P4\xf7\xa7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3543():
    int_0 = 2608
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3544():
    bool_0 = True
    bytes_0 = b"e\x93\xfd~E\xcc'IS&\xb3\xfc\x95\x0c6\x8e\xe3\x9a"
    int_0 = -3273
    set_0 = {int_0}
    bool_1 = False
    dict_0 = {bool_0: bool_0, bytes_0: set_0, bytes_0: bool_1, bytes_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3545():
    str_0 = ';tev"\\= '
    str_1 = "\ra"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3546():
    str_0 = "j>YM!%->?mn*tZ"
    tuple_0 = (str_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3547():
    int_0 = -2668
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3548():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3549():
    int_0 = 3957
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3550():
    float_0 = -785.74
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3551():
    str_0 = "uC`SjZ{B$dQ?D\\:Tt"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    int_0 = 240
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3552():
    str_0 = "{5!>d=>"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3553():
    str_0 = " )qqCK"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3554():
    int_0 = 457
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3555():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0]
    list_1 = [object_0, list_0, list_0]
    module_0.get_new_command(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3556():
    str_0 = "O7?ok;Ft3LW}{I?/"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3557():
    bool_0 = False
    int_0 = -1239
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3558():
    int_0 = -1602
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3559():
    float_0 = -1532.3894
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3560():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3561():
    int_0 = 1698
    bytes_0 = b"*\xa2k\x13\x1e\x96<\xd1\xc5+\xb9'\xbaU\xa1\x9e\r"
    module_0.get_new_command(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3562():
    bytes_0 = b"\x11\x03u/s\xb3\xe4|\x00\xed\xa5\xb14\x12w\x15=\x17\x14,"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3563():
    str_0 = "&P;xMM0R"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3564():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3565():
    int_0 = 230
    module_0.get_new_command(int_0, int_0)


def test_case_3566():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3567():
    str_0 = "4`%C="
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3568():
    str_0 = "a\nBhzjJ@#}~"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3569():
    bytes_0 = b"\x02"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3570():
    float_0 = 2502.47
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3571():
    str_0 = "<Em@CQ&Tp^{UrI\rtQdw6"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_3572():
    bytes_0 = b"\x9b\x02\x80\x17\xfb\xba\x0f`)\xa4\x11\xefF\x1b"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3573():
    str_0 = "rzE\\f\ri=[$D(}kpHgZL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3574():
    object_0 = module_1.object()
    str_0 = ")zC'j'i[WJTi&#cO\tt"
    dict_0 = {object_0: object_0, object_0: object_0, str_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


def test_case_3575():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3576():
    str_0 = "D_?$,R\t,H:>A&gO,Ya\nO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3577():
    complex_0 = 1080 + 547.98j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3578():
    int_0 = -1935
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3579():
    list_0 = []
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3580():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    int_0 = 1232
    bytes_0 = b'\xd32\xddgb\xb9\x8bHz\xd9i\x06\xad\xc9v"\x9b\xcf\xc3*'
    tuple_0 = (dict_0, int_0, bytes_0)
    tuple_1 = (bool_0, tuple_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3581():
    float_0 = -1405.62216
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3582():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3583():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3584():
    int_0 = 2357
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3585():
    str_0 = "N\x0crLEfRXn33+"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_1.object(**dict_0)


def test_case_3586():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3587():
    str_0 = "v2V'Oi<a\x0c{;0U_{3"
    bool_0 = True
    list_0 = [str_0, str_0, bool_0, bool_0]
    module_0.get_new_command(str_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3588():
    str_0 = "F`4NP&|+ZzLK\n8+w?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3589():
    bytes_0 = b"[\x0fm\xd6\xd8\xbd\xf6C\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3590():
    bytes_0 = b";\xedi\x1d\xee\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3591():
    bytes_0 = b"v6\xa0\xe8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3592():
    bytes_0 = b'P\x15B\x81\x8et\xb9\xba\x1f"cS\x05'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3593():
    int_0 = -320
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3594():
    bytes_0 = b"\x94\xee\x14E2\x13\xd7nX\xc6S\xcf\x13"
    tuple_0 = (bytes_0,)
    dict_0 = {tuple_0: tuple_0, bytes_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3595():
    int_0 = 1567
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3596():
    complex_0 = -1829.30866 + 537.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3597():
    complex_0 = -1647.24377 + 3504.9159j
    tuple_0 = (complex_0, complex_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3598():
    float_0 = 1899.87
    bool_0 = True
    dict_0 = {float_0: bool_0, float_0: bool_0, float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3599():
    float_0 = 2762.0
    list_0 = [float_0, float_0, float_0, float_0]
    bool_0 = False
    tuple_0 = (list_0, bool_0)
    list_1 = [tuple_0, list_0, float_0]
    list_2 = [list_1, list_1, tuple_0, bool_0]
    float_1 = -1747.822
    module_0.get_new_command(list_2, float_1)


@pytest.mark.xfail(strict=True)
def test_case_3600():
    str_0 = "a"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, str_0)


def test_case_3601():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3602():
    bytes_0 = b"d\xb7\x8a<\xc7\xe378b"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3603():
    bytes_0 = b"\x8a\t\x80"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3604():
    float_0 = -2185.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3605():
    bool_0 = False
    int_0 = -684
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3606():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3607():
    str_0 = "93>!\r\x0c5&IYu5P\nrm8GQ"
    str_1 = "p|?41P&D;>59'8A=eW/"
    set_0 = {str_0, str_0, str_1, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3608():
    int_0 = 285
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3609():
    int_0 = -1783
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3610():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3611():
    str_0 = "BLJor/4IX1(yq"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3612():
    int_0 = -504
    module_0.match(int_0, int_0)


def test_case_3613():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3614():
    int_0 = 1590
    complex_0 = 753.7053 + 120.7127j
    str_0 = "&2b##^"
    tuple_0 = (int_0, complex_0, str_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3615():
    float_0 = -2529.74219
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    bytes_0 = b"\xa9\xda-\xca\xd8\x91\xd1_\x95\x0b\xa4\x11+\xd1\xf2\x9c\xd9\x91vQ"
    tuple_0 = (dict_0, bytes_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3616():
    bool_0 = False
    int_0 = 4340
    dict_0 = {bool_0: bool_0, int_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3617():
    int_0 = 728
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3618():
    bytes_0 = b"\x17*+\xac."
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3619():
    bytes_0 = b'\x19\xb3\xcb\xfedp\xeb"\x16U\x01X[\xaf\xb8{'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3620():
    str_0 = "L7pIt3}5|E[ssv#:CDm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3621():
    int_0 = -1517
    bytes_0 = b"L\xdd\x92$\x94^\t\xc9\xa8N\x07\xab\xcd\xd9"
    list_0 = [bytes_0]
    tuple_0 = (bytes_0, list_0)
    bytes_1 = b"\xe8\x80\x173;W\xca\xc3\xf2"
    tuple_1 = (int_0, tuple_0, bytes_1)
    module_0.match(tuple_1, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_3622():
    dict_0 = {}
    float_0 = 669.9
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3623():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3624():
    bytes_0 = b"(\xd2\xcf/\x81\x01\x8dY\xc1G\xfe'\xe1\xbaq|\xfcv"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3625():
    bytes_0 = b"\x1a\xe529"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3626():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3627():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    module_0.match(object_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3628():
    bytes_0 = b".\xa5\x1a\xb7G7\xc4\xf9\x057\xe6h\x88V\xc3pI,"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3629():
    bytes_0 = b"\xea\xbe\xf8#\x97\xaf\xbc,\x0b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3630():
    str_0 = "w+\rczJ"
    int_0 = -583
    str_1 = "Ei.u*"
    dict_0 = {int_0: int_0, int_0: str_1}
    bytes_0 = b"j\xf6\xbb)\xb6"
    tuple_0 = (str_1, bytes_0)
    tuple_1 = (str_0, dict_0, tuple_0)
    module_0.get_new_command(tuple_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3631():
    int_0 = 1563
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3632():
    float_0 = -806.027358
    module_1.object(*float_0)


@pytest.mark.xfail(strict=True)
def test_case_3633():
    str_0 = "O>/8)aiM~r!Quuj/gm"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3634():
    int_0 = -871
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3635():
    int_0 = 2673
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3636():
    bytes_0 = b"\x94\x05\x0b2\xb2\xa8"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3637():
    str_0 = "OGZ)"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3638():
    int_0 = -923
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3639():
    str_0 = "(W\x0b"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3640():
    str_0 = '"&'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3641():
    str_0 = "j"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3642():
    float_0 = -3300.93421
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3643():
    bytes_0 = b"y\x9c\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3644():
    bytes_0 = b"jA\x05J\x8d\xdbh\x7f\x1b\xa6\x89\x95n\x1eO\xfe\xdc#"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3645():
    str_0 = "PKx+\r?^~#$P\x0cFWB<o"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3646():
    int_0 = -3019
    list_0 = [int_0, int_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3647():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3648():
    bytes_0 = b"W\x89"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3649():
    float_0 = -2565.64
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3650():
    bytes_0 = b"Y\xc8\x0b\x1c\xbb3\x14\x06\x06\xe6\x8d\x8c\xcc\xe2\xd0!"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3651():
    bytes_0 = b"\x88\xaa\x8e\x03\xccj\x13h\xa8\x95r\x8a\xf0A\xe3\xcc\x87"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3652():
    str_0 = "F>:#2xs?Z/u3[}Gw"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3653():
    str_0 = ":v27)}"
    int_0 = 2030
    float_0 = -1942.1222
    bool_0 = True
    tuple_0 = (int_0, float_0, bool_0)
    set_0 = {tuple_0, bool_0}
    tuple_1 = (str_0, tuple_0, set_0, str_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3654():
    str_0 = "W.\tf;/pL}\nu]a/U6a"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3655():
    bytes_0 = b".\x83h\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3656():
    str_0 = "5C7l^y207$0TW+>\x0c"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3657():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3658():
    int_0 = -578
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3659():
    bytes_0 = b"\xf1F\xfb0\xd9\x02Yk\xebv\xae\xea?\xf0\x99"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3660():
    float_0 = -804.867
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3661():
    str_0 = "^+iN}L9h)`8{d]"
    module_0.get_new_command(str_0, str_0)


def test_case_3662():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3663():
    none_type_0 = None
    bytes_0 = b"N\x1c"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3664():
    bytes_0 = b"\xe1R\xcbM\xf0\x05\x08"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3665():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    list_1 = [list_0, tuple_0, tuple_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3666():
    none_type_0 = None
    float_0 = -3114.5
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3667():
    int_0 = 2355
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3668():
    bytes_0 = b"s/\xec\xdc`\xe4\x88\xd2P)"
    str_0 = "DThD=H:aSiK"
    set_0 = {bytes_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3669():
    float_0 = -647.230186
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3670():
    bytes_0 = b"qW\x14\x1e"
    int_0 = -724
    bool_0 = False
    tuple_0 = (bytes_0, bytes_0, int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3671():
    int_0 = 3194
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3672():
    str_0 = "j2]M`Q2!rhN[:+U"
    str_1 = "#vc(<kVm9r$G;ZB6|x"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3673():
    str_0 = "\nV"
    set_0 = {str_0, str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3674():
    int_0 = 1370
    list_0 = [int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3675():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3676():
    int_0 = 938
    list_0 = [int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3677():
    bytes_0 = b"S\x8eK"
    int_0 = -473
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3678():
    str_0 = '\x0bHa0AEh}hqpH\x0bf"k`'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3679():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3680():
    none_type_0 = None
    bool_0 = True
    module_0.get_new_command(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3681():
    int_0 = 4845
    tuple_0 = (int_0,)
    str_0 = "1jCoq|};\nJE*"
    tuple_1 = (str_0, str_0)
    module_0.match(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3682():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


def test_case_3683():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_3684():
    int_0 = 85
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3685():
    int_0 = -1817
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3686():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.get_new_command(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3687():
    str_0 = ")Sk#}Gc-np6Um"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3688():
    str_0 = "zP~3>$;I-kd=<\x0bf`"
    complex_0 = -3649.33 - 830.03813j
    list_0 = []
    tuple_0 = (str_0, complex_0, list_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3689():
    str_0 = "M^'?[[},@S@0K"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3690():
    none_type_0 = None
    list_0 = [none_type_0]
    module_0.match(none_type_0, list_0)


def test_case_3691():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3692():
    str_0 = "b@Yy"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3693():
    int_0 = 182
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3694():
    bytes_0 = b"d\xdf\x84@xy\x1a\x9e\xb7U\xe1\xc8\xff\x171\x93"
    bool_0 = False
    set_0 = set()
    tuple_0 = (bool_0, bytes_0, set_0)
    module_0.get_new_command(bytes_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3695():
    bytes_0 = b"S$f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3696():
    int_0 = 741
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3697():
    bytes_0 = b"\xa0\xca\x00\x93g:1S\xe9B\xbd2\x89\xa6\xdc\x83\xde"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3698():
    str_0 = "a b|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3699():
    complex_0 = 361 + 5709.32701j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3700():
    complex_0 = 2918.57 - 436j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3701():
    int_0 = -1641
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3702():
    str_0 = "c9panN"
    none_type_0 = None
    str_1 = "R\r./%\ryQ47_kT/f5P"
    str_2 = ""
    dict_0 = {
        str_0: none_type_0,
        str_0: none_type_0,
        str_1: none_type_0,
        str_2: none_type_0,
    }
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3703():
    bytes_0 = b"\xeb\xf54N&\xf85p\xf2\x94\xf3YC\x1e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3704():
    str_0 = "UWBHddXve"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3705():
    set_0 = set()
    str_0 = "a\rj[T2t:c4p"
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3706():
    int_0 = 624
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3707():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3708():
    float_0 = -2092.391
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3709():
    bool_0 = True
    bytes_0 = b"\xd8\xf6I\xb5\x9f\xdc\x06\xb5/+\xa9q\xe6\xed\x7f\x9a\xe4p\x8f"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3710():
    int_0 = -358
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3711():
    int_0 = -290
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3712():
    bytes_0 = b"\xa9\xb7%h\x044\x9d"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3713():
    bytes_0 = b"~\xf6hP8?L"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3714():
    float_0 = -1929.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3715():
    bytes_0 = b"J\x05\x1d\x04\xe9v\x0e\t.\xe5\xa1\xdb\x1e\xea"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3716():
    str_0 = "\nf"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3717():
    bytes_0 = b"\xbe<\xfb\x1e\x17\xd62\x94:\x16\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3718():
    str_0 = "\\g"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3719():
    str_0 = "dW=X4,tqW&o\rx0TP?"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3720():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3721():
    float_0 = -1179.744
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3722():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3723():
    tuple_0 = ()
    bool_0 = False
    tuple_1 = (tuple_0, bool_0, bool_0)
    list_0 = [tuple_1, tuple_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3724():
    str_0 = "dsZ+,FY~+J4 j`[\rFb8"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3725():
    bytes_0 = b"!\x8cx\xe8\xb3$"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3726():
    str_0 = 'XR$vo"e`f+iwl&'
    module_0.get_new_command(str_0, str_0)


def test_case_3727():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3728():
    float_0 = -1125.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3729():
    bytes_0 = b"\x90"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3730():
    int_0 = -2344
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3731():
    float_0 = -830.22035
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3732():
    bytes_0 = b"\xa2\xac\xc8HK\x7f\x9c\xeek\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3733():
    str_0 = "*Xa1cN\rKxZG!I'!"
    module_0.match(str_0, str_0)


def test_case_3734():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3735():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3736():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3737():
    str_0 = 'mh\x0c{q"oIJ$wI62X'
    float_0 = 760.4676
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3738():
    float_0 = -1233.019
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3739():
    complex_0 = -2364.4928 + 2635.9899j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3740():
    str_0 = "mW&X\n&fC+wJ>"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    dict_0 = {tuple_0: tuple_0, str_0: str_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3741():
    int_0 = -2018
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3742():
    str_0 = "'H[X\"|`O"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3743():
    bool_0 = True
    dict_0 = {}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3744():
    str_0 = "mJ',5)$nx!\t*9i@5(sR"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3745():
    none_type_0 = None
    str_0 = "lta}#5ef3\t"
    str_1 = "0wb{ q9gP,Q/_MjR5"
    dict_0 = {str_0: str_0, str_1: none_type_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3746():
    bytes_0 = b"\xce"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3747():
    none_type_0 = None
    bool_0 = True
    set_0 = {none_type_0, none_type_0, none_type_0, bool_0}
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3748():
    bytes_0 = b"\xed\xf2\x91\xff"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3749():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3750():
    str_0 = ""
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3751():
    str_0 = "+\n8>ehSh"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3752():
    str_0 = "$;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3753():
    int_0 = 18
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3754():
    bytes_0 = b"&\xc9\x9f\x08\x80)J\xfc\xddC9\x9a<@i\x15\xce\\\x12"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3755():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3756():
    int_0 = 1721
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3757():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3758():
    float_0 = -1023.59405
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3759():
    float_0 = -1985.52054
    list_0 = [float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3760():
    float_0 = 2052.63372
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3761():
    bytes_0 = b"J-&\x94{\xf2\x84\xf0\xb8e\xd4M?\xb2"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3762():
    str_0 = "H"
    module_0.get_new_command(str_0, str_0)


def test_case_3763():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3764():
    int_0 = 1727
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3765():
    int_0 = 588
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3766():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3767():
    str_0 = "ia3M>TM"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3768():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3769():
    str_0 = 'Cg|n"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3770():
    bytes_0 = b"\xd0+;"
    list_0 = [bytes_0]
    list_1 = [list_0, bytes_0, list_0, list_0]
    list_2 = [list_1]
    module_1.object(*list_2)


@pytest.mark.xfail(strict=True)
def test_case_3771():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3772():
    bytes_0 = b"0\xd9\xc1\xacw\xe1\xb5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3773():
    str_0 = "tb=613=#8B\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3774():
    str_0 = "s^p{F5~rr"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3775():
    str_0 = ";-\n{4/lj:"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3776():
    bytes_0 = b"rC\x82XG\x0c8{\xee\xb8%\xc4\xb9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3777():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (tuple_0, tuple_0, bool_0)
    list_0 = [bool_0, tuple_1]
    list_1 = [list_0, tuple_1, tuple_1]
    str_0 = "[1&V1ICP\r2h>*Mhc"
    module_0.get_new_command(list_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3778():
    float_0 = 1856.44
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3779():
    float_0 = -407.3
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


def test_case_3780():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3781():
    int_0 = 1830
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3782():
    int_0 = 3607
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3783():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0, list_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3784():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3785():
    bytes_0 = b"M\x85\r\xa7\x89\x11\x8a\xcd\x06\x8c\x8cc\t\x07\xcaR"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3786():
    bytes_0 = b"\xae\x0b\x1e'X\x98\t\xde\x9fJ"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3787():
    bytes_0 = b"\x12\x10&\xb4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3788():
    bool_0 = False
    module_1.object(*bool_0, **bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3789():
    bytes_0 = b"g\xf9\xf4\x04\xbc\x85\x1dd\x04s\x87=(\x01\xb9"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3790():
    list_0 = []
    str_0 = "foA`%{R%SVtD|1"
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3791():
    str_0 = ""
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3792():
    bytes_0 = b"\xe5\xe3\x13\xee\xf8f\xfd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3793():
    str_0 = "\tW}2JI\\eUk'_vh/X6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3794():
    bytes_0 = b"\x86e\x191)JA\x08:\x0b\x19"
    list_0 = [bytes_0, bytes_0, bytes_0]
    list_1 = [bytes_0, list_0, list_0, bytes_0]
    bool_0 = True
    tuple_0 = (list_1, bool_0)
    module_0.get_new_command(tuple_0, list_1)


def test_case_3795():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3796():
    int_0 = -308
    none_type_0 = None
    module_0.match(int_0, none_type_0)


def test_case_3797():
    pass


def test_case_3798():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3799():
    str_0 = "Sk"
    list_0 = [str_0, str_0, str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3800():
    str_0 = "sS"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3801():
    int_0 = 616
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3802():
    float_0 = 887.591
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3803():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3804():
    none_type_0 = None
    int_0 = 1036
    dict_0 = {int_0: none_type_0, int_0: none_type_0, none_type_0: int_0}
    tuple_0 = (int_0, dict_0, dict_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3805():
    int_0 = -2719
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3806():
    int_0 = 2425
    module_0.match(int_0, int_0)


def test_case_3807():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3808():
    tuple_0 = ()
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


def test_case_3809():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3810():
    str_0 = "hA|ULK("
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3811():
    str_0 = "{u:6rEEvHIx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3812():
    str_0 = "z"
    str_1 = "gw\x0c+v{oke"
    int_0 = 1408
    dict_0 = {str_0: str_0, str_1: int_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3813():
    str_0 = "Gv'Z`fU<zH"
    module_0.match(str_0, str_0)


def test_case_3814():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3815():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3816():
    int_0 = -1774
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3817():
    int_0 = 5
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3818():
    int_0 = 31
    module_0.match(int_0, int_0)


def test_case_3819():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3820():
    bytes_0 = b"\xda\x879\xf8\xa0\x1b\x94)\xba\xa7\xd0\x10\x05"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3821():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3822():
    str_0 = '7"!lg2TvDQ+_psN2w]O'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3823():
    str_0 = "1p4;"
    str_1 = "H75&/"
    module_0.match(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3824():
    float_0 = 668.44
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3825():
    float_0 = -425.53
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3826():
    str_0 = "v\t\\|6n$D`z`jX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3827():
    str_0 = "\\^3m{#"
    set_0 = {str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3828():
    bytes_0 = b"y,g\xae\xef\xe3\x84\x17\x8b"
    str_0 = "Jr_RHe/=lue$C!t"
    tuple_0 = (bytes_0, str_0)
    bool_0 = False
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3829():
    bytes_0 = b"\xf9\xcbcW\xe3\xf8\x86\xc9\xae\xfa\xa3-"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3830():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3831():
    str_0 = "D\\}>}"
    object_0 = module_1.object()
    module_0.get_new_command(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3832():
    list_0 = []
    str_0 = "\x0cOa*+SS&6G 5c'n"
    bool_0 = False
    dict_0 = {str_0: bool_0, str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3833():
    int_0 = 59
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3834():
    str_0 = '\tp4-;lz[2{vB"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3835():
    tuple_0 = ()
    str_0 = "PEv]0;kvTTRlV"
    tuple_1 = (tuple_0, str_0)
    module_0.get_new_command(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3836():
    bytes_0 = b"J\\|\x13o\xa8\xec\x13"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3837():
    bytes_0 = b"\n\xe8\xd7\xd2&"
    object_0 = module_1.object()
    set_0 = {bytes_0, object_0, object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3838():
    float_0 = -2063.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3839():
    int_0 = -2998
    set_0 = {int_0, int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3840():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3841():
    str_0 = "S[a|gC8g*|q[sf*L*\nfU"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3842():
    str_0 = "^3.6f ;9R"
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3843():
    str_0 = "/G/_ ]z+Jr8Ey"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3844():
    int_0 = 768
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3845():
    bytes_0 = b"D\x85s\xa4b\xff\xf2\x13\xc1z\xed_\x0e\xf4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3846():
    int_0 = 992
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3847():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3848():
    int_0 = 3449
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3849():
    str_0 = "Kp]ceXu{5,o|:UU;E\t*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3850():
    int_0 = -622
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3851():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    tuple_0 = (bool_0, bool_0, set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


def test_case_3852():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3853():
    bytes_0 = b"?"
    bytes_1 = b"\xbc"
    bytes_2 = b"\x19\x97F\x19,\x8e"
    tuple_0 = (bytes_0, bytes_0, bytes_1, bytes_2)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3854():
    complex_0 = -814 + 1140j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3855():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3856():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3857():
    bytes_0 = b"\xf3\x94+\x058'\xe4~\xc8#7\x96\xfb\x11\xf9oO\xb0!U"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3858():
    int_0 = 2055
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3859():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3860():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3861():
    int_0 = 1468
    set_0 = {int_0, int_0, int_0, int_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3862():
    str_0 = 'I^"V'
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3863():
    str_0 = "Begz9\t&jUbG;M:\\\nn"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3864():
    int_0 = 3249
    module_0.match(int_0, int_0)


def test_case_3865():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3866():
    str_0 = "#KW+j'XoDzYVDJi"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3867():
    float_0 = 103.985197
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3868():
    bytes_0 = b"\x9d\xedp\xd2\xa8\xc3"
    module_0.match(bytes_0, bytes_0)


def test_case_3869():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3870():
    int_0 = -868
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3871():
    int_0 = 1119
    list_0 = [int_0, int_0, int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3872():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3873():
    str_0 = "MQLp)O\\.g"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3874():
    bool_0 = False
    set_0 = {bool_0}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3875():
    int_0 = 664
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3876():
    float_0 = 1116.13
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3877():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    str_0 = 'Xz3r@t@]"hX.0Waw'
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3878():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3879():
    str_0 = "'0tk`oj3Q"
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3880():
    int_0 = -469
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3881():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3882():
    bytes_0 = b"T\xb8\xdf\xeb\xca\x08\x17\x97"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3883():
    int_0 = -643
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3884():
    float_0 = -3753.530449
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3885():
    int_0 = 1168
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3886():
    str_0 = "cX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3887():
    int_0 = -1547
    bool_0 = False
    module_0.get_new_command(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3888():
    int_0 = -671
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3889():
    str_0 = "U\n "
    tuple_0 = (str_0,)
    str_1 = "9mxT"
    tuple_1 = (tuple_0, str_0, str_1)
    module_0.get_new_command(tuple_1, str_1)


@pytest.mark.xfail(strict=True)
def test_case_3890():
    float_0 = -1606.91082
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3891():
    bytes_0 = b'\x03"\xc0df\xd7\xb1\xd8T\xec\xcf4\x1c\x89\x88'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3892():
    bytes_0 = b"\xd2\xf4x\xa2\xf8\x1e\xbd(\x81\x10{"
    str_0 = "J*2\tFxW]_7UZ\\;"
    module_0.get_new_command(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3893():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3894():
    bool_0 = False
    tuple_0 = (bool_0,)
    list_0 = [tuple_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3895():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3896():
    str_0 = "0BG)[#}D: GKl\\kt9 h]"
    module_0.get_new_command(str_0, str_0)


def test_case_3897():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3898():
    str_0 = "[&.mq.Ef/KM\x0cD9/rqC"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3899():
    int_0 = 299
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3900():
    str_0 = "oJp=DD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3901():
    int_0 = -3371
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3902():
    bytes_0 = b"\x90\t\x108\x92T\xcb\xa9\x8e\x89\x07"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3903():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3904():
    bytes_0 = b"fo:\xc1VjG\xc7\xa1\xcc\xe5\xe7"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3905():
    bool_0 = True
    bytes_0 = b'\xdf\xdd\x1eF"\xe9\x18\x1e\xfcu\x86\x00\xbd'
    set_0 = {bytes_0}
    float_0 = 895.149
    tuple_0 = (bool_0, bytes_0, set_0, float_0)
    list_0 = [bytes_0, tuple_0]
    module_1.object(*list_0)


def test_case_3906():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3907():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3908():
    bytes_0 = b"\x93\xb6\xd4\x15"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3909():
    bytes_0 = b"\xceL\xb9\xa6\xfe\xb1\x1b_\xc3]\x14"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3910():
    int_0 = -1162
    module_0.get_new_command(int_0, int_0)


def test_case_3911():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3912():
    tuple_0 = ()
    bool_0 = True
    int_0 = -89
    bytes_0 = b"\xd1m\xfcnc\xdc\x89\xac\x04\xb0\t\xca\xba\x8c\xff\xef\x9a,g"
    tuple_1 = (tuple_0, bool_0, int_0, bytes_0)
    module_0.match(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3913():
    complex_0 = -2252 - 2435.6123j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3914():
    int_0 = -3432
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3915():
    str_0 = "9w"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3916():
    float_0 = 424.0
    list_0 = [float_0]
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3917():
    int_0 = 619
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3918():
    str_0 = "@4x*vSB9\x0bl"
    bool_0 = True
    tuple_0 = (str_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3919():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.get_new_command(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3920():
    int_0 = 2491
    list_0 = [int_0]
    bytes_0 = b"8\xba\x93\x90"
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3921():
    int_0 = -623
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3922():
    bytes_0 = b"k;\x1e\\O\x92n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3923():
    bool_0 = True
    float_0 = 2894.0
    list_0 = [bool_0, bool_0, float_0, float_0]
    list_1 = [list_0, float_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_3924():
    complex_0 = 1055.1 + 1596.394987j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3925():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (bool_0, list_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3926():
    object_0 = module_1.object()
    bool_0 = True
    dict_0 = {object_0: object_0, object_0: bool_0}
    module_0.get_new_command(dict_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_3927():
    float_0 = 2643.96337
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3928():
    float_0 = 1939.357
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3929():
    str_0 = '-=tgb!"M1}KxB\x0ctgMHy'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3930():
    int_0 = 4172
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3931():
    bytes_0 = b"\xe7_o\x90hs\xfe\xc5\xe73q\xdf\x1c"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3932():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3933():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3934():
    int_0 = -2831
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3935():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3936():
    str_0 = '["U_6z~ysdE2PZ!b(&'
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3937():
    none_type_0 = None
    bytes_0 = b"\xc4\x83\x90\xc8\xb6\t\xf7"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3938():
    int_0 = 2032
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3939():
    int_0 = 692
    list_0 = [int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_3940():
    str_0 = "Ok%rBMotV>T"
    list_0 = [str_0, str_0, str_0]
    tuple_0 = (list_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3941():
    bytes_0 = b"\xe9\xff(\xbdT\xe7\xe6\xd7Sh\x93"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3942():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3943():
    str_0 = "/f= \nsw2&Eq#G"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3944():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3945():
    bytes_0 = b"`"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3946():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3947():
    int_0 = -1533
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3948():
    set_0 = set()
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3949():
    bytes_0 = b"(\xe7\xc6;P|\xcf\x1c*\x87r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3950():
    complex_0 = -1206.281 + 4236.632j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3951():
    bytes_0 = b"K\x9e\x0f\xb1\x8f\x81\xfe\xcc\xd9\xdd\x8d\xed\x188\x7f\xca\x0b"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3952():
    object_0 = module_1.object()
    bytes_0 = b"y\x12\xa6v\x19"
    dict_0 = {object_0: bytes_0, object_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3953():
    bytes_0 = b"\x7f~t\xf6\xaa\x1c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3954():
    bytes_0 = b"\x8a\x1a\xc9_\t7v\x9eu\xe5\xf07\xba"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3955():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_0.get_new_command(none_type_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_3956():
    bytes_0 = b'\x81R\xd6\x0c\x10"\xf7\x14\x81/\x9c\xf2\x14'
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_1.object(*list_0)


def test_case_3957():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3958():
    none_type_0 = None
    int_0 = 1542
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3959():
    bytes_0 = b"\xf11t\x05\xef\xff\x13\x83(S\x1c\x13\x85\x9e"
    tuple_0 = (bytes_0,)
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3960():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3961():
    bytes_0 = b"\xddF\xbc\xcb\x06\xe18"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3962():
    str_0 = "tgi"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3963():
    float_0 = 1818.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3964():
    int_0 = -1417
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3965():
    int_0 = -2428
    tuple_0 = (int_0,)
    tuple_1 = (int_0, tuple_0)
    module_0.match(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3966():
    str_0 = "7"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3967():
    bytes_0 = b"F|?\x9d"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3968():
    bytes_0 = b"j\xa7\xb8\x86v{O\x10W\x17"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3969():
    object_0 = module_1.object()
    tuple_0 = (object_0,)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3970():
    float_0 = 1369.294703
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3971():
    str_0 = "(/U3^kf+4/"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3972():
    str_0 = 'Vx"m"'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3973():
    float_0 = 1366.98
    bytes_0 = b"\xa3\xd7\x94x\xeb\xecaF"
    tuple_0 = (float_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3974():
    bytes_0 = b"\xd7\xd3\x92\xa72\xb9\xfd\x1b\xbe"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_3975():
    pass


@pytest.mark.xfail(strict=True)
def test_case_3976():
    bytes_0 = b"\x0c\xdd-I\x07\xc1qM\xd5\xb3\xd2mn\x94Q"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3977():
    float_0 = 2324.835
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3978():
    bytes_0 = b"\x99s\x8a\xa8\xedq\xa7\x9f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3979():
    set_0 = set()
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_3980():
    str_0 = "h4&}o;W%ZU2'?'E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3981():
    str_0 = "eCF{D/OwE \x0bb%H"
    bool_0 = False
    float_0 = 2119.46112
    dict_0 = {str_0: bool_0, float_0: float_0, bool_0: bool_0}
    tuple_0 = (str_0, float_0, dict_0, str_0)
    tuple_1 = (bool_0, tuple_0, dict_0)
    tuple_2 = (str_0, tuple_1, bool_0)
    module_0.get_new_command(tuple_2, tuple_2)


@pytest.mark.xfail(strict=True)
def test_case_3982():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3983():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    set_0 = set()
    str_0 = "a!#DgF\x0c)sX^$_"
    tuple_0 = (dict_0, set_0, dict_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3984():
    none_type_0 = None
    str_0 = '$cY"C?:I'
    str_1 = ""
    dict_0 = {str_0: none_type_0, str_1: none_type_0}
    module_1.object(*none_type_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3985():
    str_0 = "vVG\x0btKQQQ5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3986():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3987():
    bytes_0 = b"\x88\x9b\x06"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3988():
    str_0 = "Xy- GT\x0bu7&w9"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3989():
    str_0 = "m0 B\x0bY87\t\rl`!s5E<F"
    set_0 = {str_0, str_0, str_0, str_0}
    bytes_0 = b")\x88"
    bool_0 = True
    tuple_0 = (str_0, set_0, bytes_0, bool_0)
    int_0 = 3880
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3990():
    bytes_0 = b"\x10FY\xffV\xca\xe0\xa5\x99\xc0\x14\xbf\n"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3991():
    bytes_0 = b"\xa1p"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3992():
    str_0 = "jo,lzi~#t4H(RfA)M"
    tuple_0 = (str_0,)
    tuple_1 = ()
    module_0.get_new_command(tuple_0, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_3993():
    str_0 = "Ye:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3994():
    bytes_0 = b"h\x16\x15\x00\xb3\xa3&\x9bQ\xab"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_3995():
    list_0 = []
    float_0 = 654.436
    tuple_0 = (list_0, float_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3996():
    bool_0 = False
    dict_0 = {bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3997():
    bool_0 = True
    int_0 = 1534
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_3998():
    int_0 = 1839
    tuple_0 = (int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_3999():
    int_0 = -853
    bool_0 = True
    dict_0 = {int_0: int_0, bool_0: int_0}
    tuple_0 = (int_0, dict_0)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4000():
    int_0 = -1958
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4001():
    int_0 = 1707
    list_0 = [int_0]
    list_1 = [list_0, int_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4002():
    str_0 = "gU|/S]eK=:=E?Np#clw"
    module_0.get_new_command(str_0, str_0)


def test_case_4003():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4004():
    none_type_0 = None
    str_0 = "|"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4005():
    int_0 = -3934
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4006():
    str_0 = "*AIkQe=vJa/\x0c%Q7WD\x0c`;"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4007():
    set_0 = set()
    list_0 = [set_0, set_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4008():
    bytes_0 = b"\x05\x1f\r\xeecvH\xb2\xe6\xe1\x99`|\xb51{pkq\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4009():
    int_0 = -343
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4010():
    str_0 = "lz$2C7,,Z["
    bytes_0 = b"\x05%0l6\x9b\x0f\x8a\xbb\xec"
    str_1 = "W"
    str_2 = ".GWWZ6?L7"
    dict_0 = {str_0: bytes_0, str_1: str_1, str_2: str_0}
    module_1.object(**dict_0)


def test_case_4011():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4012():
    bytes_0 = b"\xc6iu/\xa9r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4013():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4014():
    bytes_0 = b"\xb3\xed\r,8\x84\x0c_yU\x01\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4015():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4016():
    none_type_0 = None
    bytes_0 = b'\x91"r\xd2\xdc7`\xcf\x8dk\x97\xd7'
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4017():
    str_0 = "Xa%)<~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4018():
    bool_0 = True
    str_0 = "ICq;"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4019():
    int_0 = 371
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4020():
    bytes_0 = b"\xff\xd5`\xf5\x19\x08\x91\xc56.\x1c\xadu"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4021():
    float_0 = 1878.0
    module_1.object(**float_0)


@pytest.mark.xfail(strict=True)
def test_case_4022():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4023():
    bytes_0 = b"\xcaC\x8b\x8d\x95\xf1Y\xfb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4024():
    bytes_0 = b"\x950\x901ssR\xefZX5\x8d\x1c\xb7\x87\xe1$\xe03"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4025():
    bytes_0 = b"+\x98\xf31\xccL\xa1\xc9\xd5\x7fY\xb3|\xad"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4026():
    bool_0 = True
    bytes_0 = b"\x04\xa3ym\x1c\x00\xaf\xe7jn\x82\xb2\x8eI"
    tuple_0 = (bool_0, bytes_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4027():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = False
    module_0.match(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4028():
    bytes_0 = b"\xd5\xb6\x17\xa0Wy\xbb"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4029():
    bytes_0 = b"\x8f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4030():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4031():
    str_0 = "`=T@xU7\t4\rv;2;\nS%qU"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4032():
    str_0 = "42L\x0b(pah\\|I,8)}h"
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4033():
    int_0 = 3037
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4034():
    bytes_0 = b"o6\t^Q"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4035():
    int_0 = 1158
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4036():
    str_0 = "<99}'"
    float_0 = 483.0
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4037():
    bytes_0 = b"8}Rw\xa9\xa0\x80\xef\xd8\xd5\xb1G\x01|"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4038():
    str_0 = ",0Ary1?{2Lh@v2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4039():
    bytes_0 = b"\xbc\xee1\xf9\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4040():
    bytes_0 = b"Z\xbeC\x1a[\x96?\x9d"
    module_0.match(bytes_0, bytes_0)


def test_case_4041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4042():
    str_0 = "A0t\nz`|:Vw:ateE1C4I"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4043():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4044():
    int_0 = -1905
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4045():
    str_0 = "Q`n%'h\x0cA3\n.-"
    str_1 = "%Q\r>|O\\?\tv\r*O[i!3^-"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4046():
    bool_0 = False
    tuple_0 = ()
    tuple_1 = (bool_0, tuple_0)
    dict_0 = {tuple_1: bool_0, tuple_0: tuple_0}
    module_0.get_new_command(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4047():
    str_0 = '|B-)!@_H\tP"!1b\tmV'
    module_0.match(str_0, str_0)


def test_case_4048():
    pass


def test_case_4049():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4050():
    int_0 = -1002
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4051():
    bytes_0 = b"i\x08XkE\xb2\x0b\xb9\x91\xb1\x7fc\xac\xd7;\xe1&\x0b\xf4\x85"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4052():
    bytes_0 = b"U$\xb6\xf5\x9c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4053():
    bytes_0 = b"\xf3\xb6\x14\xfb;o\xa8d\xf1'\xa7\x87\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4054():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4055():
    bytes_0 = b"?"
    int_0 = 3253
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4056():
    bytes_0 = b"\x9a\x98\x8a\x85\x00h\xb5\xb1pYO\r\x91\x87\xb4\x17S\x9d"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4057():
    int_0 = -2562
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4058():
    list_0 = []
    object_0 = module_1.object(*list_0)
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4059():
    bytes_0 = b"\xaf'\xd1a\xc7\xb8\r}"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4060():
    int_0 = 115
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4061():
    int_0 = -126
    module_0.get_new_command(int_0, int_0)


def test_case_4062():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4063():
    bytes_0 = b",\x9ah8r#\xd65=\x15"
    list_0 = [bytes_0]
    float_0 = 119.765
    module_0.get_new_command(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4064():
    int_0 = 1531
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4065():
    float_0 = 1828.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4066():
    float_0 = -828.7484
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4067():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4068():
    bytes_0 = b"\x8e~\x10\xbal\x84P*ae"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4069():
    int_0 = 2684
    dict_0 = {int_0: int_0}
    bool_0 = False
    tuple_0 = (dict_0, dict_0, bool_0, int_0)
    module_0.get_new_command(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4070():
    str_0 = "uDw= 6G\x0cV"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4071():
    bool_0 = False
    int_0 = 2137
    bool_1 = True
    object_0 = module_1.object()
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: bool_1, object_0: bool_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


def test_case_4072():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4073():
    str_0 = "LI"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4074():
    bytes_0 = b"7\xd5V"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4075():
    bytes_0 = b'\x8c\xf7[\x06"(/1\xd9\xaag\x1f\xe8\x86r\xb5N*!\x91'
    float_0 = -1435.7809
    str_0 = "RG%E4V!5?Uwj:i^@cx"
    set_0 = {float_0, float_0, str_0, float_0}
    dict_0 = {bytes_0: bytes_0, float_0: str_0, bytes_0: bytes_0, str_0: set_0}
    tuple_0 = (bytes_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4076():
    str_0 = ".C*v\\]X~qABZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4077():
    int_0 = -3066
    tuple_0 = (int_0,)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4078():
    int_0 = 657
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4079():
    bytes_0 = b"\x19iD\xac\x16\x9b\xefM&\x01\xb2"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4080():
    float_0 = -318.06
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4081():
    float_0 = -363.89931
    tuple_0 = (float_0,)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4082():
    int_0 = 381
    set_0 = {int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4083():
    int_0 = 27
    module_0.match(int_0, int_0)


def test_case_4084():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4085():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4086():
    str_0 = "<&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4087():
    int_0 = -3956
    tuple_0 = (int_0, int_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4088():
    str_0 = "00V]-"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4089():
    bool_0 = True
    int_0 = -1021
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4090():
    bytes_0 = b"\x9a9\x0c\x91$\xa8A\x12\xc2y \x84\x99\x90\xaf\xa9\x9f\x88~"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4091():
    str_0 = "YteXt}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4092():
    set_0 = set()
    int_0 = 982
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4093():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4094():
    str_0 = "z\\>0*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4095():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4096():
    complex_0 = 1496.35113 + 1180.467513j
    set_0 = {complex_0, complex_0}
    tuple_0 = (complex_0, set_0)
    list_0 = [tuple_0, tuple_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4097():
    int_0 = -437
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4098():
    str_0 = 'Qc"'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4099():
    int_0 = 2707
    tuple_0 = (int_0, int_0)
    set_0 = {tuple_0, int_0, int_0, tuple_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4100():
    bytes_0 = b"\xa3\x92\x03\xf6N\xc4\x91\x1aX\xdcu"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4101():
    int_0 = -300
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4102():
    int_0 = -2545
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4103():
    int_0 = 2603
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4104():
    str_0 = "-09"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4105():
    complex_0 = 302.2112 + 2567.4858j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4106():
    str_0 = "v"
    int_0 = -3487
    dict_0 = {str_0: str_0, str_0: int_0, str_0: int_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4107():
    str_0 = "NFRzcMM}QjFJYr-~1f"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4108():
    bytes_0 = b"\\~J"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4109():
    int_0 = 1280
    set_0 = {int_0, int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4110():
    int_0 = 1233
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4111():
    int_0 = -2593
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4112():
    float_0 = 1218.79
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4113():
    bytes_0 = b"\x15\xb8+\xe2\xb4\xc5\x8b\xc5\x8fV\xb1\xb5\xc6\x95\x1bw3\xedw\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4114():
    int_0 = -649
    set_0 = {int_0, int_0, int_0, int_0}
    str_0 = '"B]?\\mh-2hgM'
    bool_0 = True
    tuple_0 = (int_0, set_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4115():
    int_0 = 1049
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4116():
    bool_0 = False
    module_0.match(bool_0, bool_0)


def test_case_4117():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4118():
    bytes_0 = b"v\xe3\x0f\x0e\xd0\x03t"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4119():
    bool_0 = True
    str_0 = "v+"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4120():
    int_0 = 1739
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4121():
    float_0 = 66.706119
    list_0 = [float_0, float_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4122():
    complex_0 = 846.9 - 2591.53j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4123():
    bytes_0 = b"\xecq\xc8\xbc\x0cE\x1d\xc1|\x89(\xfaC\xcc\x0c\xf3"
    set_0 = {bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4124():
    str_0 = "nujm~Y-5@)\\Yh2e"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4125():
    int_0 = 5339
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4126():
    bool_0 = True
    module_0.match(bool_0, bool_0)


def test_case_4127():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4128():
    str_0 = "\x0ccx]y`zGukDD"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4129():
    bool_0 = False
    str_0 = "-)}\r8"
    module_0.match(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4130():
    bytes_0 = b"\xfe\x80\x89\x85;\x07\xce\n\x88\x7f\xed\x12"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4131():
    float_0 = 1136.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4132():
    str_0 = "{q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4133():
    bytes_0 = b"\x12Yq\x91\xc08IN=\xe9\xdd\xc9\x9d\x9c@\xfc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4134():
    complex_0 = -3515 + 431.421346j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4135():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4136():
    float_0 = 599.0
    bool_0 = True
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4137():
    bytes_0 = b"8\xb3Z3\xc7\xfa\xc4\xe2_\xbc\xba\xb7\x1f\xf36\xcd\xf0\xa2\x0f"
    module_0.match(bytes_0, bytes_0)


def test_case_4138():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4139():
    bool_0 = False
    int_0 = -626
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4140():
    bytes_0 = b"\x99H\x00;`a\xeffRm\x03\xedj"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4141():
    str_0 = ">C{Z-"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4142():
    set_0 = set()
    bool_0 = False
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4143():
    bytes_0 = b"\x0e@"
    bytes_1 = b"\xa8\x18K\x05\xa9\xb8"
    module_0.get_new_command(bytes_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_4144():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4145():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4146():
    int_0 = 1598
    str_0 = "Cw~'5w^"
    bytes_0 = b"P\xcf\xc1\xe5o+\xb1\x070\xc2@"
    dict_0 = {bytes_0: int_0, bytes_0: bytes_0, str_0: int_0}
    tuple_0 = (str_0, bytes_0, dict_0)
    module_0.get_new_command(int_0, tuple_0)


def test_case_4147():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4148():
    bool_0 = False
    str_0 = ";WGDtv.0S\x0bGF/E*"
    str_1 = 'TX^]y$U"1",ElRVX'
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4149():
    bool_0 = True
    tuple_0 = ()
    set_0 = {bool_0, tuple_0, bool_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4150():
    none_type_0 = None
    complex_0 = 149 - 986.3364j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4151():
    str_0 = "/'j&>RCN@z<>igR"
    list_0 = [str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4152():
    str_0 = "TpPnkiYbQa?'M"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4153():
    str_0 = "01[z\r E%|)"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4154():
    int_0 = 1261
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4155():
    bytes_0 = b"\xaeX^\xc5`\x11"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4156():
    float_0 = -536.1019
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4157():
    bytes_0 = b"\x17"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4158():
    str_0 = "LS9`>\x0bY|; t.fYsEsW"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4159():
    bytes_0 = b"\x01\x9cd\x84\xad\x90\xa0\xe8\xb5\xc5`6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4160():
    str_0 = "x(OlgME^D3*^\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4161():
    bytes_0 = b"\xd5\x12\x8d\xc4\xc8"
    list_0 = []
    str_0 = "\x0b"
    str_1 = "b<o}dD>}JHSBP%"
    dict_0 = {str_0: list_0, bytes_0: list_0, str_1: str_0, str_1: str_0}
    bool_0 = True
    tuple_0 = (bytes_0, list_0, dict_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4162():
    int_0 = -1576
    set_0 = {int_0, int_0}
    module_0.match(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4163():
    str_0 = "EpTQ"
    int_0 = 90
    list_0 = [str_0, str_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4164():
    bool_0 = False
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4165():
    bytes_0 = b"\x12\xc7"
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4166():
    int_0 = -2539
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4167():
    bool_0 = False
    set_0 = {bool_0}
    str_0 = ""
    tuple_0 = (set_0, bool_0, str_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4168():
    int_0 = 1291
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4169():
    int_0 = -4433
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4170():
    float_0 = -725.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4171():
    bytes_0 = b"'\x9a$I^\x02\xe5"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4172():
    str_0 = "pYgrvJWP:#\x0co!>j"
    set_0 = {str_0, str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4173():
    int_0 = -4190
    module_0.match(int_0, int_0)


def test_case_4174():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4175():
    bytes_0 = b"i\xcd"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4176():
    none_type_0 = None
    int_0 = -598
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4177():
    int_0 = 411
    int_1 = -3974
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_4178():
    complex_0 = 619.131757 - 4672.362637j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4179():
    int_0 = -2146
    bytes_0 = b"\x96\x82\xeaz_\x07"
    module_0.match(int_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4180():
    str_0 = "W5\x0c_I &Sr>CB\n"
    set_0 = {str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4181():
    int_0 = -655
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4182():
    bool_0 = True
    object_0 = module_1.object()
    set_0 = {bool_0, bool_0, bool_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4183():
    bytes_0 = b"\x94\xee\xfd\\\x1b"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4184():
    int_0 = -3688
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4185():
    float_0 = -4525.09859
    module_0.match(float_0, float_0)


def test_case_4186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4187():
    int_0 = 3311
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4188():
    int_0 = 1519
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4189():
    bool_0 = True
    bytes_0 = b"p\xe8\x89\xd8\xc3"
    tuple_0 = (bool_0, bytes_0, bytes_0)
    dict_0 = {tuple_0: bytes_0}
    list_0 = [dict_0]
    dict_1 = {}
    module_0.get_new_command(list_0, dict_1)


@pytest.mark.xfail(strict=True)
def test_case_4190():
    str_0 = "a,\rhe-]}vEmj\x0biVw09"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4191():
    str_0 = "[qmkh"
    str_1 = "fQJ"
    module_0.get_new_command(str_0, str_1)


def test_case_4192():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4193():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4194():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bytes_0 = b"\xb7\xa9;n"
    tuple_0 = (bytes_0,)
    bool_1 = False
    tuple_1 = (bool_0, dict_0, tuple_0, bool_1)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4195():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4196():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4197():
    str_0 = "~4>\rHq -;v.d)"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4198():
    bytes_0 = b"\x96h\xeb\x9e\x1a\xfa\x0bi=\xd8\xd5\xdc\xc2\xf2\xca/\xfe`"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4199():
    int_0 = 65
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4200():
    int_0 = 3650
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4201():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4202():
    bytes_0 = b"c*+`\x16*\x85\xed\xfbr"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4203():
    bytes_0 = b"\xb5\x0c\x8a\xc9\x1fK=\x1an\x8dv["
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4204():
    float_0 = 3566.025
    int_0 = -1910
    tuple_0 = (int_0, int_0)
    dict_0 = {float_0: float_0, float_0: tuple_0}
    float_1 = 1168.8194
    module_0.match(dict_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_4205():
    complex_0 = -2726.938715 + 698j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4206():
    int_0 = 2512
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4207():
    float_0 = -1528.53
    bytes_0 = b"\xff\x1a\xee\xbc@\xdc\x1b\xe6\x8b\x81m\x99U\xb5"
    module_0.get_new_command(float_0, bytes_0)


def test_case_4208():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4209():
    str_0 = "B_}*/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4210():
    int_0 = -1526
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4211():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4212():
    complex_0 = -376.575 + 4179.2012j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4213():
    str_0 = "B9<l&R4eB4qM_A;k>"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4214():
    complex_0 = 3040.2 - 644.867656j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4215():
    none_type_0 = None
    int_0 = 1961
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4216():
    bool_0 = True
    tuple_0 = (bool_0,)
    dict_0 = {tuple_0: bool_0, bool_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4217():
    bytes_0 = b"p\xa5\x12"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4218():
    str_0 = "IZ~G\x0cwv\n0\\"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4219():
    bool_0 = False
    tuple_0 = (bool_0,)
    tuple_1 = (tuple_0,)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4220():
    int_0 = -519
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4221():
    bytes_0 = b'\x9c\xb0\xea!\xaf\x1e\x15\xef}W\xa0,"\r\x0f'
    set_0 = {bytes_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


def test_case_4222():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4223():
    bytes_0 = b"\x97\xed_\xe1\xd1%t\x81iZ"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4224():
    float_0 = 1707.126
    bytes_0 = b"\x9aL^\x8f\x0b"
    set_0 = {float_0, bytes_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4225():
    bool_0 = False
    dict_0 = {}
    float_0 = -2524.0
    set_0 = set()
    bytes_0 = b"T*\x10\xe8\x01:ZY\xd6\xd3\xe4\x17\x1c\xd5\xf5\xa8/7\x8eU"
    tuple_0 = (dict_0, float_0, set_0, bytes_0)
    str_0 = "Sy86F"
    tuple_1 = (bool_0, bool_0, tuple_0, str_0)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_4226():
    int_0 = -2646
    list_0 = [int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4227():
    str_0 = '7" Z?\x0bzOAi'
    tuple_0 = (str_0, str_0)
    dict_0 = {tuple_0: str_0, str_0: str_0, tuple_0: tuple_0, str_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4228():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    list_0 = [dict_0, dict_0, dict_0]
    tuple_1 = (list_0,)
    module_0.match(tuple_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4229():
    int_0 = 130
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4230():
    str_0 = "iK]x"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4231():
    complex_0 = 3170.95092 - 86.008625j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4232():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4233():
    bytes_0 = b"\x08\x15\xa5\xab\xe1\x1f\xfd\xeb\x81\x0f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4234():
    int_0 = -1480
    module_0.match(int_0, int_0)


def test_case_4235():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4236():
    str_0 = "AxD\n[ezP"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4237():
    float_0 = 1193.734
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4238():
    float_0 = -799.120176
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4239():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4240():
    str_0 = "?$/`\nEg9Q>]"
    module_0.get_new_command(str_0, str_0)


def test_case_4241():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4242():
    int_0 = -1501
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4243():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4244():
    float_0 = 1429.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4245():
    str_0 = "unP}zM@wCSE0OP@R>"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4246():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4247():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4248():
    bytes_0 = b"+ \x8c\xaaC\xb7\xbbS\x7f\xe4)d!\x97\x87"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4249():
    float_0 = 2525.64
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4250():
    none_type_0 = None
    float_0 = -4111.0
    module_0.get_new_command(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4251():
    float_0 = -2050.2
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4252():
    bytes_0 = b"c\xbcY\xc6\xd5x2Y:\xb2h\xfay\x0c\xcf\x97K!\x1cX"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4253():
    str_0 = "?8u5'ew~Uqb^x"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4254():
    str_0 = "SctW"
    list_0 = [str_0, str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4255():
    int_0 = -2376
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4256():
    str_0 = "c3*Pqcp\x0cp\x0cf\x0cZ"
    str_1 = "g-sBY VaNFkC8"
    module_0.get_new_command(str_1, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4257():
    int_0 = 2743
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4258():
    float_0 = 3529.4084
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4259():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_1, bool_0, bool_1}
    module_0.match(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4260():
    bool_0 = True
    str_0 = ""
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4261():
    str_0 = "\\NO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4262():
    str_0 = "Z:1ynx3qH"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4263():
    bytes_0 = b"i\xe6\xb2\x19\xdf\x82\x1a\xfd\xcd\xf0\x97"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4264():
    str_0 = "I\n$\x0b2s.ad\x0c<sfB\x0b("
    bytes_0 = b"\x89\xea\xbc\xd1\xf0\xde\xd8\x83\xa5\x07\xec\xc7Z"
    tuple_0 = (str_0, str_0, bytes_0, bytes_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4265():
    float_0 = -453.71
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4266():
    str_0 = "VsZL/uZs<R0(n0"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4267():
    int_0 = 1694
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4268():
    str_0 = "+d@\\HO)a:7c\n$"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4269():
    bytes_0 = b"\xfb&\x91\x99\xb6\xec\x83\xcf\xe0\n\xd8\x10\xa7\xaek\xa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4270():
    bytes_0 = b"\xb50\x18\xe0(\xd1,\x87+\x0bLV"
    list_0 = [bytes_0]
    module_0.get_new_command(bytes_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4271():
    float_0 = -1235.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4272():
    str_0 = "*CzDW[F"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4273():
    bytes_0 = b"\x08\x93\xe7\x1f\x84"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4274():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4275():
    int_0 = -1448
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4276():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    list_0 = [set_0, bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


def test_case_4277():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4278():
    str_0 = "#P^%\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.match(str_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4279():
    object_0 = module_1.object()
    list_0 = [object_0, object_0]
    module_0.match(object_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4280():
    float_0 = -3095.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4281():
    int_0 = 1590
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4282():
    float_0 = 1019.78
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4283():
    int_0 = 1244
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4284():
    int_0 = -1582
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4285():
    bytes_0 = b"3-pr\x95\xc9\x95\x9a2;\xe6:"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4286():
    complex_0 = -3996.8406 - 2165j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4287():
    int_0 = 635
    dict_0 = {}
    tuple_0 = (int_0, dict_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4288():
    str_0 = "@q"
    bytes_0 = b"E\xe5\xfdp\x81\xc4k;"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4289():
    bytes_0 = b"\xa7\x9f\x1c\xd0~\xae\xb5\x99\xebl\xf8j\x82\t\x1d\x0e\xbc\x94z~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4290():
    str_0 = "P"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4291():
    str_0 = "jW8M."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4292():
    bytes_0 = b"\xda\x91\xa6\xf3`!T^'\xef\\p\x82h8m"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4293():
    str_0 = "4p"
    module_0.get_new_command(str_0, str_0)


def test_case_4294():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4295():
    list_0 = []
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4296():
    int_0 = -290
    module_0.get_new_command(int_0, int_0)


def test_case_4297():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4298():
    int_0 = 284
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4299():
    bytes_0 = b"\xfb\xf5&r_\xba\x14\x9b\nT}"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4300():
    float_0 = 995.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4301():
    float_0 = 5980.2742
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4302():
    bytes_0 = b"*\xf6\xe9\x91oB\xaa7\xddN\xa2>"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4303():
    str_0 = "Wqv'oLB3?@Lh{|\x0b"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4304():
    object_0 = module_1.object()
    bytes_0 = b"\x07\xc1\xd8\xf3S\xec\xa5\xa7H"
    module_0.get_new_command(object_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4305():
    float_0 = 1954.196
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4306():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4307():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    tuple_0 = (list_0,)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4308():
    int_0 = 3530
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4309():
    bytes_0 = b"\xe5L\xe7\xc4<LS4\x07$t\x83\xe4k\xf0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4310():
    str_0 = "{"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4311():
    bytes_0 = b"\xc4\x82:\xe6\x00\x9fWD"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4312():
    bytes_0 = b"\x1c\x0f\x02\xf4\x8a"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4313():
    str_0 = "52akba"
    module_0.get_new_command(str_0, str_0)


def test_case_4314():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4315():
    float_0 = -2722.0
    dict_0 = {float_0: float_0}
    list_0 = [dict_0, float_0, dict_0]
    bool_0 = True
    tuple_0 = (dict_0, list_0, bool_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4316():
    int_0 = -182
    dict_0 = {}
    tuple_0 = (int_0, int_0, dict_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4317():
    int_0 = -4107
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4318():
    str_0 = '"y'
    int_0 = 1042
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4319():
    bool_0 = False
    bool_1 = False
    bool_2 = True
    tuple_0 = (bool_0, bool_1, bool_1, bool_2)
    module_0.match(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4320():
    str_0 = "+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4321():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4322():
    str_0 = "m,O+"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4323():
    bytes_0 = b"\xbaX\xf0\xb1_'\xed\x97\x07t\xeb\x89\xcc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4324():
    float_0 = 5110.4837
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4325():
    float_0 = 3107.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4326():
    str_0 = '_\x0b*gP4g"iI '
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4327():
    bool_0 = False
    str_0 = "Z=\x0c}uoN\rH0>8-FM("
    dict_0 = {bool_0: str_0, bool_0: bool_0}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4328():
    bytes_0 = b"\xf2\xc3I\xf3\xdb\xec\xfd\xb7^\x87A\x9ex\x7f\xe8\x9f\x97\x93n\xe5"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4329():
    str_0 = "MW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4330():
    float_0 = -810.55125
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4331():
    set_0 = set()
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4332():
    complex_0 = 81.75414 - 3052.4j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4333():
    dict_0 = {}
    list_0 = [dict_0]
    bool_0 = False
    tuple_0 = (dict_0, dict_0, list_0, bool_0)
    module_0.get_new_command(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4334():
    bytes_0 = b" \xc6\xfbqk\xcc%\x17\xa1\x19F"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4335():
    complex_0 = -266.411793 - 3526.896j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4336():
    bytes_0 = b"\x86\xe4\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4337():
    str_0 = "\\g^a%nd]m\tSk'S\x0bEpl\tl"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4338():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_4339():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4340():
    dict_0 = {}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4341():
    complex_0 = 452.8 + 1270.2861j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4342():
    bytes_0 = b"\x82\xa0o\xf5\x0f\xa4\xe7\x04\x11\xa6\xaf\xe9A"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4343():
    bytes_0 = b"q\x13\xa3^^|\xad\xdd\x8b:\x87s3\xc2\xa6\xb0\x88A"
    list_0 = [bytes_0, bytes_0]
    int_0 = -2363
    tuple_0 = (list_0, int_0, bytes_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4344():
    str_0 = ":$t2\\\\U|\x0c\rVK:"
    set_0 = {str_0, str_0, str_0}
    list_0 = []
    str_1 = "-/+\\I}Vak? ]"
    tuple_0 = (set_0, list_0, str_1, str_1)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4345():
    str_0 = " LJut:\\\x0bJx"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4346():
    int_0 = 2476
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4347():
    int_0 = 2743
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4348():
    bytes_0 = b"\x01\xc8\x05"
    set_0 = {bytes_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4349():
    str_0 = " ,Q;H\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4350():
    int_0 = 385
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4351():
    bool_0 = True
    str_0 = "S9VOa"
    tuple_0 = (str_0, bool_0)
    tuple_1 = (str_0, tuple_0)
    dict_0 = {bool_0: tuple_1}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4352():
    bytes_0 = b"\x8f\xc0\xd9{"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4353():
    bytes_0 = b"\xc7\x8bc\xb4\x8fw7\xd0\x14\xd7\tp\xc0~"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4354():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


def test_case_4355():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4356():
    none_type_0 = None
    bytes_0 = b"\x8a\x7f!Hlh\xc9\xaf\xebE\xc3\xab"
    module_0.match(none_type_0, bytes_0)


def test_case_4357():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4358():
    str_0 = "vXtR]+:ElF,WN3"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4359():
    bytes_0 = b"\xedL\xd5/S\xa2\x124\x05\x04\xaf\xc7\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4360():
    float_0 = -3113.22828
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4361():
    bytes_0 = b"5\xaf+\x8bJ?\xc96r\x85?B\xc8\xe7"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4362():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4363():
    int_0 = 3681
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4364():
    list_0 = []
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4365():
    int_0 = 875
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4366():
    str_0 = "N8KNF!r9TXRyTX"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4367():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4368():
    bytes_0 = b"\x1d\xf4\xaaU\r\xfe\x8a\x08x\xae\xa9\xed\x18\x1a\xd1\xe7\xce"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4369():
    int_0 = 1783
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4370():
    bytes_0 = b"\xce\xbb\xbb\x8e\x03\xf6!n\x81y\xdd \x8b\x8b\x0cn\xa0\xa2"
    module_0.match(bytes_0, bytes_0)


def test_case_4371():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4372():
    float_0 = -4549.0
    int_0 = 2316
    dict_0 = {float_0: float_0, float_0: float_0, int_0: float_0}
    list_0 = [dict_0, float_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4373():
    float_0 = -1647.323034
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4374():
    str_0 = "9K2AQk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4375():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4376():
    bytes_0 = b"\n~\x89"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4377():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4378():
    str_0 = "*\nUEf!`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4379():
    complex_0 = 235 - 2858.624j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4380():
    int_0 = 1000
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4381():
    bytes_0 = b"\xe4\x93}"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4382():
    bytes_0 = b"\xb0\xd9*}\xde<.7\x19\xe7\x19\xe1y"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4383():
    str_0 = "Lu`<[|F/c\nOkFTpSo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4384():
    float_0 = -2266.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4385():
    int_0 = 2564
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4386():
    bytes_0 = b"u\xdd\xban\xc6;deVOI.\xc4"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4387():
    bytes_0 = b"=\xbf\x03$\xdf:\xfde\x1b\x99.'.*\xfe\xc8B"
    bool_0 = False
    dict_0 = {bytes_0: bytes_0, bool_0: bytes_0, bytes_0: bytes_0}
    int_0 = -3277
    int_1 = 738
    tuple_0 = (dict_0, int_0, int_1)
    bool_1 = False
    module_0.get_new_command(tuple_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4388():
    int_0 = -3180
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    int_1 = 2092
    tuple_0 = (dict_0, int_0, int_1)
    tuple_1 = (int_0, int_0, tuple_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4389():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0, **none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4390():
    int_0 = 1549
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4391():
    str_0 = ">#_U\x0cP\x0cW+DA-5?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4392():
    str_0 = '`B{C\x0c|*S_GjfTnC"x47]'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4393():
    bool_0 = True
    bool_1 = False
    module_0.match(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4394():
    bytes_0 = b"\x02w\xa1@\xdc\x94\x86@4\xdf"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4395():
    str_0 = "ZZ$`wROs"
    str_1 = "[l:]|U)HfPt>=mB"
    dict_0 = {str_0: str_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4396():
    complex_0 = 300.930039 - 685.86604j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4397():
    float_0 = -3171.2
    set_0 = {float_0, float_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4398():
    float_0 = -467.039577
    bytes_0 = b"d\xc2&\xe7\xf5\xd6"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4399():
    list_0 = []
    object_0 = module_1.object(*list_0)
    bool_0 = False
    tuple_0 = (object_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4400():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4401():
    bytes_0 = b"\xc4\x0f\x02tV"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4402():
    bool_0 = False
    int_0 = 4830
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4403():
    str_0 = "-ja"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4404():
    float_0 = 992.0
    list_0 = [float_0, float_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4405():
    str_0 = "3?L"
    module_1.object(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4406():
    int_0 = -2988
    list_0 = [int_0, int_0, int_0]
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4407():
    float_0 = 3755.97
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4408():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4409():
    float_0 = -492.0
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4410():
    int_0 = -769
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4411():
    complex_0 = 4919.670258 - 1347.136329j
    str_0 = "G{n<qU!w+~_'9dy'Um"
    float_0 = -218.86
    dict_0 = {complex_0: str_0, complex_0: complex_0, float_0: float_0, float_0: str_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4412():
    bytes_0 = b"\x06n\xcdy\x0f\xa4m\xff\xe3RL\x9d\xe4\xce\xa0>\xfe!"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4413():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    list_0 = [set_0, set_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4414():
    str_0 = "_@{"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4415():
    bool_0 = True
    bool_1 = True
    float_0 = 5860.587693
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_1: float_0}
    module_0.get_new_command(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4416():
    str_0 = "{'@o}Q-LJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4417():
    str_0 = "vGhu~-_]g!"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4418():
    int_0 = 3855
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4419():
    int_0 = 4788
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4420():
    str_0 = "9)AYg}*jSaI'*"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4421():
    bytes_0 = b"\xe4\xfa\xb429P\xaf\xb0\xb3z\x80\x9d&\xf8\xe5\xae]\xe1"
    none_type_0 = None
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4422():
    str_0 = 'k\x0cH4FY\t93YV\x0c"F'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4423():
    bool_0 = False
    tuple_0 = (bool_0,)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4424():
    int_0 = 2526
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4425():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4426():
    str_0 = "1#Z9ul."
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4427():
    float_0 = 480.4
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4428():
    str_0 = "*b|wY!\x0bPo297&lB;>q;i"
    str_1 = "I's,.2/pqN"
    set_0 = {str_0, str_0, str_0, str_1}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4429():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4430():
    bytes_0 = b":\xb37\xc3\xcf\xf8\xdb\x1f'\x85\xa9\x9d\x16/\xda\x07"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4431():
    int_0 = 4349
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4432():
    str_0 = "2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4433():
    bool_0 = False
    object_0 = module_1.object()
    module_0.get_new_command(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4434():
    int_0 = -3604
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4435():
    int_0 = 2715
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4436():
    int_0 = 30
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4437():
    bytes_0 = b"u\xb5"
    bool_0 = True
    str_0 = "~^i20[n\r"
    tuple_0 = (bytes_0, bool_0, str_0, bool_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4438():
    str_0 = "I2Q~"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4439():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4440():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    list_1 = [list_0, dict_0]
    module_0.get_new_command(list_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4441():
    str_0 = "M\n^Ki=="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4442():
    float_0 = 1927.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4443():
    float_0 = 2945.0
    bool_0 = False
    module_0.get_new_command(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4444():
    int_0 = -2411
    module_0.match(int_0, int_0)


def test_case_4445():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4446():
    str_0 = "&Bw!"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4447():
    int_0 = -831
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4448():
    int_0 = -3009
    float_0 = 5110.0
    list_0 = [int_0, float_0]
    module_0.match(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4449():
    complex_0 = 1391.59 - 219.2857j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4450():
    int_0 = -1706
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4451():
    int_0 = 3322
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4452():
    bytes_0 = b"\xcc\x84=\xad\xdd~t\xe7\xfbF\x1d\xe1M\x96\x92\xdb\xfc\n\xae"
    list_0 = [bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4453():
    int_0 = -3759
    tuple_0 = (int_0,)
    module_1.object(**tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4454():
    int_0 = -71
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4455():
    bytes_0 = b"\xc1ZL"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4456():
    str_0 = "\\h.8Q-E5a;slsovN"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4457():
    none_type_0 = None
    int_0 = -1272
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4458():
    complex_0 = -1911.46 - 1686j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    module_0.match(set_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4459():
    str_0 = "=q),e)?D$u"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4460():
    int_0 = -247
    module_1.object(*int_0)


@pytest.mark.xfail(strict=True)
def test_case_4461():
    bytes_0 = b""
    str_0 = "LxhE@%\t5o?\tnc"
    tuple_0 = (bytes_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4462():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4463():
    str_0 = "G"
    bool_0 = True
    str_1 = "EIk!J{,F;\r+8"
    list_0 = [str_0, bool_0, str_1, str_1]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4464():
    none_type_0 = None
    str_0 = "\",@\x0bHE\n?Y'u\ri1=TA\x0c"
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4465():
    int_0 = 1580
    str_0 = "eZNr\\"
    tuple_0 = (int_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4466():
    bytes_0 = b"P/.\xe5\xdb\xa1'R\xab\xb4\x8a\xacD"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4467():
    float_0 = 1349.03
    bool_0 = False
    set_0 = {bool_0, float_0, bool_0, float_0}
    dict_0 = {float_0: float_0, float_0: set_0}
    list_0 = [set_0, bool_0]
    module_0.get_new_command(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4468():
    complex_0 = 2276.65 - 564.97767j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4469():
    int_0 = 25
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4470():
    bytes_0 = b"\xfd7n\x1d\xdb\x05~\x8fF\x1d\xd9r\xa1*"
    module_0.match(bytes_0, bytes_0)


def test_case_4471():
    pass


def test_case_4472():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4473():
    str_0 = ">:I0xz-2=6.^{.I9WT"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4474():
    complex_0 = 2323.66 - 2002.2077j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4475():
    list_0 = []
    list_1 = [list_0]
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4476():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4477():
    int_0 = -1828
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4478():
    int_0 = 186
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4479():
    bytes_0 = b"vb\xbd\xecm\xeaT[\x11o"
    set_0 = {bytes_0, bytes_0}
    list_0 = [set_0, set_0, set_0, bytes_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4480():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4481():
    bytes_0 = b"7f\xe8r\xc5\x9f\x12\xf6 "
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4482():
    bytes_0 = b"\xaa\x92\xc4g!\xcel\x07Nx\xa9:\xac"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4483():
    bool_0 = True
    tuple_0 = ()
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4484():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [bool_0, dict_0, bool_0, bool_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4485():
    bytes_0 = b",\x955\xae_t\tnW\xcb\x9e\xa1\xaf\xab\xeb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4486():
    bytes_0 = b"\xbb\x8e\xe4\xc0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4487():
    int_0 = 2715
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4488():
    str_0 = "dS~IF/!Mg&ebJ6_b,C"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4489():
    float_0 = 1752.08952
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4490():
    float_0 = -1180.761
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4491():
    bytes_0 = b"8e\xa2\xfe\xa2\x8d3'\xd0"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4492():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4493():
    complex_0 = -318.81 - 14.92j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4494():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4495():
    dict_0 = {}
    bytes_0 = b"\x86xX2<1\xb5\xc4\x0bmZl\xdd"
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4496():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4497():
    int_0 = -703
    dict_0 = {int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


def test_case_4498():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4499():
    complex_0 = -474.343361 - 451.4j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


def test_case_4500():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4501():
    float_0 = -965.69
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4502():
    int_0 = 331
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4503():
    float_0 = -1084.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4504():
    str_0 = "\x0b((sz@9h.\\NvVhv2"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4505():
    bytes_0 = b"b"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4506():
    str_0 = "Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4507():
    bytes_0 = b"cD\xf2z\xe0\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4508():
    str_0 = "n'R[x4=X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4509():
    int_0 = -2008
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4510():
    str_0 = "Df#ouD=g*h\t^nn>.g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4511():
    int_0 = -748
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4512():
    float_0 = -954.75
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4513():
    float_0 = 1336.41875
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4514():
    int_0 = 413
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4515():
    str_0 = "^>no\rms$z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4516():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    none_type_0 = None
    module_0.get_new_command(list_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4517():
    bytes_0 = b"~\x98Dl\xd3w\xa4\x15\xdcu"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4518():
    float_0 = -491.3339
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4519():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4520():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    complex_0 = 1236.15507 - 909.7561j
    bool_1 = True
    tuple_0 = (dict_0, complex_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4521():
    float_0 = -242.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4522():
    bytes_0 = b"\x0e^s\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4523():
    none_type_0 = None
    int_0 = 1658
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4524():
    int_0 = 245
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4525():
    float_0 = -1805.69
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4526():
    str_0 = "7Djz"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4527():
    str_0 = "!jQ|AK?1\x0c;`Y'W?@:;m"
    dict_0 = {str_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4528():
    str_0 = '6jL1_"0x\nZ<'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4529():
    str_0 = "rVB d=e;fya(@KzW"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4530():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4531():
    float_0 = 647.91
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4532():
    str_0 = "#\\-GaUC9|:B"
    module_0.get_new_command(str_0, str_0)


def test_case_4533():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4534():
    float_0 = 1278.720675
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4535():
    float_0 = 2745.1
    bytes_0 = b"\xca\xc9\x00\xac\xdc\xacx\x94\x11\x83"
    module_0.match(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4536():
    complex_0 = 117.66 - 2395.022818j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4537():
    bytes_0 = b"\xf5|\xf1\xda@\xcf\x9e\x04|\xf1\x95\xa0"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4538():
    bytes_0 = b"\xef\xd2\xff\x97V;\x93q{"
    str_0 = "v1VI6x6oDt/iF\n%ZA_@"
    bool_0 = True
    list_0 = [bool_0, bytes_0]
    tuple_0 = (list_0, list_0, bool_0)
    bool_1 = False
    bool_2 = True
    bytes_1 = b"\x1c\xcd\x17\xe0\x91\x9a\xb6\x06\xc9\xe6'D\xaa0\xe4\xe2/"
    tuple_1 = (tuple_0, bool_1, bool_2, bytes_1)
    int_0 = 1224
    tuple_2 = (bool_0, tuple_1, int_0)
    dict_0 = {bytes_0: bytes_0, str_0: bytes_0, bytes_0: str_0, bytes_0: tuple_2}
    module_0.get_new_command(dict_0, bool_2)


@pytest.mark.xfail(strict=True)
def test_case_4539():
    bytes_0 = b"\x00\x86m\xbd\xa5]\xac\x83+g&c\x08J\x1a\xbcT"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4540():
    int_0 = -325
    set_0 = set()
    tuple_0 = (int_0, int_0, set_0, set_0)
    module_0.match(int_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4541():
    int_0 = -289
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4542():
    bytes_0 = b"\x04\xde"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4543():
    float_0 = 101.0
    set_0 = {float_0, float_0, float_0, float_0}
    module_0.match(set_0, set_0)


def test_case_4544():
    pass


def test_case_4545():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4546():
    str_0 = "q@{U<+eLR"
    list_0 = [str_0, str_0, str_0, str_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4547():
    str_0 = "BeGDndTfeok_R.G*)IR"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4548():
    bytes_0 = b"ApU\xe8+\x85\xcc["
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4549():
    bytes_0 = b"\xc8~\x04\xf8-\xa4"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4550():
    bool_0 = True
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4551():
    bytes_0 = b"\x1a\x04>\x89\xf9\xb8|"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4552():
    str_0 = "{/Cc"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4553():
    bytes_0 = b"\xe6\x0f\x13\xf0\xbf"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4554():
    str_0 = "_ijm5mB("
    set_0 = {str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4555():
    str_0 = ""
    int_0 = -2695
    module_0.match(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4556():
    str_0 = "g14!1\tr"
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4557():
    float_0 = -804.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4558():
    int_0 = 2894
    module_0.get_new_command(int_0, int_0)


def test_case_4559():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4560():
    none_type_0 = None
    object_0 = module_1.object()
    module_0.get_new_command(none_type_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4561():
    int_0 = -931
    bytes_0 = b"\x86\x19c\xd8"
    list_0 = []
    tuple_0 = (int_0, bytes_0, list_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4562():
    int_0 = -4252
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4563():
    complex_0 = 2364.835411 + 1886.8182j
    list_0 = [complex_0]
    module_0.get_new_command(list_0, list_0)


def test_case_4564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4565():
    str_0 = "gtP"
    list_0 = [str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4566():
    bytes_0 = b"\xa8\x87\x8c\xe0\xbc\xd05:<B\x0b\x90\xbe\xd2\x0e\x03\xc1"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4567():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4568():
    str_0 = "|]iPVJC05wgx.\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4569():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0, object_0: object_0, object_0: object_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4570():
    bytes_0 = b"\xc7\x87\x83DH\xed\x9a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4571():
    bytes_0 = b"\x97\x06P\xb6\x96"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4572():
    float_0 = -2133.47736
    module_0.match(float_0, float_0)


def test_case_4573():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4574():
    int_0 = -784
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4575():
    float_0 = 1195.297
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4576():
    tuple_0 = ()
    bool_0 = False
    set_0 = {tuple_0, tuple_0, bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4577():
    int_0 = 2031
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4578():
    bytes_0 = b"\xb7\x0c\x11m\xfb\xaa"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4579():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4580():
    float_0 = 1096.756
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4581():
    float_0 = -889.225
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4582():
    object_0 = module_1.object()
    list_0 = [object_0, object_0, object_0, object_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4583():
    int_0 = -30
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4584():
    int_0 = -2747
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4585():
    int_0 = 819
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4586():
    float_0 = -3241.936
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4587():
    bytes_0 = b"\x8ffB\xd5\xf0\x9b5\xa6\xab\xc7\x84\x1bVeJ"
    module_0.match(bytes_0, bytes_0)


def test_case_4588():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4589():
    bytes_0 = b"\xb2\xd7z"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4590():
    str_0 = "'y\tm}7UeqEs"
    bytes_0 = b"W\x17?r"
    dict_0 = {str_0: str_0, str_0: bytes_0}
    module_0.get_new_command(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4591():
    int_0 = -2328
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4592():
    bytes_0 = b'\x10\xe16J\xcc"\xe0\xe7\x85\rB\xa6}\x9e\x84\xe4O\xd3\xb2'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4593():
    str_0 = "Q:f-J:dN8p/I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4594():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4595():
    bytes_0 = b"\x11<"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    list_0 = [tuple_0, dict_0]
    module_0.get_new_command(list_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4596():
    int_0 = -1977
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4597():
    str_0 = "\r$B<JJM6zCURl,'IdXZN"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.get_new_command(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4598():
    object_0 = module_1.object()
    module_0.match(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4599():
    bytes_0 = b"w\x85\x00\xea\xe2p\x9e\xa8\xbb\xd4Q#\xed\xb6\x7fL\x04R\xd6\x1c"
    module_1.object(*bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4600():
    bytes_0 = b"\xaa3&\xba\xb5\xe6\xa1\x8d%a\x8f'\x99\xad\xec\x9a"
    float_0 = 6355.545
    module_0.get_new_command(bytes_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4601():
    complex_0 = 1335.32971 + 2835.69965j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4602():
    str_0 = "xS%<*y;A 2X02,h\tJ"
    tuple_0 = ()
    list_0 = []
    tuple_1 = (str_0, tuple_0, list_0)
    module_0.match(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4603():
    float_0 = -3373.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4604():
    complex_0 = 1747.6 - 1455.1314j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4605():
    int_0 = 1945
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4606():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4607():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4608():
    none_type_0 = None
    list_0 = [none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4609():
    int_0 = -4446
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4610():
    str_0 = "Aq"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4611():
    str_0 = ". E`:hMV<$!w7f4Wh"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4612():
    complex_0 = 241.8827 - 4826.138549j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4613():
    complex_0 = -1300.859495 - 1587j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    bool_0 = True
    tuple_0 = (list_0, list_0, bool_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4614():
    int_0 = 943
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4615():
    set_0 = set()
    str_0 = "xY_7#"
    tuple_0 = (set_0, set_0, str_0)
    bytes_0 = b"\xcf\xb9Y\xb0\xb3\x1b\xec\xa9"
    tuple_1 = (set_0, tuple_0, bytes_0, bytes_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4616():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0)
    module_0.match(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4617():
    bool_0 = True
    bytes_0 = b""
    tuple_0 = (bool_0, bytes_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4618():
    bytes_0 = b"\xfb\xa1\xfav\xa7\x0cn\xcamk1\xf7&\xed\x13\xb9)t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4619():
    bytes_0 = b"^\x06\xca\x97\x98\x03"
    int_0 = -2742
    bool_0 = True
    tuple_0 = (int_0, bool_0)
    dict_0 = {bytes_0: bytes_0, tuple_0: int_0, int_0: bool_0, tuple_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4620():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4621():
    bytes_0 = b"\xdc\x1e/cd|\xf1\xe1\xe3\x94"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4622():
    bytes_0 = b"\x17\xda\x06\xea\n\xf8\x16\xc5=3\xa7\x1c\x87Z"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4623():
    str_0 = "c)pyO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4624():
    int_0 = -1198
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4625():
    int_0 = 226
    set_0 = {int_0, int_0, int_0, int_0}
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.get_new_command(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4626():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4627():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4628():
    int_0 = 2331
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4629():
    str_0 = "BvCmNG]R([k\rld~;%\t"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4630():
    bytes_0 = b"\x16O\xdaM\xbd\x086\xc4b\xe3j3+\xc4\xa6'{\x9c\x08"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4631():
    float_0 = -810.36555
    set_0 = set()
    module_0.match(float_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4632():
    bool_0 = True
    complex_0 = 2249.712 - 1186.4884j
    dict_0 = {bool_0: complex_0, bool_0: complex_0}
    list_0 = [dict_0, dict_0, bool_0]
    str_0 = "SnD}"
    dict_1 = {}
    str_1 = "<4\rqp)?r<'"
    bool_1 = False
    str_2 = "9ZO.20"
    dict_2 = {str_0: dict_0, str_0: dict_1, str_1: bool_1, str_2: str_2}
    module_1.object(*list_0, **dict_2)


@pytest.mark.xfail(strict=True)
def test_case_4633():
    str_0 = "c\tIIJLGc\x0c.vX9@u\x0b|@(d"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4634():
    bytes_0 = b"o?=\x87\xfd\xbaY\xd51\xdej+\x99X\\'\xda"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4635():
    bytes_0 = b"\x97\xa4\xb0k\x85\xe8\xa7\xcb\x1a[\xc3"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4636():
    str_0 = "&\ns[Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4637():
    bool_0 = False
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, bool_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4638():
    int_0 = -1328
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4639():
    float_0 = -2468.0
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4640():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4641():
    str_0 = "_$$Yq|)e.SC\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4642():
    float_0 = -1520.0886
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4643():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bytes_0 = b"\xf4\x01\xd8h\x1a\x8d\xb8\xf3\xdc\xb4\xb5}i$\xe4"
    str_0 = '~"\x0c7P[Lm&;8Sr.'
    tuple_0 = (set_0, bytes_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4644():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4645():
    float_0 = -469.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4646():
    int_0 = 2941
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4647():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    module_0.get_new_command(bool_0, set_0)


def test_case_4648():
    pass


def test_case_4649():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4650():
    int_0 = -585
    set_0 = {int_0, int_0, int_0}
    list_0 = [set_0, set_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4651():
    str_0 = "8a`55x+@\tOA\n:\nz`QKQ+"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4652():
    float_0 = 2923.02
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4653():
    str_0 = " >6#nUk>}9\n#KLz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4654():
    bytes_0 = b"\xef\xe2\x0e)+V`|\xca\r\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4655():
    int_0 = 3103
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4656():
    bytes_0 = b"\x8b"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4657():
    int_0 = -993
    list_0 = [int_0, int_0]
    bool_0 = True
    bytes_0 = b"@\x1a\xec\x7f\x9c{\xe61>k"
    tuple_0 = (int_0, list_0, bool_0, bytes_0)
    module_0.match(tuple_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4658():
    bool_0 = False
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4659():
    none_type_0 = None
    str_0 = "v2?I f^3}i&]5];p3"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4660():
    str_0 = "%*!1d*(PzO0@"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4661():
    int_0 = 1458
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4662():
    float_0 = -1712.5
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4663():
    str_0 = "vq==se@*sl0/<;(7pJ/H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4664():
    str_0 = '^a\x0crG"J@a"Zd*;'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4665():
    int_0 = -193
    str_0 = "H0#BG\\p*0G aO9"
    module_0.get_new_command(int_0, str_0)


def test_case_4666():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4667():
    complex_0 = -482.62 + 789.35472j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4668():
    str_0 = "?E[(i6~Zw9HW_y`+I"
    set_0 = {str_0}
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4669():
    complex_0 = -286.2 + 318.5784j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4670():
    complex_0 = -1208.3685 - 3051.449j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4671():
    int_0 = 243
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4672():
    int_0 = -957
    module_0.match(int_0, int_0)


def test_case_4673():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4674():
    bytes_0 = b"\x10\xf9\xb8\xa9\x918 R\xb3\xcf\xcc\x91\xa9\xcd\xe3"
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4675():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    set_0 = {tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4676():
    str_0 = "!g-Z[eo"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4677():
    float_0 = -673.23002
    dict_0 = {float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, float_0, dict_0)
    module_0.get_new_command(tuple_0, float_0)


def test_case_4678():
    pass


def test_case_4679():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4680():
    float_0 = -1575.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4681():
    bytes_0 = b"\x8b\x86>F\n\x80K"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4682():
    int_0 = 230
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4683():
    bool_0 = True
    dict_0 = {}
    module_0.get_new_command(bool_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4684():
    float_0 = -2025.598
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4685():
    str_0 = "NW7g3S-l>]\x0bMS;*ql~q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4686():
    bytes_0 = b"\x15a$+mO/7 \xad\x86NJ\x9d\x85H\xf0'"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4687():
    bytes_0 = b"\x92p\x92\x97\xfa"
    dict_0 = {bytes_0: bytes_0}
    set_0 = set()
    tuple_0 = (bytes_0, dict_0, set_0)
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4688():
    int_0 = -412
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4689():
    bytes_0 = b"'\xb0 _\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4690():
    str_0 = "u1%W)DB]@ CQ"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4691():
    int_0 = -2183
    set_0 = {int_0, int_0, int_0, int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4692():
    bytes_0 = b"\xdf\x9e\x89IMjZ|{M\xcb\xc5\xbc)5\xb9"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4693():
    int_0 = -3077
    module_0.match(int_0, int_0)


def test_case_4694():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4695():
    int_0 = -1043
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4696():
    str_0 = "t}wAla9`i-"
    set_0 = set()
    tuple_0 = (str_0, set_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4697():
    int_0 = 1581
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4698():
    str_0 = "y5]%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4699():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4700():
    str_0 = "bgw\x0c"
    str_1 = "~(Y?6@MsXbD{9p)1>"
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4701():
    int_0 = 561
    set_0 = {int_0, int_0}
    list_0 = [set_0, set_0, int_0, int_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4702():
    int_0 = 363
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4703():
    int_0 = -3452
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4704():
    none_type_0 = None
    str_0 = "\x0b"
    str_1 = ":y:r}|1]{"
    dict_0 = {str_0: none_type_0, str_0: none_type_0, str_1: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4705():
    bytes_0 = b"w\xef\xdbh!\xd2Q7\x12\x8c"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4706():
    int_0 = -3547
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4707():
    int_0 = -4761
    module_0.match(int_0, int_0)


def test_case_4708():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4709():
    int_0 = 119
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4710():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4711():
    complex_0 = -739.18 - 453.1j
    int_0 = -1310
    dict_0 = {complex_0: int_0}
    module_0.match(complex_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4712():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, bool_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4713():
    complex_0 = 1041.12014 + 2851.99574j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4714():
    str_0 = "*-A;f.@m6Pr.N<p4>J"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4715():
    int_0 = -317
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4716():
    str_0 = "\r;\x0b:"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4717():
    bytes_0 = b"\xa7y\xbd\x87\xc1t\xeaC^\x1e\xe2\xf8|\xad6RY\xf8y\x9f"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4718():
    float_0 = -2261.7058
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4719():
    int_0 = -3327
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4720():
    str_0 = "f9-An"
    bool_0 = True
    module_0.match(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4721():
    bool_0 = True
    bytes_0 = b"\x11\xb6fZ\xcb\\5"
    int_0 = 256
    tuple_0 = (bool_0, bytes_0, int_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4722():
    none_type_0 = None
    complex_0 = 1955.3405 - 3856.7j
    module_0.get_new_command(none_type_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4723():
    int_0 = 3788
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4724():
    int_0 = -4502
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4725():
    int_0 = -1369
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4726():
    set_0 = set()
    str_0 = "`UjW0"
    module_0.get_new_command(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4727():
    bytes_0 = b"y\xfcW\xbb\x9f\x12h\x19\x84\x06Au\xcbA\xa0"
    bool_0 = True
    list_0 = []
    dict_0 = {bytes_0: bytes_0, bool_0: list_0, bytes_0: list_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4728():
    bytes_0 = b"\xef\xfd\xa1 \x90\xa5\x87\x94z\xfe\xd1C\x00\x8b\x07"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4729():
    int_0 = 1932
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4730():
    bytes_0 = b"2\xe5d\x00\xf5\xaa\xe7\xca#\xb672\t5\xa8"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4731():
    str_0 = "z\nXz\x0cT4y\t`*2N{t}9Ca"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4732():
    str_0 = "-3ODk"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4733():
    int_0 = 536
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4734():
    str_0 = "\x0c$"
    module_0.match(str_0, str_0)


def test_case_4735():
    pass


def test_case_4736():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4737():
    none_type_0 = None
    dict_0 = {
        none_type_0: none_type_0,
        none_type_0: none_type_0,
        none_type_0: none_type_0,
    }
    module_0.get_new_command(none_type_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4738():
    bytes_0 = b"GW\xefb\xb0U\xde\x18"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4739():
    str_0 = "\rlzzAA<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4740():
    dict_0 = {}
    tuple_0 = (dict_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4741():
    bool_0 = False
    str_0 = 'abE("pS'
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4742():
    float_0 = 1288.15
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4743():
    int_0 = -789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4744():
    bytes_0 = b'\xc6\xecf"?\xcb\xcc\x18\xfd\xfaD\x88\x03\xb9b\x8a\x08\xbf'
    list_0 = [bytes_0, bytes_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4745():
    int_0 = 909
    list_0 = [int_0, int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4746():
    int_0 = -300
    tuple_0 = (int_0,)
    module_0.get_new_command(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4747():
    float_0 = -2267.1695
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4748():
    int_0 = -1355
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4749():
    float_0 = 3293.183229
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4750():
    bytes_0 = b"\xa5\xb0/9@i\x89\x132\xaf5\xad\xa4\x80\xde\x9a;!\xc7M"
    module_0.match(bytes_0, bytes_0)


def test_case_4751():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4752():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4753():
    str_0 = ":d\rJ\r K%lU^LqQdKh"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4754():
    float_0 = 2570.916783
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4755():
    object_0 = module_1.object()
    str_0 = '"S K&KobAu~6'
    module_0.get_new_command(object_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4756():
    str_0 = "Z\nNjkkyuv=\\^;D<j&"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4757():
    int_0 = 1274
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4758():
    str_0 = "Vi1G=(>avBcl_"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4759():
    int_0 = 269
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4760():
    str_0 = "BaZ,@Z!8"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4761():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4762():
    str_0 = "SjY(76`0"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4763():
    complex_0 = -2042.92265 + 2423.771054j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4764():
    int_0 = 1008
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4765():
    bytes_0 = b"\xdd\x02V3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4766():
    none_type_0 = None
    bytes_0 = b"\xd2\x84\xd6\xcd\x0c"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4767():
    int_0 = -136
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4768():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4769():
    int_0 = -506
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4770():
    float_0 = -3011.6082
    tuple_0 = (float_0, float_0)
    set_0 = {tuple_0, tuple_0, tuple_0, float_0}
    module_0.match(set_0, float_0)


def test_case_4771():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4772():
    int_0 = 1795
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4773():
    int_0 = -643
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4774():
    bytes_0 = b"\x014\xf7\x83\xc3\x05\x84"
    tuple_0 = ()
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4775():
    none_type_0 = None
    int_0 = -947
    module_0.get_new_command(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4776():
    float_0 = 1455.43
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4777():
    bytes_0 = b'dJfx#\xa4\x1e"_\xb4X\xe6\xe8\x14\x9amF\xe6'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4778():
    str_0 = "F*\\DI2zY&:v/R(*EW&"
    list_0 = [str_0, str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4779():
    int_0 = 104
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4780():
    int_0 = 1076
    str_0 = "p]<Jzjr.\n\x0btDwbgD7"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4781():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4782():
    none_type_0 = None
    int_0 = 1607
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4783():
    tuple_0 = ()
    int_0 = -768
    list_0 = [tuple_0, tuple_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4784():
    str_0 = "7[Sw=Op\x0c6h["
    module_0.match(str_0, str_0)


def test_case_4785():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4786():
    str_0 = "EZa`]}#W"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4787():
    int_0 = 508
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4788():
    bool_0 = False
    bool_1 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4789():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4790():
    float_0 = -3425.03787
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4791():
    int_0 = 5415
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4792():
    bytes_0 = b"\xa7\xab\xec\x9am\x14*\x0e\xfe.L\xd4]\x8fR\xbd"
    float_0 = 2811.5
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4793():
    list_0 = []
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4794():
    bytes_0 = b"`E("
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4795():
    int_0 = 1686
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4796():
    str_0 = "\rNg9{,r;hj[\tKhP~=A"
    module_0.get_new_command(str_0, str_0)


def test_case_4797():
    list_0 = []
    object_0 = module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4798():
    none_type_0 = None
    str_0 = "bkB^>wOufJ\x0b-a"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4799():
    bool_0 = False
    tuple_0 = (bool_0, bool_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4800():
    int_0 = -2597
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4801():
    bool_0 = False
    str_0 = "x$!XSk[vEz"
    bool_1 = True
    dict_0 = {str_0: bool_1, str_0: bool_0}
    module_1.object(*bool_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4802():
    str_0 = "AAUQPl2(Saw5nj8SQ"
    float_0 = -233.906
    module_0.match(str_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4803():
    int_0 = -1283
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4804():
    int_0 = 328
    str_0 = ""
    set_0 = {int_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4805():
    bytes_0 = b"\xc9\x9d(\xaf\xae\x910\xa9^\xec\x9f\xa0\xeb\x17\x877"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4806():
    int_0 = 966
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4807():
    int_0 = -978
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4808():
    str_0 = "%3>i~iy N-\\.McZ"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4809():
    bytes_0 = b"<6\xb6\xae\x9e[\xaf\xa9\xec#\x1a\xf6L\xfb\xc4\x8f\xba\x98"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4810():
    list_0 = []
    object_0 = module_1.object(*list_0)
    tuple_0 = (object_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4811():
    str_0 = "q){^3a\r7"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4812():
    bool_0 = False
    str_0 = "qfI~1F\\IT$"
    tuple_0 = (bool_0, str_0, bool_0)
    list_0 = [str_0, str_0]
    dict_0 = {tuple_0: str_0, str_0: bool_0, str_0: tuple_0, bool_0: list_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4813():
    str_0 = "H"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4814():
    bytes_0 = b"\xdd\xa7\xebX\x80?\x80\xa0K\x03"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4815():
    int_0 = -3199
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4816():
    object_0 = module_1.object()
    module_0.get_new_command(object_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4817():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4818():
    str_0 = "%"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4819():
    str_0 = "9}Xiua)l]\tL4(2e"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4820():
    float_0 = 274.074116
    bool_0 = False
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4821():
    bytes_0 = b".\xc4\xda\xd2\xfdt\t\x0c\xfb\xda\xc6\xeb^\xbc"
    int_0 = -223
    module_0.get_new_command(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4822():
    str_0 = ",p\rOZSg\x0c4/Iik]^C:=Sp"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4823():
    str_0 = ""
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4824():
    bool_0 = True
    int_0 = -1038
    list_0 = [bool_0, bool_0]
    tuple_0 = (bool_0, int_0, bool_0, list_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4825():
    str_0 = "3M>\t87!Cpr+;"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4826():
    str_0 = "DM["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4827():
    str_0 = "Z r6SY2#J%.y|~WX"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4828():
    bytes_0 = b"\x9d\xe4\xe7\x0f6\xaby\xa9\xec\x05\xe1\xef\xd1\xdc~mP\xe2"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4829():
    bytes_0 = b"\x16,\xe9\xa3\xefN\x97]\xe1xg\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4830():
    float_0 = 977.82233
    list_0 = [float_0]
    str_0 = 'E!PRJvd8NNP1h"{|\t]'
    tuple_0 = (list_0, list_0, str_0)
    list_1 = [tuple_0, float_0, str_0]
    bool_0 = True
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4831():
    int_0 = -2046
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4832():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4833():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4834():
    str_0 = "c\riq"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4835():
    int_0 = -1391
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4836():
    str_0 = "8<2"
    bool_0 = True
    set_0 = {bool_0, str_0, str_0, str_0}
    bool_1 = False
    tuple_0 = (str_0, bool_0, set_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4837():
    bytes_0 = b"\xbdu"
    set_0 = {bytes_0, bytes_0}
    bool_0 = True
    float_0 = 1508.093394
    tuple_0 = (bytes_0, set_0, bool_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4838():
    str_0 = "x.sCy-"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4839():
    bytes_0 = b"\xcd\x7f\x88\xd9y\xee\xf0\xbb"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4840():
    float_0 = -2869.61
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4841():
    int_0 = 732
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4842():
    int_0 = 1577
    module_0.get_new_command(int_0, int_0)


def test_case_4843():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4844():
    str_0 = "J'c&!(zb>4>)s.y:9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4845():
    bytes_0 = b""
    float_0 = -503.0
    dict_0 = {bytes_0: float_0, bytes_0: float_0}
    list_0 = [dict_0, bytes_0]
    module_0.match(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4846():
    bytes_0 = b"\x95\xf0\xbb\x1fa\x8dh\xf3\xd7"
    set_0 = {bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4847():
    float_0 = -185.38
    module_0.match(float_0, float_0)


def test_case_4848():
    pass


def test_case_4849():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4850():
    bytes_0 = b"\x1a\x10\x99\x86c\xf1\x84Pmn\xa0\xdeUZ\xa0%\xe5\xa1t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4851():
    str_0 = "/ck xY4"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4852():
    bytes_0 = b";9\xb1Y\xbcG\x16\xaa\xa0\x81\x8b\xf1\xf3\x95Hu"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4853():
    int_0 = 2167
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4854():
    int_0 = 3623
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4855():
    int_0 = -546
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4856():
    bool_0 = False
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4857():
    bytes_0 = b"\x10\xef\x90\xfdv"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4858():
    int_0 = 2641
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4859():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    module_0.match(list_0, list_0)


def test_case_4860():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4861():
    int_0 = -1172
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4862():
    int_0 = -872
    list_0 = [int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4863():
    bytes_0 = b"i\x0eUct\xcc\xe7/\xbe\xd7(\xa2d\x11"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4864():
    bool_0 = True
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4865():
    int_0 = -1628
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4866():
    str_0 = "lw\x0br1"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4867():
    int_0 = 1707
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4868():
    object_0 = module_1.object()
    module_1.object(*object_0)


@pytest.mark.xfail(strict=True)
def test_case_4869():
    complex_0 = 1438.939216 - 1949.839j
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    module_0.get_new_command(dict_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4870():
    bytes_0 = b"\xe0\xf55\x1d\xd2-\xc3I"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_4871():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4872():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    bool_1 = False
    module_0.match(list_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4873():
    int_0 = 3019
    bool_0 = False
    module_0.match(int_0, bool_0)


def test_case_4874():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4875():
    bytes_0 = b"s\xff\xe8\x80n9r{\xc0\x08J"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4876():
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4877():
    str_0 = 'd~$5"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4878():
    complex_0 = 331.6685 + 2322.847028j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4879():
    bytes_0 = b"\x9c\x1b\xbb\xac\xf1\x14\xf3\xdeHC\x9c`\x83\x03\xdfi\x81\x06A"
    bool_0 = True
    float_0 = -1853.07049
    tuple_0 = (bytes_0, bool_0, float_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4880():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, list_0, bool_0]
    module_0.match(list_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4881():
    bytes_0 = b'[\r\x9e=\xfd\x9f"O\xc1\x88\x9e\x97J\xb0\x8c'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4882():
    tuple_0 = ()
    bool_0 = False
    dict_0 = {tuple_0: tuple_0, bool_0: tuple_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4883():
    bool_0 = False
    int_0 = -2782
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4884():
    bool_0 = False
    bytes_0 = b"\xdd\xf6\x89"
    set_0 = {bool_0, bool_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


def test_case_4885():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_4886():
    int_0 = -3035
    tuple_0 = (int_0, int_0)
    int_1 = 2068
    list_0 = [tuple_0, tuple_0, int_1]
    module_1.object(**list_0)


@pytest.mark.xfail(strict=True)
def test_case_4887():
    str_0 = "k\x0b7mk> \\YKuB+0ppl)"
    float_0 = 3643.9
    dict_0 = {str_0: float_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4888():
    list_0 = []
    tuple_0 = (list_0,)
    module_0.match(tuple_0, list_0)


def test_case_4889():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4890():
    float_0 = 3628.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4891():
    float_0 = -685.44
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4892():
    str_0 = "Ru]P?Q\t;`+waq|EN9"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4893():
    int_0 = -2433
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4894():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_4895():
    bytes_0 = b"\x86Y\xf3"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4896():
    int_0 = -1035
    module_1.object(**int_0)


@pytest.mark.xfail(strict=True)
def test_case_4897():
    float_0 = 813.0
    int_0 = -776
    tuple_0 = (float_0, int_0, float_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4898():
    float_0 = 737.79721
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4899():
    bytes_0 = b"M\x9anl\\?\x84L\x00"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4900():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4901():
    str_0 = "xlRwb!O0X"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_4902():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4903():
    complex_0 = 460.6 + 3476.34j
    float_0 = 185.1923
    set_0 = {float_0, complex_0}
    tuple_0 = (float_0, set_0)
    tuple_1 = (complex_0, tuple_0)
    module_0.match(tuple_1, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4904():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4905():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    tuple_1 = (tuple_0, dict_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4906():
    int_0 = -3485
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4907():
    str_0 = ']9A"Q_n[eiE_z'
    list_0 = [str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4908():
    float_0 = -1498.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4909():
    float_0 = -734.71762
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4910():
    object_0 = module_1.object()
    int_0 = -4061
    list_0 = [object_0, object_0, object_0, int_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4911():
    float_0 = 1035.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4912():
    int_0 = -1277
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4913():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    list_1 = [bool_0, list_0, bool_0, bool_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_4914():
    str_0 = "{#-(gb"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4915():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4916():
    complex_0 = 1739.5229 - 1407.850877j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    list_0 = [set_0, complex_0, set_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4917():
    int_0 = 795
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4918():
    bytes_0 = b"K.z\xb4\x80\xabM\x0bg\xa5\t)\x0e\xbdWw"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4919():
    int_0 = 2038
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4920():
    str_0 = "q"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4921():
    bytes_0 = b"\x13\x18*@\xe9\x15|\xa0\xb3|\xcb\xeb\xf4Tf\xac"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4922():
    set_0 = set()
    list_0 = [set_0, set_0]
    float_0 = -1547.0
    tuple_0 = (set_0, list_0, float_0)
    module_0.match(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4923():
    str_0 = "!$\n=8G4lFRgH[in2"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4924():
    float_0 = 3349.6684
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4925():
    str_0 = 'S33FL"'
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4926():
    tuple_0 = ()
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4927():
    bytes_0 = b'Zm\xb6\xf9\x89M\x15q_\x15\x04t#\xc1\x9b"\xa9'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4928():
    list_0 = []
    object_0 = module_1.object(*list_0)
    list_1 = [object_0]
    module_0.get_new_command(list_1, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4929():
    bytes_0 = b"\xba}\xf7\x12\xe9"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4930():
    str_0 = "@K%9g"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4931():
    int_0 = 1996
    set_0 = {int_0, int_0, int_0, int_0}
    tuple_0 = (set_0,)
    dict_0 = {int_0: int_0, int_0: int_0, int_0: tuple_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4932():
    bytes_0 = b"4%\xe1\xb9y"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4933():
    bool_0 = True
    bool_1 = False
    set_0 = {bool_0, bool_0, bool_0, bool_1}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4934():
    bool_0 = True
    int_0 = 3635
    tuple_0 = (bool_0, bool_0)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, int_0: int_0, int_0: tuple_0}
    list_0 = [dict_0, tuple_0, int_0, tuple_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4935():
    str_0 = "Vb KtqG[ }^n|L2E4f"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4936():
    str_0 = "](1Lf0tq'saBn' EZA"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4937():
    bytes_0 = b'\xe7\xca"y\xf1t_*f\x1dP\x05'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4938():
    str_0 = "O(/d(#ec@81Tg"
    str_1 = "mtVhQY#A0K'"
    bool_0 = False
    str_2 = "m4*8?F1"
    dict_0 = {str_0: str_0, str_1: bool_0, str_2: str_2}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4939():
    bytes_0 = b"\xb7\x00\xa6\xc0]}\x7f\x1chTo\xa7k\x14/[3\x98"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4940():
    int_0 = -2044
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4941():
    complex_0 = -378.513 - 4346.124j
    module_0.get_new_command(complex_0, complex_0)


def test_case_4942():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4943():
    str_0 = "?/.xj-1)[ifu6HJ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4944():
    bytes_0 = b"\xad\x13\xe1J"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4945():
    str_0 = "M1Ylb\nf@~8w=rsb%t"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4946():
    str_0 = "'\\GR$<^4c\\0"
    int_0 = -2247
    module_0.get_new_command(str_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4947():
    str_0 = 'q"&YTVJi`j3s_SC%m4'
    list_0 = [str_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4948():
    complex_0 = 922.76975 + 1674.94j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4949():
    bytes_0 = b"\xec\xca2\x9b\x9d6\xc6\xbf\x06\xeb\xa5\x01]"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(bytes_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4950():
    int_0 = -716
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4951():
    int_0 = -1596
    object_0 = module_1.object()
    module_0.match(int_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_4952():
    bytes_0 = b"\xa8`"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4953():
    str_0 = "Vnz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4954():
    bytes_0 = b"i\x18j\xd6+}XN\x9c\xae\xfcx\xf7\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4955():
    bytes_0 = b"\x1c*\xd5\xfc^"
    list_0 = [bytes_0, bytes_0]
    str_0 = "("
    dict_0 = {str_0: str_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4956():
    int_0 = -812
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_4957():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4958():
    bool_0 = True
    bytes_0 = b"&\x14\xc0"
    module_0.match(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4959():
    bytes_0 = b"\xc3\xd9s\x93a*\xf4\x15C\xbdz,Yj"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4960():
    str_0 = "z\\IV2NW:"
    str_1 = "(3:B/'"
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4961():
    float_0 = -872.071
    list_0 = [float_0, float_0, float_0]
    list_1 = [list_0, float_0]
    str_0 = "7G0"
    tuple_0 = (list_1, float_0, str_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4962():
    bool_0 = False
    int_0 = -1415
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4963():
    int_0 = 2016
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4964():
    bool_0 = False
    bool_1 = False
    dict_0 = {bool_0: bool_1}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4965():
    bytes_0 = b"\xc4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4966():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_4967():
    str_0 = "IrBVh{At-"
    int_0 = 264
    set_0 = {str_0, int_0}
    bool_0 = False
    dict_0 = {str_0: set_0, str_0: set_0, str_0: bool_0, str_0: int_0}
    module_1.object(**dict_0)


def test_case_4968():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4969():
    bytes_0 = b"\xd6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4970():
    bytes_0 = b"\xcc\xefc*\xa8"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4971():
    float_0 = 592.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4972():
    str_0 = "WM,~\x0c`STS(\x0b'.bYK*"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4973():
    int_0 = 1414
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4974():
    bytes_0 = b"\x0e4\xfe\x06\xe4\xd7\xa0uOq\x11\x9cA\r\xc7\xc2_\xd6"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4975():
    none_type_0 = None
    module_1.object(**none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4976():
    complex_0 = -1824.694929 - 483j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_4977():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_4978():
    float_0 = -1069.0985
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4979():
    int_0 = -1559
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4980():
    bytes_0 = b"\xb0\xfe\xe1w&<Z\xc6\x93"
    int_0 = 1134
    tuple_0 = (bytes_0, int_0, bytes_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4981():
    none_type_0 = None
    str_0 = "CXr5d?"
    module_0.get_new_command(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4982():
    bytes_0 = b"\x8d\xc4\xf6Y\xb9\x13Y"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4983():
    str_0 = "bJ$J2u\x0b\\"
    dict_0 = {str_0: str_0}
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4984():
    bytes_0 = b""
    module_1.object(**bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4985():
    int_0 = -1082
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4986():
    bytes_0 = b"\xd3\x9e\xcd"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_4987():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4988():
    none_type_0 = None
    bytes_0 = b"\xd2\xec\xd8"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4989():
    bool_0 = True
    int_0 = -1054
    set_0 = {bool_0, bool_0, int_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_4990():
    complex_0 = 684.781 - 1833.334j
    dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4991():
    bytes_0 = b"g"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4992():
    int_0 = -563
    module_0.match(int_0, int_0)


def test_case_4993():
    pass


@pytest.mark.xfail(strict=True)
def test_case_4994():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    list_0 = [dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_4995():
    float_0 = -3847.3
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4996():
    str_0 = "TQ?Q"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_4997():
    float_0 = 120.16942
    list_0 = [float_0, float_0, float_0]
    bool_0 = True
    tuple_0 = ()
    tuple_1 = (list_0, bool_0, bool_0, tuple_0)
    module_0.get_new_command(tuple_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4998():
    int_0 = 116
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4999():
    str_0 = "Ye^_<"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5000():
    int_0 = -1713
    str_0 = "JF:KpA\x0bAYU%,"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5001():
    int_0 = -523
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5002():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5003():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    module_0.get_new_command(list_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5004():
    bool_0 = False
    set_0 = {bool_0, bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5005():
    str_0 = '#wK?GE39%"+gr\n6R>'
    set_0 = {str_0, str_0, str_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5006():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5007():
    str_0 = "P"
    bool_0 = True
    module_0.get_new_command(str_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5008():
    int_0 = 867
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5009():
    float_0 = -2824.1227
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5010():
    complex_0 = -797.8 + 610.083j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5011():
    dict_0 = {}
    str_0 = "^l obN8xP[v(\x0bf\tH+l{"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5012():
    int_0 = 3191
    set_0 = {int_0, int_0}
    tuple_0 = (int_0, set_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5013():
    bytes_0 = b")\xd1\x1c\xdb\x1d\xc5\x99P\xb4\x10u\xa8\x89A\\a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5014():
    int_0 = -702
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5015():
    none_type_0 = None
    bytes_0 = b"\xd6\xe6\x9dN"
    bytes_1 = b"\xe1\x82\xa8{\xc3-\xaa,z\xe3\x8ex.O\x12\xfb\xff\xaa\xf6"
    int_0 = -1606
    tuple_0 = (none_type_0, bytes_1, int_0)
    list_0 = [bytes_1, int_0]
    tuple_1 = (bytes_0, tuple_0, list_0)
    module_0.get_new_command(none_type_0, tuple_1)


def test_case_5016():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5017():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5018():
    str_0 = "P.k`y"
    tuple_0 = (str_0,)
    dict_0 = {tuple_0: tuple_0, tuple_0: str_0}
    module_0.match(dict_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5019():
    float_0 = -2136.691
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5020():
    complex_0 = -729.51 + 150j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5021():
    bytes_0 = b"b\xb4\x9fe\xf2T\x0c\x95\x83\x81V"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5022():
    bytes_0 = b"\\\x08\x0e\xee_\x8c\xcf\xfb"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5023():
    int_0 = 1872
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5024():
    object_0 = module_1.object()
    str_0 = "Fe$\tllgAE"
    tuple_0 = (object_0, str_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5025():
    bytes_0 = b"H&\x01"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5026():
    bytes_0 = b"\xdd\x8c\xf6\xaeQd\xa9n\xdb_\tg\xde\xaf\xa5\x01"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5027():
    int_0 = 1028
    module_0.match(int_0, int_0)


def test_case_5028():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5029():
    bytes_0 = b"r\x93\xda\x03\x19\xb6\xb8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5030():
    str_0 = "E>XJfKu\x0b|uVWU9Wuf"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5031():
    int_0 = -1030
    str_0 = "M^P&4YU;"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5032():
    complex_0 = -933.6782 - 157.9j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


def test_case_5033():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5034():
    int_0 = -747
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5035():
    int_0 = 629
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5036():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_5037():
    str_0 = 'Rx|"%gG!\nrSh]'
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5038():
    complex_0 = 1701.143143 + 2527.435j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5039():
    int_0 = 2163
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5040():
    int_0 = -3601
    module_0.get_new_command(int_0, int_0)


def test_case_5041():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5042():
    str_0 = "\tj{= #"
    dict_0 = {str_0: str_0}
    int_0 = -1260
    tuple_0 = (dict_0, int_0, dict_0, str_0)
    list_0 = [tuple_0, str_0, dict_0, tuple_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5043():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5044():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5045():
    bytes_0 = b"n"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5046():
    str_0 = "k'&_J2%3&"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5047():
    int_0 = -1744
    set_0 = {int_0}
    module_0.get_new_command(set_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5048():
    bytes_0 = b"\x03\xcd\x95^\xf2!F\x1e\xd8T:\xe8\xd6\xd9"
    str_0 = "\\10nLsC%)&hRV98n"
    bool_0 = False
    tuple_0 = (bytes_0, str_0, bool_0)
    module_0.match(tuple_0, bytes_0)


def test_case_5049():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5050():
    str_0 = "n["
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5051():
    str_0 = "!x.A8HbO"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5052():
    float_0 = 1897.2784
    bytes_0 = b"\xd0\xb3\rH\x97\xa5\x1b#"
    set_0 = {bytes_0, float_0, float_0, float_0}
    list_0 = [float_0, float_0, set_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5053():
    int_0 = -629
    dict_0 = {int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


def test_case_5054():
    pass


def test_case_5055():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5056():
    bytes_0 = b""
    dict_0 = {bytes_0: bytes_0}
    tuple_0 = (dict_0, dict_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5057():
    int_0 = 788
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5058():
    float_0 = -3641.0
    dict_0 = {float_0: float_0, float_0: float_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5059():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    list_1 = [list_0, list_0, bool_0, list_0]
    module_1.object(*list_1)


@pytest.mark.xfail(strict=True)
def test_case_5060():
    bool_0 = True
    object_0 = module_1.object()
    module_0.match(bool_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5061():
    bool_0 = False
    int_0 = -29
    bool_1 = True
    tuple_0 = (bool_0, int_0, bool_0, bool_1)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5062():
    str_0 = "p\x0c"
    set_0 = {str_0}
    tuple_0 = (set_0,)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5063():
    float_0 = -1321.0192
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5064():
    str_0 = "Jv"
    str_1 = "U 0H2!<q@Q<dy/"
    bool_0 = False
    tuple_0 = (str_0, str_1, bool_0, bool_0)
    module_0.get_new_command(tuple_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5065():
    int_0 = 560
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5066():
    bytes_0 = b"\xf4\xcf]@\r\x01\xe2\x03\xd1\xe4\xf1\x15:\xdd\xa4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5067():
    str_0 = "?!Z^*J'!==e\rY\\\t^VGAW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5068():
    int_0 = 218
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5069():
    bool_0 = True
    list_0 = [bool_0]
    bytes_0 = b"zYU{\xd1"
    bytes_1 = b"\xc0\xac-\xb7\x10"
    str_0 = "CzRGG3P)IMqY,"
    float_0 = 2478.63187
    tuple_0 = (float_0,)
    tuple_1 = (bytes_0, bytes_1, str_0, tuple_0)
    dict_0 = {bytes_0: tuple_0, str_0: bytes_0, str_0: bool_0, str_0: bytes_1}
    tuple_2 = (list_0, tuple_1, dict_0)
    none_type_0 = None
    module_0.match(tuple_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5070():
    set_0 = set()
    str_0 = ",g\n"
    tuple_0 = (set_0, str_0)
    list_0 = [tuple_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5071():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5072():
    int_0 = -103
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5073():
    set_0 = set()
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5074():
    tuple_0 = ()
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5075():
    int_0 = 849
    list_0 = [int_0, int_0]
    list_1 = [list_0]
    tuple_0 = (list_1, int_0, int_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5076():
    bytes_0 = b"\x1221c\xf8\xbb\xc4%\xf7\xc6\x13\xd7\x86\xeb\x02\x03\xb5\x02"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5077():
    bytes_0 = b"\x96"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5078():
    bool_0 = False
    bool_1 = True
    module_0.get_new_command(bool_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5079():
    int_0 = -1975
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


def test_case_5080():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5081():
    str_0 = "-Eq}ZKH<\ny>T"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5082():
    int_0 = -6033
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5083():
    bool_0 = False
    bool_1 = True
    tuple_0 = (bool_0, bool_1)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5084():
    int_0 = -1808
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5085():
    float_0 = 1220.0
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5086():
    tuple_0 = ()
    str_0 = "> "
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5087():
    none_type_0 = None
    int_0 = 1115
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5088():
    str_0 = "%\\q;x7S[kI0bP1iywTT "
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5089():
    bytes_0 = b"\xce~\xec\xb0"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5090():
    none_type_0 = None
    set_0 = set()
    module_0.match(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5091():
    none_type_0 = None
    bytes_0 = b"\x85U-\xcf\xe5\xae\x10S.\x03\xc6\xf2\x08C"
    module_0.match(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5092():
    bool_0 = True
    set_0 = {bool_0, bool_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5093():
    str_0 = "A("
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5094():
    bytes_0 = b"\x97\xa8\x14\xd4I\x83q="
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5095():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5096():
    int_0 = 4348
    float_0 = 599.0
    dict_0 = {int_0: int_0, int_0: float_0, float_0: float_0, int_0: float_0}
    module_0.match(dict_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5097():
    bool_0 = False
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5098():
    bytes_0 = b""
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5099():
    int_0 = 1089
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5100():
    float_0 = 1114.43
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5101():
    float_0 = 1000.142
    module_0.match(float_0, float_0)


def test_case_5102():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5103():
    bytes_0 = b"VW\xcd%\x9bTM\xa6<\xa3Gp\xb2\x12?\x9f.\xda\xd7"
    set_0 = set()
    dict_0 = {bytes_0: set_0, bytes_0: set_0}
    str_0 = "\nk{a:Fcdf|Q&"
    tuple_0 = (dict_0, set_0, str_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5104():
    bytes_0 = b"D;*\xe1\xd1\x87\x7fG\x88\x03\xe7\x87@\x98;\x91"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5105():
    bytes_0 = b"i\xd6h1Y`_%\x01\xef\xa4\xbe"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5106():
    int_0 = 3675
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5107():
    bytes_0 = b"\r]\xb5\xc0\xabP\xd1\x90\xb23Z\x9f\xd2G\xcf\xcbyt\xc4\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5108():
    float_0 = 82.0
    list_0 = [float_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5109():
    int_0 = 965
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5110():
    bytes_0 = b"\x9b\x80\xc6B\x1ax\x95\x98\x15\xca\x8cj\xad"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5111():
    bool_0 = False
    list_0 = [bool_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5112():
    float_0 = -324.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5113():
    float_0 = 413.9045
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5114():
    str_0 = "M=GLEtDWI&rG;d {xI"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5115():
    str_0 = "55'`+\x0cLKr!Oz\"h%fi\x0bC"
    bytes_0 = b"\xbd\xdc\xf8y\xee@\xc6l\x80\x16\xee\xc7\x85_\x03\x9b6\x03\xccf"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, bytes_0: str_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5116():
    int_0 = 622
    list_0 = []
    bool_0 = False
    tuple_0 = (int_0, int_0, list_0, bool_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5117():
    str_0 = "fu)SNw\n92bQ>Z@c(\n&<"
    set_0 = {str_0, str_0, str_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5118():
    str_0 = "J:'C!U8Y"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5119():
    int_0 = -2479
    list_0 = [int_0, int_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5120():
    str_0 = 'H"g]!Xry]G"rW0WVq@b'
    bool_0 = False
    list_0 = [str_0, str_0, str_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5121():
    none_type_0 = None
    set_0 = set()
    bytes_0 = b""
    tuple_0 = (set_0, set_0, bytes_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5122():
    int_0 = -2281
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5123():
    bool_0 = True
    bool_1 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1, bool_1: bool_1}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5124():
    str_0 = ",u=wy+\t"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5125():
    str_0 = "=qCJO"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5126():
    int_0 = 234
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5127():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


def test_case_5128():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5129():
    float_0 = 2357.7
    dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
    tuple_0 = (float_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5130():
    str_0 = "R@"
    object_0 = module_1.object()
    module_0.match(str_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5131():
    float_0 = 540.585029
    bytes_0 = b"\x86\xde\xe7\x8eQ6\xae\x81\xfbd[1#\xca,\xa4O"
    module_0.get_new_command(float_0, bytes_0)


def test_case_5132():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5133():
    int_0 = 1003
    dict_0 = {int_0: int_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5134():
    bool_0 = False
    set_0 = {bool_0}
    none_type_0 = None
    module_0.match(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5135():
    str_0 = "j=-yn+{U\\lp'[q*/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5136():
    tuple_0 = ()
    tuple_1 = ()
    str_0 = "[df-[]C\tO#LmX:9"
    dict_0 = {tuple_0: tuple_1, tuple_1: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5137():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5138():
    dict_0 = {}
    object_0 = module_1.object()
    set_0 = {object_0}
    module_0.match(dict_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5139():
    int_0 = -260
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5140():
    bytes_0 = b"\xfa\x95"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5141():
    str_0 = "nOK"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5142():
    int_0 = -848
    int_1 = 1899
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5143():
    float_0 = -596.252678
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5144():
    bytes_0 = b"\x1dJ\xb9H0\xed %V\xedU]\xc6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5145():
    none_type_0 = None
    module_0.get_new_command(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5146():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5147():
    str_0 = "RWhBj "
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5148():
    float_0 = 1505.436
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5149():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5150():
    float_0 = -2623.13581
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5151():
    bytes_0 = b"w\x84\xc1\x9cA[&\xd4\xcd\xc8\xfe\xbe"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5152():
    float_0 = 1523.0
    module_0.get_new_command(float_0, float_0)


def test_case_5153():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5154():
    int_0 = -1533
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5155():
    float_0 = -1168.4509
    tuple_0 = (float_0, float_0)
    none_type_0 = None
    module_0.match(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5156():
    int_0 = -490
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5157():
    complex_0 = 2744.619 - 1180.8j
    list_0 = [complex_0, complex_0, complex_0]
    tuple_0 = (complex_0, list_0)
    module_0.get_new_command(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5158():
    float_0 = -1296.35
    float_1 = 3036.0
    set_0 = {float_0, float_0, float_0, float_1}
    module_0.match(set_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_5159():
    dict_0 = {}
    list_0 = [dict_0]
    bytes_0 = b"\xd7o\x10\xb0\xbc`"
    tuple_0 = (dict_0, list_0, bytes_0)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5160():
    float_0 = 540.626569
    tuple_0 = (float_0,)
    dict_0 = {tuple_0: float_0, tuple_0: tuple_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5161():
    bytes_0 = b"\xba\xed"
    bytes_1 = b"\x81b\xb0\x06|\x10\x13\x15.-l\xf0"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_1}
    list_0 = [bytes_0, bytes_0, dict_0, bytes_0]
    module_0.match(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5162():
    str_0 = "bB~2:Y$"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5163():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5164():
    int_0 = 2411
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5165():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5166():
    bytes_0 = b"\xddY\xd7J7\xf8\xb3&,\x15\xd8\xe9\xf6*"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5167():
    int_0 = -982
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5168():
    int_0 = -2074
    str_0 = "^'\\YnsD9L]szY"
    list_0 = [str_0]
    str_1 = "/zI\x0bdN^-Jb?)[uv"
    object_0 = module_1.object()
    dict_0 = {str_0: list_0, str_1: object_0}
    module_1.object(*int_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5169():
    str_0 = "xa<f[]C>ksul<"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5170():
    int_0 = 397
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5171():
    str_0 = "9W,]4C6Xp\r6"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


def test_case_5172():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5173():
    object_0 = module_1.object()
    bytes_0 = b"\xc4\xc3LA"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(object_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5174():
    float_0 = 1829.39783
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5175():
    int_0 = -275
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5176():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5177():
    int_0 = 546
    bool_0 = False
    dict_0 = {int_0: int_0, int_0: int_0, bool_0: bool_0, int_0: bool_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5178():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    module_0.get_new_command(set_0, bool_0)


def test_case_5179():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5180():
    bytes_0 = b"\xfc"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5181():
    str_0 = "\rzA^G1YSfD\\}io"
    tuple_0 = ()
    list_0 = [str_0, str_0, tuple_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5182():
    int_0 = 2021
    str_0 = "]"
    set_0 = {int_0, int_0, str_0, str_0}
    tuple_0 = (int_0, set_0)
    bool_0 = False
    tuple_1 = (tuple_0, int_0, bool_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5183():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5184():
    bytes_0 = b"\xa2\xe2\xcd\xde"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5185():
    none_type_0 = None
    float_0 = 2998.47
    set_0 = {none_type_0, float_0}
    module_0.match(none_type_0, set_0)


def test_case_5186():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5187():
    int_0 = -2211
    module_0.get_new_command(int_0, int_0)


def test_case_5188():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5189():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.get_new_command(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5190():
    set_0 = set()
    list_0 = [set_0, set_0, set_0]
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5191():
    int_0 = -3252
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5192():
    int_0 = 2552
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5193():
    str_0 = '^lEzF)"jHp'
    set_0 = {str_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5194():
    bytes_0 = b"\x03\xdf\xb6\x86\x91\x06qM\x88o\xa0\xeb&\x1e\xfb\xd0/\xc9a\xb7"
    tuple_0 = (bytes_0, bytes_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5195():
    bytes_0 = b"\x85\xd5\xc2\xc6#\xf4\xed\xfc\xd7H"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5196():
    str_0 = 'H7BRnv("qCN.=2tz\tg'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5197():
    str_0 = "(h;"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5198():
    none_type_0 = None
    float_0 = 357.393089
    tuple_0 = (float_0,)
    module_0.match(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5199():
    int_0 = 125
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5200():
    bytes_0 = b",\xd7f\xc1\x8bZ\x9d\x18`Hy\x8ee>~h\xf0h"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5201():
    str_0 = "I"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5202():
    str_0 = ";b]^@$` ANnGpT\\"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5203():
    int_0 = -1479
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5204():
    int_0 = -6
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5205():
    float_0 = -653.179
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5206():
    bytes_0 = b"\xd1\xdc\xdf\x14d\x80\xf0e6ctn"
    str_0 = "isGlZefb"
    bool_0 = True
    tuple_0 = (bytes_0, str_0, str_0, bool_0)
    module_0.match(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5207():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5208():
    int_0 = 3567
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5209():
    int_0 = 156
    str_0 = "31"
    module_0.get_new_command(int_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5210():
    float_0 = -2220.874
    dict_0 = {float_0: float_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5211():
    int_0 = 545
    list_0 = [int_0, int_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5212():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5213():
    int_0 = -1999
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5214():
    str_0 = 'n%\x0cL=3S:ps4\n~#"2E!'
    str_1 = "7TUU\ryS<bO'\"8!U\t^<pK"
    module_0.get_new_command(str_0, str_1)


@pytest.mark.xfail(strict=True)
def test_case_5215():
    bytes_0 = b"\x8b\x85\xe4\xac\x92\x11aiC\xc7\xab\xc2\x13\xee3\xebQ\xa7\xf6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5216():
    str_0 = "^(8X/?*AP9*"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5217():
    int_0 = 4433
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5218():
    bool_0 = True
    none_type_0 = None
    module_0.match(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5219():
    bool_0 = True
    str_0 = "vX~GHO>62Ah]j~%"
    tuple_0 = (bool_0, str_0)
    tuple_1 = (tuple_0, str_0)
    tuple_2 = (bool_0, bool_0, tuple_1)
    bool_1 = True
    dict_0 = {tuple_2: tuple_2, bool_0: bool_1}
    module_0.get_new_command(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5220():
    bytes_0 = b"\x03\x97\x94\x87\xd7\xfa"
    bool_0 = False
    dict_0 = {bool_0: bool_0, bytes_0: bytes_0}
    tuple_0 = (bytes_0, bool_0, dict_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5221():
    str_0 = "JO<\t2,k;pwwnB[="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5222():
    int_0 = 1462
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5223():
    int_0 = 2503
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5224():
    int_0 = -3024
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5225():
    str_0 = "M=p}"
    bool_0 = True
    set_0 = set()
    tuple_0 = (str_0, bool_0, set_0)
    list_0 = [tuple_0, bool_0, tuple_0, str_0]
    list_1 = [list_0, bool_0, tuple_0, str_0]
    module_0.match(list_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5226():
    str_0 = ". @D)z"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5227():
    bytes_0 = b"Bh\xdb\xa0\xe5\x06\xd8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5228():
    str_0 = "1(P?]'Vn*3>4L@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5229():
    bytes_0 = b"[\xbdQ\x0b"
    set_0 = {bytes_0, bytes_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5230():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.get_new_command(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5231():
    none_type_0 = None
    float_0 = -178.0
    bool_0 = False
    bytes_0 = b"\xe1?\xab5\x1f"
    tuple_0 = (float_0, bool_0, bytes_0)
    module_0.get_new_command(none_type_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5232():
    float_0 = 11.895
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5233():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    module_0.match(dict_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5234():
    str_0 = "vN&p"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5235():
    bytes_0 = b"Vsa\x18K\xad\xc8\x06"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5236():
    bytes_0 = b"p\xa7\x1b\xbc"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5237():
    float_0 = -1152.75119
    set_0 = {float_0, float_0}
    module_0.match(set_0, float_0)


def test_case_5238():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5239():
    bytes_0 = b"r\x9f\x83\xb5j\xf8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5240():
    int_0 = -1865
    int_1 = -2532
    module_0.match(int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_5241():
    bytes_0 = b"\xe2\xff\xba0\xf1O\xd9\xa1s\xf5\t"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5242():
    str_0 = "W{S|"
    str_1 = "nu\x0ck{Q=Ayz%t"
    str_2 = "T.W"
    dict_0 = {str_1: str_2}
    dict_1 = {str_0: str_0, str_1: dict_0, str_0: dict_0}
    module_1.object(**dict_1)


@pytest.mark.xfail(strict=True)
def test_case_5243():
    str_0 = "~#J-6E3:z1/B\x0c!,To{S"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5244():
    set_0 = set()
    list_0 = [set_0, set_0, set_0, set_0]
    module_0.match(list_0, list_0)


def test_case_5245():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5246():
    int_0 = 2159
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5247():
    complex_0 = 2118 + 1918.884j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5248():
    bytes_0 = b"\xae*A\xact\xf3\x07"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5249():
    str_0 = "7BIb7-#G0pVz"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5250():
    bytes_0 = b'\x90cD|\x01"\xa9("\xa4_\x15\x01\xeb'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5251():
    int_0 = -883
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5252():
    int_0 = 330
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5253():
    int_0 = 2162
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5254():
    bytes_0 = b"\xe8\xd6\xda\x80b\x9b\x18b\xa6\xa6\x80*\xd4"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5255():
    complex_0 = -4264.039 + 1771.5201j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5256():
    complex_0 = -431.34 - 4760.66166j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5257():
    str_0 = ">\n"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5258():
    float_0 = -365.5537
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5259():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5260():
    dict_0 = {}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5261():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5262():
    complex_0 = -835.1 + 1968.5j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5263():
    float_0 = -568.569
    bool_0 = False
    tuple_0 = (float_0, bool_0)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5264():
    bytes_0 = b"_x\xe3\xbc\x7fv\x1a"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5265():
    set_0 = set()
    tuple_0 = ()
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5266():
    str_0 = 'H_Rnt"['
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5267():
    bool_0 = True
    list_0 = [bool_0]
    list_1 = [list_0]
    int_0 = 3485
    module_0.match(list_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5268():
    int_0 = -1702
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5269():
    str_0 = "}_zS4=pyt"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5270():
    int_0 = 987
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5271():
    float_0 = -3128.0
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5272():
    str_0 = ".!`),Bt,bT*Tv"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5273():
    bytes_0 = b"eH\x14\xa8\xa5\xdc-1'oq(&\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5274():
    int_0 = -3901
    module_0.get_new_command(int_0, int_0)


def test_case_5275():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5276():
    bool_0 = True
    int_0 = -990
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (int_0, set_0)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5277():
    int_0 = 923
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5278():
    bytes_0 = b"K\xfb\x93\xb1\xce\xe1\xfd\xaap\xb4\xa6\x18\\\x97\xdd\xce\xe8\x9e\xce"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5279():
    str_0 = "Qg\t<'NP\\&&h6tc>ECLM"
    list_0 = [str_0, str_0, str_0, str_0]
    complex_0 = -608.162 - 177.312j
    module_0.get_new_command(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5280():
    float_0 = 110.9
    bool_0 = True
    module_0.match(float_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5281():
    str_0 = "g|=96bc#l6"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5282():
    str_0 = 's<X6cRD"6-*lP+\r'
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5283():
    float_0 = 1222.273
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5284():
    str_0 = "6~n+)NUW4&2gsc$,)"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5285():
    int_0 = -1994
    list_0 = [int_0, int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5286():
    none_type_0 = None
    float_0 = -2099.8
    module_0.match(none_type_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5287():
    str_0 = "oU\\\t\n\x0b}F,'\\OVS%Iy<\\a"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


def test_case_5288():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5289():
    float_0 = 794.2
    none_type_0 = None
    module_0.get_new_command(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5290():
    float_0 = 318.987171
    bytes_0 = b"\tDZ\x13\x97\x89s!\xd9\x94\xc1\xa9\xa4\xa9@O\xc6\xddY\xe2"
    set_0 = {bytes_0}
    str_0 = "j&\\"
    bool_0 = True
    tuple_0 = (float_0, set_0, str_0, bool_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5291():
    str_0 = "U[["
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5292():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5293():
    bytes_0 = b"\xf8\xef\x18f\xe5\xb3.\x8d\x84:K\x92jDs"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5294():
    str_0 = "3xb\nsic+\x0c?)"
    tuple_0 = (str_0,)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5295():
    bool_0 = False
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5296():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    str_0 = "yv5"
    bool_1 = False
    list_0 = [bool_1, str_0, set_0, bool_0]
    tuple_0 = (str_0, bool_0, bool_0, list_0)
    tuple_1 = (set_0, tuple_0, tuple_0)
    module_0.match(tuple_1, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5297():
    str_0 = "b.ACy"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5298():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5299():
    bytes_0 = b"\xd1\xf3\xdc\xfa\x89"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5300():
    bytes_0 = b"\xf3)"
    bytes_1 = b"\xde\xbaKP\x11=\xa9\xc0\x12p"
    bool_0 = False
    tuple_0 = (bytes_0, bytes_1, bytes_1, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5301():
    bytes_0 = b'\xcf\x8ca\x16\xf5\x1f\xce|\xc7\xe2\xaf\x8f\xc5\x0b\xe3w"'
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5302():
    int_0 = -3392
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5303():
    str_0 = "Foag-A-Fx{_"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5304():
    int_0 = 3942
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5305():
    int_0 = -2654
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5306():
    bytes_0 = b"-\xf5\xef\x9a\x17\x07\xc0 \xc2\x03d"
    module_0.match(bytes_0, bytes_0)


def test_case_5307():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5308():
    str_0 = '~A{g@-\r">2\\|pPefwa@$'
    str_1 = ",p"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5309():
    bytes_0 = b"\r\xa9\xd7/`\xf6\xd7\xda\xceI\x1d(O\xca"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5310():
    int_0 = 318
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5311():
    complex_0 = -1448.1 + 208.1359j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5312():
    list_0 = []
    object_0 = module_1.object()
    module_0.match(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5313():
    int_0 = -1769
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5314():
    float_0 = 3819.0
    bytes_0 = b"`\xc7%&\x08\x8c,\x89\xba\xb3\x84\x1a2\x00\x9f&"
    module_0.get_new_command(float_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5315():
    str_0 = "B>\tg]T$h3.mi\x0c*("
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5316():
    str_0 = "d!\\+t(|)x=(_"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5317():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0, none_type_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5318():
    bytes_0 = b"\xa2\x88f\x92\xa98\r\xeb\xb8\x19\x1b\xf9V."
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5319():
    str_0 = "vU+$\x0c[{&"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5320():
    str_0 = "!J[)nrqx1Sg&|I"
    none_type_0 = None
    dict_0 = {str_0: none_type_0, str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5321():
    float_0 = 3268.84
    dict_0 = {float_0: float_0}
    bytes_0 = b"\x85kgy\x08"
    tuple_0 = (dict_0, bytes_0)
    bool_0 = False
    str_0 = "y\x0bG8/V1$F={7n#"
    tuple_1 = (tuple_0, bool_0, str_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5322():
    str_0 = "prWhIZD0apC4z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5323():
    bool_0 = False
    tuple_0 = (bool_0, bool_0, bool_0, bool_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5324():
    bytes_0 = b";\tA\x00\xa7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5325():
    str_0 = "Y^-v[:@W\x0bt34."
    module_0.get_new_command(str_0, str_0)


def test_case_5326():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5327():
    str_0 = "\x0bBQf|"
    set_0 = {str_0}
    list_0 = [set_0]
    tuple_0 = (set_0, list_0, set_0, str_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: tuple_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5328():
    str_0 = "\x0b\\G)M0{\x0cy&4;lpy"
    str_1 = "[h{H8c8OQfK2LYD="
    str_2 = "b/O"
    str_3 = ":SOI,mW(69@[E;y y"
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: str_0}
    module_1.object(**dict_0)


def test_case_5329():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5330():
    complex_0 = 986 - 683.4215j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5331():
    str_0 = "dR1uUuo\nW+g+^?4Hc\\&5"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5332():
    none_type_0 = None
    str_0 = "}P|Qb"
    module_0.match(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5333():
    int_0 = -3773
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5334():
    complex_0 = -4926.538101 + 2289.1j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5335():
    float_0 = 689.1425
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5336():
    complex_0 = -422.23 - 989.280603j
    set_0 = {complex_0, complex_0, complex_0, complex_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5337():
    int_0 = -626
    tuple_0 = (int_0,)
    bytes_0 = b"\xc6\xdf2\x19\xfc\x8cZ\x04\xc5\n\x96\xcb\x08>\xc4F\xea\x1f"
    module_0.match(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5338():
    int_0 = 1672
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5339():
    complex_0 = 2064.2974 - 1175j
    module_0.match(complex_0, complex_0)


def test_case_5340():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5341():
    int_0 = -581
    str_0 = "=7qB6M\\"
    list_0 = [int_0, int_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5342():
    bytes_0 = b"\xbb\xc8\xe4\xadrW\x03M\xdd\x1c\xe5-4:Jn"
    bool_0 = False
    set_0 = {bytes_0, bytes_0, bool_0, bytes_0}
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5343():
    list_0 = []
    object_0 = module_1.object(*list_0)
    none_type_0 = None
    module_0.match(object_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5344():
    bytes_0 = b"Uu\x04\xe0<\xd2\n\xda8"
    bool_0 = True
    tuple_0 = (bool_0,)
    set_0 = {bytes_0, bool_0}
    tuple_1 = (set_0,)
    dict_0 = {tuple_0: tuple_1}
    module_0.get_new_command(bytes_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5345():
    float_0 = 1173.6
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5346():
    str_0 = ".EqQ';E;FbWq"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5347():
    str_0 = "+{X\x0cc3dm_0do0M"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5348():
    int_0 = -1862
    tuple_0 = (int_0, int_0, int_0, int_0)
    module_0.get_new_command(tuple_0, tuple_0)


def test_case_5349():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5350():
    float_0 = -3301.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5351():
    bytes_0 = b"\xc2\x0e\xec{\xf2\xa1r\xca,\xd4\xfe\xb7"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5352():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    module_0.match(dict_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5353():
    bytes_0 = b"D\x15\x08\x9d\xa1J\xf1\x16\r"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5354():
    str_0 = '"=Hx>\r'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5355():
    int_0 = 2494
    module_0.get_new_command(int_0, int_0)


def test_case_5356():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5357():
    bool_0 = True
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_1: bool_0, bool_0: bool_0}
    list_0 = [bool_0, dict_0, bool_1, bool_1]
    bytes_0 = b'\x9b\xf1\xabB\x15F\x12E"}\x97R'
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5358():
    bytes_0 = b'\xf8\xe8\xbf\x7f\xdc\xaa"|\xb1ps'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5359():
    complex_0 = -312.62 + 451.39218j
    list_0 = [complex_0, complex_0, complex_0, complex_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5360():
    bytes_0 = b"\xbd~m"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5361():
    str_0 = "{Fmb=I"
    list_0 = [str_0, str_0]
    module_0.get_new_command(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5362():
    str_0 = '~K\r""'
    set_0 = {str_0}
    list_0 = [set_0, set_0, str_0]
    list_1 = []
    module_0.match(list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5363():
    bytes_0 = b"\x1ag\xb9j\xdcI}\xf1>"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5364():
    int_0 = 1790
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5365():
    bytes_0 = b"\xb4W\x06\xd5L\xa4P\x1d\x05\x05\x13L\xa5\x08K\xfa\x98\xd1"
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5366():
    bytes_0 = b"\xbe ;\x85"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5367():
    bytes_0 = b"\xbar\xf8"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5368():
    bytes_0 = b"\x16\x9e"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5369():
    bytes_0 = b""
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5370():
    float_0 = 1350.8
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5371():
    bool_0 = True
    tuple_0 = (bool_0,)
    module_0.get_new_command(bool_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5372():
    str_0 = "1WvFq,<.&3X"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5373():
    str_0 = "WwX9\tLEWkbL\tzfa4j$.\r"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5374():
    int_0 = -1876
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5375():
    str_0 = "dK\x0b`"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5376():
    str_0 = "~>"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    module_1.object(*list_0, **str_0)


@pytest.mark.xfail(strict=True)
def test_case_5377():
    bytes_0 = b"\x8d\xbc_\xd0pY\xf9h\x8ey"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5378():
    str_0 = "3%XnY}]ceU"
    dict_0 = {str_0: str_0}
    tuple_0 = (str_0, str_0, dict_0)
    tuple_1 = (tuple_0,)
    module_0.match(tuple_1, tuple_1)


@pytest.mark.xfail(strict=True)
def test_case_5379():
    list_0 = []
    str_0 = "|{]#gy_9Nt"
    none_type_0 = None
    str_1 = ',PT"'
    dict_0 = {str_0: none_type_0, str_1: none_type_0, str_1: none_type_0}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5380():
    str_0 = "P/-$(&HB@"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5381():
    bytes_0 = b"2\xc0\xd3\xd6\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5382():
    str_0 = "\rFAhSX|ix`\nL"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5383():
    str_0 = "u\tr$w`~}[VFu$kcxof"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5384():
    int_0 = -2804
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5385():
    str_0 = "?8iRx-5G[6s9T]^{ued@"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5386():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_0, bool_1}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5387():
    none_type_0 = None
    module_1.object(*none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5388():
    bool_0 = False
    str_0 = "sXGy"
    tuple_0 = (bool_0, bool_0, str_0)
    list_0 = [tuple_0, tuple_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5389():
    complex_0 = 2048.95504 + 2034j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5390():
    bytes_0 = b"\xd0\x9b\xbe\xf3"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5391():
    none_type_0 = None
    bytes_0 = b"\xa5]\xc8MG\x10e\x17d\x1c\xfc^"
    module_0.match(none_type_0, bytes_0)


def test_case_5392():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5393():
    complex_0 = -1857.22 + 146.582j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5394():
    float_0 = -810.4
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5395():
    bool_0 = True
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5396():
    str_0 = "c$weyr{8y6"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5397():
    str_0 = "\x0cm\tMD\\'s"
    module_0.match(str_0, str_0)


def test_case_5398():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5399():
    int_0 = 2011
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5400():
    int_0 = -3529
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5401():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    set_0 = {bool_0, bool_0}
    module_0.match(list_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5402():
    str_0 = "j7O*pjmQ&'[4N/|"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5403():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    list_1 = [bool_0, bool_0, bool_0, list_0]
    module_0.match(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5404():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5405():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    bool_1 = True
    tuple_0 = (dict_0, dict_0, bool_1)
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5406():
    float_0 = 2977.71
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5407():
    int_0 = -104
    tuple_0 = (int_0,)
    float_0 = 285.798641
    module_0.get_new_command(tuple_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5408():
    int_0 = 1358
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5409():
    str_0 = "I!iz.><\n[3\trJ`+>7\\a"
    list_0 = [str_0, str_0, str_0]
    module_1.object(*list_0)


def test_case_5410():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5411():
    complex_0 = -2817.822675 - 2210.865j
    float_0 = -3598.31603
    module_0.match(complex_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5412():
    bytes_0 = b"3\xce\xe1\x83\x0e\xdd3\x03Z\xfd\xdbi\xc2\xd7@Y"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5413():
    float_0 = -451.0
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5414():
    object_0 = module_1.object()
    set_0 = {object_0, object_0, object_0, object_0}
    module_0.get_new_command(object_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5415():
    str_0 = "p!DMii"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5416():
    int_0 = 2895
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5417():
    str_0 = "l\tY=PCBE/"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5418():
    int_0 = -30
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5419():
    int_0 = -1691
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5420():
    str_0 = "r7'Q"
    int_0 = -276
    list_0 = [str_0, str_0, str_0, int_0]
    module_1.object(*list_0, **list_0)


@pytest.mark.xfail(strict=True)
def test_case_5421():
    str_0 = "MKB"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5422():
    str_0 = '$2E"I#(|#}2)QI3CZ'
    int_0 = -2734
    bytes_0 = b"\xc4kovc\x9d\xbe\xe6\xb4\xaf\x1dM\xcf\xef\x89"
    dict_0 = {str_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (int_0, int_0, bytes_0, dict_0)
    tuple_1 = (str_0, tuple_0)
    none_type_0 = None
    module_0.get_new_command(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5423():
    int_0 = 258
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5424():
    bool_0 = False
    int_0 = 3267
    module_0.get_new_command(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5425():
    float_0 = -2418.758
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5426():
    none_type_0 = None
    int_0 = -1311
    module_0.match(none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5427():
    str_0 = "8!!u\\mk63"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5428():
    str_0 = "\nL0k06\t%jStwX-Gcy/v"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5429():
    bytes_0 = b"\xfea\n\xb3[r"
    list_0 = [bytes_0, bytes_0, bytes_0]
    bytes_1 = b"R\xf6'C\xfd}\xa2_\xb5}_\x04;\x19])\xe1\x87\xab\xb2"
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5430():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_1.object(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_5431():
    int_0 = -888
    list_0 = [int_0]
    module_0.match(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5432():
    int_0 = -561
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5433():
    complex_0 = -719.84 - 578.592j
    tuple_0 = (complex_0,)
    module_0.match(tuple_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5434():
    bool_0 = True
    bool_1 = True
    set_0 = {bool_1, bool_1}
    tuple_0 = (bool_0, set_0, set_0)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5435():
    bool_0 = False
    int_0 = 3406
    module_0.match(bool_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5436():
    dict_0 = {}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5437():
    str_0 = "~3#(~tDbwRC"
    str_1 = "B}[)i+I#"
    dict_0 = {str_0: str_0, str_1: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5438():
    bytes_0 = b"\xda\x8b\x11\x050q\x9c0Ar\xd9Y\xc9L"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5439():
    int_0 = 964
    list_0 = [int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5440():
    int_0 = -2563
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5441():
    int_0 = 1822
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5442():
    bool_0 = True
    list_0 = []
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5443():
    str_0 = "tMD."
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5444():
    bytes_0 = b"\x16}\x9aN"
    tuple_0 = (bytes_0,)
    module_0.get_new_command(tuple_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5445():
    float_0 = -432.0809
    float_1 = 965.624
    module_0.match(float_0, float_1)


@pytest.mark.xfail(strict=True)
def test_case_5446():
    float_0 = 1864.21923
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5447():
    bytes_0 = b"/V\x02\xdbb\xb4E*\xa7"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5448():
    float_0 = 928.97023
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5449():
    float_0 = -1913.54828
    bool_0 = True
    tuple_0 = (float_0, bool_0)
    set_0 = {tuple_0, float_0, bool_0, tuple_0}
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5450():
    int_0 = -2938
    bool_0 = False
    list_0 = [int_0, bool_0, bool_0, bool_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5451():
    complex_0 = -600.9737 - 421.081j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5452():
    int_0 = 1642
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5453():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5454():
    complex_0 = 2041.83 + 1026.977891j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5455():
    str_0 = "=>1>C"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5456():
    float_0 = 656.0763
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5457():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5458():
    int_0 = 1912
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5459():
    complex_0 = -158.7576 + 2677j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5460():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_1, bool_1: bool_0}
    module_0.match(dict_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_5461():
    bytes_0 = b"\x15j\x1a{\x97\x13v\xc4\x99\x07\xef"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5462():
    object_0 = module_1.object()
    bool_0 = False
    module_0.get_new_command(object_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5463():
    str_0 = "SxWAR:^`q\n{U@w;ya"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5464():
    bytes_0 = b"~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5465():
    int_0 = -2657
    set_0 = {int_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5466():
    complex_0 = 1758.43985 - 2091.441j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5467():
    tuple_0 = ()
    none_type_0 = None
    module_0.get_new_command(tuple_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5468():
    set_0 = set()
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5469():
    str_0 = "3d^Tk#7{"
    module_0.match(str_0, str_0)


def test_case_5470():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5471():
    bytes_0 = b"\x00`\xf1\x9b\x13\\@\xa1a3Ex"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5472():
    str_0 = "vpH^o4w[>pYN 7v|Y2~?"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5473():
    int_0 = -1104
    complex_0 = 1732.621593 - 1228.694402j
    module_0.get_new_command(int_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5474():
    float_0 = 466.536
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5475():
    bytes_0 = b"A\x02\x85\xa4\x93|Q\x9e\x89\x12\xf3\\\xf8\xdc"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5476():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5477():
    bool_0 = False
    str_0 = ""
    list_0 = [bool_0, bool_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5478():
    str_0 = '0mD?I#mU\t\njOLp-W"'
    tuple_0 = (str_0, str_0, str_0)
    bytes_0 = b"\xb9\x91\xe6\xd0\x98\x9d'\x11P"
    set_0 = {tuple_0, bytes_0, str_0, str_0}
    module_0.match(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5479():
    str_0 = "sT^!jj%7nx(0,T+K"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5480():
    bool_0 = False
    bool_1 = True
    dict_0 = {bool_0: bool_1, bool_1: bool_0, bool_0: bool_1}
    module_0.get_new_command(dict_0, dict_0)


def test_case_5481():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5482():
    bytes_0 = b"\xab>"
    bool_0 = True
    module_0.get_new_command(bool_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5483():
    bool_0 = False
    set_0 = {bool_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5484():
    int_0 = -2982
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5485():
    complex_0 = 2622.2638 + 861j
    dict_0 = {complex_0: complex_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5486():
    bytes_0 = b"\xd0I+\xa2%\x9b\xe8\xcdD<\xc7\xba\x99` Y\x16"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5487():
    int_0 = -1662
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.match(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5488():
    bytes_0 = b"\xa3B\xcfQe\rw\x86~"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5489():
    float_0 = -754.0
    bool_0 = True
    module_0.match(float_0, bool_0)


def test_case_5490():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5491():
    bytes_0 = b'\xf0,"\xbbbY\x01bK\x05\xa5;J\x0c'
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5492():
    bytes_0 = b"\x94\xff\xef\xf4\xbb\x86\x88>"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.match(list_0, bytes_0)


def test_case_5493():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5494():
    str_0 = "J}*EGY]"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5495():
    bytes_0 = b"\x1f\x15\xde\xc4\xc4ZQ\x1a=M;\xf1"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5496():
    complex_0 = 2210.356 + 2232.0838j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5497():
    complex_0 = 4354.885765 + 1693.5298j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5498():
    int_0 = -1354
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5499():
    int_0 = -3451
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5500():
    bytes_0 = b"k\x12\xfb\xa4j\xdc"
    list_0 = [bytes_0, bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5501():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5502():
    bool_0 = True
    none_type_0 = None
    module_0.get_new_command(bool_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5503():
    float_0 = -3775.67601
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5504():
    str_0 = "Q\n3),&uFE(Le\x0c=2mqz^T"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5505():
    int_0 = 1737
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5506():
    int_0 = 186
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5507():
    int_0 = -770
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5508():
    complex_0 = 4362.46 + 1408.6698j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5509():
    bytes_0 = b"g\x9e"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5510():
    int_0 = 2509
    str_0 = ""
    tuple_0 = (int_0, str_0)
    module_0.get_new_command(tuple_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5511():
    int_0 = 4017
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5512():
    float_0 = 1580.8
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5513():
    str_0 = "&G9yS*0\x0b_dM;2ZT!ZH"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5514():
    bytes_0 = b"\xd1\x00)\xd8\x9a\xbb\xad\xe9d\xf29\xb1\xc3\x9c\x08W"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5515():
    str_0 = "{"
    list_0 = [str_0]
    list_1 = [list_0]
    module_0.get_new_command(list_1, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5516():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5517():
    int_0 = -1567
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5518():
    str_0 = "_\\7bN\\h[wb;8-}W"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5519():
    bytes_0 = b"1\x8b\xe3\x8c\x9b\x0e=I\xc4T\xbf\x1f\xb0\x00\x99\x1c\x9b\xaa0"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5520():
    str_0 = "[C"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5521():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    module_0.get_new_command(list_1, list_1)


@pytest.mark.xfail(strict=True)
def test_case_5522():
    str_0 = " BymYes-I\nFr|"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5523():
    bytes_0 = b"\xaf\x87m\xa89\\S\\;\xb6\xb8\xae\rD\xd3\x15"
    dict_0 = {bytes_0: bytes_0}
    module_0.match(dict_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5524():
    bool_0 = True
    list_0 = [bool_0]
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: list_0}
    none_type_0 = None
    module_0.match(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5525():
    str_0 = "-sN!\\wV;b>$C|$,`m00"
    list_0 = [str_0, str_0]
    module_0.match(list_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5526():
    complex_0 = 1148.25 - 2905.8643j
    set_0 = {complex_0, complex_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5527():
    float_0 = -2433.2018
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5528():
    bool_0 = True
    module_0.get_new_command(bool_0, bool_0)


def test_case_5529():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5530():
    complex_0 = -1729.47739 + 2664.093805j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5531():
    float_0 = 2588.6077
    set_0 = {float_0}
    module_0.get_new_command(set_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5532():
    int_0 = -485
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5533():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0}
    module_0.get_new_command(set_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5534():
    int_0 = 199
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5535():
    bytes_0 = b"\x98f\x02/\xc6-\x7f\xb5\xfa\xdfk\xc3\xd5w"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5536():
    float_0 = 3118.9
    list_0 = [float_0]
    module_0.match(list_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5537():
    str_0 = "\r"
    dict_0 = {str_0: str_0, str_0: str_0}
    module_0.match(dict_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5538():
    str_0 = "!_"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5539():
    bool_0 = False
    str_0 = "]LX#\x0bsVos3\t U+xK"
    module_0.get_new_command(bool_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5540():
    str_0 = "a#bDyqu4q\x0c)"
    dict_0 = {str_0: str_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5541():
    complex_0 = 2617.034605 + 1903.727j
    none_type_0 = None
    module_0.match(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5542():
    int_0 = 1488
    bool_0 = False
    tuple_0 = (int_0, bool_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5543():
    complex_0 = -604 - 1655.085807j
    none_type_0 = None
    module_0.get_new_command(complex_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5544():
    int_0 = -75
    tuple_0 = (int_0,)
    module_0.match(tuple_0, tuple_0)


def test_case_5545():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5546():
    int_0 = 1098
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5547():
    bytes_0 = b"c\x18\x1f\xb0\x01\x7fY\x93\xef\x80v\x0b\x8aB\xce"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5548():
    bytes_0 = b"\x9c\xf4\xc9\x19\x03\xa9\xc5\\aS\xf4\x99~\xcck"
    set_0 = {bytes_0}
    tuple_0 = (set_0, set_0)
    module_0.get_new_command(tuple_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5549():
    str_0 = ",e)e\r(W)YL~."
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5550():
    set_0 = set()
    int_0 = 2028
    list_0 = [int_0]
    tuple_0 = (set_0, int_0, int_0, list_0)
    module_0.match(tuple_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5551():
    str_0 = "3z"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5552():
    int_0 = 877
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5553():
    bytes_0 = b"\x032\x98\xea"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5554():
    str_0 = "v:<p$2H\x0b}9?_9?B`"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5555():
    float_0 = 1010.72326
    set_0 = {float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5556():
    int_0 = 2767
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5557():
    int_0 = 520
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5558():
    none_type_0 = None
    bool_0 = False
    module_0.match(none_type_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5559():
    float_0 = -2990.1
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5560():
    float_0 = 3761.399447
    none_type_0 = None
    module_0.match(float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5561():
    bytes_0 = b"\x80sbU\xf1\xc3\xd4_7\x83\xc2Ol\xec\xb3\xd8\x08"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5562():
    float_0 = -721.948056
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5563():
    bytes_0 = b"\x19o\xed\xdb\xea\xe7\xa4\x05"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


def test_case_5564():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5565():
    str_0 = "}"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5566():
    str_0 = "%\tZ"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5567():
    bytes_0 = b"\xe2oW'\xff\x8e\x0f"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5568():
    int_0 = -2018
    tuple_0 = (int_0,)
    bool_0 = True
    dict_0 = {tuple_0: int_0, int_0: tuple_0, int_0: tuple_0, bool_0: bool_0}
    dict_1 = {tuple_0: dict_0, int_0: int_0, int_0: dict_0, int_0: dict_0}
    module_0.match(dict_1, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5569():
    str_0 = "I?22Mp/~2K$2h>Do"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5570():
    set_0 = set()
    bytes_0 = b'(\xac\x86/\xa9\x14\xc1"E\xb4\xe6\xf9\x1c}\xa0\xc2\x8b\xde\x0b'
    module_0.get_new_command(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5571():
    complex_0 = -1702.415 + 743.99079j
    module_0.get_new_command(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5572():
    bool_0 = False
    module_1.object(**bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5573():
    int_0 = 2279
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5574():
    str_0 = "\tl,$I\x0b\r"
    module_1.object(**str_0)


@pytest.mark.xfail(strict=True)
def test_case_5575():
    bytes_0 = b"\xe8v\xa6"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5576():
    int_0 = 904
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5577():
    list_0 = []
    bytes_0 = b"\xb5-\x95#B\xbaD\x04\x16\xe8\nG."
    module_0.match(list_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5578():
    complex_0 = -322.72207 - 1592.6235j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5579():
    float_0 = 1929.3
    set_0 = {float_0, float_0, float_0, float_0}
    none_type_0 = None
    module_0.get_new_command(set_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5580():
    str_0 = "->dWmms/$@|}--$t]}fe"
    list_0 = [str_0]
    module_0.get_new_command(list_0, str_0)


def test_case_5581():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5582():
    int_0 = -235
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5583():
    bytes_0 = b"\xed\xdfB"
    module_0.get_new_command(bytes_0, bytes_0)


def test_case_5584():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5585():
    bytes_0 = b"\xdbtg3\xfe\xc5\xd7\x05\xf2\xe9!f\x95\xc9\x04\x9b\xc3\xeeL"
    list_0 = [bytes_0, bytes_0]
    module_0.get_new_command(list_0, list_0)


def test_case_5586():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5587():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5588():
    bytes_0 = b"y#\x10\x08\x97\xe6\xecti\xa62\xe6\xb1\x1f\xf5\xa3\x17\xc2"
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    bytes_1 = b"\x93Z?\x8f\xe6(x\x03\xa9\x9b\xd7\x04\xbe\x12\xa7\xc7\x04\xb3\xba\xab"
    module_0.get_new_command(list_0, bytes_1)


@pytest.mark.xfail(strict=True)
def test_case_5589():
    int_0 = -284
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5590():
    str_0 = "*QD6&Um%JY"
    module_0.match(str_0, str_0)


def test_case_5591():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5592():
    str_0 = "=j)I"
    list_0 = [str_0, str_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5593():
    str_0 = "o__=<w*J'EUR|~Pm0;/"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5594():
    bytes_0 = b"\x80R\xaeB\xf0e\x95\x82L\tEn\xf7\x83\xc9"
    complex_0 = -2309.1 - 1408.672j
    module_0.get_new_command(bytes_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5595():
    str_0 = "X5=$*y\rLCTcJo"
    bytes_0 = b"A\x1a"
    module_0.match(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5596():
    bytes_0 = b"\xa7\xdb\xf1Y[\xccez\xfbd\xc7I\x1e\x07H*\xc1\xdb\x060"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5597():
    float_0 = 1134.64
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5598():
    str_0 = "\\\ri!g Q"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5599():
    str_0 = ">9"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5600():
    bytes_0 = b"\xaaQ5S\x1dF\xb2\xbc\xfe\xf4"
    bytes_1 = b"]\xf0\x16\x07\x8d+@\xb5\xddg'/\xe9\xdc\xf1\x90\xe0\x9as"
    list_0 = [bytes_0, bytes_1]
    complex_0 = 1106 + 2397.161j
    module_0.match(list_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5601():
    int_0 = 1597
    set_0 = {int_0}
    module_0.get_new_command(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5602():
    complex_0 = -891.413 - 4116.4j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5603():
    bytes_0 = b"N\xd2\xfc\x8e"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5604():
    str_0 = "_If!]Y)X~$~kNhEh&2E"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5605():
    dict_0 = {}
    bool_0 = True
    module_0.get_new_command(dict_0, bool_0)


def test_case_5606():
    pass


def test_case_5607():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5608():
    str_0 = "/w-i\t\rgD[x:<V\t}"
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5609():
    int_0 = 158
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5610():
    tuple_0 = ()
    list_0 = [tuple_0]
    module_1.object(*list_0)


def test_case_5611():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5612():
    float_0 = 2140.5478
    module_0.get_new_command(float_0, float_0)


def test_case_5613():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5614():
    str_0 = "(i-\x0cR"
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(set_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5615():
    bytes_0 = b"\xfd7\xb5\x8bs\xba\\\x1f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5616():
    int_0 = -487
    list_0 = [int_0]
    module_0.get_new_command(list_0, int_0)


def test_case_5617():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5618():
    complex_0 = 1699.9 - 1811j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5619():
    bytes_0 = b"\x88k\xdd"
    bool_0 = True
    tuple_0 = (bytes_0, bool_0)
    module_0.match(tuple_0, bool_0)


def test_case_5620():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5621():
    dict_0 = {}
    str_0 = "v\\WS"
    module_0.match(dict_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5622():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5623():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    module_0.match(bool_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5624():
    int_0 = 439
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5625():
    tuple_0 = ()
    list_0 = [tuple_0]
    set_0 = set()
    tuple_1 = (list_0, set_0)
    none_type_0 = None
    module_0.match(tuple_1, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5626():
    str_0 = "xGFhVq/Vl[\x0b]ewD_q 6f"
    none_type_0 = None
    module_0.match(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5627():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    bool_1 = False
    tuple_0 = (bool_1, bool_1)
    tuple_1 = (list_0, bool_1, bool_1, tuple_0)
    module_0.get_new_command(tuple_1, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5628():
    none_type_0 = None
    bytes_0 = b"^$\xfe\x99}\x1d\x86u\xd9\n\xd8%\xd9?\xfbY-4\xbda"
    module_0.get_new_command(none_type_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5629():
    bytes_0 = b">\r,\xad\xd5r-3\xde\xbb\xdfeZ"
    set_0 = {bytes_0, bytes_0, bytes_0}
    module_0.match(set_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5630():
    str_0 = "w1N&\tW"
    module_0.get_new_command(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5631():
    int_0 = 4959
    bool_0 = True
    module_0.match(int_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5632():
    bytes_0 = b"\xb9\x84b"
    list_0 = [bytes_0]
    module_0.get_new_command(list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5633():
    int_0 = -2438
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5634():
    int_0 = 1784
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5635():
    str_0 = "f#dU\x0cZr4k7fQw;I"
    bool_0 = True
    list_0 = [bool_0, str_0]
    str_1 = "V\\5&3Seu:N5"
    dict_0 = {str_0: list_0, str_1: str_1}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5636():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5637():
    bool_0 = False
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5638():
    object_0 = module_1.object()
    list_0 = [object_0]
    module_0.get_new_command(list_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5639():
    bool_0 = False
    bool_1 = True
    set_0 = {bool_0, bool_1}
    tuple_0 = (bool_0, set_0, set_0)
    module_0.match(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5640():
    bytes_0 = b"\xf9\xae\x8a\xec\x8d\xf8?0Q\xc6\x1c\x0c"
    bool_0 = True
    module_0.get_new_command(bytes_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5641():
    bytes_0 = b"O\xf6\xc9\xcf\xd6\xc6n\x17\xa1\xdc\x00\x05Z"
    none_type_0 = None
    module_0.match(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5642():
    float_0 = -1127.357
    module_0.get_new_command(float_0, float_0)


def test_case_5643():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5644():
    int_0 = 2667
    none_type_0 = None
    module_0.match(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5645():
    bytes_0 = b"\\\x84t/Y\xcb\xbb\xf3\xca\xb7\xff9"
    str_0 = "&bb5;Ifd\x0bUZW@ovyU1"
    set_0 = {bytes_0, bytes_0, bytes_0, str_0}
    list_0 = [set_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5646():
    bytes_0 = b"B\x10'~\xe9\x94z\xf7"
    module_0.match(bytes_0, bytes_0)


def test_case_5647():
    object_0 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_5648():
    str_0 = "="
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5649():
    int_0 = -1789
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5650():
    none_type_0 = None
    list_0 = [none_type_0, none_type_0]
    dict_0 = {}
    module_1.object(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5651():
    bool_0 = True
    int_0 = -2983
    dict_0 = {bool_0: bool_0, int_0: int_0, int_0: int_0, bool_0: int_0}
    tuple_0 = (bool_0, int_0, dict_0)
    module_0.match(tuple_0, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5652():
    str_0 = "{f|S2z^x3~+;"
    set_0 = {str_0}
    bool_0 = False
    module_0.get_new_command(set_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5653():
    str_0 = "-Q37d1UTV;ZK\x0cc\rK"
    str_1 = "(V7/rpdoSu@fT4#Q"
    module_0.get_new_command(str_0, str_1)


def test_case_5654():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5655():
    str_0 = "s}YnIf@]R}D^"
    tuple_0 = ()
    module_0.match(str_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5656():
    str_0 = "*p_KrkIAqo):6\r[\r."
    set_0 = {str_0, str_0, str_0, str_0}
    module_0.match(str_0, set_0)


def test_case_5657():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5658():
    float_0 = -29.19
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5659():
    bool_0 = False
    float_0 = -1668.0
    module_0.get_new_command(bool_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5660():
    int_0 = -3161
    tuple_0 = ()
    tuple_1 = (int_0, int_0, tuple_0)
    module_0.get_new_command(tuple_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5661():
    float_0 = -538.84
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5662():
    bytes_0 = b"\xc5\\"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5663():
    float_0 = -2718.966
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5664():
    bytes_0 = b"\xcaI\xc6<(\xef\xf4\xa5\xdc\xa9\x9cQ\xd4A\x18"
    str_0 = "PQ@Zn"
    list_0 = [str_0]
    tuple_0 = (bytes_0, list_0, str_0)
    tuple_1 = (tuple_0, bytes_0)
    module_0.match(tuple_1, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5665():
    bool_0 = False
    tuple_0 = (bool_0,)
    module_0.match(tuple_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5666():
    str_0 = "sCf"
    none_type_0 = None
    dict_0 = {str_0: none_type_0}
    module_1.object(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5667():
    float_0 = 4048.9
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5668():
    bytes_0 = b'\x15"\xf4\xafrII\x9f{'
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5669():
    int_0 = -899
    list_0 = [int_0, int_0, int_0]
    module_0.get_new_command(int_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_5670():
    none_type_0 = None
    set_0 = set()
    module_0.get_new_command(none_type_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5671():
    float_0 = 2518.71773
    module_0.get_new_command(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5672():
    bytes_0 = b"\xca\xcdv\xc4\xba#G\xff"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5673():
    dict_0 = {}
    set_0 = set()
    str_0 = "(j|BU7i]~,"
    tuple_0 = (dict_0, set_0, str_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5674():
    bytes_0 = b"\x17\xf4K\x1d\xf9\x03"
    int_0 = 148
    module_0.match(bytes_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5675():
    bytes_0 = b".\xb2\xf2\xda\xb4\x9f\n$\xd7n\xe7\x04"
    set_0 = {bytes_0}
    tuple_0 = (bytes_0, set_0)
    module_0.get_new_command(tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_5676():
    int_0 = -765
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5677():
    bytes_0 = b"K3\xdfW\x83Y\xc4\xc2"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5678():
    bytes_0 = b"\xf6\xde\xca\xbfq"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5679():
    float_0 = -492.41
    str_0 = "9JZCRj\rS\\9)^J+|D"
    module_0.get_new_command(float_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5680():
    int_0 = 354
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5681():
    float_0 = -613.08486
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5682():
    str_0 = 'RC 31Y^G/0yfP/!+"k\t'
    module_0.match(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_5683():
    int_0 = -2649
    module_0.match(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5684():
    complex_0 = 27.953412 - 686.71532j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5685():
    float_0 = 1027.3655
    set_0 = {float_0, float_0}
    module_0.match(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_5686():
    str_0 = ".AZ52fakMT=*=)~t.`Rh"
    none_type_0 = None
    module_0.get_new_command(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5687():
    bytes_0 = b"\x8cO\x14\xa3\x8ab\xa5M\x0e\xf0\xf5"
    list_0 = [bytes_0]
    module_0.match(list_0, list_0)


def test_case_5688():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5689():
    float_0 = 1597.537813
    module_0.match(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_5690():
    complex_0 = -1294.43 + 1033j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5691():
    bool_0 = True
    module_0.match(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5692():
    int_0 = -1303
    list_0 = [int_0, int_0]
    none_type_0 = None
    module_0.match(list_0, none_type_0)


def test_case_5693():
    pass


@pytest.mark.xfail(strict=True)
def test_case_5694():
    complex_0 = -915.094774 - 3153.3656j
    module_0.match(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_5695():
    int_0 = -391
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5696():
    bytes_0 = b"\x02\x83\xe1\x0b]\x9d@~$f"
    module_0.match(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5697():
    bytes_0 = b">\xc9\xe1\xad\xa84\x1e\x1fR\xb2\x95v"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5698():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    none_type_0 = None
    module_0.get_new_command(list_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5699():
    none_type_0 = None
    module_0.match(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5700():
    bytes_0 = b"\x9f\xcdN\xed\x01\x9ex\xfe"
    module_0.get_new_command(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5701():
    int_0 = 3581
    list_0 = [int_0, int_0, int_0, int_0]
    module_0.get_new_command(list_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5702():
    int_0 = -5034
    module_0.get_new_command(int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_5703():
    object_0 = module_1.object()
    dict_0 = {object_0: object_0}
    none_type_0 = None
    module_0.get_new_command(dict_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5704():
    bool_0 = True
    module_1.object(*bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5705():
    set_0 = set()
    object_0 = module_1.object()
    module_0.get_new_command(set_0, object_0)


@pytest.mark.xfail(strict=True)
def test_case_5706():
    bytes_0 = b"W\xca"
    none_type_0 = None
    module_0.get_new_command(bytes_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5707():
    int_0 = -1638
    none_type_0 = None
    module_0.get_new_command(int_0, none_type_0)
